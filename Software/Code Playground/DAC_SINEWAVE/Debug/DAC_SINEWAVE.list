
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e48  08004e48  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e50  08004e50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d80  20000074  08004ecc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002df4  08004ecc  00022df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115a4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024f6  00000000  00000000  00031648  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00033b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00034a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e95  00000000  00000000  000357a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb49  00000000  00000000  0005863d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2754  00000000  00000000  00064186  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001368da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  00136958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004dc0 	.word	0x08004dc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004dc0 	.word	0x08004dc0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 80005c4:	2201      	movs	r2, #1
 80005c6:	4909      	ldr	r1, [pc, #36]	; (80005ec <init_AX25+0x2c>)
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <init_AX25+0x30>)
 80005ca:	f003 f96d 	bl	80038a8 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <init_AX25+0x34>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <init_AX25+0x34>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <init_AX25+0x34>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <init_AX25+0x34>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20001424 	.word	0x20001424
 80005f0:	20002b6c 	.word	0x20002b6c
 80005f4:	20001418 	.word	0x20001418

080005f8 <UART2_EXCEPTION_CALLBACK>:
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 80005fc:	2201      	movs	r2, #1
 80005fe:	491d      	ldr	r1, [pc, #116]	; (8000674 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8000600:	481d      	ldr	r0, [pc, #116]	; (8000678 <UART2_EXCEPTION_CALLBACK+0x80>)
 8000602:	f003 f951 	bl	80038a8 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800060e:	7b1b      	ldrb	r3, [r3, #12]
 8000610:	2bc0      	cmp	r3, #192	; 0xc0
 8000612:	d104      	bne.n	800061e <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	3301      	adds	r3, #1
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800061c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <UART2_EXCEPTION_CALLBACK+0x88>)
 8000626:	4413      	add	r3, r2
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800062a:	7b12      	ldrb	r2, [r2, #12]
 800062c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a11      	ldr	r2, [pc, #68]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000636:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	2b01      	cmp	r3, #1
 800063e:	dd16      	ble.n	800066e <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <UART2_EXCEPTION_CALLBACK+0x90>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800065c:	2201      	movs	r2, #1
 800065e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000666:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]

	  }
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20001424 	.word	0x20001424
 8000678:	20002b6c 	.word	0x20002b6c
 800067c:	20001418 	.word	0x20001418
 8000680:	20001426 	.word	0x20001426
 8000684:	20002b14 	.word	0x20002b14
 8000688:	20000091 	.word	0x20000091

0800068c <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8000696:	f000 f999 	bl	80009cc <initOUTData>

	//Set hardware properly
	mode = modeStart;
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <initProgram+0x58>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	7013      	strb	r3, [r2, #0]
	toggleMode();
 80006a0:	f000 f826 	bl	80006f0 <toggleMode>
	toggleMode();
 80006a4:	f000 f824 	bl	80006f0 <toggleMode>

	if (mode) {
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <initProgram+0x58>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d009      	beq.n	80006c4 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <initProgram+0x5c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2264      	movs	r2, #100	; 0x64
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <initProgram+0x60>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c2:	e008      	b.n	80006d6 <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <initProgram+0x5c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <initProgram+0x60>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2268      	movs	r2, #104	; 0x68
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 80006d6:	f7ff ff73 	bl	80005c0 <init_AX25>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20002b14 	.word	0x20002b14
 80006e8:	20002b2c 	.word	0x20002b2c
 80006ec:	20002874 	.word	0x20002874

080006f0 <toggleMode>:



void toggleMode() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80006f4:	2006      	movs	r0, #6
 80006f6:	f001 f884 	bl	8001802 <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <toggleMode+0xa8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf14      	ite	ne
 8000702:	2301      	movne	r3, #1
 8000704:	2300      	moveq	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f083 0301 	eor.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <toggleMode+0xa8>)
 8000716:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <toggleMode+0xa8>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	2120      	movs	r1, #32
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <toggleMode+0xac>)
 8000722:	f001 fe45 	bl	80023b0 <HAL_GPIO_WritePin>
	midbit = false;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <toggleMode+0xb0>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 800072c:	481d      	ldr	r0, [pc, #116]	; (80007a4 <toggleMode+0xb4>)
 800072e:	f002 fbd4 	bl	8002eda <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <toggleMode+0xb4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 800073a:	481b      	ldr	r0, [pc, #108]	; (80007a8 <toggleMode+0xb8>)
 800073c:	f002 fbcd 	bl	8002eda <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <toggleMode+0xb8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <toggleMode+0xa8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <toggleMode+0xb4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
 800075a:	e015      	b.n	8000788 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <toggleMode+0xbc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f242 7210 	movw	r2, #10000	; 0x2710
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <toggleMode+0xb4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2268      	movs	r2, #104	; 0x68
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <toggleMode+0xb8>)
 8000770:	f002 fb8f 	bl	8002e92 <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <toggleMode+0xb4>)
 8000776:	f002 fbdb 	bl	8002f30 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800077a:	2100      	movs	r1, #0
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <toggleMode+0xc0>)
 800077e:	f001 f87c 	bl	800187a <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000782:	2006      	movs	r0, #6
 8000784:	f001 f82f 	bl	80017e6 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <toggleMode+0xac>)
 8000790:	f001 fe0e 	bl	80023b0 <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20002b14 	.word	0x20002b14
 800079c:	40020000 	.word	0x40020000
 80007a0:	20000090 	.word	0x20000090
 80007a4:	20002874 	.word	0x20002874
 80007a8:	20002dac 	.word	0x20002dac
 80007ac:	20002b2c 	.word	0x20002b2c
 80007b0:	20002b18 	.word	0x20002b18

080007b4 <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	if(canWrite){
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <loadPeriodBuffer+0x64>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d01d      	beq.n	8000800 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <loadPeriodBuffer+0x68>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <loadPeriodBuffer+0x6c>)
 80007ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <loadPeriodBuffer+0x68>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <loadPeriodBuffer+0x68>)
 80007dc:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <loadPeriodBuffer+0x68>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	2b7f      	cmp	r3, #127	; 0x7f
 80007e4:	d902      	bls.n	80007ec <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <loadPeriodBuffer+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <loadPeriodBuffer+0x68>)
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <loadPeriodBuffer+0x70>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d106      	bne.n	8000806 <loadPeriodBuffer+0x52>
			canWrite = false;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <loadPeriodBuffer+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e002      	b.n	8000806 <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <loadPeriodBuffer+0x74>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <loadPeriodBuffer+0x78>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	20000000 	.word	0x20000000
 800081c:	200000a6 	.word	0x200000a6
 8000820:	20002914 	.word	0x20002914
 8000824:	200000a8 	.word	0x200000a8
 8000828:	20000092 	.word	0x20000092
 800082c:	200000a4 	.word	0x200000a4

08000830 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	if (mode) {
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <Tim3IT+0x54>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <Tim3IT+0x14>
		midbit = false;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <Tim3IT+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 8000842:	e01c      	b.n	800087e <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <Tim3IT+0x5c>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d112      	bne.n	8000872 <Tim3IT+0x42>
			if(signal_valid){
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <Tim3IT+0x60>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00a      	beq.n	800086a <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ffac 	bl	80007b4 <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <Tim3IT+0x64>)
 800085e:	f002 fb3c 	bl	8002eda <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <Tim3IT+0x64>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <Tim3IT+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
}
 8000870:	e005      	b.n	800087e <Tim3IT+0x4e>
			signal_detect_decay--;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <Tim3IT+0x5c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <Tim3IT+0x5c>)
 800087c:	801a      	strh	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20002b14 	.word	0x20002b14
 8000888:	20000090 	.word	0x20000090
 800088c:	200000aa 	.word	0x200000aa
 8000890:	200000ac 	.word	0x200000ac
 8000894:	20002dac 	.word	0x20002dac

08000898 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <FreqCounterPinEXTI+0xc0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <FreqCounterPinEXTI+0xc4>)
 80008a8:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <FreqCounterPinEXTI+0xc4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <FreqCounterPinEXTI+0xc8>)
 80008b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008b4:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 80008b6:	4b29      	ldr	r3, [pc, #164]	; (800095c <FreqCounterPinEXTI+0xc4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff7a 	bl	80007b4 <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <FreqCounterPinEXTI+0xcc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a28      	ldr	r2, [pc, #160]	; (8000968 <FreqCounterPinEXTI+0xd0>)
 80008c6:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f240 726c 	movw	r2, #1900	; 0x76c
 80008ce:	4293      	cmp	r3, r2
 80008d0:	dd09      	ble.n	80008e6 <FreqCounterPinEXTI+0x4e>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80008d8:	4293      	cmp	r3, r2
 80008da:	dc04      	bgt.n	80008e6 <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <FreqCounterPinEXTI+0xcc>)
 80008de:	f640 0298 	movw	r2, #2200	; 0x898
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e011      	b.n	800090a <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80008ec:	dd09      	ble.n	8000902 <FreqCounterPinEXTI+0x6a>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f240 52db 	movw	r2, #1499	; 0x5db
 80008f4:	4293      	cmp	r3, r2
 80008f6:	dc04      	bgt.n	8000902 <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <FreqCounterPinEXTI+0xcc>)
 80008fa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	e003      	b.n	800090a <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <FreqCounterPinEXTI+0xcc>)
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <FreqCounterPinEXTI+0xcc>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <FreqCounterPinEXTI+0xd0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	429a      	cmp	r2, r3
 8000914:	d104      	bne.n	8000920 <FreqCounterPinEXTI+0x88>
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <FreqCounterPinEXTI+0xcc>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091e:	d107      	bne.n	8000930 <FreqCounterPinEXTI+0x98>
		edges = 0;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <FreqCounterPinEXTI+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <FreqCounterPinEXTI+0xd8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
 800092e:	e004      	b.n	800093a <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <FreqCounterPinEXTI+0xd4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a0d      	ldr	r2, [pc, #52]	; (800096c <FreqCounterPinEXTI+0xd4>)
 8000938:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <FreqCounterPinEXTI+0xdc>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <FreqCounterPinEXTI+0xe0>)
 8000942:	2208      	movs	r2, #8
 8000944:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <FreqCounterPinEXTI+0xc0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20002b2c 	.word	0x20002b2c
 800095c:	20000098 	.word	0x20000098
 8000960:	00989680 	.word	0x00989680
 8000964:	200000a0 	.word	0x200000a0
 8000968:	2000009c 	.word	0x2000009c
 800096c:	20000094 	.word	0x20000094
 8000970:	20002dac 	.word	0x20002dac
 8000974:	200000ac 	.word	0x200000ac
 8000978:	200000aa 	.word	0x200000aa

0800097c <generateBitstream>:
	}

	HAL_TIM_Base_Stop(&htim3);
	return wave_start;
}
void generateBitstream() {
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <generateBitstream+0x4c>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <generateBitstream+0x4c>)
 8000988:	2201      	movs	r2, #1
 800098a:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <generateBitstream+0x4c>)
 800098e:	2201      	movs	r2, #1
 8000990:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <generateBitstream+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <generateBitstream+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <generateBitstream+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <generateBitstream+0x4c>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <generateBitstream+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <generateBitstream+0x4c>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <generateBitstream+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	725a      	strb	r2, [r3, #9]

}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20002868 	.word	0x20002868

080009cc <initOUTData>:
void initOUTData() {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 80009d0:	f7ff ffd4 	bl	800097c <generateBitstream>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fd55 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f85d 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 fa2d 	bl	8000e44 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ea:	f000 fa0b 	bl	8000e04 <MX_DMA_Init>
  MX_DAC_Init();
 80009ee:	f000 f8c5 	bl	8000b7c <MX_DAC_Init>
  MX_TIM2_Init();
 80009f2:	f000 f8ed 	bl	8000bd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009f6:	f000 f937 	bl	8000c68 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80009fa:	f000 f9d1 	bl	8000da0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80009fe:	f000 f981 	bl	8000d04 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <main+0xac>)
 8000a04:	f002 fa45 	bl	8002e92 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000a08:	481f      	ldr	r0, [pc, #124]	; (8000a88 <main+0xb0>)
 8000a0a:	f002 fa91 	bl	8002f30 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8000a0e:	f000 faf9 	bl	8001004 <uart_gpio_init>

	initProgram(false);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fe3a 	bl	800068c <initProgram>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//tx_rx();

		int time = htim4.Instance->CNT;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <main+0xb4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	607b      	str	r3, [r7, #4]
		if(time >5800){
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f241 62a8 	movw	r2, #5800	; 0x16a8
 8000a26:	4293      	cmp	r3, r2
 8000a28:	dd16      	ble.n	8000a58 <main+0x80>
			sprintf(uartData, "MAYBE A FLAG\n");
 8000a2a:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <main+0xb8>)
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <main+0xbc>)
 8000a2e:	4614      	mov	r4, r2
 8000a30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a32:	6020      	str	r0, [r4, #0]
 8000a34:	6061      	str	r1, [r4, #4]
 8000a36:	60a2      	str	r2, [r4, #8]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	81a3      	strh	r3, [r4, #12]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <main+0xb8>)
 8000a3e:	f7ff fbe7 	bl	8000210 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	230a      	movs	r3, #10
 8000a48:	4911      	ldr	r1, [pc, #68]	; (8000a90 <main+0xb8>)
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <main+0xc0>)
 8000a4c:	f002 fe93 	bl	8003776 <HAL_UART_Transmit>
			HAL_Delay(10);
 8000a50:	200a      	movs	r0, #10
 8000a52:	f000 fd8d 	bl	8001570 <HAL_Delay>
 8000a56:	e7df      	b.n	8000a18 <main+0x40>
		} else {
			if(time >0){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dddc      	ble.n	8000a18 <main+0x40>
				sprintf(uartData, "time = %d\n",time);
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	490e      	ldr	r1, [pc, #56]	; (8000a9c <main+0xc4>)
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <main+0xb8>)
 8000a64:	f003 fdb0 	bl	80045c8 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <main+0xb8>)
 8000a6a:	f7ff fbd1 	bl	8000210 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	230a      	movs	r3, #10
 8000a74:	4906      	ldr	r1, [pc, #24]	; (8000a90 <main+0xb8>)
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <main+0xc0>)
 8000a78:	f002 fe7d 	bl	8003776 <HAL_UART_Transmit>
				HAL_Delay(10);
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f000 fd77 	bl	8001570 <HAL_Delay>
	while (1) {
 8000a82:	e7c9      	b.n	8000a18 <main+0x40>
 8000a84:	20002b2c 	.word	0x20002b2c
 8000a88:	20002874 	.word	0x20002874
 8000a8c:	20002dac 	.word	0x20002dac
 8000a90:	20001cb0 	.word	0x20001cb0
 8000a94:	08004dd8 	.word	0x08004dd8
 8000a98:	20002b6c 	.word	0x20002b6c
 8000a9c:	08004de8 	.word	0x08004de8

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2234      	movs	r2, #52	; 0x34
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fd81 	bl	80045b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <SystemClock_Config+0xd4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <SystemClock_Config+0xd4>)
 8000ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <SystemClock_Config+0xd4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <SystemClock_Config+0xd8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <SystemClock_Config+0xd8>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemClock_Config+0xd8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000b18:	235a      	movs	r3, #90	; 0x5a
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 ff2b 	bl	8002988 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b38:	f000 fa8c 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2302      	movs	r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fc5a 	bl	8002414 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b66:	f000 fa75 	bl	8001054 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3750      	adds	r7, #80	; 0x50
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_DAC_Init+0x4c>)
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <MX_DAC_Init+0x50>)
 8000b8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_DAC_Init+0x4c>)
 8000b92:	f000 fe50 	bl	8001836 <HAL_DAC_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b9c:	f000 fa5a 	bl	8001054 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ba0:	2324      	movs	r3, #36	; 0x24
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_DAC_Init+0x4c>)
 8000bb0:	f000 fea4 	bl	80018fc <HAL_DAC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000bba:	f000 fa4b 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20002b18 	.word	0x20002b18
 8000bcc:	40007400 	.word	0x40007400

08000bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c02:	2263      	movs	r2, #99	; 0x63
 8000c04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c14:	f002 f912 	bl	8002e3c <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 fa19 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c30:	f002 faaa 	bl	8003188 <HAL_TIM_ConfigClockSource>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fa0b 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c3e:	2320      	movs	r3, #32
 8000c40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c4c:	f002 fcb6 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c56:	f000 f9fd 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20002b2c 	.word	0x20002b2c

08000c68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <MX_TIM3_Init+0x98>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c8c:	2259      	movs	r2, #89	; 0x59
 8000c8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000c98:	f240 3241 	movw	r2, #833	; 0x341
 8000c9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000cac:	f002 f8c6 	bl	8002e3c <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 f9cd 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000cc8:	f002 fa5e 	bl	8003188 <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 f9bf 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM3_Init+0x94>)
 8000ce4:	f002 fc6a 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cee:	f000 f9b1 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20002874 	.word	0x20002874
 8000d00:	40000400 	.word	0x40000400

08000d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <MX_TIM4_Init+0x98>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d28:	2259      	movs	r2, #89	; 0x59
 8000d2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d46:	4814      	ldr	r0, [pc, #80]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d48:	f002 f878 	bl	8002e3c <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d52:	f000 f97f 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d64:	f002 fa10 	bl	8003188 <HAL_TIM_ConfigClockSource>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 f971 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_TIM4_Init+0x94>)
 8000d80:	f002 fc1c 	bl	80035bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d8a:	f000 f963 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20002dac 	.word	0x20002dac
 8000d9c:	40000800 	.word	0x40000800

08000da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <MX_USART2_UART_Init+0x60>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000dd8:	f002 fc80 	bl	80036dc <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f000 f937 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2026      	movs	r0, #38	; 0x26
 8000dec:	f000 fcdf 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df0:	2026      	movs	r0, #38	; 0x26
 8000df2:	f000 fcf8 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20002b6c 	.word	0x20002b6c
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_DMA_Init+0x3c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2010      	movs	r0, #16
 8000e2c:	f000 fcbf 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e30:	2010      	movs	r0, #16
 8000e32:	f000 fcd8 	bl	80017e6 <HAL_NVIC_EnableIRQ>

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a36      	ldr	r2, [pc, #216]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_GPIO_Init+0x130>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000ed0:	4829      	ldr	r0, [pc, #164]	; (8000f78 <MX_GPIO_Init+0x134>)
 8000ed2:	f001 fa6d 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2110      	movs	r1, #16
 8000eda:	4828      	ldr	r0, [pc, #160]	; (8000f7c <MX_GPIO_Init+0x138>)
 8000edc:	f001 fa68 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_GPIO_Init+0x13c>)
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_GPIO_Init+0x138>)
 8000ef6:	f001 f8c9 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000efa:	2301      	movs	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_GPIO_Init+0x140>)
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481a      	ldr	r0, [pc, #104]	; (8000f78 <MX_GPIO_Init+0x134>)
 8000f0e:	f001 f8bd 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000f12:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <MX_GPIO_Init+0x134>)
 8000f2c:	f001 f8ae 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8000f30:	2310      	movs	r3, #16
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_GPIO_Init+0x138>)
 8000f48:	f001 f8a0 	bl	800208c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2006      	movs	r0, #6
 8000f52:	f000 fc2c 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f56:	2006      	movs	r0, #6
 8000f58:	f000 fc45 	bl	80017e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f000 fc24 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f66:	2028      	movs	r0, #40	; 0x28
 8000f68:	f000 fc3d 	bl	80017e6 <HAL_NVIC_EnableIRQ>

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	10210000 	.word	0x10210000
 8000f84:	10110000 	.word	0x10110000

08000f88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d102      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8000f98:	f7ff fc4a 	bl	8000830 <Tim3IT>
	else
		__NOP();
}
 8000f9c:	e000      	b.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8000f9e:	bf00      	nop
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20002874 	.word	0x20002874

08000fac <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8000fbc:	f7ff fc6c 	bl	8000898 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc6:	d103      	bne.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x30>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8000fd0:	bf00      	nop
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000091 	.word	0x20000091

08000fe0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_UART_RxCpltCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8000ff2:	f7ff fb01 	bl	80005f8 <UART2_EXCEPTION_CALLBACK>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400

08001004 <uart_gpio_init>:

void uart_gpio_init()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <uart_gpio_init+0x48>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <uart_gpio_init+0x48>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <uart_gpio_init+0x48>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001026:	230c      	movs	r3, #12
 8001028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102e:	2301      	movs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001036:	2307      	movs	r3, #7
 8001038:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <uart_gpio_init+0x4c>)
 8001040:	f001 f824 	bl	800208c <HAL_GPIO_Init>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_MspInit+0x4c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f000 fb78 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <HAL_DAC_MspInit+0xdc>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d158      	bne.n	8001188 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_DAC_MspInit+0xe0>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a2d      	ldr	r2, [pc, #180]	; (8001194 <HAL_DAC_MspInit+0xe0>)
 80010e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_DAC_MspInit+0xe0>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <HAL_DAC_MspInit+0xe0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a26      	ldr	r2, [pc, #152]	; (8001194 <HAL_DAC_MspInit+0xe0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_DAC_MspInit+0xe0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800110e:	2310      	movs	r3, #16
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001112:	2303      	movs	r3, #3
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <HAL_DAC_MspInit+0xe4>)
 8001122:	f000 ffb3 	bl	800208c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_DAC_MspInit+0xec>)
 800112a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_DAC_MspInit+0xe8>)
 800112e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001132:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001136:	2240      	movs	r2, #64	; 0x40
 8001138:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_DAC_MspInit+0xe8>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001146:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_DAC_MspInit+0xe8>)
 800114a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800114e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001156:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_DAC_MspInit+0xe8>)
 800115a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <HAL_DAC_MspInit+0xe8>)
 800116e:	f000 fc13 	bl	8001998 <HAL_DMA_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001178:	f7ff ff6c 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_DAC_MspInit+0xe8>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40007400 	.word	0x40007400
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000
 800119c:	200028b4 	.word	0x200028b4
 80011a0:	40026088 	.word	0x40026088

080011a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b4:	d10e      	bne.n	80011d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011d2:	e02e      	b.n	8001232 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_TIM_Base_MspInit+0x9c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d116      	bne.n	800120c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	201d      	movs	r0, #29
 8001200:	f000 fad5 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001204:	201d      	movs	r0, #29
 8001206:	f000 faee 	bl	80017e6 <HAL_NVIC_EnableIRQ>
}
 800120a:	e012      	b.n	8001232 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_TIM_Base_MspInit+0xa0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10d      	bne.n	8001232 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40000400 	.word	0x40000400
 8001244:	40000800 	.word	0x40000800

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_UART_MspInit+0x94>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d133      	bne.n	80012d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x98>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x98>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a2:	230c      	movs	r3, #12
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b2:	2307      	movs	r3, #7
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <HAL_UART_MspInit+0x9c>)
 80012be:	f000 fee5 	bl	800208c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2026      	movs	r0, #38	; 0x26
 80012c8:	f000 fa71 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012cc:	2026      	movs	r0, #38	; 0x26
 80012ce:	f000 fa8a 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 f8f8 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001348:	2001      	movs	r0, #1
 800134a:	f001 f84b 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA1_Stream5_IRQHandler+0x10>)
 800135a:	f000 fc5d 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200028b4 	.word	0x200028b4

08001368 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM3_IRQHandler+0x10>)
 800136e:	f001 fe03 	bl	8002f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20002874 	.word	0x20002874

0800137c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <USART2_IRQHandler+0x10>)
 8001382:	f002 fae7 	bl	8003954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20002b6c 	.word	0x20002b6c

08001390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001394:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001398:	f001 f824 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f003 f8bc 	bl	800454c <__errno>
 80013d4:	4602      	mov	r2, r0
 80013d6:	230c      	movs	r3, #12
 80013d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20020000 	.word	0x20020000
 8001400:	00000400 	.word	0x00000400
 8001404:	200000b0 	.word	0x200000b0
 8001408:	20002df8 	.word	0x20002df8

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <SystemInit+0x28>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <SystemInit+0x28>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SystemInit+0x28>)
 8001422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001426:	609a      	str	r2, [r3, #8]
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800143c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
  ldr  r2, =_sbss
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001462:	f7ff ffd3 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f003 f877 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff fab5 	bl	80009d8 <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001474:	08004e58 	.word	0x08004e58
  ldr  r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800147c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001480:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001484:	20002df4 	.word	0x20002df4

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <HAL_Init+0x40>)
 8001496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_Init+0x40>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_Init+0x40>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f96f 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 f808 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fdd0 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f995 	bl	800181e <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f94f 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000004 	.word	0x20000004
 8001528:	2000000c 	.word	0x2000000c
 800152c:	20000008 	.word	0x20000008

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2000000c 	.word	0x2000000c
 8001554:	20002dec 	.word	0x20002dec

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20002dec 	.word	0x20002dec

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffee 	bl	8001558 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_Delay+0x40>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffde 	bl	8001558 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db10      	blt.n	8001688 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4909      	ldr	r1, [pc, #36]	; (8001694 <__NVIC_DisableIRQ+0x40>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	3320      	adds	r3, #32
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001684:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff07 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff1c 	bl	80015fc <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff8e 	bl	80016ec <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5d 	bl	8001698 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff0f 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff1f 	bl	8001654 <__NVIC_DisableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff94 	bl	8001754 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e014      	b.n	8001872 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fc2b 	bl	80010b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43da      	mvns	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	400a      	ands	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f915 	bl	8001af4 <HAL_DMA_Abort>
 80018ca:	4603      	mov	r3, r0
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e006      	b.n	80018de <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f90d 	bl	8001af4 <HAL_DMA_Abort>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2204      	movs	r2, #4
 80018e8:	711a      	strb	r2, [r3, #4]
 80018ea:	e002      	b.n	80018f2 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	795b      	ldrb	r3, [r3, #5]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_DAC_ConfigChannel+0x20>
 8001918:	2302      	movs	r3, #2
 800191a:	e036      	b.n	800198a <HAL_DAC_ConfigChannel+0x8e>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2202      	movs	r2, #2
 8001926:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001930:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4013      	ands	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	22c0      	movs	r2, #192	; 0xc0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fdd8 	bl	8001558 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e099      	b.n	8001ae8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d4:	e00f      	b.n	80019f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d6:	f7ff fdbf 	bl	8001558 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d908      	bls.n	80019f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e078      	b.n	8001ae8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e8      	bne.n	80019d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_DMA_Init+0x158>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d117      	bne.n	8001aba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00e      	beq.n	8001aba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fa7b 	bl	8001f98 <DMA_CheckFifoParam>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa32 	bl	8001f2c <DMA_CalcBaseAndBitshift>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	223f      	movs	r2, #63	; 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	f010803f 	.word	0xf010803f

08001af4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b02:	f7ff fd29 	bl	8001558 <HAL_GetTick>
 8001b06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d008      	beq.n	8001b26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e052      	b.n	8001bcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0216 	bic.w	r2, r2, #22
 8001b34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_DMA_Abort+0x62>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0208 	bic.w	r2, r2, #8
 8001b64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b76:	e013      	b.n	8001ba0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b78:	f7ff fcee 	bl	8001558 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d90c      	bls.n	8001ba0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e015      	b.n	8001bcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1e4      	bne.n	8001b78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	223f      	movs	r2, #63	; 0x3f
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d004      	beq.n	8001bf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00c      	b.n	8001c0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_DMA_IRQHandler+0x258>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <HAL_DMA_IRQHandler+0x25c>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2208      	movs	r2, #8
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01a      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	2208      	movs	r2, #8
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2201      	movs	r2, #1
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2204      	movs	r2, #4
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d043      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03c      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2210      	movs	r2, #16
 8001d14:	409a      	lsls	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d024      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
 8001d46:	e01f      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0208 	bic.w	r2, r2, #8
 8001d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 808e 	beq.w	8001eb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8086 	beq.w	8001eb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2220      	movs	r2, #32
 8001db0:	409a      	lsls	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d136      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0216 	bic.w	r2, r2, #22
 8001dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_DMA_IRQHandler+0x1da>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0208 	bic.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	223f      	movs	r2, #63	; 0x3f
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d07d      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
        }
        return;
 8001e2e:	e078      	b.n	8001f22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01c      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d108      	bne.n	8001e5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d030      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e02b      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d027      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
 8001e6e:	e022      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x29e>
 8001e70:	20000004 	.word	0x20000004
 8001e74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0210 	bic.w	r2, r2, #16
 8001e94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d032      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d022      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2205      	movs	r2, #5
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d307      	bcc.n	8001efe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f2      	bne.n	8001ee2 <HAL_DMA_IRQHandler+0x2ca>
 8001efc:	e000      	b.n	8001f00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001efe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
 8001f20:	e000      	b.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f22:	bf00      	nop
    }
  }
}
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop

08001f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3b10      	subs	r3, #16
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <DMA_CalcBaseAndBitshift+0x64>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <DMA_CalcBaseAndBitshift+0x68>)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d909      	bls.n	8001f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f62:	f023 0303 	bic.w	r3, r3, #3
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f6c:	e007      	b.n	8001f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	aaaaaaab 	.word	0xaaaaaaab
 8001f94:	08004e0c 	.word	0x08004e0c

08001f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11f      	bne.n	8001ff2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d855      	bhi.n	8002064 <DMA_CheckFifoParam+0xcc>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <DMA_CheckFifoParam+0x28>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fe3 	.word	0x08001fe3
 8001fc8:	08001fd1 	.word	0x08001fd1
 8001fcc:	08002065 	.word	0x08002065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d045      	beq.n	8002068 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe0:	e042      	b.n	8002068 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fea:	d13f      	bne.n	800206c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff0:	e03c      	b.n	800206c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ffa:	d121      	bne.n	8002040 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d836      	bhi.n	8002070 <DMA_CheckFifoParam+0xd8>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <DMA_CheckFifoParam+0x70>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002019 	.word	0x08002019
 800200c:	0800201f 	.word	0x0800201f
 8002010:	08002019 	.word	0x08002019
 8002014:	08002031 	.word	0x08002031
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      break;
 800201c:	e02f      	b.n	800207e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d024      	beq.n	8002074 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800202e:	e021      	b.n	8002074 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002038:	d11e      	bne.n	8002078 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800203e:	e01b      	b.n	8002078 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d902      	bls.n	800204c <DMA_CheckFifoParam+0xb4>
 8002046:	2b03      	cmp	r3, #3
 8002048:	d003      	beq.n	8002052 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800204a:	e018      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      break;
 8002050:	e015      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00e      	beq.n	800207c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      break;
 8002062:	e00b      	b.n	800207c <DMA_CheckFifoParam+0xe4>
      break;
 8002064:	bf00      	nop
 8002066:	e00a      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 8002068:	bf00      	nop
 800206a:	e008      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 800206c:	bf00      	nop
 800206e:	e006      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 8002070:	bf00      	nop
 8002072:	e004      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 8002074:	bf00      	nop
 8002076:	e002      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;   
 8002078:	bf00      	nop
 800207a:	e000      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 800207c:	bf00      	nop
    }
  } 
  
  return status; 
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e165      	b.n	8002374 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 8154 	bne.w	800236e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d00b      	beq.n	80020e6 <HAL_GPIO_Init+0x5a>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020da:	2b11      	cmp	r3, #17
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0xfc>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b12      	cmp	r3, #18
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80ae 	beq.w	800236e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b5c      	ldr	r3, [pc, #368]	; (8002388 <HAL_GPIO_Init+0x2fc>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a5b      	ldr	r2, [pc, #364]	; (8002388 <HAL_GPIO_Init+0x2fc>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_GPIO_Init+0x2fc>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_GPIO_Init+0x300>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4e      	ldr	r2, [pc, #312]	; (8002390 <HAL_GPIO_Init+0x304>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x21a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4d      	ldr	r2, [pc, #308]	; (8002394 <HAL_GPIO_Init+0x308>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x216>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4c      	ldr	r2, [pc, #304]	; (8002398 <HAL_GPIO_Init+0x30c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x212>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_GPIO_Init+0x310>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <HAL_GPIO_Init+0x314>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x20a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <HAL_GPIO_Init+0x318>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x206>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a48      	ldr	r2, [pc, #288]	; (80023a8 <HAL_GPIO_Init+0x31c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x202>
 800228a:	2306      	movs	r3, #6
 800228c:	e00c      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 800228e:	2307      	movs	r3, #7
 8002290:	e00a      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 8002292:	2305      	movs	r3, #5
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 8002296:	2304      	movs	r3, #4
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x21c>
 80022a6:	2300      	movs	r3, #0
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b8:	4934      	ldr	r1, [pc, #208]	; (800238c <HAL_GPIO_Init+0x300>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_GPIO_Init+0x320>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ea:	4a30      	ldr	r2, [pc, #192]	; (80023ac <HAL_GPIO_Init+0x320>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_GPIO_Init+0x320>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002314:	4a25      	ldr	r2, [pc, #148]	; (80023ac <HAL_GPIO_Init+0x320>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_GPIO_Init+0x320>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_GPIO_Init+0x320>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_GPIO_Init+0x320>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_GPIO_Init+0x320>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	f67f ae96 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800237c:	bf00      	nop
 800237e:	3724      	adds	r7, #36	; 0x24
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023cc:	e003      	b.n	80023d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	041a      	lsls	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fdd2 	bl	8000fac <HAL_GPIO_EXTI_Callback>
  }
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0cc      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d90c      	bls.n	8002450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b65      	ldr	r3, [pc, #404]	; (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0b8      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002468:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a58      	ldr	r2, [pc, #352]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800248a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	494d      	ldr	r1, [pc, #308]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d044      	beq.n	8002534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d119      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e07f      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06f      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e067      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f023 0203 	bic.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4934      	ldr	r1, [pc, #208]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002504:	f7ff f828 	bl	8001558 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7ff f824 	bl	8001558 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e04f      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 020c 	and.w	r2, r3, #12
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	429a      	cmp	r2, r3
 8002532:	d1eb      	bne.n	800250c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d20c      	bcs.n	800255c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e032      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4916      	ldr	r1, [pc, #88]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	490e      	ldr	r1, [pc, #56]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800259a:	f000 f855 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 800259e:	4601      	mov	r1, r0
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	fa21 f303 	lsr.w	r3, r1, r3
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ff88 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08004df4 	.word	0x08004df4
 80025d8:	20000004 	.word	0x20000004
 80025dc:	20000008 	.word	0x20000008

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025fc:	f7ff fff0 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002600:	4601      	mov	r1, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0a9b      	lsrs	r3, r3, #10
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4a03      	ldr	r2, [pc, #12]	; (800261c <HAL_RCC_GetPCLK1Freq+0x24>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	08004e04 	.word	0x08004e04

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002624:	f7ff ffdc 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002628:	4601      	mov	r1, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0b5b      	lsrs	r3, r3, #13
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4a03      	ldr	r2, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	08004e04 	.word	0x08004e04

08002648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002662:	4bc6      	ldr	r3, [pc, #792]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b0c      	cmp	r3, #12
 800266c:	f200 817e 	bhi.w	800296c <HAL_RCC_GetSysClockFreq+0x324>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <HAL_RCC_GetSysClockFreq+0x30>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	080026ad 	.word	0x080026ad
 800267c:	0800296d 	.word	0x0800296d
 8002680:	0800296d 	.word	0x0800296d
 8002684:	0800296d 	.word	0x0800296d
 8002688:	080026b3 	.word	0x080026b3
 800268c:	0800296d 	.word	0x0800296d
 8002690:	0800296d 	.word	0x0800296d
 8002694:	0800296d 	.word	0x0800296d
 8002698:	080026b9 	.word	0x080026b9
 800269c:	0800296d 	.word	0x0800296d
 80026a0:	0800296d 	.word	0x0800296d
 80026a4:	0800296d 	.word	0x0800296d
 80026a8:	08002815 	.word	0x08002815
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4bb4      	ldr	r3, [pc, #720]	; (8002980 <HAL_RCC_GetSysClockFreq+0x338>)
 80026ae:	613b      	str	r3, [r7, #16]
       break;
 80026b0:	e15f      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b2:	4bb4      	ldr	r3, [pc, #720]	; (8002984 <HAL_RCC_GetSysClockFreq+0x33c>)
 80026b4:	613b      	str	r3, [r7, #16]
      break;
 80026b6:	e15c      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4bb0      	ldr	r3, [pc, #704]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c2:	4bae      	ldr	r3, [pc, #696]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04a      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4bab      	ldr	r3, [pc, #684]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	f04f 0400 	mov.w	r4, #0
 80026d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	ea03 0501 	and.w	r5, r3, r1
 80026e4:	ea04 0602 	and.w	r6, r4, r2
 80026e8:	4629      	mov	r1, r5
 80026ea:	4632      	mov	r2, r6
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	0154      	lsls	r4, r2, #5
 80026f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026fa:	014b      	lsls	r3, r1, #5
 80026fc:	4619      	mov	r1, r3
 80026fe:	4622      	mov	r2, r4
 8002700:	1b49      	subs	r1, r1, r5
 8002702:	eb62 0206 	sbc.w	r2, r2, r6
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	0194      	lsls	r4, r2, #6
 8002710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002714:	018b      	lsls	r3, r1, #6
 8002716:	1a5b      	subs	r3, r3, r1
 8002718:	eb64 0402 	sbc.w	r4, r4, r2
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	00e2      	lsls	r2, r4, #3
 8002726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800272a:	00d9      	lsls	r1, r3, #3
 800272c:	460b      	mov	r3, r1
 800272e:	4614      	mov	r4, r2
 8002730:	195b      	adds	r3, r3, r5
 8002732:	eb44 0406 	adc.w	r4, r4, r6
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	0262      	lsls	r2, r4, #9
 8002740:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002744:	0259      	lsls	r1, r3, #9
 8002746:	460b      	mov	r3, r1
 8002748:	4614      	mov	r4, r2
 800274a:	4618      	mov	r0, r3
 800274c:	4621      	mov	r1, r4
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0400 	mov.w	r4, #0
 8002754:	461a      	mov	r2, r3
 8002756:	4623      	mov	r3, r4
 8002758:	f7fd fdb2 	bl	80002c0 <__aeabi_uldivmod>
 800275c:	4603      	mov	r3, r0
 800275e:	460c      	mov	r4, r1
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e049      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002764:	4b85      	ldr	r3, [pc, #532]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	f04f 0400 	mov.w	r4, #0
 800276e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	ea03 0501 	and.w	r5, r3, r1
 800277a:	ea04 0602 	and.w	r6, r4, r2
 800277e:	4629      	mov	r1, r5
 8002780:	4632      	mov	r2, r6
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f04f 0400 	mov.w	r4, #0
 800278a:	0154      	lsls	r4, r2, #5
 800278c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002790:	014b      	lsls	r3, r1, #5
 8002792:	4619      	mov	r1, r3
 8002794:	4622      	mov	r2, r4
 8002796:	1b49      	subs	r1, r1, r5
 8002798:	eb62 0206 	sbc.w	r2, r2, r6
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	f04f 0400 	mov.w	r4, #0
 80027a4:	0194      	lsls	r4, r2, #6
 80027a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027aa:	018b      	lsls	r3, r1, #6
 80027ac:	1a5b      	subs	r3, r3, r1
 80027ae:	eb64 0402 	sbc.w	r4, r4, r2
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	00e2      	lsls	r2, r4, #3
 80027bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027c0:	00d9      	lsls	r1, r3, #3
 80027c2:	460b      	mov	r3, r1
 80027c4:	4614      	mov	r4, r2
 80027c6:	195b      	adds	r3, r3, r5
 80027c8:	eb44 0406 	adc.w	r4, r4, r6
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	02a2      	lsls	r2, r4, #10
 80027d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027da:	0299      	lsls	r1, r3, #10
 80027dc:	460b      	mov	r3, r1
 80027de:	4614      	mov	r4, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	4621      	mov	r1, r4
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f04f 0400 	mov.w	r4, #0
 80027ea:	461a      	mov	r2, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	f7fd fd67 	bl	80002c0 <__aeabi_uldivmod>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f8:	4b60      	ldr	r3, [pc, #384]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	3301      	adds	r3, #1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	613b      	str	r3, [r7, #16]
      break;
 8002812:	e0ae      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800281c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d04a      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b54      	ldr	r3, [pc, #336]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	ea03 0501 	and.w	r5, r3, r1
 8002840:	ea04 0602 	and.w	r6, r4, r2
 8002844:	4629      	mov	r1, r5
 8002846:	4632      	mov	r2, r6
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	0154      	lsls	r4, r2, #5
 8002852:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002856:	014b      	lsls	r3, r1, #5
 8002858:	4619      	mov	r1, r3
 800285a:	4622      	mov	r2, r4
 800285c:	1b49      	subs	r1, r1, r5
 800285e:	eb62 0206 	sbc.w	r2, r2, r6
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	0194      	lsls	r4, r2, #6
 800286c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002870:	018b      	lsls	r3, r1, #6
 8002872:	1a5b      	subs	r3, r3, r1
 8002874:	eb64 0402 	sbc.w	r4, r4, r2
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	00e2      	lsls	r2, r4, #3
 8002882:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002886:	00d9      	lsls	r1, r3, #3
 8002888:	460b      	mov	r3, r1
 800288a:	4614      	mov	r4, r2
 800288c:	195b      	adds	r3, r3, r5
 800288e:	eb44 0406 	adc.w	r4, r4, r6
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	0262      	lsls	r2, r4, #9
 800289c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028a0:	0259      	lsls	r1, r3, #9
 80028a2:	460b      	mov	r3, r1
 80028a4:	4614      	mov	r4, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	4621      	mov	r1, r4
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f04f 0400 	mov.w	r4, #0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7fd fd04 	bl	80002c0 <__aeabi_uldivmod>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e049      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c0:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	f04f 0400 	mov.w	r4, #0
 80028ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	ea03 0501 	and.w	r5, r3, r1
 80028d6:	ea04 0602 	and.w	r6, r4, r2
 80028da:	4629      	mov	r1, r5
 80028dc:	4632      	mov	r2, r6
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	f04f 0400 	mov.w	r4, #0
 80028e6:	0154      	lsls	r4, r2, #5
 80028e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ec:	014b      	lsls	r3, r1, #5
 80028ee:	4619      	mov	r1, r3
 80028f0:	4622      	mov	r2, r4
 80028f2:	1b49      	subs	r1, r1, r5
 80028f4:	eb62 0206 	sbc.w	r2, r2, r6
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	f04f 0400 	mov.w	r4, #0
 8002900:	0194      	lsls	r4, r2, #6
 8002902:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002906:	018b      	lsls	r3, r1, #6
 8002908:	1a5b      	subs	r3, r3, r1
 800290a:	eb64 0402 	sbc.w	r4, r4, r2
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	00e2      	lsls	r2, r4, #3
 8002918:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800291c:	00d9      	lsls	r1, r3, #3
 800291e:	460b      	mov	r3, r1
 8002920:	4614      	mov	r4, r2
 8002922:	195b      	adds	r3, r3, r5
 8002924:	eb44 0406 	adc.w	r4, r4, r6
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	02a2      	lsls	r2, r4, #10
 8002932:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002936:	0299      	lsls	r1, r3, #10
 8002938:	460b      	mov	r3, r1
 800293a:	4614      	mov	r4, r2
 800293c:	4618      	mov	r0, r3
 800293e:	4621      	mov	r1, r4
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f04f 0400 	mov.w	r4, #0
 8002946:	461a      	mov	r2, r3
 8002948:	4623      	mov	r3, r4
 800294a:	f7fd fcb9 	bl	80002c0 <__aeabi_uldivmod>
 800294e:	4603      	mov	r3, r0
 8002950:	460c      	mov	r4, r1
 8002952:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_GetSysClockFreq+0x334>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0f1b      	lsrs	r3, r3, #28
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	613b      	str	r3, [r7, #16]
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_RCC_GetSysClockFreq+0x338>)
 800296e:	613b      	str	r3, [r7, #16]
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	693b      	ldr	r3, [r7, #16]
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	00f42400 	.word	0x00f42400
 8002984:	007a1200 	.word	0x007a1200

08002988 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8083 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a2:	4b95      	ldr	r3, [pc, #596]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d019      	beq.n	80029e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ae:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ba:	4b8f      	ldr	r3, [pc, #572]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c6:	d00c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c8:	4b8b      	ldr	r3, [pc, #556]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d112      	bne.n	80029fa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d4:	4b88      	ldr	r3, [pc, #544]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e0:	d10b      	bne.n	80029fa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e2:	4b85      	ldr	r3, [pc, #532]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d05b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x11e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d157      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e216      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x8a>
 8002a04:	4b7c      	ldr	r3, [pc, #496]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7b      	ldr	r2, [pc, #492]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e01d      	b.n	8002a4e <HAL_RCC_OscConfig+0xc6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0xae>
 8002a1c:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a75      	ldr	r2, [pc, #468]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a72      	ldr	r2, [pc, #456]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0xc6>
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6f      	ldr	r2, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6d      	ldr	r3, [pc, #436]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6c      	ldr	r2, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d013      	beq.n	8002a7e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe fd7f 	bl	8001558 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fd7b 	bl	8001558 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	; 0x64
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1db      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a70:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0xd6>
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fd6b 	bl	8001558 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a86:	f7fe fd67 	bl	8001558 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b64      	cmp	r3, #100	; 0x64
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1c7      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a98:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0xfe>
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d06f      	beq.n	8002b94 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ab4:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d017      	beq.n	8002af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad8:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d11c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae4:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af0:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_OscConfig+0x180>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e18f      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4938      	ldr	r1, [pc, #224]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1c:	e03a      	b.n	8002b94 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b26:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCC_OscConfig+0x274>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fd14 	bl	8001558 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fd10 	bl	8001558 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e170      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4925      	ldr	r1, [pc, #148]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x274>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fcf3 	bl	8001558 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b76:	f7fe fcef 	bl	8001558 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e14f      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d037      	beq.n	8002c10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d016      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba8:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCC_OscConfig+0x278>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe fcd3 	bl	8001558 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fccf 	bl	8001558 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e12f      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x22e>
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_OscConfig+0x278>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fcbc 	bl	8001558 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be2:	e00f      	b.n	8002c04 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fe fcb8 	bl	8001558 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d908      	bls.n	8002c04 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e118      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	42470000 	.word	0x42470000
 8002c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b8a      	ldr	r3, [pc, #552]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e9      	bne.n	8002be4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8097 	beq.w	8002d4c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b83      	ldr	r3, [pc, #524]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a7e      	ldr	r2, [pc, #504]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x4ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a75      	ldr	r2, [pc, #468]	; (8002e34 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fc77 	bl	8001558 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe fc73 	bl	8001558 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0d3      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x31a>
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x354>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x33c>
 8002caa:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a60      	ldr	r2, [pc, #384]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5d      	ldr	r2, [pc, #372]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0x354>
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fc38 	bl	8001558 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe fc34 	bl	8001558 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e092      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ee      	beq.n	8002cec <HAL_RCC_OscConfig+0x364>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fc22 	bl	8001558 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe fc1e 	bl	8001558 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e07c      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ee      	bne.n	8002d18 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d068      	beq.n	8002e26 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d54:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d060      	beq.n	8002e22 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d145      	bne.n	8002df4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_RCC_OscConfig+0x4b0>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fbf3 	bl	8001558 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fe fbef 	bl	8001558 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e04f      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d88:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	019b      	lsls	r3, r3, #6
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	071b      	lsls	r3, r3, #28
 8002dc0:	491b      	ldr	r1, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_RCC_OscConfig+0x4b0>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fbc4 	bl	8001558 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fbc0 	bl	8001558 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e020      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x44c>
 8002df2:	e018      	b.n	8002e26 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_RCC_OscConfig+0x4b0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fbad 	bl	8001558 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fba9 	bl	8001558 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e009      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_RCC_OscConfig+0x4a8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x47a>
 8002e20:	e001      	b.n	8002e26 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42470060 	.word	0x42470060

08002e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01d      	b.n	8002e8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe f99e 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f000 fa64 	bl	8003348 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d007      	beq.n	8002ec4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_TIM_Base_Stop+0x40>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	f240 4344 	movw	r3, #1092	; 0x444
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_TIM_Base_Stop+0x40>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d007      	beq.n	8002f6a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d122      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d11b      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0202 	mvn.w	r2, #2
 8002fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f9a5 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f997 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f9a8 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d122      	bne.n	8003028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d11b      	bne.n	8003028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0204 	mvn.w	r2, #4
 8002ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f97b 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f96d 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f97e 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b08      	cmp	r3, #8
 8003034:	d122      	bne.n	800307c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d11b      	bne.n	800307c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0208 	mvn.w	r2, #8
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2204      	movs	r2, #4
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f951 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f943 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f954 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b10      	cmp	r3, #16
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0210 	mvn.w	r2, #16
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2208      	movs	r2, #8
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f927 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f919 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f92a 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0201 	mvn.w	r2, #1
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd ff46 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fad0 	bl	80036c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d107      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8ef 	bl	8003332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	d107      	bne.n	8003180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0220 	mvn.w	r2, #32
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa9a 	bl	80036b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_TIM_ConfigClockSource+0x18>
 800319c:	2302      	movs	r3, #2
 800319e:	e0a6      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x166>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d067      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0x120>
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d80b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x6c>
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d073      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x140>
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d802      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x62>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d06f      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80031e8:	e078      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d06c      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x140>
 80031ee:	2b30      	cmp	r3, #48	; 0x30
 80031f0:	d06a      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031f2:	e073      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031f4:	2b70      	cmp	r3, #112	; 0x70
 80031f6:	d00d      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0x8c>
 80031f8:	2b70      	cmp	r3, #112	; 0x70
 80031fa:	d804      	bhi.n	8003206 <HAL_TIM_ConfigClockSource+0x7e>
 80031fc:	2b50      	cmp	r3, #80	; 0x50
 80031fe:	d033      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0xe0>
 8003200:	2b60      	cmp	r3, #96	; 0x60
 8003202:	d041      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003204:	e06a      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d066      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x152>
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003210:	d017      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003212:	e063      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f000 f9aa 	bl	800357c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003236:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e04c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f000 f993 	bl	800357c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003264:	609a      	str	r2, [r3, #8]
      break;
 8003266:	e039      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	461a      	mov	r2, r3
 8003276:	f000 f907 	bl	8003488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2150      	movs	r1, #80	; 0x50
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f960 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8003286:	e029      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	461a      	mov	r2, r3
 8003296:	f000 f926 	bl	80034e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2160      	movs	r1, #96	; 0x60
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f950 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 80032a6:	e019      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f000 f8e7 	bl	8003488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f940 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 80032c6:	e009      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f000 f937 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 80032d8:	e000      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a40      	ldr	r2, [pc, #256]	; (800345c <TIM_Base_SetConfig+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d00f      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3d      	ldr	r2, [pc, #244]	; (8003460 <TIM_Base_SetConfig+0x118>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3c      	ldr	r2, [pc, #240]	; (8003464 <TIM_Base_SetConfig+0x11c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <TIM_Base_SetConfig+0x120>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3a      	ldr	r2, [pc, #232]	; (800346c <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2f      	ldr	r2, [pc, #188]	; (800345c <TIM_Base_SetConfig+0x114>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d027      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <TIM_Base_SetConfig+0x118>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d023      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <TIM_Base_SetConfig+0x11c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <TIM_Base_SetConfig+0x120>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a29      	ldr	r2, [pc, #164]	; (800346c <TIM_Base_SetConfig+0x124>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d017      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a28      	ldr	r2, [pc, #160]	; (8003470 <TIM_Base_SetConfig+0x128>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <TIM_Base_SetConfig+0x12c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <TIM_Base_SetConfig+0x130>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a25      	ldr	r2, [pc, #148]	; (800347c <TIM_Base_SetConfig+0x134>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <TIM_Base_SetConfig+0x138>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <TIM_Base_SetConfig+0x13c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <TIM_Base_SetConfig+0x114>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0xf8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <TIM_Base_SetConfig+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40010400 	.word	0x40010400
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	40001800 	.word	0x40001800
 8003480:	40001c00 	.word	0x40001c00
 8003484:	40002000 	.word	0x40002000

08003488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 030a 	bic.w	r3, r3, #10
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b087      	sub	sp, #28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f023 0210 	bic.w	r2, r3, #16
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	031b      	lsls	r3, r3, #12
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	f043 0307 	orr.w	r3, r3, #7
 8003568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	021a      	lsls	r2, r3, #8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	431a      	orrs	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	609a      	str	r2, [r3, #8]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e05a      	b.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d01d      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10c      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40010400 	.word	0x40010400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40001800 	.word	0x40001800

080036b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e03f      	b.n	800376e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fda0 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800371e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fb97 	bl	8003e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af02      	add	r7, sp, #8
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	f040 8083 	bne.w	800389e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UART_Transmit+0x2e>
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e07b      	b.n	80038a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Transmit+0x40>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e074      	b.n	80038a0 <HAL_UART_Transmit+0x12a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2221      	movs	r2, #33	; 0x21
 80037c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80037cc:	f7fd fec4 	bl	8001558 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80037e6:	e042      	b.n	800386e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	d122      	bne.n	8003846 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f9b6 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e042      	b.n	80038a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3302      	adds	r3, #2
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	e017      	b.n	800386e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	e013      	b.n	800386e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f993 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e01f      	b.n	80038a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	60ba      	str	r2, [r7, #8]
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1b7      	bne.n	80037e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f97a 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e006      	b.n	80038a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d140      	bne.n	8003944 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_UART_Receive_IT+0x26>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e039      	b.n	8003946 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Receive_IT+0x38>
 80038dc:	2302      	movs	r3, #2
 80038de:	e032      	b.n	8003946 <HAL_UART_Receive_IT+0x9e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2222      	movs	r2, #34	; 0x22
 8003904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_UART_IRQHandler+0x52>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f9d6 	bl	8003d50 <UART_Receive_IT>
      return;
 80039a4:	e0d1      	b.n	8003b4a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80b0 	beq.w	8003b0e <HAL_UART_IRQHandler+0x1ba>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_UART_IRQHandler+0x70>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80a5 	beq.w	8003b0e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_UART_IRQHandler+0x90>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_UART_IRQHandler+0xb0>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	f043 0202 	orr.w	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_UART_IRQHandler+0xd0>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00f      	beq.n	8003a4e <HAL_UART_IRQHandler+0xfa>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <HAL_UART_IRQHandler+0xee>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	f043 0208 	orr.w	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d078      	beq.n	8003b48 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_UART_IRQHandler+0x11c>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f970 	bl	8003d50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_UART_IRQHandler+0x144>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d031      	beq.n	8003afc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f8b9 	bl	8003c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d123      	bne.n	8003af4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac8:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_UART_IRQHandler+0x1fc>)
 8003aca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe f87f 	bl	8001bd4 <HAL_DMA_Abort_IT>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d016      	beq.n	8003b0a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aea:	e00e      	b.n	8003b0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f83b 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af2:	e00a      	b.n	8003b0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f837 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afa:	e006      	b.n	8003b0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f833 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b08:	e01e      	b.n	8003b48 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0a:	bf00      	nop
    return;
 8003b0c:	e01c      	b.n	8003b48 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_UART_IRQHandler+0x1d6>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8a6 	bl	8003c74 <UART_Transmit_IT>
    return;
 8003b28:	e00f      	b.n	8003b4a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_UART_IRQHandler+0x1f6>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8ee 	bl	8003d20 <UART_EndTransmit_IT>
    return;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003b48:	bf00      	nop
  }
}
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	08003c4d 	.word	0x08003c4d

08003b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	e02c      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d028      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9c:	f7fd fcdc 	bl	8001558 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d21d      	bcs.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e00f      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d0c3      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ff7e 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6c:	bf00      	nop
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b21      	cmp	r3, #33	; 0x21
 8003c86:	d144      	bne.n	8003d12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c90:	d11a      	bne.n	8003cc8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]
 8003cba:	e00e      	b.n	8003cda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	621a      	str	r2, [r3, #32]
 8003cc6:	e008      	b.n	8003cda <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	1c59      	adds	r1, r3, #1
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6211      	str	r1, [r2, #32]
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ff07 	bl	8003b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b22      	cmp	r3, #34	; 0x22
 8003d62:	d171      	bne.n	8003e48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d123      	bne.n	8003db6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10e      	bne.n	8003d9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
 8003d98:	e029      	b.n	8003dee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	629a      	str	r2, [r3, #40]	; 0x28
 8003db4:	e01b      	b.n	8003dee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6858      	ldr	r0, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6291      	str	r1, [r2, #40]	; 0x28
 8003dce:	b2c2      	uxtb	r2, r0
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e00c      	b.n	8003dee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	1c58      	adds	r0, r3, #1
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	6288      	str	r0, [r1, #40]	; 0x28
 8003de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d120      	bne.n	8003e44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0220 	bic.w	r2, r2, #32
 8003e10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd f8d0 	bl	8000fe0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e002      	b.n	8003e4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e96:	f023 030c 	bic.w	r3, r3, #12
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec2:	f040 818b 	bne.w	80041dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4ac1      	ldr	r2, [pc, #772]	; (80041d0 <UART_SetConfig+0x37c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d005      	beq.n	8003edc <UART_SetConfig+0x88>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4abf      	ldr	r2, [pc, #764]	; (80041d4 <UART_SetConfig+0x380>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f040 80bd 	bne.w	8004056 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7fe fba0 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8003ee0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	f04f 0600 	mov.w	r6, #0
 8003eea:	46a8      	mov	r8, r5
 8003eec:	46b1      	mov	r9, r6
 8003eee:	eb18 0308 	adds.w	r3, r8, r8
 8003ef2:	eb49 0409 	adc.w	r4, r9, r9
 8003ef6:	4698      	mov	r8, r3
 8003ef8:	46a1      	mov	r9, r4
 8003efa:	eb18 0805 	adds.w	r8, r8, r5
 8003efe:	eb49 0906 	adc.w	r9, r9, r6
 8003f02:	f04f 0100 	mov.w	r1, #0
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f16:	4688      	mov	r8, r1
 8003f18:	4691      	mov	r9, r2
 8003f1a:	eb18 0005 	adds.w	r0, r8, r5
 8003f1e:	eb49 0106 	adc.w	r1, r9, r6
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	461d      	mov	r5, r3
 8003f28:	f04f 0600 	mov.w	r6, #0
 8003f2c:	196b      	adds	r3, r5, r5
 8003f2e:	eb46 0406 	adc.w	r4, r6, r6
 8003f32:	461a      	mov	r2, r3
 8003f34:	4623      	mov	r3, r4
 8003f36:	f7fc f9c3 	bl	80002c0 <__aeabi_uldivmod>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4ba5      	ldr	r3, [pc, #660]	; (80041d8 <UART_SetConfig+0x384>)
 8003f42:	fba3 2302 	umull	r2, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	461d      	mov	r5, r3
 8003f50:	f04f 0600 	mov.w	r6, #0
 8003f54:	46a9      	mov	r9, r5
 8003f56:	46b2      	mov	sl, r6
 8003f58:	eb19 0309 	adds.w	r3, r9, r9
 8003f5c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f60:	4699      	mov	r9, r3
 8003f62:	46a2      	mov	sl, r4
 8003f64:	eb19 0905 	adds.w	r9, r9, r5
 8003f68:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f80:	4689      	mov	r9, r1
 8003f82:	4692      	mov	sl, r2
 8003f84:	eb19 0005 	adds.w	r0, r9, r5
 8003f88:	eb4a 0106 	adc.w	r1, sl, r6
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	461d      	mov	r5, r3
 8003f92:	f04f 0600 	mov.w	r6, #0
 8003f96:	196b      	adds	r3, r5, r5
 8003f98:	eb46 0406 	adc.w	r4, r6, r6
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	f7fc f98e 	bl	80002c0 <__aeabi_uldivmod>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b8b      	ldr	r3, [pc, #556]	; (80041d8 <UART_SetConfig+0x384>)
 8003fac:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	3332      	adds	r3, #50	; 0x32
 8003fbe:	4a86      	ldr	r2, [pc, #536]	; (80041d8 <UART_SetConfig+0x384>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fcc:	4498      	add	r8, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	461d      	mov	r5, r3
 8003fd2:	f04f 0600 	mov.w	r6, #0
 8003fd6:	46a9      	mov	r9, r5
 8003fd8:	46b2      	mov	sl, r6
 8003fda:	eb19 0309 	adds.w	r3, r9, r9
 8003fde:	eb4a 040a 	adc.w	r4, sl, sl
 8003fe2:	4699      	mov	r9, r3
 8003fe4:	46a2      	mov	sl, r4
 8003fe6:	eb19 0905 	adds.w	r9, r9, r5
 8003fea:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ffe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004002:	4689      	mov	r9, r1
 8004004:	4692      	mov	sl, r2
 8004006:	eb19 0005 	adds.w	r0, r9, r5
 800400a:	eb4a 0106 	adc.w	r1, sl, r6
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	461d      	mov	r5, r3
 8004014:	f04f 0600 	mov.w	r6, #0
 8004018:	196b      	adds	r3, r5, r5
 800401a:	eb46 0406 	adc.w	r4, r6, r6
 800401e:	461a      	mov	r2, r3
 8004020:	4623      	mov	r3, r4
 8004022:	f7fc f94d 	bl	80002c0 <__aeabi_uldivmod>
 8004026:	4603      	mov	r3, r0
 8004028:	460c      	mov	r4, r1
 800402a:	461a      	mov	r2, r3
 800402c:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <UART_SetConfig+0x384>)
 800402e:	fba3 1302 	umull	r1, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2164      	movs	r1, #100	; 0x64
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	3332      	adds	r3, #50	; 0x32
 8004040:	4a65      	ldr	r2, [pc, #404]	; (80041d8 <UART_SetConfig+0x384>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	f003 0207 	and.w	r2, r3, #7
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4442      	add	r2, r8
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	e26f      	b.n	8004536 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004056:	f7fe facf 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 800405a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	461d      	mov	r5, r3
 8004060:	f04f 0600 	mov.w	r6, #0
 8004064:	46a8      	mov	r8, r5
 8004066:	46b1      	mov	r9, r6
 8004068:	eb18 0308 	adds.w	r3, r8, r8
 800406c:	eb49 0409 	adc.w	r4, r9, r9
 8004070:	4698      	mov	r8, r3
 8004072:	46a1      	mov	r9, r4
 8004074:	eb18 0805 	adds.w	r8, r8, r5
 8004078:	eb49 0906 	adc.w	r9, r9, r6
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004088:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800408c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004090:	4688      	mov	r8, r1
 8004092:	4691      	mov	r9, r2
 8004094:	eb18 0005 	adds.w	r0, r8, r5
 8004098:	eb49 0106 	adc.w	r1, r9, r6
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	461d      	mov	r5, r3
 80040a2:	f04f 0600 	mov.w	r6, #0
 80040a6:	196b      	adds	r3, r5, r5
 80040a8:	eb46 0406 	adc.w	r4, r6, r6
 80040ac:	461a      	mov	r2, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	f7fc f906 	bl	80002c0 <__aeabi_uldivmod>
 80040b4:	4603      	mov	r3, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <UART_SetConfig+0x384>)
 80040bc:	fba3 2302 	umull	r2, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	461d      	mov	r5, r3
 80040ca:	f04f 0600 	mov.w	r6, #0
 80040ce:	46a9      	mov	r9, r5
 80040d0:	46b2      	mov	sl, r6
 80040d2:	eb19 0309 	adds.w	r3, r9, r9
 80040d6:	eb4a 040a 	adc.w	r4, sl, sl
 80040da:	4699      	mov	r9, r3
 80040dc:	46a2      	mov	sl, r4
 80040de:	eb19 0905 	adds.w	r9, r9, r5
 80040e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040fa:	4689      	mov	r9, r1
 80040fc:	4692      	mov	sl, r2
 80040fe:	eb19 0005 	adds.w	r0, r9, r5
 8004102:	eb4a 0106 	adc.w	r1, sl, r6
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	461d      	mov	r5, r3
 800410c:	f04f 0600 	mov.w	r6, #0
 8004110:	196b      	adds	r3, r5, r5
 8004112:	eb46 0406 	adc.w	r4, r6, r6
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	f7fc f8d1 	bl	80002c0 <__aeabi_uldivmod>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	461a      	mov	r2, r3
 8004124:	4b2c      	ldr	r3, [pc, #176]	; (80041d8 <UART_SetConfig+0x384>)
 8004126:	fba3 1302 	umull	r1, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2164      	movs	r1, #100	; 0x64
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	3332      	adds	r3, #50	; 0x32
 8004138:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <UART_SetConfig+0x384>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004146:	4498      	add	r8, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	461d      	mov	r5, r3
 800414c:	f04f 0600 	mov.w	r6, #0
 8004150:	46a9      	mov	r9, r5
 8004152:	46b2      	mov	sl, r6
 8004154:	eb19 0309 	adds.w	r3, r9, r9
 8004158:	eb4a 040a 	adc.w	r4, sl, sl
 800415c:	4699      	mov	r9, r3
 800415e:	46a2      	mov	sl, r4
 8004160:	eb19 0905 	adds.w	r9, r9, r5
 8004164:	eb4a 0a06 	adc.w	sl, sl, r6
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004174:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004178:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800417c:	4689      	mov	r9, r1
 800417e:	4692      	mov	sl, r2
 8004180:	eb19 0005 	adds.w	r0, r9, r5
 8004184:	eb4a 0106 	adc.w	r1, sl, r6
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	461d      	mov	r5, r3
 800418e:	f04f 0600 	mov.w	r6, #0
 8004192:	196b      	adds	r3, r5, r5
 8004194:	eb46 0406 	adc.w	r4, r6, r6
 8004198:	461a      	mov	r2, r3
 800419a:	4623      	mov	r3, r4
 800419c:	f7fc f890 	bl	80002c0 <__aeabi_uldivmod>
 80041a0:	4603      	mov	r3, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <UART_SetConfig+0x384>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	2164      	movs	r1, #100	; 0x64
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	3332      	adds	r3, #50	; 0x32
 80041ba:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <UART_SetConfig+0x384>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	f003 0207 	and.w	r2, r3, #7
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4442      	add	r2, r8
 80041cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041ce:	e1b2      	b.n	8004536 <UART_SetConfig+0x6e2>
 80041d0:	40011000 	.word	0x40011000
 80041d4:	40011400 	.word	0x40011400
 80041d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4ad7      	ldr	r2, [pc, #860]	; (8004540 <UART_SetConfig+0x6ec>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d005      	beq.n	80041f2 <UART_SetConfig+0x39e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4ad6      	ldr	r2, [pc, #856]	; (8004544 <UART_SetConfig+0x6f0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	f040 80d1 	bne.w	8004394 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041f2:	f7fe fa15 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 80041f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	469a      	mov	sl, r3
 80041fc:	f04f 0b00 	mov.w	fp, #0
 8004200:	46d0      	mov	r8, sl
 8004202:	46d9      	mov	r9, fp
 8004204:	eb18 0308 	adds.w	r3, r8, r8
 8004208:	eb49 0409 	adc.w	r4, r9, r9
 800420c:	4698      	mov	r8, r3
 800420e:	46a1      	mov	r9, r4
 8004210:	eb18 080a 	adds.w	r8, r8, sl
 8004214:	eb49 090b 	adc.w	r9, r9, fp
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004224:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004228:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800422c:	4688      	mov	r8, r1
 800422e:	4691      	mov	r9, r2
 8004230:	eb1a 0508 	adds.w	r5, sl, r8
 8004234:	eb4b 0609 	adc.w	r6, fp, r9
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4619      	mov	r1, r3
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	f04f 0400 	mov.w	r4, #0
 800424a:	0094      	lsls	r4, r2, #2
 800424c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004250:	008b      	lsls	r3, r1, #2
 8004252:	461a      	mov	r2, r3
 8004254:	4623      	mov	r3, r4
 8004256:	4628      	mov	r0, r5
 8004258:	4631      	mov	r1, r6
 800425a:	f7fc f831 	bl	80002c0 <__aeabi_uldivmod>
 800425e:	4603      	mov	r3, r0
 8004260:	460c      	mov	r4, r1
 8004262:	461a      	mov	r2, r3
 8004264:	4bb8      	ldr	r3, [pc, #736]	; (8004548 <UART_SetConfig+0x6f4>)
 8004266:	fba3 2302 	umull	r2, r3, r3, r2
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	469b      	mov	fp, r3
 8004274:	f04f 0c00 	mov.w	ip, #0
 8004278:	46d9      	mov	r9, fp
 800427a:	46e2      	mov	sl, ip
 800427c:	eb19 0309 	adds.w	r3, r9, r9
 8004280:	eb4a 040a 	adc.w	r4, sl, sl
 8004284:	4699      	mov	r9, r3
 8004286:	46a2      	mov	sl, r4
 8004288:	eb19 090b 	adds.w	r9, r9, fp
 800428c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042a4:	4689      	mov	r9, r1
 80042a6:	4692      	mov	sl, r2
 80042a8:	eb1b 0509 	adds.w	r5, fp, r9
 80042ac:	eb4c 060a 	adc.w	r6, ip, sl
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f04f 0400 	mov.w	r4, #0
 80042c2:	0094      	lsls	r4, r2, #2
 80042c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042c8:	008b      	lsls	r3, r1, #2
 80042ca:	461a      	mov	r2, r3
 80042cc:	4623      	mov	r3, r4
 80042ce:	4628      	mov	r0, r5
 80042d0:	4631      	mov	r1, r6
 80042d2:	f7fb fff5 	bl	80002c0 <__aeabi_uldivmod>
 80042d6:	4603      	mov	r3, r0
 80042d8:	460c      	mov	r4, r1
 80042da:	461a      	mov	r2, r3
 80042dc:	4b9a      	ldr	r3, [pc, #616]	; (8004548 <UART_SetConfig+0x6f4>)
 80042de:	fba3 1302 	umull	r1, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2164      	movs	r1, #100	; 0x64
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	3332      	adds	r3, #50	; 0x32
 80042f0:	4a95      	ldr	r2, [pc, #596]	; (8004548 <UART_SetConfig+0x6f4>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fc:	4498      	add	r8, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	469b      	mov	fp, r3
 8004302:	f04f 0c00 	mov.w	ip, #0
 8004306:	46d9      	mov	r9, fp
 8004308:	46e2      	mov	sl, ip
 800430a:	eb19 0309 	adds.w	r3, r9, r9
 800430e:	eb4a 040a 	adc.w	r4, sl, sl
 8004312:	4699      	mov	r9, r3
 8004314:	46a2      	mov	sl, r4
 8004316:	eb19 090b 	adds.w	r9, r9, fp
 800431a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800432a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800432e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004332:	4689      	mov	r9, r1
 8004334:	4692      	mov	sl, r2
 8004336:	eb1b 0509 	adds.w	r5, fp, r9
 800433a:	eb4c 060a 	adc.w	r6, ip, sl
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4619      	mov	r1, r3
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	f04f 0400 	mov.w	r4, #0
 8004350:	0094      	lsls	r4, r2, #2
 8004352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004356:	008b      	lsls	r3, r1, #2
 8004358:	461a      	mov	r2, r3
 800435a:	4623      	mov	r3, r4
 800435c:	4628      	mov	r0, r5
 800435e:	4631      	mov	r1, r6
 8004360:	f7fb ffae 	bl	80002c0 <__aeabi_uldivmod>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	461a      	mov	r2, r3
 800436a:	4b77      	ldr	r3, [pc, #476]	; (8004548 <UART_SetConfig+0x6f4>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a72      	ldr	r2, [pc, #456]	; (8004548 <UART_SetConfig+0x6f4>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 020f 	and.w	r2, r3, #15
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4442      	add	r2, r8
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	e0d0      	b.n	8004536 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7fe f930 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8004398:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	469a      	mov	sl, r3
 800439e:	f04f 0b00 	mov.w	fp, #0
 80043a2:	46d0      	mov	r8, sl
 80043a4:	46d9      	mov	r9, fp
 80043a6:	eb18 0308 	adds.w	r3, r8, r8
 80043aa:	eb49 0409 	adc.w	r4, r9, r9
 80043ae:	4698      	mov	r8, r3
 80043b0:	46a1      	mov	r9, r4
 80043b2:	eb18 080a 	adds.w	r8, r8, sl
 80043b6:	eb49 090b 	adc.w	r9, r9, fp
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043ce:	4688      	mov	r8, r1
 80043d0:	4691      	mov	r9, r2
 80043d2:	eb1a 0508 	adds.w	r5, sl, r8
 80043d6:	eb4b 0609 	adc.w	r6, fp, r9
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4619      	mov	r1, r3
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	0094      	lsls	r4, r2, #2
 80043ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043f2:	008b      	lsls	r3, r1, #2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4623      	mov	r3, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	4631      	mov	r1, r6
 80043fc:	f7fb ff60 	bl	80002c0 <__aeabi_uldivmod>
 8004400:	4603      	mov	r3, r0
 8004402:	460c      	mov	r4, r1
 8004404:	461a      	mov	r2, r3
 8004406:	4b50      	ldr	r3, [pc, #320]	; (8004548 <UART_SetConfig+0x6f4>)
 8004408:	fba3 2302 	umull	r2, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	469b      	mov	fp, r3
 8004416:	f04f 0c00 	mov.w	ip, #0
 800441a:	46d9      	mov	r9, fp
 800441c:	46e2      	mov	sl, ip
 800441e:	eb19 0309 	adds.w	r3, r9, r9
 8004422:	eb4a 040a 	adc.w	r4, sl, sl
 8004426:	4699      	mov	r9, r3
 8004428:	46a2      	mov	sl, r4
 800442a:	eb19 090b 	adds.w	r9, r9, fp
 800442e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800443e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004442:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004446:	4689      	mov	r9, r1
 8004448:	4692      	mov	sl, r2
 800444a:	eb1b 0509 	adds.w	r5, fp, r9
 800444e:	eb4c 060a 	adc.w	r6, ip, sl
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4619      	mov	r1, r3
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	f04f 0400 	mov.w	r4, #0
 8004464:	0094      	lsls	r4, r2, #2
 8004466:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800446a:	008b      	lsls	r3, r1, #2
 800446c:	461a      	mov	r2, r3
 800446e:	4623      	mov	r3, r4
 8004470:	4628      	mov	r0, r5
 8004472:	4631      	mov	r1, r6
 8004474:	f7fb ff24 	bl	80002c0 <__aeabi_uldivmod>
 8004478:	4603      	mov	r3, r0
 800447a:	460c      	mov	r4, r1
 800447c:	461a      	mov	r2, r3
 800447e:	4b32      	ldr	r3, [pc, #200]	; (8004548 <UART_SetConfig+0x6f4>)
 8004480:	fba3 1302 	umull	r1, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	2164      	movs	r1, #100	; 0x64
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	3332      	adds	r3, #50	; 0x32
 8004492:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <UART_SetConfig+0x6f4>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800449e:	4498      	add	r8, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	469b      	mov	fp, r3
 80044a4:	f04f 0c00 	mov.w	ip, #0
 80044a8:	46d9      	mov	r9, fp
 80044aa:	46e2      	mov	sl, ip
 80044ac:	eb19 0309 	adds.w	r3, r9, r9
 80044b0:	eb4a 040a 	adc.w	r4, sl, sl
 80044b4:	4699      	mov	r9, r3
 80044b6:	46a2      	mov	sl, r4
 80044b8:	eb19 090b 	adds.w	r9, r9, fp
 80044bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044d4:	4689      	mov	r9, r1
 80044d6:	4692      	mov	sl, r2
 80044d8:	eb1b 0509 	adds.w	r5, fp, r9
 80044dc:	eb4c 060a 	adc.w	r6, ip, sl
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4619      	mov	r1, r3
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	f04f 0400 	mov.w	r4, #0
 80044f2:	0094      	lsls	r4, r2, #2
 80044f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	4628      	mov	r0, r5
 8004500:	4631      	mov	r1, r6
 8004502:	f7fb fedd 	bl	80002c0 <__aeabi_uldivmod>
 8004506:	4603      	mov	r3, r0
 8004508:	460c      	mov	r4, r1
 800450a:	461a      	mov	r2, r3
 800450c:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <UART_SetConfig+0x6f4>)
 800450e:	fba3 1302 	umull	r1, r3, r3, r2
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2164      	movs	r1, #100	; 0x64
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	3332      	adds	r3, #50	; 0x32
 8004520:	4a09      	ldr	r2, [pc, #36]	; (8004548 <UART_SetConfig+0x6f4>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	f003 020f 	and.w	r2, r3, #15
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4442      	add	r2, r8
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	e7ff      	b.n	8004536 <UART_SetConfig+0x6e2>
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004540:	40011000 	.word	0x40011000
 8004544:	40011400 	.word	0x40011400
 8004548:	51eb851f 	.word	0x51eb851f

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	; (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000010 	.word	0x20000010

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4e0d      	ldr	r6, [pc, #52]	; (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	; (8004594 <__libc_init_array+0x3c>)
 800455e:	1ba4      	subs	r4, r4, r6
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2500      	movs	r5, #0
 8004564:	42a5      	cmp	r5, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4e0b      	ldr	r6, [pc, #44]	; (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	; (800459c <__libc_init_array+0x44>)
 800456c:	f000 fc28 	bl	8004dc0 <_init>
 8004570:	1ba4      	subs	r4, r4, r6
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2500      	movs	r5, #0
 8004576:	42a5      	cmp	r5, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004580:	4798      	blx	r3
 8004582:	3501      	adds	r5, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800458a:	4798      	blx	r3
 800458c:	3501      	adds	r5, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	08004e50 	.word	0x08004e50
 8004594:	08004e50 	.word	0x08004e50
 8004598:	08004e50 	.word	0x08004e50
 800459c:	08004e54 	.word	0x08004e54

080045a0 <memcpy>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	1e43      	subs	r3, r0, #1
 80045a4:	440a      	add	r2, r1
 80045a6:	4291      	cmp	r1, r2
 80045a8:	d100      	bne.n	80045ac <memcpy+0xc>
 80045aa:	bd10      	pop	{r4, pc}
 80045ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b4:	e7f7      	b.n	80045a6 <memcpy+0x6>

080045b6 <memset>:
 80045b6:	4402      	add	r2, r0
 80045b8:	4603      	mov	r3, r0
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d100      	bne.n	80045c0 <memset+0xa>
 80045be:	4770      	bx	lr
 80045c0:	f803 1b01 	strb.w	r1, [r3], #1
 80045c4:	e7f9      	b.n	80045ba <memset+0x4>
	...

080045c8 <siprintf>:
 80045c8:	b40e      	push	{r1, r2, r3}
 80045ca:	b500      	push	{lr}
 80045cc:	b09c      	sub	sp, #112	; 0x70
 80045ce:	ab1d      	add	r3, sp, #116	; 0x74
 80045d0:	9002      	str	r0, [sp, #8]
 80045d2:	9006      	str	r0, [sp, #24]
 80045d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045d8:	4809      	ldr	r0, [pc, #36]	; (8004600 <siprintf+0x38>)
 80045da:	9107      	str	r1, [sp, #28]
 80045dc:	9104      	str	r1, [sp, #16]
 80045de:	4909      	ldr	r1, [pc, #36]	; (8004604 <siprintf+0x3c>)
 80045e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e4:	9105      	str	r1, [sp, #20]
 80045e6:	6800      	ldr	r0, [r0, #0]
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	a902      	add	r1, sp, #8
 80045ec:	f000 f866 	bl	80046bc <_svfiprintf_r>
 80045f0:	9b02      	ldr	r3, [sp, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	b01c      	add	sp, #112	; 0x70
 80045f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045fc:	b003      	add	sp, #12
 80045fe:	4770      	bx	lr
 8004600:	20000010 	.word	0x20000010
 8004604:	ffff0208 	.word	0xffff0208

08004608 <__ssputs_r>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	688e      	ldr	r6, [r1, #8]
 800460e:	429e      	cmp	r6, r3
 8004610:	4682      	mov	sl, r0
 8004612:	460c      	mov	r4, r1
 8004614:	4690      	mov	r8, r2
 8004616:	4699      	mov	r9, r3
 8004618:	d837      	bhi.n	800468a <__ssputs_r+0x82>
 800461a:	898a      	ldrh	r2, [r1, #12]
 800461c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004620:	d031      	beq.n	8004686 <__ssputs_r+0x7e>
 8004622:	6825      	ldr	r5, [r4, #0]
 8004624:	6909      	ldr	r1, [r1, #16]
 8004626:	1a6f      	subs	r7, r5, r1
 8004628:	6965      	ldr	r5, [r4, #20]
 800462a:	2302      	movs	r3, #2
 800462c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004630:	fb95 f5f3 	sdiv	r5, r5, r3
 8004634:	f109 0301 	add.w	r3, r9, #1
 8004638:	443b      	add	r3, r7
 800463a:	429d      	cmp	r5, r3
 800463c:	bf38      	it	cc
 800463e:	461d      	movcc	r5, r3
 8004640:	0553      	lsls	r3, r2, #21
 8004642:	d530      	bpl.n	80046a6 <__ssputs_r+0x9e>
 8004644:	4629      	mov	r1, r5
 8004646:	f000 fb21 	bl	8004c8c <_malloc_r>
 800464a:	4606      	mov	r6, r0
 800464c:	b950      	cbnz	r0, 8004664 <__ssputs_r+0x5c>
 800464e:	230c      	movs	r3, #12
 8004650:	f8ca 3000 	str.w	r3, [sl]
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004664:	463a      	mov	r2, r7
 8004666:	6921      	ldr	r1, [r4, #16]
 8004668:	f7ff ff9a 	bl	80045a0 <memcpy>
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	6126      	str	r6, [r4, #16]
 800467a:	6165      	str	r5, [r4, #20]
 800467c:	443e      	add	r6, r7
 800467e:	1bed      	subs	r5, r5, r7
 8004680:	6026      	str	r6, [r4, #0]
 8004682:	60a5      	str	r5, [r4, #8]
 8004684:	464e      	mov	r6, r9
 8004686:	454e      	cmp	r6, r9
 8004688:	d900      	bls.n	800468c <__ssputs_r+0x84>
 800468a:	464e      	mov	r6, r9
 800468c:	4632      	mov	r2, r6
 800468e:	4641      	mov	r1, r8
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	f000 fa93 	bl	8004bbc <memmove>
 8004696:	68a3      	ldr	r3, [r4, #8]
 8004698:	1b9b      	subs	r3, r3, r6
 800469a:	60a3      	str	r3, [r4, #8]
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	441e      	add	r6, r3
 80046a0:	6026      	str	r6, [r4, #0]
 80046a2:	2000      	movs	r0, #0
 80046a4:	e7dc      	b.n	8004660 <__ssputs_r+0x58>
 80046a6:	462a      	mov	r2, r5
 80046a8:	f000 fb4a 	bl	8004d40 <_realloc_r>
 80046ac:	4606      	mov	r6, r0
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d1e2      	bne.n	8004678 <__ssputs_r+0x70>
 80046b2:	6921      	ldr	r1, [r4, #16]
 80046b4:	4650      	mov	r0, sl
 80046b6:	f000 fa9b 	bl	8004bf0 <_free_r>
 80046ba:	e7c8      	b.n	800464e <__ssputs_r+0x46>

080046bc <_svfiprintf_r>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	461d      	mov	r5, r3
 80046c2:	898b      	ldrh	r3, [r1, #12]
 80046c4:	061f      	lsls	r7, r3, #24
 80046c6:	b09d      	sub	sp, #116	; 0x74
 80046c8:	4680      	mov	r8, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4616      	mov	r6, r2
 80046ce:	d50f      	bpl.n	80046f0 <_svfiprintf_r+0x34>
 80046d0:	690b      	ldr	r3, [r1, #16]
 80046d2:	b96b      	cbnz	r3, 80046f0 <_svfiprintf_r+0x34>
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	f000 fad9 	bl	8004c8c <_malloc_r>
 80046da:	6020      	str	r0, [r4, #0]
 80046dc:	6120      	str	r0, [r4, #16]
 80046de:	b928      	cbnz	r0, 80046ec <_svfiprintf_r+0x30>
 80046e0:	230c      	movs	r3, #12
 80046e2:	f8c8 3000 	str.w	r3, [r8]
 80046e6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ea:	e0c8      	b.n	800487e <_svfiprintf_r+0x1c2>
 80046ec:	2340      	movs	r3, #64	; 0x40
 80046ee:	6163      	str	r3, [r4, #20]
 80046f0:	2300      	movs	r3, #0
 80046f2:	9309      	str	r3, [sp, #36]	; 0x24
 80046f4:	2320      	movs	r3, #32
 80046f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046fa:	2330      	movs	r3, #48	; 0x30
 80046fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004700:	9503      	str	r5, [sp, #12]
 8004702:	f04f 0b01 	mov.w	fp, #1
 8004706:	4637      	mov	r7, r6
 8004708:	463d      	mov	r5, r7
 800470a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800470e:	b10b      	cbz	r3, 8004714 <_svfiprintf_r+0x58>
 8004710:	2b25      	cmp	r3, #37	; 0x25
 8004712:	d13e      	bne.n	8004792 <_svfiprintf_r+0xd6>
 8004714:	ebb7 0a06 	subs.w	sl, r7, r6
 8004718:	d00b      	beq.n	8004732 <_svfiprintf_r+0x76>
 800471a:	4653      	mov	r3, sl
 800471c:	4632      	mov	r2, r6
 800471e:	4621      	mov	r1, r4
 8004720:	4640      	mov	r0, r8
 8004722:	f7ff ff71 	bl	8004608 <__ssputs_r>
 8004726:	3001      	adds	r0, #1
 8004728:	f000 80a4 	beq.w	8004874 <_svfiprintf_r+0x1b8>
 800472c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800472e:	4453      	add	r3, sl
 8004730:	9309      	str	r3, [sp, #36]	; 0x24
 8004732:	783b      	ldrb	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 809d 	beq.w	8004874 <_svfiprintf_r+0x1b8>
 800473a:	2300      	movs	r3, #0
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800474c:	931a      	str	r3, [sp, #104]	; 0x68
 800474e:	462f      	mov	r7, r5
 8004750:	2205      	movs	r2, #5
 8004752:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004756:	4850      	ldr	r0, [pc, #320]	; (8004898 <_svfiprintf_r+0x1dc>)
 8004758:	f7fb fd62 	bl	8000220 <memchr>
 800475c:	9b04      	ldr	r3, [sp, #16]
 800475e:	b9d0      	cbnz	r0, 8004796 <_svfiprintf_r+0xda>
 8004760:	06d9      	lsls	r1, r3, #27
 8004762:	bf44      	itt	mi
 8004764:	2220      	movmi	r2, #32
 8004766:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800476a:	071a      	lsls	r2, r3, #28
 800476c:	bf44      	itt	mi
 800476e:	222b      	movmi	r2, #43	; 0x2b
 8004770:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004774:	782a      	ldrb	r2, [r5, #0]
 8004776:	2a2a      	cmp	r2, #42	; 0x2a
 8004778:	d015      	beq.n	80047a6 <_svfiprintf_r+0xea>
 800477a:	9a07      	ldr	r2, [sp, #28]
 800477c:	462f      	mov	r7, r5
 800477e:	2000      	movs	r0, #0
 8004780:	250a      	movs	r5, #10
 8004782:	4639      	mov	r1, r7
 8004784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004788:	3b30      	subs	r3, #48	; 0x30
 800478a:	2b09      	cmp	r3, #9
 800478c:	d94d      	bls.n	800482a <_svfiprintf_r+0x16e>
 800478e:	b1b8      	cbz	r0, 80047c0 <_svfiprintf_r+0x104>
 8004790:	e00f      	b.n	80047b2 <_svfiprintf_r+0xf6>
 8004792:	462f      	mov	r7, r5
 8004794:	e7b8      	b.n	8004708 <_svfiprintf_r+0x4c>
 8004796:	4a40      	ldr	r2, [pc, #256]	; (8004898 <_svfiprintf_r+0x1dc>)
 8004798:	1a80      	subs	r0, r0, r2
 800479a:	fa0b f000 	lsl.w	r0, fp, r0
 800479e:	4318      	orrs	r0, r3
 80047a0:	9004      	str	r0, [sp, #16]
 80047a2:	463d      	mov	r5, r7
 80047a4:	e7d3      	b.n	800474e <_svfiprintf_r+0x92>
 80047a6:	9a03      	ldr	r2, [sp, #12]
 80047a8:	1d11      	adds	r1, r2, #4
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	9103      	str	r1, [sp, #12]
 80047ae:	2a00      	cmp	r2, #0
 80047b0:	db01      	blt.n	80047b6 <_svfiprintf_r+0xfa>
 80047b2:	9207      	str	r2, [sp, #28]
 80047b4:	e004      	b.n	80047c0 <_svfiprintf_r+0x104>
 80047b6:	4252      	negs	r2, r2
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	9207      	str	r2, [sp, #28]
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	783b      	ldrb	r3, [r7, #0]
 80047c2:	2b2e      	cmp	r3, #46	; 0x2e
 80047c4:	d10c      	bne.n	80047e0 <_svfiprintf_r+0x124>
 80047c6:	787b      	ldrb	r3, [r7, #1]
 80047c8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ca:	d133      	bne.n	8004834 <_svfiprintf_r+0x178>
 80047cc:	9b03      	ldr	r3, [sp, #12]
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bfb8      	it	lt
 80047d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047dc:	3702      	adds	r7, #2
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	4d2e      	ldr	r5, [pc, #184]	; (800489c <_svfiprintf_r+0x1e0>)
 80047e2:	7839      	ldrb	r1, [r7, #0]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4628      	mov	r0, r5
 80047e8:	f7fb fd1a 	bl	8000220 <memchr>
 80047ec:	b138      	cbz	r0, 80047fe <_svfiprintf_r+0x142>
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	1b40      	subs	r0, r0, r5
 80047f2:	fa03 f000 	lsl.w	r0, r3, r0
 80047f6:	9b04      	ldr	r3, [sp, #16]
 80047f8:	4303      	orrs	r3, r0
 80047fa:	3701      	adds	r7, #1
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	7839      	ldrb	r1, [r7, #0]
 8004800:	4827      	ldr	r0, [pc, #156]	; (80048a0 <_svfiprintf_r+0x1e4>)
 8004802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004806:	2206      	movs	r2, #6
 8004808:	1c7e      	adds	r6, r7, #1
 800480a:	f7fb fd09 	bl	8000220 <memchr>
 800480e:	2800      	cmp	r0, #0
 8004810:	d038      	beq.n	8004884 <_svfiprintf_r+0x1c8>
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <_svfiprintf_r+0x1e8>)
 8004814:	bb13      	cbnz	r3, 800485c <_svfiprintf_r+0x1a0>
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	3307      	adds	r3, #7
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	3308      	adds	r3, #8
 8004820:	9303      	str	r3, [sp, #12]
 8004822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004824:	444b      	add	r3, r9
 8004826:	9309      	str	r3, [sp, #36]	; 0x24
 8004828:	e76d      	b.n	8004706 <_svfiprintf_r+0x4a>
 800482a:	fb05 3202 	mla	r2, r5, r2, r3
 800482e:	2001      	movs	r0, #1
 8004830:	460f      	mov	r7, r1
 8004832:	e7a6      	b.n	8004782 <_svfiprintf_r+0xc6>
 8004834:	2300      	movs	r3, #0
 8004836:	3701      	adds	r7, #1
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	4619      	mov	r1, r3
 800483c:	250a      	movs	r5, #10
 800483e:	4638      	mov	r0, r7
 8004840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004844:	3a30      	subs	r2, #48	; 0x30
 8004846:	2a09      	cmp	r2, #9
 8004848:	d903      	bls.n	8004852 <_svfiprintf_r+0x196>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0c8      	beq.n	80047e0 <_svfiprintf_r+0x124>
 800484e:	9105      	str	r1, [sp, #20]
 8004850:	e7c6      	b.n	80047e0 <_svfiprintf_r+0x124>
 8004852:	fb05 2101 	mla	r1, r5, r1, r2
 8004856:	2301      	movs	r3, #1
 8004858:	4607      	mov	r7, r0
 800485a:	e7f0      	b.n	800483e <_svfiprintf_r+0x182>
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4622      	mov	r2, r4
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <_svfiprintf_r+0x1ec>)
 8004864:	a904      	add	r1, sp, #16
 8004866:	4640      	mov	r0, r8
 8004868:	f3af 8000 	nop.w
 800486c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004870:	4681      	mov	r9, r0
 8004872:	d1d6      	bne.n	8004822 <_svfiprintf_r+0x166>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	065b      	lsls	r3, r3, #25
 8004878:	f53f af35 	bmi.w	80046e6 <_svfiprintf_r+0x2a>
 800487c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800487e:	b01d      	add	sp, #116	; 0x74
 8004880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004884:	ab03      	add	r3, sp, #12
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4622      	mov	r2, r4
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <_svfiprintf_r+0x1ec>)
 800488c:	a904      	add	r1, sp, #16
 800488e:	4640      	mov	r0, r8
 8004890:	f000 f882 	bl	8004998 <_printf_i>
 8004894:	e7ea      	b.n	800486c <_svfiprintf_r+0x1b0>
 8004896:	bf00      	nop
 8004898:	08004e14 	.word	0x08004e14
 800489c:	08004e1a 	.word	0x08004e1a
 80048a0:	08004e1e 	.word	0x08004e1e
 80048a4:	00000000 	.word	0x00000000
 80048a8:	08004609 	.word	0x08004609

080048ac <_printf_common>:
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	4691      	mov	r9, r2
 80048b2:	461f      	mov	r7, r3
 80048b4:	688a      	ldr	r2, [r1, #8]
 80048b6:	690b      	ldr	r3, [r1, #16]
 80048b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048bc:	4293      	cmp	r3, r2
 80048be:	bfb8      	it	lt
 80048c0:	4613      	movlt	r3, r2
 80048c2:	f8c9 3000 	str.w	r3, [r9]
 80048c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ca:	4606      	mov	r6, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	b112      	cbz	r2, 80048d6 <_printf_common+0x2a>
 80048d0:	3301      	adds	r3, #1
 80048d2:	f8c9 3000 	str.w	r3, [r9]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	0699      	lsls	r1, r3, #26
 80048da:	bf42      	ittt	mi
 80048dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048e0:	3302      	addmi	r3, #2
 80048e2:	f8c9 3000 	strmi.w	r3, [r9]
 80048e6:	6825      	ldr	r5, [r4, #0]
 80048e8:	f015 0506 	ands.w	r5, r5, #6
 80048ec:	d107      	bne.n	80048fe <_printf_common+0x52>
 80048ee:	f104 0a19 	add.w	sl, r4, #25
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	f8d9 2000 	ldr.w	r2, [r9]
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	42ab      	cmp	r3, r5
 80048fc:	dc28      	bgt.n	8004950 <_printf_common+0xa4>
 80048fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	3300      	adds	r3, #0
 8004906:	bf18      	it	ne
 8004908:	2301      	movne	r3, #1
 800490a:	0692      	lsls	r2, r2, #26
 800490c:	d42d      	bmi.n	800496a <_printf_common+0xbe>
 800490e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004912:	4639      	mov	r1, r7
 8004914:	4630      	mov	r0, r6
 8004916:	47c0      	blx	r8
 8004918:	3001      	adds	r0, #1
 800491a:	d020      	beq.n	800495e <_printf_common+0xb2>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	68e5      	ldr	r5, [r4, #12]
 8004920:	f8d9 2000 	ldr.w	r2, [r9]
 8004924:	f003 0306 	and.w	r3, r3, #6
 8004928:	2b04      	cmp	r3, #4
 800492a:	bf08      	it	eq
 800492c:	1aad      	subeq	r5, r5, r2
 800492e:	68a3      	ldr	r3, [r4, #8]
 8004930:	6922      	ldr	r2, [r4, #16]
 8004932:	bf0c      	ite	eq
 8004934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004938:	2500      	movne	r5, #0
 800493a:	4293      	cmp	r3, r2
 800493c:	bfc4      	itt	gt
 800493e:	1a9b      	subgt	r3, r3, r2
 8004940:	18ed      	addgt	r5, r5, r3
 8004942:	f04f 0900 	mov.w	r9, #0
 8004946:	341a      	adds	r4, #26
 8004948:	454d      	cmp	r5, r9
 800494a:	d11a      	bne.n	8004982 <_printf_common+0xd6>
 800494c:	2000      	movs	r0, #0
 800494e:	e008      	b.n	8004962 <_printf_common+0xb6>
 8004950:	2301      	movs	r3, #1
 8004952:	4652      	mov	r2, sl
 8004954:	4639      	mov	r1, r7
 8004956:	4630      	mov	r0, r6
 8004958:	47c0      	blx	r8
 800495a:	3001      	adds	r0, #1
 800495c:	d103      	bne.n	8004966 <_printf_common+0xba>
 800495e:	f04f 30ff 	mov.w	r0, #4294967295
 8004962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004966:	3501      	adds	r5, #1
 8004968:	e7c3      	b.n	80048f2 <_printf_common+0x46>
 800496a:	18e1      	adds	r1, r4, r3
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	2030      	movs	r0, #48	; 0x30
 8004970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004974:	4422      	add	r2, r4
 8004976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800497a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800497e:	3302      	adds	r3, #2
 8004980:	e7c5      	b.n	800490e <_printf_common+0x62>
 8004982:	2301      	movs	r3, #1
 8004984:	4622      	mov	r2, r4
 8004986:	4639      	mov	r1, r7
 8004988:	4630      	mov	r0, r6
 800498a:	47c0      	blx	r8
 800498c:	3001      	adds	r0, #1
 800498e:	d0e6      	beq.n	800495e <_printf_common+0xb2>
 8004990:	f109 0901 	add.w	r9, r9, #1
 8004994:	e7d8      	b.n	8004948 <_printf_common+0x9c>
	...

08004998 <_printf_i>:
 8004998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800499c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049a0:	460c      	mov	r4, r1
 80049a2:	7e09      	ldrb	r1, [r1, #24]
 80049a4:	b085      	sub	sp, #20
 80049a6:	296e      	cmp	r1, #110	; 0x6e
 80049a8:	4617      	mov	r7, r2
 80049aa:	4606      	mov	r6, r0
 80049ac:	4698      	mov	r8, r3
 80049ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049b0:	f000 80b3 	beq.w	8004b1a <_printf_i+0x182>
 80049b4:	d822      	bhi.n	80049fc <_printf_i+0x64>
 80049b6:	2963      	cmp	r1, #99	; 0x63
 80049b8:	d036      	beq.n	8004a28 <_printf_i+0x90>
 80049ba:	d80a      	bhi.n	80049d2 <_printf_i+0x3a>
 80049bc:	2900      	cmp	r1, #0
 80049be:	f000 80b9 	beq.w	8004b34 <_printf_i+0x19c>
 80049c2:	2958      	cmp	r1, #88	; 0x58
 80049c4:	f000 8083 	beq.w	8004ace <_printf_i+0x136>
 80049c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049d0:	e032      	b.n	8004a38 <_printf_i+0xa0>
 80049d2:	2964      	cmp	r1, #100	; 0x64
 80049d4:	d001      	beq.n	80049da <_printf_i+0x42>
 80049d6:	2969      	cmp	r1, #105	; 0x69
 80049d8:	d1f6      	bne.n	80049c8 <_printf_i+0x30>
 80049da:	6820      	ldr	r0, [r4, #0]
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	0605      	lsls	r5, r0, #24
 80049e0:	f103 0104 	add.w	r1, r3, #4
 80049e4:	d52a      	bpl.n	8004a3c <_printf_i+0xa4>
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da03      	bge.n	80049f6 <_printf_i+0x5e>
 80049ee:	222d      	movs	r2, #45	; 0x2d
 80049f0:	425b      	negs	r3, r3
 80049f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049f6:	486f      	ldr	r0, [pc, #444]	; (8004bb4 <_printf_i+0x21c>)
 80049f8:	220a      	movs	r2, #10
 80049fa:	e039      	b.n	8004a70 <_printf_i+0xd8>
 80049fc:	2973      	cmp	r1, #115	; 0x73
 80049fe:	f000 809d 	beq.w	8004b3c <_printf_i+0x1a4>
 8004a02:	d808      	bhi.n	8004a16 <_printf_i+0x7e>
 8004a04:	296f      	cmp	r1, #111	; 0x6f
 8004a06:	d020      	beq.n	8004a4a <_printf_i+0xb2>
 8004a08:	2970      	cmp	r1, #112	; 0x70
 8004a0a:	d1dd      	bne.n	80049c8 <_printf_i+0x30>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	e003      	b.n	8004a1e <_printf_i+0x86>
 8004a16:	2975      	cmp	r1, #117	; 0x75
 8004a18:	d017      	beq.n	8004a4a <_printf_i+0xb2>
 8004a1a:	2978      	cmp	r1, #120	; 0x78
 8004a1c:	d1d4      	bne.n	80049c8 <_printf_i+0x30>
 8004a1e:	2378      	movs	r3, #120	; 0x78
 8004a20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a24:	4864      	ldr	r0, [pc, #400]	; (8004bb8 <_printf_i+0x220>)
 8004a26:	e055      	b.n	8004ad4 <_printf_i+0x13c>
 8004a28:	6813      	ldr	r3, [r2, #0]
 8004a2a:	1d19      	adds	r1, r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6011      	str	r1, [r2, #0]
 8004a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e08c      	b.n	8004b56 <_printf_i+0x1be>
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6011      	str	r1, [r2, #0]
 8004a40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a44:	bf18      	it	ne
 8004a46:	b21b      	sxthne	r3, r3
 8004a48:	e7cf      	b.n	80049ea <_printf_i+0x52>
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	6825      	ldr	r5, [r4, #0]
 8004a4e:	1d18      	adds	r0, r3, #4
 8004a50:	6010      	str	r0, [r2, #0]
 8004a52:	0628      	lsls	r0, r5, #24
 8004a54:	d501      	bpl.n	8004a5a <_printf_i+0xc2>
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	e002      	b.n	8004a60 <_printf_i+0xc8>
 8004a5a:	0668      	lsls	r0, r5, #25
 8004a5c:	d5fb      	bpl.n	8004a56 <_printf_i+0xbe>
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	4854      	ldr	r0, [pc, #336]	; (8004bb4 <_printf_i+0x21c>)
 8004a62:	296f      	cmp	r1, #111	; 0x6f
 8004a64:	bf14      	ite	ne
 8004a66:	220a      	movne	r2, #10
 8004a68:	2208      	moveq	r2, #8
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a70:	6865      	ldr	r5, [r4, #4]
 8004a72:	60a5      	str	r5, [r4, #8]
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	f2c0 8095 	blt.w	8004ba4 <_printf_i+0x20c>
 8004a7a:	6821      	ldr	r1, [r4, #0]
 8004a7c:	f021 0104 	bic.w	r1, r1, #4
 8004a80:	6021      	str	r1, [r4, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d13d      	bne.n	8004b02 <_printf_i+0x16a>
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	f040 808e 	bne.w	8004ba8 <_printf_i+0x210>
 8004a8c:	4665      	mov	r5, ip
 8004a8e:	2a08      	cmp	r2, #8
 8004a90:	d10b      	bne.n	8004aaa <_printf_i+0x112>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	07db      	lsls	r3, r3, #31
 8004a96:	d508      	bpl.n	8004aaa <_printf_i+0x112>
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	6862      	ldr	r2, [r4, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	bfde      	ittt	le
 8004aa0:	2330      	movle	r3, #48	; 0x30
 8004aa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aaa:	ebac 0305 	sub.w	r3, ip, r5
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	f8cd 8000 	str.w	r8, [sp]
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	aa03      	add	r2, sp, #12
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4630      	mov	r0, r6
 8004abc:	f7ff fef6 	bl	80048ac <_printf_common>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d14d      	bne.n	8004b60 <_printf_i+0x1c8>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	b005      	add	sp, #20
 8004aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ace:	4839      	ldr	r0, [pc, #228]	; (8004bb4 <_printf_i+0x21c>)
 8004ad0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ad4:	6813      	ldr	r3, [r2, #0]
 8004ad6:	6821      	ldr	r1, [r4, #0]
 8004ad8:	1d1d      	adds	r5, r3, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6015      	str	r5, [r2, #0]
 8004ade:	060a      	lsls	r2, r1, #24
 8004ae0:	d50b      	bpl.n	8004afa <_printf_i+0x162>
 8004ae2:	07ca      	lsls	r2, r1, #31
 8004ae4:	bf44      	itt	mi
 8004ae6:	f041 0120 	orrmi.w	r1, r1, #32
 8004aea:	6021      	strmi	r1, [r4, #0]
 8004aec:	b91b      	cbnz	r3, 8004af6 <_printf_i+0x15e>
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	f022 0220 	bic.w	r2, r2, #32
 8004af4:	6022      	str	r2, [r4, #0]
 8004af6:	2210      	movs	r2, #16
 8004af8:	e7b7      	b.n	8004a6a <_printf_i+0xd2>
 8004afa:	064d      	lsls	r5, r1, #25
 8004afc:	bf48      	it	mi
 8004afe:	b29b      	uxthmi	r3, r3
 8004b00:	e7ef      	b.n	8004ae2 <_printf_i+0x14a>
 8004b02:	4665      	mov	r5, ip
 8004b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b08:	fb02 3311 	mls	r3, r2, r1, r3
 8004b0c:	5cc3      	ldrb	r3, [r0, r3]
 8004b0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b12:	460b      	mov	r3, r1
 8004b14:	2900      	cmp	r1, #0
 8004b16:	d1f5      	bne.n	8004b04 <_printf_i+0x16c>
 8004b18:	e7b9      	b.n	8004a8e <_printf_i+0xf6>
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	6825      	ldr	r5, [r4, #0]
 8004b1e:	6961      	ldr	r1, [r4, #20]
 8004b20:	1d18      	adds	r0, r3, #4
 8004b22:	6010      	str	r0, [r2, #0]
 8004b24:	0628      	lsls	r0, r5, #24
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	d501      	bpl.n	8004b2e <_printf_i+0x196>
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <_printf_i+0x19c>
 8004b2e:	066a      	lsls	r2, r5, #25
 8004b30:	d5fb      	bpl.n	8004b2a <_printf_i+0x192>
 8004b32:	8019      	strh	r1, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	4665      	mov	r5, ip
 8004b3a:	e7b9      	b.n	8004ab0 <_printf_i+0x118>
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	1d19      	adds	r1, r3, #4
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	681d      	ldr	r5, [r3, #0]
 8004b44:	6862      	ldr	r2, [r4, #4]
 8004b46:	2100      	movs	r1, #0
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f7fb fb69 	bl	8000220 <memchr>
 8004b4e:	b108      	cbz	r0, 8004b54 <_printf_i+0x1bc>
 8004b50:	1b40      	subs	r0, r0, r5
 8004b52:	6060      	str	r0, [r4, #4]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5e:	e7a7      	b.n	8004ab0 <_printf_i+0x118>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	462a      	mov	r2, r5
 8004b64:	4639      	mov	r1, r7
 8004b66:	4630      	mov	r0, r6
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0aa      	beq.n	8004ac4 <_printf_i+0x12c>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	079b      	lsls	r3, r3, #30
 8004b72:	d413      	bmi.n	8004b9c <_printf_i+0x204>
 8004b74:	68e0      	ldr	r0, [r4, #12]
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	bfb8      	it	lt
 8004b7c:	4618      	movlt	r0, r3
 8004b7e:	e7a3      	b.n	8004ac8 <_printf_i+0x130>
 8004b80:	2301      	movs	r3, #1
 8004b82:	464a      	mov	r2, r9
 8004b84:	4639      	mov	r1, r7
 8004b86:	4630      	mov	r0, r6
 8004b88:	47c0      	blx	r8
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d09a      	beq.n	8004ac4 <_printf_i+0x12c>
 8004b8e:	3501      	adds	r5, #1
 8004b90:	68e3      	ldr	r3, [r4, #12]
 8004b92:	9a03      	ldr	r2, [sp, #12]
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	42ab      	cmp	r3, r5
 8004b98:	dcf2      	bgt.n	8004b80 <_printf_i+0x1e8>
 8004b9a:	e7eb      	b.n	8004b74 <_printf_i+0x1dc>
 8004b9c:	2500      	movs	r5, #0
 8004b9e:	f104 0919 	add.w	r9, r4, #25
 8004ba2:	e7f5      	b.n	8004b90 <_printf_i+0x1f8>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ac      	bne.n	8004b02 <_printf_i+0x16a>
 8004ba8:	7803      	ldrb	r3, [r0, #0]
 8004baa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb2:	e76c      	b.n	8004a8e <_printf_i+0xf6>
 8004bb4:	08004e25 	.word	0x08004e25
 8004bb8:	08004e36 	.word	0x08004e36

08004bbc <memmove>:
 8004bbc:	4288      	cmp	r0, r1
 8004bbe:	b510      	push	{r4, lr}
 8004bc0:	eb01 0302 	add.w	r3, r1, r2
 8004bc4:	d807      	bhi.n	8004bd6 <memmove+0x1a>
 8004bc6:	1e42      	subs	r2, r0, #1
 8004bc8:	4299      	cmp	r1, r3
 8004bca:	d00a      	beq.n	8004be2 <memmove+0x26>
 8004bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bd4:	e7f8      	b.n	8004bc8 <memmove+0xc>
 8004bd6:	4283      	cmp	r3, r0
 8004bd8:	d9f5      	bls.n	8004bc6 <memmove+0xa>
 8004bda:	1881      	adds	r1, r0, r2
 8004bdc:	1ad2      	subs	r2, r2, r3
 8004bde:	42d3      	cmn	r3, r2
 8004be0:	d100      	bne.n	8004be4 <memmove+0x28>
 8004be2:	bd10      	pop	{r4, pc}
 8004be4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004be8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004bec:	e7f7      	b.n	8004bde <memmove+0x22>
	...

08004bf0 <_free_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	d045      	beq.n	8004c84 <_free_r+0x94>
 8004bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bfc:	1f0c      	subs	r4, r1, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bfb8      	it	lt
 8004c02:	18e4      	addlt	r4, r4, r3
 8004c04:	f000 f8d2 	bl	8004dac <__malloc_lock>
 8004c08:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <_free_r+0x98>)
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	b933      	cbnz	r3, 8004c1e <_free_r+0x2e>
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	6014      	str	r4, [r2, #0]
 8004c14:	4628      	mov	r0, r5
 8004c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c1a:	f000 b8c8 	b.w	8004dae <__malloc_unlock>
 8004c1e:	42a3      	cmp	r3, r4
 8004c20:	d90c      	bls.n	8004c3c <_free_r+0x4c>
 8004c22:	6821      	ldr	r1, [r4, #0]
 8004c24:	1862      	adds	r2, r4, r1
 8004c26:	4293      	cmp	r3, r2
 8004c28:	bf04      	itt	eq
 8004c2a:	681a      	ldreq	r2, [r3, #0]
 8004c2c:	685b      	ldreq	r3, [r3, #4]
 8004c2e:	6063      	str	r3, [r4, #4]
 8004c30:	bf04      	itt	eq
 8004c32:	1852      	addeq	r2, r2, r1
 8004c34:	6022      	streq	r2, [r4, #0]
 8004c36:	6004      	str	r4, [r0, #0]
 8004c38:	e7ec      	b.n	8004c14 <_free_r+0x24>
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	b10a      	cbz	r2, 8004c44 <_free_r+0x54>
 8004c40:	42a2      	cmp	r2, r4
 8004c42:	d9fa      	bls.n	8004c3a <_free_r+0x4a>
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	1858      	adds	r0, r3, r1
 8004c48:	42a0      	cmp	r0, r4
 8004c4a:	d10b      	bne.n	8004c64 <_free_r+0x74>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	4401      	add	r1, r0
 8004c50:	1858      	adds	r0, r3, r1
 8004c52:	4282      	cmp	r2, r0
 8004c54:	6019      	str	r1, [r3, #0]
 8004c56:	d1dd      	bne.n	8004c14 <_free_r+0x24>
 8004c58:	6810      	ldr	r0, [r2, #0]
 8004c5a:	6852      	ldr	r2, [r2, #4]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	4401      	add	r1, r0
 8004c60:	6019      	str	r1, [r3, #0]
 8004c62:	e7d7      	b.n	8004c14 <_free_r+0x24>
 8004c64:	d902      	bls.n	8004c6c <_free_r+0x7c>
 8004c66:	230c      	movs	r3, #12
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	e7d3      	b.n	8004c14 <_free_r+0x24>
 8004c6c:	6820      	ldr	r0, [r4, #0]
 8004c6e:	1821      	adds	r1, r4, r0
 8004c70:	428a      	cmp	r2, r1
 8004c72:	bf04      	itt	eq
 8004c74:	6811      	ldreq	r1, [r2, #0]
 8004c76:	6852      	ldreq	r2, [r2, #4]
 8004c78:	6062      	str	r2, [r4, #4]
 8004c7a:	bf04      	itt	eq
 8004c7c:	1809      	addeq	r1, r1, r0
 8004c7e:	6021      	streq	r1, [r4, #0]
 8004c80:	605c      	str	r4, [r3, #4]
 8004c82:	e7c7      	b.n	8004c14 <_free_r+0x24>
 8004c84:	bd38      	pop	{r3, r4, r5, pc}
 8004c86:	bf00      	nop
 8004c88:	200000b4 	.word	0x200000b4

08004c8c <_malloc_r>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	1ccd      	adds	r5, r1, #3
 8004c90:	f025 0503 	bic.w	r5, r5, #3
 8004c94:	3508      	adds	r5, #8
 8004c96:	2d0c      	cmp	r5, #12
 8004c98:	bf38      	it	cc
 8004c9a:	250c      	movcc	r5, #12
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	db01      	blt.n	8004ca6 <_malloc_r+0x1a>
 8004ca2:	42a9      	cmp	r1, r5
 8004ca4:	d903      	bls.n	8004cae <_malloc_r+0x22>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	2000      	movs	r0, #0
 8004cac:	bd70      	pop	{r4, r5, r6, pc}
 8004cae:	f000 f87d 	bl	8004dac <__malloc_lock>
 8004cb2:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <_malloc_r+0xac>)
 8004cb4:	6814      	ldr	r4, [r2, #0]
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	b991      	cbnz	r1, 8004ce0 <_malloc_r+0x54>
 8004cba:	4c20      	ldr	r4, [pc, #128]	; (8004d3c <_malloc_r+0xb0>)
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	b91b      	cbnz	r3, 8004cc8 <_malloc_r+0x3c>
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f000 f863 	bl	8004d8c <_sbrk_r>
 8004cc6:	6020      	str	r0, [r4, #0]
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f000 f85e 	bl	8004d8c <_sbrk_r>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d124      	bne.n	8004d1e <_malloc_r+0x92>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	6033      	str	r3, [r6, #0]
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f000 f868 	bl	8004dae <__malloc_unlock>
 8004cde:	e7e4      	b.n	8004caa <_malloc_r+0x1e>
 8004ce0:	680b      	ldr	r3, [r1, #0]
 8004ce2:	1b5b      	subs	r3, r3, r5
 8004ce4:	d418      	bmi.n	8004d18 <_malloc_r+0x8c>
 8004ce6:	2b0b      	cmp	r3, #11
 8004ce8:	d90f      	bls.n	8004d0a <_malloc_r+0x7e>
 8004cea:	600b      	str	r3, [r1, #0]
 8004cec:	50cd      	str	r5, [r1, r3]
 8004cee:	18cc      	adds	r4, r1, r3
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f85c 	bl	8004dae <__malloc_unlock>
 8004cf6:	f104 000b 	add.w	r0, r4, #11
 8004cfa:	1d23      	adds	r3, r4, #4
 8004cfc:	f020 0007 	bic.w	r0, r0, #7
 8004d00:	1ac3      	subs	r3, r0, r3
 8004d02:	d0d3      	beq.n	8004cac <_malloc_r+0x20>
 8004d04:	425a      	negs	r2, r3
 8004d06:	50e2      	str	r2, [r4, r3]
 8004d08:	e7d0      	b.n	8004cac <_malloc_r+0x20>
 8004d0a:	428c      	cmp	r4, r1
 8004d0c:	684b      	ldr	r3, [r1, #4]
 8004d0e:	bf16      	itet	ne
 8004d10:	6063      	strne	r3, [r4, #4]
 8004d12:	6013      	streq	r3, [r2, #0]
 8004d14:	460c      	movne	r4, r1
 8004d16:	e7eb      	b.n	8004cf0 <_malloc_r+0x64>
 8004d18:	460c      	mov	r4, r1
 8004d1a:	6849      	ldr	r1, [r1, #4]
 8004d1c:	e7cc      	b.n	8004cb8 <_malloc_r+0x2c>
 8004d1e:	1cc4      	adds	r4, r0, #3
 8004d20:	f024 0403 	bic.w	r4, r4, #3
 8004d24:	42a0      	cmp	r0, r4
 8004d26:	d005      	beq.n	8004d34 <_malloc_r+0xa8>
 8004d28:	1a21      	subs	r1, r4, r0
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 f82e 	bl	8004d8c <_sbrk_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d0cf      	beq.n	8004cd4 <_malloc_r+0x48>
 8004d34:	6025      	str	r5, [r4, #0]
 8004d36:	e7db      	b.n	8004cf0 <_malloc_r+0x64>
 8004d38:	200000b4 	.word	0x200000b4
 8004d3c:	200000b8 	.word	0x200000b8

08004d40 <_realloc_r>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	4607      	mov	r7, r0
 8004d44:	4614      	mov	r4, r2
 8004d46:	460e      	mov	r6, r1
 8004d48:	b921      	cbnz	r1, 8004d54 <_realloc_r+0x14>
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d50:	f7ff bf9c 	b.w	8004c8c <_malloc_r>
 8004d54:	b922      	cbnz	r2, 8004d60 <_realloc_r+0x20>
 8004d56:	f7ff ff4b 	bl	8004bf0 <_free_r>
 8004d5a:	4625      	mov	r5, r4
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d60:	f000 f826 	bl	8004db0 <_malloc_usable_size_r>
 8004d64:	42a0      	cmp	r0, r4
 8004d66:	d20f      	bcs.n	8004d88 <_realloc_r+0x48>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7ff ff8e 	bl	8004c8c <_malloc_r>
 8004d70:	4605      	mov	r5, r0
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d0f2      	beq.n	8004d5c <_realloc_r+0x1c>
 8004d76:	4631      	mov	r1, r6
 8004d78:	4622      	mov	r2, r4
 8004d7a:	f7ff fc11 	bl	80045a0 <memcpy>
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff ff35 	bl	8004bf0 <_free_r>
 8004d86:	e7e9      	b.n	8004d5c <_realloc_r+0x1c>
 8004d88:	4635      	mov	r5, r6
 8004d8a:	e7e7      	b.n	8004d5c <_realloc_r+0x1c>

08004d8c <_sbrk_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4c06      	ldr	r4, [pc, #24]	; (8004da8 <_sbrk_r+0x1c>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4605      	mov	r5, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	f7fc fb02 	bl	80013a0 <_sbrk>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_sbrk_r+0x1a>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_sbrk_r+0x1a>
 8004da4:	602b      	str	r3, [r5, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20002df0 	.word	0x20002df0

08004dac <__malloc_lock>:
 8004dac:	4770      	bx	lr

08004dae <__malloc_unlock>:
 8004dae:	4770      	bx	lr

08004db0 <_malloc_usable_size_r>:
 8004db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db4:	1f18      	subs	r0, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bfbc      	itt	lt
 8004dba:	580b      	ldrlt	r3, [r1, r0]
 8004dbc:	18c0      	addlt	r0, r0, r3
 8004dbe:	4770      	bx	lr

08004dc0 <_init>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr

08004dcc <_fini>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr
