
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006610  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce0  08006ce0  000209e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce8  08006ce8  000209e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cec  08006cec  00016cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e0  20000000  08006cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004930  200009e0  080076d0  000209e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005310  080076d0  00025310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a8c  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026e2  00000000  00000000  0003249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00034b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00035aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023070  00000000  00000000  00036898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c281  00000000  00000000  00059908  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d283a  00000000  00000000  00065b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001383c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  00138440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e0 	.word	0x200009e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067c8 	.word	0x080067c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e4 	.word	0x200009e4
 800020c:	080067c8 	.word	0x080067c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b480      	push	{r7}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    //sprintf(uartData, "Selector              = %d",select_8_16);
    //HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    //sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

    if(select_8_16){
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01f      	beq.n	8000616 <conv_HEX_to_BIN+0x56>
		for(int i = 0; i < 8; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e018      	b.n	800060e <conv_HEX_to_BIN+0x4e>
			temp = hex_byte_in >> i;
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	fa42 f303 	asr.w	r3, r2, r3
 80005e4:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	bfb8      	it	lt
 80005f0:	425b      	neglt	r3, r3
 80005f2:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	2a00      	cmp	r2, #0
 80005fe:	bf14      	ite	ne
 8000600:	2201      	movne	r2, #1
 8000602:	2200      	moveq	r2, #0
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	2b07      	cmp	r3, #7
 8000612:	dde3      	ble.n	80005dc <conv_HEX_to_BIN+0x1c>
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000614:	e01e      	b.n	8000654 <conv_HEX_to_BIN+0x94>
		for(int i = 0; i < 16; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]
			*(bin_byte_out+i) = temp;
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	3301      	adds	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
}
 8000654:	bf00      	nop
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000664:	2201      	movs	r2, #1
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <init_AX25+0x2c>)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <init_AX25+0x30>)
 800066a:	f004 fe21 	bl	80052b0 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <init_AX25+0x34>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <init_AX25+0x34>)
 8000676:	2200      	movs	r2, #0
 8000678:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <init_AX25+0x34>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <init_AX25+0x34>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20001d80 	.word	0x20001d80
 8000690:	200042c8 	.word	0x200042c8
 8000694:	20001d74 	.word	0x20001d74

08000698 <tx_rx>:

void tx_rx() {
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	if (changeMode) {
 800069e:	4b59      	ldr	r3, [pc, #356]	; (8000804 <tx_rx+0x16c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <tx_rx+0x18>
		changeMode = 0;
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <tx_rx+0x16c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
		toggleMode();
 80006ac:	f001 fa14 	bl	8001ad8 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 80006b0:	4b55      	ldr	r3, [pc, #340]	; (8000808 <tx_rx+0x170>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d07e      	beq.n	80007b6 <tx_rx+0x11e>
		bool packet_received = false;
 80006b8:	2300      	movs	r3, #0
 80006ba:	717b      	strb	r3, [r7, #5]
		bool packet_converted = false;
 80006bc:	2300      	movs	r3, #0
 80006be:	71fb      	strb	r3, [r7, #7]

		//Run receiving KISS
		packet_received = receiving_KISS();
 80006c0:	f001 f854 	bl	800176c <receiving_KISS>
 80006c4:	4603      	mov	r3, r0
 80006c6:	717b      	strb	r3, [r7, #5]

		if(packet_received){
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <tx_rx+0x3e>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 80006ce:	f001 f97f 	bl	80019d0 <KISS_TO_AX25>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <tx_rx+0x48>
			output_AX25();
 80006dc:	f000 f8a2 	bl	8000824 <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 80006e0:	f000 fb5e 	bl	8000da0 <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d019      	beq.n	8000724 <tx_rx+0x8c>
			sprintf(uartData, "Error receiving KISS packet\n");
 80006f0:	4a46      	ldr	r2, [pc, #280]	; (800080c <tx_rx+0x174>)
 80006f2:	4b47      	ldr	r3, [pc, #284]	; (8000810 <tx_rx+0x178>)
 80006f4:	4615      	mov	r5, r2
 80006f6:	461c      	mov	r4, r3
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	6028      	str	r0, [r5, #0]
 80006fc:	6069      	str	r1, [r5, #4]
 80006fe:	60aa      	str	r2, [r5, #8]
 8000700:	60eb      	str	r3, [r5, #12]
 8000702:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000704:	6128      	str	r0, [r5, #16]
 8000706:	6169      	str	r1, [r5, #20]
 8000708:	61aa      	str	r2, [r5, #24]
 800070a:	7823      	ldrb	r3, [r4, #0]
 800070c:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800070e:	483f      	ldr	r0, [pc, #252]	; (800080c <tx_rx+0x174>)
 8000710:	f7ff fd7e 	bl	8000210 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	230a      	movs	r3, #10
 800071a:	493c      	ldr	r1, [pc, #240]	; (800080c <tx_rx+0x174>)
 800071c:	483d      	ldr	r0, [pc, #244]	; (8000814 <tx_rx+0x17c>)
 800071e:	f004 fd2e 	bl	800517e <HAL_UART_Transmit>
 8000722:	e044      	b.n	80007ae <tx_rx+0x116>
		}
		//Packet was not converted properly
		else if(!packet_converted){
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d019      	beq.n	8000764 <tx_rx+0xcc>
			sprintf(uartData, "Error converting KISS packet\n");
 8000730:	4a36      	ldr	r2, [pc, #216]	; (800080c <tx_rx+0x174>)
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <tx_rx+0x180>)
 8000734:	4615      	mov	r5, r2
 8000736:	461c      	mov	r4, r3
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	6028      	str	r0, [r5, #0]
 800073c:	6069      	str	r1, [r5, #4]
 800073e:	60aa      	str	r2, [r5, #8]
 8000740:	60eb      	str	r3, [r5, #12]
 8000742:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000744:	6128      	str	r0, [r5, #16]
 8000746:	6169      	str	r1, [r5, #20]
 8000748:	61aa      	str	r2, [r5, #24]
 800074a:	8823      	ldrh	r3, [r4, #0]
 800074c:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800074e:	482f      	ldr	r0, [pc, #188]	; (800080c <tx_rx+0x174>)
 8000750:	f7ff fd5e 	bl	8000210 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	230a      	movs	r3, #10
 800075a:	492c      	ldr	r1, [pc, #176]	; (800080c <tx_rx+0x174>)
 800075c:	482d      	ldr	r0, [pc, #180]	; (8000814 <tx_rx+0x17c>)
 800075e:	f004 fd0e 	bl	800517e <HAL_UART_Transmit>
 8000762:	e024      	b.n	80007ae <tx_rx+0x116>
		}
		//Successful transmission!
		else {
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <tx_rx+0x174>)
 8000766:	4a2d      	ldr	r2, [pc, #180]	; (800081c <tx_rx+0x184>)
 8000768:	4614      	mov	r4, r2
 800076a:	469c      	mov	ip, r3
 800076c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000770:	4665      	mov	r5, ip
 8000772:	4626      	mov	r6, r4
 8000774:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000776:	6028      	str	r0, [r5, #0]
 8000778:	6069      	str	r1, [r5, #4]
 800077a:	60aa      	str	r2, [r5, #8]
 800077c:	60eb      	str	r3, [r5, #12]
 800077e:	3410      	adds	r4, #16
 8000780:	f10c 0c10 	add.w	ip, ip, #16
 8000784:	4574      	cmp	r4, lr
 8000786:	d1f3      	bne.n	8000770 <tx_rx+0xd8>
 8000788:	4662      	mov	r2, ip
 800078a:	4623      	mov	r3, r4
 800078c:	cb03      	ldmia	r3!, {r0, r1}
 800078e:	6010      	str	r0, [r2, #0]
 8000790:	6051      	str	r1, [r2, #4]
 8000792:	8819      	ldrh	r1, [r3, #0]
 8000794:	789b      	ldrb	r3, [r3, #2]
 8000796:	8111      	strh	r1, [r2, #8]
 8000798:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <tx_rx+0x174>)
 800079c:	f7ff fd38 	bl	8000210 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	230a      	movs	r3, #10
 80007a6:	4919      	ldr	r1, [pc, #100]	; (800080c <tx_rx+0x174>)
 80007a8:	481a      	ldr	r0, [pc, #104]	; (8000814 <tx_rx+0x17c>)
 80007aa:	f004 fce8 	bl	800517e <HAL_UART_Transmit>
		}

		changeMode = true;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <tx_rx+0x16c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80007b4:	e022      	b.n	80007fc <tx_rx+0x164>
		bool change = receiving_AX25();
 80007b6:	f000 fd95 	bl	80012e4 <receiving_AX25>
 80007ba:	4603      	mov	r3, r0
 80007bc:	71bb      	strb	r3, [r7, #6]
		if(!change){
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	f083 0301 	eor.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d018      	beq.n	80007fc <tx_rx+0x164>
			sprintf(uartData, "Changing mode due to request\n");
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <tx_rx+0x174>)
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <tx_rx+0x188>)
 80007ce:	4615      	mov	r5, r2
 80007d0:	461c      	mov	r4, r3
 80007d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d4:	6028      	str	r0, [r5, #0]
 80007d6:	6069      	str	r1, [r5, #4]
 80007d8:	60aa      	str	r2, [r5, #8]
 80007da:	60eb      	str	r3, [r5, #12]
 80007dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007de:	6128      	str	r0, [r5, #16]
 80007e0:	6169      	str	r1, [r5, #20]
 80007e2:	61aa      	str	r2, [r5, #24]
 80007e4:	8823      	ldrh	r3, [r4, #0]
 80007e6:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <tx_rx+0x174>)
 80007ea:	f7ff fd11 	bl	8000210 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	230a      	movs	r3, #10
 80007f4:	4905      	ldr	r1, [pc, #20]	; (800080c <tx_rx+0x174>)
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <tx_rx+0x17c>)
 80007f8:	f004 fcc1 	bl	800517e <HAL_UART_Transmit>
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	20000a01 	.word	0x20000a01
 8000808:	20004270 	.word	0x20004270
 800080c:	2000260c 	.word	0x2000260c
 8000810:	080067e0 	.word	0x080067e0
 8000814:	200042c8 	.word	0x200042c8
 8000818:	08006800 	.word	0x08006800
 800081c:	08006820 	.word	0x08006820
 8000820:	0800685c 	.word	0x0800685c

08000824 <output_AX25>:
		}
	}
	return true;
}

void output_AX25(){
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800082a:	4b44      	ldr	r3, [pc, #272]	; (800093c <output_AX25+0x118>)
 800082c:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Beginning AFSK transmission\n");
 800082e:	4a44      	ldr	r2, [pc, #272]	; (8000940 <output_AX25+0x11c>)
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <output_AX25+0x120>)
 8000832:	4615      	mov	r5, r2
 8000834:	461c      	mov	r4, r3
 8000836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000838:	6028      	str	r0, [r5, #0]
 800083a:	6069      	str	r1, [r5, #4]
 800083c:	60aa      	str	r2, [r5, #8]
 800083e:	60eb      	str	r3, [r5, #12]
 8000840:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000842:	6128      	str	r0, [r5, #16]
 8000844:	6169      	str	r1, [r5, #20]
 8000846:	61aa      	str	r2, [r5, #24]
 8000848:	7823      	ldrb	r3, [r4, #0]
 800084a:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <output_AX25+0x11c>)
 800084e:	f7ff fcdf 	bl	8000210 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	230a      	movs	r3, #10
 8000858:	4939      	ldr	r1, [pc, #228]	; (8000940 <output_AX25+0x11c>)
 800085a:	483b      	ldr	r0, [pc, #236]	; (8000948 <output_AX25+0x124>)
 800085c:	f004 fc8f 	bl	800517e <HAL_UART_Transmit>

	int wave_start = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
	//Init dac playing some frequency, shouldn't be read by radio
	wave_start = bitToAudio(KISS_FLAG, FLAG_SIZE,1,wave_start);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2201      	movs	r2, #1
 8000868:	2108      	movs	r1, #8
 800086a:	4838      	ldr	r0, [pc, #224]	; (800094c <output_AX25+0x128>)
 800086c:	f001 f9e6 	bl	8001c3c <bitToAudio>
 8000870:	6038      	str	r0, [r7, #0]

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 8000872:	2201      	movs	r2, #1
 8000874:	2110      	movs	r1, #16
 8000876:	4836      	ldr	r0, [pc, #216]	; (8000950 <output_AX25+0x12c>)
 8000878:	f003 fa9e 	bl	8003db8 <HAL_GPIO_WritePin>
	freqSelect = false;
 800087c:	4b35      	ldr	r3, [pc, #212]	; (8000954 <output_AX25+0x130>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	wave_start = bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start); //start flag
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	2201      	movs	r2, #1
 8000886:	2108      	movs	r1, #8
 8000888:	4833      	ldr	r0, [pc, #204]	; (8000958 <output_AX25+0x134>)
 800088a:	f001 f9d7 	bl	8001c3c <bitToAudio>
 800088e:	6038      	str	r0, [r7, #0]

	wave_start = bitToAudio(local_packet->address, address_len,1,wave_start); //lsb first
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000896:	3310      	adds	r3, #16
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2201      	movs	r2, #1
 800089e:	2170      	movs	r1, #112	; 0x70
 80008a0:	f001 f9cc 	bl	8001c3c <bitToAudio>
 80008a4:	6038      	str	r0, [r7, #0]
	wave_start = bitToAudio(local_packet->control,control_len,1,wave_start);	//lsb first
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008ac:	3314      	adds	r3, #20
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2201      	movs	r2, #1
 80008b4:	2108      	movs	r1, #8
 80008b6:	f001 f9c1 	bl	8001c3c <bitToAudio>
 80008ba:	6038      	str	r0, [r7, #0]
	wave_start = bitToAudio(local_packet->PID,PID_len,1,wave_start);			//lsb first
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008c2:	3318      	adds	r3, #24
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2201      	movs	r2, #1
 80008ca:	2108      	movs	r1, #8
 80008cc:	f001 f9b6 	bl	8001c3c <bitToAudio>
 80008d0:	6038      	str	r0, [r7, #0]
	wave_start = bitToAudio(local_packet->Info,local_packet->Info_Len,1,wave_start);		//lsb first
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008d8:	331c      	adds	r3, #28
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2201      	movs	r2, #1
 80008e8:	f001 f9a8 	bl	8001c3c <bitToAudio>
 80008ec:	6038      	str	r0, [r7, #0]
	//bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS,0,wave_start);			//msb first

	bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start);//stop flag
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	2108      	movs	r1, #8
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <output_AX25+0x134>)
 80008f6:	f001 f9a1 	bl	8001c3c <bitToAudio>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <output_AX25+0x12c>)
 8000900:	f003 fa5a 	bl	8003db8 <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <output_AX25+0x11c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <output_AX25+0x138>)
 8000908:	4615      	mov	r5, r2
 800090a:	461c      	mov	r4, r3
 800090c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090e:	6028      	str	r0, [r5, #0]
 8000910:	6069      	str	r1, [r5, #4]
 8000912:	60aa      	str	r2, [r5, #8]
 8000914:	60eb      	str	r3, [r5, #12]
 8000916:	cc03      	ldmia	r4!, {r0, r1}
 8000918:	6128      	str	r0, [r5, #16]
 800091a:	6169      	str	r1, [r5, #20]
 800091c:	8823      	ldrh	r3, [r4, #0]
 800091e:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <output_AX25+0x11c>)
 8000922:	f7ff fc75 	bl	8000210 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	230a      	movs	r3, #10
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <output_AX25+0x11c>)
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <output_AX25+0x124>)
 8000930:	f004 fc25 	bl	800517e <HAL_UART_Transmit>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bdb0      	pop	{r4, r5, r7, pc}
 800093c:	20000a18 	.word	0x20000a18
 8000940:	2000260c 	.word	0x2000260c
 8000944:	0800687c 	.word	0x0800687c
 8000948:	200042c8 	.word	0x200042c8
 800094c:	20000000 	.word	0x20000000
 8000950:	40020800 	.word	0x40020800
 8000954:	20000a02 	.word	0x20000a02
 8000958:	20000008 	.word	0x20000008
 800095c:	0800689c 	.word	0x0800689c

08000960 <print_AX25>:
void print_AX25(){
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b08d      	sub	sp, #52	; 0x34
 8000964:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000966:	4baa      	ldr	r3, [pc, #680]	; (8000c10 <print_AX25+0x2b0>)
 8000968:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000970:	330c      	adds	r3, #12
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8000976:	4ba7      	ldr	r3, [pc, #668]	; (8000c14 <print_AX25+0x2b4>)
 8000978:	4aa7      	ldr	r2, [pc, #668]	; (8000c18 <print_AX25+0x2b8>)
 800097a:	4614      	mov	r4, r2
 800097c:	469c      	mov	ip, r3
 800097e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000982:	4665      	mov	r5, ip
 8000984:	4626      	mov	r6, r4
 8000986:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000988:	6028      	str	r0, [r5, #0]
 800098a:	6069      	str	r1, [r5, #4]
 800098c:	60aa      	str	r2, [r5, #8]
 800098e:	60eb      	str	r3, [r5, #12]
 8000990:	3410      	adds	r4, #16
 8000992:	f10c 0c10 	add.w	ip, ip, #16
 8000996:	4574      	cmp	r4, lr
 8000998:	d1f3      	bne.n	8000982 <print_AX25+0x22>
 800099a:	4663      	mov	r3, ip
 800099c:	4622      	mov	r2, r4
 800099e:	6810      	ldr	r0, [r2, #0]
 80009a0:	6018      	str	r0, [r3, #0]
 80009a2:	8891      	ldrh	r1, [r2, #4]
 80009a4:	7992      	ldrb	r2, [r2, #6]
 80009a6:	8099      	strh	r1, [r3, #4]
 80009a8:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009aa:	489a      	ldr	r0, [pc, #616]	; (8000c14 <print_AX25+0x2b4>)
 80009ac:	f7ff fc30 	bl	8000210 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	230a      	movs	r3, #10
 80009b6:	4997      	ldr	r1, [pc, #604]	; (8000c14 <print_AX25+0x2b4>)
 80009b8:	4898      	ldr	r0, [pc, #608]	; (8000c1c <print_AX25+0x2bc>)
 80009ba:	f004 fbe0 	bl	800517e <HAL_UART_Transmit>

	sprintf(uartData, "AX.25 Flag      =");
 80009be:	4a95      	ldr	r2, [pc, #596]	; (8000c14 <print_AX25+0x2b4>)
 80009c0:	4b97      	ldr	r3, [pc, #604]	; (8000c20 <print_AX25+0x2c0>)
 80009c2:	4615      	mov	r5, r2
 80009c4:	461c      	mov	r4, r3
 80009c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c8:	6028      	str	r0, [r5, #0]
 80009ca:	6069      	str	r1, [r5, #4]
 80009cc:	60aa      	str	r2, [r5, #8]
 80009ce:	60eb      	str	r3, [r5, #12]
 80009d0:	8823      	ldrh	r3, [r4, #0]
 80009d2:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009d4:	488f      	ldr	r0, [pc, #572]	; (8000c14 <print_AX25+0x2b4>)
 80009d6:	f7ff fc1b 	bl	8000210 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	230a      	movs	r3, #10
 80009e0:	498c      	ldr	r1, [pc, #560]	; (8000c14 <print_AX25+0x2b4>)
 80009e2:	488e      	ldr	r0, [pc, #568]	; (8000c1c <print_AX25+0x2bc>)
 80009e4:	f004 fbcb 	bl	800517e <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 80009e8:	4b8e      	ldr	r3, [pc, #568]	; (8000c24 <print_AX25+0x2c4>)
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<8;i++){
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f0:	e017      	b.n	8000a22 <print_AX25+0xc2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	f1c3 0307 	rsb	r3, r3, #7
 80009f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4989      	ldr	r1, [pc, #548]	; (8000c28 <print_AX25+0x2c8>)
 8000a02:	4884      	ldr	r0, [pc, #528]	; (8000c14 <print_AX25+0x2b4>)
 8000a04:	f005 fae4 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a08:	4882      	ldr	r0, [pc, #520]	; (8000c14 <print_AX25+0x2b4>)
 8000a0a:	f7ff fc01 	bl	8000210 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	230a      	movs	r3, #10
 8000a14:	497f      	ldr	r1, [pc, #508]	; (8000c14 <print_AX25+0x2b4>)
 8000a16:	4881      	ldr	r0, [pc, #516]	; (8000c1c <print_AX25+0x2bc>)
 8000a18:	f004 fbb1 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	3301      	adds	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	dde4      	ble.n	80009f2 <print_AX25+0x92>
	}
	sprintf(uartData, "\n");
 8000a28:	4a7a      	ldr	r2, [pc, #488]	; (8000c14 <print_AX25+0x2b4>)
 8000a2a:	4b80      	ldr	r3, [pc, #512]	; (8000c2c <print_AX25+0x2cc>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a30:	4878      	ldr	r0, [pc, #480]	; (8000c14 <print_AX25+0x2b4>)
 8000a32:	f7ff fbed 	bl	8000210 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	4975      	ldr	r1, [pc, #468]	; (8000c14 <print_AX25+0x2b4>)
 8000a3e:	4877      	ldr	r0, [pc, #476]	; (8000c1c <print_AX25+0x2bc>)
 8000a40:	f004 fb9d 	bl	800517e <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a4a:	3310      	adds	r3, #16
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
 8000a54:	e042      	b.n	8000adc <print_AX25+0x17c>
		sprintf(uartData, "Address Field %d =",i+1);
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	3301      	adds	r3, #1
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4974      	ldr	r1, [pc, #464]	; (8000c30 <print_AX25+0x2d0>)
 8000a5e:	486d      	ldr	r0, [pc, #436]	; (8000c14 <print_AX25+0x2b4>)
 8000a60:	f005 fab6 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a64:	486b      	ldr	r0, [pc, #428]	; (8000c14 <print_AX25+0x2b4>)
 8000a66:	f7ff fbd3 	bl	8000210 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	230a      	movs	r3, #10
 8000a70:	4968      	ldr	r1, [pc, #416]	; (8000c14 <print_AX25+0x2b4>)
 8000a72:	486a      	ldr	r0, [pc, #424]	; (8000c1c <print_AX25+0x2bc>)
 8000a74:	f004 fb83 	bl	800517e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	e017      	b.n	8000aae <print_AX25+0x14e>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	f1c3 0307 	rsb	r3, r3, #7
 8000a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4966      	ldr	r1, [pc, #408]	; (8000c28 <print_AX25+0x2c8>)
 8000a8e:	4861      	ldr	r0, [pc, #388]	; (8000c14 <print_AX25+0x2b4>)
 8000a90:	f005 fa9e 	bl	8005fd0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a94:	485f      	ldr	r0, [pc, #380]	; (8000c14 <print_AX25+0x2b4>)
 8000a96:	f7ff fbbb 	bl	8000210 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	495c      	ldr	r1, [pc, #368]	; (8000c14 <print_AX25+0x2b4>)
 8000aa2:	485e      	ldr	r0, [pc, #376]	; (8000c1c <print_AX25+0x2bc>)
 8000aa4:	f004 fb6b 	bl	800517e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	dde4      	ble.n	8000a7e <print_AX25+0x11e>
		}
		curr_mem += 8;
 8000ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000aba:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <print_AX25+0x2b4>)
 8000abc:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <print_AX25+0x2cc>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ac2:	4854      	ldr	r0, [pc, #336]	; (8000c14 <print_AX25+0x2b4>)
 8000ac4:	f7ff fba4 	bl	8000210 <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	230a      	movs	r3, #10
 8000ace:	4951      	ldr	r1, [pc, #324]	; (8000c14 <print_AX25+0x2b4>)
 8000ad0:	4852      	ldr	r0, [pc, #328]	; (8000c1c <print_AX25+0x2bc>)
 8000ad2:	f004 fb54 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	3301      	adds	r3, #1
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	2b0d      	cmp	r3, #13
 8000ae0:	ddb9      	ble.n	8000a56 <print_AX25+0xf6>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ae8:	3314      	adds	r3, #20
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000aee:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <print_AX25+0x2b4>)
 8000af0:	4b50      	ldr	r3, [pc, #320]	; (8000c34 <print_AX25+0x2d4>)
 8000af2:	4615      	mov	r5, r2
 8000af4:	461c      	mov	r4, r3
 8000af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af8:	6028      	str	r0, [r5, #0]
 8000afa:	6069      	str	r1, [r5, #4]
 8000afc:	60aa      	str	r2, [r5, #8]
 8000afe:	60eb      	str	r3, [r5, #12]
 8000b00:	8823      	ldrh	r3, [r4, #0]
 8000b02:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b04:	4843      	ldr	r0, [pc, #268]	; (8000c14 <print_AX25+0x2b4>)
 8000b06:	f7ff fb83 	bl	8000210 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	230a      	movs	r3, #10
 8000b10:	4940      	ldr	r1, [pc, #256]	; (8000c14 <print_AX25+0x2b4>)
 8000b12:	4842      	ldr	r0, [pc, #264]	; (8000c1c <print_AX25+0x2bc>)
 8000b14:	f004 fb33 	bl	800517e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	e017      	b.n	8000b4e <print_AX25+0x1ee>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	f1c3 0307 	rsb	r3, r3, #7
 8000b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	493e      	ldr	r1, [pc, #248]	; (8000c28 <print_AX25+0x2c8>)
 8000b2e:	4839      	ldr	r0, [pc, #228]	; (8000c14 <print_AX25+0x2b4>)
 8000b30:	f005 fa4e 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b34:	4837      	ldr	r0, [pc, #220]	; (8000c14 <print_AX25+0x2b4>)
 8000b36:	f7ff fb6b 	bl	8000210 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	230a      	movs	r3, #10
 8000b40:	4934      	ldr	r1, [pc, #208]	; (8000c14 <print_AX25+0x2b4>)
 8000b42:	4836      	ldr	r0, [pc, #216]	; (8000c1c <print_AX25+0x2bc>)
 8000b44:	f004 fb1b 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	dde4      	ble.n	8000b1e <print_AX25+0x1be>
	}
	sprintf(uartData, "\n");
 8000b54:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <print_AX25+0x2b4>)
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <print_AX25+0x2cc>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b5c:	482d      	ldr	r0, [pc, #180]	; (8000c14 <print_AX25+0x2b4>)
 8000b5e:	f7ff fb57 	bl	8000210 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	230a      	movs	r3, #10
 8000b68:	492a      	ldr	r1, [pc, #168]	; (8000c14 <print_AX25+0x2b4>)
 8000b6a:	482c      	ldr	r0, [pc, #176]	; (8000c1c <print_AX25+0x2bc>)
 8000b6c:	f004 fb07 	bl	800517e <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b76:	3318      	adds	r3, #24
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8000b7c:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <print_AX25+0x2b4>)
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <print_AX25+0x2d8>)
 8000b80:	4615      	mov	r5, r2
 8000b82:	461c      	mov	r4, r3
 8000b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b86:	6028      	str	r0, [r5, #0]
 8000b88:	6069      	str	r1, [r5, #4]
 8000b8a:	60aa      	str	r2, [r5, #8]
 8000b8c:	60eb      	str	r3, [r5, #12]
 8000b8e:	8823      	ldrh	r3, [r4, #0]
 8000b90:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b92:	4820      	ldr	r0, [pc, #128]	; (8000c14 <print_AX25+0x2b4>)
 8000b94:	f7ff fb3c 	bl	8000210 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	491d      	ldr	r1, [pc, #116]	; (8000c14 <print_AX25+0x2b4>)
 8000ba0:	481e      	ldr	r0, [pc, #120]	; (8000c1c <print_AX25+0x2bc>)
 8000ba2:	f004 faec 	bl	800517e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	e017      	b.n	8000bdc <print_AX25+0x27c>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	491b      	ldr	r1, [pc, #108]	; (8000c28 <print_AX25+0x2c8>)
 8000bbc:	4815      	ldr	r0, [pc, #84]	; (8000c14 <print_AX25+0x2b4>)
 8000bbe:	f005 fa07 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <print_AX25+0x2b4>)
 8000bc4:	f7ff fb24 	bl	8000210 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	230a      	movs	r3, #10
 8000bce:	4911      	ldr	r1, [pc, #68]	; (8000c14 <print_AX25+0x2b4>)
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <print_AX25+0x2bc>)
 8000bd2:	f004 fad4 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	dde4      	ble.n	8000bac <print_AX25+0x24c>
	}
	sprintf(uartData, "\n");
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <print_AX25+0x2b4>)
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <print_AX25+0x2cc>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <print_AX25+0x2b4>)
 8000bec:	f7ff fb10 	bl	8000210 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	4907      	ldr	r1, [pc, #28]	; (8000c14 <print_AX25+0x2b4>)
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <print_AX25+0x2bc>)
 8000bfa:	f004 fac0 	bl	800517e <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000c04:	331c      	adds	r3, #28
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e058      	b.n	8000cc2 <print_AX25+0x362>
 8000c10:	20000a18 	.word	0x20000a18
 8000c14:	2000260c 	.word	0x2000260c
 8000c18:	080068b8 	.word	0x080068b8
 8000c1c:	200042c8 	.word	0x200042c8
 8000c20:	080068f0 	.word	0x080068f0
 8000c24:	20000008 	.word	0x20000008
 8000c28:	08006904 	.word	0x08006904
 8000c2c:	0800690c 	.word	0x0800690c
 8000c30:	08006910 	.word	0x08006910
 8000c34:	08006924 	.word	0x08006924
 8000c38:	08006938 	.word	0x08006938
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	4950      	ldr	r1, [pc, #320]	; (8000d84 <print_AX25+0x424>)
 8000c44:	4850      	ldr	r0, [pc, #320]	; (8000d88 <print_AX25+0x428>)
 8000c46:	f005 f9c3 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c4a:	484f      	ldr	r0, [pc, #316]	; (8000d88 <print_AX25+0x428>)
 8000c4c:	f7ff fae0 	bl	8000210 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	230a      	movs	r3, #10
 8000c56:	494c      	ldr	r1, [pc, #304]	; (8000d88 <print_AX25+0x428>)
 8000c58:	484c      	ldr	r0, [pc, #304]	; (8000d8c <print_AX25+0x42c>)
 8000c5a:	f004 fa90 	bl	800517e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	e017      	b.n	8000c94 <print_AX25+0x334>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4947      	ldr	r1, [pc, #284]	; (8000d90 <print_AX25+0x430>)
 8000c74:	4844      	ldr	r0, [pc, #272]	; (8000d88 <print_AX25+0x428>)
 8000c76:	f005 f9ab 	bl	8005fd0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c7a:	4843      	ldr	r0, [pc, #268]	; (8000d88 <print_AX25+0x428>)
 8000c7c:	f7ff fac8 	bl	8000210 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	230a      	movs	r3, #10
 8000c86:	4940      	ldr	r1, [pc, #256]	; (8000d88 <print_AX25+0x428>)
 8000c88:	4840      	ldr	r0, [pc, #256]	; (8000d8c <print_AX25+0x42c>)
 8000c8a:	f004 fa78 	bl	800517e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	3301      	adds	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	dde4      	ble.n	8000c64 <print_AX25+0x304>
		}
		curr_mem += 8;
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000ca0:	4a39      	ldr	r2, [pc, #228]	; (8000d88 <print_AX25+0x428>)
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <print_AX25+0x434>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ca8:	4837      	ldr	r0, [pc, #220]	; (8000d88 <print_AX25+0x428>)
 8000caa:	f7ff fab1 	bl	8000210 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	4934      	ldr	r1, [pc, #208]	; (8000d88 <print_AX25+0x428>)
 8000cb6:	4835      	ldr	r0, [pc, #212]	; (8000d8c <print_AX25+0x42c>)
 8000cb8:	f004 fa61 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da00      	bge.n	8000cd0 <print_AX25+0x370>
 8000cce:	3307      	adds	r3, #7
 8000cd0:	10db      	asrs	r3, r3, #3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	dbb0      	blt.n	8000c3c <print_AX25+0x2dc>
	}

	sprintf(uartData, "AX.25 Flag      =");
 8000cda:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <print_AX25+0x428>)
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <print_AX25+0x438>)
 8000cde:	4615      	mov	r5, r2
 8000ce0:	461c      	mov	r4, r3
 8000ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce4:	6028      	str	r0, [r5, #0]
 8000ce6:	6069      	str	r1, [r5, #4]
 8000ce8:	60aa      	str	r2, [r5, #8]
 8000cea:	60eb      	str	r3, [r5, #12]
 8000cec:	8823      	ldrh	r3, [r4, #0]
 8000cee:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000cf0:	4825      	ldr	r0, [pc, #148]	; (8000d88 <print_AX25+0x428>)
 8000cf2:	f7ff fa8d 	bl	8000210 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	4922      	ldr	r1, [pc, #136]	; (8000d88 <print_AX25+0x428>)
 8000cfe:	4823      	ldr	r0, [pc, #140]	; (8000d8c <print_AX25+0x42c>)
 8000d00:	f004 fa3d 	bl	800517e <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <print_AX25+0x43c>)
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<8;i++){
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e017      	b.n	8000d3e <print_AX25+0x3de>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1c3 0307 	rsb	r3, r3, #7
 8000d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	491c      	ldr	r1, [pc, #112]	; (8000d90 <print_AX25+0x430>)
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <print_AX25+0x428>)
 8000d20:	f005 f956 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <print_AX25+0x428>)
 8000d26:	f7ff fa73 	bl	8000210 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	230a      	movs	r3, #10
 8000d30:	4915      	ldr	r1, [pc, #84]	; (8000d88 <print_AX25+0x428>)
 8000d32:	4816      	ldr	r0, [pc, #88]	; (8000d8c <print_AX25+0x42c>)
 8000d34:	f004 fa23 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b07      	cmp	r3, #7
 8000d42:	dde4      	ble.n	8000d0e <print_AX25+0x3ae>
	}
	sprintf(uartData, "\n");
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <print_AX25+0x428>)
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <print_AX25+0x434>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d4c:	480e      	ldr	r0, [pc, #56]	; (8000d88 <print_AX25+0x428>)
 8000d4e:	f7ff fa5f 	bl	8000210 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	230a      	movs	r3, #10
 8000d58:	490b      	ldr	r1, [pc, #44]	; (8000d88 <print_AX25+0x428>)
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <print_AX25+0x42c>)
 8000d5c:	f004 fa0f 	bl	800517e <HAL_UART_Transmit>
//		}
//		curr_mem += 8;
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//	}
	sprintf(uartData, "\n");
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <print_AX25+0x428>)
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <print_AX25+0x434>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <print_AX25+0x428>)
 8000d6a:	f7ff fa51 	bl	8000210 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	230a      	movs	r3, #10
 8000d74:	4904      	ldr	r1, [pc, #16]	; (8000d88 <print_AX25+0x428>)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <print_AX25+0x42c>)
 8000d78:	f004 fa01 	bl	800517e <HAL_UART_Transmit>
}
 8000d7c:	bf00      	nop
 8000d7e:	3734      	adds	r7, #52	; 0x34
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	0800694c 	.word	0x0800694c
 8000d88:	2000260c 	.word	0x2000260c
 8000d8c:	200042c8 	.word	0x200042c8
 8000d90:	08006904 	.word	0x08006904
 8000d94:	0800690c 	.word	0x0800690c
 8000d98:	080068f0 	.word	0x080068f0
 8000d9c:	20000008 	.word	0x20000008

08000da0 <clear_AX25>:
void clear_AX25(){
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <clear_AX25+0x5c>)
 8000da8:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <clear_AX25+0x60>)
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <clear_AX25+0x64>)
 8000dae:	4615      	mov	r5, r2
 8000db0:	461c      	mov	r4, r3
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	6028      	str	r0, [r5, #0]
 8000db6:	6069      	str	r1, [r5, #4]
 8000db8:	60aa      	str	r2, [r5, #8]
 8000dba:	60eb      	str	r3, [r5, #12]
 8000dbc:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000dbe:	6128      	str	r0, [r5, #16]
 8000dc0:	6169      	str	r1, [r5, #20]
 8000dc2:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <clear_AX25+0x60>)
 8000dc6:	f7ff fa23 	bl	8000210 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	230a      	movs	r3, #10
 8000dd0:	490b      	ldr	r1, [pc, #44]	; (8000e00 <clear_AX25+0x60>)
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <clear_AX25+0x68>)
 8000dd4:	f004 f9d3 	bl	800517e <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f640 225f 	movw	r2, #2655	; 0xa5f
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 f8e1 	bl	8005fa8 <memcpy>
	local_packet->got_packet = false;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000dec:	3309      	adds	r3, #9
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000a18 	.word	0x20000a18
 8000e00:	2000260c 	.word	0x2000260c
 8000e04:	08006960 	.word	0x08006960
 8000e08:	200042c8 	.word	0x200042c8

08000e0c <print_KISS>:

void output_KISS() {
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}
void print_KISS(){
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0e:	b08d      	sub	sp, #52	; 0x34
 8000e10:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000e12:	4bad      	ldr	r3, [pc, #692]	; (80010c8 <print_KISS+0x2bc>)
 8000e14:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e1c:	330c      	adds	r3, #12
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <print_KISS+0x2c0>)
 8000e24:	4aaa      	ldr	r2, [pc, #680]	; (80010d0 <print_KISS+0x2c4>)
 8000e26:	4614      	mov	r4, r2
 8000e28:	469c      	mov	ip, r3
 8000e2a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e2e:	4665      	mov	r5, ip
 8000e30:	4626      	mov	r6, r4
 8000e32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e34:	6028      	str	r0, [r5, #0]
 8000e36:	6069      	str	r1, [r5, #4]
 8000e38:	60aa      	str	r2, [r5, #8]
 8000e3a:	60eb      	str	r3, [r5, #12]
 8000e3c:	3410      	adds	r4, #16
 8000e3e:	f10c 0c10 	add.w	ip, ip, #16
 8000e42:	4574      	cmp	r4, lr
 8000e44:	d1f3      	bne.n	8000e2e <print_KISS+0x22>
 8000e46:	4663      	mov	r3, ip
 8000e48:	4622      	mov	r2, r4
 8000e4a:	6810      	ldr	r0, [r2, #0]
 8000e4c:	6018      	str	r0, [r3, #0]
 8000e4e:	8891      	ldrh	r1, [r2, #4]
 8000e50:	7992      	ldrb	r2, [r2, #6]
 8000e52:	8099      	strh	r1, [r3, #4]
 8000e54:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e56:	489d      	ldr	r0, [pc, #628]	; (80010cc <print_KISS+0x2c0>)
 8000e58:	f7ff f9da 	bl	8000210 <strlen>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	230a      	movs	r3, #10
 8000e62:	499a      	ldr	r1, [pc, #616]	; (80010cc <print_KISS+0x2c0>)
 8000e64:	489b      	ldr	r0, [pc, #620]	; (80010d4 <print_KISS+0x2c8>)
 8000e66:	f004 f98a 	bl	800517e <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address-16);//Subtract 16 to start at the flag start
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000e70:	3310      	adds	r3, #16
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3b10      	subs	r3, #16
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8000e78:	4a94      	ldr	r2, [pc, #592]	; (80010cc <print_KISS+0x2c0>)
 8000e7a:	4b97      	ldr	r3, [pc, #604]	; (80010d8 <print_KISS+0x2cc>)
 8000e7c:	4615      	mov	r5, r2
 8000e7e:	461c      	mov	r4, r3
 8000e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e82:	6028      	str	r0, [r5, #0]
 8000e84:	6069      	str	r1, [r5, #4]
 8000e86:	60aa      	str	r2, [r5, #8]
 8000e88:	60eb      	str	r3, [r5, #12]
 8000e8a:	8823      	ldrh	r3, [r4, #0]
 8000e8c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e8e:	488f      	ldr	r0, [pc, #572]	; (80010cc <print_KISS+0x2c0>)
 8000e90:	f7ff f9be 	bl	8000210 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	230a      	movs	r3, #10
 8000e9a:	498c      	ldr	r1, [pc, #560]	; (80010cc <print_KISS+0x2c0>)
 8000e9c:	488d      	ldr	r0, [pc, #564]	; (80010d4 <print_KISS+0x2c8>)
 8000e9e:	f004 f96e 	bl	800517e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ea6:	e017      	b.n	8000ed8 <print_KISS+0xcc>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4989      	ldr	r1, [pc, #548]	; (80010dc <print_KISS+0x2d0>)
 8000eb8:	4884      	ldr	r0, [pc, #528]	; (80010cc <print_KISS+0x2c0>)
 8000eba:	f005 f889 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ebe:	4883      	ldr	r0, [pc, #524]	; (80010cc <print_KISS+0x2c0>)
 8000ec0:	f7ff f9a6 	bl	8000210 <strlen>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	230a      	movs	r3, #10
 8000eca:	4980      	ldr	r1, [pc, #512]	; (80010cc <print_KISS+0x2c0>)
 8000ecc:	4881      	ldr	r0, [pc, #516]	; (80010d4 <print_KISS+0x2c8>)
 8000ece:	f004 f956 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	dde4      	ble.n	8000ea8 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8000ede:	4a7b      	ldr	r2, [pc, #492]	; (80010cc <print_KISS+0x2c0>)
 8000ee0:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <print_KISS+0x2d4>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ee6:	4879      	ldr	r0, [pc, #484]	; (80010cc <print_KISS+0x2c0>)
 8000ee8:	f7ff f992 	bl	8000210 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	4976      	ldr	r1, [pc, #472]	; (80010cc <print_KISS+0x2c0>)
 8000ef4:	4877      	ldr	r0, [pc, #476]	; (80010d4 <print_KISS+0x2c8>)
 8000ef6:	f004 f942 	bl	800517e <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f00:	3310      	adds	r3, #16
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	e042      	b.n	8000f92 <print_KISS+0x186>
		sprintf(uartData, "Address Field %d =",i+1);
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	3301      	adds	r3, #1
 8000f10:	461a      	mov	r2, r3
 8000f12:	4974      	ldr	r1, [pc, #464]	; (80010e4 <print_KISS+0x2d8>)
 8000f14:	486d      	ldr	r0, [pc, #436]	; (80010cc <print_KISS+0x2c0>)
 8000f16:	f005 f85b 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f1a:	486c      	ldr	r0, [pc, #432]	; (80010cc <print_KISS+0x2c0>)
 8000f1c:	f7ff f978 	bl	8000210 <strlen>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	230a      	movs	r3, #10
 8000f26:	4969      	ldr	r1, [pc, #420]	; (80010cc <print_KISS+0x2c0>)
 8000f28:	486a      	ldr	r0, [pc, #424]	; (80010d4 <print_KISS+0x2c8>)
 8000f2a:	f004 f928 	bl	800517e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
 8000f32:	e017      	b.n	8000f64 <print_KISS+0x158>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4966      	ldr	r1, [pc, #408]	; (80010dc <print_KISS+0x2d0>)
 8000f44:	4861      	ldr	r0, [pc, #388]	; (80010cc <print_KISS+0x2c0>)
 8000f46:	f005 f843 	bl	8005fd0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f4a:	4860      	ldr	r0, [pc, #384]	; (80010cc <print_KISS+0x2c0>)
 8000f4c:	f7ff f960 	bl	8000210 <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	230a      	movs	r3, #10
 8000f56:	495d      	ldr	r1, [pc, #372]	; (80010cc <print_KISS+0x2c0>)
 8000f58:	485e      	ldr	r0, [pc, #376]	; (80010d4 <print_KISS+0x2c8>)
 8000f5a:	f004 f910 	bl	800517e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	3301      	adds	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	dde4      	ble.n	8000f34 <print_KISS+0x128>
		}
		curr_mem += 8;
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	3308      	adds	r3, #8
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000f70:	4a56      	ldr	r2, [pc, #344]	; (80010cc <print_KISS+0x2c0>)
 8000f72:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <print_KISS+0x2d4>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f78:	4854      	ldr	r0, [pc, #336]	; (80010cc <print_KISS+0x2c0>)
 8000f7a:	f7ff f949 	bl	8000210 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	230a      	movs	r3, #10
 8000f84:	4951      	ldr	r1, [pc, #324]	; (80010cc <print_KISS+0x2c0>)
 8000f86:	4853      	ldr	r0, [pc, #332]	; (80010d4 <print_KISS+0x2c8>)
 8000f88:	f004 f8f9 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3301      	adds	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	2b0d      	cmp	r3, #13
 8000f96:	ddb9      	ble.n	8000f0c <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f9e:	3314      	adds	r3, #20
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000fa4:	4a49      	ldr	r2, [pc, #292]	; (80010cc <print_KISS+0x2c0>)
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <print_KISS+0x2dc>)
 8000fa8:	4615      	mov	r5, r2
 8000faa:	461c      	mov	r4, r3
 8000fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fae:	6028      	str	r0, [r5, #0]
 8000fb0:	6069      	str	r1, [r5, #4]
 8000fb2:	60aa      	str	r2, [r5, #8]
 8000fb4:	60eb      	str	r3, [r5, #12]
 8000fb6:	8823      	ldrh	r3, [r4, #0]
 8000fb8:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fba:	4844      	ldr	r0, [pc, #272]	; (80010cc <print_KISS+0x2c0>)
 8000fbc:	f7ff f928 	bl	8000210 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	4941      	ldr	r1, [pc, #260]	; (80010cc <print_KISS+0x2c0>)
 8000fc8:	4842      	ldr	r0, [pc, #264]	; (80010d4 <print_KISS+0x2c8>)
 8000fca:	f004 f8d8 	bl	800517e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e017      	b.n	8001004 <print_KISS+0x1f8>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	493e      	ldr	r1, [pc, #248]	; (80010dc <print_KISS+0x2d0>)
 8000fe4:	4839      	ldr	r0, [pc, #228]	; (80010cc <print_KISS+0x2c0>)
 8000fe6:	f004 fff3 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fea:	4838      	ldr	r0, [pc, #224]	; (80010cc <print_KISS+0x2c0>)
 8000fec:	f7ff f910 	bl	8000210 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	4935      	ldr	r1, [pc, #212]	; (80010cc <print_KISS+0x2c0>)
 8000ff8:	4836      	ldr	r0, [pc, #216]	; (80010d4 <print_KISS+0x2c8>)
 8000ffa:	f004 f8c0 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b07      	cmp	r3, #7
 8001008:	dde4      	ble.n	8000fd4 <print_KISS+0x1c8>
	}
	sprintf(uartData, "\n");
 800100a:	4a30      	ldr	r2, [pc, #192]	; (80010cc <print_KISS+0x2c0>)
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <print_KISS+0x2d4>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001012:	482e      	ldr	r0, [pc, #184]	; (80010cc <print_KISS+0x2c0>)
 8001014:	f7ff f8fc 	bl	8000210 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	230a      	movs	r3, #10
 800101e:	492b      	ldr	r1, [pc, #172]	; (80010cc <print_KISS+0x2c0>)
 8001020:	482c      	ldr	r0, [pc, #176]	; (80010d4 <print_KISS+0x2c8>)
 8001022:	f004 f8ac 	bl	800517e <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800102c:	3318      	adds	r3, #24
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <print_KISS+0x2c0>)
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <print_KISS+0x2e0>)
 8001036:	4615      	mov	r5, r2
 8001038:	461c      	mov	r4, r3
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	6028      	str	r0, [r5, #0]
 800103e:	6069      	str	r1, [r5, #4]
 8001040:	60aa      	str	r2, [r5, #8]
 8001042:	60eb      	str	r3, [r5, #12]
 8001044:	8823      	ldrh	r3, [r4, #0]
 8001046:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001048:	4820      	ldr	r0, [pc, #128]	; (80010cc <print_KISS+0x2c0>)
 800104a:	f7ff f8e1 	bl	8000210 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	230a      	movs	r3, #10
 8001054:	491d      	ldr	r1, [pc, #116]	; (80010cc <print_KISS+0x2c0>)
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <print_KISS+0x2c8>)
 8001058:	f004 f891 	bl	800517e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	e017      	b.n	8001092 <print_KISS+0x286>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	f1c3 0307 	rsb	r3, r3, #7
 8001068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	491a      	ldr	r1, [pc, #104]	; (80010dc <print_KISS+0x2d0>)
 8001072:	4816      	ldr	r0, [pc, #88]	; (80010cc <print_KISS+0x2c0>)
 8001074:	f004 ffac 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <print_KISS+0x2c0>)
 800107a:	f7ff f8c9 	bl	8000210 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	230a      	movs	r3, #10
 8001084:	4911      	ldr	r1, [pc, #68]	; (80010cc <print_KISS+0x2c0>)
 8001086:	4813      	ldr	r0, [pc, #76]	; (80010d4 <print_KISS+0x2c8>)
 8001088:	f004 f879 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	3301      	adds	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b07      	cmp	r3, #7
 8001096:	dde4      	ble.n	8001062 <print_KISS+0x256>
	}
	sprintf(uartData, "\n");
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <print_KISS+0x2c0>)
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <print_KISS+0x2d4>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <print_KISS+0x2c0>)
 80010a2:	f7ff f8b5 	bl	8000210 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	230a      	movs	r3, #10
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <print_KISS+0x2c0>)
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <print_KISS+0x2c8>)
 80010b0:	f004 f865 	bl	800517e <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80010ba:	331c      	adds	r3, #28
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e057      	b.n	8001176 <print_KISS+0x36a>
 80010c6:	bf00      	nop
 80010c8:	20000a18 	.word	0x20000a18
 80010cc:	2000260c 	.word	0x2000260c
 80010d0:	0800697c 	.word	0x0800697c
 80010d4:	200042c8 	.word	0x200042c8
 80010d8:	080069b4 	.word	0x080069b4
 80010dc:	08006904 	.word	0x08006904
 80010e0:	0800690c 	.word	0x0800690c
 80010e4:	08006910 	.word	0x08006910
 80010e8:	08006924 	.word	0x08006924
 80010ec:	08006938 	.word	0x08006938
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	461a      	mov	r2, r3
 80010f6:	494f      	ldr	r1, [pc, #316]	; (8001234 <print_KISS+0x428>)
 80010f8:	484f      	ldr	r0, [pc, #316]	; (8001238 <print_KISS+0x42c>)
 80010fa:	f004 ff69 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010fe:	484e      	ldr	r0, [pc, #312]	; (8001238 <print_KISS+0x42c>)
 8001100:	f7ff f886 	bl	8000210 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	230a      	movs	r3, #10
 800110a:	494b      	ldr	r1, [pc, #300]	; (8001238 <print_KISS+0x42c>)
 800110c:	484b      	ldr	r0, [pc, #300]	; (800123c <print_KISS+0x430>)
 800110e:	f004 f836 	bl	800517e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	e017      	b.n	8001148 <print_KISS+0x33c>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4946      	ldr	r1, [pc, #280]	; (8001240 <print_KISS+0x434>)
 8001128:	4843      	ldr	r0, [pc, #268]	; (8001238 <print_KISS+0x42c>)
 800112a:	f004 ff51 	bl	8005fd0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800112e:	4842      	ldr	r0, [pc, #264]	; (8001238 <print_KISS+0x42c>)
 8001130:	f7ff f86e 	bl	8000210 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	b29a      	uxth	r2, r3
 8001138:	230a      	movs	r3, #10
 800113a:	493f      	ldr	r1, [pc, #252]	; (8001238 <print_KISS+0x42c>)
 800113c:	483f      	ldr	r0, [pc, #252]	; (800123c <print_KISS+0x430>)
 800113e:	f004 f81e 	bl	800517e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	3301      	adds	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2b07      	cmp	r3, #7
 800114c:	dde4      	ble.n	8001118 <print_KISS+0x30c>
		}
		curr_mem += 8;
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	3308      	adds	r3, #8
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001154:	4a38      	ldr	r2, [pc, #224]	; (8001238 <print_KISS+0x42c>)
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <print_KISS+0x438>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800115c:	4836      	ldr	r0, [pc, #216]	; (8001238 <print_KISS+0x42c>)
 800115e:	f7ff f857 	bl	8000210 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	230a      	movs	r3, #10
 8001168:	4933      	ldr	r1, [pc, #204]	; (8001238 <print_KISS+0x42c>)
 800116a:	4834      	ldr	r0, [pc, #208]	; (800123c <print_KISS+0x430>)
 800116c:	f004 f807 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da00      	bge.n	8001184 <print_KISS+0x378>
 8001182:	3307      	adds	r3, #7
 8001184:	10db      	asrs	r3, r3, #3
 8001186:	3b01      	subs	r3, #1
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbb0      	blt.n	80010f0 <print_KISS+0x2e4>
	}

	//Print Stop Flag
	curr_mem = (local_packet->KISS_PACKET+(8*(local_packet->byte_cnt-1)));
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800119a:	330c      	adds	r3, #12
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 80011a6:	4a24      	ldr	r2, [pc, #144]	; (8001238 <print_KISS+0x42c>)
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <print_KISS+0x43c>)
 80011aa:	4615      	mov	r5, r2
 80011ac:	461c      	mov	r4, r3
 80011ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b0:	6028      	str	r0, [r5, #0]
 80011b2:	6069      	str	r1, [r5, #4]
 80011b4:	60aa      	str	r2, [r5, #8]
 80011b6:	60eb      	str	r3, [r5, #12]
 80011b8:	8823      	ldrh	r3, [r4, #0]
 80011ba:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011bc:	481e      	ldr	r0, [pc, #120]	; (8001238 <print_KISS+0x42c>)
 80011be:	f7ff f827 	bl	8000210 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	230a      	movs	r3, #10
 80011c8:	491b      	ldr	r1, [pc, #108]	; (8001238 <print_KISS+0x42c>)
 80011ca:	481c      	ldr	r0, [pc, #112]	; (800123c <print_KISS+0x430>)
 80011cc:	f003 ffd7 	bl	800517e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e017      	b.n	8001206 <print_KISS+0x3fa>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1c3 0307 	rsb	r3, r3, #7
 80011dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011de:	4413      	add	r3, r2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4916      	ldr	r1, [pc, #88]	; (8001240 <print_KISS+0x434>)
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <print_KISS+0x42c>)
 80011e8:	f004 fef2 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <print_KISS+0x42c>)
 80011ee:	f7ff f80f 	bl	8000210 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	230a      	movs	r3, #10
 80011f8:	490f      	ldr	r1, [pc, #60]	; (8001238 <print_KISS+0x42c>)
 80011fa:	4810      	ldr	r0, [pc, #64]	; (800123c <print_KISS+0x430>)
 80011fc:	f003 ffbf 	bl	800517e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b07      	cmp	r3, #7
 800120a:	dde4      	ble.n	80011d6 <print_KISS+0x3ca>
	}
	sprintf(uartData, "\n\n");
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <print_KISS+0x42c>)
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <print_KISS+0x440>)
 8001210:	8811      	ldrh	r1, [r2, #0]
 8001212:	7892      	ldrb	r2, [r2, #2]
 8001214:	8019      	strh	r1, [r3, #0]
 8001216:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <print_KISS+0x42c>)
 800121a:	f7fe fff9 	bl	8000210 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	230a      	movs	r3, #10
 8001224:	4904      	ldr	r1, [pc, #16]	; (8001238 <print_KISS+0x42c>)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <print_KISS+0x430>)
 8001228:	f003 ffa9 	bl	800517e <HAL_UART_Transmit>
}
 800122c:	bf00      	nop
 800122e:	3734      	adds	r7, #52	; 0x34
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001234:	0800694c 	.word	0x0800694c
 8001238:	2000260c 	.word	0x2000260c
 800123c:	200042c8 	.word	0x200042c8
 8001240:	08006904 	.word	0x08006904
 8001244:	0800690c 	.word	0x0800690c
 8001248:	080069c8 	.word	0x080069c8
 800124c:	080069dc 	.word	0x080069dc

08001250 <UART2_EXCEPTION_CALLBACK>:

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 8001254:	2201      	movs	r2, #1
 8001256:	491d      	ldr	r1, [pc, #116]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x7c>)
 8001258:	481d      	ldr	r0, [pc, #116]	; (80012d0 <UART2_EXCEPTION_CALLBACK+0x80>)
 800125a:	f004 f829 	bl	80052b0 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001260:	2200      	movs	r2, #0
 8001262:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001266:	7b1b      	ldrb	r3, [r3, #12]
 8001268:	2bc0      	cmp	r3, #192	; 0xc0
 800126a:	d104      	bne.n	8001276 <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001274:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <UART2_EXCEPTION_CALLBACK+0x88>)
 800127e:	4413      	add	r3, r2
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001282:	7b12      	ldrb	r2, [r2, #12]
 8001284:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 800128e:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	dd16      	ble.n	80012c6 <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <UART2_EXCEPTION_CALLBACK+0x8c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	f083 0301 	eor.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <UART2_EXCEPTION_CALLBACK+0x90>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012be:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

	  }
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20001d80 	.word	0x20001d80
 80012d0:	200042c8 	.word	0x200042c8
 80012d4:	20001d74 	.word	0x20001d74
 80012d8:	20001d82 	.word	0x20001d82
 80012dc:	20004270 	.word	0x20004270
 80012e0:	20000a01 	.word	0x20000a01

080012e4 <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80012ea:	4a51      	ldr	r2, [pc, #324]	; (8001430 <receiving_AX25+0x14c>)
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <receiving_AX25+0x150>)
 80012ee:	4615      	mov	r5, r2
 80012f0:	461c      	mov	r4, r3
 80012f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f4:	6028      	str	r0, [r5, #0]
 80012f6:	6069      	str	r1, [r5, #4]
 80012f8:	60aa      	str	r2, [r5, #8]
 80012fa:	60eb      	str	r3, [r5, #12]
 80012fc:	cc03      	ldmia	r4!, {r0, r1}
 80012fe:	6128      	str	r0, [r5, #16]
 8001300:	6169      	str	r1, [r5, #20]
 8001302:	7823      	ldrb	r3, [r4, #0]
 8001304:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001306:	484a      	ldr	r0, [pc, #296]	; (8001430 <receiving_AX25+0x14c>)
 8001308:	f7fe ff82 	bl	8000210 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	230a      	movs	r3, #10
 8001312:	4947      	ldr	r1, [pc, #284]	; (8001430 <receiving_AX25+0x14c>)
 8001314:	4848      	ldr	r0, [pc, #288]	; (8001438 <receiving_AX25+0x154>)
 8001316:	f003 ff32 	bl	800517e <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 800131a:	4b48      	ldr	r3, [pc, #288]	; (800143c <receiving_AX25+0x158>)
 800131c:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 800131e:	f000 fe4d 	bl	8001fbc <streamGet>
 8001322:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d13b      	bne.n	80013a2 <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001330:	3308      	adds	r3, #8
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 8001336:	f000 f889 	bl	800144c <AX25_Packet_Validate>
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 8001344:	f000 f9aa 	bl	800169c <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f640 225f 	movw	r2, #2655	; 0xa5f
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fe34 	bl	8005fbe <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 8001356:	f7ff ffc5 	bl	80012e4 <receiving_AX25>
 800135a:	e065      	b.n	8001428 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <receiving_AX25+0x14c>)
 800135e:	4a38      	ldr	r2, [pc, #224]	; (8001440 <receiving_AX25+0x15c>)
 8001360:	4614      	mov	r4, r2
 8001362:	469c      	mov	ip, r3
 8001364:	f104 0e20 	add.w	lr, r4, #32
 8001368:	4665      	mov	r5, ip
 800136a:	4626      	mov	r6, r4
 800136c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800136e:	6028      	str	r0, [r5, #0]
 8001370:	6069      	str	r1, [r5, #4]
 8001372:	60aa      	str	r2, [r5, #8]
 8001374:	60eb      	str	r3, [r5, #12]
 8001376:	3410      	adds	r4, #16
 8001378:	f10c 0c10 	add.w	ip, ip, #16
 800137c:	4574      	cmp	r4, lr
 800137e:	d1f3      	bne.n	8001368 <receiving_AX25+0x84>
 8001380:	4662      	mov	r2, ip
 8001382:	4623      	mov	r3, r4
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001388:	4829      	ldr	r0, [pc, #164]	; (8001430 <receiving_AX25+0x14c>)
 800138a:	f7fe ff41 	bl	8000210 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29a      	uxth	r2, r3
 8001392:	230a      	movs	r3, #10
 8001394:	4926      	ldr	r1, [pc, #152]	; (8001430 <receiving_AX25+0x14c>)
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <receiving_AX25+0x154>)
 8001398:	f003 fef1 	bl	800517e <HAL_UART_Transmit>
			receiving_AX25();
 800139c:	f7ff ffa2 	bl	80012e4 <receiving_AX25>
 80013a0:	e042      	b.n	8001428 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d118      	bne.n	80013dc <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <receiving_AX25+0x14c>)
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <receiving_AX25+0x160>)
 80013ae:	4615      	mov	r5, r2
 80013b0:	461c      	mov	r4, r3
 80013b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b4:	6028      	str	r0, [r5, #0]
 80013b6:	6069      	str	r1, [r5, #4]
 80013b8:	60aa      	str	r2, [r5, #8]
 80013ba:	60eb      	str	r3, [r5, #12]
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	6128      	str	r0, [r5, #16]
 80013c0:	7923      	ldrb	r3, [r4, #4]
 80013c2:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <receiving_AX25+0x14c>)
 80013c6:	f7fe ff23 	bl	8000210 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	230a      	movs	r3, #10
 80013d0:	4917      	ldr	r1, [pc, #92]	; (8001430 <receiving_AX25+0x14c>)
 80013d2:	4819      	ldr	r0, [pc, #100]	; (8001438 <receiving_AX25+0x154>)
 80013d4:	f003 fed3 	bl	800517e <HAL_UART_Transmit>

		return false;
 80013d8:	2300      	movs	r3, #0
 80013da:	e025      	b.n	8001428 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <receiving_AX25+0x14c>)
 80013de:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <receiving_AX25+0x164>)
 80013e0:	4614      	mov	r4, r2
 80013e2:	469c      	mov	ip, r3
 80013e4:	f104 0e20 	add.w	lr, r4, #32
 80013e8:	4665      	mov	r5, ip
 80013ea:	4626      	mov	r6, r4
 80013ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013ee:	6028      	str	r0, [r5, #0]
 80013f0:	6069      	str	r1, [r5, #4]
 80013f2:	60aa      	str	r2, [r5, #8]
 80013f4:	60eb      	str	r3, [r5, #12]
 80013f6:	3410      	adds	r4, #16
 80013f8:	f10c 0c10 	add.w	ip, ip, #16
 80013fc:	4574      	cmp	r4, lr
 80013fe:	d1f3      	bne.n	80013e8 <receiving_AX25+0x104>
 8001400:	4663      	mov	r3, ip
 8001402:	4622      	mov	r2, r4
 8001404:	6810      	ldr	r0, [r2, #0]
 8001406:	6018      	str	r0, [r3, #0]
 8001408:	8891      	ldrh	r1, [r2, #4]
 800140a:	7992      	ldrb	r2, [r2, #6]
 800140c:	8099      	strh	r1, [r3, #4]
 800140e:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <receiving_AX25+0x14c>)
 8001412:	f7fe fefd 	bl	8000210 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	230a      	movs	r3, #10
 800141c:	4904      	ldr	r1, [pc, #16]	; (8001430 <receiving_AX25+0x14c>)
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <receiving_AX25+0x154>)
 8001420:	f003 fead 	bl	800517e <HAL_UART_Transmit>
		receiving_AX25();
 8001424:	f7ff ff5e 	bl	80012e4 <receiving_AX25>
	}
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001430:	2000260c 	.word	0x2000260c
 8001434:	080069e0 	.word	0x080069e0
 8001438:	200042c8 	.word	0x200042c8
 800143c:	20000a18 	.word	0x20000a18
 8001440:	080069fc 	.word	0x080069fc
 8001444:	08006a20 	.word	0x08006a20
 8001448:	08006a38 	.word	0x08006a38

0800144c <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <AX25_Packet_Validate+0x5c>)
 8001454:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <AX25_Packet_Validate+0x60>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b77      	cmp	r3, #119	; 0x77
 8001460:	dc0a      	bgt.n	8001478 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <AX25_Packet_Validate+0x64>)
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <AX25_Packet_Validate+0x68>)
 8001466:	4614      	mov	r4, r2
 8001468:	cb07      	ldmia	r3!, {r0, r1, r2}
 800146a:	6020      	str	r0, [r4, #0]
 800146c:	6061      	str	r1, [r4, #4]
 800146e:	60a2      	str	r2, [r4, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	7323      	strb	r3, [r4, #12]
		return false;
 8001474:	2300      	movs	r3, #0
 8001476:	e013      	b.n	80014a0 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <AX25_Packet_Validate+0x60>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <AX25_Packet_Validate+0x64>)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <AX25_Packet_Validate+0x68>)
 8001488:	4614      	mov	r4, r2
 800148a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800148c:	6020      	str	r0, [r4, #0]
 800148e:	6061      	str	r1, [r4, #4]
 8001490:	60a2      	str	r2, [r4, #8]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	7323      	strb	r3, [r4, #12]
		return false;
 8001496:	2300      	movs	r3, #0
 8001498:	e002      	b.n	80014a0 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 800149a:	f000 f80d 	bl	80014b8 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 800149e:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	20000a18 	.word	0x20000a18
 80014ac:	200009fc 	.word	0x200009fc
 80014b0:	2000260c 	.word	0x2000260c
 80014b4:	08006a60 	.word	0x08006a60

080014b8 <set_packet_pointer_AX25>:

void set_packet_pointer_AX25(){
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014be:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <set_packet_pointer_AX25+0x1c0>)
 80014c0:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 80014c2:	2310      	movs	r3, #16
 80014c4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 80014c6:	4b6d      	ldr	r3, [pc, #436]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80014c8:	4a6d      	ldr	r2, [pc, #436]	; (8001680 <set_packet_pointer_AX25+0x1c8>)
 80014ca:	4614      	mov	r4, r2
 80014cc:	469c      	mov	ip, r3
 80014ce:	f104 0e20 	add.w	lr, r4, #32
 80014d2:	4665      	mov	r5, ip
 80014d4:	4626      	mov	r6, r4
 80014d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d8:	6028      	str	r0, [r5, #0]
 80014da:	6069      	str	r1, [r5, #4]
 80014dc:	60aa      	str	r2, [r5, #8]
 80014de:	60eb      	str	r3, [r5, #12]
 80014e0:	3410      	adds	r4, #16
 80014e2:	f10c 0c10 	add.w	ip, ip, #16
 80014e6:	4574      	cmp	r4, lr
 80014e8:	d1f3      	bne.n	80014d2 <set_packet_pointer_AX25+0x1a>
 80014ea:	4663      	mov	r3, ip
 80014ec:	4622      	mov	r2, r4
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014f2:	4862      	ldr	r0, [pc, #392]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80014f4:	f7fe fe8c 	bl	8000210 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	230a      	movs	r3, #10
 80014fe:	495f      	ldr	r1, [pc, #380]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001500:	4860      	ldr	r0, [pc, #384]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001502:	f003 fe3c 	bl	800517e <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 800150a:	4a5c      	ldr	r2, [pc, #368]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <set_packet_pointer_AX25+0x1d0>)
 800150e:	4615      	mov	r5, r2
 8001510:	461c      	mov	r4, r3
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	6028      	str	r0, [r5, #0]
 8001516:	6069      	str	r1, [r5, #4]
 8001518:	60aa      	str	r2, [r5, #8]
 800151a:	60eb      	str	r3, [r5, #12]
 800151c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800151e:	6128      	str	r0, [r5, #16]
 8001520:	6169      	str	r1, [r5, #20]
 8001522:	61aa      	str	r2, [r5, #24]
 8001524:	7823      	ldrb	r3, [r4, #0]
 8001526:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001528:	4854      	ldr	r0, [pc, #336]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 800152a:	f7fe fe71 	bl	8000210 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	230a      	movs	r3, #10
 8001534:	4951      	ldr	r1, [pc, #324]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001536:	4853      	ldr	r0, [pc, #332]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001538:	f003 fe21 	bl	800517e <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001542:	3310      	adds	r3, #16
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3370      	adds	r3, #112	; 0x70
 800154c:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3370      	adds	r3, #112	; 0x70
 8001552:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <set_packet_pointer_AX25+0x1d4>)
 8001558:	4615      	mov	r5, r2
 800155a:	461c      	mov	r4, r3
 800155c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155e:	6028      	str	r0, [r5, #0]
 8001560:	6069      	str	r1, [r5, #4]
 8001562:	60aa      	str	r2, [r5, #8]
 8001564:	60eb      	str	r3, [r5, #12]
 8001566:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001568:	6128      	str	r0, [r5, #16]
 800156a:	6169      	str	r1, [r5, #20]
 800156c:	61aa      	str	r2, [r5, #24]
 800156e:	7823      	ldrb	r3, [r4, #0]
 8001570:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001572:	4842      	ldr	r0, [pc, #264]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001574:	f7fe fe4c 	bl	8000210 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	230a      	movs	r3, #10
 800157e:	493f      	ldr	r1, [pc, #252]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001580:	4840      	ldr	r0, [pc, #256]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001582:	f003 fdfc 	bl	800517e <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800158c:	3314      	adds	r3, #20
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3308      	adds	r3, #8
 8001596:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3308      	adds	r3, #8
 800159c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 800159e:	4a37      	ldr	r2, [pc, #220]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <set_packet_pointer_AX25+0x1d8>)
 80015a2:	4615      	mov	r5, r2
 80015a4:	461c      	mov	r4, r3
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	6028      	str	r0, [r5, #0]
 80015aa:	6069      	str	r1, [r5, #4]
 80015ac:	60aa      	str	r2, [r5, #8]
 80015ae:	60eb      	str	r3, [r5, #12]
 80015b0:	cc03      	ldmia	r4!, {r0, r1}
 80015b2:	6128      	str	r0, [r5, #16]
 80015b4:	6169      	str	r1, [r5, #20]
 80015b6:	7823      	ldrb	r3, [r4, #0]
 80015b8:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015ba:	4830      	ldr	r0, [pc, #192]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015bc:	f7fe fe28 	bl	8000210 <strlen>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	230a      	movs	r3, #10
 80015c6:	492d      	ldr	r1, [pc, #180]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015c8:	482e      	ldr	r0, [pc, #184]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 80015ca:	f003 fdd8 	bl	800517e <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015d4:	3318      	adds	r3, #24
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3308      	adds	r3, #8
 80015de:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3308      	adds	r3, #8
 80015e4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 80015e6:	4a25      	ldr	r2, [pc, #148]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <set_packet_pointer_AX25+0x1dc>)
 80015ea:	4615      	mov	r5, r2
 80015ec:	461c      	mov	r4, r3
 80015ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f0:	6028      	str	r0, [r5, #0]
 80015f2:	6069      	str	r1, [r5, #4]
 80015f4:	60aa      	str	r2, [r5, #8]
 80015f6:	60eb      	str	r3, [r5, #12]
 80015f8:	cc03      	ldmia	r4!, {r0, r1}
 80015fa:	6128      	str	r0, [r5, #16]
 80015fc:	6169      	str	r1, [r5, #20]
 80015fe:	8823      	ldrh	r3, [r4, #0]
 8001600:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001602:	481e      	ldr	r0, [pc, #120]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001604:	f7fe fe04 	bl	8000210 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	230a      	movs	r3, #10
 800160e:	491b      	ldr	r1, [pc, #108]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001612:	f003 fdb4 	bl	800517e <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800161c:	331c      	adds	r3, #28
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <set_packet_pointer_AX25+0x1e0>)
 8001636:	4615      	mov	r5, r2
 8001638:	461c      	mov	r4, r3
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	6028      	str	r0, [r5, #0]
 800163e:	6069      	str	r1, [r5, #4]
 8001640:	60aa      	str	r2, [r5, #8]
 8001642:	60eb      	str	r3, [r5, #12]
 8001644:	cc03      	ldmia	r4!, {r0, r1}
 8001646:	6128      	str	r0, [r5, #16]
 8001648:	6169      	str	r1, [r5, #20]
 800164a:	7823      	ldrb	r3, [r4, #0]
 800164c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800164e:	480b      	ldr	r0, [pc, #44]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001650:	f7fe fdde 	bl	8000210 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	230a      	movs	r3, #10
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 800165e:	f003 fd8e 	bl	800517e <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001668:	3304      	adds	r3, #4
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000a18 	.word	0x20000a18
 800167c:	2000260c 	.word	0x2000260c
 8001680:	08006a70 	.word	0x08006a70
 8001684:	200042c8 	.word	0x200042c8
 8001688:	08006a94 	.word	0x08006a94
 800168c:	08006ab4 	.word	0x08006ab4
 8001690:	08006ad4 	.word	0x08006ad4
 8001694:	08006af0 	.word	0x08006af0
 8001698:	08006b0c 	.word	0x08006b0c

0800169c <AX25_TO_KISS>:

void AX25_TO_KISS(){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <AX25_TO_KISS+0xc4>)
 80016a4:	607b      	str	r3, [r7, #4]

	set_packet_pointer_AX25();
 80016a6:	f7ff ff07 	bl	80014b8 <set_packet_pointer_AX25>
	print_AX25();
 80016aa:	f7ff f959 	bl	8000960 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3308      	adds	r3, #8
 80016b2:	603b      	str	r3, [r7, #0]

	set_packet_pointer_KISS();
 80016b4:	f000 f8c2 	bl	800183c <set_packet_pointer_KISS>

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	492a      	ldr	r1, [pc, #168]	; (8001764 <AX25_TO_KISS+0xc8>)
 80016bc:	461a      	mov	r2, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	cb03      	ldmia	r3!, {r0, r1}
 80016c2:	6010      	str	r0, [r2, #0]
 80016c4:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016cc:	3310      	adds	r3, #16
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2270      	movs	r2, #112	; 0x70
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f004 fc67 	bl	8005fa8 <memcpy>
	cpy_from_ptr += address_len;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3370      	adds	r3, #112	; 0x70
 80016de:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016e6:	3314      	adds	r3, #20
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2208      	movs	r2, #8
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fc5a 	bl	8005fa8 <memcpy>
	cpy_from_ptr += control_len;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3308      	adds	r3, #8
 80016f8:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001700:	3318      	adds	r3, #24
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2208      	movs	r2, #8
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f004 fc4d 	bl	8005fa8 <memcpy>
	cpy_from_ptr += PID_len;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3308      	adds	r3, #8
 8001712:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800171a:	331c      	adds	r3, #28
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	6839      	ldr	r1, [r7, #0]
 800172a:	f004 fc3d 	bl	8005fa8 <memcpy>

	memcpy(local_packet->Info+local_packet->Info_Len,KISS_FLAG,FLAG_SIZE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001734:	331c      	adds	r3, #28
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4413      	add	r3, r2
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <AX25_TO_KISS+0xc8>)
 8001744:	461a      	mov	r2, r3
 8001746:	460b      	mov	r3, r1
 8001748:	cb03      	ldmia	r3!, {r0, r1}
 800174a:	6010      	str	r0, [r2, #0]
 800174c:	6051      	str	r1, [r2, #4]
//	rxBit_count = (local_packet->byte_cnt*8) - 24;
//	crc_generate();

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <AX25_TO_KISS+0xcc>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_KISS();
 8001754:	f7ff fb5a 	bl	8000e0c <print_KISS>
	return true; //valid packet
 8001758:	bf00      	nop
}
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000a18 	.word	0x20000a18
 8001764:	20000000 	.word	0x20000000
 8001768:	200009fc 	.word	0x200009fc

0800176c <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <receiving_KISS+0xbc>)
 8001774:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <receiving_KISS+0xc0>)
 8001778:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	7b5b      	ldrb	r3, [r3, #13]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d04d      	beq.n	800181e <receiving_KISS+0xb2>
		sprintf(uartData, "\nGot a packet via UART of size %d bytes, printing now...\n\n",local_UART_packet->received_byte_cnt);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	461a      	mov	r2, r3
 8001788:	4929      	ldr	r1, [pc, #164]	; (8001830 <receiving_KISS+0xc4>)
 800178a:	482a      	ldr	r0, [pc, #168]	; (8001834 <receiving_KISS+0xc8>)
 800178c:	f004 fc20 	bl	8005fd0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001790:	4828      	ldr	r0, [pc, #160]	; (8001834 <receiving_KISS+0xc8>)
 8001792:	f7fe fd3d 	bl	8000210 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	230a      	movs	r3, #10
 800179c:	4925      	ldr	r1, [pc, #148]	; (8001834 <receiving_KISS+0xc8>)
 800179e:	4826      	ldr	r0, [pc, #152]	; (8001838 <receiving_KISS+0xcc>)
 80017a0:	f003 fced 	bl	800517e <HAL_UART_Transmit>

		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e020      	b.n	80017ec <receiving_KISS+0x80>
			//Hex value from UART
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[i];
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	330e      	adds	r3, #14
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	72fb      	strb	r3, [r7, #11]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4413      	add	r3, r2
 80017c2:	3307      	adds	r3, #7
 80017c4:	607b      	str	r3, [r7, #4]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2201      	movs	r2, #1
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fef6 	bl	80005c0 <conv_HEX_to_BIN>

			local_UART_packet->got_packet = false;
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2200      	movs	r2, #0
 80017d8:	735a      	strb	r2, [r3, #13]
			local_packet->got_packet = true;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017e0:	3309      	adds	r3, #9
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbd9      	blt.n	80017aa <receiving_KISS+0x3e>
		}
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001800:	330c      	adds	r3, #12
 8001802:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset-1)*8;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800180a:	330c      	adds	r3, #12
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3b13      	subs	r3, #19
 8001810:	00da      	lsls	r2, r3, #3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001818:	601a      	str	r2, [r3, #0]
		return true;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <receiving_KISS+0xb4>
	}

	else {
		return false;
 800181e:	2300      	movs	r3, #0
	}
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20001d74 	.word	0x20001d74
 800182c:	20000a18 	.word	0x20000a18
 8001830:	08006b28 	.word	0x08006b28
 8001834:	2000260c 	.word	0x2000260c
 8001838:	200042c8 	.word	0x200042c8

0800183c <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001842:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <set_packet_pointer_KISS+0x174>)
 8001844:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS:\n");
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001848:	4a5b      	ldr	r2, [pc, #364]	; (80019b8 <set_packet_pointer_KISS+0x17c>)
 800184a:	4614      	mov	r4, r2
 800184c:	469c      	mov	ip, r3
 800184e:	f104 0e20 	add.w	lr, r4, #32
 8001852:	4665      	mov	r5, ip
 8001854:	4626      	mov	r6, r4
 8001856:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001858:	6028      	str	r0, [r5, #0]
 800185a:	6069      	str	r1, [r5, #4]
 800185c:	60aa      	str	r2, [r5, #8]
 800185e:	60eb      	str	r3, [r5, #12]
 8001860:	3410      	adds	r4, #16
 8001862:	f10c 0c10 	add.w	ip, ip, #16
 8001866:	4574      	cmp	r4, lr
 8001868:	d1f3      	bne.n	8001852 <set_packet_pointer_KISS+0x16>
 800186a:	4663      	mov	r3, ip
 800186c:	4622      	mov	r2, r4
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001872:	4850      	ldr	r0, [pc, #320]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001874:	f7fe fccc 	bl	8000210 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	230a      	movs	r3, #10
 800187e:	494d      	ldr	r1, [pc, #308]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001880:	484e      	ldr	r0, [pc, #312]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001882:	f003 fc7c 	bl	800517e <HAL_UART_Transmit>

	bool *curr_mem = local_packet->KISS_PACKET+16;//+8 is to skip the flag since it does not have a pointer
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 800188c:	3310      	adds	r3, #16
 800188e:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for address\n");
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <set_packet_pointer_KISS+0x184>)
 8001894:	4615      	mov	r5, r2
 8001896:	461c      	mov	r4, r3
 8001898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189a:	6028      	str	r0, [r5, #0]
 800189c:	6069      	str	r1, [r5, #4]
 800189e:	60aa      	str	r2, [r5, #8]
 80018a0:	60eb      	str	r3, [r5, #12]
 80018a2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80018a4:	6128      	str	r0, [r5, #16]
 80018a6:	6169      	str	r1, [r5, #20]
 80018a8:	61aa      	str	r2, [r5, #24]
 80018aa:	7823      	ldrb	r3, [r4, #0]
 80018ac:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018ae:	4841      	ldr	r0, [pc, #260]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018b0:	f7fe fcae 	bl	8000210 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	230a      	movs	r3, #10
 80018ba:	493e      	ldr	r1, [pc, #248]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018bc:	483f      	ldr	r0, [pc, #252]	; (80019bc <set_packet_pointer_KISS+0x180>)
 80018be:	f003 fc5e 	bl	800517e <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018c8:	3310      	adds	r3, #16
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3370      	adds	r3, #112	; 0x70
 80018d2:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for control\n");
 80018d4:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <set_packet_pointer_KISS+0x188>)
 80018d8:	4615      	mov	r5, r2
 80018da:	461c      	mov	r4, r3
 80018dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018de:	6028      	str	r0, [r5, #0]
 80018e0:	6069      	str	r1, [r5, #4]
 80018e2:	60aa      	str	r2, [r5, #8]
 80018e4:	60eb      	str	r3, [r5, #12]
 80018e6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80018e8:	6128      	str	r0, [r5, #16]
 80018ea:	6169      	str	r1, [r5, #20]
 80018ec:	61aa      	str	r2, [r5, #24]
 80018ee:	7823      	ldrb	r3, [r4, #0]
 80018f0:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018f2:	4830      	ldr	r0, [pc, #192]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018f4:	f7fe fc8c 	bl	8000210 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	230a      	movs	r3, #10
 80018fe:	492d      	ldr	r1, [pc, #180]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001900:	482e      	ldr	r0, [pc, #184]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001902:	f003 fc3c 	bl	800517e <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800190c:	3314      	adds	r3, #20
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	3308      	adds	r3, #8
 8001916:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for PID\n");
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <set_packet_pointer_KISS+0x18c>)
 800191c:	4615      	mov	r5, r2
 800191e:	461c      	mov	r4, r3
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	6028      	str	r0, [r5, #0]
 8001924:	6069      	str	r1, [r5, #4]
 8001926:	60aa      	str	r2, [r5, #8]
 8001928:	60eb      	str	r3, [r5, #12]
 800192a:	cc03      	ldmia	r4!, {r0, r1}
 800192c:	6128      	str	r0, [r5, #16]
 800192e:	6169      	str	r1, [r5, #20]
 8001930:	7823      	ldrb	r3, [r4, #0]
 8001932:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001934:	481f      	ldr	r0, [pc, #124]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001936:	f7fe fc6b 	bl	8000210 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	230a      	movs	r3, #10
 8001940:	491c      	ldr	r1, [pc, #112]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001942:	481e      	ldr	r0, [pc, #120]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001944:	f003 fc1b 	bl	800517e <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800194e:	3318      	adds	r3, #24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3308      	adds	r3, #8
 8001958:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for Info\n");
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <set_packet_pointer_KISS+0x190>)
 800195e:	4615      	mov	r5, r2
 8001960:	461c      	mov	r4, r3
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	6028      	str	r0, [r5, #0]
 8001966:	6069      	str	r1, [r5, #4]
 8001968:	60aa      	str	r2, [r5, #8]
 800196a:	60eb      	str	r3, [r5, #12]
 800196c:	cc03      	ldmia	r4!, {r0, r1}
 800196e:	6128      	str	r0, [r5, #16]
 8001970:	6169      	str	r1, [r5, #20]
 8001972:	8823      	ldrh	r3, [r4, #0]
 8001974:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001978:	f7fe fc4a 	bl	8000210 <strlen>
 800197c:	4603      	mov	r3, r0
 800197e:	b29a      	uxth	r2, r3
 8001980:	230a      	movs	r3, #10
 8001982:	490c      	ldr	r1, [pc, #48]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001986:	f003 fbfa 	bl	800517e <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001990:	331c      	adds	r3, #28
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	603b      	str	r3, [r7, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000a18 	.word	0x20000a18
 80019b4:	2000260c 	.word	0x2000260c
 80019b8:	08006b64 	.word	0x08006b64
 80019bc:	200042c8 	.word	0x200042c8
 80019c0:	08006a94 	.word	0x08006a94
 80019c4:	08006ab4 	.word	0x08006ab4
 80019c8:	08006ad4 	.word	0x08006ad4
 80019cc:	08006af0 	.word	0x08006af0

080019d0 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <KISS_TO_AX25+0x9c>)
 80019d8:	607b      	str	r3, [r7, #4]

	set_packet_pointer_KISS();
 80019da:	f7ff ff2f 	bl	800183c <set_packet_pointer_KISS>
	print_KISS();
 80019de:	f7ff fa15 	bl	8000e0c <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+16);//starting kiss packet skipping 2 bytes
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80019e8:	3310      	adds	r3, #16
 80019ea:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 80019ec:	f7ff fd64 	bl	80014b8 <set_packet_pointer_AX25>

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019f6:	3310      	adds	r3, #16
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2270      	movs	r2, #112	; 0x70
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fad2 	bl	8005fa8 <memcpy>
	cpy_from_ptr += address_len;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3370      	adds	r3, #112	; 0x70
 8001a08:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a10:	3314      	adds	r3, #20
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2208      	movs	r2, #8
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 fac5 	bl	8005fa8 <memcpy>
	cpy_from_ptr += control_len;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3308      	adds	r3, #8
 8001a22:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a2a:	3318      	adds	r3, #24
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fab8 	bl	8005fa8 <memcpy>
	cpy_from_ptr += PID_len;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a44:	331c      	adds	r3, #28
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	f004 faa8 	bl	8005fa8 <memcpy>
//	rxBit_count = (local_packet->byte_cnt*8) - 24;
//	crc_generate();

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <KISS_TO_AX25+0xa0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_AX25();
 8001a5e:	f7fe ff7f 	bl	8000960 <print_AX25>
	return true; //valid packet
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000a18 	.word	0x20000a18
 8001a70:	200009fc 	.word	0x200009fc

08001a74 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8001a7e:	f000 f98b 	bl	8001d98 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <initProgram+0x58>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8001a88:	f000 f826 	bl	8001ad8 <toggleMode>
	toggleMode();
 8001a8c:	f000 f824 	bl	8001ad8 <toggleMode>

	if (mode) {
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <initProgram+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <initProgram+0x5c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2264      	movs	r2, #100	; 0x64
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <initProgram+0x60>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f240 323f 	movw	r2, #831	; 0x33f
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aaa:	e009      	b.n	8001ac0 <initProgram+0x4c>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <initProgram+0x5c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <initProgram+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 8001ac0:	f7fe fdce 	bl	8000660 <init_AX25>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20004270 	.word	0x20004270
 8001ad0:	20004288 	.word	0x20004288
 8001ad4:	200031d0 	.word	0x200031d0

08001ad8 <toggleMode>:



void toggleMode() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001adc:	2006      	movs	r0, #6
 8001ade:	f001 f9b8 	bl	8002e52 <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <toggleMode+0x98>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f083 0301 	eor.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <toggleMode+0x98>)
 8001afe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <toggleMode+0x98>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	2120      	movs	r1, #32
 8001b08:	481a      	ldr	r0, [pc, #104]	; (8001b74 <toggleMode+0x9c>)
 8001b0a:	f002 f955 	bl	8003db8 <HAL_GPIO_WritePin>
	midbit = false;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <toggleMode+0xa0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8001b14:	4819      	ldr	r0, [pc, #100]	; (8001b7c <toggleMode+0xa4>)
 8001b16:	f002 fee4 	bl	80048e2 <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <toggleMode+0xa4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <toggleMode+0x98>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <toggleMode+0x5e>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <toggleMode+0xa4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f240 323f 	movw	r2, #831	; 0x33f
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b34:	e013      	b.n	8001b5e <toggleMode+0x86>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <toggleMode+0xa8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <toggleMode+0xa4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8001b4a:	480c      	ldr	r0, [pc, #48]	; (8001b7c <toggleMode+0xa4>)
 8001b4c:	f002 fef4 	bl	8004938 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001b50:	2100      	movs	r1, #0
 8001b52:	480c      	ldr	r0, [pc, #48]	; (8001b84 <toggleMode+0xac>)
 8001b54:	f001 fa68 	bl	8003028 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b58:	2006      	movs	r0, #6
 8001b5a:	f001 f96c 	bl	8002e36 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <toggleMode+0x9c>)
 8001b66:	f002 f927 	bl	8003db8 <HAL_GPIO_WritePin>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20004270 	.word	0x20004270
 8001b74:	40020000 	.word	0x40020000
 8001b78:	20000a00 	.word	0x20000a00
 8001b7c:	200031d0 	.word	0x200031d0
 8001b80:	20004288 	.word	0x20004288
 8001b84:	20004274 	.word	0x20004274

08001b88 <loadPeriodBuffer>:

void loadPeriodBuffer(int timerCnt) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	periodBuffer[periodSaveCount] = timerCnt;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <loadPeriodBuffer+0x44>)
 8001b9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	periodSaveCount++;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001ba8:	801a      	strh	r2, [r3, #0]
	if (periodSaveCount >= RX_BUFFERSIZE) {
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb2:	d302      	bcc.n	8001bba <loadPeriodBuffer+0x32>
		periodSaveCount = 0;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
	}
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000a04 	.word	0x20000a04
 8001bcc:	20003270 	.word	0x20003270

08001bd0 <Tim3IT>:
void Tim3IT() {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	if (mode) {
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <Tim3IT+0x34>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <Tim3IT+0x14>
		//HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
		midbit = false;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <Tim3IT+0x38>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
		if(sampusecount>SAMP_PER_BAUD){
			loadPeriodBuffer(0);
		}
		sampusecount++;
	}
}
 8001be2:	e00c      	b.n	8001bfe <Tim3IT+0x2e>
		if(sampusecount>SAMP_PER_BAUD){
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <Tim3IT+0x3c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d902      	bls.n	8001bf2 <Tim3IT+0x22>
			loadPeriodBuffer(0);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff ffcb 	bl	8001b88 <loadPeriodBuffer>
		sampusecount++;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <Tim3IT+0x3c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <Tim3IT+0x3c>)
 8001bfc:	701a      	strb	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20004270 	.word	0x20004270
 8001c08:	20000a00 	.word	0x20000a00
 8001c0c:	20000a03 	.word	0x20000a03

08001c10 <FreqCounterPinEXTI>:
void FreqCounterPinEXTI() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	loadPeriodBuffer(htim2.Instance->CNT);
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <FreqCounterPinEXTI+0x24>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ffb4 	bl	8001b88 <loadPeriodBuffer>
	htim2.Instance->CNT = 0;
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <FreqCounterPinEXTI+0x24>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	sampusecount = 0;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <FreqCounterPinEXTI+0x28>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20004288 	.word	0x20004288
 8001c38:	20000a03 	.word	0x20000a03

08001c3c <bitToAudio>:
		sprintf(uartData, "sinArray[%d] = %d\n",i,sinArray[i]);
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}

int bitToAudio(bool *bitStream, int arraySize, bool direction,int wave_start) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71fb      	strb	r3, [r7, #7]
	bool changeFreq;
	int waveoffset = wave_start;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < arraySize; i++) {
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e05c      	b.n	8001d10 <bitToAudio+0xd4>
		//Check if freq needs to be changed for NRZI
		if(direction){
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <bitToAudio+0x2c>
			changeFreq = bitStream[i];
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	77fb      	strb	r3, [r7, #31]
 8001c66:	e007      	b.n	8001c78 <bitToAudio+0x3c>
		} else {
			changeFreq = bitStream[arraySize - i - 1];
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	77fb      	strb	r3, [r7, #31]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, changeFreq);
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c80:	4829      	ldr	r0, [pc, #164]	; (8001d28 <bitToAudio+0xec>)
 8001c82:	f002 f899 	bl	8003db8 <HAL_GPIO_WritePin>
		freqSelect = changeFreq;
 8001c86:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <bitToAudio+0xf0>)
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
 8001c8a:	7013      	strb	r3, [r2, #0]
		//freqSelect = (changeFreq) ? !freqSelect : freqSelect;

		if (freqSelect) {
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <bitToAudio+0xf0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <bitToAudio+0x68>
			htim2.Instance->ARR = 14;
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <bitToAudio+0xf4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	220e      	movs	r2, #14
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * HIGHF) / (1.0 * LOWF);
 8001c9c:	f240 2326 	movw	r3, #550	; 0x226
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	e006      	b.n	8001cb2 <bitToAudio+0x76>
		}
		else {
			htim2.Instance->ARR = 27;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <bitToAudio+0xf4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	221b      	movs	r2, #27
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * LOWF) / (1.0 * LOWF);
 8001cac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cb0:	61bb      	str	r3, [r7, #24]
		}

		//htim2.Instance->CNT = 0;
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <bitToAudio+0xf8>)
 8001cb8:	441a      	add	r2, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	481c      	ldr	r0, [pc, #112]	; (8001d38 <bitToAudio+0xfc>)
 8001cc6:	f001 f901 	bl	8002ecc <HAL_DAC_Start_DMA>
		htim3.Instance->CNT = 0;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <bitToAudio+0x100>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8001cd2:	481a      	ldr	r0, [pc, #104]	; (8001d3c <bitToAudio+0x100>)
 8001cd4:	f002 fe30 	bl	8004938 <HAL_TIM_Base_Start_IT>

		//Calculate ending point for wave
		wave_start = (wave_start+waveoffset+1)%FREQ_SAMP;
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <bitToAudio+0x104>)
 8001ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce6:	1151      	asrs	r1, r2, #5
 8001ce8:	17da      	asrs	r2, r3, #31
 8001cea:	1a8a      	subs	r2, r1, r2
 8001cec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001cf0:	fb01 f202 	mul.w	r2, r1, r2
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	603b      	str	r3, [r7, #0]

		midbit = true;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <bitToAudio+0x108>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
		while (midbit){
 8001cfe:	e000      	b.n	8001d02 <bitToAudio+0xc6>
			//In the future this leaves the CPU free for scheduling or something
			__NOP();
 8001d00:	bf00      	nop
		while (midbit){
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <bitToAudio+0x108>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1fa      	bne.n	8001d00 <bitToAudio+0xc4>
	for (int i = 0; i < arraySize; i++) {
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	db9e      	blt.n	8001c56 <bitToAudio+0x1a>
		}

	}

	HAL_TIM_Base_Stop(&htim3);
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <bitToAudio+0x100>)
 8001d1a:	f002 fde2 	bl	80048e2 <HAL_TIM_Base_Stop>
	return wave_start;
 8001d1e:	683b      	ldr	r3, [r7, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	20000a02 	.word	0x20000a02
 8001d30:	20004288 	.word	0x20004288
 8001d34:	20000010 	.word	0x20000010
 8001d38:	20004274 	.word	0x20004274
 8001d3c:	200031d0 	.word	0x200031d0
 8001d40:	1b4e81b5 	.word	0x1b4e81b5
 8001d44:	20000a00 	.word	0x20000a00

08001d48 <generateBitstream>:
void generateBitstream() {
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <generateBitstream+0x4c>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <generateBitstream+0x4c>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <generateBitstream+0x4c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <generateBitstream+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <generateBitstream+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <generateBitstream+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <generateBitstream+0x4c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <generateBitstream+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <generateBitstream+0x4c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <generateBitstream+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	725a      	strb	r2, [r3, #9]

}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200031c4 	.word	0x200031c4

08001d98 <initOUTData>:
void initOUTData() {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8001d9c:	f7ff ffd4 	bl	8001d48 <generateBitstream>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <pertobit>:
uint8_t sampusecount = 0;
uint16_t periodSaveCount = 0;
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <pertobit+0x54>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	dd06      	ble.n	8001dce <pertobit+0x2a>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f640 2259 	movw	r2, #2649	; 0xa59
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	dc01      	bgt.n	8001dce <pertobit+0x2a>
		return 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00d      	b.n	8001dea <pertobit+0x46>
	if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	dd06      	ble.n	8001de6 <pertobit+0x42>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f240 6271 	movw	r2, #1649	; 0x671
 8001dde:	4293      	cmp	r3, r2
 8001de0:	dc01      	bgt.n	8001de6 <pertobit+0x42>
		return 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e001      	b.n	8001dea <pertobit+0x46>
	else
		return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	00989680 	.word	0x00989680

08001dfc <loadBit>:
int loadBit(){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	int currbit = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
	int nextbit = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]

	currbit = pertobit(periodBuffer[trackBit]);
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <loadBit+0xf4>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <loadBit+0xf8>)
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ffc4 	bl	8001da4 <pertobit>
 8001e1c:	6078      	str	r0, [r7, #4]

	//Low frequency should have 1 bit per baud
	if(currbit==0){
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <loadBit+0x38>
		bitBuffer[bitSaveCount] = 0;
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <loadBit+0xfc>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <loadBit+0x100>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e32:	e03c      	b.n	8001eae <loadBit+0xb2>
	}

	//High frequency should have 2 high bits per baud
	else if(currbit==1){
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d131      	bne.n	8001e9e <loadBit+0xa2>
		//Gather next bit
		//ternary assign: var = (cond)?if_true:if_false;
		nextbit = (trackBit!=RX_BUFFERSIZE-1)?pertobit(periodBuffer[trackBit+1]):pertobit(periodBuffer[0]);
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <loadBit+0xf4>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00a      	beq.n	8001e5c <loadBit+0x60>
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <loadBit+0xf4>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <loadBit+0xf8>)
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffa6 	bl	8001da4 <pertobit>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	e005      	b.n	8001e68 <loadBit+0x6c>
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <loadBit+0xf8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff9f 	bl	8001da4 <pertobit>
 8001e66:	4603      	mov	r3, r0
 8001e68:	603b      	str	r3, [r7, #0]

		if(nextbit==1){
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10d      	bne.n	8001e8c <loadBit+0x90>
			//High frequency detected, skip next bit
			trackBit++;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <loadBit+0xf4>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <loadBit+0xf4>)
 8001e7a:	801a      	strh	r2, [r3, #0]
			bitBuffer[bitSaveCount] = 1;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <loadBit+0xfc>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <loadBit+0x100>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e8a:	e010      	b.n	8001eae <loadBit+0xb2>
		}
		else {
			bitBuffer[bitSaveCount] = -1;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <loadBit+0xfc>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <loadBit+0x100>)
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e9c:	e007      	b.n	8001eae <loadBit+0xb2>
		}
	}
	//Invalid bit
	else{
		bitBuffer[bitSaveCount] = -1;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <loadBit+0xfc>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <loadBit+0x100>)
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	}

	//Increment trackBit
	trackBit++;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <loadBit+0xf4>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <loadBit+0xf4>)
 8001eb8:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <loadBit+0xf4>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d302      	bcc.n	8001eca <loadBit+0xce>
		trackBit = 0;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <loadBit+0xf4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	801a      	strh	r2, [r3, #0]

	//Increment bitSaveCount
	bitSaveCount++;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <loadBit+0xfc>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <loadBit+0xfc>)
 8001ed4:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <loadBit+0xfc>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d302      	bcc.n	8001ee6 <loadBit+0xea>
		bitSaveCount = 0;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <loadBit+0xfc>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	801a      	strh	r2, [r3, #0]

	return currbit;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000a06 	.word	0x20000a06
 8001ef4:	20003270 	.word	0x20003270
 8001ef8:	20000a08 	.word	0x20000a08
 8001efc:	20004308 	.word	0x20004308

08001f00 <loadOctet>:
int loadOctet(bool* bufferptr) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	e024      	b.n	8001f5c <loadOctet+0x5c>
		bit = loadBit();
 8001f12:	f7ff ff73 	bl	8001dfc <loadBit>
 8001f16:	6138      	str	r0, [r7, #16]
        if(bit < 0){
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da02      	bge.n	8001f24 <loadOctet+0x24>
        	return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e042      	b.n	8001faa <loadOctet+0xaa>
        }
		myPtr[i] = bit;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	b2d9      	uxtb	r1, r3
 8001f30:	f107 0208 	add.w	r2, r7, #8
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4413      	add	r3, r2
 8001f38:	460a      	mov	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8001f3c:	f107 0208 	add.w	r2, r7, #8
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	4413      	add	r3, r2
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <loadOctet+0xb4>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <loadOctet+0x56>
        	isFlag = false;
 8001f52:	2300      	movs	r3, #0
 8001f54:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2b07      	cmp	r3, #7
 8001f60:	ddd7      	ble.n	8001f12 <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
 8001f64:	f083 0301 	eor.w	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01c      	beq.n	8001fa8 <loadOctet+0xa8>
//		sprintf(uartData, "Printing octet = ");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		for(int i = 0;i<8;i++){
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e016      	b.n	8001fa2 <loadOctet+0xa2>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	f107 0220 	add.w	r2, r7, #32
 8001f7e:	4413      	add	r3, r2
 8001f80:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	440b      	add	r3, r1
 8001f90:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <loadOctet+0xb8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <loadOctet+0xb8>)
 8001f9a:	6013      	str	r3, [r2, #0]
		for(int i = 0;i<8;i++){
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b07      	cmp	r3, #7
 8001fa6:	dde5      	ble.n	8001f74 <loadOctet+0x74>
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
//		sprintf(uartData, "\r\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
	return isFlag;
 8001fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3720      	adds	r7, #32
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	200009fc 	.word	0x200009fc

08001fbc <streamGet>:
int streamGet() {
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b090      	sub	sp, #64	; 0x40
 8001fc0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001fc2:	4b72      	ldr	r3, [pc, #456]	; (800218c <streamGet+0x1d0>)
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 8001fc6:	f240 134b 	movw	r3, #331	; 0x14b
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8001fcc:	e0cf      	b.n	800216e <streamGet+0x1b2>
		gotflag = false;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd8:	e011      	b.n	8001ffe <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8001fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	2b06      	cmp	r3, #6
 8002002:	ddea      	ble.n	8001fda <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8002004:	f7ff fefa 	bl	8001dfc <loadBit>
 8002008:	4603      	mov	r3, r0
 800200a:	623b      	str	r3, [r7, #32]
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002010:	e019      	b.n	8002046 <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800201a:	4413      	add	r3, r2
 800201c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002020:	495b      	ldr	r1, [pc, #364]	; (8002190 <streamGet+0x1d4>)
 8002022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002024:	440a      	add	r2, r1
 8002026:	7812      	ldrb	r2, [r2, #0]
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <streamGet+0x78>
				gotflag = false;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002032:	e00b      	b.n	800204c <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8002034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002036:	2b07      	cmp	r3, #7
 8002038:	d102      	bne.n	8002040 <streamGet+0x84>
				gotflag = true;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	3301      	adds	r3, #1
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	2b07      	cmp	r3, #7
 800204a:	dde2      	ble.n	8002012 <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 800204c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 808c 	beq.w	800216e <streamGet+0x1b2>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 8002056:	4a4f      	ldr	r2, [pc, #316]	; (8002194 <streamGet+0x1d8>)
 8002058:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <streamGet+0x1dc>)
 800205a:	4615      	mov	r5, r2
 800205c:	461c      	mov	r4, r3
 800205e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002060:	6028      	str	r0, [r5, #0]
 8002062:	6069      	str	r1, [r5, #4]
 8002064:	60aa      	str	r2, [r5, #8]
 8002066:	60eb      	str	r3, [r5, #12]
 8002068:	cc07      	ldmia	r4!, {r0, r1, r2}
 800206a:	6128      	str	r0, [r5, #16]
 800206c:	6169      	str	r1, [r5, #20]
 800206e:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002070:	4848      	ldr	r0, [pc, #288]	; (8002194 <streamGet+0x1d8>)
 8002072:	f7fe f8cd 	bl	8000210 <strlen>
 8002076:	4603      	mov	r3, r0
 8002078:	b29a      	uxth	r2, r3
 800207a:	230a      	movs	r3, #10
 800207c:	4945      	ldr	r1, [pc, #276]	; (8002194 <streamGet+0x1d8>)
 800207e:	4847      	ldr	r0, [pc, #284]	; (800219c <streamGet+0x1e0>)
 8002080:	f003 f87d 	bl	800517e <HAL_UART_Transmit>
			octet_count  = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 800208c:	e00a      	b.n	80020a4 <streamGet+0xe8>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 800208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002094:	4413      	add	r3, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff32 	bl	8001f00 <loadOctet>
 800209c:	63b8      	str	r0, [r7, #56]	; 0x38
				//sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

				octet_count+=1;
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	3301      	adds	r3, #1
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <streamGet+0xf6>
 80020aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dbed      	blt.n	800208e <streamGet+0xd2>
			}

			//If ax.25 buffer overflows or an octet was bad, this was a bad packet
			if((octet_count >= max_octets) || (good_octet!=1)){
 80020b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	429a      	cmp	r2, r3
 80020b8:	da02      	bge.n	80020c0 <streamGet+0x104>
 80020ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d00f      	beq.n	80020e0 <streamGet+0x124>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 80020c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c2:	4937      	ldr	r1, [pc, #220]	; (80021a0 <streamGet+0x1e4>)
 80020c4:	4833      	ldr	r0, [pc, #204]	; (8002194 <streamGet+0x1d8>)
 80020c6:	f003 ff83 	bl	8005fd0 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020ca:	4832      	ldr	r0, [pc, #200]	; (8002194 <streamGet+0x1d8>)
 80020cc:	f7fe f8a0 	bl	8000210 <strlen>
 80020d0:	4603      	mov	r3, r0
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	230a      	movs	r3, #10
 80020d6:	492f      	ldr	r1, [pc, #188]	; (8002194 <streamGet+0x1d8>)
 80020d8:	4830      	ldr	r0, [pc, #192]	; (800219c <streamGet+0x1e0>)
 80020da:	f003 f850 	bl	800517e <HAL_UART_Transmit>
 80020de:	e046      	b.n	800216e <streamGet+0x1b2>
			}
			//
			else if(octet_count == 1){
 80020e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d12a      	bne.n	800213c <streamGet+0x180>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 80020e6:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <streamGet+0x1d8>)
 80020e8:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <streamGet+0x1e8>)
 80020ea:	4615      	mov	r5, r2
 80020ec:	461c      	mov	r4, r3
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	6028      	str	r0, [r5, #0]
 80020f2:	6069      	str	r1, [r5, #4]
 80020f4:	60aa      	str	r2, [r5, #8]
 80020f6:	60eb      	str	r3, [r5, #12]
 80020f8:	cc03      	ldmia	r4!, {r0, r1}
 80020fa:	6128      	str	r0, [r5, #16]
 80020fc:	6169      	str	r1, [r5, #20]
 80020fe:	8823      	ldrh	r3, [r4, #0]
 8002100:	78a2      	ldrb	r2, [r4, #2]
 8002102:	832b      	strh	r3, [r5, #24]
 8002104:	4613      	mov	r3, r2
 8002106:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002108:	4822      	ldr	r0, [pc, #136]	; (8002194 <streamGet+0x1d8>)
 800210a:	f7fe f881 	bl	8000210 <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	b29a      	uxth	r2, r3
 8002112:	230a      	movs	r3, #10
 8002114:	491f      	ldr	r1, [pc, #124]	; (8002194 <streamGet+0x1d8>)
 8002116:	4821      	ldr	r0, [pc, #132]	; (800219c <streamGet+0x1e0>)
 8002118:	f003 f831 	bl	800517e <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 800211c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800211e:	4922      	ldr	r1, [pc, #136]	; (80021a8 <streamGet+0x1ec>)
 8002120:	481c      	ldr	r0, [pc, #112]	; (8002194 <streamGet+0x1d8>)
 8002122:	f003 ff55 	bl	8005fd0 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002126:	481b      	ldr	r0, [pc, #108]	; (8002194 <streamGet+0x1d8>)
 8002128:	f7fe f872 	bl	8000210 <strlen>
 800212c:	4603      	mov	r3, r0
 800212e:	b29a      	uxth	r2, r3
 8002130:	230a      	movs	r3, #10
 8002132:	4918      	ldr	r1, [pc, #96]	; (8002194 <streamGet+0x1d8>)
 8002134:	4819      	ldr	r0, [pc, #100]	; (800219c <streamGet+0x1e0>)
 8002136:	f003 f822 	bl	800517e <HAL_UART_Transmit>
 800213a:	e018      	b.n	800216e <streamGet+0x1b2>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 800213c:	4a15      	ldr	r2, [pc, #84]	; (8002194 <streamGet+0x1d8>)
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <streamGet+0x1f0>)
 8002140:	4615      	mov	r5, r2
 8002142:	461c      	mov	r4, r3
 8002144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002146:	6028      	str	r0, [r5, #0]
 8002148:	6069      	str	r1, [r5, #4]
 800214a:	60aa      	str	r2, [r5, #8]
 800214c:	60eb      	str	r3, [r5, #12]
 800214e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002150:	6128      	str	r0, [r5, #16]
 8002152:	6169      	str	r1, [r5, #20]
 8002154:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002156:	480f      	ldr	r0, [pc, #60]	; (8002194 <streamGet+0x1d8>)
 8002158:	f7fe f85a 	bl	8000210 <strlen>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	230a      	movs	r3, #10
 8002162:	490c      	ldr	r1, [pc, #48]	; (8002194 <streamGet+0x1d8>)
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <streamGet+0x1e0>)
 8002166:	f003 f80a 	bl	800517e <HAL_UART_Transmit>

				return 1;
 800216a:	2301      	movs	r3, #1
 800216c:	e009      	b.n	8002182 <streamGet+0x1c6>
	while(!changeMode){
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <streamGet+0x1f4>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	f47f af28 	bne.w	8001fce <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002182:	4618      	mov	r0, r3
 8002184:	3740      	adds	r7, #64	; 0x40
 8002186:	46bd      	mov	sp, r7
 8002188:	bdb0      	pop	{r4, r5, r7, pc}
 800218a:	bf00      	nop
 800218c:	20000a18 	.word	0x20000a18
 8002190:	20000008 	.word	0x20000008
 8002194:	2000260c 	.word	0x2000260c
 8002198:	08006bf0 	.word	0x08006bf0
 800219c:	200042c8 	.word	0x200042c8
 80021a0:	08006c0c 	.word	0x08006c0c
 80021a4:	08006c30 	.word	0x08006c30
 80021a8:	08006c4c 	.word	0x08006c4c
 80021ac:	08006c70 	.word	0x08006c70
 80021b0:	20000a01 	.word	0x20000a01

080021b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b8:	f000 fcb2 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021bc:	f000 f81e 	bl	80021fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c0:	f000 f9a0 	bl	8002504 <MX_GPIO_Init>
  MX_DMA_Init();
 80021c4:	f000 f97e 	bl	80024c4 <MX_DMA_Init>
  MX_DAC_Init();
 80021c8:	f000 f886 	bl	80022d8 <MX_DAC_Init>
  MX_TIM2_Init();
 80021cc:	f000 f8ae 	bl	800232c <MX_TIM2_Init>
  MX_TIM3_Init();
 80021d0:	f000 f8f8 	bl	80023c4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80021d4:	f000 f944 	bl	8002460 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <main+0x40>)
 80021da:	f002 fb5e 	bl	800489a <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <main+0x44>)
 80021e0:	f002 fbaa 	bl	8004938 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 80021e4:	f000 fa6e 	bl	80026c4 <uart_gpio_init>

	initProgram(false);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff fc43 	bl	8001a74 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 80021ee:	f7fe fa53 	bl	8000698 <tx_rx>
 80021f2:	e7fc      	b.n	80021ee <main+0x3a>
 80021f4:	20004288 	.word	0x20004288
 80021f8:	200031d0 	.word	0x200031d0

080021fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b094      	sub	sp, #80	; 0x50
 8002200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	2234      	movs	r2, #52	; 0x34
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fed7 	bl	8005fbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <SystemClock_Config+0xd4>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <SystemClock_Config+0xd4>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <SystemClock_Config+0xd4>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800223c:	2300      	movs	r3, #0
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <SystemClock_Config+0xd8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002248:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <SystemClock_Config+0xd8>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <SystemClock_Config+0xd8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002266:	2302      	movs	r3, #2
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002270:	2304      	movs	r3, #4
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002274:	235a      	movs	r3, #90	; 0x5a
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002278:	2302      	movs	r3, #2
 800227a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800227c:	2302      	movs	r3, #2
 800227e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002280:	2302      	movs	r3, #2
 8002282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4618      	mov	r0, r3
 800228a:	f002 f881 	bl	8004390 <HAL_RCC_OscConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002294:	f000 fa3e 	bl	8002714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002298:	230f      	movs	r3, #15
 800229a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229c:	2302      	movs	r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	2102      	movs	r1, #2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 fdb0 	bl	8003e1c <HAL_RCC_ClockConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80022c2:	f000 fa27 	bl	8002714 <Error_Handler>
  }
}
 80022c6:	bf00      	nop
 80022c8:	3750      	adds	r7, #80	; 0x50
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40007000 	.word	0x40007000

080022d8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80022de:	463b      	mov	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_DAC_Init+0x4c>)
 80022e8:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <MX_DAC_Init+0x50>)
 80022ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <MX_DAC_Init+0x4c>)
 80022ee:	f000 fdca 	bl	8002e86 <HAL_DAC_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80022f8:	f000 fa0c 	bl	8002714 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80022fc:	2324      	movs	r3, #36	; 0x24
 80022fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <MX_DAC_Init+0x4c>)
 800230c:	f000 feeb 	bl	80030e6 <HAL_DAC_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002316:	f000 f9fd 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20004274 	.word	0x20004274
 8002328:	40007400 	.word	0x40007400

0800232c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002340:	463b      	mov	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <MX_TIM2_Init+0x94>)
 800234a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800234e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <MX_TIM2_Init+0x94>)
 8002352:	2208      	movs	r2, #8
 8002354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <MX_TIM2_Init+0x94>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <MX_TIM2_Init+0x94>)
 800235e:	2263      	movs	r2, #99	; 0x63
 8002360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <MX_TIM2_Init+0x94>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <MX_TIM2_Init+0x94>)
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800236e:	4814      	ldr	r0, [pc, #80]	; (80023c0 <MX_TIM2_Init+0x94>)
 8002370:	f002 fa68 	bl	8004844 <HAL_TIM_Base_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800237a:	f000 f9cb 	bl	8002714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	4619      	mov	r1, r3
 800238a:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_TIM2_Init+0x94>)
 800238c:	f002 fc00 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002396:	f000 f9bd 	bl	8002714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800239a:	2320      	movs	r3, #32
 800239c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023a2:	463b      	mov	r3, r7
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <MX_TIM2_Init+0x94>)
 80023a8:	f002 fe0c 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80023b2:	f000 f9af 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20004288 	.word	0x20004288

080023c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d8:	463b      	mov	r3, r7
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <MX_TIM3_Init+0x94>)
 80023e2:	4a1e      	ldr	r2, [pc, #120]	; (800245c <MX_TIM3_Init+0x98>)
 80023e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <MX_TIM3_Init+0x94>)
 80023e8:	2259      	movs	r2, #89	; 0x59
 80023ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_TIM3_Init+0x94>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <MX_TIM3_Init+0x94>)
 80023f4:	f240 3241 	movw	r2, #833	; 0x341
 80023f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <MX_TIM3_Init+0x94>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <MX_TIM3_Init+0x94>)
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_TIM3_Init+0x94>)
 8002408:	f002 fa1c 	bl	8004844 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002412:	f000 f97f 	bl	8002714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	4619      	mov	r1, r3
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <MX_TIM3_Init+0x94>)
 8002424:	f002 fbb4 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800242e:	f000 f971 	bl	8002714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_TIM3_Init+0x94>)
 8002440:	f002 fdc0 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800244a:	f000 f963 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200031d0 	.word	0x200031d0
 800245c:	40000400 	.word	0x40000400

08002460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <MX_USART2_UART_Init+0x60>)
 8002468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002496:	4809      	ldr	r0, [pc, #36]	; (80024bc <MX_USART2_UART_Init+0x5c>)
 8002498:	f002 fe24 	bl	80050e4 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f000 f937 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2026      	movs	r0, #38	; 0x26
 80024ac:	f000 fca7 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024b0:	2026      	movs	r0, #38	; 0x26
 80024b2:	f000 fcc0 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200042c8 	.word	0x200042c8
 80024c0:	40004400 	.word	0x40004400

080024c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_DMA_Init+0x3c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <MX_DMA_Init+0x3c>)
 80024d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_DMA_Init+0x3c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2010      	movs	r0, #16
 80024ec:	f000 fc87 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024f0:	2010      	movs	r0, #16
 80024f2:	f000 fca0 	bl	8002e36 <HAL_NVIC_EnableIRQ>

}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b45      	ldr	r3, [pc, #276]	; (8002634 <MX_GPIO_Init+0x130>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a44      	ldr	r2, [pc, #272]	; (8002634 <MX_GPIO_Init+0x130>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b42      	ldr	r3, [pc, #264]	; (8002634 <MX_GPIO_Init+0x130>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <MX_GPIO_Init+0x130>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a3d      	ldr	r2, [pc, #244]	; (8002634 <MX_GPIO_Init+0x130>)
 8002540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <MX_GPIO_Init+0x130>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <MX_GPIO_Init+0x130>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a36      	ldr	r2, [pc, #216]	; (8002634 <MX_GPIO_Init+0x130>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <MX_GPIO_Init+0x130>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <MX_GPIO_Init+0x130>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <MX_GPIO_Init+0x130>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <MX_GPIO_Init+0x130>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002590:	4829      	ldr	r0, [pc, #164]	; (8002638 <MX_GPIO_Init+0x134>)
 8002592:	f001 fc11 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	2110      	movs	r1, #16
 800259a:	4828      	ldr	r0, [pc, #160]	; (800263c <MX_GPIO_Init+0x138>)
 800259c:	f001 fc0c 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <MX_GPIO_Init+0x13c>)
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	4821      	ldr	r0, [pc, #132]	; (800263c <MX_GPIO_Init+0x138>)
 80025b6:	f001 fa6d 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ba:	2301      	movs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <MX_GPIO_Init+0x140>)
 80025c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	481a      	ldr	r0, [pc, #104]	; (8002638 <MX_GPIO_Init+0x134>)
 80025ce:	f001 fa61 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80025d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d8:	2301      	movs	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	4813      	ldr	r0, [pc, #76]	; (8002638 <MX_GPIO_Init+0x134>)
 80025ec:	f001 fa52 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 80025f0:	2310      	movs	r3, #16
 80025f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <MX_GPIO_Init+0x138>)
 8002608:	f001 fa44 	bl	8003a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	2006      	movs	r0, #6
 8002612:	f000 fbf4 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002616:	2006      	movs	r0, #6
 8002618:	f000 fc0d 	bl	8002e36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	2028      	movs	r0, #40	; 0x28
 8002622:	f000 fbec 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002626:	2028      	movs	r0, #40	; 0x28
 8002628:	f000 fc05 	bl	8002e36 <HAL_NVIC_EnableIRQ>

}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000
 800263c:	40020800 	.word	0x40020800
 8002640:	10210000 	.word	0x10210000
 8002644:	10110000 	.word	0x10110000

08002648 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d102      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8002658:	f7ff faba 	bl	8001bd0 <Tim3IT>
	else
		__NOP();
}
 800265c:	e000      	b.n	8002660 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 800265e:	bf00      	nop
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200031d0 	.word	0x200031d0

0800266c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 800267c:	f7ff fac8 	bl	8001c10 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002686:	d103      	bne.n	8002690 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_GPIO_EXTI_Callback+0x30>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 800268e:	e000      	b.n	8002692 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8002690:	bf00      	nop
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000a01 	.word	0x20000a01

080026a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_UART_RxCpltCallback+0x20>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 80026b2:	f7fe fdcd 	bl	8001250 <UART2_EXCEPTION_CALLBACK>
  }
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40004400 	.word	0x40004400

080026c4 <uart_gpio_init>:

void uart_gpio_init()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <uart_gpio_init+0x48>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <uart_gpio_init+0x48>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <uart_gpio_init+0x48>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80026e6:	230c      	movs	r3, #12
 80026e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f6:	2307      	movs	r3, #7
 80026f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	4804      	ldr	r0, [pc, #16]	; (8002710 <uart_gpio_init+0x4c>)
 8002700:	f001 f9c8 	bl	8003a94 <HAL_GPIO_Init>
}
 8002704:	bf00      	nop
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_MspInit>:
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_MspInit+0x4c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_MspInit+0x4c>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_MspInit+0x4c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_MspInit+0x4c>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_MspInit+0x4c>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_MspInit+0x4c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2007      	movs	r0, #7
 8002764:	f000 fb40 	bl	8002de8 <HAL_NVIC_SetPriorityGrouping>
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800

08002774 <HAL_DAC_MspInit>:
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <HAL_DAC_MspInit+0xdc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d158      	bne.n	8002848 <HAL_DAC_MspInit+0xd4>
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_DAC_MspInit+0xe0>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <HAL_DAC_MspInit+0xe0>)
 80027a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_DAC_MspInit+0xe0>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_DAC_MspInit+0xe0>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a26      	ldr	r2, [pc, #152]	; (8002854 <HAL_DAC_MspInit+0xe0>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_DAC_MspInit+0xe0>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2310      	movs	r3, #16
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	2303      	movs	r3, #3
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	481d      	ldr	r0, [pc, #116]	; (8002858 <HAL_DAC_MspInit+0xe4>)
 80027e2:	f001 f957 	bl	8003a94 <HAL_GPIO_Init>
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_DAC_MspInit+0xe8>)
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_DAC_MspInit+0xec>)
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_DAC_MspInit+0xe8>)
 80027ee:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_DAC_MspInit+0xe8>)
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_DAC_MspInit+0xe8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_DAC_MspInit+0xe8>)
 8002802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002806:	611a      	str	r2, [r3, #16]
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_DAC_MspInit+0xe8>)
 800280a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800280e:	615a      	str	r2, [r3, #20]
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_DAC_MspInit+0xe8>)
 8002812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002816:	619a      	str	r2, [r3, #24]
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_DAC_MspInit+0xe8>)
 800281a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281e:	61da      	str	r2, [r3, #28]
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_DAC_MspInit+0xe8>)
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <HAL_DAC_MspInit+0xe8>)
 8002828:	2200      	movs	r2, #0
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
 800282c:	480b      	ldr	r0, [pc, #44]	; (800285c <HAL_DAC_MspInit+0xe8>)
 800282e:	f000 fd31 	bl	8003294 <HAL_DMA_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_DAC_MspInit+0xc8>
 8002838:	f7ff ff6c 	bl	8002714 <Error_Handler>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_DAC_MspInit+0xe8>)
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	4a06      	ldr	r2, [pc, #24]	; (800285c <HAL_DAC_MspInit+0xe8>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6393      	str	r3, [r2, #56]	; 0x38
 8002848:	bf00      	nop
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40007400 	.word	0x40007400
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000
 800285c:	20003210 	.word	0x20003210
 8002860:	40026088 	.word	0x40026088

08002864 <HAL_TIM_Base_MspInit>:
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_Base_MspInit+0x30>
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	e01a      	b.n	80028ca <HAL_TIM_Base_MspInit+0x66>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_TIM_Base_MspInit+0x74>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d115      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x66>
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	201d      	movs	r0, #29
 80028c0:	f000 fa9d 	bl	8002dfe <HAL_NVIC_SetPriority>
 80028c4:	201d      	movs	r0, #29
 80028c6:	f000 fab6 	bl	8002e36 <HAL_NVIC_EnableIRQ>
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40000400 	.word	0x40000400

080028dc <HAL_UART_MspInit>:
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_UART_MspInit+0x94>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d133      	bne.n	8002966 <HAL_UART_MspInit+0x8a>
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_UART_MspInit+0x98>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_UART_MspInit+0x98>)
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_UART_MspInit+0x98>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_UART_MspInit+0x98>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a14      	ldr	r2, [pc, #80]	; (8002974 <HAL_UART_MspInit+0x98>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_UART_MspInit+0x98>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	230c      	movs	r3, #12
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	2302      	movs	r3, #2
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	2303      	movs	r3, #3
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	2307      	movs	r3, #7
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	4809      	ldr	r0, [pc, #36]	; (8002978 <HAL_UART_MspInit+0x9c>)
 8002952:	f001 f89f 	bl	8003a94 <HAL_GPIO_Init>
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2026      	movs	r0, #38	; 0x26
 800295c:	f000 fa4f 	bl	8002dfe <HAL_NVIC_SetPriority>
 8002960:	2026      	movs	r0, #38	; 0x26
 8002962:	f000 fa68 	bl	8002e36 <HAL_NVIC_EnableIRQ>
 8002966:	bf00      	nop
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40004400 	.word	0x40004400
 8002974:	40023800 	.word	0x40023800
 8002978:	40020000 	.word	0x40020000

0800297c <NMI_Handler>:
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HardFault_Handler>:
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
 800298e:	e7fe      	b.n	800298e <HardFault_Handler+0x4>

08002990 <MemManage_Handler>:
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
 8002994:	e7fe      	b.n	8002994 <MemManage_Handler+0x4>

08002996 <BusFault_Handler>:
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
 800299a:	e7fe      	b.n	800299a <BusFault_Handler+0x4>

0800299c <UsageFault_Handler>:
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
 80029a0:	e7fe      	b.n	80029a0 <UsageFault_Handler+0x4>

080029a2 <SVC_Handler>:
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DebugMon_Handler>:
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <PendSV_Handler>:
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <SysTick_Handler>:
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f000 f8f8 	bl	8002bc4 <HAL_IncTick>
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <EXTI0_IRQHandler>:
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
 80029dc:	2001      	movs	r0, #1
 80029de:	f001 fa05 	bl	8003dec <HAL_GPIO_EXTI_IRQHandler>
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <DMA1_Stream5_IRQHandler>:
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <DMA1_Stream5_IRQHandler+0x10>)
 80029ee:	f000 fde9 	bl	80035c4 <HAL_DMA_IRQHandler>
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20003210 	.word	0x20003210

080029fc <TIM3_IRQHandler>:
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <TIM3_IRQHandler+0x10>)
 8002a02:	f001 ffbd 	bl	8004980 <HAL_TIM_IRQHandler>
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200031d0 	.word	0x200031d0

08002a10 <USART2_IRQHandler>:
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <USART2_IRQHandler+0x10>)
 8002a16:	f002 fca1 	bl	800535c <HAL_UART_IRQHandler>
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200042c8 	.word	0x200042c8

08002a24 <EXTI15_10_IRQHandler>:
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a2c:	f001 f9de 	bl	8003dec <HAL_GPIO_EXTI_IRQHandler>
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_sbrk>:
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
 8002a64:	f003 fa76 	bl	8005f54 <__errno>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20020000 	.word	0x20020000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	20000a0c 	.word	0x20000a0c
 8002a9c:	20005310 	.word	0x20005310

08002aa0 <SystemInit>:
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <SystemInit+0x28>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <SystemInit+0x28>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SystemInit+0x28>)
 8002ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <Reset_Handler>:
 8002acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b04 <LoopFillZerobss+0x14>
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	e003      	b.n	8002adc <LoopCopyDataInit>

08002ad4 <CopyDataInit>:
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <LoopFillZerobss+0x18>)
 8002ad6:	585b      	ldr	r3, [r3, r1]
 8002ad8:	5043      	str	r3, [r0, r1]
 8002ada:	3104      	adds	r1, #4

08002adc <LoopCopyDataInit>:
 8002adc:	480b      	ldr	r0, [pc, #44]	; (8002b0c <LoopFillZerobss+0x1c>)
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <LoopFillZerobss+0x20>)
 8002ae0:	1842      	adds	r2, r0, r1
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3f6      	bcc.n	8002ad4 <CopyDataInit>
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <LoopFillZerobss+0x24>)
 8002ae8:	e002      	b.n	8002af0 <LoopFillZerobss>

08002aea <FillZerobss>:
 8002aea:	2300      	movs	r3, #0
 8002aec:	f842 3b04 	str.w	r3, [r2], #4

08002af0 <LoopFillZerobss>:
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <LoopFillZerobss+0x28>)
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3f9      	bcc.n	8002aea <FillZerobss>
 8002af6:	f7ff ffd3 	bl	8002aa0 <SystemInit>
 8002afa:	f003 fa31 	bl	8005f60 <__libc_init_array>
 8002afe:	f7ff fb59 	bl	80021b4 <main>
 8002b02:	4770      	bx	lr
 8002b04:	20020000 	.word	0x20020000
 8002b08:	08006cf0 	.word	0x08006cf0
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	200009e0 	.word	0x200009e0
 8002b14:	200009e0 	.word	0x200009e0
 8002b18:	20005310 	.word	0x20005310

08002b1c <ADC_IRQHandler>:
 8002b1c:	e7fe      	b.n	8002b1c <ADC_IRQHandler>
	...

08002b20 <HAL_Init>:
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_Init+0x40>)
 8002b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_Init+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_Init+0x40>)
 8002b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_Init+0x40>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 f94d 	bl	8002de8 <HAL_NVIC_SetPriorityGrouping>
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 f808 	bl	8002b64 <HAL_InitTick>
 8002b54:	f7ff fde6 	bl	8002724 <HAL_MspInit>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023c00 	.word	0x40023c00

08002b64 <HAL_InitTick>:
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_InitTick+0x54>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_InitTick+0x58>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
 8002b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f973 	bl	8002e6e <HAL_SYSTICK_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_InitTick+0x2e>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00e      	b.n	8002bb0 <HAL_InitTick+0x4c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b0f      	cmp	r3, #15
 8002b96:	d80a      	bhi.n	8002bae <HAL_InitTick+0x4a>
 8002b98:	2200      	movs	r2, #0
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f000 f92d 	bl	8002dfe <HAL_NVIC_SetPriority>
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_InitTick+0x5c>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	2300      	movs	r3, #0
 8002bac:	e000      	b.n	8002bb0 <HAL_InitTick+0x4c>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000970 	.word	0x20000970
 8002bbc:	20000978 	.word	0x20000978
 8002bc0:	20000974 	.word	0x20000974

08002bc4 <HAL_IncTick>:
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_IncTick+0x20>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000978 	.word	0x20000978
 8002be8:	20005308 	.word	0x20005308

08002bec <HAL_GetTick>:
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GetTick+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20005308 	.word	0x20005308

08002c04 <__NVIC_SetPriorityGrouping>:
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	021a      	lsls	r2, r3, #8
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	60d3      	str	r3, [r2, #12]
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_GetPriorityGrouping>:
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <__NVIC_GetPriorityGrouping+0x18>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_EnableIRQ>:
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0b      	blt.n	8002c92 <__NVIC_EnableIRQ+0x2a>
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <__NVIC_EnableIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_DisableIRQ>:
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db10      	blt.n	8002cd8 <__NVIC_DisableIRQ+0x34>
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <__NVIC_DisableIRQ+0x40>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	3320      	adds	r3, #32
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100

08002ce8 <__NVIC_SetPriority>:
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	db0a      	blt.n	8002d12 <__NVIC_SetPriority+0x2a>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	490c      	ldr	r1, [pc, #48]	; (8002d34 <__NVIC_SetPriority+0x4c>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	0112      	lsls	r2, r2, #4
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002d10:	e00a      	b.n	8002d28 <__NVIC_SetPriority+0x40>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <__NVIC_SetPriority+0x50>)
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	3b04      	subs	r3, #4
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	440b      	add	r3, r1
 8002d26:	761a      	strb	r2, [r3, #24]
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000e100 	.word	0xe000e100
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <NVIC_EncodePriority>:
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f1c3 0307 	rsb	r3, r3, #7
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	bf28      	it	cs
 8002d5a:	2304      	movcs	r3, #4
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d902      	bls.n	8002d6c <NVIC_EncodePriority+0x30>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3b03      	subs	r3, #3
 8002d6a:	e000      	b.n	8002d6e <NVIC_EncodePriority+0x32>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	401a      	ands	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	409a      	lsls	r2, r3
 8002d84:	f04f 31ff 	mov.w	r1, #4294967295
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43d9      	mvns	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	400b      	ands	r3, r1
 8002d94:	4313      	orrs	r3, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	3724      	adds	r7, #36	; 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <SysTick_Config>:
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db4:	d301      	bcc.n	8002dba <SysTick_Config+0x16>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00f      	b.n	8002dda <SysTick_Config+0x36>
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <SysTick_Config+0x40>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	6053      	str	r3, [r2, #4]
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f7ff ff8e 	bl	8002ce8 <__NVIC_SetPriority>
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <SysTick_Config+0x40>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <SysTick_Config+0x40>)
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	e000e010 	.word	0xe000e010

08002de8 <HAL_NVIC_SetPriorityGrouping>:
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ff07 	bl	8002c04 <__NVIC_SetPriorityGrouping>
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_SetPriority>:
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	f7ff ff1c 	bl	8002c4c <__NVIC_GetPriorityGrouping>
 8002e14:	6178      	str	r0, [r7, #20]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f7ff ff8e 	bl	8002d3c <NVIC_EncodePriority>
 8002e20:	4602      	mov	r2, r0
 8002e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff5d 	bl	8002ce8 <__NVIC_SetPriority>
 8002e2e:	bf00      	nop
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_EnableIRQ>:
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	71fb      	strb	r3, [r7, #7]
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff0f 	bl	8002c68 <__NVIC_EnableIRQ>
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_DisableIRQ>:
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71fb      	strb	r3, [r7, #7]
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff1f 	bl	8002ca4 <__NVIC_DisableIRQ>
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SYSTICK_Config>:
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ff94 	bl	8002da4 <SysTick_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_DAC_Init>:
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_DAC_Init+0x12>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e014      	b.n	8002ec2 <HAL_DAC_Init+0x3c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	791b      	ldrb	r3, [r3, #4]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_DAC_Init+0x28>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	715a      	strb	r2, [r3, #5]
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fc63 	bl	8002774 <HAL_DAC_MspInit>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	711a      	strb	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	711a      	strb	r2, [r3, #4]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_DAC_Start_DMA>:
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	795b      	ldrb	r3, [r3, #5]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_DAC_Start_DMA+0x1e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e08e      	b.n	8003008 <HAL_DAC_Start_DMA+0x13c>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	715a      	strb	r2, [r3, #5]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	711a      	strb	r2, [r3, #4]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d12a      	bne.n	8002f52 <HAL_DAC_Start_DMA+0x86>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a43      	ldr	r2, [pc, #268]	; (8003010 <HAL_DAC_Start_DMA+0x144>)
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_DAC_Start_DMA+0x148>)
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a41      	ldr	r2, [pc, #260]	; (8003018 <HAL_DAC_Start_DMA+0x14c>)
 8002f12:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d009      	beq.n	8002f3e <HAL_DAC_Start_DMA+0x72>
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d00c      	beq.n	8002f48 <HAL_DAC_Start_DMA+0x7c>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d000      	beq.n	8002f34 <HAL_DAC_Start_DMA+0x68>
 8002f32:	e039      	b.n	8002fa8 <HAL_DAC_Start_DMA+0xdc>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e034      	b.n	8002fa8 <HAL_DAC_Start_DMA+0xdc>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e02f      	b.n	8002fa8 <HAL_DAC_Start_DMA+0xdc>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e02a      	b.n	8002fa8 <HAL_DAC_Start_DMA+0xdc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4a31      	ldr	r2, [pc, #196]	; (800301c <HAL_DAC_Start_DMA+0x150>)
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a30      	ldr	r2, [pc, #192]	; (8003020 <HAL_DAC_Start_DMA+0x154>)
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <HAL_DAC_Start_DMA+0x158>)
 8002f68:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d009      	beq.n	8002f94 <HAL_DAC_Start_DMA+0xc8>
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d00c      	beq.n	8002f9e <HAL_DAC_Start_DMA+0xd2>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d000      	beq.n	8002f8a <HAL_DAC_Start_DMA+0xbe>
 8002f88:	e00e      	b.n	8002fa8 <HAL_DAC_Start_DMA+0xdc>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3314      	adds	r3, #20
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e009      	b.n	8002fa8 <HAL_DAC_Start_DMA+0xdc>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3318      	adds	r3, #24
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e004      	b.n	8002fa8 <HAL_DAC_Start_DMA+0xdc>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	331c      	adds	r3, #28
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	bf00      	nop
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_DAC_Start_DMA+0x102>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6898      	ldr	r0, [r3, #8]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	f000 fa12 	bl	80033f0 <HAL_DMA_Start_IT>
 8002fcc:	e00e      	b.n	8002fec <HAL_DAC_Start_DMA+0x120>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68d8      	ldr	r0, [r3, #12]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	f000 fa02 	bl	80033f0 <HAL_DMA_Start_IT>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	715a      	strb	r2, [r3, #5]
 8003006:	2300      	movs	r3, #0
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	08003181 	.word	0x08003181
 8003014:	080031a3 	.word	0x080031a3
 8003018:	080031bf 	.word	0x080031bf
 800301c:	08003229 	.word	0x08003229
 8003020:	0800324b 	.word	0x0800324b
 8003024:	08003267 	.word	0x08003267

08003028 <HAL_DAC_Stop_DMA>:
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	2201      	movs	r2, #1
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	400a      	ands	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_DAC_Stop_DMA+0x56>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa14 	bl	80034a0 <HAL_DMA_Abort>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e006      	b.n	800308c <HAL_DAC_Stop_DMA+0x64>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fa0c 	bl	80034a0 <HAL_DMA_Abort>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_DAC_Stop_DMA+0x72>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	711a      	strb	r2, [r3, #4]
 8003098:	e002      	b.n	80030a0 <HAL_DAC_Stop_DMA+0x78>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	711a      	strb	r2, [r3, #4]
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_DAC_ConvCpltCallbackCh1>:
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_DAC_ErrorCallbackCh1>:
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_DAC_ConfigChannel>:
 80030e6:	b480      	push	{r7}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	795b      	ldrb	r3, [r3, #5]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_DAC_ConfigChannel+0x20>
 8003102:	2302      	movs	r3, #2
 8003104:	e036      	b.n	8003174 <HAL_DAC_ConfigChannel+0x8e>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	715a      	strb	r2, [r3, #5]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2202      	movs	r2, #2
 8003110:	711a      	strb	r2, [r3, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	22c0      	movs	r2, #192	; 0xc0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43da      	mvns	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	400a      	ands	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	711a      	strb	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	715a      	strb	r2, [r3, #5]
 8003172:	2300      	movs	r3, #0
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <DAC_DMAConvCpltCh1>:
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff ff8b 	bl	80030aa <HAL_DAC_ConvCpltCallbackCh1>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	711a      	strb	r2, [r3, #4]
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <DAC_DMAHalfConvCpltCh1>:
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f7ff ff84 	bl	80030be <HAL_DAC_ConvHalfCpltCallbackCh1>
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <DAC_DMAErrorCh1>:
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f043 0204 	orr.w	r2, r3, #4
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	611a      	str	r2, [r3, #16]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff ff7a 	bl	80030d2 <HAL_DAC_ErrorCallbackCh1>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	711a      	strb	r2, [r3, #4]
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_DACEx_ConvCpltCallbackCh2>:
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DACEx_ErrorCallbackCh2>:
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <DAC_DMAConvCpltCh2>:
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ffd8 	bl	80031ec <HAL_DACEx_ConvCpltCallbackCh2>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	711a      	strb	r2, [r3, #4]
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <DAC_DMAHalfConvCpltCh2>:
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff ffd1 	bl	8003200 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <DAC_DMAErrorCh2>:
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f043 0204 	orr.w	r2, r3, #4
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff ffc7 	bl	8003214 <HAL_DACEx_ErrorCallbackCh2>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	711a      	strb	r2, [r3, #4]
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_DMA_Init>:
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	f7ff fca4 	bl	8002bec <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Init+0x1c>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e099      	b.n	80033e4 <HAL_DMA_Init+0x150>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Init+0x5e>
 80032d2:	f7ff fc8b 	bl	8002bec <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d908      	bls.n	80032f2 <HAL_DMA_Init+0x5e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032ee:	2303      	movs	r3, #3
 80032f0:	e078      	b.n	80033e4 <HAL_DMA_Init+0x150>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e8      	bne.n	80032d2 <HAL_DMA_Init+0x3e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_DMA_Init+0x158>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4313      	orrs	r3, r2
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_DMA_Init+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b04      	cmp	r3, #4
 8003384:	d117      	bne.n	80033b6 <HAL_DMA_Init+0x122>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Init+0x122>
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fb01 	bl	80039a0 <DMA_CheckFifoParam>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_DMA_Init+0x122>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80033b2:	2301      	movs	r3, #1
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_Init+0x150>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	615a      	str	r2, [r3, #20]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fab8 	bl	8003934 <DMA_CalcBaseAndBitshift>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	223f      	movs	r2, #63	; 0x3f
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80033e2:	2300      	movs	r3, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	f010803f 	.word	0xf010803f

080033f0 <HAL_DMA_Start_IT>:
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Start_IT+0x26>
 8003412:	2302      	movs	r3, #2
 8003414:	e040      	b.n	8003498 <HAL_DMA_Start_IT+0xa8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12f      	bne.n	800348a <HAL_DMA_Start_IT+0x9a>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa4a 	bl	80038d8 <DMA_SetConfig>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0216 	orr.w	r2, r2, #22
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Start_IT+0x88>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e005      	b.n	8003496 <HAL_DMA_Start_IT+0xa6>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003492:	2302      	movs	r3, #2
 8003494:	75fb      	strb	r3, [r7, #23]
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort>:
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	f7ff fb9d 	bl	8002bec <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Abort+0x32>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80034ce:	2301      	movs	r3, #1
 80034d0:	e052      	b.n	8003578 <HAL_DMA_Abort+0xd8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0216 	bic.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	615a      	str	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_DMA_Abort+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_Abort+0x72>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e013      	b.n	800354c <HAL_DMA_Abort+0xac>
 8003524:	f7ff fb62 	bl	8002bec <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b05      	cmp	r3, #5
 8003530:	d90c      	bls.n	800354c <HAL_DMA_Abort+0xac>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003548:	2303      	movs	r3, #3
 800354a:	e015      	b.n	8003578 <HAL_DMA_Abort+0xd8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e4      	bne.n	8003524 <HAL_DMA_Abort+0x84>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003576:	2300      	movs	r3, #0
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_Abort_IT>:
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d004      	beq.n	800359e <HAL_DMA_Abort_IT+0x1e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
 800359a:	2301      	movs	r3, #1
 800359c:	e00c      	b.n	80035b8 <HAL_DMA_Abort_IT+0x38>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_DMA_IRQHandler>:
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	4b92      	ldr	r3, [pc, #584]	; (800381c <HAL_DMA_IRQHandler+0x258>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a92      	ldr	r2, [pc, #584]	; (8003820 <HAL_DMA_IRQHandler+0x25c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2208      	movs	r2, #8
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2201      	movs	r2, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2204      	movs	r2, #4
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2204      	movs	r2, #4
 800368a:	409a      	lsls	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2210      	movs	r2, #16
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d043      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03c      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2210      	movs	r2, #16
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_IRQHandler+0x142>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x130>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d024      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
 80036f2:	e01f      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e016      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_DMA_IRQHandler+0x160>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0208 	bic.w	r2, r2, #8
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2220      	movs	r2, #32
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808e 	beq.w	8003862 <HAL_DMA_IRQHandler+0x29e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8086 	beq.w	8003862 <HAL_DMA_IRQHandler+0x29e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	2220      	movs	r2, #32
 800375c:	409a      	lsls	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b05      	cmp	r3, #5
 800376c:	d136      	bne.n	80037dc <HAL_DMA_IRQHandler+0x218>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0216 	bic.w	r2, r2, #22
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378c:	615a      	str	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_DMA_IRQHandler+0x1da>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_IRQHandler+0x1ea>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	223f      	movs	r2, #63	; 0x3f
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07d      	beq.n	80038ce <HAL_DMA_IRQHandler+0x30a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
 80037da:	e078      	b.n	80038ce <HAL_DMA_IRQHandler+0x30a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01c      	beq.n	8003824 <HAL_DMA_IRQHandler+0x260>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <HAL_DMA_IRQHandler+0x246>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d030      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e02b      	b.n	8003862 <HAL_DMA_IRQHandler+0x29e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d027      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
 800381a:	e022      	b.n	8003862 <HAL_DMA_IRQHandler+0x29e>
 800381c:	20000970 	.word	0x20000970
 8003820:	1b4e81b5 	.word	0x1b4e81b5
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_DMA_IRQHandler+0x28e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0210 	bic.w	r2, r2, #16
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d032      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <HAL_DMA_IRQHandler+0x2f8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2205      	movs	r2, #5
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	429a      	cmp	r2, r3
 8003898:	d307      	bcc.n	80038aa <HAL_DMA_IRQHandler+0x2e6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_DMA_IRQHandler+0x2ca>
 80038a8:	e000      	b.n	80038ac <HAL_DMA_IRQHandler+0x2e8>
 80038aa:	bf00      	nop
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e000      	b.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop

080038d8 <DMA_SetConfig>:
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d108      	bne.n	8003918 <DMA_SetConfig+0x40>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	e007      	b.n	8003928 <DMA_SetConfig+0x50>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <DMA_CalcBaseAndBitshift>:
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	3b10      	subs	r3, #16
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <DMA_CalcBaseAndBitshift+0x64>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <DMA_CalcBaseAndBitshift+0x68>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d909      	bls.n	8003976 <DMA_CalcBaseAndBitshift+0x42>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	1d1a      	adds	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	659a      	str	r2, [r3, #88]	; 0x58
 8003974:	e007      	b.n	8003986 <DMA_CalcBaseAndBitshift+0x52>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	aaaaaaab 	.word	0xaaaaaaab
 800399c:	08006ca4 	.word	0x08006ca4

080039a0 <DMA_CheckFifoParam>:
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11f      	bne.n	80039fa <DMA_CheckFifoParam+0x5a>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d855      	bhi.n	8003a6c <DMA_CheckFifoParam+0xcc>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <DMA_CheckFifoParam+0x28>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039eb 	.word	0x080039eb
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	08003a6d 	.word	0x08003a6d
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d045      	beq.n	8003a70 <DMA_CheckFifoParam+0xd0>
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e042      	b.n	8003a70 <DMA_CheckFifoParam+0xd0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f2:	d13f      	bne.n	8003a74 <DMA_CheckFifoParam+0xd4>
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e03c      	b.n	8003a74 <DMA_CheckFifoParam+0xd4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	d121      	bne.n	8003a48 <DMA_CheckFifoParam+0xa8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d836      	bhi.n	8003a78 <DMA_CheckFifoParam+0xd8>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <DMA_CheckFifoParam+0x70>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a27 	.word	0x08003a27
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e02f      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d024      	beq.n	8003a7c <DMA_CheckFifoParam+0xdc>
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e021      	b.n	8003a7c <DMA_CheckFifoParam+0xdc>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a40:	d11e      	bne.n	8003a80 <DMA_CheckFifoParam+0xe0>
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e01b      	b.n	8003a80 <DMA_CheckFifoParam+0xe0>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d902      	bls.n	8003a54 <DMA_CheckFifoParam+0xb4>
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d003      	beq.n	8003a5a <DMA_CheckFifoParam+0xba>
 8003a52:	e018      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e015      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00e      	beq.n	8003a84 <DMA_CheckFifoParam+0xe4>
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e00b      	b.n	8003a84 <DMA_CheckFifoParam+0xe4>
 8003a6c:	bf00      	nop
 8003a6e:	e00a      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a70:	bf00      	nop
 8003a72:	e008      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a74:	bf00      	nop
 8003a76:	e006      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a78:	bf00      	nop
 8003a7a:	e004      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a7c:	bf00      	nop
 8003a7e:	e002      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a80:	bf00      	nop
 8003a82:	e000      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
 8003a84:	bf00      	nop
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_GPIO_Init>:
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e165      	b.n	8003d7c <HAL_GPIO_Init+0x2e8>
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	f040 8154 	bne.w	8003d76 <HAL_GPIO_Init+0x2e2>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d00b      	beq.n	8003aee <HAL_GPIO_Init+0x5a>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d007      	beq.n	8003aee <HAL_GPIO_Init+0x5a>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b11      	cmp	r3, #17
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x5a>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b12      	cmp	r3, #18
 8003aec:	d130      	bne.n	8003b50 <HAL_GPIO_Init+0xbc>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	2201      	movs	r2, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 0201 	and.w	r2, r3, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0xfc>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b12      	cmp	r3, #18
 8003b8e:	d123      	bne.n	8003bd8 <HAL_GPIO_Init+0x144>
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	08da      	lsrs	r2, r3, #3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3208      	adds	r2, #8
 8003b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	220f      	movs	r2, #15
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	08da      	lsrs	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3208      	adds	r2, #8
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0203 	and.w	r2, r3, #3
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80ae 	beq.w	8003d76 <HAL_GPIO_Init+0x2e2>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <HAL_GPIO_Init+0x2fc>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	4a5b      	ldr	r2, [pc, #364]	; (8003d90 <HAL_GPIO_Init+0x2fc>)
 8003c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c28:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2a:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_GPIO_Init+0x2fc>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a57      	ldr	r2, [pc, #348]	; (8003d94 <HAL_GPIO_Init+0x300>)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a4e      	ldr	r2, [pc, #312]	; (8003d98 <HAL_GPIO_Init+0x304>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d025      	beq.n	8003cae <HAL_GPIO_Init+0x21a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a4d      	ldr	r2, [pc, #308]	; (8003d9c <HAL_GPIO_Init+0x308>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01f      	beq.n	8003caa <HAL_GPIO_Init+0x216>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a4c      	ldr	r2, [pc, #304]	; (8003da0 <HAL_GPIO_Init+0x30c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d019      	beq.n	8003ca6 <HAL_GPIO_Init+0x212>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a4b      	ldr	r2, [pc, #300]	; (8003da4 <HAL_GPIO_Init+0x310>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_GPIO_Init+0x20e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4a      	ldr	r2, [pc, #296]	; (8003da8 <HAL_GPIO_Init+0x314>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00d      	beq.n	8003c9e <HAL_GPIO_Init+0x20a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a49      	ldr	r2, [pc, #292]	; (8003dac <HAL_GPIO_Init+0x318>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d007      	beq.n	8003c9a <HAL_GPIO_Init+0x206>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a48      	ldr	r2, [pc, #288]	; (8003db0 <HAL_GPIO_Init+0x31c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_GPIO_Init+0x202>
 8003c92:	2306      	movs	r3, #6
 8003c94:	e00c      	b.n	8003cb0 <HAL_GPIO_Init+0x21c>
 8003c96:	2307      	movs	r3, #7
 8003c98:	e00a      	b.n	8003cb0 <HAL_GPIO_Init+0x21c>
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	e008      	b.n	8003cb0 <HAL_GPIO_Init+0x21c>
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	e006      	b.n	8003cb0 <HAL_GPIO_Init+0x21c>
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e004      	b.n	8003cb0 <HAL_GPIO_Init+0x21c>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e002      	b.n	8003cb0 <HAL_GPIO_Init+0x21c>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_GPIO_Init+0x21c>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f002 0203 	and.w	r2, r2, #3
 8003cb6:	0092      	lsls	r2, r2, #2
 8003cb8:	4093      	lsls	r3, r2
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_GPIO_Init+0x300>)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003cce:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x25e>
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	4a30      	ldr	r2, [pc, #192]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x288>
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	6053      	str	r3, [r2, #4]
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x2b2>
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x2dc>
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	60d3      	str	r3, [r2, #12]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	f67f ae96 	bls.w	8003ab0 <HAL_GPIO_Init+0x1c>
 8003d84:	bf00      	nop
 8003d86:	3724      	adds	r7, #36	; 0x24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40013800 	.word	0x40013800
 8003d98:	40020000 	.word	0x40020000
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	40020800 	.word	0x40020800
 8003da4:	40020c00 	.word	0x40020c00
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40021400 	.word	0x40021400
 8003db0:	40021800 	.word	0x40021800
 8003db4:	40013c00 	.word	0x40013c00

08003db8 <HAL_GPIO_WritePin>:
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	807b      	strh	r3, [r7, #2]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	707b      	strb	r3, [r7, #1]
 8003dc8:	787b      	ldrb	r3, [r7, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_WritePin+0x1e>
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	619a      	str	r2, [r3, #24]
 8003dd4:	e003      	b.n	8003dde <HAL_GPIO_WritePin+0x26>
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	041a      	lsls	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	619a      	str	r2, [r3, #24]
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_GPIO_EXTI_IRQHandler>:
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d006      	beq.n	8003e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8003e02:	4a05      	ldr	r2, [pc, #20]	; (8003e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	6153      	str	r3, [r2, #20]
 8003e08:	88fb      	ldrh	r3, [r7, #6]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fc2e 	bl	800266c <HAL_GPIO_EXTI_Callback>
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40013c00 	.word	0x40013c00

08003e1c <HAL_RCC_ClockConfig>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0cc      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
 8003e30:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d90c      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b8      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x8a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x60>
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7a:	6093      	str	r3, [r2, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x78>
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a52      	ldr	r2, [pc, #328]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e92:	6093      	str	r3, [r2, #8]
 8003e94:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	494d      	ldr	r1, [pc, #308]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d044      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x120>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xae>
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d119      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_ClockConfig+0xbe>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xce>
 8003eda:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e06f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
 8003eea:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e067      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4934      	ldr	r1, [pc, #208]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
 8003f0c:	f7fe fe6e 	bl	8002bec <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
 8003f14:	f7fe fe6a 	bl	8002bec <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
 8003f2a:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0xf8>
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20c      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x148>
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x148>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e032      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x166>
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4916      	ldr	r1, [pc, #88]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x186>
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490e      	ldr	r1, [pc, #56]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
 8003fa2:	f000 f855 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fdce 	bl	8002b64 <HAL_InitTick>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	08006c8c 	.word	0x08006c8c
 8003fe0:	20000970 	.word	0x20000970
 8003fe4:	20000974 	.word	0x20000974

08003fe8 <HAL_RCC_GetHCLKFreq>:
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000970 	.word	0x20000970

08004000 <HAL_RCC_GetPCLK1Freq>:
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4601      	mov	r1, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4a03      	ldr	r2, [pc, #12]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004016:	5cd3      	ldrb	r3, [r2, r3]
 8004018:	fa21 f303 	lsr.w	r3, r1, r3
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	08006c9c 	.word	0x08006c9c

08004028 <HAL_RCC_GetPCLK2Freq>:
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
 800402c:	f7ff ffdc 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004030:	4601      	mov	r1, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0b5b      	lsrs	r3, r3, #13
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4a03      	ldr	r2, [pc, #12]	; (800404c <HAL_RCC_GetPCLK2Freq+0x24>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	fa21 f303 	lsr.w	r3, r1, r3
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	08006c9c 	.word	0x08006c9c

08004050 <HAL_RCC_GetSysClockFreq>:
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	4bc6      	ldr	r3, [pc, #792]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b0c      	cmp	r3, #12
 8004074:	f200 817e 	bhi.w	8004374 <HAL_RCC_GetSysClockFreq+0x324>
 8004078:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_RCC_GetSysClockFreq+0x30>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	080040b5 	.word	0x080040b5
 8004084:	08004375 	.word	0x08004375
 8004088:	08004375 	.word	0x08004375
 800408c:	08004375 	.word	0x08004375
 8004090:	080040bb 	.word	0x080040bb
 8004094:	08004375 	.word	0x08004375
 8004098:	08004375 	.word	0x08004375
 800409c:	08004375 	.word	0x08004375
 80040a0:	080040c1 	.word	0x080040c1
 80040a4:	08004375 	.word	0x08004375
 80040a8:	08004375 	.word	0x08004375
 80040ac:	08004375 	.word	0x08004375
 80040b0:	0800421d 	.word	0x0800421d
 80040b4:	4bb4      	ldr	r3, [pc, #720]	; (8004388 <HAL_RCC_GetSysClockFreq+0x338>)
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	e15f      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x32a>
 80040ba:	4bb4      	ldr	r3, [pc, #720]	; (800438c <HAL_RCC_GetSysClockFreq+0x33c>)
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	e15c      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x32a>
 80040c0:	4bb0      	ldr	r3, [pc, #704]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4bae      	ldr	r3, [pc, #696]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d04a      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x11c>
 80040d6:	4bab      	ldr	r3, [pc, #684]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	f04f 0400 	mov.w	r4, #0
 80040e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	ea03 0501 	and.w	r5, r3, r1
 80040ec:	ea04 0602 	and.w	r6, r4, r2
 80040f0:	4629      	mov	r1, r5
 80040f2:	4632      	mov	r2, r6
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	f04f 0400 	mov.w	r4, #0
 80040fc:	0154      	lsls	r4, r2, #5
 80040fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004102:	014b      	lsls	r3, r1, #5
 8004104:	4619      	mov	r1, r3
 8004106:	4622      	mov	r2, r4
 8004108:	1b49      	subs	r1, r1, r5
 800410a:	eb62 0206 	sbc.w	r2, r2, r6
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	f04f 0400 	mov.w	r4, #0
 8004116:	0194      	lsls	r4, r2, #6
 8004118:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800411c:	018b      	lsls	r3, r1, #6
 800411e:	1a5b      	subs	r3, r3, r1
 8004120:	eb64 0402 	sbc.w	r4, r4, r2
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	00e2      	lsls	r2, r4, #3
 800412e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004132:	00d9      	lsls	r1, r3, #3
 8004134:	460b      	mov	r3, r1
 8004136:	4614      	mov	r4, r2
 8004138:	195b      	adds	r3, r3, r5
 800413a:	eb44 0406 	adc.w	r4, r4, r6
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	0262      	lsls	r2, r4, #9
 8004148:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800414c:	0259      	lsls	r1, r3, #9
 800414e:	460b      	mov	r3, r1
 8004150:	4614      	mov	r4, r2
 8004152:	4618      	mov	r0, r3
 8004154:	4621      	mov	r1, r4
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f04f 0400 	mov.w	r4, #0
 800415c:	461a      	mov	r2, r3
 800415e:	4623      	mov	r3, r4
 8004160:	f7fc f8ae 	bl	80002c0 <__aeabi_uldivmod>
 8004164:	4603      	mov	r3, r0
 8004166:	460c      	mov	r4, r1
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e049      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x1b0>
 800416c:	4b85      	ldr	r3, [pc, #532]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	099b      	lsrs	r3, r3, #6
 8004172:	f04f 0400 	mov.w	r4, #0
 8004176:	f240 11ff 	movw	r1, #511	; 0x1ff
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	ea03 0501 	and.w	r5, r3, r1
 8004182:	ea04 0602 	and.w	r6, r4, r2
 8004186:	4629      	mov	r1, r5
 8004188:	4632      	mov	r2, r6
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	f04f 0400 	mov.w	r4, #0
 8004192:	0154      	lsls	r4, r2, #5
 8004194:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004198:	014b      	lsls	r3, r1, #5
 800419a:	4619      	mov	r1, r3
 800419c:	4622      	mov	r2, r4
 800419e:	1b49      	subs	r1, r1, r5
 80041a0:	eb62 0206 	sbc.w	r2, r2, r6
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	f04f 0400 	mov.w	r4, #0
 80041ac:	0194      	lsls	r4, r2, #6
 80041ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041b2:	018b      	lsls	r3, r1, #6
 80041b4:	1a5b      	subs	r3, r3, r1
 80041b6:	eb64 0402 	sbc.w	r4, r4, r2
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	00e2      	lsls	r2, r4, #3
 80041c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041c8:	00d9      	lsls	r1, r3, #3
 80041ca:	460b      	mov	r3, r1
 80041cc:	4614      	mov	r4, r2
 80041ce:	195b      	adds	r3, r3, r5
 80041d0:	eb44 0406 	adc.w	r4, r4, r6
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	02a2      	lsls	r2, r4, #10
 80041de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041e2:	0299      	lsls	r1, r3, #10
 80041e4:	460b      	mov	r3, r1
 80041e6:	4614      	mov	r4, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	4621      	mov	r1, r4
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	461a      	mov	r2, r3
 80041f4:	4623      	mov	r3, r4
 80041f6:	f7fc f863 	bl	80002c0 <__aeabi_uldivmod>
 80041fa:	4603      	mov	r3, r0
 80041fc:	460c      	mov	r4, r1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	4b60      	ldr	r3, [pc, #384]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	3301      	adds	r3, #1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e0ae      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x32a>
 800421c:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	4b57      	ldr	r3, [pc, #348]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04a      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x278>
 8004232:	4b54      	ldr	r3, [pc, #336]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	ea03 0501 	and.w	r5, r3, r1
 8004248:	ea04 0602 	and.w	r6, r4, r2
 800424c:	4629      	mov	r1, r5
 800424e:	4632      	mov	r2, r6
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	f04f 0400 	mov.w	r4, #0
 8004258:	0154      	lsls	r4, r2, #5
 800425a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800425e:	014b      	lsls	r3, r1, #5
 8004260:	4619      	mov	r1, r3
 8004262:	4622      	mov	r2, r4
 8004264:	1b49      	subs	r1, r1, r5
 8004266:	eb62 0206 	sbc.w	r2, r2, r6
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	f04f 0400 	mov.w	r4, #0
 8004272:	0194      	lsls	r4, r2, #6
 8004274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004278:	018b      	lsls	r3, r1, #6
 800427a:	1a5b      	subs	r3, r3, r1
 800427c:	eb64 0402 	sbc.w	r4, r4, r2
 8004280:	f04f 0100 	mov.w	r1, #0
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	00e2      	lsls	r2, r4, #3
 800428a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800428e:	00d9      	lsls	r1, r3, #3
 8004290:	460b      	mov	r3, r1
 8004292:	4614      	mov	r4, r2
 8004294:	195b      	adds	r3, r3, r5
 8004296:	eb44 0406 	adc.w	r4, r4, r6
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	0262      	lsls	r2, r4, #9
 80042a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042a8:	0259      	lsls	r1, r3, #9
 80042aa:	460b      	mov	r3, r1
 80042ac:	4614      	mov	r4, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	4621      	mov	r1, r4
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f04f 0400 	mov.w	r4, #0
 80042b8:	461a      	mov	r2, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	f7fc f800 	bl	80002c0 <__aeabi_uldivmod>
 80042c0:	4603      	mov	r3, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e049      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x30c>
 80042c8:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	f04f 0400 	mov.w	r4, #0
 80042d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	ea03 0501 	and.w	r5, r3, r1
 80042de:	ea04 0602 	and.w	r6, r4, r2
 80042e2:	4629      	mov	r1, r5
 80042e4:	4632      	mov	r2, r6
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	f04f 0400 	mov.w	r4, #0
 80042ee:	0154      	lsls	r4, r2, #5
 80042f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042f4:	014b      	lsls	r3, r1, #5
 80042f6:	4619      	mov	r1, r3
 80042f8:	4622      	mov	r2, r4
 80042fa:	1b49      	subs	r1, r1, r5
 80042fc:	eb62 0206 	sbc.w	r2, r2, r6
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	f04f 0400 	mov.w	r4, #0
 8004308:	0194      	lsls	r4, r2, #6
 800430a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800430e:	018b      	lsls	r3, r1, #6
 8004310:	1a5b      	subs	r3, r3, r1
 8004312:	eb64 0402 	sbc.w	r4, r4, r2
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004324:	00d9      	lsls	r1, r3, #3
 8004326:	460b      	mov	r3, r1
 8004328:	4614      	mov	r4, r2
 800432a:	195b      	adds	r3, r3, r5
 800432c:	eb44 0406 	adc.w	r4, r4, r6
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	02a2      	lsls	r2, r4, #10
 800433a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800433e:	0299      	lsls	r1, r3, #10
 8004340:	460b      	mov	r3, r1
 8004342:	4614      	mov	r4, r2
 8004344:	4618      	mov	r0, r3
 8004346:	4621      	mov	r1, r4
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f04f 0400 	mov.w	r4, #0
 800434e:	461a      	mov	r2, r3
 8004350:	4623      	mov	r3, r4
 8004352:	f7fb ffb5 	bl	80002c0 <__aeabi_uldivmod>
 8004356:	4603      	mov	r3, r0
 8004358:	460c      	mov	r4, r1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCC_GetSysClockFreq+0x334>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	0f1b      	lsrs	r3, r3, #28
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e002      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x32a>
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <HAL_RCC_GetSysClockFreq+0x338>)
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	bf00      	nop
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4618      	mov	r0, r3
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	00f42400 	.word	0x00f42400
 800438c:	007a1200 	.word	0x007a1200

08004390 <HAL_RCC_OscConfig>:
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8083 	beq.w	80044b0 <HAL_RCC_OscConfig+0x120>
 80043aa:	4b95      	ldr	r3, [pc, #596]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d019      	beq.n	80043ea <HAL_RCC_OscConfig+0x5a>
 80043b6:	4b92      	ldr	r3, [pc, #584]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d106      	bne.n	80043d0 <HAL_RCC_OscConfig+0x40>
 80043c2:	4b8f      	ldr	r3, [pc, #572]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ce:	d00c      	beq.n	80043ea <HAL_RCC_OscConfig+0x5a>
 80043d0:	4b8b      	ldr	r3, [pc, #556]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d112      	bne.n	8004402 <HAL_RCC_OscConfig+0x72>
 80043dc:	4b88      	ldr	r3, [pc, #544]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e8:	d10b      	bne.n	8004402 <HAL_RCC_OscConfig+0x72>
 80043ea:	4b85      	ldr	r3, [pc, #532]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d05b      	beq.n	80044ae <HAL_RCC_OscConfig+0x11e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d157      	bne.n	80044ae <HAL_RCC_OscConfig+0x11e>
 80043fe:	2301      	movs	r3, #1
 8004400:	e216      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440a:	d106      	bne.n	800441a <HAL_RCC_OscConfig+0x8a>
 800440c:	4b7c      	ldr	r3, [pc, #496]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a7b      	ldr	r2, [pc, #492]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e01d      	b.n	8004456 <HAL_RCC_OscConfig+0xc6>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004422:	d10c      	bne.n	800443e <HAL_RCC_OscConfig+0xae>
 8004424:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a75      	ldr	r2, [pc, #468]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800442a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b73      	ldr	r3, [pc, #460]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a72      	ldr	r2, [pc, #456]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e00b      	b.n	8004456 <HAL_RCC_OscConfig+0xc6>
 800443e:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a6f      	ldr	r2, [pc, #444]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6c      	ldr	r2, [pc, #432]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d013      	beq.n	8004486 <HAL_RCC_OscConfig+0xf6>
 800445e:	f7fe fbc5 	bl	8002bec <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0xe8>
 8004466:	f7fe fbc1 	bl	8002bec <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0xe8>
 8004474:	2303      	movs	r3, #3
 8004476:	e1db      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0xd6>
 8004484:	e014      	b.n	80044b0 <HAL_RCC_OscConfig+0x120>
 8004486:	f7fe fbb1 	bl	8002bec <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x110>
 800448e:	f7fe fbad 	bl	8002bec <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b64      	cmp	r3, #100	; 0x64
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x110>
 800449c:	2303      	movs	r3, #3
 800449e:	e1c7      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 80044a0:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0xfe>
 80044ac:	e000      	b.n	80044b0 <HAL_RCC_OscConfig+0x120>
 80044ae:	bf00      	nop
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d06f      	beq.n	800459c <HAL_RCC_OscConfig+0x20c>
 80044bc:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d017      	beq.n	80044f8 <HAL_RCC_OscConfig+0x168>
 80044c8:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d105      	bne.n	80044e0 <HAL_RCC_OscConfig+0x150>
 80044d4:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <HAL_RCC_OscConfig+0x168>
 80044e0:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	d11c      	bne.n	8004526 <HAL_RCC_OscConfig+0x196>
 80044ec:	4b44      	ldr	r3, [pc, #272]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d116      	bne.n	8004526 <HAL_RCC_OscConfig+0x196>
 80044f8:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_OscConfig+0x180>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0x180>
 800450c:	2301      	movs	r3, #1
 800450e:	e18f      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4938      	ldr	r1, [pc, #224]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	e03a      	b.n	800459c <HAL_RCC_OscConfig+0x20c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_RCC_OscConfig+0x1e0>
 800452e:	4b35      	ldr	r3, [pc, #212]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f7fe fb5a 	bl	8002bec <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x1be>
 800453c:	f7fe fb56 	bl	8002bec <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x1be>
 800454a:	2303      	movs	r3, #3
 800454c:	e170      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x1ac>
 800455a:	4b29      	ldr	r3, [pc, #164]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4925      	ldr	r1, [pc, #148]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
 800456e:	e015      	b.n	800459c <HAL_RCC_OscConfig+0x20c>
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	f7fe fb39 	bl	8002bec <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x200>
 800457e:	f7fe fb35 	bl	8002bec <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x200>
 800458c:	2303      	movs	r3, #3
 800458e:	e14f      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <HAL_RCC_OscConfig+0x1ee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d037      	beq.n	8004618 <HAL_RCC_OscConfig+0x288>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d016      	beq.n	80045de <HAL_RCC_OscConfig+0x24e>
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <HAL_RCC_OscConfig+0x278>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	f7fe fb19 	bl	8002bec <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x240>
 80045be:	f7fe fb15 	bl	8002bec <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x240>
 80045cc:	2303      	movs	r3, #3
 80045ce:	e12f      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x22e>
 80045dc:	e01c      	b.n	8004618 <HAL_RCC_OscConfig+0x288>
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <HAL_RCC_OscConfig+0x278>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f7fe fb02 	bl	8002bec <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]
 80045ea:	e00f      	b.n	800460c <HAL_RCC_OscConfig+0x27c>
 80045ec:	f7fe fafe 	bl	8002bec <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d908      	bls.n	800460c <HAL_RCC_OscConfig+0x27c>
 80045fa:	2303      	movs	r3, #3
 80045fc:	e118      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	42470000 	.word	0x42470000
 8004608:	42470e80 	.word	0x42470e80
 800460c:	4b8a      	ldr	r3, [pc, #552]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e9      	bne.n	80045ec <HAL_RCC_OscConfig+0x25c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8097 	beq.w	8004754 <HAL_RCC_OscConfig+0x3c4>
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]
 800462a:	4b83      	ldr	r3, [pc, #524]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_RCC_OscConfig+0x2c6>
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	4b7f      	ldr	r3, [pc, #508]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a7e      	ldr	r2, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
 8004656:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCC_OscConfig+0x304>
 8004662:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a75      	ldr	r2, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	f7fe fabd 	bl	8002bec <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x2f8>
 8004676:	f7fe fab9 	bl	8002bec <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x2f8>
 8004684:	2303      	movs	r3, #3
 8004686:	e0d3      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 8004688:	4b6c      	ldr	r3, [pc, #432]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x2e6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x31a>
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	e01c      	b.n	80046e4 <HAL_RCC_OscConfig+0x354>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x33c>
 80046b2:	4b61      	ldr	r3, [pc, #388]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a60      	ldr	r2, [pc, #384]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
 80046be:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a5d      	ldr	r2, [pc, #372]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0x354>
 80046cc:	4b5a      	ldr	r3, [pc, #360]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a59      	ldr	r2, [pc, #356]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	4b57      	ldr	r3, [pc, #348]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a56      	ldr	r2, [pc, #344]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_RCC_OscConfig+0x388>
 80046ec:	f7fe fa7e 	bl	8002bec <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x37a>
 80046f4:	f7fe fa7a 	bl	8002bec <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x37a>
 8004706:	2303      	movs	r3, #3
 8004708:	e092      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 800470a:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ee      	beq.n	80046f4 <HAL_RCC_OscConfig+0x364>
 8004716:	e014      	b.n	8004742 <HAL_RCC_OscConfig+0x3b2>
 8004718:	f7fe fa68 	bl	8002bec <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]
 800471e:	e00a      	b.n	8004736 <HAL_RCC_OscConfig+0x3a6>
 8004720:	f7fe fa64 	bl	8002bec <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3a6>
 8004732:	2303      	movs	r3, #3
 8004734:	e07c      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ee      	bne.n	8004720 <HAL_RCC_OscConfig+0x390>
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCC_OscConfig+0x3c4>
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004752:	6413      	str	r3, [r2, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d068      	beq.n	800482e <HAL_RCC_OscConfig+0x49e>
 800475c:	4b36      	ldr	r3, [pc, #216]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b08      	cmp	r3, #8
 8004766:	d060      	beq.n	800482a <HAL_RCC_OscConfig+0x49a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d145      	bne.n	80047fc <HAL_RCC_OscConfig+0x46c>
 8004770:	4b33      	ldr	r3, [pc, #204]	; (8004840 <HAL_RCC_OscConfig+0x4b0>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f7fe fa39 	bl	8002bec <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x400>
 800477e:	f7fe fa35 	bl	8002bec <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x400>
 800478c:	2303      	movs	r3, #3
 800478e:	e04f      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 8004790:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x3ee>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	019b      	lsls	r3, r3, #6
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	3b01      	subs	r3, #1
 80047b6:	041b      	lsls	r3, r3, #16
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	061b      	lsls	r3, r3, #24
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	071b      	lsls	r3, r3, #28
 80047c8:	491b      	ldr	r1, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <HAL_RCC_OscConfig+0x4b0>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f7fe fa0a 	bl	8002bec <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x45e>
 80047dc:	f7fe fa06 	bl	8002bec <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x45e>
 80047ea:	2303      	movs	r3, #3
 80047ec:	e020      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x44c>
 80047fa:	e018      	b.n	800482e <HAL_RCC_OscConfig+0x49e>
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_RCC_OscConfig+0x4b0>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	f7fe f9f3 	bl	8002bec <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x48c>
 800480a:	f7fe f9ef 	bl	8002bec <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x48c>
 8004818:	2303      	movs	r3, #3
 800481a:	e009      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_OscConfig+0x4a8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x47a>
 8004828:	e001      	b.n	800482e <HAL_RCC_OscConfig+0x49e>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_RCC_OscConfig+0x4a0>
 800482e:	2300      	movs	r3, #0
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
 8004840:	42470060 	.word	0x42470060

08004844 <HAL_TIM_Base_Init>:
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_TIM_Base_Init+0x12>
 8004852:	2301      	movs	r3, #1
 8004854:	e01d      	b.n	8004892 <HAL_TIM_Base_Init+0x4e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_TIM_Base_Init+0x2c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fffa 	bl	8002864 <HAL_TIM_Base_MspInit>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 fa64 	bl	8004d50 <TIM_Base_SetConfig>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004890:	2300      	movs	r3, #0
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_TIM_Base_Start>:
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d007      	beq.n	80048cc <HAL_TIM_Base_Start+0x32>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048d4:	2300      	movs	r3, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_Base_Stop>:
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_TIM_Base_Stop+0x40>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	f240 4344 	movw	r3, #1092	; 0x444
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <HAL_TIM_Base_Stop+0x40>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800492a:	2300      	movs	r3, #0
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_Base_Start_IT>:
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	60da      	str	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b06      	cmp	r3, #6
 8004960:	d007      	beq.n	8004972 <HAL_TIM_Base_Start_IT+0x3a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIM_IRQHandler>:
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x4a>
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f9a5 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x56>
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f997 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f9a8 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f97b 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f96d 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f97e 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0208 	mvn.w	r2, #8
 8004a54:	611a      	str	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	771a      	strb	r2, [r3, #28]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0xf2>
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f951 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xfe>
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f943 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f954 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0210 	mvn.w	r2, #16
 8004aa8:	611a      	str	r2, [r3, #16]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2208      	movs	r2, #8
 8004aae:	771a      	strb	r2, [r3, #28]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x146>
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f927 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x152>
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f919 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f92a 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0201 	mvn.w	r2, #1
 8004afc:	611a      	str	r2, [r3, #16]
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fda2 	bl	8002648 <HAL_TIM_PeriodElapsedCallback>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b28:	611a      	str	r2, [r3, #16]
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fad0 	bl	80050d0 <HAL_TIMEx_BreakCallback>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b54:	611a      	str	r2, [r3, #16]
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8ef 	bl	8004d3a <HAL_TIM_TriggerCallback>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0220 	mvn.w	r2, #32
 8004b80:	611a      	str	r2, [r3, #16]
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa9a 	bl	80050bc <HAL_TIMEx_CommutCallback>
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_ConfigClockSource>:
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0a6      	b.n	8004cf6 <HAL_TIM_ConfigClockSource+0x166>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d067      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0x120>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d80b      	bhi.n	8004bfc <HAL_TIM_ConfigClockSource+0x6c>
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d073      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x140>
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d802      	bhi.n	8004bf2 <HAL_TIM_ConfigClockSource+0x62>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d06f      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x140>
 8004bf0:	e078      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d06c      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x140>
 8004bf6:	2b30      	cmp	r3, #48	; 0x30
 8004bf8:	d06a      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x140>
 8004bfa:	e073      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004bfc:	2b70      	cmp	r3, #112	; 0x70
 8004bfe:	d00d      	beq.n	8004c1c <HAL_TIM_ConfigClockSource+0x8c>
 8004c00:	2b70      	cmp	r3, #112	; 0x70
 8004c02:	d804      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x7e>
 8004c04:	2b50      	cmp	r3, #80	; 0x50
 8004c06:	d033      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0xe0>
 8004c08:	2b60      	cmp	r3, #96	; 0x60
 8004c0a:	d041      	beq.n	8004c90 <HAL_TIM_ConfigClockSource+0x100>
 8004c0c:	e06a      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	d066      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x152>
 8004c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c18:	d017      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xba>
 8004c1a:	e063      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6899      	ldr	r1, [r3, #8]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f000 f9aa 	bl	8004f84 <TIM_ETR_SetConfig>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	e04c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f000 f993 	bl	8004f84 <TIM_ETR_SetConfig>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c6c:	609a      	str	r2, [r3, #8]
 8004c6e:	e039      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f000 f907 	bl	8004e90 <TIM_TI1_ConfigInputStage>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2150      	movs	r1, #80	; 0x50
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f960 	bl	8004f4e <TIM_ITRx_SetConfig>
 8004c8e:	e029      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f000 f926 	bl	8004eee <TIM_TI2_ConfigInputStage>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2160      	movs	r1, #96	; 0x60
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f950 	bl	8004f4e <TIM_ITRx_SetConfig>
 8004cae:	e019      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f000 f8e7 	bl	8004e90 <TIM_TI1_ConfigInputStage>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2140      	movs	r1, #64	; 0x40
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 f940 	bl	8004f4e <TIM_ITRx_SetConfig>
 8004cce:	e009      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 f937 	bl	8004f4e <TIM_ITRx_SetConfig>
 8004ce0:	e000      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x154>
 8004ce2:	bf00      	nop
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_TIM_OC_DelayElapsedCallback>:
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_IC_CaptureCallback>:
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_TIM_TriggerCallback>:
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <TIM_Base_SetConfig>:
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d00f      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3d      	ldr	r2, [pc, #244]	; (8004e68 <TIM_Base_SetConfig+0x118>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <TIM_Base_SetConfig+0x11c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3b      	ldr	r2, [pc, #236]	; (8004e70 <TIM_Base_SetConfig+0x120>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d108      	bne.n	8004da2 <TIM_Base_SetConfig+0x52>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d027      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <TIM_Base_SetConfig+0x118>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d023      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <TIM_Base_SetConfig+0x11c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01f      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <TIM_Base_SetConfig+0x120>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d017      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	; (8004e78 <TIM_Base_SetConfig+0x128>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <TIM_Base_SetConfig+0x12c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00f      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <TIM_Base_SetConfig+0x130>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <TIM_Base_SetConfig+0x134>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <TIM_Base_SetConfig+0x138>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a23      	ldr	r2, [pc, #140]	; (8004e8c <TIM_Base_SetConfig+0x13c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <TIM_Base_SetConfig+0xc4>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0xf8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0x100>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40010400 	.word	0x40010400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800
 8004e84:	40001800 	.word	0x40001800
 8004e88:	40001c00 	.word	0x40001c00
 8004e8c:	40002000 	.word	0x40002000

08004e90 <TIM_TI1_ConfigInputStage>:
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 030a 	bic.w	r3, r3, #10
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	619a      	str	r2, [r3, #24]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_TI2_ConfigInputStage>:
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0210 	bic.w	r2, r3, #16
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	619a      	str	r2, [r3, #24]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	621a      	str	r2, [r3, #32]
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <TIM_ITRx_SetConfig>:
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f043 0307 	orr.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <TIM_ETR_SetConfig>:
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e05a      	b.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d022      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d01d      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005090:	2300      	movs	r3, #0
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40010400 	.word	0x40010400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40001800 	.word	0x40001800

080050bc <HAL_TIMEx_CommutCallback>:
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_BreakCallback>:
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_Init>:
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Init+0x12>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e03f      	b.n	8005176 <HAL_UART_Init+0x92>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_UART_Init+0x2c>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fd fbe6 	bl	80028dc <HAL_UART_MspInit>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005126:	60da      	str	r2, [r3, #12]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb97 	bl	800585c <UART_SetConfig>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513c:	611a      	str	r2, [r3, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514c:	615a      	str	r2, [r3, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005174:	2300      	movs	r3, #0
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_UART_Transmit>:
 800517e:	b580      	push	{r7, lr}
 8005180:	b088      	sub	sp, #32
 8005182:	af02      	add	r7, sp, #8
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b20      	cmp	r3, #32
 800519c:	f040 8083 	bne.w	80052a6 <HAL_UART_Transmit+0x128>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_Transmit+0x2e>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Transmit+0x32>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e07b      	b.n	80052a8 <HAL_UART_Transmit+0x12a>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_UART_Transmit+0x40>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e074      	b.n	80052a8 <HAL_UART_Transmit+0x12a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2221      	movs	r2, #33	; 0x21
 80051d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80051d4:	f7fd fd0a 	bl	8002bec <HAL_GetTick>
 80051d8:	6178      	str	r0, [r7, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	849a      	strh	r2, [r3, #36]	; 0x24
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	88fa      	ldrh	r2, [r7, #6]
 80051e4:	84da      	strh	r2, [r3, #38]	; 0x26
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80051ee:	e042      	b.n	8005276 <HAL_UART_Transmit+0xf8>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	84da      	strh	r2, [r3, #38]	; 0x26
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	d122      	bne.n	800524e <HAL_UART_Transmit+0xd0>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2200      	movs	r2, #0
 8005210:	2180      	movs	r1, #128	; 0x80
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f9b6 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <HAL_UART_Transmit+0xa4>
 800521e:	2303      	movs	r3, #3
 8005220:	e042      	b.n	80052a8 <HAL_UART_Transmit+0x12a>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_UART_Transmit+0xc8>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	3302      	adds	r3, #2
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	e017      	b.n	8005276 <HAL_UART_Transmit+0xf8>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	3301      	adds	r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	e013      	b.n	8005276 <HAL_UART_Transmit+0xf8>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f993 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_UART_Transmit+0xea>
 8005264:	2303      	movs	r3, #3
 8005266:	e01f      	b.n	80052a8 <HAL_UART_Transmit+0x12a>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	60ba      	str	r2, [r7, #8]
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1b7      	bne.n	80051f0 <HAL_UART_Transmit+0x72>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f97a 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_UART_Transmit+0x11c>
 8005296:	2303      	movs	r3, #3
 8005298:	e006      	b.n	80052a8 <HAL_UART_Transmit+0x12a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80052a2:	2300      	movs	r3, #0
 80052a4:	e000      	b.n	80052a8 <HAL_UART_Transmit+0x12a>
 80052a6:	2302      	movs	r3, #2
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_UART_Receive_IT>:
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d140      	bne.n	800534c <HAL_UART_Receive_IT+0x9c>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_UART_Receive_IT+0x26>
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Receive_IT+0x2a>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e039      	b.n	800534e <HAL_UART_Receive_IT+0x9e>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_UART_Receive_IT+0x38>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e032      	b.n	800534e <HAL_UART_Receive_IT+0x9e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	88fa      	ldrh	r2, [r7, #6]
 80052fa:	859a      	strh	r2, [r3, #44]	; 0x2c
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	63da      	str	r2, [r3, #60]	; 0x3c
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2222      	movs	r2, #34	; 0x22
 800530c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	615a      	str	r2, [r3, #20]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0220 	orr.w	r2, r2, #32
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_UART_Receive_IT+0x9e>
 800534c:	2302      	movs	r3, #2
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_UART_IRQHandler>:
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <HAL_UART_IRQHandler+0x52>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_UART_IRQHandler+0x52>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_UART_IRQHandler+0x52>
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9d6 	bl	8005758 <UART_Receive_IT>
 80053ac:	e0d1      	b.n	8005552 <HAL_UART_IRQHandler+0x1f6>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80b0 	beq.w	8005516 <HAL_UART_IRQHandler+0x1ba>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <HAL_UART_IRQHandler+0x70>
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 80a5 	beq.w	8005516 <HAL_UART_IRQHandler+0x1ba>
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_UART_IRQHandler+0x90>
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_UART_IRQHandler+0x90>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	f043 0201 	orr.w	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_UART_IRQHandler+0xb0>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_UART_IRQHandler+0xb0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005404:	f043 0202 	orr.w	r2, r3, #2
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	63da      	str	r2, [r3, #60]	; 0x3c
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_UART_IRQHandler+0xd0>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_UART_IRQHandler+0xd0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	f043 0204 	orr.w	r2, r3, #4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	63da      	str	r2, [r3, #60]	; 0x3c
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00f      	beq.n	8005456 <HAL_UART_IRQHandler+0xfa>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <HAL_UART_IRQHandler+0xee>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_UART_IRQHandler+0xfa>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	f043 0208 	orr.w	r2, r3, #8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	63da      	str	r2, [r3, #60]	; 0x3c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d078      	beq.n	8005550 <HAL_UART_IRQHandler+0x1f4>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HAL_UART_IRQHandler+0x11c>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_UART_IRQHandler+0x11c>
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f970 	bl	8005758 <UART_Receive_IT>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <HAL_UART_IRQHandler+0x144>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d031      	beq.n	8005504 <HAL_UART_IRQHandler+0x1a8>
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8b9 	bl	8005618 <UART_EndRxTransfer>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d123      	bne.n	80054fc <HAL_UART_IRQHandler+0x1a0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c2:	615a      	str	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d013      	beq.n	80054f4 <HAL_UART_IRQHandler+0x198>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	4a21      	ldr	r2, [pc, #132]	; (8005558 <HAL_UART_IRQHandler+0x1fc>)
 80054d2:	651a      	str	r2, [r3, #80]	; 0x50
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe f851 	bl	8003580 <HAL_DMA_Abort_IT>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d016      	beq.n	8005512 <HAL_UART_IRQHandler+0x1b6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ee:	4610      	mov	r0, r2
 80054f0:	4798      	blx	r3
 80054f2:	e00e      	b.n	8005512 <HAL_UART_IRQHandler+0x1b6>
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f83b 	bl	8005570 <HAL_UART_ErrorCallback>
 80054fa:	e00a      	b.n	8005512 <HAL_UART_IRQHandler+0x1b6>
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f837 	bl	8005570 <HAL_UART_ErrorCallback>
 8005502:	e006      	b.n	8005512 <HAL_UART_IRQHandler+0x1b6>
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f833 	bl	8005570 <HAL_UART_ErrorCallback>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005510:	e01e      	b.n	8005550 <HAL_UART_IRQHandler+0x1f4>
 8005512:	bf00      	nop
 8005514:	e01c      	b.n	8005550 <HAL_UART_IRQHandler+0x1f4>
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_UART_IRQHandler+0x1d6>
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_UART_IRQHandler+0x1d6>
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8a6 	bl	800567c <UART_Transmit_IT>
 8005530:	e00f      	b.n	8005552 <HAL_UART_IRQHandler+0x1f6>
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_UART_IRQHandler+0x1f6>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_IRQHandler+0x1f6>
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8ee 	bl	8005728 <UART_EndTransmit_IT>
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <HAL_UART_IRQHandler+0x1f6>
 8005550:	bf00      	nop
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08005655 	.word	0x08005655

0800555c <HAL_UART_TxCpltCallback>:
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UART_ErrorCallback>:
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_WaitOnFlagUntilTimeout>:
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	71fb      	strb	r3, [r7, #7]
 8005594:	e02c      	b.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x6c>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d028      	beq.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x6c>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055a4:	f7fd fb22 	bl	8002bec <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d21d      	bcs.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x6c>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	615a      	str	r2, [r3, #20]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80055ec:	2303      	movs	r3, #3
 80055ee:	e00f      	b.n	8005610 <UART_WaitOnFlagUntilTimeout+0x8c>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4013      	ands	r3, r2
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	429a      	cmp	r2, r3
 800560c:	d0c3      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0x12>
 800560e:	2300      	movs	r3, #0
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_EndRxTransfer>:
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	615a      	str	r2, [r3, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <UART_DMAAbortOnError>:
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	84da      	strh	r2, [r3, #38]	; 0x26
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff ff7e 	bl	8005570 <HAL_UART_ErrorCallback>
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <UART_Transmit_IT>:
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b21      	cmp	r3, #33	; 0x21
 800568e:	d144      	bne.n	800571a <UART_Transmit_IT+0x9e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d11a      	bne.n	80056d0 <UART_Transmit_IT+0x54>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ae:	605a      	str	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <UART_Transmit_IT+0x48>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]
 80056c2:	e00e      	b.n	80056e2 <UART_Transmit_IT+0x66>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]
 80056ce:	e008      	b.n	80056e2 <UART_Transmit_IT+0x66>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	1c59      	adds	r1, r3, #1
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6211      	str	r1, [r2, #32]
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4619      	mov	r1, r3
 80056f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10f      	bne.n	8005716 <UART_Transmit_IT+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <UART_Transmit_IT+0xa0>
 800571a:	2302      	movs	r3, #2
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <UART_EndTransmit_IT>:
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff07 	bl	800555c <HAL_UART_TxCpltCallback>
 800574e:	2300      	movs	r3, #0
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <UART_Receive_IT>:
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b22      	cmp	r3, #34	; 0x22
 800576a:	d171      	bne.n	8005850 <UART_Receive_IT+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d123      	bne.n	80057be <UART_Receive_IT+0x66>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10e      	bne.n	80057a2 <UART_Receive_IT+0x4a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	1c9a      	adds	r2, r3, #2
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28
 80057a0:	e029      	b.n	80057f6 <UART_Receive_IT+0x9e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28
 80057bc:	e01b      	b.n	80057f6 <UART_Receive_IT+0x9e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <UART_Receive_IT+0x84>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6858      	ldr	r0, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6291      	str	r1, [r2, #40]	; 0x28
 80057d6:	b2c2      	uxtb	r2, r0
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e00c      	b.n	80057f6 <UART_Receive_IT+0x9e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	1c58      	adds	r0, r3, #1
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	6288      	str	r0, [r1, #40]	; 0x28
 80057ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29b      	uxth	r3, r3
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4619      	mov	r1, r3
 8005804:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005806:	2b00      	cmp	r3, #0
 8005808:	d120      	bne.n	800584c <UART_Receive_IT+0xf4>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0220 	bic.w	r2, r2, #32
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	615a      	str	r2, [r3, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc ff2c 	bl	80026a0 <HAL_UART_RxCpltCallback>
 8005848:	2300      	movs	r3, #0
 800584a:	e002      	b.n	8005852 <UART_Receive_IT+0xfa>
 800584c:	2300      	movs	r3, #0
 800584e:	e000      	b.n	8005852 <UART_Receive_IT+0xfa>
 8005850:	2302      	movs	r3, #2
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <UART_SetConfig>:
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	611a      	str	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800589e:	f023 030c 	bic.w	r3, r3, #12
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	60d3      	str	r3, [r2, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	f040 818b 	bne.w	8005be4 <UART_SetConfig+0x388>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4ac1      	ldr	r2, [pc, #772]	; (8005bd8 <UART_SetConfig+0x37c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d005      	beq.n	80058e4 <UART_SetConfig+0x88>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4abf      	ldr	r2, [pc, #764]	; (8005bdc <UART_SetConfig+0x380>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f040 80bd 	bne.w	8005a5e <UART_SetConfig+0x202>
 80058e4:	f7fe fba0 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 80058e8:	60b8      	str	r0, [r7, #8]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	461d      	mov	r5, r3
 80058ee:	f04f 0600 	mov.w	r6, #0
 80058f2:	46a8      	mov	r8, r5
 80058f4:	46b1      	mov	r9, r6
 80058f6:	eb18 0308 	adds.w	r3, r8, r8
 80058fa:	eb49 0409 	adc.w	r4, r9, r9
 80058fe:	4698      	mov	r8, r3
 8005900:	46a1      	mov	r9, r4
 8005902:	eb18 0805 	adds.w	r8, r8, r5
 8005906:	eb49 0906 	adc.w	r9, r9, r6
 800590a:	f04f 0100 	mov.w	r1, #0
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005916:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800591a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800591e:	4688      	mov	r8, r1
 8005920:	4691      	mov	r9, r2
 8005922:	eb18 0005 	adds.w	r0, r8, r5
 8005926:	eb49 0106 	adc.w	r1, r9, r6
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	461d      	mov	r5, r3
 8005930:	f04f 0600 	mov.w	r6, #0
 8005934:	196b      	adds	r3, r5, r5
 8005936:	eb46 0406 	adc.w	r4, r6, r6
 800593a:	461a      	mov	r2, r3
 800593c:	4623      	mov	r3, r4
 800593e:	f7fa fcbf 	bl	80002c0 <__aeabi_uldivmod>
 8005942:	4603      	mov	r3, r0
 8005944:	460c      	mov	r4, r1
 8005946:	461a      	mov	r2, r3
 8005948:	4ba5      	ldr	r3, [pc, #660]	; (8005be0 <UART_SetConfig+0x384>)
 800594a:	fba3 2302 	umull	r2, r3, r3, r2
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	461d      	mov	r5, r3
 8005958:	f04f 0600 	mov.w	r6, #0
 800595c:	46a9      	mov	r9, r5
 800595e:	46b2      	mov	sl, r6
 8005960:	eb19 0309 	adds.w	r3, r9, r9
 8005964:	eb4a 040a 	adc.w	r4, sl, sl
 8005968:	4699      	mov	r9, r3
 800596a:	46a2      	mov	sl, r4
 800596c:	eb19 0905 	adds.w	r9, r9, r5
 8005970:	eb4a 0a06 	adc.w	sl, sl, r6
 8005974:	f04f 0100 	mov.w	r1, #0
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005988:	4689      	mov	r9, r1
 800598a:	4692      	mov	sl, r2
 800598c:	eb19 0005 	adds.w	r0, r9, r5
 8005990:	eb4a 0106 	adc.w	r1, sl, r6
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	461d      	mov	r5, r3
 800599a:	f04f 0600 	mov.w	r6, #0
 800599e:	196b      	adds	r3, r5, r5
 80059a0:	eb46 0406 	adc.w	r4, r6, r6
 80059a4:	461a      	mov	r2, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	f7fa fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80059ac:	4603      	mov	r3, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b8b      	ldr	r3, [pc, #556]	; (8005be0 <UART_SetConfig+0x384>)
 80059b4:	fba3 1302 	umull	r1, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	2164      	movs	r1, #100	; 0x64
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	3332      	adds	r3, #50	; 0x32
 80059c6:	4a86      	ldr	r2, [pc, #536]	; (8005be0 <UART_SetConfig+0x384>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059d4:	4498      	add	r8, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	461d      	mov	r5, r3
 80059da:	f04f 0600 	mov.w	r6, #0
 80059de:	46a9      	mov	r9, r5
 80059e0:	46b2      	mov	sl, r6
 80059e2:	eb19 0309 	adds.w	r3, r9, r9
 80059e6:	eb4a 040a 	adc.w	r4, sl, sl
 80059ea:	4699      	mov	r9, r3
 80059ec:	46a2      	mov	sl, r4
 80059ee:	eb19 0905 	adds.w	r9, r9, r5
 80059f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80059f6:	f04f 0100 	mov.w	r1, #0
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a0a:	4689      	mov	r9, r1
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	eb19 0005 	adds.w	r0, r9, r5
 8005a12:	eb4a 0106 	adc.w	r1, sl, r6
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	f04f 0600 	mov.w	r6, #0
 8005a20:	196b      	adds	r3, r5, r5
 8005a22:	eb46 0406 	adc.w	r4, r6, r6
 8005a26:	461a      	mov	r2, r3
 8005a28:	4623      	mov	r3, r4
 8005a2a:	f7fa fc49 	bl	80002c0 <__aeabi_uldivmod>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	461a      	mov	r2, r3
 8005a34:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <UART_SetConfig+0x384>)
 8005a36:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2164      	movs	r1, #100	; 0x64
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	3332      	adds	r3, #50	; 0x32
 8005a48:	4a65      	ldr	r2, [pc, #404]	; (8005be0 <UART_SetConfig+0x384>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f003 0207 	and.w	r2, r3, #7
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4442      	add	r2, r8
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	e26f      	b.n	8005f3e <UART_SetConfig+0x6e2>
 8005a5e:	f7fe facf 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8005a62:	60b8      	str	r0, [r7, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	461d      	mov	r5, r3
 8005a68:	f04f 0600 	mov.w	r6, #0
 8005a6c:	46a8      	mov	r8, r5
 8005a6e:	46b1      	mov	r9, r6
 8005a70:	eb18 0308 	adds.w	r3, r8, r8
 8005a74:	eb49 0409 	adc.w	r4, r9, r9
 8005a78:	4698      	mov	r8, r3
 8005a7a:	46a1      	mov	r9, r4
 8005a7c:	eb18 0805 	adds.w	r8, r8, r5
 8005a80:	eb49 0906 	adc.w	r9, r9, r6
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a98:	4688      	mov	r8, r1
 8005a9a:	4691      	mov	r9, r2
 8005a9c:	eb18 0005 	adds.w	r0, r8, r5
 8005aa0:	eb49 0106 	adc.w	r1, r9, r6
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	461d      	mov	r5, r3
 8005aaa:	f04f 0600 	mov.w	r6, #0
 8005aae:	196b      	adds	r3, r5, r5
 8005ab0:	eb46 0406 	adc.w	r4, r6, r6
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	f7fa fc02 	bl	80002c0 <__aeabi_uldivmod>
 8005abc:	4603      	mov	r3, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4b47      	ldr	r3, [pc, #284]	; (8005be0 <UART_SetConfig+0x384>)
 8005ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	461d      	mov	r5, r3
 8005ad2:	f04f 0600 	mov.w	r6, #0
 8005ad6:	46a9      	mov	r9, r5
 8005ad8:	46b2      	mov	sl, r6
 8005ada:	eb19 0309 	adds.w	r3, r9, r9
 8005ade:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	46a2      	mov	sl, r4
 8005ae6:	eb19 0905 	adds.w	r9, r9, r5
 8005aea:	eb4a 0a06 	adc.w	sl, sl, r6
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b02:	4689      	mov	r9, r1
 8005b04:	4692      	mov	sl, r2
 8005b06:	eb19 0005 	adds.w	r0, r9, r5
 8005b0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	461d      	mov	r5, r3
 8005b14:	f04f 0600 	mov.w	r6, #0
 8005b18:	196b      	adds	r3, r5, r5
 8005b1a:	eb46 0406 	adc.w	r4, r6, r6
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4623      	mov	r3, r4
 8005b22:	f7fa fbcd 	bl	80002c0 <__aeabi_uldivmod>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	; (8005be0 <UART_SetConfig+0x384>)
 8005b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2164      	movs	r1, #100	; 0x64
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	3332      	adds	r3, #50	; 0x32
 8005b40:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <UART_SetConfig+0x384>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b4e:	4498      	add	r8, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	461d      	mov	r5, r3
 8005b54:	f04f 0600 	mov.w	r6, #0
 8005b58:	46a9      	mov	r9, r5
 8005b5a:	46b2      	mov	sl, r6
 8005b5c:	eb19 0309 	adds.w	r3, r9, r9
 8005b60:	eb4a 040a 	adc.w	r4, sl, sl
 8005b64:	4699      	mov	r9, r3
 8005b66:	46a2      	mov	sl, r4
 8005b68:	eb19 0905 	adds.w	r9, r9, r5
 8005b6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b84:	4689      	mov	r9, r1
 8005b86:	4692      	mov	sl, r2
 8005b88:	eb19 0005 	adds.w	r0, r9, r5
 8005b8c:	eb4a 0106 	adc.w	r1, sl, r6
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	461d      	mov	r5, r3
 8005b96:	f04f 0600 	mov.w	r6, #0
 8005b9a:	196b      	adds	r3, r5, r5
 8005b9c:	eb46 0406 	adc.w	r4, r6, r6
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	f7fa fb8c 	bl	80002c0 <__aeabi_uldivmod>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	461a      	mov	r2, r3
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <UART_SetConfig+0x384>)
 8005bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	2164      	movs	r1, #100	; 0x64
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	3332      	adds	r3, #50	; 0x32
 8005bc2:	4a07      	ldr	r2, [pc, #28]	; (8005be0 <UART_SetConfig+0x384>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f003 0207 	and.w	r2, r3, #7
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4442      	add	r2, r8
 8005bd4:	609a      	str	r2, [r3, #8]
 8005bd6:	e1b2      	b.n	8005f3e <UART_SetConfig+0x6e2>
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40011400 	.word	0x40011400
 8005be0:	51eb851f 	.word	0x51eb851f
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4ad7      	ldr	r2, [pc, #860]	; (8005f48 <UART_SetConfig+0x6ec>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d005      	beq.n	8005bfa <UART_SetConfig+0x39e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4ad6      	ldr	r2, [pc, #856]	; (8005f4c <UART_SetConfig+0x6f0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f040 80d1 	bne.w	8005d9c <UART_SetConfig+0x540>
 8005bfa:	f7fe fa15 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8005bfe:	60b8      	str	r0, [r7, #8]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	469a      	mov	sl, r3
 8005c04:	f04f 0b00 	mov.w	fp, #0
 8005c08:	46d0      	mov	r8, sl
 8005c0a:	46d9      	mov	r9, fp
 8005c0c:	eb18 0308 	adds.w	r3, r8, r8
 8005c10:	eb49 0409 	adc.w	r4, r9, r9
 8005c14:	4698      	mov	r8, r3
 8005c16:	46a1      	mov	r9, r4
 8005c18:	eb18 080a 	adds.w	r8, r8, sl
 8005c1c:	eb49 090b 	adc.w	r9, r9, fp
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c34:	4688      	mov	r8, r1
 8005c36:	4691      	mov	r9, r2
 8005c38:	eb1a 0508 	adds.w	r5, sl, r8
 8005c3c:	eb4b 0609 	adc.w	r6, fp, r9
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4619      	mov	r1, r3
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	f04f 0400 	mov.w	r4, #0
 8005c52:	0094      	lsls	r4, r2, #2
 8005c54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c58:	008b      	lsls	r3, r1, #2
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	4631      	mov	r1, r6
 8005c62:	f7fa fb2d 	bl	80002c0 <__aeabi_uldivmod>
 8005c66:	4603      	mov	r3, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4bb8      	ldr	r3, [pc, #736]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	469b      	mov	fp, r3
 8005c7c:	f04f 0c00 	mov.w	ip, #0
 8005c80:	46d9      	mov	r9, fp
 8005c82:	46e2      	mov	sl, ip
 8005c84:	eb19 0309 	adds.w	r3, r9, r9
 8005c88:	eb4a 040a 	adc.w	r4, sl, sl
 8005c8c:	4699      	mov	r9, r3
 8005c8e:	46a2      	mov	sl, r4
 8005c90:	eb19 090b 	adds.w	r9, r9, fp
 8005c94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cac:	4689      	mov	r9, r1
 8005cae:	4692      	mov	sl, r2
 8005cb0:	eb1b 0509 	adds.w	r5, fp, r9
 8005cb4:	eb4c 060a 	adc.w	r6, ip, sl
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	0094      	lsls	r4, r2, #2
 8005ccc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cd0:	008b      	lsls	r3, r1, #2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4631      	mov	r1, r6
 8005cda:	f7fa faf1 	bl	80002c0 <__aeabi_uldivmod>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4b9a      	ldr	r3, [pc, #616]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	2164      	movs	r1, #100	; 0x64
 8005cee:	fb01 f303 	mul.w	r3, r1, r3
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	3332      	adds	r3, #50	; 0x32
 8005cf8:	4a95      	ldr	r2, [pc, #596]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d04:	4498      	add	r8, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	469b      	mov	fp, r3
 8005d0a:	f04f 0c00 	mov.w	ip, #0
 8005d0e:	46d9      	mov	r9, fp
 8005d10:	46e2      	mov	sl, ip
 8005d12:	eb19 0309 	adds.w	r3, r9, r9
 8005d16:	eb4a 040a 	adc.w	r4, sl, sl
 8005d1a:	4699      	mov	r9, r3
 8005d1c:	46a2      	mov	sl, r4
 8005d1e:	eb19 090b 	adds.w	r9, r9, fp
 8005d22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d3a:	4689      	mov	r9, r1
 8005d3c:	4692      	mov	sl, r2
 8005d3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005d42:	eb4c 060a 	adc.w	r6, ip, sl
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	f04f 0400 	mov.w	r4, #0
 8005d58:	0094      	lsls	r4, r2, #2
 8005d5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d5e:	008b      	lsls	r3, r1, #2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	4631      	mov	r1, r6
 8005d68:	f7fa faaa 	bl	80002c0 <__aeabi_uldivmod>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	461a      	mov	r2, r3
 8005d72:	4b77      	ldr	r3, [pc, #476]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005d74:	fba3 1302 	umull	r1, r3, r3, r2
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	2164      	movs	r1, #100	; 0x64
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	3332      	adds	r3, #50	; 0x32
 8005d86:	4a72      	ldr	r2, [pc, #456]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005d88:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4442      	add	r2, r8
 8005d98:	609a      	str	r2, [r3, #8]
 8005d9a:	e0d0      	b.n	8005f3e <UART_SetConfig+0x6e2>
 8005d9c:	f7fe f930 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8005da0:	60b8      	str	r0, [r7, #8]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	469a      	mov	sl, r3
 8005da6:	f04f 0b00 	mov.w	fp, #0
 8005daa:	46d0      	mov	r8, sl
 8005dac:	46d9      	mov	r9, fp
 8005dae:	eb18 0308 	adds.w	r3, r8, r8
 8005db2:	eb49 0409 	adc.w	r4, r9, r9
 8005db6:	4698      	mov	r8, r3
 8005db8:	46a1      	mov	r9, r4
 8005dba:	eb18 080a 	adds.w	r8, r8, sl
 8005dbe:	eb49 090b 	adc.w	r9, r9, fp
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dd6:	4688      	mov	r8, r1
 8005dd8:	4691      	mov	r9, r2
 8005dda:	eb1a 0508 	adds.w	r5, sl, r8
 8005dde:	eb4b 0609 	adc.w	r6, fp, r9
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	4619      	mov	r1, r3
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	f04f 0400 	mov.w	r4, #0
 8005df4:	0094      	lsls	r4, r2, #2
 8005df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dfa:	008b      	lsls	r3, r1, #2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4623      	mov	r3, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	4631      	mov	r1, r6
 8005e04:	f7fa fa5c 	bl	80002c0 <__aeabi_uldivmod>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005e10:	fba3 2302 	umull	r2, r3, r3, r2
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	469b      	mov	fp, r3
 8005e1e:	f04f 0c00 	mov.w	ip, #0
 8005e22:	46d9      	mov	r9, fp
 8005e24:	46e2      	mov	sl, ip
 8005e26:	eb19 0309 	adds.w	r3, r9, r9
 8005e2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005e2e:	4699      	mov	r9, r3
 8005e30:	46a2      	mov	sl, r4
 8005e32:	eb19 090b 	adds.w	r9, r9, fp
 8005e36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e3a:	f04f 0100 	mov.w	r1, #0
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e4e:	4689      	mov	r9, r1
 8005e50:	4692      	mov	sl, r2
 8005e52:	eb1b 0509 	adds.w	r5, fp, r9
 8005e56:	eb4c 060a 	adc.w	r6, ip, sl
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	0094      	lsls	r4, r2, #2
 8005e6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4623      	mov	r3, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	f7fa fa20 	bl	80002c0 <__aeabi_uldivmod>
 8005e80:	4603      	mov	r3, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005e88:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2164      	movs	r1, #100	; 0x64
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	3332      	adds	r3, #50	; 0x32
 8005e9a:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea6:	4498      	add	r8, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	469b      	mov	fp, r3
 8005eac:	f04f 0c00 	mov.w	ip, #0
 8005eb0:	46d9      	mov	r9, fp
 8005eb2:	46e2      	mov	sl, ip
 8005eb4:	eb19 0309 	adds.w	r3, r9, r9
 8005eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8005ebc:	4699      	mov	r9, r3
 8005ebe:	46a2      	mov	sl, r4
 8005ec0:	eb19 090b 	adds.w	r9, r9, fp
 8005ec4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005edc:	4689      	mov	r9, r1
 8005ede:	4692      	mov	sl, r2
 8005ee0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ee4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	f04f 0400 	mov.w	r4, #0
 8005efa:	0094      	lsls	r4, r2, #2
 8005efc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f00:	008b      	lsls	r3, r1, #2
 8005f02:	461a      	mov	r2, r3
 8005f04:	4623      	mov	r3, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	4631      	mov	r1, r6
 8005f0a:	f7fa f9d9 	bl	80002c0 <__aeabi_uldivmod>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005f16:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2164      	movs	r1, #100	; 0x64
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	3332      	adds	r3, #50	; 0x32
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <UART_SetConfig+0x6f4>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f003 020f 	and.w	r2, r3, #15
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4442      	add	r2, r8
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	e7ff      	b.n	8005f3e <UART_SetConfig+0x6e2>
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	40011000 	.word	0x40011000
 8005f4c:	40011400 	.word	0x40011400
 8005f50:	51eb851f 	.word	0x51eb851f

08005f54 <__errno>:
 8005f54:	4b01      	ldr	r3, [pc, #4]	; (8005f5c <__errno+0x8>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	2000097c 	.word	0x2000097c

08005f60 <__libc_init_array>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	4e0d      	ldr	r6, [pc, #52]	; (8005f98 <__libc_init_array+0x38>)
 8005f64:	4c0d      	ldr	r4, [pc, #52]	; (8005f9c <__libc_init_array+0x3c>)
 8005f66:	1ba4      	subs	r4, r4, r6
 8005f68:	10a4      	asrs	r4, r4, #2
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d109      	bne.n	8005f84 <__libc_init_array+0x24>
 8005f70:	4e0b      	ldr	r6, [pc, #44]	; (8005fa0 <__libc_init_array+0x40>)
 8005f72:	4c0c      	ldr	r4, [pc, #48]	; (8005fa4 <__libc_init_array+0x44>)
 8005f74:	f000 fc28 	bl	80067c8 <_init>
 8005f78:	1ba4      	subs	r4, r4, r6
 8005f7a:	10a4      	asrs	r4, r4, #2
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	42a5      	cmp	r5, r4
 8005f80:	d105      	bne.n	8005f8e <__libc_init_array+0x2e>
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f88:	4798      	blx	r3
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	e7ee      	b.n	8005f6c <__libc_init_array+0xc>
 8005f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f92:	4798      	blx	r3
 8005f94:	3501      	adds	r5, #1
 8005f96:	e7f2      	b.n	8005f7e <__libc_init_array+0x1e>
 8005f98:	08006ce8 	.word	0x08006ce8
 8005f9c:	08006ce8 	.word	0x08006ce8
 8005fa0:	08006ce8 	.word	0x08006ce8
 8005fa4:	08006cec 	.word	0x08006cec

08005fa8 <memcpy>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	1e43      	subs	r3, r0, #1
 8005fac:	440a      	add	r2, r1
 8005fae:	4291      	cmp	r1, r2
 8005fb0:	d100      	bne.n	8005fb4 <memcpy+0xc>
 8005fb2:	bd10      	pop	{r4, pc}
 8005fb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fbc:	e7f7      	b.n	8005fae <memcpy+0x6>

08005fbe <memset>:
 8005fbe:	4402      	add	r2, r0
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d100      	bne.n	8005fc8 <memset+0xa>
 8005fc6:	4770      	bx	lr
 8005fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fcc:	e7f9      	b.n	8005fc2 <memset+0x4>
	...

08005fd0 <siprintf>:
 8005fd0:	b40e      	push	{r1, r2, r3}
 8005fd2:	b500      	push	{lr}
 8005fd4:	b09c      	sub	sp, #112	; 0x70
 8005fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8005fd8:	9002      	str	r0, [sp, #8]
 8005fda:	9006      	str	r0, [sp, #24]
 8005fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fe0:	4809      	ldr	r0, [pc, #36]	; (8006008 <siprintf+0x38>)
 8005fe2:	9107      	str	r1, [sp, #28]
 8005fe4:	9104      	str	r1, [sp, #16]
 8005fe6:	4909      	ldr	r1, [pc, #36]	; (800600c <siprintf+0x3c>)
 8005fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fec:	9105      	str	r1, [sp, #20]
 8005fee:	6800      	ldr	r0, [r0, #0]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	a902      	add	r1, sp, #8
 8005ff4:	f000 f866 	bl	80060c4 <_svfiprintf_r>
 8005ff8:	9b02      	ldr	r3, [sp, #8]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	b01c      	add	sp, #112	; 0x70
 8006000:	f85d eb04 	ldr.w	lr, [sp], #4
 8006004:	b003      	add	sp, #12
 8006006:	4770      	bx	lr
 8006008:	2000097c 	.word	0x2000097c
 800600c:	ffff0208 	.word	0xffff0208

08006010 <__ssputs_r>:
 8006010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	688e      	ldr	r6, [r1, #8]
 8006016:	429e      	cmp	r6, r3
 8006018:	4682      	mov	sl, r0
 800601a:	460c      	mov	r4, r1
 800601c:	4690      	mov	r8, r2
 800601e:	4699      	mov	r9, r3
 8006020:	d837      	bhi.n	8006092 <__ssputs_r+0x82>
 8006022:	898a      	ldrh	r2, [r1, #12]
 8006024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006028:	d031      	beq.n	800608e <__ssputs_r+0x7e>
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	6909      	ldr	r1, [r1, #16]
 800602e:	1a6f      	subs	r7, r5, r1
 8006030:	6965      	ldr	r5, [r4, #20]
 8006032:	2302      	movs	r3, #2
 8006034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006038:	fb95 f5f3 	sdiv	r5, r5, r3
 800603c:	f109 0301 	add.w	r3, r9, #1
 8006040:	443b      	add	r3, r7
 8006042:	429d      	cmp	r5, r3
 8006044:	bf38      	it	cc
 8006046:	461d      	movcc	r5, r3
 8006048:	0553      	lsls	r3, r2, #21
 800604a:	d530      	bpl.n	80060ae <__ssputs_r+0x9e>
 800604c:	4629      	mov	r1, r5
 800604e:	f000 fb21 	bl	8006694 <_malloc_r>
 8006052:	4606      	mov	r6, r0
 8006054:	b950      	cbnz	r0, 800606c <__ssputs_r+0x5c>
 8006056:	230c      	movs	r3, #12
 8006058:	f8ca 3000 	str.w	r3, [sl]
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	463a      	mov	r2, r7
 800606e:	6921      	ldr	r1, [r4, #16]
 8006070:	f7ff ff9a 	bl	8005fa8 <memcpy>
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800607a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607e:	81a3      	strh	r3, [r4, #12]
 8006080:	6126      	str	r6, [r4, #16]
 8006082:	6165      	str	r5, [r4, #20]
 8006084:	443e      	add	r6, r7
 8006086:	1bed      	subs	r5, r5, r7
 8006088:	6026      	str	r6, [r4, #0]
 800608a:	60a5      	str	r5, [r4, #8]
 800608c:	464e      	mov	r6, r9
 800608e:	454e      	cmp	r6, r9
 8006090:	d900      	bls.n	8006094 <__ssputs_r+0x84>
 8006092:	464e      	mov	r6, r9
 8006094:	4632      	mov	r2, r6
 8006096:	4641      	mov	r1, r8
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	f000 fa93 	bl	80065c4 <memmove>
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	1b9b      	subs	r3, r3, r6
 80060a2:	60a3      	str	r3, [r4, #8]
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	441e      	add	r6, r3
 80060a8:	6026      	str	r6, [r4, #0]
 80060aa:	2000      	movs	r0, #0
 80060ac:	e7dc      	b.n	8006068 <__ssputs_r+0x58>
 80060ae:	462a      	mov	r2, r5
 80060b0:	f000 fb4a 	bl	8006748 <_realloc_r>
 80060b4:	4606      	mov	r6, r0
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d1e2      	bne.n	8006080 <__ssputs_r+0x70>
 80060ba:	6921      	ldr	r1, [r4, #16]
 80060bc:	4650      	mov	r0, sl
 80060be:	f000 fa9b 	bl	80065f8 <_free_r>
 80060c2:	e7c8      	b.n	8006056 <__ssputs_r+0x46>

080060c4 <_svfiprintf_r>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	461d      	mov	r5, r3
 80060ca:	898b      	ldrh	r3, [r1, #12]
 80060cc:	061f      	lsls	r7, r3, #24
 80060ce:	b09d      	sub	sp, #116	; 0x74
 80060d0:	4680      	mov	r8, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	4616      	mov	r6, r2
 80060d6:	d50f      	bpl.n	80060f8 <_svfiprintf_r+0x34>
 80060d8:	690b      	ldr	r3, [r1, #16]
 80060da:	b96b      	cbnz	r3, 80060f8 <_svfiprintf_r+0x34>
 80060dc:	2140      	movs	r1, #64	; 0x40
 80060de:	f000 fad9 	bl	8006694 <_malloc_r>
 80060e2:	6020      	str	r0, [r4, #0]
 80060e4:	6120      	str	r0, [r4, #16]
 80060e6:	b928      	cbnz	r0, 80060f4 <_svfiprintf_r+0x30>
 80060e8:	230c      	movs	r3, #12
 80060ea:	f8c8 3000 	str.w	r3, [r8]
 80060ee:	f04f 30ff 	mov.w	r0, #4294967295
 80060f2:	e0c8      	b.n	8006286 <_svfiprintf_r+0x1c2>
 80060f4:	2340      	movs	r3, #64	; 0x40
 80060f6:	6163      	str	r3, [r4, #20]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9309      	str	r3, [sp, #36]	; 0x24
 80060fc:	2320      	movs	r3, #32
 80060fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006102:	2330      	movs	r3, #48	; 0x30
 8006104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006108:	9503      	str	r5, [sp, #12]
 800610a:	f04f 0b01 	mov.w	fp, #1
 800610e:	4637      	mov	r7, r6
 8006110:	463d      	mov	r5, r7
 8006112:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006116:	b10b      	cbz	r3, 800611c <_svfiprintf_r+0x58>
 8006118:	2b25      	cmp	r3, #37	; 0x25
 800611a:	d13e      	bne.n	800619a <_svfiprintf_r+0xd6>
 800611c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006120:	d00b      	beq.n	800613a <_svfiprintf_r+0x76>
 8006122:	4653      	mov	r3, sl
 8006124:	4632      	mov	r2, r6
 8006126:	4621      	mov	r1, r4
 8006128:	4640      	mov	r0, r8
 800612a:	f7ff ff71 	bl	8006010 <__ssputs_r>
 800612e:	3001      	adds	r0, #1
 8006130:	f000 80a4 	beq.w	800627c <_svfiprintf_r+0x1b8>
 8006134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006136:	4453      	add	r3, sl
 8006138:	9309      	str	r3, [sp, #36]	; 0x24
 800613a:	783b      	ldrb	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 809d 	beq.w	800627c <_svfiprintf_r+0x1b8>
 8006142:	2300      	movs	r3, #0
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	9307      	str	r3, [sp, #28]
 8006150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006154:	931a      	str	r3, [sp, #104]	; 0x68
 8006156:	462f      	mov	r7, r5
 8006158:	2205      	movs	r2, #5
 800615a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800615e:	4850      	ldr	r0, [pc, #320]	; (80062a0 <_svfiprintf_r+0x1dc>)
 8006160:	f7fa f85e 	bl	8000220 <memchr>
 8006164:	9b04      	ldr	r3, [sp, #16]
 8006166:	b9d0      	cbnz	r0, 800619e <_svfiprintf_r+0xda>
 8006168:	06d9      	lsls	r1, r3, #27
 800616a:	bf44      	itt	mi
 800616c:	2220      	movmi	r2, #32
 800616e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006172:	071a      	lsls	r2, r3, #28
 8006174:	bf44      	itt	mi
 8006176:	222b      	movmi	r2, #43	; 0x2b
 8006178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800617c:	782a      	ldrb	r2, [r5, #0]
 800617e:	2a2a      	cmp	r2, #42	; 0x2a
 8006180:	d015      	beq.n	80061ae <_svfiprintf_r+0xea>
 8006182:	9a07      	ldr	r2, [sp, #28]
 8006184:	462f      	mov	r7, r5
 8006186:	2000      	movs	r0, #0
 8006188:	250a      	movs	r5, #10
 800618a:	4639      	mov	r1, r7
 800618c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006190:	3b30      	subs	r3, #48	; 0x30
 8006192:	2b09      	cmp	r3, #9
 8006194:	d94d      	bls.n	8006232 <_svfiprintf_r+0x16e>
 8006196:	b1b8      	cbz	r0, 80061c8 <_svfiprintf_r+0x104>
 8006198:	e00f      	b.n	80061ba <_svfiprintf_r+0xf6>
 800619a:	462f      	mov	r7, r5
 800619c:	e7b8      	b.n	8006110 <_svfiprintf_r+0x4c>
 800619e:	4a40      	ldr	r2, [pc, #256]	; (80062a0 <_svfiprintf_r+0x1dc>)
 80061a0:	1a80      	subs	r0, r0, r2
 80061a2:	fa0b f000 	lsl.w	r0, fp, r0
 80061a6:	4318      	orrs	r0, r3
 80061a8:	9004      	str	r0, [sp, #16]
 80061aa:	463d      	mov	r5, r7
 80061ac:	e7d3      	b.n	8006156 <_svfiprintf_r+0x92>
 80061ae:	9a03      	ldr	r2, [sp, #12]
 80061b0:	1d11      	adds	r1, r2, #4
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	9103      	str	r1, [sp, #12]
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	db01      	blt.n	80061be <_svfiprintf_r+0xfa>
 80061ba:	9207      	str	r2, [sp, #28]
 80061bc:	e004      	b.n	80061c8 <_svfiprintf_r+0x104>
 80061be:	4252      	negs	r2, r2
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	9207      	str	r2, [sp, #28]
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	783b      	ldrb	r3, [r7, #0]
 80061ca:	2b2e      	cmp	r3, #46	; 0x2e
 80061cc:	d10c      	bne.n	80061e8 <_svfiprintf_r+0x124>
 80061ce:	787b      	ldrb	r3, [r7, #1]
 80061d0:	2b2a      	cmp	r3, #42	; 0x2a
 80061d2:	d133      	bne.n	800623c <_svfiprintf_r+0x178>
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	9203      	str	r2, [sp, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bfb8      	it	lt
 80061e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061e4:	3702      	adds	r7, #2
 80061e6:	9305      	str	r3, [sp, #20]
 80061e8:	4d2e      	ldr	r5, [pc, #184]	; (80062a4 <_svfiprintf_r+0x1e0>)
 80061ea:	7839      	ldrb	r1, [r7, #0]
 80061ec:	2203      	movs	r2, #3
 80061ee:	4628      	mov	r0, r5
 80061f0:	f7fa f816 	bl	8000220 <memchr>
 80061f4:	b138      	cbz	r0, 8006206 <_svfiprintf_r+0x142>
 80061f6:	2340      	movs	r3, #64	; 0x40
 80061f8:	1b40      	subs	r0, r0, r5
 80061fa:	fa03 f000 	lsl.w	r0, r3, r0
 80061fe:	9b04      	ldr	r3, [sp, #16]
 8006200:	4303      	orrs	r3, r0
 8006202:	3701      	adds	r7, #1
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	7839      	ldrb	r1, [r7, #0]
 8006208:	4827      	ldr	r0, [pc, #156]	; (80062a8 <_svfiprintf_r+0x1e4>)
 800620a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800620e:	2206      	movs	r2, #6
 8006210:	1c7e      	adds	r6, r7, #1
 8006212:	f7fa f805 	bl	8000220 <memchr>
 8006216:	2800      	cmp	r0, #0
 8006218:	d038      	beq.n	800628c <_svfiprintf_r+0x1c8>
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <_svfiprintf_r+0x1e8>)
 800621c:	bb13      	cbnz	r3, 8006264 <_svfiprintf_r+0x1a0>
 800621e:	9b03      	ldr	r3, [sp, #12]
 8006220:	3307      	adds	r3, #7
 8006222:	f023 0307 	bic.w	r3, r3, #7
 8006226:	3308      	adds	r3, #8
 8006228:	9303      	str	r3, [sp, #12]
 800622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622c:	444b      	add	r3, r9
 800622e:	9309      	str	r3, [sp, #36]	; 0x24
 8006230:	e76d      	b.n	800610e <_svfiprintf_r+0x4a>
 8006232:	fb05 3202 	mla	r2, r5, r2, r3
 8006236:	2001      	movs	r0, #1
 8006238:	460f      	mov	r7, r1
 800623a:	e7a6      	b.n	800618a <_svfiprintf_r+0xc6>
 800623c:	2300      	movs	r3, #0
 800623e:	3701      	adds	r7, #1
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	4619      	mov	r1, r3
 8006244:	250a      	movs	r5, #10
 8006246:	4638      	mov	r0, r7
 8006248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800624c:	3a30      	subs	r2, #48	; 0x30
 800624e:	2a09      	cmp	r2, #9
 8006250:	d903      	bls.n	800625a <_svfiprintf_r+0x196>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0c8      	beq.n	80061e8 <_svfiprintf_r+0x124>
 8006256:	9105      	str	r1, [sp, #20]
 8006258:	e7c6      	b.n	80061e8 <_svfiprintf_r+0x124>
 800625a:	fb05 2101 	mla	r1, r5, r1, r2
 800625e:	2301      	movs	r3, #1
 8006260:	4607      	mov	r7, r0
 8006262:	e7f0      	b.n	8006246 <_svfiprintf_r+0x182>
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4622      	mov	r2, r4
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <_svfiprintf_r+0x1ec>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	4640      	mov	r0, r8
 8006270:	f3af 8000 	nop.w
 8006274:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006278:	4681      	mov	r9, r0
 800627a:	d1d6      	bne.n	800622a <_svfiprintf_r+0x166>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	065b      	lsls	r3, r3, #25
 8006280:	f53f af35 	bmi.w	80060ee <_svfiprintf_r+0x2a>
 8006284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006286:	b01d      	add	sp, #116	; 0x74
 8006288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628c:	ab03      	add	r3, sp, #12
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	4622      	mov	r2, r4
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <_svfiprintf_r+0x1ec>)
 8006294:	a904      	add	r1, sp, #16
 8006296:	4640      	mov	r0, r8
 8006298:	f000 f882 	bl	80063a0 <_printf_i>
 800629c:	e7ea      	b.n	8006274 <_svfiprintf_r+0x1b0>
 800629e:	bf00      	nop
 80062a0:	08006cac 	.word	0x08006cac
 80062a4:	08006cb2 	.word	0x08006cb2
 80062a8:	08006cb6 	.word	0x08006cb6
 80062ac:	00000000 	.word	0x00000000
 80062b0:	08006011 	.word	0x08006011

080062b4 <_printf_common>:
 80062b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	4691      	mov	r9, r2
 80062ba:	461f      	mov	r7, r3
 80062bc:	688a      	ldr	r2, [r1, #8]
 80062be:	690b      	ldr	r3, [r1, #16]
 80062c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	bfb8      	it	lt
 80062c8:	4613      	movlt	r3, r2
 80062ca:	f8c9 3000 	str.w	r3, [r9]
 80062ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062d2:	4606      	mov	r6, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	b112      	cbz	r2, 80062de <_printf_common+0x2a>
 80062d8:	3301      	adds	r3, #1
 80062da:	f8c9 3000 	str.w	r3, [r9]
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	0699      	lsls	r1, r3, #26
 80062e2:	bf42      	ittt	mi
 80062e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062e8:	3302      	addmi	r3, #2
 80062ea:	f8c9 3000 	strmi.w	r3, [r9]
 80062ee:	6825      	ldr	r5, [r4, #0]
 80062f0:	f015 0506 	ands.w	r5, r5, #6
 80062f4:	d107      	bne.n	8006306 <_printf_common+0x52>
 80062f6:	f104 0a19 	add.w	sl, r4, #25
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	42ab      	cmp	r3, r5
 8006304:	dc28      	bgt.n	8006358 <_printf_common+0xa4>
 8006306:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	3300      	adds	r3, #0
 800630e:	bf18      	it	ne
 8006310:	2301      	movne	r3, #1
 8006312:	0692      	lsls	r2, r2, #26
 8006314:	d42d      	bmi.n	8006372 <_printf_common+0xbe>
 8006316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800631a:	4639      	mov	r1, r7
 800631c:	4630      	mov	r0, r6
 800631e:	47c0      	blx	r8
 8006320:	3001      	adds	r0, #1
 8006322:	d020      	beq.n	8006366 <_printf_common+0xb2>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	68e5      	ldr	r5, [r4, #12]
 8006328:	f8d9 2000 	ldr.w	r2, [r9]
 800632c:	f003 0306 	and.w	r3, r3, #6
 8006330:	2b04      	cmp	r3, #4
 8006332:	bf08      	it	eq
 8006334:	1aad      	subeq	r5, r5, r2
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	bf0c      	ite	eq
 800633c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006340:	2500      	movne	r5, #0
 8006342:	4293      	cmp	r3, r2
 8006344:	bfc4      	itt	gt
 8006346:	1a9b      	subgt	r3, r3, r2
 8006348:	18ed      	addgt	r5, r5, r3
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	341a      	adds	r4, #26
 8006350:	454d      	cmp	r5, r9
 8006352:	d11a      	bne.n	800638a <_printf_common+0xd6>
 8006354:	2000      	movs	r0, #0
 8006356:	e008      	b.n	800636a <_printf_common+0xb6>
 8006358:	2301      	movs	r3, #1
 800635a:	4652      	mov	r2, sl
 800635c:	4639      	mov	r1, r7
 800635e:	4630      	mov	r0, r6
 8006360:	47c0      	blx	r8
 8006362:	3001      	adds	r0, #1
 8006364:	d103      	bne.n	800636e <_printf_common+0xba>
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	3501      	adds	r5, #1
 8006370:	e7c3      	b.n	80062fa <_printf_common+0x46>
 8006372:	18e1      	adds	r1, r4, r3
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	2030      	movs	r0, #48	; 0x30
 8006378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800637c:	4422      	add	r2, r4
 800637e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006386:	3302      	adds	r3, #2
 8006388:	e7c5      	b.n	8006316 <_printf_common+0x62>
 800638a:	2301      	movs	r3, #1
 800638c:	4622      	mov	r2, r4
 800638e:	4639      	mov	r1, r7
 8006390:	4630      	mov	r0, r6
 8006392:	47c0      	blx	r8
 8006394:	3001      	adds	r0, #1
 8006396:	d0e6      	beq.n	8006366 <_printf_common+0xb2>
 8006398:	f109 0901 	add.w	r9, r9, #1
 800639c:	e7d8      	b.n	8006350 <_printf_common+0x9c>
	...

080063a0 <_printf_i>:
 80063a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063a8:	460c      	mov	r4, r1
 80063aa:	7e09      	ldrb	r1, [r1, #24]
 80063ac:	b085      	sub	sp, #20
 80063ae:	296e      	cmp	r1, #110	; 0x6e
 80063b0:	4617      	mov	r7, r2
 80063b2:	4606      	mov	r6, r0
 80063b4:	4698      	mov	r8, r3
 80063b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063b8:	f000 80b3 	beq.w	8006522 <_printf_i+0x182>
 80063bc:	d822      	bhi.n	8006404 <_printf_i+0x64>
 80063be:	2963      	cmp	r1, #99	; 0x63
 80063c0:	d036      	beq.n	8006430 <_printf_i+0x90>
 80063c2:	d80a      	bhi.n	80063da <_printf_i+0x3a>
 80063c4:	2900      	cmp	r1, #0
 80063c6:	f000 80b9 	beq.w	800653c <_printf_i+0x19c>
 80063ca:	2958      	cmp	r1, #88	; 0x58
 80063cc:	f000 8083 	beq.w	80064d6 <_printf_i+0x136>
 80063d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063d8:	e032      	b.n	8006440 <_printf_i+0xa0>
 80063da:	2964      	cmp	r1, #100	; 0x64
 80063dc:	d001      	beq.n	80063e2 <_printf_i+0x42>
 80063de:	2969      	cmp	r1, #105	; 0x69
 80063e0:	d1f6      	bne.n	80063d0 <_printf_i+0x30>
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	0605      	lsls	r5, r0, #24
 80063e8:	f103 0104 	add.w	r1, r3, #4
 80063ec:	d52a      	bpl.n	8006444 <_printf_i+0xa4>
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6011      	str	r1, [r2, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da03      	bge.n	80063fe <_printf_i+0x5e>
 80063f6:	222d      	movs	r2, #45	; 0x2d
 80063f8:	425b      	negs	r3, r3
 80063fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063fe:	486f      	ldr	r0, [pc, #444]	; (80065bc <_printf_i+0x21c>)
 8006400:	220a      	movs	r2, #10
 8006402:	e039      	b.n	8006478 <_printf_i+0xd8>
 8006404:	2973      	cmp	r1, #115	; 0x73
 8006406:	f000 809d 	beq.w	8006544 <_printf_i+0x1a4>
 800640a:	d808      	bhi.n	800641e <_printf_i+0x7e>
 800640c:	296f      	cmp	r1, #111	; 0x6f
 800640e:	d020      	beq.n	8006452 <_printf_i+0xb2>
 8006410:	2970      	cmp	r1, #112	; 0x70
 8006412:	d1dd      	bne.n	80063d0 <_printf_i+0x30>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	f043 0320 	orr.w	r3, r3, #32
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	e003      	b.n	8006426 <_printf_i+0x86>
 800641e:	2975      	cmp	r1, #117	; 0x75
 8006420:	d017      	beq.n	8006452 <_printf_i+0xb2>
 8006422:	2978      	cmp	r1, #120	; 0x78
 8006424:	d1d4      	bne.n	80063d0 <_printf_i+0x30>
 8006426:	2378      	movs	r3, #120	; 0x78
 8006428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800642c:	4864      	ldr	r0, [pc, #400]	; (80065c0 <_printf_i+0x220>)
 800642e:	e055      	b.n	80064dc <_printf_i+0x13c>
 8006430:	6813      	ldr	r3, [r2, #0]
 8006432:	1d19      	adds	r1, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6011      	str	r1, [r2, #0]
 8006438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800643c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006440:	2301      	movs	r3, #1
 8006442:	e08c      	b.n	800655e <_printf_i+0x1be>
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6011      	str	r1, [r2, #0]
 8006448:	f010 0f40 	tst.w	r0, #64	; 0x40
 800644c:	bf18      	it	ne
 800644e:	b21b      	sxthne	r3, r3
 8006450:	e7cf      	b.n	80063f2 <_printf_i+0x52>
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	6825      	ldr	r5, [r4, #0]
 8006456:	1d18      	adds	r0, r3, #4
 8006458:	6010      	str	r0, [r2, #0]
 800645a:	0628      	lsls	r0, r5, #24
 800645c:	d501      	bpl.n	8006462 <_printf_i+0xc2>
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	e002      	b.n	8006468 <_printf_i+0xc8>
 8006462:	0668      	lsls	r0, r5, #25
 8006464:	d5fb      	bpl.n	800645e <_printf_i+0xbe>
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	4854      	ldr	r0, [pc, #336]	; (80065bc <_printf_i+0x21c>)
 800646a:	296f      	cmp	r1, #111	; 0x6f
 800646c:	bf14      	ite	ne
 800646e:	220a      	movne	r2, #10
 8006470:	2208      	moveq	r2, #8
 8006472:	2100      	movs	r1, #0
 8006474:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006478:	6865      	ldr	r5, [r4, #4]
 800647a:	60a5      	str	r5, [r4, #8]
 800647c:	2d00      	cmp	r5, #0
 800647e:	f2c0 8095 	blt.w	80065ac <_printf_i+0x20c>
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	f021 0104 	bic.w	r1, r1, #4
 8006488:	6021      	str	r1, [r4, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d13d      	bne.n	800650a <_printf_i+0x16a>
 800648e:	2d00      	cmp	r5, #0
 8006490:	f040 808e 	bne.w	80065b0 <_printf_i+0x210>
 8006494:	4665      	mov	r5, ip
 8006496:	2a08      	cmp	r2, #8
 8006498:	d10b      	bne.n	80064b2 <_printf_i+0x112>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	07db      	lsls	r3, r3, #31
 800649e:	d508      	bpl.n	80064b2 <_printf_i+0x112>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bfde      	ittt	le
 80064a8:	2330      	movle	r3, #48	; 0x30
 80064aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b2:	ebac 0305 	sub.w	r3, ip, r5
 80064b6:	6123      	str	r3, [r4, #16]
 80064b8:	f8cd 8000 	str.w	r8, [sp]
 80064bc:	463b      	mov	r3, r7
 80064be:	aa03      	add	r2, sp, #12
 80064c0:	4621      	mov	r1, r4
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff fef6 	bl	80062b4 <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d14d      	bne.n	8006568 <_printf_i+0x1c8>
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	b005      	add	sp, #20
 80064d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d6:	4839      	ldr	r0, [pc, #228]	; (80065bc <_printf_i+0x21c>)
 80064d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064dc:	6813      	ldr	r3, [r2, #0]
 80064de:	6821      	ldr	r1, [r4, #0]
 80064e0:	1d1d      	adds	r5, r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6015      	str	r5, [r2, #0]
 80064e6:	060a      	lsls	r2, r1, #24
 80064e8:	d50b      	bpl.n	8006502 <_printf_i+0x162>
 80064ea:	07ca      	lsls	r2, r1, #31
 80064ec:	bf44      	itt	mi
 80064ee:	f041 0120 	orrmi.w	r1, r1, #32
 80064f2:	6021      	strmi	r1, [r4, #0]
 80064f4:	b91b      	cbnz	r3, 80064fe <_printf_i+0x15e>
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	f022 0220 	bic.w	r2, r2, #32
 80064fc:	6022      	str	r2, [r4, #0]
 80064fe:	2210      	movs	r2, #16
 8006500:	e7b7      	b.n	8006472 <_printf_i+0xd2>
 8006502:	064d      	lsls	r5, r1, #25
 8006504:	bf48      	it	mi
 8006506:	b29b      	uxthmi	r3, r3
 8006508:	e7ef      	b.n	80064ea <_printf_i+0x14a>
 800650a:	4665      	mov	r5, ip
 800650c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006510:	fb02 3311 	mls	r3, r2, r1, r3
 8006514:	5cc3      	ldrb	r3, [r0, r3]
 8006516:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800651a:	460b      	mov	r3, r1
 800651c:	2900      	cmp	r1, #0
 800651e:	d1f5      	bne.n	800650c <_printf_i+0x16c>
 8006520:	e7b9      	b.n	8006496 <_printf_i+0xf6>
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	6961      	ldr	r1, [r4, #20]
 8006528:	1d18      	adds	r0, r3, #4
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	0628      	lsls	r0, r5, #24
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	d501      	bpl.n	8006536 <_printf_i+0x196>
 8006532:	6019      	str	r1, [r3, #0]
 8006534:	e002      	b.n	800653c <_printf_i+0x19c>
 8006536:	066a      	lsls	r2, r5, #25
 8006538:	d5fb      	bpl.n	8006532 <_printf_i+0x192>
 800653a:	8019      	strh	r1, [r3, #0]
 800653c:	2300      	movs	r3, #0
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	4665      	mov	r5, ip
 8006542:	e7b9      	b.n	80064b8 <_printf_i+0x118>
 8006544:	6813      	ldr	r3, [r2, #0]
 8006546:	1d19      	adds	r1, r3, #4
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	681d      	ldr	r5, [r3, #0]
 800654c:	6862      	ldr	r2, [r4, #4]
 800654e:	2100      	movs	r1, #0
 8006550:	4628      	mov	r0, r5
 8006552:	f7f9 fe65 	bl	8000220 <memchr>
 8006556:	b108      	cbz	r0, 800655c <_printf_i+0x1bc>
 8006558:	1b40      	subs	r0, r0, r5
 800655a:	6060      	str	r0, [r4, #4]
 800655c:	6863      	ldr	r3, [r4, #4]
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	2300      	movs	r3, #0
 8006562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006566:	e7a7      	b.n	80064b8 <_printf_i+0x118>
 8006568:	6923      	ldr	r3, [r4, #16]
 800656a:	462a      	mov	r2, r5
 800656c:	4639      	mov	r1, r7
 800656e:	4630      	mov	r0, r6
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d0aa      	beq.n	80064cc <_printf_i+0x12c>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	079b      	lsls	r3, r3, #30
 800657a:	d413      	bmi.n	80065a4 <_printf_i+0x204>
 800657c:	68e0      	ldr	r0, [r4, #12]
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	4298      	cmp	r0, r3
 8006582:	bfb8      	it	lt
 8006584:	4618      	movlt	r0, r3
 8006586:	e7a3      	b.n	80064d0 <_printf_i+0x130>
 8006588:	2301      	movs	r3, #1
 800658a:	464a      	mov	r2, r9
 800658c:	4639      	mov	r1, r7
 800658e:	4630      	mov	r0, r6
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d09a      	beq.n	80064cc <_printf_i+0x12c>
 8006596:	3501      	adds	r5, #1
 8006598:	68e3      	ldr	r3, [r4, #12]
 800659a:	9a03      	ldr	r2, [sp, #12]
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	42ab      	cmp	r3, r5
 80065a0:	dcf2      	bgt.n	8006588 <_printf_i+0x1e8>
 80065a2:	e7eb      	b.n	800657c <_printf_i+0x1dc>
 80065a4:	2500      	movs	r5, #0
 80065a6:	f104 0919 	add.w	r9, r4, #25
 80065aa:	e7f5      	b.n	8006598 <_printf_i+0x1f8>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ac      	bne.n	800650a <_printf_i+0x16a>
 80065b0:	7803      	ldrb	r3, [r0, #0]
 80065b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ba:	e76c      	b.n	8006496 <_printf_i+0xf6>
 80065bc:	08006cbd 	.word	0x08006cbd
 80065c0:	08006cce 	.word	0x08006cce

080065c4 <memmove>:
 80065c4:	4288      	cmp	r0, r1
 80065c6:	b510      	push	{r4, lr}
 80065c8:	eb01 0302 	add.w	r3, r1, r2
 80065cc:	d807      	bhi.n	80065de <memmove+0x1a>
 80065ce:	1e42      	subs	r2, r0, #1
 80065d0:	4299      	cmp	r1, r3
 80065d2:	d00a      	beq.n	80065ea <memmove+0x26>
 80065d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065dc:	e7f8      	b.n	80065d0 <memmove+0xc>
 80065de:	4283      	cmp	r3, r0
 80065e0:	d9f5      	bls.n	80065ce <memmove+0xa>
 80065e2:	1881      	adds	r1, r0, r2
 80065e4:	1ad2      	subs	r2, r2, r3
 80065e6:	42d3      	cmn	r3, r2
 80065e8:	d100      	bne.n	80065ec <memmove+0x28>
 80065ea:	bd10      	pop	{r4, pc}
 80065ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065f4:	e7f7      	b.n	80065e6 <memmove+0x22>
	...

080065f8 <_free_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4605      	mov	r5, r0
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d045      	beq.n	800668c <_free_r+0x94>
 8006600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006604:	1f0c      	subs	r4, r1, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	bfb8      	it	lt
 800660a:	18e4      	addlt	r4, r4, r3
 800660c:	f000 f8d2 	bl	80067b4 <__malloc_lock>
 8006610:	4a1f      	ldr	r2, [pc, #124]	; (8006690 <_free_r+0x98>)
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	4610      	mov	r0, r2
 8006616:	b933      	cbnz	r3, 8006626 <_free_r+0x2e>
 8006618:	6063      	str	r3, [r4, #4]
 800661a:	6014      	str	r4, [r2, #0]
 800661c:	4628      	mov	r0, r5
 800661e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006622:	f000 b8c8 	b.w	80067b6 <__malloc_unlock>
 8006626:	42a3      	cmp	r3, r4
 8006628:	d90c      	bls.n	8006644 <_free_r+0x4c>
 800662a:	6821      	ldr	r1, [r4, #0]
 800662c:	1862      	adds	r2, r4, r1
 800662e:	4293      	cmp	r3, r2
 8006630:	bf04      	itt	eq
 8006632:	681a      	ldreq	r2, [r3, #0]
 8006634:	685b      	ldreq	r3, [r3, #4]
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	bf04      	itt	eq
 800663a:	1852      	addeq	r2, r2, r1
 800663c:	6022      	streq	r2, [r4, #0]
 800663e:	6004      	str	r4, [r0, #0]
 8006640:	e7ec      	b.n	800661c <_free_r+0x24>
 8006642:	4613      	mov	r3, r2
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	b10a      	cbz	r2, 800664c <_free_r+0x54>
 8006648:	42a2      	cmp	r2, r4
 800664a:	d9fa      	bls.n	8006642 <_free_r+0x4a>
 800664c:	6819      	ldr	r1, [r3, #0]
 800664e:	1858      	adds	r0, r3, r1
 8006650:	42a0      	cmp	r0, r4
 8006652:	d10b      	bne.n	800666c <_free_r+0x74>
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	4401      	add	r1, r0
 8006658:	1858      	adds	r0, r3, r1
 800665a:	4282      	cmp	r2, r0
 800665c:	6019      	str	r1, [r3, #0]
 800665e:	d1dd      	bne.n	800661c <_free_r+0x24>
 8006660:	6810      	ldr	r0, [r2, #0]
 8006662:	6852      	ldr	r2, [r2, #4]
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	4401      	add	r1, r0
 8006668:	6019      	str	r1, [r3, #0]
 800666a:	e7d7      	b.n	800661c <_free_r+0x24>
 800666c:	d902      	bls.n	8006674 <_free_r+0x7c>
 800666e:	230c      	movs	r3, #12
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	e7d3      	b.n	800661c <_free_r+0x24>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	1821      	adds	r1, r4, r0
 8006678:	428a      	cmp	r2, r1
 800667a:	bf04      	itt	eq
 800667c:	6811      	ldreq	r1, [r2, #0]
 800667e:	6852      	ldreq	r2, [r2, #4]
 8006680:	6062      	str	r2, [r4, #4]
 8006682:	bf04      	itt	eq
 8006684:	1809      	addeq	r1, r1, r0
 8006686:	6021      	streq	r1, [r4, #0]
 8006688:	605c      	str	r4, [r3, #4]
 800668a:	e7c7      	b.n	800661c <_free_r+0x24>
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	20000a10 	.word	0x20000a10

08006694 <_malloc_r>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	1ccd      	adds	r5, r1, #3
 8006698:	f025 0503 	bic.w	r5, r5, #3
 800669c:	3508      	adds	r5, #8
 800669e:	2d0c      	cmp	r5, #12
 80066a0:	bf38      	it	cc
 80066a2:	250c      	movcc	r5, #12
 80066a4:	2d00      	cmp	r5, #0
 80066a6:	4606      	mov	r6, r0
 80066a8:	db01      	blt.n	80066ae <_malloc_r+0x1a>
 80066aa:	42a9      	cmp	r1, r5
 80066ac:	d903      	bls.n	80066b6 <_malloc_r+0x22>
 80066ae:	230c      	movs	r3, #12
 80066b0:	6033      	str	r3, [r6, #0]
 80066b2:	2000      	movs	r0, #0
 80066b4:	bd70      	pop	{r4, r5, r6, pc}
 80066b6:	f000 f87d 	bl	80067b4 <__malloc_lock>
 80066ba:	4a21      	ldr	r2, [pc, #132]	; (8006740 <_malloc_r+0xac>)
 80066bc:	6814      	ldr	r4, [r2, #0]
 80066be:	4621      	mov	r1, r4
 80066c0:	b991      	cbnz	r1, 80066e8 <_malloc_r+0x54>
 80066c2:	4c20      	ldr	r4, [pc, #128]	; (8006744 <_malloc_r+0xb0>)
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	b91b      	cbnz	r3, 80066d0 <_malloc_r+0x3c>
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 f863 	bl	8006794 <_sbrk_r>
 80066ce:	6020      	str	r0, [r4, #0]
 80066d0:	4629      	mov	r1, r5
 80066d2:	4630      	mov	r0, r6
 80066d4:	f000 f85e 	bl	8006794 <_sbrk_r>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d124      	bne.n	8006726 <_malloc_r+0x92>
 80066dc:	230c      	movs	r3, #12
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	4630      	mov	r0, r6
 80066e2:	f000 f868 	bl	80067b6 <__malloc_unlock>
 80066e6:	e7e4      	b.n	80066b2 <_malloc_r+0x1e>
 80066e8:	680b      	ldr	r3, [r1, #0]
 80066ea:	1b5b      	subs	r3, r3, r5
 80066ec:	d418      	bmi.n	8006720 <_malloc_r+0x8c>
 80066ee:	2b0b      	cmp	r3, #11
 80066f0:	d90f      	bls.n	8006712 <_malloc_r+0x7e>
 80066f2:	600b      	str	r3, [r1, #0]
 80066f4:	50cd      	str	r5, [r1, r3]
 80066f6:	18cc      	adds	r4, r1, r3
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 f85c 	bl	80067b6 <__malloc_unlock>
 80066fe:	f104 000b 	add.w	r0, r4, #11
 8006702:	1d23      	adds	r3, r4, #4
 8006704:	f020 0007 	bic.w	r0, r0, #7
 8006708:	1ac3      	subs	r3, r0, r3
 800670a:	d0d3      	beq.n	80066b4 <_malloc_r+0x20>
 800670c:	425a      	negs	r2, r3
 800670e:	50e2      	str	r2, [r4, r3]
 8006710:	e7d0      	b.n	80066b4 <_malloc_r+0x20>
 8006712:	428c      	cmp	r4, r1
 8006714:	684b      	ldr	r3, [r1, #4]
 8006716:	bf16      	itet	ne
 8006718:	6063      	strne	r3, [r4, #4]
 800671a:	6013      	streq	r3, [r2, #0]
 800671c:	460c      	movne	r4, r1
 800671e:	e7eb      	b.n	80066f8 <_malloc_r+0x64>
 8006720:	460c      	mov	r4, r1
 8006722:	6849      	ldr	r1, [r1, #4]
 8006724:	e7cc      	b.n	80066c0 <_malloc_r+0x2c>
 8006726:	1cc4      	adds	r4, r0, #3
 8006728:	f024 0403 	bic.w	r4, r4, #3
 800672c:	42a0      	cmp	r0, r4
 800672e:	d005      	beq.n	800673c <_malloc_r+0xa8>
 8006730:	1a21      	subs	r1, r4, r0
 8006732:	4630      	mov	r0, r6
 8006734:	f000 f82e 	bl	8006794 <_sbrk_r>
 8006738:	3001      	adds	r0, #1
 800673a:	d0cf      	beq.n	80066dc <_malloc_r+0x48>
 800673c:	6025      	str	r5, [r4, #0]
 800673e:	e7db      	b.n	80066f8 <_malloc_r+0x64>
 8006740:	20000a10 	.word	0x20000a10
 8006744:	20000a14 	.word	0x20000a14

08006748 <_realloc_r>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	4607      	mov	r7, r0
 800674c:	4614      	mov	r4, r2
 800674e:	460e      	mov	r6, r1
 8006750:	b921      	cbnz	r1, 800675c <_realloc_r+0x14>
 8006752:	4611      	mov	r1, r2
 8006754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006758:	f7ff bf9c 	b.w	8006694 <_malloc_r>
 800675c:	b922      	cbnz	r2, 8006768 <_realloc_r+0x20>
 800675e:	f7ff ff4b 	bl	80065f8 <_free_r>
 8006762:	4625      	mov	r5, r4
 8006764:	4628      	mov	r0, r5
 8006766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006768:	f000 f826 	bl	80067b8 <_malloc_usable_size_r>
 800676c:	42a0      	cmp	r0, r4
 800676e:	d20f      	bcs.n	8006790 <_realloc_r+0x48>
 8006770:	4621      	mov	r1, r4
 8006772:	4638      	mov	r0, r7
 8006774:	f7ff ff8e 	bl	8006694 <_malloc_r>
 8006778:	4605      	mov	r5, r0
 800677a:	2800      	cmp	r0, #0
 800677c:	d0f2      	beq.n	8006764 <_realloc_r+0x1c>
 800677e:	4631      	mov	r1, r6
 8006780:	4622      	mov	r2, r4
 8006782:	f7ff fc11 	bl	8005fa8 <memcpy>
 8006786:	4631      	mov	r1, r6
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff ff35 	bl	80065f8 <_free_r>
 800678e:	e7e9      	b.n	8006764 <_realloc_r+0x1c>
 8006790:	4635      	mov	r5, r6
 8006792:	e7e7      	b.n	8006764 <_realloc_r+0x1c>

08006794 <_sbrk_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4c06      	ldr	r4, [pc, #24]	; (80067b0 <_sbrk_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4605      	mov	r5, r0
 800679c:	4608      	mov	r0, r1
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	f7fc f948 	bl	8002a34 <_sbrk>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_sbrk_r+0x1a>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_sbrk_r+0x1a>
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	2000530c 	.word	0x2000530c

080067b4 <__malloc_lock>:
 80067b4:	4770      	bx	lr

080067b6 <__malloc_unlock>:
 80067b6:	4770      	bx	lr

080067b8 <_malloc_usable_size_r>:
 80067b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067bc:	1f18      	subs	r0, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bfbc      	itt	lt
 80067c2:	580b      	ldrlt	r3, [r1, r0]
 80067c4:	18c0      	addlt	r0, r0, r3
 80067c6:	4770      	bx	lr

080067c8 <_init>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	bf00      	nop
 80067cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ce:	bc08      	pop	{r3}
 80067d0:	469e      	mov	lr, r3
 80067d2:	4770      	bx	lr

080067d4 <_fini>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr
