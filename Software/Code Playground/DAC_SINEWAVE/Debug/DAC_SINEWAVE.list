
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008934  08008934  000209e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800893c  0800893c  000209e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e4  20000000  08008944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d98  200009e4  08009328  000209e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000377c  08009328  0002377c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001487a  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b4e  00000000  00000000  0003528e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023853  00000000  00000000  00039b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d727  00000000  00000000  0005d393  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2925  00000000  00000000  0006aaba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d3df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  0013d45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e4 	.word	0x200009e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008170 	.word	0x08008170

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e8 	.word	0x200009e8
 800020c:	08008170 	.word	0x08008170

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
 8000db8:	4613      	mov	r3, r2
 8000dba:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4951      	ldr	r1, [pc, #324]	; (8000f08 <conv_HEX_to_BIN+0x15c>)
 8000dc2:	4852      	ldr	r0, [pc, #328]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dc4:	f006 fdf2 	bl	80079ac <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dc8:	4850      	ldr	r0, [pc, #320]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dca:	f7ff fa21 	bl	8000210 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	494d      	ldr	r1, [pc, #308]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dd6:	484e      	ldr	r0, [pc, #312]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000dd8:	f005 fea7 	bl	8006b2a <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	461a      	mov	r2, r3
 8000de0:	494c      	ldr	r1, [pc, #304]	; (8000f14 <conv_HEX_to_BIN+0x168>)
 8000de2:	484a      	ldr	r0, [pc, #296]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000de4:	f006 fde2 	bl	80079ac <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000de8:	4848      	ldr	r0, [pc, #288]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dea:	f7ff fa11 	bl	8000210 <strlen>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	230a      	movs	r3, #10
 8000df4:	4945      	ldr	r1, [pc, #276]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000df6:	4846      	ldr	r0, [pc, #280]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000df8:	f005 fe97 	bl	8006b2a <HAL_UART_Transmit>

    if(select_8_16){
 8000dfc:	797b      	ldrb	r3, [r7, #5]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01f      	beq.n	8000e42 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e018      	b.n	8000e3a <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa42 f303 	asr.w	r3, r2, r3
 8000e10:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	bfb8      	it	lt
 8000e1c:	425b      	neglt	r3, r3
 8000e1e:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2201      	movne	r2, #1
 8000e2e:	2200      	moveq	r2, #0
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	dde3      	ble.n	8000e08 <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000e40:	e05e      	b.n	8000f00 <conv_HEX_to_BIN+0x154>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4934      	ldr	r1, [pc, #208]	; (8000f18 <conv_HEX_to_BIN+0x16c>)
 8000e48:	4830      	ldr	r0, [pc, #192]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e4a:	f006 fdaf 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e50:	f7ff f9de 	bl	8000210 <strlen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	230a      	movs	r3, #10
 8000e5a:	492c      	ldr	r1, [pc, #176]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e5c:	482c      	ldr	r0, [pc, #176]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000e5e:	f005 fe64 	bl	8006b2a <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	e038      	b.n	8000eda <conv_HEX_to_BIN+0x12e>
			temp = hex_byte_in >> i;
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa42 f303 	asr.w	r3, r2, r3
 8000e70:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4929      	ldr	r1, [pc, #164]	; (8000f1c <conv_HEX_to_BIN+0x170>)
 8000e76:	4825      	ldr	r0, [pc, #148]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e78:	f006 fd98 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e7c:	4823      	ldr	r0, [pc, #140]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e7e:	f7ff f9c7 	bl	8000210 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	230a      	movs	r3, #10
 8000e88:	4920      	ldr	r1, [pc, #128]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e8a:	4821      	ldr	r0, [pc, #132]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000e8c:	f005 fe4d 	bl	8006b2a <HAL_UART_Transmit>
			temp = temp%2;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	bfb8      	it	lt
 8000e9a:	425b      	neglt	r3, r3
 8000e9c:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	491f      	ldr	r1, [pc, #124]	; (8000f20 <conv_HEX_to_BIN+0x174>)
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000ea4:	f006 fd82 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ea8:	4818      	ldr	r0, [pc, #96]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000eaa:	f7ff f9b1 	bl	8000210 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	4915      	ldr	r1, [pc, #84]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000eb8:	f005 fe37 	bl	8006b2a <HAL_UART_Transmit>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	f1c3 030f 	rsb	r3, r3, #15
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2201      	movne	r2, #1
 8000ece:	2200      	moveq	r2, #0
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	ddc3      	ble.n	8000e68 <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <conv_HEX_to_BIN+0x178>)
 8000ee4:	8811      	ldrh	r1, [r2, #0]
 8000ee6:	7892      	ldrb	r2, [r2, #2]
 8000ee8:	8019      	strh	r1, [r3, #0]
 8000eea:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000eee:	f7ff f98f 	bl	8000210 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	4904      	ldr	r1, [pc, #16]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000efc:	f005 fe15 	bl	8006b2a <HAL_UART_Transmit>
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08008188 	.word	0x08008188
 8000f0c:	20002638 	.word	0x20002638
 8000f10:	200034f4 	.word	0x200034f4
 8000f14:	080081a4 	.word	0x080081a4
 8000f18:	080081d8 	.word	0x080081d8
 8000f1c:	0800820c 	.word	0x0800820c
 8000f20:	08008214 	.word	0x08008214
 8000f24:	0800821c 	.word	0x0800821c

08000f28 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4909      	ldr	r1, [pc, #36]	; (8000f54 <init_AX25+0x2c>)
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <init_AX25+0x30>)
 8000f32:	f005 fe93 	bl	8006c5c <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <init_AX25+0x34>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <init_AX25+0x34>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <init_AX25+0x34>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <init_AX25+0x34>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20001dac 	.word	0x20001dac
 8000f58:	200034f4 	.word	0x200034f4
 8000f5c:	20001da0 	.word	0x20001da0

08000f60 <tx_rx>:

void tx_rx() {
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
	if (changeMode) {
 8000f66:	4b59      	ldr	r3, [pc, #356]	; (80010cc <tx_rx+0x16c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <tx_rx+0x18>
		changeMode = 0;
 8000f6e:	4b57      	ldr	r3, [pc, #348]	; (80010cc <tx_rx+0x16c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000f74:	f001 fa08 	bl	8002388 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <tx_rx+0x170>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d07e      	beq.n	800107e <tx_rx+0x11e>
		bool packet_received = false;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
		bool packet_converted = false;
 8000f84:	2300      	movs	r3, #0
 8000f86:	71fb      	strb	r3, [r7, #7]

		//Run receiving KISS
		packet_received = receiving_KISS();
 8000f88:	f000 fcc6 	bl	8001918 <receiving_KISS>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	717b      	strb	r3, [r7, #5]

		if(packet_received){
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <tx_rx+0x3e>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 8000f96:	f000 fd87 	bl	8001aa8 <KISS_TO_AX25>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <tx_rx+0x48>
			output_AX25();
 8000fa4:	f000 f8a2 	bl	80010ec <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 8000fa8:	f000 f9d0 	bl	800134c <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d019      	beq.n	8000fec <tx_rx+0x8c>
			sprintf(uartData, "Error receiving KISS packet\n");
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <tx_rx+0x174>)
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <tx_rx+0x178>)
 8000fbc:	4615      	mov	r5, r2
 8000fbe:	461c      	mov	r4, r3
 8000fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc2:	6028      	str	r0, [r5, #0]
 8000fc4:	6069      	str	r1, [r5, #4]
 8000fc6:	60aa      	str	r2, [r5, #8]
 8000fc8:	60eb      	str	r3, [r5, #12]
 8000fca:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000fcc:	6128      	str	r0, [r5, #16]
 8000fce:	6169      	str	r1, [r5, #20]
 8000fd0:	61aa      	str	r2, [r5, #24]
 8000fd2:	7823      	ldrb	r3, [r4, #0]
 8000fd4:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fd6:	483f      	ldr	r0, [pc, #252]	; (80010d4 <tx_rx+0x174>)
 8000fd8:	f7ff f91a 	bl	8000210 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	493c      	ldr	r1, [pc, #240]	; (80010d4 <tx_rx+0x174>)
 8000fe4:	483d      	ldr	r0, [pc, #244]	; (80010dc <tx_rx+0x17c>)
 8000fe6:	f005 fda0 	bl	8006b2a <HAL_UART_Transmit>
 8000fea:	e044      	b.n	8001076 <tx_rx+0x116>
		}
		//Packet was not converted properly
		else if(!packet_converted){
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d019      	beq.n	800102c <tx_rx+0xcc>
			sprintf(uartData, "Error converting KISS packet\n");
 8000ff8:	4a36      	ldr	r2, [pc, #216]	; (80010d4 <tx_rx+0x174>)
 8000ffa:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <tx_rx+0x180>)
 8000ffc:	4615      	mov	r5, r2
 8000ffe:	461c      	mov	r4, r3
 8001000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001002:	6028      	str	r0, [r5, #0]
 8001004:	6069      	str	r1, [r5, #4]
 8001006:	60aa      	str	r2, [r5, #8]
 8001008:	60eb      	str	r3, [r5, #12]
 800100a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800100c:	6128      	str	r0, [r5, #16]
 800100e:	6169      	str	r1, [r5, #20]
 8001010:	61aa      	str	r2, [r5, #24]
 8001012:	8823      	ldrh	r3, [r4, #0]
 8001014:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001016:	482f      	ldr	r0, [pc, #188]	; (80010d4 <tx_rx+0x174>)
 8001018:	f7ff f8fa 	bl	8000210 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	b29a      	uxth	r2, r3
 8001020:	230a      	movs	r3, #10
 8001022:	492c      	ldr	r1, [pc, #176]	; (80010d4 <tx_rx+0x174>)
 8001024:	482d      	ldr	r0, [pc, #180]	; (80010dc <tx_rx+0x17c>)
 8001026:	f005 fd80 	bl	8006b2a <HAL_UART_Transmit>
 800102a:	e024      	b.n	8001076 <tx_rx+0x116>
		}
		//Successful transmission!
		else {
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <tx_rx+0x174>)
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <tx_rx+0x184>)
 8001030:	4614      	mov	r4, r2
 8001032:	469c      	mov	ip, r3
 8001034:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001038:	4665      	mov	r5, ip
 800103a:	4626      	mov	r6, r4
 800103c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800103e:	6028      	str	r0, [r5, #0]
 8001040:	6069      	str	r1, [r5, #4]
 8001042:	60aa      	str	r2, [r5, #8]
 8001044:	60eb      	str	r3, [r5, #12]
 8001046:	3410      	adds	r4, #16
 8001048:	f10c 0c10 	add.w	ip, ip, #16
 800104c:	4574      	cmp	r4, lr
 800104e:	d1f3      	bne.n	8001038 <tx_rx+0xd8>
 8001050:	4662      	mov	r2, ip
 8001052:	4623      	mov	r3, r4
 8001054:	cb03      	ldmia	r3!, {r0, r1}
 8001056:	6010      	str	r0, [r2, #0]
 8001058:	6051      	str	r1, [r2, #4]
 800105a:	8819      	ldrh	r1, [r3, #0]
 800105c:	789b      	ldrb	r3, [r3, #2]
 800105e:	8111      	strh	r1, [r2, #8]
 8001060:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <tx_rx+0x174>)
 8001064:	f7ff f8d4 	bl	8000210 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	230a      	movs	r3, #10
 800106e:	4919      	ldr	r1, [pc, #100]	; (80010d4 <tx_rx+0x174>)
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <tx_rx+0x17c>)
 8001072:	f005 fd5a 	bl	8006b2a <HAL_UART_Transmit>
		}

		changeMode = true;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <tx_rx+0x16c>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 800107c:	e022      	b.n	80010c4 <tx_rx+0x164>
		bool change = receiving_AX25();
 800107e:	f000 f9e5 	bl	800144c <receiving_AX25>
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
		if(!change){
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d018      	beq.n	80010c4 <tx_rx+0x164>
			sprintf(uartData, "Changing mode due to request\n");
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <tx_rx+0x174>)
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <tx_rx+0x188>)
 8001096:	4615      	mov	r5, r2
 8001098:	461c      	mov	r4, r3
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	6028      	str	r0, [r5, #0]
 800109e:	6069      	str	r1, [r5, #4]
 80010a0:	60aa      	str	r2, [r5, #8]
 80010a2:	60eb      	str	r3, [r5, #12]
 80010a4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010a6:	6128      	str	r0, [r5, #16]
 80010a8:	6169      	str	r1, [r5, #20]
 80010aa:	61aa      	str	r2, [r5, #24]
 80010ac:	8823      	ldrh	r3, [r4, #0]
 80010ae:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010b0:	4808      	ldr	r0, [pc, #32]	; (80010d4 <tx_rx+0x174>)
 80010b2:	f7ff f8ad 	bl	8000210 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	230a      	movs	r3, #10
 80010bc:	4905      	ldr	r1, [pc, #20]	; (80010d4 <tx_rx+0x174>)
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <tx_rx+0x17c>)
 80010c0:	f005 fd33 	bl	8006b2a <HAL_UART_Transmit>
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010cc:	20000a05 	.word	0x20000a05
 80010d0:	2000349c 	.word	0x2000349c
 80010d4:	20002638 	.word	0x20002638
 80010d8:	08008220 	.word	0x08008220
 80010dc:	200034f4 	.word	0x200034f4
 80010e0:	08008240 	.word	0x08008240
 80010e4:	08008260 	.word	0x08008260
 80010e8:	0800829c 	.word	0x0800829c

080010ec <output_AX25>:

void output_AX25(){
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80010f2:	4b88      	ldr	r3, [pc, #544]	; (8001314 <output_AX25+0x228>)
 80010f4:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Beginning AFSK transmission\n");
 80010f6:	4a88      	ldr	r2, [pc, #544]	; (8001318 <output_AX25+0x22c>)
 80010f8:	4b88      	ldr	r3, [pc, #544]	; (800131c <output_AX25+0x230>)
 80010fa:	4615      	mov	r5, r2
 80010fc:	461c      	mov	r4, r3
 80010fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001100:	6028      	str	r0, [r5, #0]
 8001102:	6069      	str	r1, [r5, #4]
 8001104:	60aa      	str	r2, [r5, #8]
 8001106:	60eb      	str	r3, [r5, #12]
 8001108:	cc07      	ldmia	r4!, {r0, r1, r2}
 800110a:	6128      	str	r0, [r5, #16]
 800110c:	6169      	str	r1, [r5, #20]
 800110e:	61aa      	str	r2, [r5, #24]
 8001110:	7823      	ldrb	r3, [r4, #0]
 8001112:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001114:	4880      	ldr	r0, [pc, #512]	; (8001318 <output_AX25+0x22c>)
 8001116:	f7ff f87b 	bl	8000210 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	497d      	ldr	r1, [pc, #500]	; (8001318 <output_AX25+0x22c>)
 8001122:	487f      	ldr	r0, [pc, #508]	; (8001320 <output_AX25+0x234>)
 8001124:	f005 fd01 	bl	8006b2a <HAL_UART_Transmit>

	int wave_start = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	freqSelect = true;
 800112c:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <output_AX25+0x238>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
	bool dumbbits[3] = { 0, 1, 1 };
 8001132:	4a7d      	ldr	r2, [pc, #500]	; (8001328 <output_AX25+0x23c>)
 8001134:	463b      	mov	r3, r7
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4611      	mov	r1, r2
 800113a:	8019      	strh	r1, [r3, #0]
 800113c:	3302      	adds	r3, #2
 800113e:	0c12      	lsrs	r2, r2, #16
 8001140:	701a      	strb	r2, [r3, #0]
	//Init dac playing some frequency, shouldn't be read by radio
	wave_start = bitToAudio(dumbbits, 3,1,wave_start);
 8001142:	4638      	mov	r0, r7
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2201      	movs	r2, #1
 8001148:	2103      	movs	r1, #3
 800114a:	f001 fa63 	bl	8002614 <bitToAudio>
 800114e:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 8001150:	2201      	movs	r2, #1
 8001152:	2110      	movs	r1, #16
 8001154:	4875      	ldr	r0, [pc, #468]	; (800132c <output_AX25+0x240>)
 8001156:	f004 fb05 	bl	8005764 <HAL_GPIO_WritePin>

	wave_start = bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start); //start flag
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	2108      	movs	r1, #8
 8001160:	4873      	ldr	r0, [pc, #460]	; (8001330 <output_AX25+0x244>)
 8001162:	f001 fa57 	bl	8002614 <bitToAudio>
 8001166:	60f8      	str	r0, [r7, #12]

	//Real information fields
	wave_start = bitToAudio(local_packet->address, address_len + local_packet->stuffed_address,1,wave_start); 		//lsb first
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800116e:	3310      	adds	r3, #16
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001178:	3310      	adds	r3, #16
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2201      	movs	r2, #1
 8001184:	f001 fa46 	bl	8002614 <bitToAudio>
 8001188:	60f8      	str	r0, [r7, #12]
	wave_start = bitToAudio(local_packet->control,control_len + local_packet->stuffed_control,1,wave_start);		//lsb first
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001190:	3314      	adds	r3, #20
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800119a:	3314      	adds	r3, #20
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f103 0108 	add.w	r1, r3, #8
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f001 fa35 	bl	8002614 <bitToAudio>
 80011aa:	60f8      	str	r0, [r7, #12]
	wave_start = bitToAudio(local_packet->PID,PID_len + local_packet->stuffed_PID,1,wave_start);					//lsb first
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011b2:	3318      	adds	r3, #24
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011bc:	3318      	adds	r3, #24
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f103 0108 	add.w	r1, r3, #8
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f001 fa24 	bl	8002614 <bitToAudio>
 80011cc:	60f8      	str	r0, [r7, #12]
	wave_start = bitToAudio(local_packet->Info,local_packet->Info_Len + local_packet->stuffed_Info,1,wave_start);	//lsb first
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011d4:	331c      	adds	r3, #28
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011e6:	331c      	adds	r3, #28
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	18d1      	adds	r1, r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f001 fa10 	bl	8002614 <bitToAudio>
 80011f4:	60f8      	str	r0, [r7, #12]
	bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS + local_packet->stuffed_FCS,1,wave_start);		//msb first
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011fc:	3304      	adds	r3, #4
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f103 0210 	add.w	r2, r3, #16
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	18d1      	adds	r1, r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2201      	movs	r2, #1
 800121a:	f001 f9fb 	bl	8002614 <bitToAudio>

	bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start);//stop flag
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2201      	movs	r2, #1
 8001222:	2108      	movs	r1, #8
 8001224:	4842      	ldr	r0, [pc, #264]	; (8001330 <output_AX25+0x244>)
 8001226:	f001 f9f5 	bl	8002614 <bitToAudio>

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800122a:	2100      	movs	r1, #0
 800122c:	4841      	ldr	r0, [pc, #260]	; (8001334 <output_AX25+0x248>)
 800122e:	f003 fbd1 	bl	80049d4 <HAL_DAC_Stop_DMA>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	483d      	ldr	r0, [pc, #244]	; (800132c <output_AX25+0x240>)
 8001238:	f004 fa94 	bl	8005764 <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 800123c:	4a36      	ldr	r2, [pc, #216]	; (8001318 <output_AX25+0x22c>)
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <output_AX25+0x24c>)
 8001240:	4615      	mov	r5, r2
 8001242:	461c      	mov	r4, r3
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	6028      	str	r0, [r5, #0]
 8001248:	6069      	str	r1, [r5, #4]
 800124a:	60aa      	str	r2, [r5, #8]
 800124c:	60eb      	str	r3, [r5, #12]
 800124e:	cc03      	ldmia	r4!, {r0, r1}
 8001250:	6128      	str	r0, [r5, #16]
 8001252:	6169      	str	r1, [r5, #20]
 8001254:	8823      	ldrh	r3, [r4, #0]
 8001256:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001258:	482f      	ldr	r0, [pc, #188]	; (8001318 <output_AX25+0x22c>)
 800125a:	f7fe ffd9 	bl	8000210 <strlen>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	230a      	movs	r3, #10
 8001264:	492c      	ldr	r1, [pc, #176]	; (8001318 <output_AX25+0x22c>)
 8001266:	482e      	ldr	r0, [pc, #184]	; (8001320 <output_AX25+0x234>)
 8001268:	f005 fc5f 	bl	8006b2a <HAL_UART_Transmit>

	//Debugging mode that will repeat send message. Must restart to stop or change message
	if(BROADCASTR){
		const int millis = 2000;
 800126c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001270:	60bb      	str	r3, [r7, #8]
		sprintf(uartData, "BROADCASTING WILL REPEAT IN A %d MILLISSECOND",millis);
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	4931      	ldr	r1, [pc, #196]	; (800133c <output_AX25+0x250>)
 8001276:	4828      	ldr	r0, [pc, #160]	; (8001318 <output_AX25+0x22c>)
 8001278:	f006 fb98 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <output_AX25+0x22c>)
 800127e:	f7fe ffc7 	bl	8000210 <strlen>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	230a      	movs	r3, #10
 8001288:	4923      	ldr	r1, [pc, #140]	; (8001318 <output_AX25+0x22c>)
 800128a:	4825      	ldr	r0, [pc, #148]	; (8001320 <output_AX25+0x234>)
 800128c:	f005 fc4d 	bl	8006b2a <HAL_UART_Transmit>

		int millis_div = (millis * 1.0) / 10 * 1.0;
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f7ff f967 	bl	8000564 <__aeabi_i2d>
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <output_AX25+0x254>)
 800129c:	f7ff faf6 	bl	800088c <__aeabi_ddiv>
 80012a0:	4603      	mov	r3, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	4618      	mov	r0, r3
 80012a6:	4621      	mov	r1, r4
 80012a8:	f7ff fbd8 	bl	8000a5c <__aeabi_d2iz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	607b      	str	r3, [r7, #4]
		for(int i = 0;i<10;i++){
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e014      	b.n	80012e0 <output_AX25+0x1f4>
			sprintf(uartData, " . ");
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <output_AX25+0x22c>)
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <output_AX25+0x258>)
 80012ba:	6810      	ldr	r0, [r2, #0]
 80012bc:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012be:	4816      	ldr	r0, [pc, #88]	; (8001318 <output_AX25+0x22c>)
 80012c0:	f7fe ffa6 	bl	8000210 <strlen>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	230a      	movs	r3, #10
 80012ca:	4913      	ldr	r1, [pc, #76]	; (8001318 <output_AX25+0x22c>)
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <output_AX25+0x234>)
 80012ce:	f005 fc2c 	bl	8006b2a <HAL_UART_Transmit>
			HAL_Delay(millis_div);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 f949 	bl	800456c <HAL_Delay>
		for(int i = 0;i<10;i++){
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b09      	cmp	r3, #9
 80012e4:	dde7      	ble.n	80012b6 <output_AX25+0x1ca>
		}
		sprintf(uartData, "\n\n");
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <output_AX25+0x22c>)
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <output_AX25+0x25c>)
 80012ea:	8811      	ldrh	r1, [r2, #0]
 80012ec:	7892      	ldrb	r2, [r2, #2]
 80012ee:	8019      	strh	r1, [r3, #0]
 80012f0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <output_AX25+0x22c>)
 80012f4:	f7fe ff8c 	bl	8000210 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	230a      	movs	r3, #10
 80012fe:	4906      	ldr	r1, [pc, #24]	; (8001318 <output_AX25+0x22c>)
 8001300:	4807      	ldr	r0, [pc, #28]	; (8001320 <output_AX25+0x234>)
 8001302:	f005 fc12 	bl	8006b2a <HAL_UART_Transmit>
		output_AX25();
 8001306:	f7ff fef1 	bl	80010ec <output_AX25>
	}
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}
 8001312:	bf00      	nop
 8001314:	20000a34 	.word	0x20000a34
 8001318:	20002638 	.word	0x20002638
 800131c:	080082bc 	.word	0x080082bc
 8001320:	200034f4 	.word	0x200034f4
 8001324:	20000a18 	.word	0x20000a18
 8001328:	08008330 	.word	0x08008330
 800132c:	40020800 	.word	0x40020800
 8001330:	20000008 	.word	0x20000008
 8001334:	200034a0 	.word	0x200034a0
 8001338:	080082dc 	.word	0x080082dc
 800133c:	080082f8 	.word	0x080082f8
 8001340:	40240000 	.word	0x40240000
 8001344:	08008328 	.word	0x08008328
 8001348:	0800832c 	.word	0x0800832c

0800134c <clear_AX25>:

void clear_AX25(){
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <clear_AX25+0x5c>)
 8001354:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8001356:	4a15      	ldr	r2, [pc, #84]	; (80013ac <clear_AX25+0x60>)
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <clear_AX25+0x64>)
 800135a:	4615      	mov	r5, r2
 800135c:	461c      	mov	r4, r3
 800135e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001360:	6028      	str	r0, [r5, #0]
 8001362:	6069      	str	r1, [r5, #4]
 8001364:	60aa      	str	r2, [r5, #8]
 8001366:	60eb      	str	r3, [r5, #12]
 8001368:	cc07      	ldmia	r4!, {r0, r1, r2}
 800136a:	6128      	str	r0, [r5, #16]
 800136c:	6169      	str	r1, [r5, #20]
 800136e:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001370:	480e      	ldr	r0, [pc, #56]	; (80013ac <clear_AX25+0x60>)
 8001372:	f7fe ff4d 	bl	8000210 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	230a      	movs	r3, #10
 800137c:	490b      	ldr	r1, [pc, #44]	; (80013ac <clear_AX25+0x60>)
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <clear_AX25+0x68>)
 8001380:	f005 fbd3 	bl	8006b2a <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f640 225f 	movw	r2, #2655	; 0xa5f
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f006 fae1 	bl	8007954 <memcpy>
	local_packet->got_packet = false;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001398:	3309      	adds	r3, #9
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdb0      	pop	{r4, r5, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000a34 	.word	0x20000a34
 80013ac:	20002638 	.word	0x20002638
 80013b0:	08008334 	.word	0x08008334
 80013b4:	200034f4 	.word	0x200034f4

080013b8 <UART2_EXCEPTION_CALLBACK>:
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 80013bc:	2201      	movs	r2, #1
 80013be:	491d      	ldr	r1, [pc, #116]	; (8001434 <UART2_EXCEPTION_CALLBACK+0x7c>)
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <UART2_EXCEPTION_CALLBACK+0x80>)
 80013c2:	f005 fc4b 	bl	8006c5c <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013ce:	7b1b      	ldrb	r3, [r3, #12]
 80013d0:	2bc0      	cmp	r3, #192	; 0xc0
 80013d2:	d104      	bne.n	80013de <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013dc:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <UART2_EXCEPTION_CALLBACK+0x88>)
 80013e6:	4413      	add	r3, r2
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013ea:	7b12      	ldrb	r2, [r2, #12]
 80013ec:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013f6:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	dd16      	ble.n	800142e <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <UART2_EXCEPTION_CALLBACK+0x90>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 800141c:	2201      	movs	r2, #1
 800141e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001426:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <UART2_EXCEPTION_CALLBACK+0x84>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

	  }
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20001dac 	.word	0x20001dac
 8001438:	200034f4 	.word	0x200034f4
 800143c:	20001da0 	.word	0x20001da0
 8001440:	20001dae 	.word	0x20001dae
 8001444:	2000349c 	.word	0x2000349c
 8001448:	20000a05 	.word	0x20000a05

0800144c <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8001452:	4a51      	ldr	r2, [pc, #324]	; (8001598 <receiving_AX25+0x14c>)
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <receiving_AX25+0x150>)
 8001456:	4615      	mov	r5, r2
 8001458:	461c      	mov	r4, r3
 800145a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145c:	6028      	str	r0, [r5, #0]
 800145e:	6069      	str	r1, [r5, #4]
 8001460:	60aa      	str	r2, [r5, #8]
 8001462:	60eb      	str	r3, [r5, #12]
 8001464:	cc03      	ldmia	r4!, {r0, r1}
 8001466:	6128      	str	r0, [r5, #16]
 8001468:	6169      	str	r1, [r5, #20]
 800146a:	7823      	ldrb	r3, [r4, #0]
 800146c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800146e:	484a      	ldr	r0, [pc, #296]	; (8001598 <receiving_AX25+0x14c>)
 8001470:	f7fe fece 	bl	8000210 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	230a      	movs	r3, #10
 800147a:	4947      	ldr	r1, [pc, #284]	; (8001598 <receiving_AX25+0x14c>)
 800147c:	4848      	ldr	r0, [pc, #288]	; (80015a0 <receiving_AX25+0x154>)
 800147e:	f005 fb54 	bl	8006b2a <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001482:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <receiving_AX25+0x158>)
 8001484:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 8001486:	f001 fb1d 	bl	8002ac4 <streamGet>
 800148a:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d13b      	bne.n	800150a <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001498:	3308      	adds	r3, #8
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 800149e:	f000 f889 	bl	80015b4 <AX25_Packet_Validate>
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 80014ac:	f000 f9aa 	bl	8001804 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f640 225f 	movw	r2, #2655	; 0xa5f
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fa6f 	bl	800799c <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 80014be:	f7ff ffc5 	bl	800144c <receiving_AX25>
 80014c2:	e065      	b.n	8001590 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <receiving_AX25+0x14c>)
 80014c6:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <receiving_AX25+0x15c>)
 80014c8:	4614      	mov	r4, r2
 80014ca:	469c      	mov	ip, r3
 80014cc:	f104 0e20 	add.w	lr, r4, #32
 80014d0:	4665      	mov	r5, ip
 80014d2:	4626      	mov	r6, r4
 80014d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d6:	6028      	str	r0, [r5, #0]
 80014d8:	6069      	str	r1, [r5, #4]
 80014da:	60aa      	str	r2, [r5, #8]
 80014dc:	60eb      	str	r3, [r5, #12]
 80014de:	3410      	adds	r4, #16
 80014e0:	f10c 0c10 	add.w	ip, ip, #16
 80014e4:	4574      	cmp	r4, lr
 80014e6:	d1f3      	bne.n	80014d0 <receiving_AX25+0x84>
 80014e8:	4662      	mov	r2, ip
 80014ea:	4623      	mov	r3, r4
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014f0:	4829      	ldr	r0, [pc, #164]	; (8001598 <receiving_AX25+0x14c>)
 80014f2:	f7fe fe8d 	bl	8000210 <strlen>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	230a      	movs	r3, #10
 80014fc:	4926      	ldr	r1, [pc, #152]	; (8001598 <receiving_AX25+0x14c>)
 80014fe:	4828      	ldr	r0, [pc, #160]	; (80015a0 <receiving_AX25+0x154>)
 8001500:	f005 fb13 	bl	8006b2a <HAL_UART_Transmit>
			receiving_AX25();
 8001504:	f7ff ffa2 	bl	800144c <receiving_AX25>
 8001508:	e042      	b.n	8001590 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d118      	bne.n	8001544 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 8001512:	4a21      	ldr	r2, [pc, #132]	; (8001598 <receiving_AX25+0x14c>)
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <receiving_AX25+0x160>)
 8001516:	4615      	mov	r5, r2
 8001518:	461c      	mov	r4, r3
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	6028      	str	r0, [r5, #0]
 800151e:	6069      	str	r1, [r5, #4]
 8001520:	60aa      	str	r2, [r5, #8]
 8001522:	60eb      	str	r3, [r5, #12]
 8001524:	6820      	ldr	r0, [r4, #0]
 8001526:	6128      	str	r0, [r5, #16]
 8001528:	7923      	ldrb	r3, [r4, #4]
 800152a:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <receiving_AX25+0x14c>)
 800152e:	f7fe fe6f 	bl	8000210 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	230a      	movs	r3, #10
 8001538:	4917      	ldr	r1, [pc, #92]	; (8001598 <receiving_AX25+0x14c>)
 800153a:	4819      	ldr	r0, [pc, #100]	; (80015a0 <receiving_AX25+0x154>)
 800153c:	f005 faf5 	bl	8006b2a <HAL_UART_Transmit>

		return false;
 8001540:	2300      	movs	r3, #0
 8001542:	e025      	b.n	8001590 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <receiving_AX25+0x14c>)
 8001546:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <receiving_AX25+0x164>)
 8001548:	4614      	mov	r4, r2
 800154a:	469c      	mov	ip, r3
 800154c:	f104 0e20 	add.w	lr, r4, #32
 8001550:	4665      	mov	r5, ip
 8001552:	4626      	mov	r6, r4
 8001554:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001556:	6028      	str	r0, [r5, #0]
 8001558:	6069      	str	r1, [r5, #4]
 800155a:	60aa      	str	r2, [r5, #8]
 800155c:	60eb      	str	r3, [r5, #12]
 800155e:	3410      	adds	r4, #16
 8001560:	f10c 0c10 	add.w	ip, ip, #16
 8001564:	4574      	cmp	r4, lr
 8001566:	d1f3      	bne.n	8001550 <receiving_AX25+0x104>
 8001568:	4663      	mov	r3, ip
 800156a:	4622      	mov	r2, r4
 800156c:	6810      	ldr	r0, [r2, #0]
 800156e:	6018      	str	r0, [r3, #0]
 8001570:	8891      	ldrh	r1, [r2, #4]
 8001572:	7992      	ldrb	r2, [r2, #6]
 8001574:	8099      	strh	r1, [r3, #4]
 8001576:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001578:	4807      	ldr	r0, [pc, #28]	; (8001598 <receiving_AX25+0x14c>)
 800157a:	f7fe fe49 	bl	8000210 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	230a      	movs	r3, #10
 8001584:	4904      	ldr	r1, [pc, #16]	; (8001598 <receiving_AX25+0x14c>)
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <receiving_AX25+0x154>)
 8001588:	f005 facf 	bl	8006b2a <HAL_UART_Transmit>
		receiving_AX25();
 800158c:	f7ff ff5e 	bl	800144c <receiving_AX25>
	}
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001598:	20002638 	.word	0x20002638
 800159c:	08008350 	.word	0x08008350
 80015a0:	200034f4 	.word	0x200034f4
 80015a4:	20000a34 	.word	0x20000a34
 80015a8:	0800836c 	.word	0x0800836c
 80015ac:	08008390 	.word	0x08008390
 80015b0:	080083a8 	.word	0x080083a8

080015b4 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <AX25_Packet_Validate+0x5c>)
 80015bc:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <AX25_Packet_Validate+0x60>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b77      	cmp	r3, #119	; 0x77
 80015c8:	dc0a      	bgt.n	80015e0 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <AX25_Packet_Validate+0x64>)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <AX25_Packet_Validate+0x68>)
 80015ce:	4614      	mov	r4, r2
 80015d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80015d2:	6020      	str	r0, [r4, #0]
 80015d4:	6061      	str	r1, [r4, #4]
 80015d6:	60a2      	str	r2, [r4, #8]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	7323      	strb	r3, [r4, #12]
		return false;
 80015dc:	2300      	movs	r3, #0
 80015de:	e013      	b.n	8001608 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <AX25_Packet_Validate+0x60>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00a      	beq.n	8001602 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <AX25_Packet_Validate+0x64>)
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <AX25_Packet_Validate+0x68>)
 80015f0:	4614      	mov	r4, r2
 80015f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80015f4:	6020      	str	r0, [r4, #0]
 80015f6:	6061      	str	r1, [r4, #4]
 80015f8:	60a2      	str	r2, [r4, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	7323      	strb	r3, [r4, #12]
		return false;
 80015fe:	2300      	movs	r3, #0
 8001600:	e002      	b.n	8001608 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8001602:	f000 f80d 	bl	8001620 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 8001606:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	20000a34 	.word	0x20000a34
 8001614:	20000a00 	.word	0x20000a00
 8001618:	20002638 	.word	0x20002638
 800161c:	080083d0 	.word	0x080083d0

08001620 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001626:	4b6e      	ldr	r3, [pc, #440]	; (80017e0 <set_packet_pointer_AX25+0x1c0>)
 8001628:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 800162a:	2310      	movs	r3, #16
 800162c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001630:	4a6d      	ldr	r2, [pc, #436]	; (80017e8 <set_packet_pointer_AX25+0x1c8>)
 8001632:	4614      	mov	r4, r2
 8001634:	469c      	mov	ip, r3
 8001636:	f104 0e20 	add.w	lr, r4, #32
 800163a:	4665      	mov	r5, ip
 800163c:	4626      	mov	r6, r4
 800163e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001640:	6028      	str	r0, [r5, #0]
 8001642:	6069      	str	r1, [r5, #4]
 8001644:	60aa      	str	r2, [r5, #8]
 8001646:	60eb      	str	r3, [r5, #12]
 8001648:	3410      	adds	r4, #16
 800164a:	f10c 0c10 	add.w	ip, ip, #16
 800164e:	4574      	cmp	r4, lr
 8001650:	d1f3      	bne.n	800163a <set_packet_pointer_AX25+0x1a>
 8001652:	4663      	mov	r3, ip
 8001654:	4622      	mov	r2, r4
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800165a:	4862      	ldr	r0, [pc, #392]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 800165c:	f7fe fdd8 	bl	8000210 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	230a      	movs	r3, #10
 8001666:	495f      	ldr	r1, [pc, #380]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001668:	4860      	ldr	r0, [pc, #384]	; (80017ec <set_packet_pointer_AX25+0x1cc>)
 800166a:	f005 fa5e 	bl	8006b2a <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8001672:	4a5c      	ldr	r2, [pc, #368]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001674:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <set_packet_pointer_AX25+0x1d0>)
 8001676:	4615      	mov	r5, r2
 8001678:	461c      	mov	r4, r3
 800167a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167c:	6028      	str	r0, [r5, #0]
 800167e:	6069      	str	r1, [r5, #4]
 8001680:	60aa      	str	r2, [r5, #8]
 8001682:	60eb      	str	r3, [r5, #12]
 8001684:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001686:	6128      	str	r0, [r5, #16]
 8001688:	6169      	str	r1, [r5, #20]
 800168a:	61aa      	str	r2, [r5, #24]
 800168c:	7823      	ldrb	r3, [r4, #0]
 800168e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001690:	4854      	ldr	r0, [pc, #336]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001692:	f7fe fdbd 	bl	8000210 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	230a      	movs	r3, #10
 800169c:	4951      	ldr	r1, [pc, #324]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 800169e:	4853      	ldr	r0, [pc, #332]	; (80017ec <set_packet_pointer_AX25+0x1cc>)
 80016a0:	f005 fa43 	bl	8006b2a <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016aa:	3310      	adds	r3, #16
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3370      	adds	r3, #112	; 0x70
 80016b4:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3370      	adds	r3, #112	; 0x70
 80016ba:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 80016bc:	4a49      	ldr	r2, [pc, #292]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 80016be:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <set_packet_pointer_AX25+0x1d4>)
 80016c0:	4615      	mov	r5, r2
 80016c2:	461c      	mov	r4, r3
 80016c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c6:	6028      	str	r0, [r5, #0]
 80016c8:	6069      	str	r1, [r5, #4]
 80016ca:	60aa      	str	r2, [r5, #8]
 80016cc:	60eb      	str	r3, [r5, #12]
 80016ce:	cc07      	ldmia	r4!, {r0, r1, r2}
 80016d0:	6128      	str	r0, [r5, #16]
 80016d2:	6169      	str	r1, [r5, #20]
 80016d4:	61aa      	str	r2, [r5, #24]
 80016d6:	7823      	ldrb	r3, [r4, #0]
 80016d8:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016da:	4842      	ldr	r0, [pc, #264]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 80016dc:	f7fe fd98 	bl	8000210 <strlen>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	230a      	movs	r3, #10
 80016e6:	493f      	ldr	r1, [pc, #252]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 80016e8:	4840      	ldr	r0, [pc, #256]	; (80017ec <set_packet_pointer_AX25+0x1cc>)
 80016ea:	f005 fa1e 	bl	8006b2a <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016f4:	3314      	adds	r3, #20
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3308      	adds	r3, #8
 80016fe:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3308      	adds	r3, #8
 8001704:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 8001706:	4a37      	ldr	r2, [pc, #220]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001708:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <set_packet_pointer_AX25+0x1d8>)
 800170a:	4615      	mov	r5, r2
 800170c:	461c      	mov	r4, r3
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	6028      	str	r0, [r5, #0]
 8001712:	6069      	str	r1, [r5, #4]
 8001714:	60aa      	str	r2, [r5, #8]
 8001716:	60eb      	str	r3, [r5, #12]
 8001718:	cc03      	ldmia	r4!, {r0, r1}
 800171a:	6128      	str	r0, [r5, #16]
 800171c:	6169      	str	r1, [r5, #20]
 800171e:	7823      	ldrb	r3, [r4, #0]
 8001720:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001722:	4830      	ldr	r0, [pc, #192]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001724:	f7fe fd74 	bl	8000210 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	230a      	movs	r3, #10
 800172e:	492d      	ldr	r1, [pc, #180]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001730:	482e      	ldr	r0, [pc, #184]	; (80017ec <set_packet_pointer_AX25+0x1cc>)
 8001732:	f005 f9fa 	bl	8006b2a <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800173c:	3318      	adds	r3, #24
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3308      	adds	r3, #8
 8001746:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	3308      	adds	r3, #8
 800174c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <set_packet_pointer_AX25+0x1dc>)
 8001752:	4615      	mov	r5, r2
 8001754:	461c      	mov	r4, r3
 8001756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001758:	6028      	str	r0, [r5, #0]
 800175a:	6069      	str	r1, [r5, #4]
 800175c:	60aa      	str	r2, [r5, #8]
 800175e:	60eb      	str	r3, [r5, #12]
 8001760:	cc03      	ldmia	r4!, {r0, r1}
 8001762:	6128      	str	r0, [r5, #16]
 8001764:	6169      	str	r1, [r5, #20]
 8001766:	8823      	ldrh	r3, [r4, #0]
 8001768:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800176a:	481e      	ldr	r0, [pc, #120]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 800176c:	f7fe fd50 	bl	8000210 <strlen>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	230a      	movs	r3, #10
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 8001778:	481c      	ldr	r0, [pc, #112]	; (80017ec <set_packet_pointer_AX25+0x1cc>)
 800177a:	f005 f9d6 	bl	8006b2a <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001784:	331c      	adds	r3, #28
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <set_packet_pointer_AX25+0x1e0>)
 800179e:	4615      	mov	r5, r2
 80017a0:	461c      	mov	r4, r3
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	6028      	str	r0, [r5, #0]
 80017a6:	6069      	str	r1, [r5, #4]
 80017a8:	60aa      	str	r2, [r5, #8]
 80017aa:	60eb      	str	r3, [r5, #12]
 80017ac:	cc03      	ldmia	r4!, {r0, r1}
 80017ae:	6128      	str	r0, [r5, #16]
 80017b0:	6169      	str	r1, [r5, #20]
 80017b2:	7823      	ldrb	r3, [r4, #0]
 80017b4:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 80017b8:	f7fe fd2a 	bl	8000210 <strlen>
 80017bc:	4603      	mov	r3, r0
 80017be:	b29a      	uxth	r2, r3
 80017c0:	230a      	movs	r3, #10
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <set_packet_pointer_AX25+0x1c4>)
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <set_packet_pointer_AX25+0x1cc>)
 80017c6:	f005 f9b0 	bl	8006b2a <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017d0:	3304      	adds	r3, #4
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000a34 	.word	0x20000a34
 80017e4:	20002638 	.word	0x20002638
 80017e8:	080083e0 	.word	0x080083e0
 80017ec:	200034f4 	.word	0x200034f4
 80017f0:	08008404 	.word	0x08008404
 80017f4:	08008424 	.word	0x08008424
 80017f8:	08008444 	.word	0x08008444
 80017fc:	08008460 	.word	0x08008460
 8001800:	0800847c 	.word	0x0800847c

08001804 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <AX25_TO_KISS+0x10c>)
 800180c:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 800180e:	f7ff ff07 	bl	8001620 <set_packet_pointer_AX25>
	print_AX25();
 8001812:	f001 fa83 	bl	8002d1c <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3308      	adds	r3, #8
 800181a:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	493d      	ldr	r1, [pc, #244]	; (8001914 <AX25_TO_KISS+0x110>)
 8001820:	461a      	mov	r2, r3
 8001822:	460b      	mov	r3, r1
 8001824:	cb03      	ldmia	r3!, {r0, r1}
 8001826:	6010      	str	r0, [r2, #0]
 8001828:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3308      	adds	r3, #8
 800182e:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	e014      	b.n	8001860 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800183c:	3310      	adds	r3, #16
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8001848:	4413      	add	r3, r2
 800184a:	2208      	movs	r2, #8
 800184c:	4619      	mov	r1, r3
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f006 f880 	bl	8007954 <memcpy>
		cpy_from_ptr += 8;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3308      	adds	r3, #8
 8001858:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3301      	adds	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b0d      	cmp	r3, #13
 8001864:	dde7      	ble.n	8001836 <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800186c:	3314      	adds	r3, #20
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2208      	movs	r2, #8
 8001872:	4619      	mov	r1, r3
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f006 f86d 	bl	8007954 <memcpy>
	cpy_from_ptr += control_len;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3308      	adds	r3, #8
 800187e:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4924      	ldr	r1, [pc, #144]	; (8001914 <AX25_TO_KISS+0x110>)
 8001884:	461a      	mov	r2, r3
 8001886:	460b      	mov	r3, r1
 8001888:	cb03      	ldmia	r3!, {r0, r1}
 800188a:	6010      	str	r0, [r2, #0]
 800188c:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	e019      	b.n	80018c8 <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800189a:	331c      	adds	r3, #28
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1acb      	subs	r3, r1, r3
 80018ae:	3b08      	subs	r3, #8
 80018b0:	4413      	add	r3, r2
 80018b2:	2208      	movs	r2, #8
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f006 f84c 	bl	8007954 <memcpy>
		cpy_from_ptr += 8;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3308      	adds	r3, #8
 80018c0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3301      	adds	r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da00      	bge.n	80018d6 <AX25_TO_KISS+0xd2>
 80018d4:	3307      	adds	r3, #7
 80018d6:	10db      	asrs	r3, r3, #3
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4293      	cmp	r3, r2
 80018de:	dbd9      	blt.n	8001894 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	490c      	ldr	r1, [pc, #48]	; (8001914 <AX25_TO_KISS+0x110>)
 80018e4:	461a      	mov	r2, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	cb03      	ldmia	r3!, {r0, r1}
 80018ea:	6010      	str	r0, [r2, #0]
 80018ec:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018f4:	3314      	adds	r3, #20
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2208      	movs	r2, #8
 80018fa:	68f9      	ldr	r1, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 f829 	bl	8007954 <memcpy>
	cpy_from_ptr += control_len;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3308      	adds	r3, #8
 8001906:	60fb      	str	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000a34 	.word	0x20000a34
 8001914:	20000000 	.word	0x20000000

08001918 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <receiving_KISS+0xc0>)
 8001920:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <receiving_KISS+0xc4>)
 8001924:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	7b5b      	ldrb	r3, [r3, #13]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d04e      	beq.n	80019cc <receiving_KISS+0xb4>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	461a      	mov	r2, r3
 8001934:	492a      	ldr	r1, [pc, #168]	; (80019e0 <receiving_KISS+0xc8>)
 8001936:	482b      	ldr	r0, [pc, #172]	; (80019e4 <receiving_KISS+0xcc>)
 8001938:	f006 f838 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800193c:	4829      	ldr	r0, [pc, #164]	; (80019e4 <receiving_KISS+0xcc>)
 800193e:	f7fe fc67 	bl	8000210 <strlen>
 8001942:	4603      	mov	r3, r0
 8001944:	b29a      	uxth	r2, r3
 8001946:	230a      	movs	r3, #10
 8001948:	4926      	ldr	r1, [pc, #152]	; (80019e4 <receiving_KISS+0xcc>)
 800194a:	4827      	ldr	r0, [pc, #156]	; (80019e8 <receiving_KISS+0xd0>)
 800194c:	f005 f8ed 	bl	8006b2a <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e01f      	b.n	800199c <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	7b9b      	ldrb	r3, [r3, #14]
 800196a:	71fb      	strb	r3, [r7, #7]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	3307      	adds	r3, #7
 800197a:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	b29b      	uxth	r3, r3
 8001980:	2201      	movs	r2, #1
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fa11 	bl	8000dac <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001990:	3309      	adds	r3, #9
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dbdb      	blt.n	800195c <receiving_KISS+0x44>
		}

		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019ae:	330c      	adds	r3, #12
 80019b0:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019b8:	330c      	adds	r3, #12
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b13      	subs	r3, #19
 80019be:	00da      	lsls	r2, r3, #3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019c6:	601a      	str	r2, [r3, #0]

		return true;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <receiving_KISS+0xb6>
	}
	return false;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20001da0 	.word	0x20001da0
 80019dc:	20000a34 	.word	0x20000a34
 80019e0:	08008498 	.word	0x08008498
 80019e4:	20002638 	.word	0x20002638
 80019e8:	200034f4 	.word	0x200034f4

080019ec <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 80019ec:	b5b0      	push	{r4, r5, r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <set_packet_pointer_KISS+0xac>)
 80019f4:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 80019f6:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <set_packet_pointer_KISS+0xb0>)
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <set_packet_pointer_KISS+0xb4>)
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a00:	6020      	str	r0, [r4, #0]
 8001a02:	6061      	str	r1, [r4, #4]
 8001a04:	60a2      	str	r2, [r4, #8]
 8001a06:	60e3      	str	r3, [r4, #12]
 8001a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0a:	6120      	str	r0, [r4, #16]
 8001a0c:	6161      	str	r1, [r4, #20]
 8001a0e:	61a2      	str	r2, [r4, #24]
 8001a10:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a12:	4822      	ldr	r0, [pc, #136]	; (8001a9c <set_packet_pointer_KISS+0xb0>)
 8001a14:	f7fe fbfc 	bl	8000210 <strlen>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	491f      	ldr	r1, [pc, #124]	; (8001a9c <set_packet_pointer_KISS+0xb0>)
 8001a20:	4820      	ldr	r0, [pc, #128]	; (8001aa4 <set_packet_pointer_KISS+0xb8>)
 8001a22:	f005 f882 	bl	8006b2a <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a32:	330c      	adds	r3, #12
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3b02      	subs	r3, #2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3b70      	subs	r3, #112	; 0x70
 8001a42:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	3b08      	subs	r3, #8
 8001a54:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a5c:	3314      	adds	r3, #20
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	3b08      	subs	r3, #8
 8001a66:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a6e:	3318      	adds	r3, #24
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a8a:	331c      	adds	r3, #28
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bdb0      	pop	{r4, r5, r7, pc}
 8001a98:	20000a34 	.word	0x20000a34
 8001a9c:	20002638 	.word	0x20002638
 8001aa0:	080084cc 	.word	0x080084cc
 8001aa4:	200034f4 	.word	0x200034f4

08001aa8 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001aae:	4b4b      	ldr	r3, [pc, #300]	; (8001bdc <KISS_TO_AX25+0x134>)
 8001ab0:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <KISS_TO_AX25+0x138>)
 8001ab4:	4a4b      	ldr	r2, [pc, #300]	; (8001be4 <KISS_TO_AX25+0x13c>)
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	469c      	mov	ip, r3
 8001aba:	f104 0e20 	add.w	lr, r4, #32
 8001abe:	4665      	mov	r5, ip
 8001ac0:	4626      	mov	r6, r4
 8001ac2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ac4:	6028      	str	r0, [r5, #0]
 8001ac6:	6069      	str	r1, [r5, #4]
 8001ac8:	60aa      	str	r2, [r5, #8]
 8001aca:	60eb      	str	r3, [r5, #12]
 8001acc:	3410      	adds	r4, #16
 8001ace:	f10c 0c10 	add.w	ip, ip, #16
 8001ad2:	4574      	cmp	r4, lr
 8001ad4:	d1f3      	bne.n	8001abe <KISS_TO_AX25+0x16>
 8001ad6:	4663      	mov	r3, ip
 8001ad8:	4622      	mov	r2, r4
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ade:	4840      	ldr	r0, [pc, #256]	; (8001be0 <KISS_TO_AX25+0x138>)
 8001ae0:	f7fe fb96 	bl	8000210 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	230a      	movs	r3, #10
 8001aea:	493d      	ldr	r1, [pc, #244]	; (8001be0 <KISS_TO_AX25+0x138>)
 8001aec:	483e      	ldr	r0, [pc, #248]	; (8001be8 <KISS_TO_AX25+0x140>)
 8001aee:	f005 f81c 	bl	8006b2a <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8001af2:	f7ff ff7b 	bl	80019ec <set_packet_pointer_KISS>
	print_KISS();
 8001af6:	f001 fd91 	bl	800361c <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b06:	330c      	adds	r3, #12
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3b02      	subs	r3, #2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	60bb      	str	r3, [r7, #8]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8001b12:	f7ff fd85 	bl	8001620 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b70      	subs	r3, #112	; 0x70
 8001b1a:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b22:	3310      	adds	r3, #16
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2270      	movs	r2, #112	; 0x70
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 ff12 	bl	8007954 <memcpy>

	cpy_from_ptr -= control_len;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3b08      	subs	r3, #8
 8001b34:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b3c:	3314      	adds	r3, #20
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2208      	movs	r2, #8
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f005 ff05 	bl	8007954 <memcpy>

	cpy_from_ptr -= PID_len;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3b08      	subs	r3, #8
 8001b4e:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b56:	3318      	adds	r3, #24
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 fef8 	bl	8007954 <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b7a:	331c      	adds	r3, #28
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	f005 fee3 	bl	8007954 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3380      	adds	r3, #128	; 0x80
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <KISS_TO_AX25+0x144>)
 8001b9a:	6013      	str	r3, [r2, #0]
	crc_generate();
 8001b9c:	f000 faca 	bl	8002134 <crc_generate>
	print_AX25();
 8001ba0:	f001 f8bc 	bl	8002d1c <print_AX25>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <KISS_TO_AX25+0x138>)
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <KISS_TO_AX25+0x148>)
 8001ba8:	4615      	mov	r5, r2
 8001baa:	461c      	mov	r4, r3
 8001bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bae:	6028      	str	r0, [r5, #0]
 8001bb0:	6069      	str	r1, [r5, #4]
 8001bb2:	60aa      	str	r2, [r5, #8]
 8001bb4:	60eb      	str	r3, [r5, #12]
 8001bb6:	cc03      	ldmia	r4!, {r0, r1}
 8001bb8:	6128      	str	r0, [r5, #16]
 8001bba:	6169      	str	r1, [r5, #20]
 8001bbc:	7823      	ldrb	r3, [r4, #0]
 8001bbe:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <KISS_TO_AX25+0x138>)
 8001bc2:	f7fe fb25 	bl	8000210 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	230a      	movs	r3, #10
 8001bcc:	4904      	ldr	r1, [pc, #16]	; (8001be0 <KISS_TO_AX25+0x138>)
 8001bce:	4806      	ldr	r0, [pc, #24]	; (8001be8 <KISS_TO_AX25+0x140>)
 8001bd0:	f004 ffab 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e022      	b.n	8001c20 <KISS_TO_AX25+0x178>
 8001bda:	bf00      	nop
 8001bdc:	20000a34 	.word	0x20000a34
 8001be0:	20002638 	.word	0x20002638
 8001be4:	080084ec 	.word	0x080084ec
 8001be8:	200034f4 	.word	0x200034f4
 8001bec:	20000a00 	.word	0x20000a00
 8001bf0:	08008510 	.word	0x08008510
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	49a5      	ldr	r1, [pc, #660]	; (8001e94 <KISS_TO_AX25+0x3ec>)
 8001c00:	48a5      	ldr	r0, [pc, #660]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001c02:	f005 fed3 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c06:	48a4      	ldr	r0, [pc, #656]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001c08:	f7fe fb02 	bl	8000210 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	230a      	movs	r3, #10
 8001c12:	49a1      	ldr	r1, [pc, #644]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001c14:	48a1      	ldr	r0, [pc, #644]	; (8001e9c <KISS_TO_AX25+0x3f4>)
 8001c16:	f004 ff88 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	4b9f      	ldr	r3, [pc, #636]	; (8001ea0 <KISS_TO_AX25+0x3f8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3310      	adds	r3, #16
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbe3      	blt.n	8001bf4 <KISS_TO_AX25+0x14c>
	}
	sprintf(uartData, "\n");
 8001c2c:	4a9a      	ldr	r2, [pc, #616]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001c2e:	4b9d      	ldr	r3, [pc, #628]	; (8001ea4 <KISS_TO_AX25+0x3fc>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c34:	4898      	ldr	r0, [pc, #608]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001c36:	f7fe faeb 	bl	8000210 <strlen>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	230a      	movs	r3, #10
 8001c40:	4995      	ldr	r1, [pc, #596]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001c42:	4896      	ldr	r0, [pc, #600]	; (8001e9c <KISS_TO_AX25+0x3f4>)
 8001c44:	f004 ff71 	bl	8006b2a <HAL_UART_Transmit>

	//BIT STUFFING NEEDED
	int ax25_len = rxBit_count + FCS_len;
 8001c48:	4b95      	ldr	r3, [pc, #596]	; (8001ea0 <KISS_TO_AX25+0x3f8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3310      	adds	r3, #16
 8001c4e:	607b      	str	r3, [r7, #4]
	int ones_count = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
	ones_count = bitstuffing(local_packet->address,address_len,ax25_len, ones_count, &(local_packet->stuffed_address));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c5a:	3310      	adds	r3, #16
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c64:	3310      	adds	r3, #16
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	2170      	movs	r1, #112	; 0x70
 8001c6e:	f000 f97b 	bl	8001f68 <bitstuffing>
 8001c72:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_address;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c84:	3310      	adds	r3, #16
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	441a      	add	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c90:	3304      	adds	r3, #4
 8001c92:	601a      	str	r2, [r3, #0]
	ax25_len -= address_len;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b70      	subs	r3, #112	; 0x70
 8001c98:	607b      	str	r3, [r7, #4]

	local_packet->control += local_packet->bit_stuffed_zeros;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ca0:	3314      	adds	r3, #20
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001caa:	3304      	adds	r3, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	441a      	add	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->control,control_len,ax25_len, ones_count, &(local_packet->stuffed_control));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001cc0:	3314      	adds	r3, #20
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cca:	3314      	adds	r3, #20
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	2108      	movs	r1, #8
 8001cd4:	f000 f948 	bl	8001f68 <bitstuffing>
 8001cd8:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_control;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cea:	3314      	adds	r3, #20
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	441a      	add	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	601a      	str	r2, [r3, #0]
	ax25_len -= control_len;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3b08      	subs	r3, #8
 8001cfe:	607b      	str	r3, [r7, #4]

	local_packet->PID += local_packet->bit_stuffed_zeros;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d06:	3318      	adds	r3, #24
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d10:	3304      	adds	r3, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	441a      	add	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->PID,PID_len,ax25_len, ones_count, &(local_packet->stuffed_PID));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d26:	3318      	adds	r3, #24
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d30:	3318      	adds	r3, #24
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	2108      	movs	r1, #8
 8001d3a:	f000 f915 	bl	8001f68 <bitstuffing>
 8001d3e:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_PID;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d46:	3304      	adds	r3, #4
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d50:	3318      	adds	r3, #24
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	441a      	add	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	601a      	str	r2, [r3, #0]
	ax25_len -= PID_len;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b08      	subs	r3, #8
 8001d64:	607b      	str	r3, [r7, #4]

	local_packet->Info += local_packet->bit_stuffed_zeros;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d6c:	331c      	adds	r3, #28
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d76:	3304      	adds	r3, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	441a      	add	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d82:	331c      	adds	r3, #28
 8001d84:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->Info,local_packet->Info_Len, ax25_len, ones_count, &(local_packet->stuffed_Info));
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d8c:	331c      	adds	r3, #28
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d9e:	331c      	adds	r3, #28
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	f000 f8df 	bl	8001f68 <bitstuffing>
 8001daa:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_Info;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001db2:	3304      	adds	r3, #4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001dbc:	331c      	adds	r3, #28
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001dc8:	3304      	adds	r3, #4
 8001dca:	601a      	str	r2, [r3, #0]
	ax25_len -= local_packet->Info_Len;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	607b      	str	r3, [r7, #4]

	local_packet->FCS += local_packet->bit_stuffed_zeros;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001de0:	3304      	adds	r3, #4
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001dea:	3304      	adds	r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	441a      	add	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001df6:	3304      	adds	r3, #4
 8001df8:	601a      	str	r2, [r3, #0]
	bitstuffing(local_packet->FCS,FCS_len, ax25_len, ones_count, &(local_packet->stuffed_FCS));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e00:	3304      	adds	r3, #4
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	2110      	movs	r1, #16
 8001e12:	f000 f8a9 	bl	8001f68 <bitstuffing>
	local_packet->bit_stuffed_zeros += local_packet->stuffed_FCS;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	441a      	add	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e30:	3304      	adds	r3, #4
 8001e32:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "bit stuffed zeros = %d\n",local_packet->bit_stuffed_zeros);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4919      	ldr	r1, [pc, #100]	; (8001ea8 <KISS_TO_AX25+0x400>)
 8001e42:	4815      	ldr	r0, [pc, #84]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001e44:	f005 fdb2 	bl	80079ac <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e48:	4813      	ldr	r0, [pc, #76]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001e4a:	f7fe f9e1 	bl	8000210 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	230a      	movs	r3, #10
 8001e54:	4910      	ldr	r1, [pc, #64]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001e56:	4811      	ldr	r0, [pc, #68]	; (8001e9c <KISS_TO_AX25+0x3f4>)
 8001e58:	f004 fe67 	bl	8006b2a <HAL_UART_Transmit>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <KISS_TO_AX25+0x404>)
 8001e60:	4615      	mov	r5, r2
 8001e62:	461c      	mov	r4, r3
 8001e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e66:	6028      	str	r0, [r5, #0]
 8001e68:	6069      	str	r1, [r5, #4]
 8001e6a:	60aa      	str	r2, [r5, #8]
 8001e6c:	60eb      	str	r3, [r5, #12]
 8001e6e:	cc03      	ldmia	r4!, {r0, r1}
 8001e70:	6128      	str	r0, [r5, #16]
 8001e72:	6169      	str	r1, [r5, #20]
 8001e74:	7823      	ldrb	r3, [r4, #0]
 8001e76:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001e7a:	f7fe f9c9 	bl	8000210 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	230a      	movs	r3, #10
 8001e84:	4904      	ldr	r1, [pc, #16]	; (8001e98 <KISS_TO_AX25+0x3f0>)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <KISS_TO_AX25+0x3f4>)
 8001e88:	f004 fe4f 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e024      	b.n	8001edc <KISS_TO_AX25+0x434>
 8001e92:	bf00      	nop
 8001e94:	0800852c 	.word	0x0800852c
 8001e98:	20002638 	.word	0x20002638
 8001e9c:	200034f4 	.word	0x200034f4
 8001ea0:	20000a00 	.word	0x20000a00
 8001ea4:	08008534 	.word	0x08008534
 8001ea8:	08008538 	.word	0x08008538
 8001eac:	08008510 	.word	0x08008510
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	491b      	ldr	r1, [pc, #108]	; (8001f28 <KISS_TO_AX25+0x480>)
 8001ebc:	481b      	ldr	r0, [pc, #108]	; (8001f2c <KISS_TO_AX25+0x484>)
 8001ebe:	f005 fd75 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ec2:	481a      	ldr	r0, [pc, #104]	; (8001f2c <KISS_TO_AX25+0x484>)
 8001ec4:	f7fe f9a4 	bl	8000210 <strlen>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	230a      	movs	r3, #10
 8001ece:	4917      	ldr	r1, [pc, #92]	; (8001f2c <KISS_TO_AX25+0x484>)
 8001ed0:	4817      	ldr	r0, [pc, #92]	; (8001f30 <KISS_TO_AX25+0x488>)
 8001ed2:	f004 fe2a 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <KISS_TO_AX25+0x48c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f103 0210 	add.w	r2, r3, #16
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001eea:	3304      	adds	r3, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbdc      	blt.n	8001eb0 <KISS_TO_AX25+0x408>
	}
	sprintf(uartData, "\n");
 8001ef6:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <KISS_TO_AX25+0x484>)
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <KISS_TO_AX25+0x490>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001efe:	480b      	ldr	r0, [pc, #44]	; (8001f2c <KISS_TO_AX25+0x484>)
 8001f00:	f7fe f986 	bl	8000210 <strlen>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	230a      	movs	r3, #10
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <KISS_TO_AX25+0x484>)
 8001f0c:	4808      	ldr	r0, [pc, #32]	; (8001f30 <KISS_TO_AX25+0x488>)
 8001f0e:	f004 fe0c 	bl	8006b2a <HAL_UART_Transmit>
	rxBit_count = 0;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <KISS_TO_AX25+0x48c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
//	Print the ax25 packet
	print_outAX25();
 8001f18:	f001 f8d4 	bl	80030c4 <print_outAX25>
	return true; //valid packet
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	0800852c 	.word	0x0800852c
 8001f2c:	20002638 	.word	0x20002638
 8001f30:	200034f4 	.word	0x200034f4
 8001f34:	20000a00 	.word	0x20000a00
 8001f38:	08008534 	.word	0x08008534

08001f3c <bit_stuff>:


void bit_stuff(bool* array,int bits_left){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	1c98      	adds	r0, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f005 fd0a 	bl	800796a <memmove>
	*(array+1) = false;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <bitstuffing>:

int bitstuffing(bool* packet,int len,int bits_left, int ones_count,int *stuff){
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <bitstuffing+0xcc>)
 8001f78:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <bitstuffing+0xd0>)
 8001f7a:	4614      	mov	r4, r2
 8001f7c:	469c      	mov	ip, r3
 8001f7e:	f104 0e20 	add.w	lr, r4, #32
 8001f82:	4665      	mov	r5, ip
 8001f84:	4626      	mov	r6, r4
 8001f86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f88:	6028      	str	r0, [r5, #0]
 8001f8a:	6069      	str	r1, [r5, #4]
 8001f8c:	60aa      	str	r2, [r5, #8]
 8001f8e:	60eb      	str	r3, [r5, #12]
 8001f90:	3410      	adds	r4, #16
 8001f92:	f10c 0c10 	add.w	ip, ip, #16
 8001f96:	4574      	cmp	r4, lr
 8001f98:	d1f3      	bne.n	8001f82 <bitstuffing+0x1a>
 8001f9a:	4663      	mov	r3, ip
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	6810      	ldr	r0, [r2, #0]
 8001fa0:	6018      	str	r0, [r3, #0]
 8001fa2:	7912      	ldrb	r2, [r2, #4]
 8001fa4:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fa6:	4823      	ldr	r0, [pc, #140]	; (8002034 <bitstuffing+0xcc>)
 8001fa8:	f7fe f932 	bl	8000210 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	230a      	movs	r3, #10
 8001fb2:	4920      	ldr	r1, [pc, #128]	; (8002034 <bitstuffing+0xcc>)
 8001fb4:	4821      	ldr	r0, [pc, #132]	; (800203c <bitstuffing+0xd4>)
 8001fb6:	f004 fdb8 	bl	8006b2a <HAL_UART_Transmit>

	int bit_stuff_count = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
	bool *curr_mem = packet;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	617b      	str	r3, [r7, #20]
	int left;

	//Increment through array
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	e027      	b.n	8002018 <bitstuffing+0xb0>
		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01c      	beq.n	800200e <bitstuffing+0xa6>
        	//Inc ones count
        	ones_count++;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	603b      	str	r3, [r7, #0]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d118      	bne.n	8002012 <bitstuffing+0xaa>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	441a      	add	r2, r3
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	613b      	str	r3, [r7, #16]
                bit_stuff(curr_mem+i,left);
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	6939      	ldr	r1, [r7, #16]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ffa0 	bl	8001f3c <bit_stuff>

                bit_stuff_count++;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
                ones_count = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
                i++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3301      	adds	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e001      	b.n	8002012 <bitstuffing+0xaa>
            }
        }
        else{
        	ones_count = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len+bit_stuff_count; i++){
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	3301      	adds	r3, #1
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbd1      	blt.n	8001fc8 <bitstuffing+0x60>
        }
	}
	*stuff = bit_stuff_count;
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	601a      	str	r2, [r3, #0]
	return ones_count;
 800202a:	683b      	ldr	r3, [r7, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3724      	adds	r7, #36	; 0x24
 8002030:	46bd      	mov	sp, r7
 8002032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002034:	20002638 	.word	0x20002638
 8002038:	08008550 	.word	0x08008550
 800203c:	200034f4 	.word	0x200034f4

08002040 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <crc_calc+0xe0>)
 800204e:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 800205a:	f248 4308 	movw	r3, #33800	; 0x8408
 800205e:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4053      	eors	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	105a      	asrs	r2, r3, #1
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <crc_calc+0x3e>
 8002078:	f248 4308 	movw	r3, #33800	; 0x8408
 800207c:	e000      	b.n	8002080 <crc_calc+0x40>
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	405a      	eors	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <crc_calc+0xe4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	db38      	blt.n	8002116 <crc_calc+0xd6>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 80020ac:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80020ba:	3308      	adds	r3, #8
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	4919      	ldr	r1, [pc, #100]	; (8002128 <crc_calc+0xe8>)
 80020c2:	481a      	ldr	r0, [pc, #104]	; (800212c <crc_calc+0xec>)
 80020c4:	f005 fc72 	bl	80079ac <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020c8:	4818      	ldr	r0, [pc, #96]	; (800212c <crc_calc+0xec>)
 80020ca:	f7fe f8a1 	bl	8000210 <strlen>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	230a      	movs	r3, #10
 80020d4:	4915      	ldr	r1, [pc, #84]	; (800212c <crc_calc+0xec>)
 80020d6:	4816      	ldr	r0, [pc, #88]	; (8002130 <crc_calc+0xf0>)
 80020d8:	f004 fd27 	bl	8006b2a <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80020e2:	3310      	adds	r3, #16
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d012      	beq.n	8002116 <crc_calc+0xd6>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b298      	uxth	r0, r3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80020fc:	3304      	adds	r3, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	f7fe fe52 	bl	8000dac <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800210e:	3308      	adds	r3, #8
 8002110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002114:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000a34 	.word	0x20000a34
 8002124:	20000a00 	.word	0x20000a00
 8002128:	08008578 	.word	0x08008578
 800212c:	20002638 	.word	0x20002638
 8002130:	200034f4 	.word	0x200034f4

08002134 <crc_generate>:

void crc_generate(){
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800213a:	4b73      	ldr	r3, [pc, #460]	; (8002308 <crc_generate+0x1d4>)
 800213c:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002144:	3308      	adds	r3, #8
 8002146:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800214e:	330c      	adds	r3, #12
 8002150:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002158:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <crc_generate+0x1d8>)
 8002162:	4b6b      	ldr	r3, [pc, #428]	; (8002310 <crc_generate+0x1dc>)
 8002164:	4615      	mov	r5, r2
 8002166:	461c      	mov	r4, r3
 8002168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216a:	6028      	str	r0, [r5, #0]
 800216c:	6069      	str	r1, [r5, #4]
 800216e:	60aa      	str	r2, [r5, #8]
 8002170:	60eb      	str	r3, [r5, #12]
 8002172:	cc03      	ldmia	r4!, {r0, r1}
 8002174:	6128      	str	r0, [r5, #16]
 8002176:	6169      	str	r1, [r5, #20]
 8002178:	8823      	ldrh	r3, [r4, #0]
 800217a:	78a2      	ldrb	r2, [r4, #2]
 800217c:	832b      	strh	r3, [r5, #24]
 800217e:	4613      	mov	r3, r2
 8002180:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002182:	4862      	ldr	r0, [pc, #392]	; (800230c <crc_generate+0x1d8>)
 8002184:	f7fe f844 	bl	8000210 <strlen>
 8002188:	4603      	mov	r3, r0
 800218a:	b29a      	uxth	r2, r3
 800218c:	230a      	movs	r3, #10
 800218e:	495f      	ldr	r1, [pc, #380]	; (800230c <crc_generate+0x1d8>)
 8002190:	4860      	ldr	r0, [pc, #384]	; (8002314 <crc_generate+0x1e0>)
 8002192:	f004 fcca 	bl	8006b2a <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800219c:	3310      	adds	r3, #16
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3368      	adds	r3, #104	; 0x68
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	e017      	b.n	80021da <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e00b      	b.n	80021c8 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff3f 	bl	8002040 <crc_calc>
		for(int j = 0;j<8;j++){
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b07      	cmp	r3, #7
 80021cc:	ddf0      	ble.n	80021b0 <crc_generate+0x7c>
		}
		curr_mem -= 8;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	3b08      	subs	r3, #8
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	3301      	adds	r3, #1
 80021d8:	623b      	str	r3, [r7, #32]
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b0d      	cmp	r3, #13
 80021de:	dde4      	ble.n	80021aa <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80021e6:	3314      	adds	r3, #20
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	e00f      	b.n	8002212 <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80021f8:	3314      	adds	r3, #20
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff1a 	bl	8002040 <crc_calc>
	for(int i = 0; i < control_len; i++){
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	3301      	adds	r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b07      	cmp	r3, #7
 8002216:	ddec      	ble.n	80021f2 <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800221e:	3318      	adds	r3, #24
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e00f      	b.n	800224a <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002230:	3318      	adds	r3, #24
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	4413      	add	r3, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fefe 	bl	8002040 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3301      	adds	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b07      	cmp	r3, #7
 800224e:	ddec      	ble.n	800222a <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002256:	331c      	adds	r3, #28
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3b08      	subs	r3, #8
 8002264:	4413      	add	r3, r2
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e017      	b.n	800229e <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e00b      	b.n	800228c <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fedd 	bl	8002040 <crc_calc>
		for(int j = 0;j<8;j++){
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3301      	adds	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b07      	cmp	r3, #7
 8002290:	ddf0      	ble.n	8002274 <crc_generate+0x140>
		}
		curr_mem -= 8;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	3b08      	subs	r3, #8
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	3301      	adds	r3, #1
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da00      	bge.n	80022ac <crc_generate+0x178>
 80022aa:	3307      	adds	r3, #7
 80022ac:	10db      	asrs	r3, r3, #3
 80022ae:	461a      	mov	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4293      	cmp	r3, r2
 80022b4:	dbdb      	blt.n	800226e <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <crc_generate+0x1e4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4917      	ldr	r1, [pc, #92]	; (800231c <crc_generate+0x1e8>)
 80022be:	4813      	ldr	r0, [pc, #76]	; (800230c <crc_generate+0x1d8>)
 80022c0:	f005 fb74 	bl	80079ac <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022c4:	4811      	ldr	r0, [pc, #68]	; (800230c <crc_generate+0x1d8>)
 80022c6:	f7fd ffa3 	bl	8000210 <strlen>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	230a      	movs	r3, #10
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <crc_generate+0x1d8>)
 80022d2:	4810      	ldr	r0, [pc, #64]	; (8002314 <crc_generate+0x1e0>)
 80022d4:	f004 fc29 	bl	8006b2a <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4910      	ldr	r1, [pc, #64]	; (8002320 <crc_generate+0x1ec>)
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <crc_generate+0x1d8>)
 80022e2:	f005 fb63 	bl	80079ac <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022e6:	4809      	ldr	r0, [pc, #36]	; (800230c <crc_generate+0x1d8>)
 80022e8:	f7fd ff92 	bl	8000210 <strlen>
 80022ec:	4603      	mov	r3, r0
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	230a      	movs	r3, #10
 80022f2:	4906      	ldr	r1, [pc, #24]	; (800230c <crc_generate+0x1d8>)
 80022f4:	4807      	ldr	r0, [pc, #28]	; (8002314 <crc_generate+0x1e0>)
 80022f6:	f004 fc18 	bl	8006b2a <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bdb0      	pop	{r4, r5, r7, pc}
 8002308:	20000a34 	.word	0x20000a34
 800230c:	20002638 	.word	0x20002638
 8002310:	08008598 	.word	0x08008598
 8002314:	200034f4 	.word	0x200034f4
 8002318:	20000a00 	.word	0x20000a00
 800231c:	080085b4 	.word	0x080085b4
 8002320:	080085c4 	.word	0x080085c4

08002324 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 800232e:	f000 fa37 	bl	80027a0 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <initProgram+0x58>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8002338:	f000 f826 	bl	8002388 <toggleMode>
	toggleMode();
 800233c:	f000 f824 	bl	8002388 <toggleMode>

	if (mode) {
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <initProgram+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <initProgram+0x5c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2264      	movs	r2, #100	; 0x64
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <initProgram+0x60>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
 800235a:	e008      	b.n	800236e <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <initProgram+0x5c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f242 7210 	movw	r2, #10000	; 0x2710
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <initProgram+0x60>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2268      	movs	r2, #104	; 0x68
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 800236e:	f7fe fddb 	bl	8000f28 <init_AX25>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000349c 	.word	0x2000349c
 8002380:	200034b4 	.word	0x200034b4
 8002384:	200031fc 	.word	0x200031fc

08002388 <toggleMode>:



void toggleMode() {
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800238c:	2006      	movs	r0, #6
 800238e:	f002 fa36 	bl	80047fe <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 8002392:	4b27      	ldr	r3, [pc, #156]	; (8002430 <toggleMode+0xa8>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <toggleMode+0xa8>)
 80023ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <toggleMode+0xa8>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	2120      	movs	r1, #32
 80023b8:	481e      	ldr	r0, [pc, #120]	; (8002434 <toggleMode+0xac>)
 80023ba:	f003 f9d3 	bl	8005764 <HAL_GPIO_WritePin>
	midbit = false;
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <toggleMode+0xb0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 80023c4:	481d      	ldr	r0, [pc, #116]	; (800243c <toggleMode+0xb4>)
 80023c6:	f003 ff62 	bl	800628e <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <toggleMode+0xb4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 80023d2:	481b      	ldr	r0, [pc, #108]	; (8002440 <toggleMode+0xb8>)
 80023d4:	f003 ff5b 	bl	800628e <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <toggleMode+0xb8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <toggleMode+0xa8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <toggleMode+0xb4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f2:	e015      	b.n	8002420 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <toggleMode+0xbc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <toggleMode+0xb4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2268      	movs	r2, #104	; 0x68
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 8002406:	480e      	ldr	r0, [pc, #56]	; (8002440 <toggleMode+0xb8>)
 8002408:	f003 ff1d 	bl	8006246 <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <toggleMode+0xb4>)
 800240e:	f003 ff69 	bl	80062e4 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002412:	2100      	movs	r1, #0
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <toggleMode+0xc0>)
 8002416:	f002 fadd 	bl	80049d4 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800241a:	2006      	movs	r0, #6
 800241c:	f002 f9e1 	bl	80047e2 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002426:	4803      	ldr	r0, [pc, #12]	; (8002434 <toggleMode+0xac>)
 8002428:	f003 f99c 	bl	8005764 <HAL_GPIO_WritePin>
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	2000349c 	.word	0x2000349c
 8002434:	40020000 	.word	0x40020000
 8002438:	20000a04 	.word	0x20000a04
 800243c:	200031fc 	.word	0x200031fc
 8002440:	20003734 	.word	0x20003734
 8002444:	200034b4 	.word	0x200034b4
 8002448:	200034a0 	.word	0x200034a0

0800244c <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	if(canWrite){
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <loadPeriodBuffer+0x64>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01d      	beq.n	8002498 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <loadPeriodBuffer+0x68>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <loadPeriodBuffer+0x6c>)
 8002466:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <loadPeriodBuffer+0x68>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <loadPeriodBuffer+0x68>)
 8002474:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <loadPeriodBuffer+0x68>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	2b7f      	cmp	r3, #127	; 0x7f
 800247c:	d902      	bls.n	8002484 <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <loadPeriodBuffer+0x68>)
 8002480:	2200      	movs	r2, #0
 8002482:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <loadPeriodBuffer+0x68>)
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <loadPeriodBuffer+0x70>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <loadPeriodBuffer+0x52>
			canWrite = false;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <loadPeriodBuffer+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e002      	b.n	800249e <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <loadPeriodBuffer+0x74>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <loadPeriodBuffer+0x78>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000010 	.word	0x20000010
 80024b4:	20000a1a 	.word	0x20000a1a
 80024b8:	2000329c 	.word	0x2000329c
 80024bc:	20000a1c 	.word	0x20000a1c
 80024c0:	20000a06 	.word	0x20000a06
 80024c4:	20000a19 	.word	0x20000a19

080024c8 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	if (mode) {
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <Tim3IT+0x54>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <Tim3IT+0x14>
		midbit = false;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <Tim3IT+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 80024da:	e01c      	b.n	8002516 <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <Tim3IT+0x5c>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d112      	bne.n	800250a <Tim3IT+0x42>
			if(signal_valid){
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <Tim3IT+0x60>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f7ff ffac 	bl	800244c <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <Tim3IT+0x64>)
 80024f6:	f003 feca 	bl	800628e <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <Tim3IT+0x64>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <Tim3IT+0x60>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
}
 8002508:	e005      	b.n	8002516 <Tim3IT+0x4e>
			signal_detect_decay--;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <Tim3IT+0x5c>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <Tim3IT+0x5c>)
 8002514:	801a      	strh	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000349c 	.word	0x2000349c
 8002520:	20000a04 	.word	0x20000a04
 8002524:	20000a1e 	.word	0x20000a1e
 8002528:	20000a20 	.word	0x20000a20
 800252c:	20003734 	.word	0x20003734

08002530 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <FreqCounterPinEXTI+0xc0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	461a      	mov	r2, r3
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <FreqCounterPinEXTI+0xc4>)
 8002540:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <FreqCounterPinEXTI+0xc4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2c      	ldr	r2, [pc, #176]	; (80025f8 <FreqCounterPinEXTI+0xc8>)
 8002548:	fb92 f3f3 	sdiv	r3, r2, r3
 800254c:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 800254e:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <FreqCounterPinEXTI+0xc4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff7a 	bl	800244c <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <FreqCounterPinEXTI+0xcc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a28      	ldr	r2, [pc, #160]	; (8002600 <FreqCounterPinEXTI+0xd0>)
 800255e:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f240 726c 	movw	r2, #1900	; 0x76c
 8002566:	4293      	cmp	r3, r2
 8002568:	dd09      	ble.n	800257e <FreqCounterPinEXTI+0x4e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002570:	4293      	cmp	r3, r2
 8002572:	dc04      	bgt.n	800257e <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <FreqCounterPinEXTI+0xcc>)
 8002576:	f640 0298 	movw	r2, #2200	; 0x898
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e011      	b.n	80025a2 <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002584:	dd09      	ble.n	800259a <FreqCounterPinEXTI+0x6a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f240 52db 	movw	r2, #1499	; 0x5db
 800258c:	4293      	cmp	r3, r2
 800258e:	dc04      	bgt.n	800259a <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <FreqCounterPinEXTI+0xcc>)
 8002592:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e003      	b.n	80025a2 <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <FreqCounterPinEXTI+0xcc>)
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <FreqCounterPinEXTI+0xcc>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <FreqCounterPinEXTI+0xd0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d104      	bne.n	80025b8 <FreqCounterPinEXTI+0x88>
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <FreqCounterPinEXTI+0xcc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d107      	bne.n	80025c8 <FreqCounterPinEXTI+0x98>
		edges = 0;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <FreqCounterPinEXTI+0xd4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <FreqCounterPinEXTI+0xd8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
 80025c6:	e004      	b.n	80025d2 <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <FreqCounterPinEXTI+0xd4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <FreqCounterPinEXTI+0xd4>)
 80025d0:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <FreqCounterPinEXTI+0xdc>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <FreqCounterPinEXTI+0xe0>)
 80025da:	2208      	movs	r2, #8
 80025dc:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <FreqCounterPinEXTI+0xc0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200034b4 	.word	0x200034b4
 80025f4:	20000a0c 	.word	0x20000a0c
 80025f8:	00989680 	.word	0x00989680
 80025fc:	20000a14 	.word	0x20000a14
 8002600:	20000a10 	.word	0x20000a10
 8002604:	20000a08 	.word	0x20000a08
 8002608:	20003734 	.word	0x20003734
 800260c:	20000a20 	.word	0x20000a20
 8002610:	20000a1e 	.word	0x20000a1e

08002614 <bitToAudio>:
		sprintf(uartData, "sinArray[%d] = %d\n",i,sinArray[i]);
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}

int bitToAudio(bool *bitStream, int arraySize, bool direction,int wave_start) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	71fb      	strb	r3, [r7, #7]
	bool changeFreq;
	int waveoffset = wave_start;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < arraySize; i++) {
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e073      	b.n	8002716 <bitToAudio+0x102>
		//Check if freq needs to be changed for NRZI
		if(direction){
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <bitToAudio+0x2c>
			changeFreq = bitStream[i];
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	77fb      	strb	r3, [r7, #31]
 800263e:	e007      	b.n	8002650 <bitToAudio+0x3c>
		} else {
			changeFreq = bitStream[arraySize - i - 1];
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	77fb      	strb	r3, [r7, #31]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, changeFreq);
 8002650:	7ffb      	ldrb	r3, [r7, #31]
 8002652:	461a      	mov	r2, r3
 8002654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002658:	4835      	ldr	r0, [pc, #212]	; (8002730 <bitToAudio+0x11c>)
 800265a:	f003 f883 	bl	8005764 <HAL_GPIO_WritePin>
		//freqSelect = changeFreq;
		freqSelect = (changeFreq) ? freqSelect : !freqSelect;
 800265e:	7ffb      	ldrb	r3, [r7, #31]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <bitToAudio+0x60>
 8002664:	4b33      	ldr	r3, [pc, #204]	; (8002734 <bitToAudio+0x120>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e00c      	b.n	800268e <bitToAudio+0x7a>
 8002674:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <bitToAudio+0x120>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f083 0301 	eor.w	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4a29      	ldr	r2, [pc, #164]	; (8002734 <bitToAudio+0x120>)
 8002690:	7013      	strb	r3, [r2, #0]

		if (freqSelect) {
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <bitToAudio+0x120>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <bitToAudio+0x96>
			htim2.Instance->ARR = 14;
 800269a:	4b27      	ldr	r3, [pc, #156]	; (8002738 <bitToAudio+0x124>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	220e      	movs	r2, #14
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * HIGHF) / (1.0 * LOWF);
 80026a2:	f240 2326 	movw	r3, #550	; 0x226
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e006      	b.n	80026b8 <bitToAudio+0xa4>
		}
		else {
			htim2.Instance->ARR = 27;
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <bitToAudio+0x124>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	221b      	movs	r2, #27
 80026b0:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * LOWF) / (1.0 * LOWF);
 80026b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026b6:	61bb      	str	r3, [r7, #24]
		}

		//htim2.Instance->CNT = 0;
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <bitToAudio+0x128>)
 80026be:	441a      	add	r2, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026c8:	2100      	movs	r1, #0
 80026ca:	481d      	ldr	r0, [pc, #116]	; (8002740 <bitToAudio+0x12c>)
 80026cc:	f002 f8d4 	bl	8004878 <HAL_DAC_Start_DMA>
		htim3.Instance->CNT = 0;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <bitToAudio+0x130>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 80026d8:	481a      	ldr	r0, [pc, #104]	; (8002744 <bitToAudio+0x130>)
 80026da:	f003 fe03 	bl	80062e4 <HAL_TIM_Base_Start_IT>

		//Calculate ending point for wave
		wave_start = (wave_start+waveoffset+1)%FREQ_SAMP;
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <bitToAudio+0x134>)
 80026e8:	fb82 1203 	smull	r1, r2, r2, r3
 80026ec:	1151      	asrs	r1, r2, #5
 80026ee:	17da      	asrs	r2, r3, #31
 80026f0:	1a8a      	subs	r2, r1, r2
 80026f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80026f6:	fb01 f202 	mul.w	r2, r1, r2
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	603b      	str	r3, [r7, #0]

		midbit = true;
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <bitToAudio+0x138>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
		while (midbit){
 8002704:	e000      	b.n	8002708 <bitToAudio+0xf4>
			//In the future this leaves the CPU free for scheduling or something
			__NOP();
 8002706:	bf00      	nop
		while (midbit){
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <bitToAudio+0x138>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1fa      	bne.n	8002706 <bitToAudio+0xf2>
	for (int i = 0; i < arraySize; i++) {
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	429a      	cmp	r2, r3
 800271c:	db87      	blt.n	800262e <bitToAudio+0x1a>
		}

	}

	HAL_TIM_Base_Stop(&htim3);
 800271e:	4809      	ldr	r0, [pc, #36]	; (8002744 <bitToAudio+0x130>)
 8002720:	f003 fdb5 	bl	800628e <HAL_TIM_Base_Stop>
	return wave_start;
 8002724:	683b      	ldr	r3, [r7, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40020000 	.word	0x40020000
 8002734:	20000a18 	.word	0x20000a18
 8002738:	200034b4 	.word	0x200034b4
 800273c:	20000014 	.word	0x20000014
 8002740:	200034a0 	.word	0x200034a0
 8002744:	200031fc 	.word	0x200031fc
 8002748:	1b4e81b5 	.word	0x1b4e81b5
 800274c:	20000a04 	.word	0x20000a04

08002750 <generateBitstream>:
void generateBitstream() {
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <generateBitstream+0x4c>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <generateBitstream+0x4c>)
 800275c:	2201      	movs	r2, #1
 800275e:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <generateBitstream+0x4c>)
 8002762:	2201      	movs	r2, #1
 8002764:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <generateBitstream+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <generateBitstream+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <generateBitstream+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <generateBitstream+0x4c>)
 800277a:	2201      	movs	r2, #1
 800277c:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <generateBitstream+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <generateBitstream+0x4c>)
 8002786:	2201      	movs	r2, #1
 8002788:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <generateBitstream+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	725a      	strb	r2, [r3, #9]

}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200031f0 	.word	0x200031f0

080027a0 <initOUTData>:
void initOUTData() {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 80027a4:	f7ff ffd4 	bl	8002750 <generateBitstream>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <pertobit>:
uint16_t	signal_detect_decay = 0;			//Pseudo timer to detect if value is valid
bool		signal_valid = false;					//Determines if frequency being read is a valid bit
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <pertobit+0x88>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV)){
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f240 726c 	movw	r2, #1900	; 0x76c
 80027c4:	4293      	cmp	r3, r2
 80027c6:	dd15      	ble.n	80027f4 <pertobit+0x48>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80027ce:	4293      	cmp	r3, r2
 80027d0:	dc10      	bgt.n	80027f4 <pertobit+0x48>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4918      	ldr	r1, [pc, #96]	; (8002838 <pertobit+0x8c>)
 80027d6:	4819      	ldr	r0, [pc, #100]	; (800283c <pertobit+0x90>)
 80027d8:	f005 f8e8 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027dc:	4817      	ldr	r0, [pc, #92]	; (800283c <pertobit+0x90>)
 80027de:	f7fd fd17 	bl	8000210 <strlen>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	230a      	movs	r3, #10
 80027e8:	4914      	ldr	r1, [pc, #80]	; (800283c <pertobit+0x90>)
 80027ea:	4815      	ldr	r0, [pc, #84]	; (8002840 <pertobit+0x94>)
 80027ec:	f004 f99d 	bl	8006b2a <HAL_UART_Transmit>
		return 1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e01b      	b.n	800282c <pertobit+0x80>
	}
	else if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV)){
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80027fa:	dd15      	ble.n	8002828 <pertobit+0x7c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f240 52db 	movw	r2, #1499	; 0x5db
 8002802:	4293      	cmp	r3, r2
 8002804:	dc10      	bgt.n	8002828 <pertobit+0x7c>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	490b      	ldr	r1, [pc, #44]	; (8002838 <pertobit+0x8c>)
 800280a:	480c      	ldr	r0, [pc, #48]	; (800283c <pertobit+0x90>)
 800280c:	f005 f8ce 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002810:	480a      	ldr	r0, [pc, #40]	; (800283c <pertobit+0x90>)
 8002812:	f7fd fcfd 	bl	8000210 <strlen>
 8002816:	4603      	mov	r3, r0
 8002818:	b29a      	uxth	r2, r3
 800281a:	230a      	movs	r3, #10
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <pertobit+0x90>)
 800281e:	4808      	ldr	r0, [pc, #32]	; (8002840 <pertobit+0x94>)
 8002820:	f004 f983 	bl	8006b2a <HAL_UART_Transmit>
		return 0;
 8002824:	2300      	movs	r3, #0
 8002826:	e001      	b.n	800282c <pertobit+0x80>
	}
	else
//		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		return -1;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	00989680 	.word	0x00989680
 8002838:	08008630 	.word	0x08008630
 800283c:	20002638 	.word	0x20002638
 8002840:	200034f4 	.word	0x200034f4

08002844 <loadBit>:
int loadBit(){
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
	int startbit;
	int currbit = -1;
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	617b      	str	r3, [r7, #20]
	int loopCount = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
	int checkCount;
	bool goodbit = false;
 8002854:	2300      	movs	r3, #0
 8002856:	72fb      	strb	r3, [r7, #11]

	startbit = pertobit(periodBuffer[trackBit]);
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <loadBit+0xdc>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b31      	ldr	r3, [pc, #196]	; (8002924 <loadBit+0xe0>)
 8002860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ffa1 	bl	80027ac <pertobit>
 800286a:	6078      	str	r0, [r7, #4]
//	sprintf(uartData, "startbit = %d\n",startbit);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	//Increment trackBit
	trackBit++;
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <loadBit+0xdc>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <loadBit+0xdc>)
 8002876:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <loadBit+0xdc>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	2b7f      	cmp	r3, #127	; 0x7f
 800287e:	d902      	bls.n	8002886 <loadBit+0x42>
		trackBit = 0;
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <loadBit+0xdc>)
 8002882:	2200      	movs	r2, #0
 8002884:	801a      	strh	r2, [r3, #0]

	if(startbit==1){
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <loadBit+0x4e>
		checkCount = 3;
 800288c:	2303      	movs	r3, #3
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e02f      	b.n	80028f2 <loadBit+0xae>
	}
	else if(startbit==0){
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <loadBit+0x5a>
		checkCount = 1;
 8002898:	2301      	movs	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e029      	b.n	80028f2 <loadBit+0xae>
	}
	else {
		checkCount = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
	}

	//Valiate startbit value
	while(loopCount<checkCount){
 80028a2:	e026      	b.n	80028f2 <loadBit+0xae>
		currbit = pertobit(periodBuffer[trackBit]);
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <loadBit+0xdc>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <loadBit+0xe0>)
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff7b 	bl	80027ac <pertobit>
 80028b6:	6178      	str	r0, [r7, #20]

		//Good bit
		if(startbit==currbit){
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10c      	bne.n	80028da <loadBit+0x96>
			goodbit = true;
 80028c0:	2301      	movs	r3, #1
 80028c2:	72fb      	strb	r3, [r7, #11]
			goodbit = false;
			break;
		}

		//Increment trackBit
		trackBit++;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <loadBit+0xdc>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <loadBit+0xdc>)
 80028ce:	801a      	strh	r2, [r3, #0]
		if (trackBit >= RX_BUFFERSIZE)
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <loadBit+0xdc>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	2b7f      	cmp	r3, #127	; 0x7f
 80028d6:	d909      	bls.n	80028ec <loadBit+0xa8>
 80028d8:	e005      	b.n	80028e6 <loadBit+0xa2>
			currbit = -1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	617b      	str	r3, [r7, #20]
			goodbit = false;
 80028e0:	2300      	movs	r3, #0
 80028e2:	72fb      	strb	r3, [r7, #11]
			break;
 80028e4:	e009      	b.n	80028fa <loadBit+0xb6>
			trackBit = 0;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <loadBit+0xdc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	801a      	strh	r2, [r3, #0]
		loopCount++;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	3301      	adds	r3, #1
 80028f0:	613b      	str	r3, [r7, #16]
	while(loopCount<checkCount){
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dbd4      	blt.n	80028a4 <loadBit+0x60>
	}

	//Increment bitSaveCount
	bitSaveCount++;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <loadBit+0xe4>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <loadBit+0xe4>)
 8002904:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <loadBit+0xe4>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	2b7f      	cmp	r3, #127	; 0x7f
 800290c:	d902      	bls.n	8002914 <loadBit+0xd0>
		bitSaveCount = 0;
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <loadBit+0xe4>)
 8002910:	2200      	movs	r2, #0
 8002912:	801a      	strh	r2, [r3, #0]

	return currbit;
 8002914:	697b      	ldr	r3, [r7, #20]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000a22 	.word	0x20000a22
 8002924:	2000329c 	.word	0x2000329c
 8002928:	20000a24 	.word	0x20000a24

0800292c <loadOctet>:
int loadOctet(bool* bufferptr) {
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8002934:	2301      	movs	r3, #1
 8002936:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	e043      	b.n	80029c6 <loadOctet+0x9a>
		bit = loadBit();
 800293e:	f7ff ff81 	bl	8002844 <loadBit>
 8002942:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4955      	ldr	r1, [pc, #340]	; (8002aa0 <loadOctet+0x174>)
 800294a:	4856      	ldr	r0, [pc, #344]	; (8002aa4 <loadOctet+0x178>)
 800294c:	f005 f82e 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002950:	4854      	ldr	r0, [pc, #336]	; (8002aa4 <loadOctet+0x178>)
 8002952:	f7fd fc5d 	bl	8000210 <strlen>
 8002956:	4603      	mov	r3, r0
 8002958:	b29a      	uxth	r2, r3
 800295a:	230a      	movs	r3, #10
 800295c:	4951      	ldr	r1, [pc, #324]	; (8002aa4 <loadOctet+0x178>)
 800295e:	4852      	ldr	r0, [pc, #328]	; (8002aa8 <loadOctet+0x17c>)
 8002960:	f004 f8e3 	bl	8006b2a <HAL_UART_Transmit>

        if(bit < 0){
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	da11      	bge.n	800298e <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	494f      	ldr	r1, [pc, #316]	; (8002aac <loadOctet+0x180>)
 800296e:	484d      	ldr	r0, [pc, #308]	; (8002aa4 <loadOctet+0x178>)
 8002970:	f005 f81c 	bl	80079ac <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002974:	484b      	ldr	r0, [pc, #300]	; (8002aa4 <loadOctet+0x178>)
 8002976:	f7fd fc4b 	bl	8000210 <strlen>
 800297a:	4603      	mov	r3, r0
 800297c:	b29a      	uxth	r2, r3
 800297e:	230a      	movs	r3, #10
 8002980:	4948      	ldr	r1, [pc, #288]	; (8002aa4 <loadOctet+0x178>)
 8002982:	4849      	ldr	r0, [pc, #292]	; (8002aa8 <loadOctet+0x17c>)
 8002984:	f004 f8d1 	bl	8006b2a <HAL_UART_Transmit>
        	return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	e083      	b.n	8002a96 <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2d9      	uxtb	r1, r3
 800299a:	f107 0208 	add.w	r2, r7, #8
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	460a      	mov	r2, r1
 80029a4:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 80029a6:	f107 0208 	add.w	r2, r7, #8
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4413      	add	r3, r2
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	493f      	ldr	r1, [pc, #252]	; (8002ab0 <loadOctet+0x184>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	440b      	add	r3, r1
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <loadOctet+0x94>
        	isFlag = false;
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b07      	cmp	r3, #7
 80029ca:	ddb8      	ble.n	800293e <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05d      	beq.n	8002a94 <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 80029d8:	4a32      	ldr	r2, [pc, #200]	; (8002aa4 <loadOctet+0x178>)
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <loadOctet+0x188>)
 80029dc:	4615      	mov	r5, r2
 80029de:	461c      	mov	r4, r3
 80029e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e2:	6028      	str	r0, [r5, #0]
 80029e4:	6069      	str	r1, [r5, #4]
 80029e6:	60aa      	str	r2, [r5, #8]
 80029e8:	60eb      	str	r3, [r5, #12]
 80029ea:	cc03      	ldmia	r4!, {r0, r1}
 80029ec:	6128      	str	r0, [r5, #16]
 80029ee:	6169      	str	r1, [r5, #20]
 80029f0:	8823      	ldrh	r3, [r4, #0]
 80029f2:	78a2      	ldrb	r2, [r4, #2]
 80029f4:	832b      	strh	r3, [r5, #24]
 80029f6:	4613      	mov	r3, r2
 80029f8:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029fa:	482a      	ldr	r0, [pc, #168]	; (8002aa4 <loadOctet+0x178>)
 80029fc:	f7fd fc08 	bl	8000210 <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	230a      	movs	r3, #10
 8002a06:	4927      	ldr	r1, [pc, #156]	; (8002aa4 <loadOctet+0x178>)
 8002a08:	4827      	ldr	r0, [pc, #156]	; (8002aa8 <loadOctet+0x17c>)
 8002a0a:	f004 f88e 	bl	8006b2a <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e02c      	b.n	8002a6e <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	f107 0220 	add.w	r2, r7, #32
 8002a1e:	4413      	add	r3, r2
 8002a20:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	440b      	add	r3, r1
 8002a30:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <loadOctet+0x18c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <loadOctet+0x18c>)
 8002a3a:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	491b      	ldr	r1, [pc, #108]	; (8002abc <loadOctet+0x190>)
 8002a4e:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <loadOctet+0x178>)
 8002a50:	f004 ffac 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a54:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <loadOctet+0x178>)
 8002a56:	f7fd fbdb 	bl	8000210 <strlen>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	230a      	movs	r3, #10
 8002a60:	4910      	ldr	r1, [pc, #64]	; (8002aa4 <loadOctet+0x178>)
 8002a62:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <loadOctet+0x17c>)
 8002a64:	f004 f861 	bl	8006b2a <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b07      	cmp	r3, #7
 8002a72:	ddcf      	ble.n	8002a14 <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <loadOctet+0x178>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <loadOctet+0x194>)
 8002a78:	8811      	ldrh	r1, [r2, #0]
 8002a7a:	7892      	ldrb	r2, [r2, #2]
 8002a7c:	8019      	strh	r1, [r3, #0]
 8002a7e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a80:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <loadOctet+0x178>)
 8002a82:	f7fd fbc5 	bl	8000210 <strlen>
 8002a86:	4603      	mov	r3, r0
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	4905      	ldr	r1, [pc, #20]	; (8002aa4 <loadOctet+0x178>)
 8002a8e:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <loadOctet+0x17c>)
 8002a90:	f004 f84b 	bl	8006b2a <HAL_UART_Transmit>
	}
	return isFlag;
 8002a94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	0800864c 	.word	0x0800864c
 8002aa4:	20002638 	.word	0x20002638
 8002aa8:	200034f4 	.word	0x200034f4
 8002aac:	0800865c 	.word	0x0800865c
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	0800866c 	.word	0x0800866c
 8002ab8:	20000a00 	.word	0x20000a00
 8002abc:	08008688 	.word	0x08008688
 8002ac0:	08008690 	.word	0x08008690

08002ac4 <streamGet>:
int streamGet() {
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b090      	sub	sp, #64	; 0x40
 8002ac8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002aca:	4b88      	ldr	r3, [pc, #544]	; (8002cec <streamGet+0x228>)
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 8002ace:	f240 134b 	movw	r3, #331	; 0x14b
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8002ad4:	e0fb      	b.n	8002cce <streamGet+0x20a>
		gotflag = false;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8002adc:	2300      	movs	r3, #0
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae0:	e011      	b.n	8002b06 <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002aec:	4413      	add	r3, r2
 8002aee:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002afa:	440b      	add	r3, r1
 8002afc:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	3301      	adds	r3, #1
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	ddea      	ble.n	8002ae2 <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8002b0c:	f7ff fe9a 	bl	8002844 <loadBit>
 8002b10:	4603      	mov	r3, r0
 8002b12:	623b      	str	r3, [r7, #32]
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b18:	e019      	b.n	8002b4e <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002b22:	4413      	add	r3, r2
 8002b24:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b28:	4971      	ldr	r1, [pc, #452]	; (8002cf0 <streamGet+0x22c>)
 8002b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2c:	440a      	add	r2, r1
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <streamGet+0x78>
				gotflag = false;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002b3a:	e00b      	b.n	8002b54 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	2b07      	cmp	r3, #7
 8002b40:	d102      	bne.n	8002b48 <streamGet+0x84>
				gotflag = true;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	dde2      	ble.n	8002b1a <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8002b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80b8 	beq.w	8002cce <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 8002b5e:	4a65      	ldr	r2, [pc, #404]	; (8002cf4 <streamGet+0x230>)
 8002b60:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <streamGet+0x234>)
 8002b62:	4615      	mov	r5, r2
 8002b64:	461c      	mov	r4, r3
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	6028      	str	r0, [r5, #0]
 8002b6a:	6069      	str	r1, [r5, #4]
 8002b6c:	60aa      	str	r2, [r5, #8]
 8002b6e:	60eb      	str	r3, [r5, #12]
 8002b70:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002b72:	6128      	str	r0, [r5, #16]
 8002b74:	6169      	str	r1, [r5, #20]
 8002b76:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b78:	485e      	ldr	r0, [pc, #376]	; (8002cf4 <streamGet+0x230>)
 8002b7a:	f7fd fb49 	bl	8000210 <strlen>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	230a      	movs	r3, #10
 8002b84:	495b      	ldr	r1, [pc, #364]	; (8002cf4 <streamGet+0x230>)
 8002b86:	485d      	ldr	r0, [pc, #372]	; (8002cfc <streamGet+0x238>)
 8002b88:	f003 ffcf 	bl	8006b2a <HAL_UART_Transmit>
			octet_count  = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002b94:	e01a      	b.n	8002bcc <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8002b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fec4 	bl	800292c <loadOctet>
 8002ba4:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002baa:	4955      	ldr	r1, [pc, #340]	; (8002d00 <streamGet+0x23c>)
 8002bac:	4851      	ldr	r0, [pc, #324]	; (8002cf4 <streamGet+0x230>)
 8002bae:	f004 fefd 	bl	80079ac <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bb2:	4850      	ldr	r0, [pc, #320]	; (8002cf4 <streamGet+0x230>)
 8002bb4:	f7fd fb2c 	bl	8000210 <strlen>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	230a      	movs	r3, #10
 8002bbe:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <streamGet+0x230>)
 8002bc0:	484e      	ldr	r0, [pc, #312]	; (8002cfc <streamGet+0x238>)
 8002bc2:	f003 ffb2 	bl	8006b2a <HAL_UART_Transmit>

				octet_count+=1;
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	3301      	adds	r3, #1
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <streamGet+0x116>
 8002bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	dbdd      	blt.n	8002b96 <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d012      	beq.n	8002c06 <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 8002be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002be2:	4948      	ldr	r1, [pc, #288]	; (8002d04 <streamGet+0x240>)
 8002be4:	4843      	ldr	r0, [pc, #268]	; (8002cf4 <streamGet+0x230>)
 8002be6:	f004 fee1 	bl	80079ac <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bea:	4842      	ldr	r0, [pc, #264]	; (8002cf4 <streamGet+0x230>)
 8002bec:	f7fd fb10 	bl	8000210 <strlen>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	230a      	movs	r3, #10
 8002bf6:	493f      	ldr	r1, [pc, #252]	; (8002cf4 <streamGet+0x230>)
 8002bf8:	4840      	ldr	r0, [pc, #256]	; (8002cfc <streamGet+0x238>)
 8002bfa:	f003 ff96 	bl	8006b2a <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c04:	e063      	b.n	8002cce <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 8002c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	db12      	blt.n	8002c34 <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 8002c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c10:	493d      	ldr	r1, [pc, #244]	; (8002d08 <streamGet+0x244>)
 8002c12:	4838      	ldr	r0, [pc, #224]	; (8002cf4 <streamGet+0x230>)
 8002c14:	f004 feca 	bl	80079ac <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c18:	4836      	ldr	r0, [pc, #216]	; (8002cf4 <streamGet+0x230>)
 8002c1a:	f7fd faf9 	bl	8000210 <strlen>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	230a      	movs	r3, #10
 8002c24:	4933      	ldr	r1, [pc, #204]	; (8002cf4 <streamGet+0x230>)
 8002c26:	4835      	ldr	r0, [pc, #212]	; (8002cfc <streamGet+0x238>)
 8002c28:	f003 ff7f 	bl	8006b2a <HAL_UART_Transmit>
				gotflag = false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c32:	e04c      	b.n	8002cce <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 8002c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d12d      	bne.n	8002c96 <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 8002c3a:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <streamGet+0x230>)
 8002c3c:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <streamGet+0x248>)
 8002c3e:	4615      	mov	r5, r2
 8002c40:	461c      	mov	r4, r3
 8002c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c44:	6028      	str	r0, [r5, #0]
 8002c46:	6069      	str	r1, [r5, #4]
 8002c48:	60aa      	str	r2, [r5, #8]
 8002c4a:	60eb      	str	r3, [r5, #12]
 8002c4c:	cc03      	ldmia	r4!, {r0, r1}
 8002c4e:	6128      	str	r0, [r5, #16]
 8002c50:	6169      	str	r1, [r5, #20]
 8002c52:	8823      	ldrh	r3, [r4, #0]
 8002c54:	78a2      	ldrb	r2, [r4, #2]
 8002c56:	832b      	strh	r3, [r5, #24]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c5c:	4825      	ldr	r0, [pc, #148]	; (8002cf4 <streamGet+0x230>)
 8002c5e:	f7fd fad7 	bl	8000210 <strlen>
 8002c62:	4603      	mov	r3, r0
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	230a      	movs	r3, #10
 8002c68:	4922      	ldr	r1, [pc, #136]	; (8002cf4 <streamGet+0x230>)
 8002c6a:	4824      	ldr	r0, [pc, #144]	; (8002cfc <streamGet+0x238>)
 8002c6c:	f003 ff5d 	bl	8006b2a <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 8002c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c72:	4927      	ldr	r1, [pc, #156]	; (8002d10 <streamGet+0x24c>)
 8002c74:	481f      	ldr	r0, [pc, #124]	; (8002cf4 <streamGet+0x230>)
 8002c76:	f004 fe99 	bl	80079ac <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c7a:	481e      	ldr	r0, [pc, #120]	; (8002cf4 <streamGet+0x230>)
 8002c7c:	f7fd fac8 	bl	8000210 <strlen>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	230a      	movs	r3, #10
 8002c86:	491b      	ldr	r1, [pc, #108]	; (8002cf4 <streamGet+0x230>)
 8002c88:	481c      	ldr	r0, [pc, #112]	; (8002cfc <streamGet+0x238>)
 8002c8a:	f003 ff4e 	bl	8006b2a <HAL_UART_Transmit>
				gotflag = false;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c94:	e01b      	b.n	8002cce <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <streamGet+0x230>)
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <streamGet+0x250>)
 8002c9a:	4615      	mov	r5, r2
 8002c9c:	461c      	mov	r4, r3
 8002c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca0:	6028      	str	r0, [r5, #0]
 8002ca2:	6069      	str	r1, [r5, #4]
 8002ca4:	60aa      	str	r2, [r5, #8]
 8002ca6:	60eb      	str	r3, [r5, #12]
 8002ca8:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002caa:	6128      	str	r0, [r5, #16]
 8002cac:	6169      	str	r1, [r5, #20]
 8002cae:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002cb0:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <streamGet+0x230>)
 8002cb2:	f7fd faad 	bl	8000210 <strlen>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	230a      	movs	r3, #10
 8002cbc:	490d      	ldr	r1, [pc, #52]	; (8002cf4 <streamGet+0x230>)
 8002cbe:	480f      	ldr	r0, [pc, #60]	; (8002cfc <streamGet+0x238>)
 8002cc0:	f003 ff33 	bl	8006b2a <HAL_UART_Transmit>
				gotflag = false;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e009      	b.n	8002ce2 <streamGet+0x21e>
	while(!changeMode){
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <streamGet+0x254>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f083 0301 	eor.w	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f aefc 	bne.w	8002ad6 <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3740      	adds	r7, #64	; 0x40
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000a34 	.word	0x20000a34
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	20002638 	.word	0x20002638
 8002cf8:	08008694 	.word	0x08008694
 8002cfc:	200034f4 	.word	0x200034f4
 8002d00:	080086b0 	.word	0x080086b0
 8002d04:	080086cc 	.word	0x080086cc
 8002d08:	080086f0 	.word	0x080086f0
 8002d0c:	08008714 	.word	0x08008714
 8002d10:	08008730 	.word	0x08008730
 8002d14:	08008754 	.word	0x08008754
 8002d18:	20000a05 	.word	0x20000a05

08002d1c <print_AX25>:
 *  Created on: Nov 1, 2020
 *      Author: monke
 */
#include "debug.h"

void print_AX25(){
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	b08d      	sub	sp, #52	; 0x34
 8002d20:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002d22:	4b90      	ldr	r3, [pc, #576]	; (8002f64 <print_AX25+0x248>)
 8002d24:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8002d32:	4b8d      	ldr	r3, [pc, #564]	; (8002f68 <print_AX25+0x24c>)
 8002d34:	4a8d      	ldr	r2, [pc, #564]	; (8002f6c <print_AX25+0x250>)
 8002d36:	4614      	mov	r4, r2
 8002d38:	469c      	mov	ip, r3
 8002d3a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002d3e:	4665      	mov	r5, ip
 8002d40:	4626      	mov	r6, r4
 8002d42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d44:	6028      	str	r0, [r5, #0]
 8002d46:	6069      	str	r1, [r5, #4]
 8002d48:	60aa      	str	r2, [r5, #8]
 8002d4a:	60eb      	str	r3, [r5, #12]
 8002d4c:	3410      	adds	r4, #16
 8002d4e:	f10c 0c10 	add.w	ip, ip, #16
 8002d52:	4574      	cmp	r4, lr
 8002d54:	d1f3      	bne.n	8002d3e <print_AX25+0x22>
 8002d56:	4663      	mov	r3, ip
 8002d58:	4622      	mov	r2, r4
 8002d5a:	6810      	ldr	r0, [r2, #0]
 8002d5c:	6018      	str	r0, [r3, #0]
 8002d5e:	8891      	ldrh	r1, [r2, #4]
 8002d60:	7992      	ldrb	r2, [r2, #6]
 8002d62:	8099      	strh	r1, [r3, #4]
 8002d64:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d66:	4880      	ldr	r0, [pc, #512]	; (8002f68 <print_AX25+0x24c>)
 8002d68:	f7fd fa52 	bl	8000210 <strlen>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	230a      	movs	r3, #10
 8002d72:	497d      	ldr	r1, [pc, #500]	; (8002f68 <print_AX25+0x24c>)
 8002d74:	487e      	ldr	r0, [pc, #504]	; (8002f70 <print_AX25+0x254>)
 8002d76:	f003 fed8 	bl	8006b2a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->AX25_PACKET) + address_len - 1;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	336f      	adds	r3, #111	; 0x6f
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d84:	e041      	b.n	8002e0a <print_AX25+0xee>
		sprintf(uartData, "Address Field %d =",i+1);
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	3301      	adds	r3, #1
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4979      	ldr	r1, [pc, #484]	; (8002f74 <print_AX25+0x258>)
 8002d8e:	4876      	ldr	r0, [pc, #472]	; (8002f68 <print_AX25+0x24c>)
 8002d90:	f004 fe0c 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d94:	4874      	ldr	r0, [pc, #464]	; (8002f68 <print_AX25+0x24c>)
 8002d96:	f7fd fa3b 	bl	8000210 <strlen>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	230a      	movs	r3, #10
 8002da0:	4971      	ldr	r1, [pc, #452]	; (8002f68 <print_AX25+0x24c>)
 8002da2:	4873      	ldr	r0, [pc, #460]	; (8002f70 <print_AX25+0x254>)
 8002da4:	f003 fec1 	bl	8006b2a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	e016      	b.n	8002ddc <print_AX25+0xc0>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	425b      	negs	r3, r3
 8002db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	496f      	ldr	r1, [pc, #444]	; (8002f78 <print_AX25+0x25c>)
 8002dbc:	486a      	ldr	r0, [pc, #424]	; (8002f68 <print_AX25+0x24c>)
 8002dbe:	f004 fdf5 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002dc2:	4869      	ldr	r0, [pc, #420]	; (8002f68 <print_AX25+0x24c>)
 8002dc4:	f7fd fa24 	bl	8000210 <strlen>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	230a      	movs	r3, #10
 8002dce:	4966      	ldr	r1, [pc, #408]	; (8002f68 <print_AX25+0x24c>)
 8002dd0:	4867      	ldr	r0, [pc, #412]	; (8002f70 <print_AX25+0x254>)
 8002dd2:	f003 feaa 	bl	8006b2a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	3301      	adds	r3, #1
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	2b07      	cmp	r3, #7
 8002de0:	dde5      	ble.n	8002dae <print_AX25+0x92>
		}
		curr_mem -= 8;
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	3b08      	subs	r3, #8
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002de8:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <print_AX25+0x24c>)
 8002dea:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <print_AX25+0x260>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002df0:	485d      	ldr	r0, [pc, #372]	; (8002f68 <print_AX25+0x24c>)
 8002df2:	f7fd fa0d 	bl	8000210 <strlen>
 8002df6:	4603      	mov	r3, r0
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	495a      	ldr	r1, [pc, #360]	; (8002f68 <print_AX25+0x24c>)
 8002dfe:	485c      	ldr	r0, [pc, #368]	; (8002f70 <print_AX25+0x254>)
 8002e00:	f003 fe93 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	3301      	adds	r3, #1
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	2b0d      	cmp	r3, #13
 8002e0e:	ddba      	ble.n	8002d86 <print_AX25+0x6a>
	}

	//Print Control Field
	curr_mem += address_len;//Subtract 8 to start at the flag start
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	3370      	adds	r3, #112	; 0x70
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002e16:	4a54      	ldr	r2, [pc, #336]	; (8002f68 <print_AX25+0x24c>)
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <print_AX25+0x264>)
 8002e1a:	4615      	mov	r5, r2
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e20:	6028      	str	r0, [r5, #0]
 8002e22:	6069      	str	r1, [r5, #4]
 8002e24:	60aa      	str	r2, [r5, #8]
 8002e26:	60eb      	str	r3, [r5, #12]
 8002e28:	8823      	ldrh	r3, [r4, #0]
 8002e2a:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002e2c:	484e      	ldr	r0, [pc, #312]	; (8002f68 <print_AX25+0x24c>)
 8002e2e:	f7fd f9ef 	bl	8000210 <strlen>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	230a      	movs	r3, #10
 8002e38:	494b      	ldr	r1, [pc, #300]	; (8002f68 <print_AX25+0x24c>)
 8002e3a:	484d      	ldr	r0, [pc, #308]	; (8002f70 <print_AX25+0x254>)
 8002e3c:	f003 fe75 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	e017      	b.n	8002e76 <print_AX25+0x15a>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f1c3 0307 	rsb	r3, r3, #7
 8002e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4948      	ldr	r1, [pc, #288]	; (8002f78 <print_AX25+0x25c>)
 8002e56:	4844      	ldr	r0, [pc, #272]	; (8002f68 <print_AX25+0x24c>)
 8002e58:	f004 fda8 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002e5c:	4842      	ldr	r0, [pc, #264]	; (8002f68 <print_AX25+0x24c>)
 8002e5e:	f7fd f9d7 	bl	8000210 <strlen>
 8002e62:	4603      	mov	r3, r0
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	230a      	movs	r3, #10
 8002e68:	493f      	ldr	r1, [pc, #252]	; (8002f68 <print_AX25+0x24c>)
 8002e6a:	4841      	ldr	r0, [pc, #260]	; (8002f70 <print_AX25+0x254>)
 8002e6c:	f003 fe5d 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	3301      	adds	r3, #1
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	2b07      	cmp	r3, #7
 8002e7a:	dde4      	ble.n	8002e46 <print_AX25+0x12a>
	}
	sprintf(uartData, "\n");
 8002e7c:	4a3a      	ldr	r2, [pc, #232]	; (8002f68 <print_AX25+0x24c>)
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <print_AX25+0x260>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002e84:	4838      	ldr	r0, [pc, #224]	; (8002f68 <print_AX25+0x24c>)
 8002e86:	f7fd f9c3 	bl	8000210 <strlen>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	230a      	movs	r3, #10
 8002e90:	4935      	ldr	r1, [pc, #212]	; (8002f68 <print_AX25+0x24c>)
 8002e92:	4837      	ldr	r0, [pc, #220]	; (8002f70 <print_AX25+0x254>)
 8002e94:	f003 fe49 	bl	8006b2a <HAL_UART_Transmit>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002e9e:	4a32      	ldr	r2, [pc, #200]	; (8002f68 <print_AX25+0x24c>)
 8002ea0:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <print_AX25+0x268>)
 8002ea2:	4615      	mov	r5, r2
 8002ea4:	461c      	mov	r4, r3
 8002ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea8:	6028      	str	r0, [r5, #0]
 8002eaa:	6069      	str	r1, [r5, #4]
 8002eac:	60aa      	str	r2, [r5, #8]
 8002eae:	60eb      	str	r3, [r5, #12]
 8002eb0:	8823      	ldrh	r3, [r4, #0]
 8002eb2:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002eb4:	482c      	ldr	r0, [pc, #176]	; (8002f68 <print_AX25+0x24c>)
 8002eb6:	f7fd f9ab 	bl	8000210 <strlen>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	230a      	movs	r3, #10
 8002ec0:	4929      	ldr	r1, [pc, #164]	; (8002f68 <print_AX25+0x24c>)
 8002ec2:	482b      	ldr	r0, [pc, #172]	; (8002f70 <print_AX25+0x254>)
 8002ec4:	f003 fe31 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e017      	b.n	8002efe <print_AX25+0x1e2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f1c3 0307 	rsb	r3, r3, #7
 8002ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4926      	ldr	r1, [pc, #152]	; (8002f78 <print_AX25+0x25c>)
 8002ede:	4822      	ldr	r0, [pc, #136]	; (8002f68 <print_AX25+0x24c>)
 8002ee0:	f004 fd64 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002ee4:	4820      	ldr	r0, [pc, #128]	; (8002f68 <print_AX25+0x24c>)
 8002ee6:	f7fd f993 	bl	8000210 <strlen>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	230a      	movs	r3, #10
 8002ef0:	491d      	ldr	r1, [pc, #116]	; (8002f68 <print_AX25+0x24c>)
 8002ef2:	481f      	ldr	r0, [pc, #124]	; (8002f70 <print_AX25+0x254>)
 8002ef4:	f003 fe19 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b07      	cmp	r3, #7
 8002f02:	dde4      	ble.n	8002ece <print_AX25+0x1b2>
	}
	sprintf(uartData, "\n");
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <print_AX25+0x24c>)
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <print_AX25+0x260>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002f0c:	4816      	ldr	r0, [pc, #88]	; (8002f68 <print_AX25+0x24c>)
 8002f0e:	f7fd f97f 	bl	8000210 <strlen>
 8002f12:	4603      	mov	r3, r0
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	230a      	movs	r3, #10
 8002f18:	4913      	ldr	r1, [pc, #76]	; (8002f68 <print_AX25+0x24c>)
 8002f1a:	4815      	ldr	r0, [pc, #84]	; (8002f70 <print_AX25+0x254>)
 8002f1c:	f003 fe05 	bl	8006b2a <HAL_UART_Transmit>
	curr_mem += PID_len;
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	3308      	adds	r3, #8
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Print Info Field
	curr_mem += local_packet->Info_Len - 1;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f32:	4413      	add	r3, r2
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e055      	b.n	8002fe8 <print_AX25+0x2cc>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	461a      	mov	r2, r3
 8002f42:	4911      	ldr	r1, [pc, #68]	; (8002f88 <print_AX25+0x26c>)
 8002f44:	4808      	ldr	r0, [pc, #32]	; (8002f68 <print_AX25+0x24c>)
 8002f46:	f004 fd31 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002f4a:	4807      	ldr	r0, [pc, #28]	; (8002f68 <print_AX25+0x24c>)
 8002f4c:	f7fd f960 	bl	8000210 <strlen>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	230a      	movs	r3, #10
 8002f56:	4904      	ldr	r1, [pc, #16]	; (8002f68 <print_AX25+0x24c>)
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <print_AX25+0x254>)
 8002f5a:	f003 fde6 	bl	8006b2a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e02a      	b.n	8002fba <print_AX25+0x29e>
 8002f64:	20000a34 	.word	0x20000a34
 8002f68:	20002638 	.word	0x20002638
 8002f6c:	08008770 	.word	0x08008770
 8002f70:	200034f4 	.word	0x200034f4
 8002f74:	080087a8 	.word	0x080087a8
 8002f78:	080087bc 	.word	0x080087bc
 8002f7c:	080087c4 	.word	0x080087c4
 8002f80:	080087c8 	.word	0x080087c8
 8002f84:	080087dc 	.word	0x080087dc
 8002f88:	080087f0 	.word	0x080087f0
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	425b      	negs	r3, r3
 8002f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4945      	ldr	r1, [pc, #276]	; (80030b0 <print_AX25+0x394>)
 8002f9a:	4846      	ldr	r0, [pc, #280]	; (80030b4 <print_AX25+0x398>)
 8002f9c:	f004 fd06 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002fa0:	4844      	ldr	r0, [pc, #272]	; (80030b4 <print_AX25+0x398>)
 8002fa2:	f7fd f935 	bl	8000210 <strlen>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	230a      	movs	r3, #10
 8002fac:	4941      	ldr	r1, [pc, #260]	; (80030b4 <print_AX25+0x398>)
 8002fae:	4842      	ldr	r0, [pc, #264]	; (80030b8 <print_AX25+0x39c>)
 8002fb0:	f003 fdbb 	bl	8006b2a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b07      	cmp	r3, #7
 8002fbe:	dde5      	ble.n	8002f8c <print_AX25+0x270>
		}
		curr_mem -= 8;
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	3b08      	subs	r3, #8
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002fc6:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <print_AX25+0x398>)
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <print_AX25+0x3a0>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002fce:	4839      	ldr	r0, [pc, #228]	; (80030b4 <print_AX25+0x398>)
 8002fd0:	f7fd f91e 	bl	8000210 <strlen>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	230a      	movs	r3, #10
 8002fda:	4936      	ldr	r1, [pc, #216]	; (80030b4 <print_AX25+0x398>)
 8002fdc:	4836      	ldr	r0, [pc, #216]	; (80030b8 <print_AX25+0x39c>)
 8002fde:	f003 fda4 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da00      	bge.n	8002ff6 <print_AX25+0x2da>
 8002ff4:	3307      	adds	r3, #7
 8002ff6:	10db      	asrs	r3, r3, #3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	db9d      	blt.n	8002f3c <print_AX25+0x220>
	}
	curr_mem += local_packet->Info_Len;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	4413      	add	r3, r2
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c

	curr_mem += FCS_len - 8;
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	3308      	adds	r3, #8
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e042      	b.n	80030a2 <print_AX25+0x386>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	3301      	adds	r3, #1
 8003020:	461a      	mov	r2, r3
 8003022:	4927      	ldr	r1, [pc, #156]	; (80030c0 <print_AX25+0x3a4>)
 8003024:	4823      	ldr	r0, [pc, #140]	; (80030b4 <print_AX25+0x398>)
 8003026:	f004 fcc1 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800302a:	4822      	ldr	r0, [pc, #136]	; (80030b4 <print_AX25+0x398>)
 800302c:	f7fd f8f0 	bl	8000210 <strlen>
 8003030:	4603      	mov	r3, r0
 8003032:	b29a      	uxth	r2, r3
 8003034:	230a      	movs	r3, #10
 8003036:	491f      	ldr	r1, [pc, #124]	; (80030b4 <print_AX25+0x398>)
 8003038:	481f      	ldr	r0, [pc, #124]	; (80030b8 <print_AX25+0x39c>)
 800303a:	f003 fd76 	bl	8006b2a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	e017      	b.n	8003074 <print_AX25+0x358>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f1c3 0307 	rsb	r3, r3, #7
 800304a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4917      	ldr	r1, [pc, #92]	; (80030b0 <print_AX25+0x394>)
 8003054:	4817      	ldr	r0, [pc, #92]	; (80030b4 <print_AX25+0x398>)
 8003056:	f004 fca9 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800305a:	4816      	ldr	r0, [pc, #88]	; (80030b4 <print_AX25+0x398>)
 800305c:	f7fd f8d8 	bl	8000210 <strlen>
 8003060:	4603      	mov	r3, r0
 8003062:	b29a      	uxth	r2, r3
 8003064:	230a      	movs	r3, #10
 8003066:	4913      	ldr	r1, [pc, #76]	; (80030b4 <print_AX25+0x398>)
 8003068:	4813      	ldr	r0, [pc, #76]	; (80030b8 <print_AX25+0x39c>)
 800306a:	f003 fd5e 	bl	8006b2a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3301      	adds	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b07      	cmp	r3, #7
 8003078:	dde4      	ble.n	8003044 <print_AX25+0x328>
		}
		curr_mem -= 8;
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	3b08      	subs	r3, #8
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8003080:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <print_AX25+0x398>)
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <print_AX25+0x3a0>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003088:	480a      	ldr	r0, [pc, #40]	; (80030b4 <print_AX25+0x398>)
 800308a:	f7fd f8c1 	bl	8000210 <strlen>
 800308e:	4603      	mov	r3, r0
 8003090:	b29a      	uxth	r2, r3
 8003092:	230a      	movs	r3, #10
 8003094:	4907      	ldr	r1, [pc, #28]	; (80030b4 <print_AX25+0x398>)
 8003096:	4808      	ldr	r0, [pc, #32]	; (80030b8 <print_AX25+0x39c>)
 8003098:	f003 fd47 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	3301      	adds	r3, #1
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	ddb9      	ble.n	800301c <print_AX25+0x300>
	}
}
 80030a8:	bf00      	nop
 80030aa:	3734      	adds	r7, #52	; 0x34
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b0:	080087bc 	.word	0x080087bc
 80030b4:	20002638 	.word	0x20002638
 80030b8:	200034f4 	.word	0x200034f4
 80030bc:	080087c4 	.word	0x080087c4
 80030c0:	08008804 	.word	0x08008804

080030c4 <print_outAX25>:

void print_outAX25(){
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	b08d      	sub	sp, #52	; 0x34
 80030c8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80030ca:	4b9b      	ldr	r3, [pc, #620]	; (8003338 <print_outAX25+0x274>)
 80030cc:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80030d4:	330c      	adds	r3, #12
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 80030da:	4b98      	ldr	r3, [pc, #608]	; (800333c <print_outAX25+0x278>)
 80030dc:	4a98      	ldr	r2, [pc, #608]	; (8003340 <print_outAX25+0x27c>)
 80030de:	4614      	mov	r4, r2
 80030e0:	469c      	mov	ip, r3
 80030e2:	f104 0e20 	add.w	lr, r4, #32
 80030e6:	4665      	mov	r5, ip
 80030e8:	4626      	mov	r6, r4
 80030ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80030ec:	6028      	str	r0, [r5, #0]
 80030ee:	6069      	str	r1, [r5, #4]
 80030f0:	60aa      	str	r2, [r5, #8]
 80030f2:	60eb      	str	r3, [r5, #12]
 80030f4:	3410      	adds	r4, #16
 80030f6:	f10c 0c10 	add.w	ip, ip, #16
 80030fa:	4574      	cmp	r4, lr
 80030fc:	d1f3      	bne.n	80030e6 <print_outAX25+0x22>
 80030fe:	4662      	mov	r2, ip
 8003100:	4623      	mov	r3, r4
 8003102:	cb03      	ldmia	r3!, {r0, r1}
 8003104:	6010      	str	r0, [r2, #0]
 8003106:	6051      	str	r1, [r2, #4]
 8003108:	8819      	ldrh	r1, [r3, #0]
 800310a:	789b      	ldrb	r3, [r3, #2]
 800310c:	8111      	strh	r1, [r2, #8]
 800310e:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003110:	488a      	ldr	r0, [pc, #552]	; (800333c <print_outAX25+0x278>)
 8003112:	f7fd f87d 	bl	8000210 <strlen>
 8003116:	4603      	mov	r3, r0
 8003118:	b29a      	uxth	r2, r3
 800311a:	230a      	movs	r3, #10
 800311c:	4987      	ldr	r1, [pc, #540]	; (800333c <print_outAX25+0x278>)
 800311e:	4889      	ldr	r0, [pc, #548]	; (8003344 <print_outAX25+0x280>)
 8003120:	f003 fd03 	bl	8006b2a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = local_packet->address;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800312a:	3310      	adds	r3, #16
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
 8003134:	e040      	b.n	80031b8 <print_outAX25+0xf4>
		sprintf(uartData, "Address Field %d =",i+1);
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	3301      	adds	r3, #1
 800313a:	461a      	mov	r2, r3
 800313c:	4982      	ldr	r1, [pc, #520]	; (8003348 <print_outAX25+0x284>)
 800313e:	487f      	ldr	r0, [pc, #508]	; (800333c <print_outAX25+0x278>)
 8003140:	f004 fc34 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003144:	487d      	ldr	r0, [pc, #500]	; (800333c <print_outAX25+0x278>)
 8003146:	f7fd f863 	bl	8000210 <strlen>
 800314a:	4603      	mov	r3, r0
 800314c:	b29a      	uxth	r2, r3
 800314e:	230a      	movs	r3, #10
 8003150:	497a      	ldr	r1, [pc, #488]	; (800333c <print_outAX25+0x278>)
 8003152:	487c      	ldr	r0, [pc, #496]	; (8003344 <print_outAX25+0x280>)
 8003154:	f003 fce9 	bl	8006b2a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	e015      	b.n	800318a <print_outAX25+0xc6>
			sprintf(uartData, " %d ",*(curr_mem+j));
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4978      	ldr	r1, [pc, #480]	; (800334c <print_outAX25+0x288>)
 800316a:	4874      	ldr	r0, [pc, #464]	; (800333c <print_outAX25+0x278>)
 800316c:	f004 fc1e 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003170:	4872      	ldr	r0, [pc, #456]	; (800333c <print_outAX25+0x278>)
 8003172:	f7fd f84d 	bl	8000210 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	b29a      	uxth	r2, r3
 800317a:	230a      	movs	r3, #10
 800317c:	496f      	ldr	r1, [pc, #444]	; (800333c <print_outAX25+0x278>)
 800317e:	4871      	ldr	r0, [pc, #452]	; (8003344 <print_outAX25+0x280>)
 8003180:	f003 fcd3 	bl	8006b2a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	3301      	adds	r3, #1
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2b07      	cmp	r3, #7
 800318e:	dde6      	ble.n	800315e <print_outAX25+0x9a>
		}
		curr_mem += 8;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	3308      	adds	r3, #8
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8003196:	4a69      	ldr	r2, [pc, #420]	; (800333c <print_outAX25+0x278>)
 8003198:	4b6d      	ldr	r3, [pc, #436]	; (8003350 <print_outAX25+0x28c>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800319e:	4867      	ldr	r0, [pc, #412]	; (800333c <print_outAX25+0x278>)
 80031a0:	f7fd f836 	bl	8000210 <strlen>
 80031a4:	4603      	mov	r3, r0
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	230a      	movs	r3, #10
 80031aa:	4964      	ldr	r1, [pc, #400]	; (800333c <print_outAX25+0x278>)
 80031ac:	4865      	ldr	r0, [pc, #404]	; (8003344 <print_outAX25+0x280>)
 80031ae:	f003 fcbc 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	3301      	adds	r3, #1
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	2b0d      	cmp	r3, #13
 80031bc:	ddbb      	ble.n	8003136 <print_outAX25+0x72>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 80031be:	4a5f      	ldr	r2, [pc, #380]	; (800333c <print_outAX25+0x278>)
 80031c0:	4b64      	ldr	r3, [pc, #400]	; (8003354 <print_outAX25+0x290>)
 80031c2:	4614      	mov	r4, r2
 80031c4:	461d      	mov	r5, r3
 80031c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c8:	6020      	str	r0, [r4, #0]
 80031ca:	6061      	str	r1, [r4, #4]
 80031cc:	60a2      	str	r2, [r4, #8]
 80031ce:	60e3      	str	r3, [r4, #12]
 80031d0:	6828      	ldr	r0, [r5, #0]
 80031d2:	6120      	str	r0, [r4, #16]
 80031d4:	88ab      	ldrh	r3, [r5, #4]
 80031d6:	79aa      	ldrb	r2, [r5, #6]
 80031d8:	82a3      	strh	r3, [r4, #20]
 80031da:	4613      	mov	r3, r2
 80031dc:	75a3      	strb	r3, [r4, #22]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80031de:	4857      	ldr	r0, [pc, #348]	; (800333c <print_outAX25+0x278>)
 80031e0:	f7fd f816 	bl	8000210 <strlen>
 80031e4:	4603      	mov	r3, r0
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	230a      	movs	r3, #10
 80031ea:	4954      	ldr	r1, [pc, #336]	; (800333c <print_outAX25+0x278>)
 80031ec:	4855      	ldr	r0, [pc, #340]	; (8003344 <print_outAX25+0x280>)
 80031ee:	f003 fc9c 	bl	8006b2a <HAL_UART_Transmit>
	curr_mem += address_len;
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	3370      	adds	r3, #112	; 0x70
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80031fe:	3310      	adds	r3, #16
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dd21      	ble.n	800324a <print_outAX25+0x186>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8003206:	2300      	movs	r3, #0
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	e016      	b.n	800323a <print_outAX25+0x176>
			sprintf(uartData, " %d ",*(curr_mem-i));
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	425b      	negs	r3, r3
 8003210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	494c      	ldr	r1, [pc, #304]	; (800334c <print_outAX25+0x288>)
 800321a:	4848      	ldr	r0, [pc, #288]	; (800333c <print_outAX25+0x278>)
 800321c:	f004 fbc6 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003220:	4846      	ldr	r0, [pc, #280]	; (800333c <print_outAX25+0x278>)
 8003222:	f7fc fff5 	bl	8000210 <strlen>
 8003226:	4603      	mov	r3, r0
 8003228:	b29a      	uxth	r2, r3
 800322a:	230a      	movs	r3, #10
 800322c:	4943      	ldr	r1, [pc, #268]	; (800333c <print_outAX25+0x278>)
 800322e:	4845      	ldr	r0, [pc, #276]	; (8003344 <print_outAX25+0x280>)
 8003230:	f003 fc7b 	bl	8006b2a <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	3301      	adds	r3, #1
 8003238:	623b      	str	r3, [r7, #32]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003240:	3310      	adds	r3, #16
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	429a      	cmp	r2, r3
 8003248:	dbe0      	blt.n	800320c <print_outAX25+0x148>
		}
	}
	sprintf(uartData, "\n");
 800324a:	4a3c      	ldr	r2, [pc, #240]	; (800333c <print_outAX25+0x278>)
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <print_outAX25+0x28c>)
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003252:	483a      	ldr	r0, [pc, #232]	; (800333c <print_outAX25+0x278>)
 8003254:	f7fc ffdc 	bl	8000210 <strlen>
 8003258:	4603      	mov	r3, r0
 800325a:	b29a      	uxth	r2, r3
 800325c:	230a      	movs	r3, #10
 800325e:	4937      	ldr	r1, [pc, #220]	; (800333c <print_outAX25+0x278>)
 8003260:	4838      	ldr	r0, [pc, #224]	; (8003344 <print_outAX25+0x280>)
 8003262:	f003 fc62 	bl	8006b2a <HAL_UART_Transmit>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800326c:	3314      	adds	r3, #20
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8003272:	4a32      	ldr	r2, [pc, #200]	; (800333c <print_outAX25+0x278>)
 8003274:	4b38      	ldr	r3, [pc, #224]	; (8003358 <print_outAX25+0x294>)
 8003276:	4615      	mov	r5, r2
 8003278:	461c      	mov	r4, r3
 800327a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327c:	6028      	str	r0, [r5, #0]
 800327e:	6069      	str	r1, [r5, #4]
 8003280:	60aa      	str	r2, [r5, #8]
 8003282:	60eb      	str	r3, [r5, #12]
 8003284:	8823      	ldrh	r3, [r4, #0]
 8003286:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003288:	482c      	ldr	r0, [pc, #176]	; (800333c <print_outAX25+0x278>)
 800328a:	f7fc ffc1 	bl	8000210 <strlen>
 800328e:	4603      	mov	r3, r0
 8003290:	b29a      	uxth	r2, r3
 8003292:	230a      	movs	r3, #10
 8003294:	4929      	ldr	r1, [pc, #164]	; (800333c <print_outAX25+0x278>)
 8003296:	482b      	ldr	r0, [pc, #172]	; (8003344 <print_outAX25+0x280>)
 8003298:	f003 fc47 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e015      	b.n	80032ce <print_outAX25+0x20a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	4413      	add	r3, r2
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	4927      	ldr	r1, [pc, #156]	; (800334c <print_outAX25+0x288>)
 80032ae:	4823      	ldr	r0, [pc, #140]	; (800333c <print_outAX25+0x278>)
 80032b0:	f004 fb7c 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80032b4:	4821      	ldr	r0, [pc, #132]	; (800333c <print_outAX25+0x278>)
 80032b6:	f7fc ffab 	bl	8000210 <strlen>
 80032ba:	4603      	mov	r3, r0
 80032bc:	b29a      	uxth	r2, r3
 80032be:	230a      	movs	r3, #10
 80032c0:	491e      	ldr	r1, [pc, #120]	; (800333c <print_outAX25+0x278>)
 80032c2:	4820      	ldr	r0, [pc, #128]	; (8003344 <print_outAX25+0x280>)
 80032c4:	f003 fc31 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80032d4:	3314      	adds	r3, #20
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	429a      	cmp	r2, r3
 80032de:	dbe0      	blt.n	80032a2 <print_outAX25+0x1de>
	}
	sprintf(uartData, "\n");
 80032e0:	4a16      	ldr	r2, [pc, #88]	; (800333c <print_outAX25+0x278>)
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <print_outAX25+0x28c>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80032e8:	4814      	ldr	r0, [pc, #80]	; (800333c <print_outAX25+0x278>)
 80032ea:	f7fc ff91 	bl	8000210 <strlen>
 80032ee:	4603      	mov	r3, r0
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	230a      	movs	r3, #10
 80032f4:	4911      	ldr	r1, [pc, #68]	; (800333c <print_outAX25+0x278>)
 80032f6:	4813      	ldr	r0, [pc, #76]	; (8003344 <print_outAX25+0x280>)
 80032f8:	f003 fc17 	bl	8006b2a <HAL_UART_Transmit>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003302:	3318      	adds	r3, #24
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8003308:	4a0c      	ldr	r2, [pc, #48]	; (800333c <print_outAX25+0x278>)
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <print_outAX25+0x298>)
 800330c:	4615      	mov	r5, r2
 800330e:	461c      	mov	r4, r3
 8003310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003312:	6028      	str	r0, [r5, #0]
 8003314:	6069      	str	r1, [r5, #4]
 8003316:	60aa      	str	r2, [r5, #8]
 8003318:	60eb      	str	r3, [r5, #12]
 800331a:	8823      	ldrh	r3, [r4, #0]
 800331c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800331e:	4807      	ldr	r0, [pc, #28]	; (800333c <print_outAX25+0x278>)
 8003320:	f7fc ff76 	bl	8000210 <strlen>
 8003324:	4603      	mov	r3, r0
 8003326:	b29a      	uxth	r2, r3
 8003328:	230a      	movs	r3, #10
 800332a:	4904      	ldr	r1, [pc, #16]	; (800333c <print_outAX25+0x278>)
 800332c:	4805      	ldr	r0, [pc, #20]	; (8003344 <print_outAX25+0x280>)
 800332e:	f003 fbfc 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e029      	b.n	800338c <print_outAX25+0x2c8>
 8003338:	20000a34 	.word	0x20000a34
 800333c:	20002638 	.word	0x20002638
 8003340:	08008818 	.word	0x08008818
 8003344:	200034f4 	.word	0x200034f4
 8003348:	080087a8 	.word	0x080087a8
 800334c:	080087bc 	.word	0x080087bc
 8003350:	080087c4 	.word	0x080087c4
 8003354:	08008844 	.word	0x08008844
 8003358:	080087c8 	.word	0x080087c8
 800335c:	080087dc 	.word	0x080087dc
		sprintf(uartData, " %d ",*(curr_mem+i));
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	49a5      	ldr	r1, [pc, #660]	; (8003600 <print_outAX25+0x53c>)
 800336c:	48a5      	ldr	r0, [pc, #660]	; (8003604 <print_outAX25+0x540>)
 800336e:	f004 fb1d 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003372:	48a4      	ldr	r0, [pc, #656]	; (8003604 <print_outAX25+0x540>)
 8003374:	f7fc ff4c 	bl	8000210 <strlen>
 8003378:	4603      	mov	r3, r0
 800337a:	b29a      	uxth	r2, r3
 800337c:	230a      	movs	r3, #10
 800337e:	49a1      	ldr	r1, [pc, #644]	; (8003604 <print_outAX25+0x540>)
 8003380:	48a1      	ldr	r0, [pc, #644]	; (8003608 <print_outAX25+0x544>)
 8003382:	f003 fbd2 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	3301      	adds	r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003392:	3318      	adds	r3, #24
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	429a      	cmp	r2, r3
 800339c:	dbe0      	blt.n	8003360 <print_outAX25+0x29c>
	}
	sprintf(uartData, "\n");
 800339e:	4a99      	ldr	r2, [pc, #612]	; (8003604 <print_outAX25+0x540>)
 80033a0:	4b9a      	ldr	r3, [pc, #616]	; (800360c <print_outAX25+0x548>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80033a6:	4897      	ldr	r0, [pc, #604]	; (8003604 <print_outAX25+0x540>)
 80033a8:	f7fc ff32 	bl	8000210 <strlen>
 80033ac:	4603      	mov	r3, r0
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	230a      	movs	r3, #10
 80033b2:	4994      	ldr	r1, [pc, #592]	; (8003604 <print_outAX25+0x540>)
 80033b4:	4894      	ldr	r0, [pc, #592]	; (8003608 <print_outAX25+0x544>)
 80033b6:	f003 fbb8 	bl	8006b2a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = local_packet->Info;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80033c0:	331c      	adds	r3, #28
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	e040      	b.n	800344e <print_outAX25+0x38a>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3301      	adds	r3, #1
 80033d0:	461a      	mov	r2, r3
 80033d2:	498f      	ldr	r1, [pc, #572]	; (8003610 <print_outAX25+0x54c>)
 80033d4:	488b      	ldr	r0, [pc, #556]	; (8003604 <print_outAX25+0x540>)
 80033d6:	f004 fae9 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80033da:	488a      	ldr	r0, [pc, #552]	; (8003604 <print_outAX25+0x540>)
 80033dc:	f7fc ff18 	bl	8000210 <strlen>
 80033e0:	4603      	mov	r3, r0
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	230a      	movs	r3, #10
 80033e6:	4987      	ldr	r1, [pc, #540]	; (8003604 <print_outAX25+0x540>)
 80033e8:	4887      	ldr	r0, [pc, #540]	; (8003608 <print_outAX25+0x544>)
 80033ea:	f003 fb9e 	bl	8006b2a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e015      	b.n	8003420 <print_outAX25+0x35c>
			sprintf(uartData, " %d ",*(curr_mem+j));
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f8:	4413      	add	r3, r2
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4980      	ldr	r1, [pc, #512]	; (8003600 <print_outAX25+0x53c>)
 8003400:	4880      	ldr	r0, [pc, #512]	; (8003604 <print_outAX25+0x540>)
 8003402:	f004 fad3 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003406:	487f      	ldr	r0, [pc, #508]	; (8003604 <print_outAX25+0x540>)
 8003408:	f7fc ff02 	bl	8000210 <strlen>
 800340c:	4603      	mov	r3, r0
 800340e:	b29a      	uxth	r2, r3
 8003410:	230a      	movs	r3, #10
 8003412:	497c      	ldr	r1, [pc, #496]	; (8003604 <print_outAX25+0x540>)
 8003414:	487c      	ldr	r0, [pc, #496]	; (8003608 <print_outAX25+0x544>)
 8003416:	f003 fb88 	bl	8006b2a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3301      	adds	r3, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b07      	cmp	r3, #7
 8003424:	dde6      	ble.n	80033f4 <print_outAX25+0x330>
		}
		curr_mem += 8;
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	3308      	adds	r3, #8
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800342c:	4a75      	ldr	r2, [pc, #468]	; (8003604 <print_outAX25+0x540>)
 800342e:	4b77      	ldr	r3, [pc, #476]	; (800360c <print_outAX25+0x548>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003434:	4873      	ldr	r0, [pc, #460]	; (8003604 <print_outAX25+0x540>)
 8003436:	f7fc feeb 	bl	8000210 <strlen>
 800343a:	4603      	mov	r3, r0
 800343c:	b29a      	uxth	r2, r3
 800343e:	230a      	movs	r3, #10
 8003440:	4970      	ldr	r1, [pc, #448]	; (8003604 <print_outAX25+0x540>)
 8003442:	4871      	ldr	r0, [pc, #452]	; (8003608 <print_outAX25+0x544>)
 8003444:	f003 fb71 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da00      	bge.n	800345c <print_outAX25+0x398>
 800345a:	3307      	adds	r3, #7
 800345c:	10db      	asrs	r3, r3, #3
 800345e:	461a      	mov	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4293      	cmp	r3, r2
 8003464:	dbb2      	blt.n	80033cc <print_outAX25+0x308>
	}

	//if Info was bitstuffed then print rest of address field
	curr_mem = local_packet->Info + local_packet->Info_Len;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800346c:	331c      	adds	r3, #28
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	4413      	add	r3, r2
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Info Field extra = ");
 800347c:	4a61      	ldr	r2, [pc, #388]	; (8003604 <print_outAX25+0x540>)
 800347e:	4b65      	ldr	r3, [pc, #404]	; (8003614 <print_outAX25+0x550>)
 8003480:	4615      	mov	r5, r2
 8003482:	461c      	mov	r4, r3
 8003484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003486:	6028      	str	r0, [r5, #0]
 8003488:	6069      	str	r1, [r5, #4]
 800348a:	60aa      	str	r2, [r5, #8]
 800348c:	60eb      	str	r3, [r5, #12]
 800348e:	6820      	ldr	r0, [r4, #0]
 8003490:	6128      	str	r0, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003492:	485c      	ldr	r0, [pc, #368]	; (8003604 <print_outAX25+0x540>)
 8003494:	f7fc febc 	bl	8000210 <strlen>
 8003498:	4603      	mov	r3, r0
 800349a:	b29a      	uxth	r2, r3
 800349c:	230a      	movs	r3, #10
 800349e:	4959      	ldr	r1, [pc, #356]	; (8003604 <print_outAX25+0x540>)
 80034a0:	4859      	ldr	r0, [pc, #356]	; (8003608 <print_outAX25+0x544>)
 80034a2:	f003 fb42 	bl	8006b2a <HAL_UART_Transmit>
	curr_mem += local_packet->Info_Len;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	4413      	add	r3, r2
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_Info > 0){
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80034bc:	331c      	adds	r3, #28
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	dd20      	ble.n	8003506 <print_outAX25+0x442>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e015      	b.n	80034f6 <print_outAX25+0x432>
			sprintf(uartData, " %d ",*(curr_mem+i));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ce:	4413      	add	r3, r2
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	494a      	ldr	r1, [pc, #296]	; (8003600 <print_outAX25+0x53c>)
 80034d6:	484b      	ldr	r0, [pc, #300]	; (8003604 <print_outAX25+0x540>)
 80034d8:	f004 fa68 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80034dc:	4849      	ldr	r0, [pc, #292]	; (8003604 <print_outAX25+0x540>)
 80034de:	f7fc fe97 	bl	8000210 <strlen>
 80034e2:	4603      	mov	r3, r0
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	230a      	movs	r3, #10
 80034e8:	4946      	ldr	r1, [pc, #280]	; (8003604 <print_outAX25+0x540>)
 80034ea:	4847      	ldr	r0, [pc, #284]	; (8003608 <print_outAX25+0x544>)
 80034ec:	f003 fb1d 	bl	8006b2a <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80034fc:	331c      	adds	r3, #28
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	429a      	cmp	r2, r3
 8003504:	dbe1      	blt.n	80034ca <print_outAX25+0x406>
		}
	}
	sprintf(uartData, "\n");
 8003506:	4a3f      	ldr	r2, [pc, #252]	; (8003604 <print_outAX25+0x540>)
 8003508:	4b40      	ldr	r3, [pc, #256]	; (800360c <print_outAX25+0x548>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800350e:	483d      	ldr	r0, [pc, #244]	; (8003604 <print_outAX25+0x540>)
 8003510:	f7fc fe7e 	bl	8000210 <strlen>
 8003514:	4603      	mov	r3, r0
 8003516:	b29a      	uxth	r2, r3
 8003518:	230a      	movs	r3, #10
 800351a:	493a      	ldr	r1, [pc, #232]	; (8003604 <print_outAX25+0x540>)
 800351c:	483a      	ldr	r0, [pc, #232]	; (8003608 <print_outAX25+0x544>)
 800351e:	f003 fb04 	bl	8006b2a <HAL_UART_Transmit>

	curr_mem = local_packet->FCS;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003528:	3304      	adds	r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 800352e:	4a35      	ldr	r2, [pc, #212]	; (8003604 <print_outAX25+0x540>)
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <print_outAX25+0x554>)
 8003532:	4614      	mov	r4, r2
 8003534:	461d      	mov	r5, r3
 8003536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003538:	6020      	str	r0, [r4, #0]
 800353a:	6061      	str	r1, [r4, #4]
 800353c:	60a2      	str	r2, [r4, #8]
 800353e:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003540:	4830      	ldr	r0, [pc, #192]	; (8003604 <print_outAX25+0x540>)
 8003542:	f7fc fe65 	bl	8000210 <strlen>
 8003546:	4603      	mov	r3, r0
 8003548:	b29a      	uxth	r2, r3
 800354a:	230a      	movs	r3, #10
 800354c:	492d      	ldr	r1, [pc, #180]	; (8003604 <print_outAX25+0x540>)
 800354e:	482e      	ldr	r0, [pc, #184]	; (8003608 <print_outAX25+0x544>)
 8003550:	f003 faeb 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	e015      	b.n	8003586 <print_outAX25+0x4c2>
		sprintf(uartData, " %d ",*(curr_mem+i));
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355e:	4413      	add	r3, r2
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	4926      	ldr	r1, [pc, #152]	; (8003600 <print_outAX25+0x53c>)
 8003566:	4827      	ldr	r0, [pc, #156]	; (8003604 <print_outAX25+0x540>)
 8003568:	f004 fa20 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800356c:	4825      	ldr	r0, [pc, #148]	; (8003604 <print_outAX25+0x540>)
 800356e:	f7fc fe4f 	bl	8000210 <strlen>
 8003572:	4603      	mov	r3, r0
 8003574:	b29a      	uxth	r2, r3
 8003576:	230a      	movs	r3, #10
 8003578:	4922      	ldr	r1, [pc, #136]	; (8003604 <print_outAX25+0x540>)
 800357a:	4823      	ldr	r0, [pc, #140]	; (8003608 <print_outAX25+0x544>)
 800357c:	f003 fad5 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3310      	adds	r3, #16
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	dbe1      	blt.n	800355a <print_outAX25+0x496>
	}

	sprintf(uartData, "\n");
 8003596:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <print_outAX25+0x540>)
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <print_outAX25+0x548>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800359e:	4819      	ldr	r0, [pc, #100]	; (8003604 <print_outAX25+0x540>)
 80035a0:	f7fc fe36 	bl	8000210 <strlen>
 80035a4:	4603      	mov	r3, r0
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	230a      	movs	r3, #10
 80035aa:	4916      	ldr	r1, [pc, #88]	; (8003604 <print_outAX25+0x540>)
 80035ac:	4816      	ldr	r0, [pc, #88]	; (8003608 <print_outAX25+0x544>)
 80035ae:	f003 fabc 	bl	8006b2a <HAL_UART_Transmit>



	//reset bitstuff members
	local_packet->stuffed_address = 0;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80035b8:	3310      	adds	r3, #16
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80035c4:	3314      	adds	r3, #20
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80035d0:	3318      	adds	r3, #24
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80035dc:	331c      	adds	r3, #28
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
	local_packet->bit_stuffed_zeros = 0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80035f2:	3304      	adds	r3, #4
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
}
 80035f8:	bf00      	nop
 80035fa:	3734      	adds	r7, #52	; 0x34
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003600:	080087bc 	.word	0x080087bc
 8003604:	20002638 	.word	0x20002638
 8003608:	200034f4 	.word	0x200034f4
 800360c:	080087c4 	.word	0x080087c4
 8003610:	080087f0 	.word	0x080087f0
 8003614:	0800885c 	.word	0x0800885c
 8003618:	08008870 	.word	0x08008870

0800361c <print_KISS>:

void print_KISS(){
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	b08d      	sub	sp, #52	; 0x34
 8003620:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8003622:	4baf      	ldr	r3, [pc, #700]	; (80038e0 <print_KISS+0x2c4>)
 8003624:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800362c:	330c      	adds	r3, #12
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8003632:	4bac      	ldr	r3, [pc, #688]	; (80038e4 <print_KISS+0x2c8>)
 8003634:	4aac      	ldr	r2, [pc, #688]	; (80038e8 <print_KISS+0x2cc>)
 8003636:	4614      	mov	r4, r2
 8003638:	469c      	mov	ip, r3
 800363a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800363e:	4665      	mov	r5, ip
 8003640:	4626      	mov	r6, r4
 8003642:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003644:	6028      	str	r0, [r5, #0]
 8003646:	6069      	str	r1, [r5, #4]
 8003648:	60aa      	str	r2, [r5, #8]
 800364a:	60eb      	str	r3, [r5, #12]
 800364c:	3410      	adds	r4, #16
 800364e:	f10c 0c10 	add.w	ip, ip, #16
 8003652:	4574      	cmp	r4, lr
 8003654:	d1f3      	bne.n	800363e <print_KISS+0x22>
 8003656:	4663      	mov	r3, ip
 8003658:	4622      	mov	r2, r4
 800365a:	6810      	ldr	r0, [r2, #0]
 800365c:	6018      	str	r0, [r3, #0]
 800365e:	8891      	ldrh	r1, [r2, #4]
 8003660:	7992      	ldrb	r2, [r2, #6]
 8003662:	8099      	strh	r1, [r3, #4]
 8003664:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003666:	489f      	ldr	r0, [pc, #636]	; (80038e4 <print_KISS+0x2c8>)
 8003668:	f7fc fdd2 	bl	8000210 <strlen>
 800366c:	4603      	mov	r3, r0
 800366e:	b29a      	uxth	r2, r3
 8003670:	230a      	movs	r3, #10
 8003672:	499c      	ldr	r1, [pc, #624]	; (80038e4 <print_KISS+0x2c8>)
 8003674:	489d      	ldr	r0, [pc, #628]	; (80038ec <print_KISS+0x2d0>)
 8003676:	f003 fa58 	bl	8006b2a <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003680:	3310      	adds	r3, #16
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	337f      	adds	r3, #127	; 0x7f
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8003688:	4a96      	ldr	r2, [pc, #600]	; (80038e4 <print_KISS+0x2c8>)
 800368a:	4b99      	ldr	r3, [pc, #612]	; (80038f0 <print_KISS+0x2d4>)
 800368c:	4615      	mov	r5, r2
 800368e:	461c      	mov	r4, r3
 8003690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003692:	6028      	str	r0, [r5, #0]
 8003694:	6069      	str	r1, [r5, #4]
 8003696:	60aa      	str	r2, [r5, #8]
 8003698:	60eb      	str	r3, [r5, #12]
 800369a:	8823      	ldrh	r3, [r4, #0]
 800369c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800369e:	4891      	ldr	r0, [pc, #580]	; (80038e4 <print_KISS+0x2c8>)
 80036a0:	f7fc fdb6 	bl	8000210 <strlen>
 80036a4:	4603      	mov	r3, r0
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	230a      	movs	r3, #10
 80036aa:	498e      	ldr	r1, [pc, #568]	; (80038e4 <print_KISS+0x2c8>)
 80036ac:	488f      	ldr	r0, [pc, #572]	; (80038ec <print_KISS+0x2d0>)
 80036ae:	f003 fa3c 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80036b2:	2300      	movs	r3, #0
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b6:	e016      	b.n	80036e6 <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	425b      	negs	r3, r3
 80036bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	498b      	ldr	r1, [pc, #556]	; (80038f4 <print_KISS+0x2d8>)
 80036c6:	4887      	ldr	r0, [pc, #540]	; (80038e4 <print_KISS+0x2c8>)
 80036c8:	f004 f970 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80036cc:	4885      	ldr	r0, [pc, #532]	; (80038e4 <print_KISS+0x2c8>)
 80036ce:	f7fc fd9f 	bl	8000210 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	230a      	movs	r3, #10
 80036d8:	4982      	ldr	r1, [pc, #520]	; (80038e4 <print_KISS+0x2c8>)
 80036da:	4884      	ldr	r0, [pc, #528]	; (80038ec <print_KISS+0x2d0>)
 80036dc:	f003 fa25 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	3301      	adds	r3, #1
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	2b07      	cmp	r3, #7
 80036ea:	dde5      	ble.n	80036b8 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 80036ec:	4a7d      	ldr	r2, [pc, #500]	; (80038e4 <print_KISS+0x2c8>)
 80036ee:	4b82      	ldr	r3, [pc, #520]	; (80038f8 <print_KISS+0x2dc>)
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80036f4:	487b      	ldr	r0, [pc, #492]	; (80038e4 <print_KISS+0x2c8>)
 80036f6:	f7fc fd8b 	bl	8000210 <strlen>
 80036fa:	4603      	mov	r3, r0
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	230a      	movs	r3, #10
 8003700:	4978      	ldr	r1, [pc, #480]	; (80038e4 <print_KISS+0x2c8>)
 8003702:	487a      	ldr	r0, [pc, #488]	; (80038ec <print_KISS+0x2d0>)
 8003704:	f003 fa11 	bl	8006b2a <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800370e:	3310      	adds	r3, #16
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	336f      	adds	r3, #111	; 0x6f
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e041      	b.n	80037a0 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	3301      	adds	r3, #1
 8003720:	461a      	mov	r2, r3
 8003722:	4976      	ldr	r1, [pc, #472]	; (80038fc <print_KISS+0x2e0>)
 8003724:	486f      	ldr	r0, [pc, #444]	; (80038e4 <print_KISS+0x2c8>)
 8003726:	f004 f941 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800372a:	486e      	ldr	r0, [pc, #440]	; (80038e4 <print_KISS+0x2c8>)
 800372c:	f7fc fd70 	bl	8000210 <strlen>
 8003730:	4603      	mov	r3, r0
 8003732:	b29a      	uxth	r2, r3
 8003734:	230a      	movs	r3, #10
 8003736:	496b      	ldr	r1, [pc, #428]	; (80038e4 <print_KISS+0x2c8>)
 8003738:	486c      	ldr	r0, [pc, #432]	; (80038ec <print_KISS+0x2d0>)
 800373a:	f003 f9f6 	bl	8006b2a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
 8003742:	e016      	b.n	8003772 <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	425b      	negs	r3, r3
 8003748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	4968      	ldr	r1, [pc, #416]	; (80038f4 <print_KISS+0x2d8>)
 8003752:	4864      	ldr	r0, [pc, #400]	; (80038e4 <print_KISS+0x2c8>)
 8003754:	f004 f92a 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003758:	4862      	ldr	r0, [pc, #392]	; (80038e4 <print_KISS+0x2c8>)
 800375a:	f7fc fd59 	bl	8000210 <strlen>
 800375e:	4603      	mov	r3, r0
 8003760:	b29a      	uxth	r2, r3
 8003762:	230a      	movs	r3, #10
 8003764:	495f      	ldr	r1, [pc, #380]	; (80038e4 <print_KISS+0x2c8>)
 8003766:	4861      	ldr	r0, [pc, #388]	; (80038ec <print_KISS+0x2d0>)
 8003768:	f003 f9df 	bl	8006b2a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	3301      	adds	r3, #1
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2b07      	cmp	r3, #7
 8003776:	dde5      	ble.n	8003744 <print_KISS+0x128>
		}
		curr_mem -= 8;
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	3b08      	subs	r3, #8
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800377e:	4a59      	ldr	r2, [pc, #356]	; (80038e4 <print_KISS+0x2c8>)
 8003780:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <print_KISS+0x2dc>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003786:	4857      	ldr	r0, [pc, #348]	; (80038e4 <print_KISS+0x2c8>)
 8003788:	f7fc fd42 	bl	8000210 <strlen>
 800378c:	4603      	mov	r3, r0
 800378e:	b29a      	uxth	r2, r3
 8003790:	230a      	movs	r3, #10
 8003792:	4954      	ldr	r1, [pc, #336]	; (80038e4 <print_KISS+0x2c8>)
 8003794:	4855      	ldr	r0, [pc, #340]	; (80038ec <print_KISS+0x2d0>)
 8003796:	f003 f9c8 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	3301      	adds	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	2b0d      	cmp	r3, #13
 80037a4:	ddba      	ble.n	800371c <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80037ac:	3314      	adds	r3, #20
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80037b2:	4a4c      	ldr	r2, [pc, #304]	; (80038e4 <print_KISS+0x2c8>)
 80037b4:	4b52      	ldr	r3, [pc, #328]	; (8003900 <print_KISS+0x2e4>)
 80037b6:	4615      	mov	r5, r2
 80037b8:	461c      	mov	r4, r3
 80037ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037bc:	6028      	str	r0, [r5, #0]
 80037be:	6069      	str	r1, [r5, #4]
 80037c0:	60aa      	str	r2, [r5, #8]
 80037c2:	60eb      	str	r3, [r5, #12]
 80037c4:	8823      	ldrh	r3, [r4, #0]
 80037c6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80037c8:	4846      	ldr	r0, [pc, #280]	; (80038e4 <print_KISS+0x2c8>)
 80037ca:	f7fc fd21 	bl	8000210 <strlen>
 80037ce:	4603      	mov	r3, r0
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	230a      	movs	r3, #10
 80037d4:	4943      	ldr	r1, [pc, #268]	; (80038e4 <print_KISS+0x2c8>)
 80037d6:	4845      	ldr	r0, [pc, #276]	; (80038ec <print_KISS+0x2d0>)
 80037d8:	f003 f9a7 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e017      	b.n	8003812 <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f1c3 0307 	rsb	r3, r3, #7
 80037e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	4940      	ldr	r1, [pc, #256]	; (80038f4 <print_KISS+0x2d8>)
 80037f2:	483c      	ldr	r0, [pc, #240]	; (80038e4 <print_KISS+0x2c8>)
 80037f4:	f004 f8da 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80037f8:	483a      	ldr	r0, [pc, #232]	; (80038e4 <print_KISS+0x2c8>)
 80037fa:	f7fc fd09 	bl	8000210 <strlen>
 80037fe:	4603      	mov	r3, r0
 8003800:	b29a      	uxth	r2, r3
 8003802:	230a      	movs	r3, #10
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <print_KISS+0x2c8>)
 8003806:	4839      	ldr	r0, [pc, #228]	; (80038ec <print_KISS+0x2d0>)
 8003808:	f003 f98f 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3301      	adds	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b07      	cmp	r3, #7
 8003816:	dde4      	ble.n	80037e2 <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 8003818:	4a32      	ldr	r2, [pc, #200]	; (80038e4 <print_KISS+0x2c8>)
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <print_KISS+0x2dc>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003820:	4830      	ldr	r0, [pc, #192]	; (80038e4 <print_KISS+0x2c8>)
 8003822:	f7fc fcf5 	bl	8000210 <strlen>
 8003826:	4603      	mov	r3, r0
 8003828:	b29a      	uxth	r2, r3
 800382a:	230a      	movs	r3, #10
 800382c:	492d      	ldr	r1, [pc, #180]	; (80038e4 <print_KISS+0x2c8>)
 800382e:	482f      	ldr	r0, [pc, #188]	; (80038ec <print_KISS+0x2d0>)
 8003830:	f003 f97b 	bl	8006b2a <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800383a:	3318      	adds	r3, #24
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <print_KISS+0x2c8>)
 8003842:	4b30      	ldr	r3, [pc, #192]	; (8003904 <print_KISS+0x2e8>)
 8003844:	4615      	mov	r5, r2
 8003846:	461c      	mov	r4, r3
 8003848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384a:	6028      	str	r0, [r5, #0]
 800384c:	6069      	str	r1, [r5, #4]
 800384e:	60aa      	str	r2, [r5, #8]
 8003850:	60eb      	str	r3, [r5, #12]
 8003852:	8823      	ldrh	r3, [r4, #0]
 8003854:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003856:	4823      	ldr	r0, [pc, #140]	; (80038e4 <print_KISS+0x2c8>)
 8003858:	f7fc fcda 	bl	8000210 <strlen>
 800385c:	4603      	mov	r3, r0
 800385e:	b29a      	uxth	r2, r3
 8003860:	230a      	movs	r3, #10
 8003862:	4920      	ldr	r1, [pc, #128]	; (80038e4 <print_KISS+0x2c8>)
 8003864:	4821      	ldr	r0, [pc, #132]	; (80038ec <print_KISS+0x2d0>)
 8003866:	f003 f960 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e017      	b.n	80038a0 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003878:	4413      	add	r3, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	491d      	ldr	r1, [pc, #116]	; (80038f4 <print_KISS+0x2d8>)
 8003880:	4818      	ldr	r0, [pc, #96]	; (80038e4 <print_KISS+0x2c8>)
 8003882:	f004 f893 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003886:	4817      	ldr	r0, [pc, #92]	; (80038e4 <print_KISS+0x2c8>)
 8003888:	f7fc fcc2 	bl	8000210 <strlen>
 800388c:	4603      	mov	r3, r0
 800388e:	b29a      	uxth	r2, r3
 8003890:	230a      	movs	r3, #10
 8003892:	4914      	ldr	r1, [pc, #80]	; (80038e4 <print_KISS+0x2c8>)
 8003894:	4815      	ldr	r0, [pc, #84]	; (80038ec <print_KISS+0x2d0>)
 8003896:	f003 f948 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3301      	adds	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b07      	cmp	r3, #7
 80038a4:	dde4      	ble.n	8003870 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 80038a6:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <print_KISS+0x2c8>)
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <print_KISS+0x2dc>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80038ae:	480d      	ldr	r0, [pc, #52]	; (80038e4 <print_KISS+0x2c8>)
 80038b0:	f7fc fcae 	bl	8000210 <strlen>
 80038b4:	4603      	mov	r3, r0
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	230a      	movs	r3, #10
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <print_KISS+0x2c8>)
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <print_KISS+0x2d0>)
 80038be:	f003 f934 	bl	8006b2a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80038c8:	331c      	adds	r3, #28
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	4413      	add	r3, r2
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e055      	b.n	800398c <print_KISS+0x370>
 80038e0:	20000a34 	.word	0x20000a34
 80038e4:	20002638 	.word	0x20002638
 80038e8:	08008880 	.word	0x08008880
 80038ec:	200034f4 	.word	0x200034f4
 80038f0:	080088b8 	.word	0x080088b8
 80038f4:	080087bc 	.word	0x080087bc
 80038f8:	080087c4 	.word	0x080087c4
 80038fc:	080087a8 	.word	0x080087a8
 8003900:	080087c8 	.word	0x080087c8
 8003904:	080087dc 	.word	0x080087dc
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3301      	adds	r3, #1
 800390c:	461a      	mov	r2, r3
 800390e:	494a      	ldr	r1, [pc, #296]	; (8003a38 <print_KISS+0x41c>)
 8003910:	484a      	ldr	r0, [pc, #296]	; (8003a3c <print_KISS+0x420>)
 8003912:	f004 f84b 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003916:	4849      	ldr	r0, [pc, #292]	; (8003a3c <print_KISS+0x420>)
 8003918:	f7fc fc7a 	bl	8000210 <strlen>
 800391c:	4603      	mov	r3, r0
 800391e:	b29a      	uxth	r2, r3
 8003920:	230a      	movs	r3, #10
 8003922:	4946      	ldr	r1, [pc, #280]	; (8003a3c <print_KISS+0x420>)
 8003924:	4846      	ldr	r0, [pc, #280]	; (8003a40 <print_KISS+0x424>)
 8003926:	f003 f900 	bl	8006b2a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e016      	b.n	800395e <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	425b      	negs	r3, r3
 8003934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003936:	4413      	add	r3, r2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	4941      	ldr	r1, [pc, #260]	; (8003a44 <print_KISS+0x428>)
 800393e:	483f      	ldr	r0, [pc, #252]	; (8003a3c <print_KISS+0x420>)
 8003940:	f004 f834 	bl	80079ac <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003944:	483d      	ldr	r0, [pc, #244]	; (8003a3c <print_KISS+0x420>)
 8003946:	f7fc fc63 	bl	8000210 <strlen>
 800394a:	4603      	mov	r3, r0
 800394c:	b29a      	uxth	r2, r3
 800394e:	230a      	movs	r3, #10
 8003950:	493a      	ldr	r1, [pc, #232]	; (8003a3c <print_KISS+0x420>)
 8003952:	483b      	ldr	r0, [pc, #236]	; (8003a40 <print_KISS+0x424>)
 8003954:	f003 f8e9 	bl	8006b2a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3301      	adds	r3, #1
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b07      	cmp	r3, #7
 8003962:	dde5      	ble.n	8003930 <print_KISS+0x314>
		}
		curr_mem -= 8;
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	3b08      	subs	r3, #8
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800396a:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <print_KISS+0x420>)
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <print_KISS+0x42c>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003972:	4832      	ldr	r0, [pc, #200]	; (8003a3c <print_KISS+0x420>)
 8003974:	f7fc fc4c 	bl	8000210 <strlen>
 8003978:	4603      	mov	r3, r0
 800397a:	b29a      	uxth	r2, r3
 800397c:	230a      	movs	r3, #10
 800397e:	492f      	ldr	r1, [pc, #188]	; (8003a3c <print_KISS+0x420>)
 8003980:	482f      	ldr	r0, [pc, #188]	; (8003a40 <print_KISS+0x424>)
 8003982:	f003 f8d2 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	da00      	bge.n	800399a <print_KISS+0x37e>
 8003998:	3307      	adds	r3, #7
 800399a:	10db      	asrs	r3, r3, #3
 800399c:	461a      	mov	r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	dbb1      	blt.n	8003908 <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 80039ac:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <print_KISS+0x420>)
 80039ae:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <print_KISS+0x430>)
 80039b0:	4615      	mov	r5, r2
 80039b2:	461c      	mov	r4, r3
 80039b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b6:	6028      	str	r0, [r5, #0]
 80039b8:	6069      	str	r1, [r5, #4]
 80039ba:	60aa      	str	r2, [r5, #8]
 80039bc:	60eb      	str	r3, [r5, #12]
 80039be:	8823      	ldrh	r3, [r4, #0]
 80039c0:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80039c2:	481e      	ldr	r0, [pc, #120]	; (8003a3c <print_KISS+0x420>)
 80039c4:	f7fc fc24 	bl	8000210 <strlen>
 80039c8:	4603      	mov	r3, r0
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	230a      	movs	r3, #10
 80039ce:	491b      	ldr	r1, [pc, #108]	; (8003a3c <print_KISS+0x420>)
 80039d0:	481b      	ldr	r0, [pc, #108]	; (8003a40 <print_KISS+0x424>)
 80039d2:	f003 f8aa 	bl	8006b2a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e017      	b.n	8003a0c <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e4:	4413      	add	r3, r2
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	4916      	ldr	r1, [pc, #88]	; (8003a44 <print_KISS+0x428>)
 80039ec:	4813      	ldr	r0, [pc, #76]	; (8003a3c <print_KISS+0x420>)
 80039ee:	f003 ffdd 	bl	80079ac <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80039f2:	4812      	ldr	r0, [pc, #72]	; (8003a3c <print_KISS+0x420>)
 80039f4:	f7fc fc0c 	bl	8000210 <strlen>
 80039f8:	4603      	mov	r3, r0
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	230a      	movs	r3, #10
 80039fe:	490f      	ldr	r1, [pc, #60]	; (8003a3c <print_KISS+0x420>)
 8003a00:	480f      	ldr	r0, [pc, #60]	; (8003a40 <print_KISS+0x424>)
 8003a02:	f003 f892 	bl	8006b2a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b07      	cmp	r3, #7
 8003a10:	dde4      	ble.n	80039dc <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <print_KISS+0x420>)
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <print_KISS+0x42c>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003a1a:	4808      	ldr	r0, [pc, #32]	; (8003a3c <print_KISS+0x420>)
 8003a1c:	f7fc fbf8 	bl	8000210 <strlen>
 8003a20:	4603      	mov	r3, r0
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	230a      	movs	r3, #10
 8003a26:	4905      	ldr	r1, [pc, #20]	; (8003a3c <print_KISS+0x420>)
 8003a28:	4805      	ldr	r0, [pc, #20]	; (8003a40 <print_KISS+0x424>)
 8003a2a:	f003 f87e 	bl	8006b2a <HAL_UART_Transmit>

}
 8003a2e:	bf00      	nop
 8003a30:	3734      	adds	r7, #52	; 0x34
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	080087f0 	.word	0x080087f0
 8003a3c:	20002638 	.word	0x20002638
 8003a40:	200034f4 	.word	0x200034f4
 8003a44:	080087bc 	.word	0x080087bc
 8003a48:	080087c4 	.word	0x080087c4
 8003a4c:	080088cc 	.word	0x080088cc

08003a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a54:	f000 fd18 	bl	8004488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a58:	f000 f820 	bl	8003a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a5c:	f000 f9f0 	bl	8003e40 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a60:	f000 f9ce 	bl	8003e00 <MX_DMA_Init>
  MX_DAC_Init();
 8003a64:	f000 f888 	bl	8003b78 <MX_DAC_Init>
  MX_TIM2_Init();
 8003a68:	f000 f8b0 	bl	8003bcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8003a6c:	f000 f8fa 	bl	8003c64 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003a70:	f000 f994 	bl	8003d9c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003a74:	f000 f944 	bl	8003d00 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8003a78:	4806      	ldr	r0, [pc, #24]	; (8003a94 <main+0x44>)
 8003a7a:	f002 fbe4 	bl	8006246 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8003a7e:	4806      	ldr	r0, [pc, #24]	; (8003a98 <main+0x48>)
 8003a80:	f002 fc30 	bl	80062e4 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8003a84:	f000 fabc 	bl	8004000 <uart_gpio_init>

	initProgram(false);
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f7fe fc4b 	bl	8002324 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8003a8e:	f7fd fa67 	bl	8000f60 <tx_rx>
 8003a92:	e7fc      	b.n	8003a8e <main+0x3e>
 8003a94:	200034b4 	.word	0x200034b4
 8003a98:	200031fc 	.word	0x200031fc

08003a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b094      	sub	sp, #80	; 0x50
 8003aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	2234      	movs	r2, #52	; 0x34
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 ff76 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab0:	f107 0308 	add.w	r3, r7, #8
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <SystemClock_Config+0xd4>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <SystemClock_Config+0xd4>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <SystemClock_Config+0xd4>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003adc:	2300      	movs	r3, #0
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <SystemClock_Config+0xd8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <SystemClock_Config+0xd8>)
 8003aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <SystemClock_Config+0xd8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b06:	2302      	movs	r3, #2
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003b10:	2304      	movs	r3, #4
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8003b14:	235a      	movs	r3, #90	; 0x5a
 8003b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b20:	2302      	movs	r3, #2
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 f907 	bl	8005d3c <HAL_RCC_OscConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003b34:	f000 fa8c 	bl	8004050 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b38:	230f      	movs	r3, #15
 8003b3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b50:	f107 0308 	add.w	r3, r7, #8
 8003b54:	2102      	movs	r1, #2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 fe36 	bl	80057c8 <HAL_RCC_ClockConfig>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003b62:	f000 fa75 	bl	8004050 <Error_Handler>
  }
}
 8003b66:	bf00      	nop
 8003b68:	3750      	adds	r7, #80	; 0x50
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40007000 	.word	0x40007000

08003b78 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003b7e:	463b      	mov	r3, r7
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <MX_DAC_Init+0x4c>)
 8003b88:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <MX_DAC_Init+0x50>)
 8003b8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003b8c:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <MX_DAC_Init+0x4c>)
 8003b8e:	f000 fe50 	bl	8004832 <HAL_DAC_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003b98:	f000 fa5a 	bl	8004050 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003b9c:	2324      	movs	r3, #36	; 0x24
 8003b9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4806      	ldr	r0, [pc, #24]	; (8003bc4 <MX_DAC_Init+0x4c>)
 8003bac:	f000 ff71 	bl	8004a92 <HAL_DAC_ConfigChannel>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003bb6:	f000 fa4b 	bl	8004050 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200034a0 	.word	0x200034a0
 8003bc8:	40007400 	.word	0x40007400

08003bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003be0:	463b      	mov	r3, r7
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003bfe:	2263      	movs	r2, #99	; 0x63
 8003c00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c0e:	4814      	ldr	r0, [pc, #80]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003c10:	f002 faee 	bl	80061f0 <HAL_TIM_Base_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003c1a:	f000 fa19 	bl	8004050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c24:	f107 0308 	add.w	r3, r7, #8
 8003c28:	4619      	mov	r1, r3
 8003c2a:	480d      	ldr	r0, [pc, #52]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003c2c:	f002 fc86 	bl	800653c <HAL_TIM_ConfigClockSource>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003c36:	f000 fa0b 	bl	8004050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c42:	463b      	mov	r3, r7
 8003c44:	4619      	mov	r1, r3
 8003c46:	4806      	ldr	r0, [pc, #24]	; (8003c60 <MX_TIM2_Init+0x94>)
 8003c48:	f002 fe92 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003c52:	f000 f9fd 	bl	8004050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	200034b4 	.word	0x200034b4

08003c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c78:	463b      	mov	r3, r7
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <MX_TIM3_Init+0x98>)
 8003c84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003c88:	2259      	movs	r2, #89	; 0x59
 8003c8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8003c92:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003c94:	f240 3241 	movw	r2, #833	; 0x341
 8003c98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ca6:	4814      	ldr	r0, [pc, #80]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003ca8:	f002 faa2 	bl	80061f0 <HAL_TIM_Base_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003cb2:	f000 f9cd 	bl	8004050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	480d      	ldr	r0, [pc, #52]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003cc4:	f002 fc3a 	bl	800653c <HAL_TIM_ConfigClockSource>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003cce:	f000 f9bf 	bl	8004050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cda:	463b      	mov	r3, r7
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4806      	ldr	r0, [pc, #24]	; (8003cf8 <MX_TIM3_Init+0x94>)
 8003ce0:	f002 fe46 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003cea:	f000 f9b1 	bl	8004050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200031fc 	.word	0x200031fc
 8003cfc:	40000400 	.word	0x40000400

08003d00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d14:	463b      	mov	r3, r7
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <MX_TIM4_Init+0x98>)
 8003d20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d24:	2259      	movs	r2, #89	; 0x59
 8003d26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d36:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d42:	4814      	ldr	r0, [pc, #80]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d44:	f002 fa54 	bl	80061f0 <HAL_TIM_Base_Init>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003d4e:	f000 f97f 	bl	8004050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	480d      	ldr	r0, [pc, #52]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d60:	f002 fbec 	bl	800653c <HAL_TIM_ConfigClockSource>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003d6a:	f000 f971 	bl	8004050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d76:	463b      	mov	r3, r7
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4806      	ldr	r0, [pc, #24]	; (8003d94 <MX_TIM4_Init+0x94>)
 8003d7c:	f002 fdf8 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003d86:	f000 f963 	bl	8004050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20003734 	.word	0x20003734
 8003d98:	40000800 	.word	0x40000800

08003d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <MX_USART2_UART_Init+0x60>)
 8003da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003dc2:	220c      	movs	r2, #12
 8003dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dd2:	4809      	ldr	r0, [pc, #36]	; (8003df8 <MX_USART2_UART_Init+0x5c>)
 8003dd4:	f002 fe5c 	bl	8006a90 <HAL_UART_Init>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003dde:	f000 f937 	bl	8004050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003de2:	2200      	movs	r2, #0
 8003de4:	2100      	movs	r1, #0
 8003de6:	2026      	movs	r0, #38	; 0x26
 8003de8:	f000 fcdf 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003dec:	2026      	movs	r0, #38	; 0x26
 8003dee:	f000 fcf8 	bl	80047e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200034f4 	.word	0x200034f4
 8003dfc:	40004400 	.word	0x40004400

08003e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <MX_DMA_Init+0x3c>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	4a0b      	ldr	r2, [pc, #44]	; (8003e3c <MX_DMA_Init+0x3c>)
 8003e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e14:	6313      	str	r3, [r2, #48]	; 0x30
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <MX_DMA_Init+0x3c>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2100      	movs	r1, #0
 8003e26:	2010      	movs	r0, #16
 8003e28:	f000 fcbf 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003e2c:	2010      	movs	r0, #16
 8003e2e:	f000 fcd8 	bl	80047e2 <HAL_NVIC_EnableIRQ>

}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800

08003e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	60da      	str	r2, [r3, #12]
 8003e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a44      	ldr	r2, [pc, #272]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a3d      	ldr	r2, [pc, #244]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a36      	ldr	r2, [pc, #216]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <MX_GPIO_Init+0x130>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003ecc:	4829      	ldr	r0, [pc, #164]	; (8003f74 <MX_GPIO_Init+0x134>)
 8003ece:	f001 fc49 	bl	8005764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2110      	movs	r1, #16
 8003ed6:	4828      	ldr	r0, [pc, #160]	; (8003f78 <MX_GPIO_Init+0x138>)
 8003ed8:	f001 fc44 	bl	8005764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <MX_GPIO_Init+0x13c>)
 8003ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4821      	ldr	r0, [pc, #132]	; (8003f78 <MX_GPIO_Init+0x138>)
 8003ef2:	f001 faa5 	bl	8005440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <MX_GPIO_Init+0x140>)
 8003efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	4619      	mov	r1, r3
 8003f08:	481a      	ldr	r0, [pc, #104]	; (8003f74 <MX_GPIO_Init+0x134>)
 8003f0a:	f001 fa99 	bl	8005440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8003f0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	4619      	mov	r1, r3
 8003f26:	4813      	ldr	r0, [pc, #76]	; (8003f74 <MX_GPIO_Init+0x134>)
 8003f28:	f001 fa8a 	bl	8005440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f30:	2301      	movs	r3, #1
 8003f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8003f3c:	f107 0314 	add.w	r3, r7, #20
 8003f40:	4619      	mov	r1, r3
 8003f42:	480d      	ldr	r0, [pc, #52]	; (8003f78 <MX_GPIO_Init+0x138>)
 8003f44:	f001 fa7c 	bl	8005440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	2006      	movs	r0, #6
 8003f4e:	f000 fc2c 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003f52:	2006      	movs	r0, #6
 8003f54:	f000 fc45 	bl	80047e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	2028      	movs	r0, #40	; 0x28
 8003f5e:	f000 fc24 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f62:	2028      	movs	r0, #40	; 0x28
 8003f64:	f000 fc3d 	bl	80047e2 <HAL_NVIC_EnableIRQ>

}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	; 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40020800 	.word	0x40020800
 8003f7c:	10210000 	.word	0x10210000
 8003f80:	10110000 	.word	0x10110000

08003f84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8003f94:	f7fe fa98 	bl	80024c8 <Tim3IT>
	else
		__NOP();
}
 8003f98:	e000      	b.n	8003f9c <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8003f9a:	bf00      	nop
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200031fc 	.word	0x200031fc

08003fa8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8003fb8:	f7fe faba 	bl	8002530 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d103      	bne.n	8003fcc <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_GPIO_EXTI_Callback+0x30>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 8003fca:	e000      	b.n	8003fce <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8003fcc:	bf00      	nop
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000a05 	.word	0x20000a05

08003fdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_UART_RxCpltCallback+0x20>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8003fee:	f7fd f9e3 	bl	80013b8 <UART2_EXCEPTION_CALLBACK>
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40004400 	.word	0x40004400

08004000 <uart_gpio_init>:

void uart_gpio_init()
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <uart_gpio_init+0x48>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <uart_gpio_init+0x48>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <uart_gpio_init+0x48>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8004022:	230c      	movs	r3, #12
 8004024:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800402a:	2301      	movs	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004032:	2307      	movs	r3, #7
 8004034:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4804      	ldr	r0, [pc, #16]	; (800404c <uart_gpio_init+0x4c>)
 800403c:	f001 fa00 	bl	8005440 <HAL_GPIO_Init>
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000

08004050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_MspInit+0x4c>)
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <HAL_MspInit+0x4c>)
 8004070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004074:	6453      	str	r3, [r2, #68]	; 0x44
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_MspInit+0x4c>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_MspInit+0x4c>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_MspInit+0x4c>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_MspInit+0x4c>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800409e:	2007      	movs	r0, #7
 80040a0:	f000 fb78 	bl	8004794 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800

080040b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2f      	ldr	r2, [pc, #188]	; (800418c <HAL_DAC_MspInit+0xdc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d158      	bne.n	8004184 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	4b2e      	ldr	r3, [pc, #184]	; (8004190 <HAL_DAC_MspInit+0xe0>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <HAL_DAC_MspInit+0xe0>)
 80040dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_DAC_MspInit+0xe0>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b27      	ldr	r3, [pc, #156]	; (8004190 <HAL_DAC_MspInit+0xe0>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	4a26      	ldr	r2, [pc, #152]	; (8004190 <HAL_DAC_MspInit+0xe0>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6313      	str	r3, [r2, #48]	; 0x30
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_DAC_MspInit+0xe0>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800410a:	2310      	movs	r3, #16
 800410c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800410e:	2303      	movs	r3, #3
 8004110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	4619      	mov	r1, r3
 800411c:	481d      	ldr	r0, [pc, #116]	; (8004194 <HAL_DAC_MspInit+0xe4>)
 800411e:	f001 f98f 	bl	8005440 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_DAC_MspInit+0xec>)
 8004126:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 800412a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800412e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 8004138:	2200      	movs	r2, #0
 800413a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 800413e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004142:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 8004146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800414a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 800414e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004152:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 8004156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800415a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 800415e:	2200      	movs	r2, #0
 8004160:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 8004164:	2200      	movs	r2, #0
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8004168:	480b      	ldr	r0, [pc, #44]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 800416a:	f000 fd69 	bl	8004c40 <HAL_DMA_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8004174:	f7ff ff6c 	bl	8004050 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 800417c:	609a      	str	r2, [r3, #8]
 800417e:	4a06      	ldr	r2, [pc, #24]	; (8004198 <HAL_DAC_MspInit+0xe8>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004184:	bf00      	nop
 8004186:	3728      	adds	r7, #40	; 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40007400 	.word	0x40007400
 8004190:	40023800 	.word	0x40023800
 8004194:	40020000 	.word	0x40020000
 8004198:	2000323c 	.word	0x2000323c
 800419c:	40026088 	.word	0x40026088

080041a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d10e      	bne.n	80041d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	6413      	str	r3, [r2, #64]	; 0x40
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80041ce:	e02e      	b.n	800422e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_TIM_Base_MspInit+0x9c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d116      	bne.n	8004208 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	4b16      	ldr	r3, [pc, #88]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a15      	ldr	r2, [pc, #84]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 80041e4:	f043 0302 	orr.w	r3, r3, #2
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	201d      	movs	r0, #29
 80041fc:	f000 fad5 	bl	80047aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004200:	201d      	movs	r0, #29
 8004202:	f000 faee 	bl	80047e2 <HAL_NVIC_EnableIRQ>
}
 8004206:	e012      	b.n	800422e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <HAL_TIM_Base_MspInit+0xa0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10d      	bne.n	800422e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_TIM_Base_MspInit+0x98>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800

08004244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_UART_MspInit+0x94>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d133      	bne.n	80042ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_UART_MspInit+0x98>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_UART_MspInit+0x98>)
 8004270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004274:	6413      	str	r3, [r2, #64]	; 0x40
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_UART_MspInit+0x98>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_UART_MspInit+0x98>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	4a14      	ldr	r2, [pc, #80]	; (80042dc <HAL_UART_MspInit+0x98>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6313      	str	r3, [r2, #48]	; 0x30
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_UART_MspInit+0x98>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800429e:	230c      	movs	r3, #12
 80042a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042aa:	2303      	movs	r3, #3
 80042ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042ae:	2307      	movs	r3, #7
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b2:	f107 0314 	add.w	r3, r7, #20
 80042b6:	4619      	mov	r1, r3
 80042b8:	4809      	ldr	r0, [pc, #36]	; (80042e0 <HAL_UART_MspInit+0x9c>)
 80042ba:	f001 f8c1 	bl	8005440 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	2026      	movs	r0, #38	; 0x26
 80042c4:	f000 fa71 	bl	80047aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042c8:	2026      	movs	r0, #38	; 0x26
 80042ca:	f000 fa8a 	bl	80047e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042ce:	bf00      	nop
 80042d0:	3728      	adds	r7, #40	; 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40004400 	.word	0x40004400
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40020000 	.word	0x40020000

080042e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f6:	e7fe      	b.n	80042f6 <HardFault_Handler+0x4>

080042f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042fc:	e7fe      	b.n	80042fc <MemManage_Handler+0x4>

080042fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004302:	e7fe      	b.n	8004302 <BusFault_Handler+0x4>

08004304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004308:	e7fe      	b.n	8004308 <UsageFault_Handler+0x4>

0800430a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004338:	f000 f8f8 	bl	800452c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}

08004340 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004344:	2001      	movs	r0, #1
 8004346:	f001 fa27 	bl	8005798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004354:	4802      	ldr	r0, [pc, #8]	; (8004360 <DMA1_Stream5_IRQHandler+0x10>)
 8004356:	f000 fe0b 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	2000323c 	.word	0x2000323c

08004364 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004368:	4802      	ldr	r0, [pc, #8]	; (8004374 <TIM3_IRQHandler+0x10>)
 800436a:	f001 ffdf 	bl	800632c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200031fc 	.word	0x200031fc

08004378 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800437c:	4802      	ldr	r0, [pc, #8]	; (8004388 <USART2_IRQHandler+0x10>)
 800437e:	f002 fcc3 	bl	8006d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200034f4 	.word	0x200034f4

0800438c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004390:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004394:	f001 fa00 	bl	8005798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}

0800439c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <_sbrk+0x5c>)
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <_sbrk+0x60>)
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <_sbrk+0x64>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <_sbrk+0x64>)
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <_sbrk+0x68>)
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <_sbrk+0x64>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d207      	bcs.n	80043dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043cc:	f003 fa98 	bl	8007900 <__errno>
 80043d0:	4602      	mov	r2, r0
 80043d2:	230c      	movs	r3, #12
 80043d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	e009      	b.n	80043f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <_sbrk+0x64>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	4a05      	ldr	r2, [pc, #20]	; (8004400 <_sbrk+0x64>)
 80043ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20020000 	.word	0x20020000
 80043fc:	00000400 	.word	0x00000400
 8004400:	20000a28 	.word	0x20000a28
 8004404:	20003780 	.word	0x20003780

08004408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <SystemInit+0x28>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	4a07      	ldr	r2, [pc, #28]	; (8004430 <SystemInit+0x28>)
 8004414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <SystemInit+0x28>)
 800441e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004422:	609a      	str	r2, [r3, #8]
#endif
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800446c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800443a:	e003      	b.n	8004444 <LoopCopyDataInit>

0800443c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800443e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004442:	3104      	adds	r1, #4

08004444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004444:	480b      	ldr	r0, [pc, #44]	; (8004474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800444a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800444c:	d3f6      	bcc.n	800443c <CopyDataInit>
  ldr  r2, =_sbss
 800444e:	4a0b      	ldr	r2, [pc, #44]	; (800447c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004450:	e002      	b.n	8004458 <LoopFillZerobss>

08004452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004454:	f842 3b04 	str.w	r3, [r2], #4

08004458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800445a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800445c:	d3f9      	bcc.n	8004452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800445e:	f7ff ffd3 	bl	8004408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004462:	f003 fa53 	bl	800790c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004466:	f7ff faf3 	bl	8003a50 <main>
  bx  lr    
 800446a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800446c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004470:	08008944 	.word	0x08008944
  ldr  r0, =_sdata
 8004474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004478:	200009e4 	.word	0x200009e4
  ldr  r2, =_sbss
 800447c:	200009e4 	.word	0x200009e4
  ldr  r3, = _ebss
 8004480:	2000377c 	.word	0x2000377c

08004484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004484:	e7fe      	b.n	8004484 <ADC_IRQHandler>
	...

08004488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800448c:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <HAL_Init+0x40>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <HAL_Init+0x40>)
 8004492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_Init+0x40>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <HAL_Init+0x40>)
 800449e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <HAL_Init+0x40>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <HAL_Init+0x40>)
 80044aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044b0:	2003      	movs	r0, #3
 80044b2:	f000 f96f 	bl	8004794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044b6:	2000      	movs	r0, #0
 80044b8:	f000 f808 	bl	80044cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044bc:	f7ff fdd0 	bl	8004060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023c00 	.word	0x40023c00

080044cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_InitTick+0x54>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_InitTick+0x58>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f995 	bl	800481a <HAL_SYSTICK_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00e      	b.n	8004518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d80a      	bhi.n	8004516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004500:	2200      	movs	r2, #0
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	f000 f94f 	bl	80047aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <HAL_InitTick+0x5c>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000974 	.word	0x20000974
 8004524:	2000097c 	.word	0x2000097c
 8004528:	20000978 	.word	0x20000978

0800452c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_IncTick+0x20>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_IncTick+0x24>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4413      	add	r3, r2
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_IncTick+0x24>)
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000097c 	.word	0x2000097c
 8004550:	20003774 	.word	0x20003774

08004554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return uwTick;
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <HAL_GetTick+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20003774 	.word	0x20003774

0800456c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004574:	f7ff ffee 	bl	8004554 <HAL_GetTick>
 8004578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d005      	beq.n	8004592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_Delay+0x40>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004592:	bf00      	nop
 8004594:	f7ff ffde 	bl	8004554 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d8f7      	bhi.n	8004594 <HAL_Delay+0x28>
  {
  }
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000097c 	.word	0x2000097c

080045b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <__NVIC_SetPriorityGrouping+0x44>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045cc:	4013      	ands	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045e2:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <__NVIC_SetPriorityGrouping+0x44>)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	60d3      	str	r3, [r2, #12]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <__NVIC_GetPriorityGrouping+0x18>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	0a1b      	lsrs	r3, r3, #8
 8004602:	f003 0307 	and.w	r3, r3, #7
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004622:	2b00      	cmp	r3, #0
 8004624:	db0b      	blt.n	800463e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	f003 021f 	and.w	r2, r3, #31
 800462c:	4907      	ldr	r1, [pc, #28]	; (800464c <__NVIC_EnableIRQ+0x38>)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2001      	movs	r0, #1
 8004636:	fa00 f202 	lsl.w	r2, r0, r2
 800463a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e000e100 	.word	0xe000e100

08004650 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	db10      	blt.n	8004684 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	f003 021f 	and.w	r2, r3, #31
 8004668:	4909      	ldr	r1, [pc, #36]	; (8004690 <__NVIC_DisableIRQ+0x40>)
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2001      	movs	r0, #1
 8004672:	fa00 f202 	lsl.w	r2, r0, r2
 8004676:	3320      	adds	r3, #32
 8004678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800467c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004680:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000e100 	.word	0xe000e100

08004694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db0a      	blt.n	80046be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	490c      	ldr	r1, [pc, #48]	; (80046e0 <__NVIC_SetPriority+0x4c>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	0112      	lsls	r2, r2, #4
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	440b      	add	r3, r1
 80046b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046bc:	e00a      	b.n	80046d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4908      	ldr	r1, [pc, #32]	; (80046e4 <__NVIC_SetPriority+0x50>)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3b04      	subs	r3, #4
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	440b      	add	r3, r1
 80046d2:	761a      	strb	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f1c3 0307 	rsb	r3, r3, #7
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf28      	it	cs
 8004706:	2304      	movcs	r3, #4
 8004708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3304      	adds	r3, #4
 800470e:	2b06      	cmp	r3, #6
 8004710:	d902      	bls.n	8004718 <NVIC_EncodePriority+0x30>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3b03      	subs	r3, #3
 8004716:	e000      	b.n	800471a <NVIC_EncodePriority+0x32>
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	401a      	ands	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004730:	f04f 31ff 	mov.w	r1, #4294967295
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43d9      	mvns	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	4313      	orrs	r3, r2
         );
}
 8004742:	4618      	mov	r0, r3
 8004744:	3724      	adds	r7, #36	; 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004760:	d301      	bcc.n	8004766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004762:	2301      	movs	r3, #1
 8004764:	e00f      	b.n	8004786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <SysTick_Config+0x40>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476e:	210f      	movs	r1, #15
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	f7ff ff8e 	bl	8004694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <SysTick_Config+0x40>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <SysTick_Config+0x40>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010

08004794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ff07 	bl	80045b0 <__NVIC_SetPriorityGrouping>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4603      	mov	r3, r0
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047bc:	f7ff ff1c 	bl	80045f8 <__NVIC_GetPriorityGrouping>
 80047c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7ff ff8e 	bl	80046e8 <NVIC_EncodePriority>
 80047cc:	4602      	mov	r2, r0
 80047ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff5d 	bl	8004694 <__NVIC_SetPriority>
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	4603      	mov	r3, r0
 80047ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff0f 	bl	8004614 <__NVIC_EnableIRQ>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff1f 	bl	8004650 <__NVIC_DisableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ff94 	bl	8004750 <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e014      	b.n	800486e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	791b      	ldrb	r3, [r3, #4]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fc2b 	bl	80040b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	795b      	ldrb	r3, [r3, #5]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_DAC_Start_DMA+0x1e>
 8004892:	2302      	movs	r3, #2
 8004894:	e08e      	b.n	80049b4 <HAL_DAC_Start_DMA+0x13c>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2202      	movs	r2, #2
 80048a0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d12a      	bne.n	80048fe <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a43      	ldr	r2, [pc, #268]	; (80049bc <HAL_DAC_Start_DMA+0x144>)
 80048ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a42      	ldr	r2, [pc, #264]	; (80049c0 <HAL_DAC_Start_DMA+0x148>)
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <HAL_DAC_Start_DMA+0x14c>)
 80048be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048ce:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d009      	beq.n	80048ea <HAL_DAC_Start_DMA+0x72>
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d00c      	beq.n	80048f4 <HAL_DAC_Start_DMA+0x7c>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d000      	beq.n	80048e0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80048de:	e039      	b.n	8004954 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	617b      	str	r3, [r7, #20]
        break;
 80048e8:	e034      	b.n	8004954 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	617b      	str	r3, [r7, #20]
        break;
 80048f2:	e02f      	b.n	8004954 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3310      	adds	r3, #16
 80048fa:	617b      	str	r3, [r7, #20]
        break;
 80048fc:	e02a      	b.n	8004954 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a31      	ldr	r2, [pc, #196]	; (80049c8 <HAL_DAC_Start_DMA+0x150>)
 8004904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4a30      	ldr	r2, [pc, #192]	; (80049cc <HAL_DAC_Start_DMA+0x154>)
 800490c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	4a2f      	ldr	r2, [pc, #188]	; (80049d0 <HAL_DAC_Start_DMA+0x158>)
 8004914:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004924:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b04      	cmp	r3, #4
 800492a:	d009      	beq.n	8004940 <HAL_DAC_Start_DMA+0xc8>
 800492c:	2b08      	cmp	r3, #8
 800492e:	d00c      	beq.n	800494a <HAL_DAC_Start_DMA+0xd2>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d000      	beq.n	8004936 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004934:	e00e      	b.n	8004954 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3314      	adds	r3, #20
 800493c:	617b      	str	r3, [r7, #20]
        break;
 800493e:	e009      	b.n	8004954 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3318      	adds	r3, #24
 8004946:	617b      	str	r3, [r7, #20]
        break;
 8004948:	e004      	b.n	8004954 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	331c      	adds	r3, #28
 8004950:	617b      	str	r3, [r7, #20]
        break;
 8004952:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10f      	bne.n	800497a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004968:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6898      	ldr	r0, [r3, #8]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	f000 fa12 	bl	8004d9c <HAL_DMA_Start_IT>
 8004978:	e00e      	b.n	8004998 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004988:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68d8      	ldr	r0, [r3, #12]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	f000 fa02 	bl	8004d9c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6819      	ldr	r1, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	08004b2d 	.word	0x08004b2d
 80049c0:	08004b4f 	.word	0x08004b4f
 80049c4:	08004b6b 	.word	0x08004b6b
 80049c8:	08004bd5 	.word	0x08004bd5
 80049cc:	08004bf7 	.word	0x08004bf7
 80049d0:	08004c13 	.word	0x08004c13

080049d4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	400a      	ands	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	400a      	ands	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fa14 	bl	8004e4c <HAL_DMA_Abort>
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	e006      	b.n	8004a38 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fa0c 	bl	8004e4c <HAL_DMA_Abort>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2204      	movs	r2, #4
 8004a42:	711a      	strb	r2, [r3, #4]
 8004a44:	e002      	b.n	8004a4c <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	795b      	ldrb	r3, [r3, #5]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_DAC_ConfigChannel+0x20>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e036      	b.n	8004b20 <HAL_DAC_ConfigChannel+0x8e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2202      	movs	r2, #2
 8004abc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004ac6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	22c0      	movs	r2, #192	; 0xc0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff ff8b 	bl	8004a56 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	711a      	strb	r2, [r3, #4]
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff ff84 	bl	8004a6a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f043 0204 	orr.w	r2, r3, #4
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ff7a 	bl	8004a7e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	711a      	strb	r2, [r3, #4]
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff ffd8 	bl	8004b98 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	711a      	strb	r2, [r3, #4]
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff ffd1 	bl	8004bac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f043 0204 	orr.w	r2, r3, #4
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff ffc7 	bl	8004bc0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	711a      	strb	r2, [r3, #4]
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c4c:	f7ff fc82 	bl	8004554 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e099      	b.n	8004d90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c7c:	e00f      	b.n	8004c9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c7e:	f7ff fc69 	bl	8004554 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	d908      	bls.n	8004c9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2203      	movs	r2, #3
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e078      	b.n	8004d90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e8      	bne.n	8004c7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4b38      	ldr	r3, [pc, #224]	; (8004d98 <HAL_DMA_Init+0x158>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d107      	bne.n	8004d08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	4313      	orrs	r3, r2
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0307 	bic.w	r3, r3, #7
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d117      	bne.n	8004d62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00e      	beq.n	8004d62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb01 	bl	800534c <DMA_CheckFifoParam>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2240      	movs	r2, #64	; 0x40
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e016      	b.n	8004d90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fab8 	bl	80052e0 <DMA_CalcBaseAndBitshift>
 8004d70:	4603      	mov	r3, r0
 8004d72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d78:	223f      	movs	r2, #63	; 0x3f
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	f010803f 	.word	0xf010803f

08004d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_DMA_Start_IT+0x26>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e040      	b.n	8004e44 <HAL_DMA_Start_IT+0xa8>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d12f      	bne.n	8004e36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fa4a 	bl	8005284 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	223f      	movs	r2, #63	; 0x3f
 8004df6:	409a      	lsls	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0216 	orr.w	r2, r2, #22
 8004e0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0208 	orr.w	r2, r2, #8
 8004e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	e005      	b.n	8004e42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e5a:	f7ff fb7b 	bl	8004554 <HAL_GetTick>
 8004e5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d008      	beq.n	8004e7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e052      	b.n	8004f24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0216 	bic.w	r2, r2, #22
 8004e8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_DMA_Abort+0x62>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0208 	bic.w	r2, r2, #8
 8004ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ece:	e013      	b.n	8004ef8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed0:	f7ff fb40 	bl	8004554 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d90c      	bls.n	8004ef8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e015      	b.n	8004f24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e4      	bne.n	8004ed0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0a:	223f      	movs	r2, #63	; 0x3f
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d004      	beq.n	8004f4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2280      	movs	r2, #128	; 0x80
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e00c      	b.n	8004f64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2205      	movs	r2, #5
 8004f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f7c:	4b92      	ldr	r3, [pc, #584]	; (80051c8 <HAL_DMA_IRQHandler+0x258>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a92      	ldr	r2, [pc, #584]	; (80051cc <HAL_DMA_IRQHandler+0x25c>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	0a9b      	lsrs	r3, r3, #10
 8004f88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01a      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0204 	bic.w	r2, r2, #4
 8004fc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	2208      	movs	r2, #8
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	f043 0201 	orr.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d012      	beq.n	8005012 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	2201      	movs	r2, #1
 8005000:	409a      	lsls	r2, r3
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f043 0202 	orr.w	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005016:	2204      	movs	r2, #4
 8005018:	409a      	lsls	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d012      	beq.n	8005048 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005034:	2204      	movs	r2, #4
 8005036:	409a      	lsls	r2, r3
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	f043 0204 	orr.w	r2, r3, #4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	2210      	movs	r2, #16
 800504e:	409a      	lsls	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d043      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03c      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506a:	2210      	movs	r2, #16
 800506c:	409a      	lsls	r2, r3
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d018      	beq.n	80050b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d024      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
 800509e:	e01f      	b.n	80050e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
 80050b0:	e016      	b.n	80050e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0208 	bic.w	r2, r2, #8
 80050ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	2220      	movs	r2, #32
 80050e6:	409a      	lsls	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 808e 	beq.w	800520e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8086 	beq.w	800520e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	2220      	movs	r2, #32
 8005108:	409a      	lsls	r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b05      	cmp	r3, #5
 8005118:	d136      	bne.n	8005188 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0216 	bic.w	r2, r2, #22
 8005128:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005138:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_DMA_IRQHandler+0x1da>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0208 	bic.w	r2, r2, #8
 8005158:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	223f      	movs	r2, #63	; 0x3f
 8005160:	409a      	lsls	r2, r3
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517a:	2b00      	cmp	r3, #0
 800517c:	d07d      	beq.n	800527a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
        }
        return;
 8005186:	e078      	b.n	800527a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01c      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d108      	bne.n	80051b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d030      	beq.n	800520e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
 80051b4:	e02b      	b.n	800520e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d027      	beq.n	800520e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
 80051c6:	e022      	b.n	800520e <HAL_DMA_IRQHandler+0x29e>
 80051c8:	20000974 	.word	0x20000974
 80051cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10f      	bne.n	80051fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0210 	bic.w	r2, r2, #16
 80051ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	2b00      	cmp	r3, #0
 8005214:	d032      	beq.n	800527c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d022      	beq.n	8005268 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2205      	movs	r2, #5
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	3301      	adds	r3, #1
 800523e:	60bb      	str	r3, [r7, #8]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	429a      	cmp	r2, r3
 8005244:	d307      	bcc.n	8005256 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f2      	bne.n	800523a <HAL_DMA_IRQHandler+0x2ca>
 8005254:	e000      	b.n	8005258 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005256:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
 8005278:	e000      	b.n	800527c <HAL_DMA_IRQHandler+0x30c>
        return;
 800527a:	bf00      	nop
    }
  }
}
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop

08005284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	d108      	bne.n	80052c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052c2:	e007      	b.n	80052d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	3b10      	subs	r3, #16
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <DMA_CalcBaseAndBitshift+0x64>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052fa:	4a13      	ldr	r2, [pc, #76]	; (8005348 <DMA_CalcBaseAndBitshift+0x68>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d909      	bls.n	8005322 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	659a      	str	r2, [r3, #88]	; 0x58
 8005320:	e007      	b.n	8005332 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	aaaaaaab 	.word	0xaaaaaaab
 8005348:	080088f8 	.word	0x080088f8

0800534c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11f      	bne.n	80053a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d855      	bhi.n	8005418 <DMA_CheckFifoParam+0xcc>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <DMA_CheckFifoParam+0x28>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005385 	.word	0x08005385
 8005378:	08005397 	.word	0x08005397
 800537c:	08005385 	.word	0x08005385
 8005380:	08005419 	.word	0x08005419
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d045      	beq.n	800541c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005394:	e042      	b.n	800541c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800539e:	d13f      	bne.n	8005420 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a4:	e03c      	b.n	8005420 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ae:	d121      	bne.n	80053f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d836      	bhi.n	8005424 <DMA_CheckFifoParam+0xd8>
 80053b6:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <DMA_CheckFifoParam+0x70>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053cd 	.word	0x080053cd
 80053c0:	080053d3 	.word	0x080053d3
 80053c4:	080053cd 	.word	0x080053cd
 80053c8:	080053e5 	.word	0x080053e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
      break;
 80053d0:	e02f      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d024      	beq.n	8005428 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e2:	e021      	b.n	8005428 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ec:	d11e      	bne.n	800542c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053f2:	e01b      	b.n	800542c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d902      	bls.n	8005400 <DMA_CheckFifoParam+0xb4>
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d003      	beq.n	8005406 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053fe:	e018      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
      break;
 8005404:	e015      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00e      	beq.n	8005430 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
      break;
 8005416:	e00b      	b.n	8005430 <DMA_CheckFifoParam+0xe4>
      break;
 8005418:	bf00      	nop
 800541a:	e00a      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      break;
 800541c:	bf00      	nop
 800541e:	e008      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      break;
 8005420:	bf00      	nop
 8005422:	e006      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      break;
 8005424:	bf00      	nop
 8005426:	e004      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      break;
 8005428:	bf00      	nop
 800542a:	e002      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      break;   
 800542c:	bf00      	nop
 800542e:	e000      	b.n	8005432 <DMA_CheckFifoParam+0xe6>
      break;
 8005430:	bf00      	nop
    }
  } 
  
  return status; 
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e165      	b.n	8005728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800545c:	2201      	movs	r2, #1
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	429a      	cmp	r2, r3
 8005476:	f040 8154 	bne.w	8005722 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d00b      	beq.n	800549a <HAL_GPIO_Init+0x5a>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d007      	beq.n	800549a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800548e:	2b11      	cmp	r3, #17
 8005490:	d003      	beq.n	800549a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b12      	cmp	r3, #18
 8005498:	d130      	bne.n	80054fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	2203      	movs	r2, #3
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d0:	2201      	movs	r2, #1
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4013      	ands	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	f003 0201 	and.w	r2, r3, #1
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	2203      	movs	r2, #3
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d003      	beq.n	800553c <HAL_GPIO_Init+0xfc>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b12      	cmp	r3, #18
 800553a:	d123      	bne.n	8005584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	08da      	lsrs	r2, r3, #3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3208      	adds	r2, #8
 8005544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	220f      	movs	r2, #15
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4013      	ands	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	08da      	lsrs	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3208      	adds	r2, #8
 800557e:	69b9      	ldr	r1, [r7, #24]
 8005580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	2203      	movs	r2, #3
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0203 	and.w	r2, r3, #3
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80ae 	beq.w	8005722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4b5c      	ldr	r3, [pc, #368]	; (800573c <HAL_GPIO_Init+0x2fc>)
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	4a5b      	ldr	r2, [pc, #364]	; (800573c <HAL_GPIO_Init+0x2fc>)
 80055d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055d4:	6453      	str	r3, [r2, #68]	; 0x44
 80055d6:	4b59      	ldr	r3, [pc, #356]	; (800573c <HAL_GPIO_Init+0x2fc>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055e2:	4a57      	ldr	r2, [pc, #348]	; (8005740 <HAL_GPIO_Init+0x300>)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	3302      	adds	r3, #2
 80055ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	220f      	movs	r2, #15
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a4e      	ldr	r2, [pc, #312]	; (8005744 <HAL_GPIO_Init+0x304>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d025      	beq.n	800565a <HAL_GPIO_Init+0x21a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <HAL_GPIO_Init+0x308>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01f      	beq.n	8005656 <HAL_GPIO_Init+0x216>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a4c      	ldr	r2, [pc, #304]	; (800574c <HAL_GPIO_Init+0x30c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d019      	beq.n	8005652 <HAL_GPIO_Init+0x212>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a4b      	ldr	r2, [pc, #300]	; (8005750 <HAL_GPIO_Init+0x310>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <HAL_GPIO_Init+0x20e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a4a      	ldr	r2, [pc, #296]	; (8005754 <HAL_GPIO_Init+0x314>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00d      	beq.n	800564a <HAL_GPIO_Init+0x20a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a49      	ldr	r2, [pc, #292]	; (8005758 <HAL_GPIO_Init+0x318>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <HAL_GPIO_Init+0x206>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a48      	ldr	r2, [pc, #288]	; (800575c <HAL_GPIO_Init+0x31c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <HAL_GPIO_Init+0x202>
 800563e:	2306      	movs	r3, #6
 8005640:	e00c      	b.n	800565c <HAL_GPIO_Init+0x21c>
 8005642:	2307      	movs	r3, #7
 8005644:	e00a      	b.n	800565c <HAL_GPIO_Init+0x21c>
 8005646:	2305      	movs	r3, #5
 8005648:	e008      	b.n	800565c <HAL_GPIO_Init+0x21c>
 800564a:	2304      	movs	r3, #4
 800564c:	e006      	b.n	800565c <HAL_GPIO_Init+0x21c>
 800564e:	2303      	movs	r3, #3
 8005650:	e004      	b.n	800565c <HAL_GPIO_Init+0x21c>
 8005652:	2302      	movs	r3, #2
 8005654:	e002      	b.n	800565c <HAL_GPIO_Init+0x21c>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_GPIO_Init+0x21c>
 800565a:	2300      	movs	r3, #0
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	f002 0203 	and.w	r2, r2, #3
 8005662:	0092      	lsls	r2, r2, #2
 8005664:	4093      	lsls	r3, r2
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800566c:	4934      	ldr	r1, [pc, #208]	; (8005740 <HAL_GPIO_Init+0x300>)
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	3302      	adds	r3, #2
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800567a:	4b39      	ldr	r3, [pc, #228]	; (8005760 <HAL_GPIO_Init+0x320>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	43db      	mvns	r3, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4013      	ands	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800569e:	4a30      	ldr	r2, [pc, #192]	; (8005760 <HAL_GPIO_Init+0x320>)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056a4:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <HAL_GPIO_Init+0x320>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	43db      	mvns	r3, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4013      	ands	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056c8:	4a25      	ldr	r2, [pc, #148]	; (8005760 <HAL_GPIO_Init+0x320>)
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ce:	4b24      	ldr	r3, [pc, #144]	; (8005760 <HAL_GPIO_Init+0x320>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	43db      	mvns	r3, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4013      	ands	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056f2:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <HAL_GPIO_Init+0x320>)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_GPIO_Init+0x320>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	43db      	mvns	r3, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4013      	ands	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800571c:	4a10      	ldr	r2, [pc, #64]	; (8005760 <HAL_GPIO_Init+0x320>)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3301      	adds	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b0f      	cmp	r3, #15
 800572c:	f67f ae96 	bls.w	800545c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005730:	bf00      	nop
 8005732:	3724      	adds	r7, #36	; 0x24
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40023800 	.word	0x40023800
 8005740:	40013800 	.word	0x40013800
 8005744:	40020000 	.word	0x40020000
 8005748:	40020400 	.word	0x40020400
 800574c:	40020800 	.word	0x40020800
 8005750:	40020c00 	.word	0x40020c00
 8005754:	40021000 	.word	0x40021000
 8005758:	40021400 	.word	0x40021400
 800575c:	40021800 	.word	0x40021800
 8005760:	40013c00 	.word	0x40013c00

08005764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
 8005770:	4613      	mov	r3, r2
 8005772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005774:	787b      	ldrb	r3, [r7, #1]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800577a:	887a      	ldrh	r2, [r7, #2]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005780:	e003      	b.n	800578a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005782:	887b      	ldrh	r3, [r7, #2]
 8005784:	041a      	lsls	r2, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	619a      	str	r2, [r3, #24]
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d006      	beq.n	80057bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fbf6 	bl	8003fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40013c00 	.word	0x40013c00

080057c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0cc      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057dc:	4b68      	ldr	r3, [pc, #416]	; (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d90c      	bls.n	8005804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b65      	ldr	r3, [pc, #404]	; (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f2:	4b63      	ldr	r3, [pc, #396]	; (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0b8      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d020      	beq.n	8005852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800581c:	4b59      	ldr	r3, [pc, #356]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4a58      	ldr	r2, [pc, #352]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005834:	4b53      	ldr	r3, [pc, #332]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4a52      	ldr	r2, [pc, #328]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800583e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005840:	4b50      	ldr	r3, [pc, #320]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	494d      	ldr	r1, [pc, #308]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d044      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005866:	4b47      	ldr	r3, [pc, #284]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d119      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e07f      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d003      	beq.n	8005886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005882:	2b03      	cmp	r3, #3
 8005884:	d107      	bne.n	8005896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005886:	4b3f      	ldr	r3, [pc, #252]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e06f      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005896:	4b3b      	ldr	r3, [pc, #236]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e067      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a6:	4b37      	ldr	r3, [pc, #220]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 0203 	bic.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4934      	ldr	r1, [pc, #208]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b8:	f7fe fe4c 	bl	8004554 <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c0:	f7fe fe48 	bl	8004554 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e04f      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 020c 	and.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1eb      	bne.n	80058c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058e8:	4b25      	ldr	r3, [pc, #148]	; (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d20c      	bcs.n	8005910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fe:	4b20      	ldr	r3, [pc, #128]	; (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d001      	beq.n	8005910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e032      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4916      	ldr	r1, [pc, #88]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	4313      	orrs	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	490e      	ldr	r1, [pc, #56]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	4313      	orrs	r3, r2
 800594c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800594e:	f000 f855 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 8005952:	4601      	mov	r1, r0
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 8005960:	5cd3      	ldrb	r3, [r2, r3]
 8005962:	fa21 f303 	lsr.w	r3, r1, r3
 8005966:	4a09      	ldr	r2, [pc, #36]	; (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_RCC_ClockConfig+0x1c8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fdac 	bl	80044cc <HAL_InitTick>

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40023c00 	.word	0x40023c00
 8005984:	40023800 	.word	0x40023800
 8005988:	080088e0 	.word	0x080088e0
 800598c:	20000974 	.word	0x20000974
 8005990:	20000978 	.word	0x20000978

08005994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005998:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800599a:	681b      	ldr	r3, [r3, #0]
}
 800599c:	4618      	mov	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000974 	.word	0x20000974

080059ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059b0:	f7ff fff0 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 80059b4:	4601      	mov	r1, r0
 80059b6:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	0a9b      	lsrs	r3, r3, #10
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4a03      	ldr	r2, [pc, #12]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40023800 	.word	0x40023800
 80059d0:	080088f0 	.word	0x080088f0

080059d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059d8:	f7ff ffdc 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 80059dc:	4601      	mov	r1, r0
 80059de:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	0b5b      	lsrs	r3, r3, #13
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ea:	5cd3      	ldrb	r3, [r2, r3]
 80059ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40023800 	.word	0x40023800
 80059f8:	080088f0 	.word	0x080088f0

080059fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a16:	4bc6      	ldr	r3, [pc, #792]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
 8005a1e:	2b0c      	cmp	r3, #12
 8005a20:	f200 817e 	bhi.w	8005d20 <HAL_RCC_GetSysClockFreq+0x324>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <HAL_RCC_GetSysClockFreq+0x30>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a61 	.word	0x08005a61
 8005a30:	08005d21 	.word	0x08005d21
 8005a34:	08005d21 	.word	0x08005d21
 8005a38:	08005d21 	.word	0x08005d21
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005d21 	.word	0x08005d21
 8005a44:	08005d21 	.word	0x08005d21
 8005a48:	08005d21 	.word	0x08005d21
 8005a4c:	08005a6d 	.word	0x08005a6d
 8005a50:	08005d21 	.word	0x08005d21
 8005a54:	08005d21 	.word	0x08005d21
 8005a58:	08005d21 	.word	0x08005d21
 8005a5c:	08005bc9 	.word	0x08005bc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a60:	4bb4      	ldr	r3, [pc, #720]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8005a62:	613b      	str	r3, [r7, #16]
       break;
 8005a64:	e15f      	b.n	8005d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a66:	4bb4      	ldr	r3, [pc, #720]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005a68:	613b      	str	r3, [r7, #16]
      break;
 8005a6a:	e15c      	b.n	8005d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a6c:	4bb0      	ldr	r3, [pc, #704]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a74:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a76:	4bae      	ldr	r3, [pc, #696]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04a      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a82:	4bab      	ldr	r3, [pc, #684]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	ea03 0501 	and.w	r5, r3, r1
 8005a98:	ea04 0602 	and.w	r6, r4, r2
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4632      	mov	r2, r6
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	f04f 0400 	mov.w	r4, #0
 8005aa8:	0154      	lsls	r4, r2, #5
 8005aaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aae:	014b      	lsls	r3, r1, #5
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	1b49      	subs	r1, r1, r5
 8005ab6:	eb62 0206 	sbc.w	r2, r2, r6
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	f04f 0400 	mov.w	r4, #0
 8005ac2:	0194      	lsls	r4, r2, #6
 8005ac4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ac8:	018b      	lsls	r3, r1, #6
 8005aca:	1a5b      	subs	r3, r3, r1
 8005acc:	eb64 0402 	sbc.w	r4, r4, r2
 8005ad0:	f04f 0100 	mov.w	r1, #0
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	00e2      	lsls	r2, r4, #3
 8005ada:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ade:	00d9      	lsls	r1, r3, #3
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	195b      	adds	r3, r3, r5
 8005ae6:	eb44 0406 	adc.w	r4, r4, r6
 8005aea:	f04f 0100 	mov.w	r1, #0
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	0262      	lsls	r2, r4, #9
 8005af4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005af8:	0259      	lsls	r1, r3, #9
 8005afa:	460b      	mov	r3, r1
 8005afc:	4614      	mov	r4, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	4621      	mov	r1, r4
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f04f 0400 	mov.w	r4, #0
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	f7fa ffce 	bl	8000aac <__aeabi_uldivmod>
 8005b10:	4603      	mov	r3, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e049      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b18:	4b85      	ldr	r3, [pc, #532]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	099b      	lsrs	r3, r3, #6
 8005b1e:	f04f 0400 	mov.w	r4, #0
 8005b22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	ea03 0501 	and.w	r5, r3, r1
 8005b2e:	ea04 0602 	and.w	r6, r4, r2
 8005b32:	4629      	mov	r1, r5
 8005b34:	4632      	mov	r2, r6
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	f04f 0400 	mov.w	r4, #0
 8005b3e:	0154      	lsls	r4, r2, #5
 8005b40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b44:	014b      	lsls	r3, r1, #5
 8005b46:	4619      	mov	r1, r3
 8005b48:	4622      	mov	r2, r4
 8005b4a:	1b49      	subs	r1, r1, r5
 8005b4c:	eb62 0206 	sbc.w	r2, r2, r6
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	0194      	lsls	r4, r2, #6
 8005b5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b5e:	018b      	lsls	r3, r1, #6
 8005b60:	1a5b      	subs	r3, r3, r1
 8005b62:	eb64 0402 	sbc.w	r4, r4, r2
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	00e2      	lsls	r2, r4, #3
 8005b70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b74:	00d9      	lsls	r1, r3, #3
 8005b76:	460b      	mov	r3, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	195b      	adds	r3, r3, r5
 8005b7c:	eb44 0406 	adc.w	r4, r4, r6
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	02a2      	lsls	r2, r4, #10
 8005b8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b8e:	0299      	lsls	r1, r3, #10
 8005b90:	460b      	mov	r3, r1
 8005b92:	4614      	mov	r4, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	4621      	mov	r1, r4
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f04f 0400 	mov.w	r4, #0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	f7fa ff83 	bl	8000aac <__aeabi_uldivmod>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bac:	4b60      	ldr	r3, [pc, #384]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	613b      	str	r3, [r7, #16]
      break;
 8005bc6:	e0ae      	b.n	8005d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bc8:	4b59      	ldr	r3, [pc, #356]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bd2:	4b57      	ldr	r3, [pc, #348]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d04a      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bde:	4b54      	ldr	r3, [pc, #336]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	099b      	lsrs	r3, r3, #6
 8005be4:	f04f 0400 	mov.w	r4, #0
 8005be8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	ea03 0501 	and.w	r5, r3, r1
 8005bf4:	ea04 0602 	and.w	r6, r4, r2
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	f04f 0400 	mov.w	r4, #0
 8005c04:	0154      	lsls	r4, r2, #5
 8005c06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c0a:	014b      	lsls	r3, r1, #5
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4622      	mov	r2, r4
 8005c10:	1b49      	subs	r1, r1, r5
 8005c12:	eb62 0206 	sbc.w	r2, r2, r6
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	f04f 0400 	mov.w	r4, #0
 8005c1e:	0194      	lsls	r4, r2, #6
 8005c20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c24:	018b      	lsls	r3, r1, #6
 8005c26:	1a5b      	subs	r3, r3, r1
 8005c28:	eb64 0402 	sbc.w	r4, r4, r2
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	00e2      	lsls	r2, r4, #3
 8005c36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c3a:	00d9      	lsls	r1, r3, #3
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4614      	mov	r4, r2
 8005c40:	195b      	adds	r3, r3, r5
 8005c42:	eb44 0406 	adc.w	r4, r4, r6
 8005c46:	f04f 0100 	mov.w	r1, #0
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	0262      	lsls	r2, r4, #9
 8005c50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c54:	0259      	lsls	r1, r3, #9
 8005c56:	460b      	mov	r3, r1
 8005c58:	4614      	mov	r4, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f04f 0400 	mov.w	r4, #0
 8005c64:	461a      	mov	r2, r3
 8005c66:	4623      	mov	r3, r4
 8005c68:	f7fa ff20 	bl	8000aac <__aeabi_uldivmod>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e049      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c74:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	099b      	lsrs	r3, r3, #6
 8005c7a:	f04f 0400 	mov.w	r4, #0
 8005c7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	ea03 0501 	and.w	r5, r3, r1
 8005c8a:	ea04 0602 	and.w	r6, r4, r2
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4632      	mov	r2, r6
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	f04f 0400 	mov.w	r4, #0
 8005c9a:	0154      	lsls	r4, r2, #5
 8005c9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ca0:	014b      	lsls	r3, r1, #5
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	1b49      	subs	r1, r1, r5
 8005ca8:	eb62 0206 	sbc.w	r2, r2, r6
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	f04f 0400 	mov.w	r4, #0
 8005cb4:	0194      	lsls	r4, r2, #6
 8005cb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005cba:	018b      	lsls	r3, r1, #6
 8005cbc:	1a5b      	subs	r3, r3, r1
 8005cbe:	eb64 0402 	sbc.w	r4, r4, r2
 8005cc2:	f04f 0100 	mov.w	r1, #0
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	00e2      	lsls	r2, r4, #3
 8005ccc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005cd0:	00d9      	lsls	r1, r3, #3
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	195b      	adds	r3, r3, r5
 8005cd8:	eb44 0406 	adc.w	r4, r4, r6
 8005cdc:	f04f 0100 	mov.w	r1, #0
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	02a2      	lsls	r2, r4, #10
 8005ce6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cea:	0299      	lsls	r1, r3, #10
 8005cec:	460b      	mov	r3, r1
 8005cee:	4614      	mov	r4, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f04f 0400 	mov.w	r4, #0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	f7fa fed5 	bl	8000aac <__aeabi_uldivmod>
 8005d02:	4603      	mov	r3, r0
 8005d04:	460c      	mov	r4, r1
 8005d06:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d08:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x334>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	0f1b      	lsrs	r3, r3, #28
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1c:	613b      	str	r3, [r7, #16]
      break;
 8005d1e:	e002      	b.n	8005d26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d20:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x338>)
 8005d22:	613b      	str	r3, [r7, #16]
      break;
 8005d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d26:	693b      	ldr	r3, [r7, #16]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d30:	40023800 	.word	0x40023800
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	007a1200 	.word	0x007a1200

08005d3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8083 	beq.w	8005e5c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d56:	4b95      	ldr	r3, [pc, #596]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d019      	beq.n	8005d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d62:	4b92      	ldr	r3, [pc, #584]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d6e:	4b8f      	ldr	r3, [pc, #572]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d7a:	d00c      	beq.n	8005d96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7c:	4b8b      	ldr	r3, [pc, #556]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d112      	bne.n	8005dae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d88:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d94:	d10b      	bne.n	8005dae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d96:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d05b      	beq.n	8005e5a <HAL_RCC_OscConfig+0x11e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d157      	bne.n	8005e5a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e216      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db6:	d106      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x8a>
 8005db8:	4b7c      	ldr	r3, [pc, #496]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a7b      	ldr	r2, [pc, #492]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	e01d      	b.n	8005e02 <HAL_RCC_OscConfig+0xc6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dce:	d10c      	bne.n	8005dea <HAL_RCC_OscConfig+0xae>
 8005dd0:	4b76      	ldr	r3, [pc, #472]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a75      	ldr	r2, [pc, #468]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4b73      	ldr	r3, [pc, #460]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a72      	ldr	r2, [pc, #456]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e00b      	b.n	8005e02 <HAL_RCC_OscConfig+0xc6>
 8005dea:	4b70      	ldr	r3, [pc, #448]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6f      	ldr	r2, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b6d      	ldr	r3, [pc, #436]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6c      	ldr	r2, [pc, #432]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d013      	beq.n	8005e32 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fe fba3 	bl	8004554 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e12:	f7fe fb9f 	bl	8004554 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b64      	cmp	r3, #100	; 0x64
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e1db      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e24:	4b61      	ldr	r3, [pc, #388]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0xd6>
 8005e30:	e014      	b.n	8005e5c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fe fb8f 	bl	8004554 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e3a:	f7fe fb8b 	bl	8004554 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b64      	cmp	r3, #100	; 0x64
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e1c7      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4c:	4b57      	ldr	r3, [pc, #348]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f0      	bne.n	8005e3a <HAL_RCC_OscConfig+0xfe>
 8005e58:	e000      	b.n	8005e5c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d06f      	beq.n	8005f48 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e68:	4b50      	ldr	r3, [pc, #320]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 030c 	and.w	r3, r3, #12
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d017      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e74:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e80:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8c:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	d11c      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e98:	4b44      	ldr	r3, [pc, #272]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d116      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea4:	4b41      	ldr	r3, [pc, #260]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_OscConfig+0x180>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d001      	beq.n	8005ebc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e18f      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebc:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4938      	ldr	r1, [pc, #224]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed0:	e03a      	b.n	8005f48 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eda:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <HAL_RCC_OscConfig+0x274>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fe fb38 	bl	8004554 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fe fb34 	bl	8004554 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e170      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efa:	4b2c      	ldr	r3, [pc, #176]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b29      	ldr	r3, [pc, #164]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4925      	ldr	r1, [pc, #148]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
 8005f1a:	e015      	b.n	8005f48 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1c:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCC_OscConfig+0x274>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fe fb17 	bl	8004554 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2a:	f7fe fb13 	bl	8004554 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e14f      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d037      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d016      	beq.n	8005f8a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5c:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <HAL_RCC_OscConfig+0x278>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fe faf7 	bl	8004554 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6a:	f7fe faf3 	bl	8004554 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e12f      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_OscConfig+0x270>)
 8005f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x22e>
 8005f88:	e01c      	b.n	8005fc4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_RCC_OscConfig+0x278>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fe fae0 	bl	8004554 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f96:	e00f      	b.n	8005fb8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fe fadc 	bl	8004554 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d908      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e118      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	42470000 	.word	0x42470000
 8005fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb8:	4b8a      	ldr	r3, [pc, #552]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8005fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e9      	bne.n	8005f98 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8097 	beq.w	8006100 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd6:	4b83      	ldr	r3, [pc, #524]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	4b7f      	ldr	r3, [pc, #508]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	4a7e      	ldr	r2, [pc, #504]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8005fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff2:	4b7c      	ldr	r3, [pc, #496]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	4b79      	ldr	r3, [pc, #484]	; (80061e8 <HAL_RCC_OscConfig+0x4ac>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d118      	bne.n	8006040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600e:	4b76      	ldr	r3, [pc, #472]	; (80061e8 <HAL_RCC_OscConfig+0x4ac>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a75      	ldr	r2, [pc, #468]	; (80061e8 <HAL_RCC_OscConfig+0x4ac>)
 8006014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601a:	f7fe fa9b 	bl	8004554 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006022:	f7fe fa97 	bl	8004554 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e0d3      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006034:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <HAL_RCC_OscConfig+0x4ac>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <HAL_RCC_OscConfig+0x31a>
 8006048:	4b66      	ldr	r3, [pc, #408]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a65      	ldr	r2, [pc, #404]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	e01c      	b.n	8006090 <HAL_RCC_OscConfig+0x354>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b05      	cmp	r3, #5
 800605c:	d10c      	bne.n	8006078 <HAL_RCC_OscConfig+0x33c>
 800605e:	4b61      	ldr	r3, [pc, #388]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a60      	ldr	r2, [pc, #384]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
 800606a:	4b5e      	ldr	r3, [pc, #376]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	4a5d      	ldr	r2, [pc, #372]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	6713      	str	r3, [r2, #112]	; 0x70
 8006076:	e00b      	b.n	8006090 <HAL_RCC_OscConfig+0x354>
 8006078:	4b5a      	ldr	r3, [pc, #360]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a59      	ldr	r2, [pc, #356]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
 8006084:	4b57      	ldr	r3, [pc, #348]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	4a56      	ldr	r2, [pc, #344]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800608a:	f023 0304 	bic.w	r3, r3, #4
 800608e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fe fa5c 	bl	8004554 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fe fa58 	bl	8004554 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e092      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b6:	4b4b      	ldr	r3, [pc, #300]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ee      	beq.n	80060a0 <HAL_RCC_OscConfig+0x364>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fe fa46 	bl	8004554 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fe fa42 	bl	8004554 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e07c      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e2:	4b40      	ldr	r3, [pc, #256]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1ee      	bne.n	80060cc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d105      	bne.n	8006100 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f4:	4b3b      	ldr	r3, [pc, #236]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	4a3a      	ldr	r2, [pc, #232]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 80060fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d068      	beq.n	80061da <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006108:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 030c 	and.w	r3, r3, #12
 8006110:	2b08      	cmp	r3, #8
 8006112:	d060      	beq.n	80061d6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d145      	bne.n	80061a8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611c:	4b33      	ldr	r3, [pc, #204]	; (80061ec <HAL_RCC_OscConfig+0x4b0>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006122:	f7fe fa17 	bl	8004554 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612a:	f7fe fa13 	bl	8004554 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e04f      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613c:	4b29      	ldr	r3, [pc, #164]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	019b      	lsls	r3, r3, #6
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	3b01      	subs	r3, #1
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	071b      	lsls	r3, r3, #28
 8006174:	491b      	ldr	r1, [pc, #108]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 8006176:	4313      	orrs	r3, r2
 8006178:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800617a:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <HAL_RCC_OscConfig+0x4b0>)
 800617c:	2201      	movs	r2, #1
 800617e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fe f9e8 	bl	8004554 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006188:	f7fe f9e4 	bl	8004554 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e020      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x44c>
 80061a6:	e018      	b.n	80061da <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a8:	4b10      	ldr	r3, [pc, #64]	; (80061ec <HAL_RCC_OscConfig+0x4b0>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ae:	f7fe f9d1 	bl	8004554 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b6:	f7fe f9cd 	bl	8004554 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e009      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_RCC_OscConfig+0x4a8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCC_OscConfig+0x47a>
 80061d4:	e001      	b.n	80061da <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40007000 	.word	0x40007000
 80061ec:	42470060 	.word	0x42470060

080061f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e01d      	b.n	800623e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fd ffc2 	bl	80041a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fa64 	bl	80066fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b06      	cmp	r3, #6
 8006266:	d007      	beq.n	8006278 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80062a8:	4013      	ands	r3, r2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10f      	bne.n	80062ce <HAL_TIM_Base_Stop+0x40>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	f240 4344 	movw	r3, #1092	; 0x444
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d107      	bne.n	80062ce <HAL_TIM_Base_Stop+0x40>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b06      	cmp	r3, #6
 800630c:	d007      	beq.n	800631e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d122      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b02      	cmp	r3, #2
 800634e:	d11b      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0202 	mvn.w	r2, #2
 8006358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9a5 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 8006374:	e005      	b.n	8006382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f997 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f9a8 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d122      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0204 	mvn.w	r2, #4
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f97b 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f96d 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f97e 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d122      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d11b      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0208 	mvn.w	r2, #8
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f951 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f943 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f954 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d122      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0210 	mvn.w	r2, #16
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2208      	movs	r2, #8
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f927 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f919 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f92a 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10e      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0201 	mvn.w	r2, #1
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fd fd6a 	bl	8003f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d10e      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fad0 	bl	8006a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d10e      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d107      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8ef 	bl	80066e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d10e      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b20      	cmp	r3, #32
 8006522:	d107      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0220 	mvn.w	r2, #32
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa9a 	bl	8006a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_TIM_ConfigClockSource+0x18>
 8006550:	2302      	movs	r3, #2
 8006552:	e0a6      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x166>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d067      	beq.n	800665c <HAL_TIM_ConfigClockSource+0x120>
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d80b      	bhi.n	80065a8 <HAL_TIM_ConfigClockSource+0x6c>
 8006590:	2b10      	cmp	r3, #16
 8006592:	d073      	beq.n	800667c <HAL_TIM_ConfigClockSource+0x140>
 8006594:	2b10      	cmp	r3, #16
 8006596:	d802      	bhi.n	800659e <HAL_TIM_ConfigClockSource+0x62>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d06f      	beq.n	800667c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800659c:	e078      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d06c      	beq.n	800667c <HAL_TIM_ConfigClockSource+0x140>
 80065a2:	2b30      	cmp	r3, #48	; 0x30
 80065a4:	d06a      	beq.n	800667c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80065a6:	e073      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d00d      	beq.n	80065c8 <HAL_TIM_ConfigClockSource+0x8c>
 80065ac:	2b70      	cmp	r3, #112	; 0x70
 80065ae:	d804      	bhi.n	80065ba <HAL_TIM_ConfigClockSource+0x7e>
 80065b0:	2b50      	cmp	r3, #80	; 0x50
 80065b2:	d033      	beq.n	800661c <HAL_TIM_ConfigClockSource+0xe0>
 80065b4:	2b60      	cmp	r3, #96	; 0x60
 80065b6:	d041      	beq.n	800663c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80065b8:	e06a      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065be:	d066      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x152>
 80065c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c4:	d017      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80065c6:	e063      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6899      	ldr	r1, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f000 f9aa 	bl	8006930 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	609a      	str	r2, [r3, #8]
      break;
 80065f4:	e04c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6899      	ldr	r1, [r3, #8]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f000 f993 	bl	8006930 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006618:	609a      	str	r2, [r3, #8]
      break;
 800661a:	e039      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	461a      	mov	r2, r3
 800662a:	f000 f907 	bl	800683c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2150      	movs	r1, #80	; 0x50
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f960 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 800663a:	e029      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	6859      	ldr	r1, [r3, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	461a      	mov	r2, r3
 800664a:	f000 f926 	bl	800689a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2160      	movs	r1, #96	; 0x60
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f950 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 800665a:	e019      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6859      	ldr	r1, [r3, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	461a      	mov	r2, r3
 800666a:	f000 f8e7 	bl	800683c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f940 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 800667a:	e009      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f000 f937 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 800668c:	e000      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800668e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a40      	ldr	r2, [pc, #256]	; (8006810 <TIM_Base_SetConfig+0x114>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671a:	d00f      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a3d      	ldr	r2, [pc, #244]	; (8006814 <TIM_Base_SetConfig+0x118>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a3c      	ldr	r2, [pc, #240]	; (8006818 <TIM_Base_SetConfig+0x11c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a3b      	ldr	r2, [pc, #236]	; (800681c <TIM_Base_SetConfig+0x120>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a3a      	ldr	r2, [pc, #232]	; (8006820 <TIM_Base_SetConfig+0x124>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d108      	bne.n	800674e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a2f      	ldr	r2, [pc, #188]	; (8006810 <TIM_Base_SetConfig+0x114>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d02b      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675c:	d027      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2c      	ldr	r2, [pc, #176]	; (8006814 <TIM_Base_SetConfig+0x118>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d023      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2b      	ldr	r2, [pc, #172]	; (8006818 <TIM_Base_SetConfig+0x11c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01f      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2a      	ldr	r2, [pc, #168]	; (800681c <TIM_Base_SetConfig+0x120>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d01b      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a29      	ldr	r2, [pc, #164]	; (8006820 <TIM_Base_SetConfig+0x124>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d017      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a28      	ldr	r2, [pc, #160]	; (8006824 <TIM_Base_SetConfig+0x128>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d013      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a27      	ldr	r2, [pc, #156]	; (8006828 <TIM_Base_SetConfig+0x12c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00f      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a26      	ldr	r2, [pc, #152]	; (800682c <TIM_Base_SetConfig+0x130>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00b      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a25      	ldr	r2, [pc, #148]	; (8006830 <TIM_Base_SetConfig+0x134>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d007      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a24      	ldr	r2, [pc, #144]	; (8006834 <TIM_Base_SetConfig+0x138>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a23      	ldr	r2, [pc, #140]	; (8006838 <TIM_Base_SetConfig+0x13c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d108      	bne.n	80067c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a0a      	ldr	r2, [pc, #40]	; (8006810 <TIM_Base_SetConfig+0x114>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_Base_SetConfig+0xf8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a0c      	ldr	r2, [pc, #48]	; (8006820 <TIM_Base_SetConfig+0x124>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d103      	bne.n	80067fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	615a      	str	r2, [r3, #20]
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40010000 	.word	0x40010000
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40000c00 	.word	0x40000c00
 8006820:	40010400 	.word	0x40010400
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800
 8006830:	40001800 	.word	0x40001800
 8006834:	40001c00 	.word	0x40001c00
 8006838:	40002000 	.word	0x40002000

0800683c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0201 	bic.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f023 030a 	bic.w	r3, r3, #10
 8006878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0210 	bic.w	r2, r3, #16
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	031b      	lsls	r3, r3, #12
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	f043 0307 	orr.w	r3, r3, #7
 800691c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	609a      	str	r2, [r3, #8]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800694a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	021a      	lsls	r2, r3, #8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	431a      	orrs	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4313      	orrs	r3, r2
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	609a      	str	r2, [r3, #8]
}
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006984:	2302      	movs	r3, #2
 8006986:	e05a      	b.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a21      	ldr	r2, [pc, #132]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d4:	d01d      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1d      	ldr	r2, [pc, #116]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1b      	ldr	r2, [pc, #108]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d10c      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40000400 	.word	0x40000400
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000c00 	.word	0x40000c00
 8006a5c:	40010400 	.word	0x40010400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40001800 	.word	0x40001800

08006a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e03f      	b.n	8006b22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fd fbc4 	bl	8004244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2224      	movs	r2, #36	; 0x24
 8006ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fb97 	bl	8007208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b088      	sub	sp, #32
 8006b2e:	af02      	add	r7, sp, #8
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	f040 8083 	bne.w	8006c52 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_UART_Transmit+0x2e>
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e07b      	b.n	8006c54 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Transmit+0x40>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e074      	b.n	8006c54 <HAL_UART_Transmit+0x12a>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2221      	movs	r2, #33	; 0x21
 8006b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006b80:	f7fd fce8 	bl	8004554 <HAL_GetTick>
 8006b84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	88fa      	ldrh	r2, [r7, #6]
 8006b90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006b9a:	e042      	b.n	8006c22 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb2:	d122      	bne.n	8006bfa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f9b6 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e042      	b.n	8006c54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d103      	bne.n	8006bf2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	3302      	adds	r3, #2
 8006bee:	60bb      	str	r3, [r7, #8]
 8006bf0:	e017      	b.n	8006c22 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	e013      	b.n	8006c22 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2200      	movs	r2, #0
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f993 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e01f      	b.n	8006c54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	60ba      	str	r2, [r7, #8]
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1b7      	bne.n	8006b9c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2200      	movs	r2, #0
 8006c34:	2140      	movs	r1, #64	; 0x40
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 f97a 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e006      	b.n	8006c54 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006c52:	2302      	movs	r3, #2
  }
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d140      	bne.n	8006cf8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_UART_Receive_IT+0x26>
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e039      	b.n	8006cfa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_UART_Receive_IT+0x38>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e032      	b.n	8006cfa <HAL_UART_Receive_IT+0x9e>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	88fa      	ldrh	r2, [r7, #6]
 8006ca6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2222      	movs	r2, #34	; 0x22
 8006cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695a      	ldr	r2, [r3, #20]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0220 	orr.w	r2, r2, #32
 8006cf2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <HAL_UART_IRQHandler+0x52>
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f9d6 	bl	8007104 <UART_Receive_IT>
      return;
 8006d58:	e0d1      	b.n	8006efe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80b0 	beq.w	8006ec2 <HAL_UART_IRQHandler+0x1ba>
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <HAL_UART_IRQHandler+0x70>
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80a5 	beq.w	8006ec2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <HAL_UART_IRQHandler+0x90>
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	f043 0201 	orr.w	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <HAL_UART_IRQHandler+0xb0>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	f043 0202 	orr.w	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <HAL_UART_IRQHandler+0xd0>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	f043 0204 	orr.w	r2, r3, #4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00f      	beq.n	8006e02 <HAL_UART_IRQHandler+0xfa>
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <HAL_UART_IRQHandler+0xee>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfa:	f043 0208 	orr.w	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d078      	beq.n	8006efc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_UART_IRQHandler+0x11c>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f970 	bl	8007104 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b40      	cmp	r3, #64	; 0x40
 8006e30:	bf0c      	ite	eq
 8006e32:	2301      	moveq	r3, #1
 8006e34:	2300      	movne	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d102      	bne.n	8006e4c <HAL_UART_IRQHandler+0x144>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d031      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8b9 	bl	8006fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d123      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d013      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7c:	4a21      	ldr	r2, [pc, #132]	; (8006f04 <HAL_UART_IRQHandler+0x1fc>)
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe f851 	bl	8004f2c <HAL_DMA_Abort_IT>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9e:	e00e      	b.n	8006ebe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f83b 	bl	8006f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea6:	e00a      	b.n	8006ebe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f837 	bl	8006f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	e006      	b.n	8006ebe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f833 	bl	8006f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006ebc:	e01e      	b.n	8006efc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebe:	bf00      	nop
    return;
 8006ec0:	e01c      	b.n	8006efc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_UART_IRQHandler+0x1d6>
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f8a6 	bl	8007028 <UART_Transmit_IT>
    return;
 8006edc:	e00f      	b.n	8006efe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <HAL_UART_IRQHandler+0x1f6>
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8ee 	bl	80070d4 <UART_EndTransmit_IT>
    return;
 8006ef8:	bf00      	nop
 8006efa:	e000      	b.n	8006efe <HAL_UART_IRQHandler+0x1f6>
    return;
 8006efc:	bf00      	nop
  }
}
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	08007001 	.word	0x08007001

08006f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f40:	e02c      	b.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d028      	beq.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f50:	f7fd fb00 	bl	8004554 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d21d      	bcs.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695a      	ldr	r2, [r3, #20]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e00f      	b.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d0c3      	beq.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0201 	bic.w	r2, r2, #1
 8006fea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff ff7e 	bl	8006f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b21      	cmp	r3, #33	; 0x21
 800703a:	d144      	bne.n	80070c6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	d11a      	bne.n	800707c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800705a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d105      	bne.n	8007070 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	621a      	str	r2, [r3, #32]
 800706e:	e00e      	b.n	800708e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]
 800707a:	e008      	b.n	800708e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6211      	str	r1, [r2, #32]
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29b      	uxth	r3, r3
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4619      	mov	r1, r3
 800709c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80070c6:	2302      	movs	r3, #2
  }
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff07 	bl	8006f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b22      	cmp	r3, #34	; 0x22
 8007116:	d171      	bne.n	80071fc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007120:	d123      	bne.n	800716a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10e      	bne.n	800714e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	1c9a      	adds	r2, r3, #2
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28
 800714c:	e029      	b.n	80071a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	b29b      	uxth	r3, r3
 8007156:	b2db      	uxtb	r3, r3
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	629a      	str	r2, [r3, #40]	; 0x28
 8007168:	e01b      	b.n	80071a2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6858      	ldr	r0, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	1c59      	adds	r1, r3, #1
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6291      	str	r1, [r2, #40]	; 0x28
 8007182:	b2c2      	uxtb	r2, r0
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e00c      	b.n	80071a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	1c58      	adds	r0, r3, #1
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	6288      	str	r0, [r1, #40]	; 0x28
 800719a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4619      	mov	r1, r3
 80071b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d120      	bne.n	80071f8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0220 	bic.w	r2, r2, #32
 80071c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0201 	bic.w	r2, r2, #1
 80071e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fc fef4 	bl	8003fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e002      	b.n	80071fe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	e000      	b.n	80071fe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
  }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800724a:	f023 030c 	bic.w	r3, r3, #12
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6812      	ldr	r2, [r2, #0]
 8007252:	68f9      	ldr	r1, [r7, #12]
 8007254:	430b      	orrs	r3, r1
 8007256:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007276:	f040 818b 	bne.w	8007590 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4ac1      	ldr	r2, [pc, #772]	; (8007584 <UART_SetConfig+0x37c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d005      	beq.n	8007290 <UART_SetConfig+0x88>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4abf      	ldr	r2, [pc, #764]	; (8007588 <UART_SetConfig+0x380>)
 800728a:	4293      	cmp	r3, r2
 800728c:	f040 80bd 	bne.w	800740a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007290:	f7fe fba0 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 8007294:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	461d      	mov	r5, r3
 800729a:	f04f 0600 	mov.w	r6, #0
 800729e:	46a8      	mov	r8, r5
 80072a0:	46b1      	mov	r9, r6
 80072a2:	eb18 0308 	adds.w	r3, r8, r8
 80072a6:	eb49 0409 	adc.w	r4, r9, r9
 80072aa:	4698      	mov	r8, r3
 80072ac:	46a1      	mov	r9, r4
 80072ae:	eb18 0805 	adds.w	r8, r8, r5
 80072b2:	eb49 0906 	adc.w	r9, r9, r6
 80072b6:	f04f 0100 	mov.w	r1, #0
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072ca:	4688      	mov	r8, r1
 80072cc:	4691      	mov	r9, r2
 80072ce:	eb18 0005 	adds.w	r0, r8, r5
 80072d2:	eb49 0106 	adc.w	r1, r9, r6
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	461d      	mov	r5, r3
 80072dc:	f04f 0600 	mov.w	r6, #0
 80072e0:	196b      	adds	r3, r5, r5
 80072e2:	eb46 0406 	adc.w	r4, r6, r6
 80072e6:	461a      	mov	r2, r3
 80072e8:	4623      	mov	r3, r4
 80072ea:	f7f9 fbdf 	bl	8000aac <__aeabi_uldivmod>
 80072ee:	4603      	mov	r3, r0
 80072f0:	460c      	mov	r4, r1
 80072f2:	461a      	mov	r2, r3
 80072f4:	4ba5      	ldr	r3, [pc, #660]	; (800758c <UART_SetConfig+0x384>)
 80072f6:	fba3 2302 	umull	r2, r3, r3, r2
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	461d      	mov	r5, r3
 8007304:	f04f 0600 	mov.w	r6, #0
 8007308:	46a9      	mov	r9, r5
 800730a:	46b2      	mov	sl, r6
 800730c:	eb19 0309 	adds.w	r3, r9, r9
 8007310:	eb4a 040a 	adc.w	r4, sl, sl
 8007314:	4699      	mov	r9, r3
 8007316:	46a2      	mov	sl, r4
 8007318:	eb19 0905 	adds.w	r9, r9, r5
 800731c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007320:	f04f 0100 	mov.w	r1, #0
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800732c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007330:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007334:	4689      	mov	r9, r1
 8007336:	4692      	mov	sl, r2
 8007338:	eb19 0005 	adds.w	r0, r9, r5
 800733c:	eb4a 0106 	adc.w	r1, sl, r6
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	461d      	mov	r5, r3
 8007346:	f04f 0600 	mov.w	r6, #0
 800734a:	196b      	adds	r3, r5, r5
 800734c:	eb46 0406 	adc.w	r4, r6, r6
 8007350:	461a      	mov	r2, r3
 8007352:	4623      	mov	r3, r4
 8007354:	f7f9 fbaa 	bl	8000aac <__aeabi_uldivmod>
 8007358:	4603      	mov	r3, r0
 800735a:	460c      	mov	r4, r1
 800735c:	461a      	mov	r2, r3
 800735e:	4b8b      	ldr	r3, [pc, #556]	; (800758c <UART_SetConfig+0x384>)
 8007360:	fba3 1302 	umull	r1, r3, r3, r2
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	2164      	movs	r1, #100	; 0x64
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	3332      	adds	r3, #50	; 0x32
 8007372:	4a86      	ldr	r2, [pc, #536]	; (800758c <UART_SetConfig+0x384>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007380:	4498      	add	r8, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	461d      	mov	r5, r3
 8007386:	f04f 0600 	mov.w	r6, #0
 800738a:	46a9      	mov	r9, r5
 800738c:	46b2      	mov	sl, r6
 800738e:	eb19 0309 	adds.w	r3, r9, r9
 8007392:	eb4a 040a 	adc.w	r4, sl, sl
 8007396:	4699      	mov	r9, r3
 8007398:	46a2      	mov	sl, r4
 800739a:	eb19 0905 	adds.w	r9, r9, r5
 800739e:	eb4a 0a06 	adc.w	sl, sl, r6
 80073a2:	f04f 0100 	mov.w	r1, #0
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073b6:	4689      	mov	r9, r1
 80073b8:	4692      	mov	sl, r2
 80073ba:	eb19 0005 	adds.w	r0, r9, r5
 80073be:	eb4a 0106 	adc.w	r1, sl, r6
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	461d      	mov	r5, r3
 80073c8:	f04f 0600 	mov.w	r6, #0
 80073cc:	196b      	adds	r3, r5, r5
 80073ce:	eb46 0406 	adc.w	r4, r6, r6
 80073d2:	461a      	mov	r2, r3
 80073d4:	4623      	mov	r3, r4
 80073d6:	f7f9 fb69 	bl	8000aac <__aeabi_uldivmod>
 80073da:	4603      	mov	r3, r0
 80073dc:	460c      	mov	r4, r1
 80073de:	461a      	mov	r2, r3
 80073e0:	4b6a      	ldr	r3, [pc, #424]	; (800758c <UART_SetConfig+0x384>)
 80073e2:	fba3 1302 	umull	r1, r3, r3, r2
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	2164      	movs	r1, #100	; 0x64
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	3332      	adds	r3, #50	; 0x32
 80073f4:	4a65      	ldr	r2, [pc, #404]	; (800758c <UART_SetConfig+0x384>)
 80073f6:	fba2 2303 	umull	r2, r3, r2, r3
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	f003 0207 	and.w	r2, r3, #7
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4442      	add	r2, r8
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	e26f      	b.n	80078ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800740a:	f7fe facf 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 800740e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	461d      	mov	r5, r3
 8007414:	f04f 0600 	mov.w	r6, #0
 8007418:	46a8      	mov	r8, r5
 800741a:	46b1      	mov	r9, r6
 800741c:	eb18 0308 	adds.w	r3, r8, r8
 8007420:	eb49 0409 	adc.w	r4, r9, r9
 8007424:	4698      	mov	r8, r3
 8007426:	46a1      	mov	r9, r4
 8007428:	eb18 0805 	adds.w	r8, r8, r5
 800742c:	eb49 0906 	adc.w	r9, r9, r6
 8007430:	f04f 0100 	mov.w	r1, #0
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800743c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007440:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007444:	4688      	mov	r8, r1
 8007446:	4691      	mov	r9, r2
 8007448:	eb18 0005 	adds.w	r0, r8, r5
 800744c:	eb49 0106 	adc.w	r1, r9, r6
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	461d      	mov	r5, r3
 8007456:	f04f 0600 	mov.w	r6, #0
 800745a:	196b      	adds	r3, r5, r5
 800745c:	eb46 0406 	adc.w	r4, r6, r6
 8007460:	461a      	mov	r2, r3
 8007462:	4623      	mov	r3, r4
 8007464:	f7f9 fb22 	bl	8000aac <__aeabi_uldivmod>
 8007468:	4603      	mov	r3, r0
 800746a:	460c      	mov	r4, r1
 800746c:	461a      	mov	r2, r3
 800746e:	4b47      	ldr	r3, [pc, #284]	; (800758c <UART_SetConfig+0x384>)
 8007470:	fba3 2302 	umull	r2, r3, r3, r2
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	461d      	mov	r5, r3
 800747e:	f04f 0600 	mov.w	r6, #0
 8007482:	46a9      	mov	r9, r5
 8007484:	46b2      	mov	sl, r6
 8007486:	eb19 0309 	adds.w	r3, r9, r9
 800748a:	eb4a 040a 	adc.w	r4, sl, sl
 800748e:	4699      	mov	r9, r3
 8007490:	46a2      	mov	sl, r4
 8007492:	eb19 0905 	adds.w	r9, r9, r5
 8007496:	eb4a 0a06 	adc.w	sl, sl, r6
 800749a:	f04f 0100 	mov.w	r1, #0
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074ae:	4689      	mov	r9, r1
 80074b0:	4692      	mov	sl, r2
 80074b2:	eb19 0005 	adds.w	r0, r9, r5
 80074b6:	eb4a 0106 	adc.w	r1, sl, r6
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	461d      	mov	r5, r3
 80074c0:	f04f 0600 	mov.w	r6, #0
 80074c4:	196b      	adds	r3, r5, r5
 80074c6:	eb46 0406 	adc.w	r4, r6, r6
 80074ca:	461a      	mov	r2, r3
 80074cc:	4623      	mov	r3, r4
 80074ce:	f7f9 faed 	bl	8000aac <__aeabi_uldivmod>
 80074d2:	4603      	mov	r3, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	461a      	mov	r2, r3
 80074d8:	4b2c      	ldr	r3, [pc, #176]	; (800758c <UART_SetConfig+0x384>)
 80074da:	fba3 1302 	umull	r1, r3, r3, r2
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	2164      	movs	r1, #100	; 0x64
 80074e2:	fb01 f303 	mul.w	r3, r1, r3
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	3332      	adds	r3, #50	; 0x32
 80074ec:	4a27      	ldr	r2, [pc, #156]	; (800758c <UART_SetConfig+0x384>)
 80074ee:	fba2 2303 	umull	r2, r3, r2, r3
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074fa:	4498      	add	r8, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	461d      	mov	r5, r3
 8007500:	f04f 0600 	mov.w	r6, #0
 8007504:	46a9      	mov	r9, r5
 8007506:	46b2      	mov	sl, r6
 8007508:	eb19 0309 	adds.w	r3, r9, r9
 800750c:	eb4a 040a 	adc.w	r4, sl, sl
 8007510:	4699      	mov	r9, r3
 8007512:	46a2      	mov	sl, r4
 8007514:	eb19 0905 	adds.w	r9, r9, r5
 8007518:	eb4a 0a06 	adc.w	sl, sl, r6
 800751c:	f04f 0100 	mov.w	r1, #0
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007528:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800752c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007530:	4689      	mov	r9, r1
 8007532:	4692      	mov	sl, r2
 8007534:	eb19 0005 	adds.w	r0, r9, r5
 8007538:	eb4a 0106 	adc.w	r1, sl, r6
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	461d      	mov	r5, r3
 8007542:	f04f 0600 	mov.w	r6, #0
 8007546:	196b      	adds	r3, r5, r5
 8007548:	eb46 0406 	adc.w	r4, r6, r6
 800754c:	461a      	mov	r2, r3
 800754e:	4623      	mov	r3, r4
 8007550:	f7f9 faac 	bl	8000aac <__aeabi_uldivmod>
 8007554:	4603      	mov	r3, r0
 8007556:	460c      	mov	r4, r1
 8007558:	461a      	mov	r2, r3
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <UART_SetConfig+0x384>)
 800755c:	fba3 1302 	umull	r1, r3, r3, r2
 8007560:	095b      	lsrs	r3, r3, #5
 8007562:	2164      	movs	r1, #100	; 0x64
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	3332      	adds	r3, #50	; 0x32
 800756e:	4a07      	ldr	r2, [pc, #28]	; (800758c <UART_SetConfig+0x384>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f003 0207 	and.w	r2, r3, #7
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4442      	add	r2, r8
 8007580:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007582:	e1b2      	b.n	80078ea <UART_SetConfig+0x6e2>
 8007584:	40011000 	.word	0x40011000
 8007588:	40011400 	.word	0x40011400
 800758c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4ad7      	ldr	r2, [pc, #860]	; (80078f4 <UART_SetConfig+0x6ec>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d005      	beq.n	80075a6 <UART_SetConfig+0x39e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4ad6      	ldr	r2, [pc, #856]	; (80078f8 <UART_SetConfig+0x6f0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	f040 80d1 	bne.w	8007748 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80075a6:	f7fe fa15 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 80075aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	469a      	mov	sl, r3
 80075b0:	f04f 0b00 	mov.w	fp, #0
 80075b4:	46d0      	mov	r8, sl
 80075b6:	46d9      	mov	r9, fp
 80075b8:	eb18 0308 	adds.w	r3, r8, r8
 80075bc:	eb49 0409 	adc.w	r4, r9, r9
 80075c0:	4698      	mov	r8, r3
 80075c2:	46a1      	mov	r9, r4
 80075c4:	eb18 080a 	adds.w	r8, r8, sl
 80075c8:	eb49 090b 	adc.w	r9, r9, fp
 80075cc:	f04f 0100 	mov.w	r1, #0
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075e0:	4688      	mov	r8, r1
 80075e2:	4691      	mov	r9, r2
 80075e4:	eb1a 0508 	adds.w	r5, sl, r8
 80075e8:	eb4b 0609 	adc.w	r6, fp, r9
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4619      	mov	r1, r3
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	f04f 0400 	mov.w	r4, #0
 80075fe:	0094      	lsls	r4, r2, #2
 8007600:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007604:	008b      	lsls	r3, r1, #2
 8007606:	461a      	mov	r2, r3
 8007608:	4623      	mov	r3, r4
 800760a:	4628      	mov	r0, r5
 800760c:	4631      	mov	r1, r6
 800760e:	f7f9 fa4d 	bl	8000aac <__aeabi_uldivmod>
 8007612:	4603      	mov	r3, r0
 8007614:	460c      	mov	r4, r1
 8007616:	461a      	mov	r2, r3
 8007618:	4bb8      	ldr	r3, [pc, #736]	; (80078fc <UART_SetConfig+0x6f4>)
 800761a:	fba3 2302 	umull	r2, r3, r3, r2
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	469b      	mov	fp, r3
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	46d9      	mov	r9, fp
 800762e:	46e2      	mov	sl, ip
 8007630:	eb19 0309 	adds.w	r3, r9, r9
 8007634:	eb4a 040a 	adc.w	r4, sl, sl
 8007638:	4699      	mov	r9, r3
 800763a:	46a2      	mov	sl, r4
 800763c:	eb19 090b 	adds.w	r9, r9, fp
 8007640:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007644:	f04f 0100 	mov.w	r1, #0
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007650:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007658:	4689      	mov	r9, r1
 800765a:	4692      	mov	sl, r2
 800765c:	eb1b 0509 	adds.w	r5, fp, r9
 8007660:	eb4c 060a 	adc.w	r6, ip, sl
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4619      	mov	r1, r3
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	f04f 0400 	mov.w	r4, #0
 8007676:	0094      	lsls	r4, r2, #2
 8007678:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800767c:	008b      	lsls	r3, r1, #2
 800767e:	461a      	mov	r2, r3
 8007680:	4623      	mov	r3, r4
 8007682:	4628      	mov	r0, r5
 8007684:	4631      	mov	r1, r6
 8007686:	f7f9 fa11 	bl	8000aac <__aeabi_uldivmod>
 800768a:	4603      	mov	r3, r0
 800768c:	460c      	mov	r4, r1
 800768e:	461a      	mov	r2, r3
 8007690:	4b9a      	ldr	r3, [pc, #616]	; (80078fc <UART_SetConfig+0x6f4>)
 8007692:	fba3 1302 	umull	r1, r3, r3, r2
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	2164      	movs	r1, #100	; 0x64
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	3332      	adds	r3, #50	; 0x32
 80076a4:	4a95      	ldr	r2, [pc, #596]	; (80078fc <UART_SetConfig+0x6f4>)
 80076a6:	fba2 2303 	umull	r2, r3, r2, r3
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076b0:	4498      	add	r8, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	469b      	mov	fp, r3
 80076b6:	f04f 0c00 	mov.w	ip, #0
 80076ba:	46d9      	mov	r9, fp
 80076bc:	46e2      	mov	sl, ip
 80076be:	eb19 0309 	adds.w	r3, r9, r9
 80076c2:	eb4a 040a 	adc.w	r4, sl, sl
 80076c6:	4699      	mov	r9, r3
 80076c8:	46a2      	mov	sl, r4
 80076ca:	eb19 090b 	adds.w	r9, r9, fp
 80076ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076d2:	f04f 0100 	mov.w	r1, #0
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076e6:	4689      	mov	r9, r1
 80076e8:	4692      	mov	sl, r2
 80076ea:	eb1b 0509 	adds.w	r5, fp, r9
 80076ee:	eb4c 060a 	adc.w	r6, ip, sl
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f04f 0300 	mov.w	r3, #0
 8007700:	f04f 0400 	mov.w	r4, #0
 8007704:	0094      	lsls	r4, r2, #2
 8007706:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800770a:	008b      	lsls	r3, r1, #2
 800770c:	461a      	mov	r2, r3
 800770e:	4623      	mov	r3, r4
 8007710:	4628      	mov	r0, r5
 8007712:	4631      	mov	r1, r6
 8007714:	f7f9 f9ca 	bl	8000aac <__aeabi_uldivmod>
 8007718:	4603      	mov	r3, r0
 800771a:	460c      	mov	r4, r1
 800771c:	461a      	mov	r2, r3
 800771e:	4b77      	ldr	r3, [pc, #476]	; (80078fc <UART_SetConfig+0x6f4>)
 8007720:	fba3 1302 	umull	r1, r3, r3, r2
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	2164      	movs	r1, #100	; 0x64
 8007728:	fb01 f303 	mul.w	r3, r1, r3
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	3332      	adds	r3, #50	; 0x32
 8007732:	4a72      	ldr	r2, [pc, #456]	; (80078fc <UART_SetConfig+0x6f4>)
 8007734:	fba2 2303 	umull	r2, r3, r2, r3
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	f003 020f 	and.w	r2, r3, #15
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4442      	add	r2, r8
 8007744:	609a      	str	r2, [r3, #8]
 8007746:	e0d0      	b.n	80078ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fe f930 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 800774c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	469a      	mov	sl, r3
 8007752:	f04f 0b00 	mov.w	fp, #0
 8007756:	46d0      	mov	r8, sl
 8007758:	46d9      	mov	r9, fp
 800775a:	eb18 0308 	adds.w	r3, r8, r8
 800775e:	eb49 0409 	adc.w	r4, r9, r9
 8007762:	4698      	mov	r8, r3
 8007764:	46a1      	mov	r9, r4
 8007766:	eb18 080a 	adds.w	r8, r8, sl
 800776a:	eb49 090b 	adc.w	r9, r9, fp
 800776e:	f04f 0100 	mov.w	r1, #0
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800777a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800777e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007782:	4688      	mov	r8, r1
 8007784:	4691      	mov	r9, r2
 8007786:	eb1a 0508 	adds.w	r5, sl, r8
 800778a:	eb4b 0609 	adc.w	r6, fp, r9
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	4619      	mov	r1, r3
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	f04f 0400 	mov.w	r4, #0
 80077a0:	0094      	lsls	r4, r2, #2
 80077a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077a6:	008b      	lsls	r3, r1, #2
 80077a8:	461a      	mov	r2, r3
 80077aa:	4623      	mov	r3, r4
 80077ac:	4628      	mov	r0, r5
 80077ae:	4631      	mov	r1, r6
 80077b0:	f7f9 f97c 	bl	8000aac <__aeabi_uldivmod>
 80077b4:	4603      	mov	r3, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	461a      	mov	r2, r3
 80077ba:	4b50      	ldr	r3, [pc, #320]	; (80078fc <UART_SetConfig+0x6f4>)
 80077bc:	fba3 2302 	umull	r2, r3, r3, r2
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	469b      	mov	fp, r3
 80077ca:	f04f 0c00 	mov.w	ip, #0
 80077ce:	46d9      	mov	r9, fp
 80077d0:	46e2      	mov	sl, ip
 80077d2:	eb19 0309 	adds.w	r3, r9, r9
 80077d6:	eb4a 040a 	adc.w	r4, sl, sl
 80077da:	4699      	mov	r9, r3
 80077dc:	46a2      	mov	sl, r4
 80077de:	eb19 090b 	adds.w	r9, r9, fp
 80077e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077e6:	f04f 0100 	mov.w	r1, #0
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077fa:	4689      	mov	r9, r1
 80077fc:	4692      	mov	sl, r2
 80077fe:	eb1b 0509 	adds.w	r5, fp, r9
 8007802:	eb4c 060a 	adc.w	r6, ip, sl
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	4619      	mov	r1, r3
 800780c:	f04f 0200 	mov.w	r2, #0
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	f04f 0400 	mov.w	r4, #0
 8007818:	0094      	lsls	r4, r2, #2
 800781a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800781e:	008b      	lsls	r3, r1, #2
 8007820:	461a      	mov	r2, r3
 8007822:	4623      	mov	r3, r4
 8007824:	4628      	mov	r0, r5
 8007826:	4631      	mov	r1, r6
 8007828:	f7f9 f940 	bl	8000aac <__aeabi_uldivmod>
 800782c:	4603      	mov	r3, r0
 800782e:	460c      	mov	r4, r1
 8007830:	461a      	mov	r2, r3
 8007832:	4b32      	ldr	r3, [pc, #200]	; (80078fc <UART_SetConfig+0x6f4>)
 8007834:	fba3 1302 	umull	r1, r3, r3, r2
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	2164      	movs	r1, #100	; 0x64
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	3332      	adds	r3, #50	; 0x32
 8007846:	4a2d      	ldr	r2, [pc, #180]	; (80078fc <UART_SetConfig+0x6f4>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007852:	4498      	add	r8, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	469b      	mov	fp, r3
 8007858:	f04f 0c00 	mov.w	ip, #0
 800785c:	46d9      	mov	r9, fp
 800785e:	46e2      	mov	sl, ip
 8007860:	eb19 0309 	adds.w	r3, r9, r9
 8007864:	eb4a 040a 	adc.w	r4, sl, sl
 8007868:	4699      	mov	r9, r3
 800786a:	46a2      	mov	sl, r4
 800786c:	eb19 090b 	adds.w	r9, r9, fp
 8007870:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007880:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007884:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007888:	4689      	mov	r9, r1
 800788a:	4692      	mov	sl, r2
 800788c:	eb1b 0509 	adds.w	r5, fp, r9
 8007890:	eb4c 060a 	adc.w	r6, ip, sl
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4619      	mov	r1, r3
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	f04f 0300 	mov.w	r3, #0
 80078a2:	f04f 0400 	mov.w	r4, #0
 80078a6:	0094      	lsls	r4, r2, #2
 80078a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078ac:	008b      	lsls	r3, r1, #2
 80078ae:	461a      	mov	r2, r3
 80078b0:	4623      	mov	r3, r4
 80078b2:	4628      	mov	r0, r5
 80078b4:	4631      	mov	r1, r6
 80078b6:	f7f9 f8f9 	bl	8000aac <__aeabi_uldivmod>
 80078ba:	4603      	mov	r3, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	461a      	mov	r2, r3
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <UART_SetConfig+0x6f4>)
 80078c2:	fba3 1302 	umull	r1, r3, r3, r2
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	2164      	movs	r1, #100	; 0x64
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	3332      	adds	r3, #50	; 0x32
 80078d4:	4a09      	ldr	r2, [pc, #36]	; (80078fc <UART_SetConfig+0x6f4>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	f003 020f 	and.w	r2, r3, #15
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4442      	add	r2, r8
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	e7ff      	b.n	80078ea <UART_SetConfig+0x6e2>
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f4:	40011000 	.word	0x40011000
 80078f8:	40011400 	.word	0x40011400
 80078fc:	51eb851f 	.word	0x51eb851f

08007900 <__errno>:
 8007900:	4b01      	ldr	r3, [pc, #4]	; (8007908 <__errno+0x8>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000980 	.word	0x20000980

0800790c <__libc_init_array>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4e0d      	ldr	r6, [pc, #52]	; (8007944 <__libc_init_array+0x38>)
 8007910:	4c0d      	ldr	r4, [pc, #52]	; (8007948 <__libc_init_array+0x3c>)
 8007912:	1ba4      	subs	r4, r4, r6
 8007914:	10a4      	asrs	r4, r4, #2
 8007916:	2500      	movs	r5, #0
 8007918:	42a5      	cmp	r5, r4
 800791a:	d109      	bne.n	8007930 <__libc_init_array+0x24>
 800791c:	4e0b      	ldr	r6, [pc, #44]	; (800794c <__libc_init_array+0x40>)
 800791e:	4c0c      	ldr	r4, [pc, #48]	; (8007950 <__libc_init_array+0x44>)
 8007920:	f000 fc26 	bl	8008170 <_init>
 8007924:	1ba4      	subs	r4, r4, r6
 8007926:	10a4      	asrs	r4, r4, #2
 8007928:	2500      	movs	r5, #0
 800792a:	42a5      	cmp	r5, r4
 800792c:	d105      	bne.n	800793a <__libc_init_array+0x2e>
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007934:	4798      	blx	r3
 8007936:	3501      	adds	r5, #1
 8007938:	e7ee      	b.n	8007918 <__libc_init_array+0xc>
 800793a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800793e:	4798      	blx	r3
 8007940:	3501      	adds	r5, #1
 8007942:	e7f2      	b.n	800792a <__libc_init_array+0x1e>
 8007944:	0800893c 	.word	0x0800893c
 8007948:	0800893c 	.word	0x0800893c
 800794c:	0800893c 	.word	0x0800893c
 8007950:	08008940 	.word	0x08008940

08007954 <memcpy>:
 8007954:	b510      	push	{r4, lr}
 8007956:	1e43      	subs	r3, r0, #1
 8007958:	440a      	add	r2, r1
 800795a:	4291      	cmp	r1, r2
 800795c:	d100      	bne.n	8007960 <memcpy+0xc>
 800795e:	bd10      	pop	{r4, pc}
 8007960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007968:	e7f7      	b.n	800795a <memcpy+0x6>

0800796a <memmove>:
 800796a:	4288      	cmp	r0, r1
 800796c:	b510      	push	{r4, lr}
 800796e:	eb01 0302 	add.w	r3, r1, r2
 8007972:	d807      	bhi.n	8007984 <memmove+0x1a>
 8007974:	1e42      	subs	r2, r0, #1
 8007976:	4299      	cmp	r1, r3
 8007978:	d00a      	beq.n	8007990 <memmove+0x26>
 800797a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800797e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007982:	e7f8      	b.n	8007976 <memmove+0xc>
 8007984:	4283      	cmp	r3, r0
 8007986:	d9f5      	bls.n	8007974 <memmove+0xa>
 8007988:	1881      	adds	r1, r0, r2
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	42d3      	cmn	r3, r2
 800798e:	d100      	bne.n	8007992 <memmove+0x28>
 8007990:	bd10      	pop	{r4, pc}
 8007992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007996:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800799a:	e7f7      	b.n	800798c <memmove+0x22>

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <siprintf>:
 80079ac:	b40e      	push	{r1, r2, r3}
 80079ae:	b500      	push	{lr}
 80079b0:	b09c      	sub	sp, #112	; 0x70
 80079b2:	ab1d      	add	r3, sp, #116	; 0x74
 80079b4:	9002      	str	r0, [sp, #8]
 80079b6:	9006      	str	r0, [sp, #24]
 80079b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079bc:	4809      	ldr	r0, [pc, #36]	; (80079e4 <siprintf+0x38>)
 80079be:	9107      	str	r1, [sp, #28]
 80079c0:	9104      	str	r1, [sp, #16]
 80079c2:	4909      	ldr	r1, [pc, #36]	; (80079e8 <siprintf+0x3c>)
 80079c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c8:	9105      	str	r1, [sp, #20]
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	a902      	add	r1, sp, #8
 80079d0:	f000 f866 	bl	8007aa0 <_svfiprintf_r>
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
 80079da:	b01c      	add	sp, #112	; 0x70
 80079dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e0:	b003      	add	sp, #12
 80079e2:	4770      	bx	lr
 80079e4:	20000980 	.word	0x20000980
 80079e8:	ffff0208 	.word	0xffff0208

080079ec <__ssputs_r>:
 80079ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	688e      	ldr	r6, [r1, #8]
 80079f2:	429e      	cmp	r6, r3
 80079f4:	4682      	mov	sl, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	4690      	mov	r8, r2
 80079fa:	4699      	mov	r9, r3
 80079fc:	d837      	bhi.n	8007a6e <__ssputs_r+0x82>
 80079fe:	898a      	ldrh	r2, [r1, #12]
 8007a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a04:	d031      	beq.n	8007a6a <__ssputs_r+0x7e>
 8007a06:	6825      	ldr	r5, [r4, #0]
 8007a08:	6909      	ldr	r1, [r1, #16]
 8007a0a:	1a6f      	subs	r7, r5, r1
 8007a0c:	6965      	ldr	r5, [r4, #20]
 8007a0e:	2302      	movs	r3, #2
 8007a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a14:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a18:	f109 0301 	add.w	r3, r9, #1
 8007a1c:	443b      	add	r3, r7
 8007a1e:	429d      	cmp	r5, r3
 8007a20:	bf38      	it	cc
 8007a22:	461d      	movcc	r5, r3
 8007a24:	0553      	lsls	r3, r2, #21
 8007a26:	d530      	bpl.n	8007a8a <__ssputs_r+0x9e>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f000 fb07 	bl	800803c <_malloc_r>
 8007a2e:	4606      	mov	r6, r0
 8007a30:	b950      	cbnz	r0, 8007a48 <__ssputs_r+0x5c>
 8007a32:	230c      	movs	r3, #12
 8007a34:	f8ca 3000 	str.w	r3, [sl]
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a48:	463a      	mov	r2, r7
 8007a4a:	6921      	ldr	r1, [r4, #16]
 8007a4c:	f7ff ff82 	bl	8007954 <memcpy>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	6126      	str	r6, [r4, #16]
 8007a5e:	6165      	str	r5, [r4, #20]
 8007a60:	443e      	add	r6, r7
 8007a62:	1bed      	subs	r5, r5, r7
 8007a64:	6026      	str	r6, [r4, #0]
 8007a66:	60a5      	str	r5, [r4, #8]
 8007a68:	464e      	mov	r6, r9
 8007a6a:	454e      	cmp	r6, r9
 8007a6c:	d900      	bls.n	8007a70 <__ssputs_r+0x84>
 8007a6e:	464e      	mov	r6, r9
 8007a70:	4632      	mov	r2, r6
 8007a72:	4641      	mov	r1, r8
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	f7ff ff78 	bl	800796a <memmove>
 8007a7a:	68a3      	ldr	r3, [r4, #8]
 8007a7c:	1b9b      	subs	r3, r3, r6
 8007a7e:	60a3      	str	r3, [r4, #8]
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	441e      	add	r6, r3
 8007a84:	6026      	str	r6, [r4, #0]
 8007a86:	2000      	movs	r0, #0
 8007a88:	e7dc      	b.n	8007a44 <__ssputs_r+0x58>
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	f000 fb30 	bl	80080f0 <_realloc_r>
 8007a90:	4606      	mov	r6, r0
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d1e2      	bne.n	8007a5c <__ssputs_r+0x70>
 8007a96:	6921      	ldr	r1, [r4, #16]
 8007a98:	4650      	mov	r0, sl
 8007a9a:	f000 fa81 	bl	8007fa0 <_free_r>
 8007a9e:	e7c8      	b.n	8007a32 <__ssputs_r+0x46>

08007aa0 <_svfiprintf_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	461d      	mov	r5, r3
 8007aa6:	898b      	ldrh	r3, [r1, #12]
 8007aa8:	061f      	lsls	r7, r3, #24
 8007aaa:	b09d      	sub	sp, #116	; 0x74
 8007aac:	4680      	mov	r8, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	4616      	mov	r6, r2
 8007ab2:	d50f      	bpl.n	8007ad4 <_svfiprintf_r+0x34>
 8007ab4:	690b      	ldr	r3, [r1, #16]
 8007ab6:	b96b      	cbnz	r3, 8007ad4 <_svfiprintf_r+0x34>
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	f000 fabf 	bl	800803c <_malloc_r>
 8007abe:	6020      	str	r0, [r4, #0]
 8007ac0:	6120      	str	r0, [r4, #16]
 8007ac2:	b928      	cbnz	r0, 8007ad0 <_svfiprintf_r+0x30>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	f8c8 3000 	str.w	r3, [r8]
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ace:	e0c8      	b.n	8007c62 <_svfiprintf_r+0x1c2>
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	6163      	str	r3, [r4, #20]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad8:	2320      	movs	r3, #32
 8007ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ade:	2330      	movs	r3, #48	; 0x30
 8007ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae4:	9503      	str	r5, [sp, #12]
 8007ae6:	f04f 0b01 	mov.w	fp, #1
 8007aea:	4637      	mov	r7, r6
 8007aec:	463d      	mov	r5, r7
 8007aee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007af2:	b10b      	cbz	r3, 8007af8 <_svfiprintf_r+0x58>
 8007af4:	2b25      	cmp	r3, #37	; 0x25
 8007af6:	d13e      	bne.n	8007b76 <_svfiprintf_r+0xd6>
 8007af8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007afc:	d00b      	beq.n	8007b16 <_svfiprintf_r+0x76>
 8007afe:	4653      	mov	r3, sl
 8007b00:	4632      	mov	r2, r6
 8007b02:	4621      	mov	r1, r4
 8007b04:	4640      	mov	r0, r8
 8007b06:	f7ff ff71 	bl	80079ec <__ssputs_r>
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	f000 80a4 	beq.w	8007c58 <_svfiprintf_r+0x1b8>
 8007b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b12:	4453      	add	r3, sl
 8007b14:	9309      	str	r3, [sp, #36]	; 0x24
 8007b16:	783b      	ldrb	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 809d 	beq.w	8007c58 <_svfiprintf_r+0x1b8>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295
 8007b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	9307      	str	r3, [sp, #28]
 8007b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b30:	931a      	str	r3, [sp, #104]	; 0x68
 8007b32:	462f      	mov	r7, r5
 8007b34:	2205      	movs	r2, #5
 8007b36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b3a:	4850      	ldr	r0, [pc, #320]	; (8007c7c <_svfiprintf_r+0x1dc>)
 8007b3c:	f7f8 fb70 	bl	8000220 <memchr>
 8007b40:	9b04      	ldr	r3, [sp, #16]
 8007b42:	b9d0      	cbnz	r0, 8007b7a <_svfiprintf_r+0xda>
 8007b44:	06d9      	lsls	r1, r3, #27
 8007b46:	bf44      	itt	mi
 8007b48:	2220      	movmi	r2, #32
 8007b4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b4e:	071a      	lsls	r2, r3, #28
 8007b50:	bf44      	itt	mi
 8007b52:	222b      	movmi	r2, #43	; 0x2b
 8007b54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b58:	782a      	ldrb	r2, [r5, #0]
 8007b5a:	2a2a      	cmp	r2, #42	; 0x2a
 8007b5c:	d015      	beq.n	8007b8a <_svfiprintf_r+0xea>
 8007b5e:	9a07      	ldr	r2, [sp, #28]
 8007b60:	462f      	mov	r7, r5
 8007b62:	2000      	movs	r0, #0
 8007b64:	250a      	movs	r5, #10
 8007b66:	4639      	mov	r1, r7
 8007b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b6c:	3b30      	subs	r3, #48	; 0x30
 8007b6e:	2b09      	cmp	r3, #9
 8007b70:	d94d      	bls.n	8007c0e <_svfiprintf_r+0x16e>
 8007b72:	b1b8      	cbz	r0, 8007ba4 <_svfiprintf_r+0x104>
 8007b74:	e00f      	b.n	8007b96 <_svfiprintf_r+0xf6>
 8007b76:	462f      	mov	r7, r5
 8007b78:	e7b8      	b.n	8007aec <_svfiprintf_r+0x4c>
 8007b7a:	4a40      	ldr	r2, [pc, #256]	; (8007c7c <_svfiprintf_r+0x1dc>)
 8007b7c:	1a80      	subs	r0, r0, r2
 8007b7e:	fa0b f000 	lsl.w	r0, fp, r0
 8007b82:	4318      	orrs	r0, r3
 8007b84:	9004      	str	r0, [sp, #16]
 8007b86:	463d      	mov	r5, r7
 8007b88:	e7d3      	b.n	8007b32 <_svfiprintf_r+0x92>
 8007b8a:	9a03      	ldr	r2, [sp, #12]
 8007b8c:	1d11      	adds	r1, r2, #4
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	9103      	str	r1, [sp, #12]
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	db01      	blt.n	8007b9a <_svfiprintf_r+0xfa>
 8007b96:	9207      	str	r2, [sp, #28]
 8007b98:	e004      	b.n	8007ba4 <_svfiprintf_r+0x104>
 8007b9a:	4252      	negs	r2, r2
 8007b9c:	f043 0302 	orr.w	r3, r3, #2
 8007ba0:	9207      	str	r2, [sp, #28]
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	783b      	ldrb	r3, [r7, #0]
 8007ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ba8:	d10c      	bne.n	8007bc4 <_svfiprintf_r+0x124>
 8007baa:	787b      	ldrb	r3, [r7, #1]
 8007bac:	2b2a      	cmp	r3, #42	; 0x2a
 8007bae:	d133      	bne.n	8007c18 <_svfiprintf_r+0x178>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	1d1a      	adds	r2, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	9203      	str	r2, [sp, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfb8      	it	lt
 8007bbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bc0:	3702      	adds	r7, #2
 8007bc2:	9305      	str	r3, [sp, #20]
 8007bc4:	4d2e      	ldr	r5, [pc, #184]	; (8007c80 <_svfiprintf_r+0x1e0>)
 8007bc6:	7839      	ldrb	r1, [r7, #0]
 8007bc8:	2203      	movs	r2, #3
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7f8 fb28 	bl	8000220 <memchr>
 8007bd0:	b138      	cbz	r0, 8007be2 <_svfiprintf_r+0x142>
 8007bd2:	2340      	movs	r3, #64	; 0x40
 8007bd4:	1b40      	subs	r0, r0, r5
 8007bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007bda:	9b04      	ldr	r3, [sp, #16]
 8007bdc:	4303      	orrs	r3, r0
 8007bde:	3701      	adds	r7, #1
 8007be0:	9304      	str	r3, [sp, #16]
 8007be2:	7839      	ldrb	r1, [r7, #0]
 8007be4:	4827      	ldr	r0, [pc, #156]	; (8007c84 <_svfiprintf_r+0x1e4>)
 8007be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bea:	2206      	movs	r2, #6
 8007bec:	1c7e      	adds	r6, r7, #1
 8007bee:	f7f8 fb17 	bl	8000220 <memchr>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d038      	beq.n	8007c68 <_svfiprintf_r+0x1c8>
 8007bf6:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <_svfiprintf_r+0x1e8>)
 8007bf8:	bb13      	cbnz	r3, 8007c40 <_svfiprintf_r+0x1a0>
 8007bfa:	9b03      	ldr	r3, [sp, #12]
 8007bfc:	3307      	adds	r3, #7
 8007bfe:	f023 0307 	bic.w	r3, r3, #7
 8007c02:	3308      	adds	r3, #8
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c08:	444b      	add	r3, r9
 8007c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0c:	e76d      	b.n	8007aea <_svfiprintf_r+0x4a>
 8007c0e:	fb05 3202 	mla	r2, r5, r2, r3
 8007c12:	2001      	movs	r0, #1
 8007c14:	460f      	mov	r7, r1
 8007c16:	e7a6      	b.n	8007b66 <_svfiprintf_r+0xc6>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	3701      	adds	r7, #1
 8007c1c:	9305      	str	r3, [sp, #20]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	250a      	movs	r5, #10
 8007c22:	4638      	mov	r0, r7
 8007c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c28:	3a30      	subs	r2, #48	; 0x30
 8007c2a:	2a09      	cmp	r2, #9
 8007c2c:	d903      	bls.n	8007c36 <_svfiprintf_r+0x196>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0c8      	beq.n	8007bc4 <_svfiprintf_r+0x124>
 8007c32:	9105      	str	r1, [sp, #20]
 8007c34:	e7c6      	b.n	8007bc4 <_svfiprintf_r+0x124>
 8007c36:	fb05 2101 	mla	r1, r5, r1, r2
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	e7f0      	b.n	8007c22 <_svfiprintf_r+0x182>
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	4622      	mov	r2, r4
 8007c46:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <_svfiprintf_r+0x1ec>)
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f3af 8000 	nop.w
 8007c50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c54:	4681      	mov	r9, r0
 8007c56:	d1d6      	bne.n	8007c06 <_svfiprintf_r+0x166>
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	065b      	lsls	r3, r3, #25
 8007c5c:	f53f af35 	bmi.w	8007aca <_svfiprintf_r+0x2a>
 8007c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c62:	b01d      	add	sp, #116	; 0x74
 8007c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <_svfiprintf_r+0x1ec>)
 8007c70:	a904      	add	r1, sp, #16
 8007c72:	4640      	mov	r0, r8
 8007c74:	f000 f882 	bl	8007d7c <_printf_i>
 8007c78:	e7ea      	b.n	8007c50 <_svfiprintf_r+0x1b0>
 8007c7a:	bf00      	nop
 8007c7c:	08008900 	.word	0x08008900
 8007c80:	08008906 	.word	0x08008906
 8007c84:	0800890a 	.word	0x0800890a
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	080079ed 	.word	0x080079ed

08007c90 <_printf_common>:
 8007c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	4691      	mov	r9, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	688a      	ldr	r2, [r1, #8]
 8007c9a:	690b      	ldr	r3, [r1, #16]
 8007c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bfb8      	it	lt
 8007ca4:	4613      	movlt	r3, r2
 8007ca6:	f8c9 3000 	str.w	r3, [r9]
 8007caa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	b112      	cbz	r2, 8007cba <_printf_common+0x2a>
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	f8c9 3000 	str.w	r3, [r9]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	0699      	lsls	r1, r3, #26
 8007cbe:	bf42      	ittt	mi
 8007cc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cc4:	3302      	addmi	r3, #2
 8007cc6:	f8c9 3000 	strmi.w	r3, [r9]
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	f015 0506 	ands.w	r5, r5, #6
 8007cd0:	d107      	bne.n	8007ce2 <_printf_common+0x52>
 8007cd2:	f104 0a19 	add.w	sl, r4, #25
 8007cd6:	68e3      	ldr	r3, [r4, #12]
 8007cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	42ab      	cmp	r3, r5
 8007ce0:	dc28      	bgt.n	8007d34 <_printf_common+0xa4>
 8007ce2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	3300      	adds	r3, #0
 8007cea:	bf18      	it	ne
 8007cec:	2301      	movne	r3, #1
 8007cee:	0692      	lsls	r2, r2, #26
 8007cf0:	d42d      	bmi.n	8007d4e <_printf_common+0xbe>
 8007cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	47c0      	blx	r8
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d020      	beq.n	8007d42 <_printf_common+0xb2>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	68e5      	ldr	r5, [r4, #12]
 8007d04:	f8d9 2000 	ldr.w	r2, [r9]
 8007d08:	f003 0306 	and.w	r3, r3, #6
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	bf08      	it	eq
 8007d10:	1aad      	subeq	r5, r5, r2
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	6922      	ldr	r2, [r4, #16]
 8007d16:	bf0c      	ite	eq
 8007d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d1c:	2500      	movne	r5, #0
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	bfc4      	itt	gt
 8007d22:	1a9b      	subgt	r3, r3, r2
 8007d24:	18ed      	addgt	r5, r5, r3
 8007d26:	f04f 0900 	mov.w	r9, #0
 8007d2a:	341a      	adds	r4, #26
 8007d2c:	454d      	cmp	r5, r9
 8007d2e:	d11a      	bne.n	8007d66 <_printf_common+0xd6>
 8007d30:	2000      	movs	r0, #0
 8007d32:	e008      	b.n	8007d46 <_printf_common+0xb6>
 8007d34:	2301      	movs	r3, #1
 8007d36:	4652      	mov	r2, sl
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	47c0      	blx	r8
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d103      	bne.n	8007d4a <_printf_common+0xba>
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4a:	3501      	adds	r5, #1
 8007d4c:	e7c3      	b.n	8007cd6 <_printf_common+0x46>
 8007d4e:	18e1      	adds	r1, r4, r3
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	2030      	movs	r0, #48	; 0x30
 8007d54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d58:	4422      	add	r2, r4
 8007d5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d62:	3302      	adds	r3, #2
 8007d64:	e7c5      	b.n	8007cf2 <_printf_common+0x62>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4622      	mov	r2, r4
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	47c0      	blx	r8
 8007d70:	3001      	adds	r0, #1
 8007d72:	d0e6      	beq.n	8007d42 <_printf_common+0xb2>
 8007d74:	f109 0901 	add.w	r9, r9, #1
 8007d78:	e7d8      	b.n	8007d2c <_printf_common+0x9c>
	...

08007d7c <_printf_i>:
 8007d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d84:	460c      	mov	r4, r1
 8007d86:	7e09      	ldrb	r1, [r1, #24]
 8007d88:	b085      	sub	sp, #20
 8007d8a:	296e      	cmp	r1, #110	; 0x6e
 8007d8c:	4617      	mov	r7, r2
 8007d8e:	4606      	mov	r6, r0
 8007d90:	4698      	mov	r8, r3
 8007d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d94:	f000 80b3 	beq.w	8007efe <_printf_i+0x182>
 8007d98:	d822      	bhi.n	8007de0 <_printf_i+0x64>
 8007d9a:	2963      	cmp	r1, #99	; 0x63
 8007d9c:	d036      	beq.n	8007e0c <_printf_i+0x90>
 8007d9e:	d80a      	bhi.n	8007db6 <_printf_i+0x3a>
 8007da0:	2900      	cmp	r1, #0
 8007da2:	f000 80b9 	beq.w	8007f18 <_printf_i+0x19c>
 8007da6:	2958      	cmp	r1, #88	; 0x58
 8007da8:	f000 8083 	beq.w	8007eb2 <_printf_i+0x136>
 8007dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007db0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007db4:	e032      	b.n	8007e1c <_printf_i+0xa0>
 8007db6:	2964      	cmp	r1, #100	; 0x64
 8007db8:	d001      	beq.n	8007dbe <_printf_i+0x42>
 8007dba:	2969      	cmp	r1, #105	; 0x69
 8007dbc:	d1f6      	bne.n	8007dac <_printf_i+0x30>
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	6813      	ldr	r3, [r2, #0]
 8007dc2:	0605      	lsls	r5, r0, #24
 8007dc4:	f103 0104 	add.w	r1, r3, #4
 8007dc8:	d52a      	bpl.n	8007e20 <_printf_i+0xa4>
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6011      	str	r1, [r2, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da03      	bge.n	8007dda <_printf_i+0x5e>
 8007dd2:	222d      	movs	r2, #45	; 0x2d
 8007dd4:	425b      	negs	r3, r3
 8007dd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dda:	486f      	ldr	r0, [pc, #444]	; (8007f98 <_printf_i+0x21c>)
 8007ddc:	220a      	movs	r2, #10
 8007dde:	e039      	b.n	8007e54 <_printf_i+0xd8>
 8007de0:	2973      	cmp	r1, #115	; 0x73
 8007de2:	f000 809d 	beq.w	8007f20 <_printf_i+0x1a4>
 8007de6:	d808      	bhi.n	8007dfa <_printf_i+0x7e>
 8007de8:	296f      	cmp	r1, #111	; 0x6f
 8007dea:	d020      	beq.n	8007e2e <_printf_i+0xb2>
 8007dec:	2970      	cmp	r1, #112	; 0x70
 8007dee:	d1dd      	bne.n	8007dac <_printf_i+0x30>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	f043 0320 	orr.w	r3, r3, #32
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	e003      	b.n	8007e02 <_printf_i+0x86>
 8007dfa:	2975      	cmp	r1, #117	; 0x75
 8007dfc:	d017      	beq.n	8007e2e <_printf_i+0xb2>
 8007dfe:	2978      	cmp	r1, #120	; 0x78
 8007e00:	d1d4      	bne.n	8007dac <_printf_i+0x30>
 8007e02:	2378      	movs	r3, #120	; 0x78
 8007e04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e08:	4864      	ldr	r0, [pc, #400]	; (8007f9c <_printf_i+0x220>)
 8007e0a:	e055      	b.n	8007eb8 <_printf_i+0x13c>
 8007e0c:	6813      	ldr	r3, [r2, #0]
 8007e0e:	1d19      	adds	r1, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6011      	str	r1, [r2, #0]
 8007e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e08c      	b.n	8007f3a <_printf_i+0x1be>
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6011      	str	r1, [r2, #0]
 8007e24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e28:	bf18      	it	ne
 8007e2a:	b21b      	sxthne	r3, r3
 8007e2c:	e7cf      	b.n	8007dce <_printf_i+0x52>
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	6825      	ldr	r5, [r4, #0]
 8007e32:	1d18      	adds	r0, r3, #4
 8007e34:	6010      	str	r0, [r2, #0]
 8007e36:	0628      	lsls	r0, r5, #24
 8007e38:	d501      	bpl.n	8007e3e <_printf_i+0xc2>
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	e002      	b.n	8007e44 <_printf_i+0xc8>
 8007e3e:	0668      	lsls	r0, r5, #25
 8007e40:	d5fb      	bpl.n	8007e3a <_printf_i+0xbe>
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	4854      	ldr	r0, [pc, #336]	; (8007f98 <_printf_i+0x21c>)
 8007e46:	296f      	cmp	r1, #111	; 0x6f
 8007e48:	bf14      	ite	ne
 8007e4a:	220a      	movne	r2, #10
 8007e4c:	2208      	moveq	r2, #8
 8007e4e:	2100      	movs	r1, #0
 8007e50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e54:	6865      	ldr	r5, [r4, #4]
 8007e56:	60a5      	str	r5, [r4, #8]
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	f2c0 8095 	blt.w	8007f88 <_printf_i+0x20c>
 8007e5e:	6821      	ldr	r1, [r4, #0]
 8007e60:	f021 0104 	bic.w	r1, r1, #4
 8007e64:	6021      	str	r1, [r4, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d13d      	bne.n	8007ee6 <_printf_i+0x16a>
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	f040 808e 	bne.w	8007f8c <_printf_i+0x210>
 8007e70:	4665      	mov	r5, ip
 8007e72:	2a08      	cmp	r2, #8
 8007e74:	d10b      	bne.n	8007e8e <_printf_i+0x112>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	07db      	lsls	r3, r3, #31
 8007e7a:	d508      	bpl.n	8007e8e <_printf_i+0x112>
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	6862      	ldr	r2, [r4, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	bfde      	ittt	le
 8007e84:	2330      	movle	r3, #48	; 0x30
 8007e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8e:	ebac 0305 	sub.w	r3, ip, r5
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	f8cd 8000 	str.w	r8, [sp]
 8007e98:	463b      	mov	r3, r7
 8007e9a:	aa03      	add	r2, sp, #12
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f7ff fef6 	bl	8007c90 <_printf_common>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d14d      	bne.n	8007f44 <_printf_i+0x1c8>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	b005      	add	sp, #20
 8007eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	4839      	ldr	r0, [pc, #228]	; (8007f98 <_printf_i+0x21c>)
 8007eb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007eb8:	6813      	ldr	r3, [r2, #0]
 8007eba:	6821      	ldr	r1, [r4, #0]
 8007ebc:	1d1d      	adds	r5, r3, #4
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6015      	str	r5, [r2, #0]
 8007ec2:	060a      	lsls	r2, r1, #24
 8007ec4:	d50b      	bpl.n	8007ede <_printf_i+0x162>
 8007ec6:	07ca      	lsls	r2, r1, #31
 8007ec8:	bf44      	itt	mi
 8007eca:	f041 0120 	orrmi.w	r1, r1, #32
 8007ece:	6021      	strmi	r1, [r4, #0]
 8007ed0:	b91b      	cbnz	r3, 8007eda <_printf_i+0x15e>
 8007ed2:	6822      	ldr	r2, [r4, #0]
 8007ed4:	f022 0220 	bic.w	r2, r2, #32
 8007ed8:	6022      	str	r2, [r4, #0]
 8007eda:	2210      	movs	r2, #16
 8007edc:	e7b7      	b.n	8007e4e <_printf_i+0xd2>
 8007ede:	064d      	lsls	r5, r1, #25
 8007ee0:	bf48      	it	mi
 8007ee2:	b29b      	uxthmi	r3, r3
 8007ee4:	e7ef      	b.n	8007ec6 <_printf_i+0x14a>
 8007ee6:	4665      	mov	r5, ip
 8007ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eec:	fb02 3311 	mls	r3, r2, r1, r3
 8007ef0:	5cc3      	ldrb	r3, [r0, r3]
 8007ef2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	d1f5      	bne.n	8007ee8 <_printf_i+0x16c>
 8007efc:	e7b9      	b.n	8007e72 <_printf_i+0xf6>
 8007efe:	6813      	ldr	r3, [r2, #0]
 8007f00:	6825      	ldr	r5, [r4, #0]
 8007f02:	6961      	ldr	r1, [r4, #20]
 8007f04:	1d18      	adds	r0, r3, #4
 8007f06:	6010      	str	r0, [r2, #0]
 8007f08:	0628      	lsls	r0, r5, #24
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	d501      	bpl.n	8007f12 <_printf_i+0x196>
 8007f0e:	6019      	str	r1, [r3, #0]
 8007f10:	e002      	b.n	8007f18 <_printf_i+0x19c>
 8007f12:	066a      	lsls	r2, r5, #25
 8007f14:	d5fb      	bpl.n	8007f0e <_printf_i+0x192>
 8007f16:	8019      	strh	r1, [r3, #0]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	6123      	str	r3, [r4, #16]
 8007f1c:	4665      	mov	r5, ip
 8007f1e:	e7b9      	b.n	8007e94 <_printf_i+0x118>
 8007f20:	6813      	ldr	r3, [r2, #0]
 8007f22:	1d19      	adds	r1, r3, #4
 8007f24:	6011      	str	r1, [r2, #0]
 8007f26:	681d      	ldr	r5, [r3, #0]
 8007f28:	6862      	ldr	r2, [r4, #4]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f7f8 f977 	bl	8000220 <memchr>
 8007f32:	b108      	cbz	r0, 8007f38 <_printf_i+0x1bc>
 8007f34:	1b40      	subs	r0, r0, r5
 8007f36:	6060      	str	r0, [r4, #4]
 8007f38:	6863      	ldr	r3, [r4, #4]
 8007f3a:	6123      	str	r3, [r4, #16]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f42:	e7a7      	b.n	8007e94 <_printf_i+0x118>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	462a      	mov	r2, r5
 8007f48:	4639      	mov	r1, r7
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	47c0      	blx	r8
 8007f4e:	3001      	adds	r0, #1
 8007f50:	d0aa      	beq.n	8007ea8 <_printf_i+0x12c>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	079b      	lsls	r3, r3, #30
 8007f56:	d413      	bmi.n	8007f80 <_printf_i+0x204>
 8007f58:	68e0      	ldr	r0, [r4, #12]
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	4298      	cmp	r0, r3
 8007f5e:	bfb8      	it	lt
 8007f60:	4618      	movlt	r0, r3
 8007f62:	e7a3      	b.n	8007eac <_printf_i+0x130>
 8007f64:	2301      	movs	r3, #1
 8007f66:	464a      	mov	r2, r9
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	47c0      	blx	r8
 8007f6e:	3001      	adds	r0, #1
 8007f70:	d09a      	beq.n	8007ea8 <_printf_i+0x12c>
 8007f72:	3501      	adds	r5, #1
 8007f74:	68e3      	ldr	r3, [r4, #12]
 8007f76:	9a03      	ldr	r2, [sp, #12]
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	42ab      	cmp	r3, r5
 8007f7c:	dcf2      	bgt.n	8007f64 <_printf_i+0x1e8>
 8007f7e:	e7eb      	b.n	8007f58 <_printf_i+0x1dc>
 8007f80:	2500      	movs	r5, #0
 8007f82:	f104 0919 	add.w	r9, r4, #25
 8007f86:	e7f5      	b.n	8007f74 <_printf_i+0x1f8>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1ac      	bne.n	8007ee6 <_printf_i+0x16a>
 8007f8c:	7803      	ldrb	r3, [r0, #0]
 8007f8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f96:	e76c      	b.n	8007e72 <_printf_i+0xf6>
 8007f98:	08008911 	.word	0x08008911
 8007f9c:	08008922 	.word	0x08008922

08007fa0 <_free_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d045      	beq.n	8008034 <_free_r+0x94>
 8007fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fac:	1f0c      	subs	r4, r1, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfb8      	it	lt
 8007fb2:	18e4      	addlt	r4, r4, r3
 8007fb4:	f000 f8d2 	bl	800815c <__malloc_lock>
 8007fb8:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <_free_r+0x98>)
 8007fba:	6813      	ldr	r3, [r2, #0]
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	b933      	cbnz	r3, 8007fce <_free_r+0x2e>
 8007fc0:	6063      	str	r3, [r4, #4]
 8007fc2:	6014      	str	r4, [r2, #0]
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fca:	f000 b8c8 	b.w	800815e <__malloc_unlock>
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	d90c      	bls.n	8007fec <_free_r+0x4c>
 8007fd2:	6821      	ldr	r1, [r4, #0]
 8007fd4:	1862      	adds	r2, r4, r1
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	bf04      	itt	eq
 8007fda:	681a      	ldreq	r2, [r3, #0]
 8007fdc:	685b      	ldreq	r3, [r3, #4]
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	bf04      	itt	eq
 8007fe2:	1852      	addeq	r2, r2, r1
 8007fe4:	6022      	streq	r2, [r4, #0]
 8007fe6:	6004      	str	r4, [r0, #0]
 8007fe8:	e7ec      	b.n	8007fc4 <_free_r+0x24>
 8007fea:	4613      	mov	r3, r2
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	b10a      	cbz	r2, 8007ff4 <_free_r+0x54>
 8007ff0:	42a2      	cmp	r2, r4
 8007ff2:	d9fa      	bls.n	8007fea <_free_r+0x4a>
 8007ff4:	6819      	ldr	r1, [r3, #0]
 8007ff6:	1858      	adds	r0, r3, r1
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d10b      	bne.n	8008014 <_free_r+0x74>
 8007ffc:	6820      	ldr	r0, [r4, #0]
 8007ffe:	4401      	add	r1, r0
 8008000:	1858      	adds	r0, r3, r1
 8008002:	4282      	cmp	r2, r0
 8008004:	6019      	str	r1, [r3, #0]
 8008006:	d1dd      	bne.n	8007fc4 <_free_r+0x24>
 8008008:	6810      	ldr	r0, [r2, #0]
 800800a:	6852      	ldr	r2, [r2, #4]
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	4401      	add	r1, r0
 8008010:	6019      	str	r1, [r3, #0]
 8008012:	e7d7      	b.n	8007fc4 <_free_r+0x24>
 8008014:	d902      	bls.n	800801c <_free_r+0x7c>
 8008016:	230c      	movs	r3, #12
 8008018:	602b      	str	r3, [r5, #0]
 800801a:	e7d3      	b.n	8007fc4 <_free_r+0x24>
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	1821      	adds	r1, r4, r0
 8008020:	428a      	cmp	r2, r1
 8008022:	bf04      	itt	eq
 8008024:	6811      	ldreq	r1, [r2, #0]
 8008026:	6852      	ldreq	r2, [r2, #4]
 8008028:	6062      	str	r2, [r4, #4]
 800802a:	bf04      	itt	eq
 800802c:	1809      	addeq	r1, r1, r0
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	605c      	str	r4, [r3, #4]
 8008032:	e7c7      	b.n	8007fc4 <_free_r+0x24>
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	bf00      	nop
 8008038:	20000a2c 	.word	0x20000a2c

0800803c <_malloc_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	1ccd      	adds	r5, r1, #3
 8008040:	f025 0503 	bic.w	r5, r5, #3
 8008044:	3508      	adds	r5, #8
 8008046:	2d0c      	cmp	r5, #12
 8008048:	bf38      	it	cc
 800804a:	250c      	movcc	r5, #12
 800804c:	2d00      	cmp	r5, #0
 800804e:	4606      	mov	r6, r0
 8008050:	db01      	blt.n	8008056 <_malloc_r+0x1a>
 8008052:	42a9      	cmp	r1, r5
 8008054:	d903      	bls.n	800805e <_malloc_r+0x22>
 8008056:	230c      	movs	r3, #12
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	2000      	movs	r0, #0
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	f000 f87d 	bl	800815c <__malloc_lock>
 8008062:	4a21      	ldr	r2, [pc, #132]	; (80080e8 <_malloc_r+0xac>)
 8008064:	6814      	ldr	r4, [r2, #0]
 8008066:	4621      	mov	r1, r4
 8008068:	b991      	cbnz	r1, 8008090 <_malloc_r+0x54>
 800806a:	4c20      	ldr	r4, [pc, #128]	; (80080ec <_malloc_r+0xb0>)
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	b91b      	cbnz	r3, 8008078 <_malloc_r+0x3c>
 8008070:	4630      	mov	r0, r6
 8008072:	f000 f863 	bl	800813c <_sbrk_r>
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f000 f85e 	bl	800813c <_sbrk_r>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d124      	bne.n	80080ce <_malloc_r+0x92>
 8008084:	230c      	movs	r3, #12
 8008086:	6033      	str	r3, [r6, #0]
 8008088:	4630      	mov	r0, r6
 800808a:	f000 f868 	bl	800815e <__malloc_unlock>
 800808e:	e7e4      	b.n	800805a <_malloc_r+0x1e>
 8008090:	680b      	ldr	r3, [r1, #0]
 8008092:	1b5b      	subs	r3, r3, r5
 8008094:	d418      	bmi.n	80080c8 <_malloc_r+0x8c>
 8008096:	2b0b      	cmp	r3, #11
 8008098:	d90f      	bls.n	80080ba <_malloc_r+0x7e>
 800809a:	600b      	str	r3, [r1, #0]
 800809c:	50cd      	str	r5, [r1, r3]
 800809e:	18cc      	adds	r4, r1, r3
 80080a0:	4630      	mov	r0, r6
 80080a2:	f000 f85c 	bl	800815e <__malloc_unlock>
 80080a6:	f104 000b 	add.w	r0, r4, #11
 80080aa:	1d23      	adds	r3, r4, #4
 80080ac:	f020 0007 	bic.w	r0, r0, #7
 80080b0:	1ac3      	subs	r3, r0, r3
 80080b2:	d0d3      	beq.n	800805c <_malloc_r+0x20>
 80080b4:	425a      	negs	r2, r3
 80080b6:	50e2      	str	r2, [r4, r3]
 80080b8:	e7d0      	b.n	800805c <_malloc_r+0x20>
 80080ba:	428c      	cmp	r4, r1
 80080bc:	684b      	ldr	r3, [r1, #4]
 80080be:	bf16      	itet	ne
 80080c0:	6063      	strne	r3, [r4, #4]
 80080c2:	6013      	streq	r3, [r2, #0]
 80080c4:	460c      	movne	r4, r1
 80080c6:	e7eb      	b.n	80080a0 <_malloc_r+0x64>
 80080c8:	460c      	mov	r4, r1
 80080ca:	6849      	ldr	r1, [r1, #4]
 80080cc:	e7cc      	b.n	8008068 <_malloc_r+0x2c>
 80080ce:	1cc4      	adds	r4, r0, #3
 80080d0:	f024 0403 	bic.w	r4, r4, #3
 80080d4:	42a0      	cmp	r0, r4
 80080d6:	d005      	beq.n	80080e4 <_malloc_r+0xa8>
 80080d8:	1a21      	subs	r1, r4, r0
 80080da:	4630      	mov	r0, r6
 80080dc:	f000 f82e 	bl	800813c <_sbrk_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d0cf      	beq.n	8008084 <_malloc_r+0x48>
 80080e4:	6025      	str	r5, [r4, #0]
 80080e6:	e7db      	b.n	80080a0 <_malloc_r+0x64>
 80080e8:	20000a2c 	.word	0x20000a2c
 80080ec:	20000a30 	.word	0x20000a30

080080f0 <_realloc_r>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	4607      	mov	r7, r0
 80080f4:	4614      	mov	r4, r2
 80080f6:	460e      	mov	r6, r1
 80080f8:	b921      	cbnz	r1, 8008104 <_realloc_r+0x14>
 80080fa:	4611      	mov	r1, r2
 80080fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008100:	f7ff bf9c 	b.w	800803c <_malloc_r>
 8008104:	b922      	cbnz	r2, 8008110 <_realloc_r+0x20>
 8008106:	f7ff ff4b 	bl	8007fa0 <_free_r>
 800810a:	4625      	mov	r5, r4
 800810c:	4628      	mov	r0, r5
 800810e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008110:	f000 f826 	bl	8008160 <_malloc_usable_size_r>
 8008114:	42a0      	cmp	r0, r4
 8008116:	d20f      	bcs.n	8008138 <_realloc_r+0x48>
 8008118:	4621      	mov	r1, r4
 800811a:	4638      	mov	r0, r7
 800811c:	f7ff ff8e 	bl	800803c <_malloc_r>
 8008120:	4605      	mov	r5, r0
 8008122:	2800      	cmp	r0, #0
 8008124:	d0f2      	beq.n	800810c <_realloc_r+0x1c>
 8008126:	4631      	mov	r1, r6
 8008128:	4622      	mov	r2, r4
 800812a:	f7ff fc13 	bl	8007954 <memcpy>
 800812e:	4631      	mov	r1, r6
 8008130:	4638      	mov	r0, r7
 8008132:	f7ff ff35 	bl	8007fa0 <_free_r>
 8008136:	e7e9      	b.n	800810c <_realloc_r+0x1c>
 8008138:	4635      	mov	r5, r6
 800813a:	e7e7      	b.n	800810c <_realloc_r+0x1c>

0800813c <_sbrk_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4c06      	ldr	r4, [pc, #24]	; (8008158 <_sbrk_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4605      	mov	r5, r0
 8008144:	4608      	mov	r0, r1
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	f7fc f928 	bl	800439c <_sbrk>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_sbrk_r+0x1a>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	b103      	cbz	r3, 8008156 <_sbrk_r+0x1a>
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20003778 	.word	0x20003778

0800815c <__malloc_lock>:
 800815c:	4770      	bx	lr

0800815e <__malloc_unlock>:
 800815e:	4770      	bx	lr

08008160 <_malloc_usable_size_r>:
 8008160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008164:	1f18      	subs	r0, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfbc      	itt	lt
 800816a:	580b      	ldrlt	r3, [r1, r0]
 800816c:	18c0      	addlt	r0, r0, r3
 800816e:	4770      	bx	lr

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
