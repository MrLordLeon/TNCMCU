
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000907c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08009250  08009250  00019250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009920  08009920  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009928  08009928  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034d0  20000088  080099b8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003558  080099b8  00023558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014599  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a05  00000000  00000000  00034651  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00037058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00037f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000237dd  00000000  00000000  00038d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cff2  00000000  00000000  0005c52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2b2f  00000000  00000000  0006951f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c04e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a4  00000000  00000000  0013c0cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009234 	.word	0x08009234

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08009234 	.word	0x08009234

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 0, 0, 0, 0, 0, 0, 1, 1 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4936      	ldr	r1, [pc, #216]	; (8000fc8 <conv_HEX_to_BIN+0xf0>)
 8000eee:	4837      	ldr	r0, [pc, #220]	; (8000fcc <conv_HEX_to_BIN+0xf4>)
 8000ef0:	f006 fd66 	bl	80079c0 <siprintf>
    debug_print_msg();
 8000ef4:	f001 f89a 	bl	800202c <debug_print_msg>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4934      	ldr	r1, [pc, #208]	; (8000fd0 <conv_HEX_to_BIN+0xf8>)
 8000efe:	4833      	ldr	r0, [pc, #204]	; (8000fcc <conv_HEX_to_BIN+0xf4>)
 8000f00:	f006 fd5e 	bl	80079c0 <siprintf>
	debug_print_msg();
 8000f04:	f001 f892 	bl	800202c <debug_print_msg>

	//8 bits
    if(select_8_16){
 8000f08:	797b      	ldrb	r3, [r7, #5]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d02e      	beq.n	8000f6c <conv_HEX_to_BIN+0x94>
		for(int i = 0; i < 8; i++){
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e01f      	b.n	8000f54 <conv_HEX_to_BIN+0x7c>
			temp = hex_byte_in >> i;
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa42 f303 	asr.w	r3, r2, r3
 8000f1c:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	bfb8      	it	lt
 8000f28:	425b      	neglt	r3, r3
 8000f2a:	60fb      	str	r3, [r7, #12]

			sprintf(uartData, " %d ",temp);
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4929      	ldr	r1, [pc, #164]	; (8000fd4 <conv_HEX_to_BIN+0xfc>)
 8000f30:	4826      	ldr	r0, [pc, #152]	; (8000fcc <conv_HEX_to_BIN+0xf4>)
 8000f32:	f006 fd45 	bl	80079c0 <siprintf>
			debug_print_msg();
 8000f36:	f001 f879 	bl	800202c <debug_print_msg>

			*(bin_byte_out+i) = temp;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2201      	movne	r2, #1
 8000f48:	2200      	moveq	r2, #0
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	dddc      	ble.n	8000f14 <conv_HEX_to_BIN+0x3c>
		}
		sprintf(uartData, "\n ");
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <conv_HEX_to_BIN+0xf4>)
 8000f5c:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000f5e:	8811      	ldrh	r1, [r2, #0]
 8000f60:	7892      	ldrb	r2, [r2, #2]
 8000f62:	8019      	strh	r1, [r3, #0]
 8000f64:	709a      	strb	r2, [r3, #2]
		debug_print_msg();
 8000f66:	f001 f861 	bl	800202c <debug_print_msg>
		debug_print_msg();
    }

    //sprintf(uartData, "\n");
	//debug_print_msg();
}
 8000f6a:	e029      	b.n	8000fc0 <conv_HEX_to_BIN+0xe8>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	491a      	ldr	r1, [pc, #104]	; (8000fdc <conv_HEX_to_BIN+0x104>)
 8000f72:	4816      	ldr	r0, [pc, #88]	; (8000fcc <conv_HEX_to_BIN+0xf4>)
 8000f74:	f006 fd24 	bl	80079c0 <siprintf>
		debug_print_msg();
 8000f78:	f001 f858 	bl	800202c <debug_print_msg>
		for(int i = 0; i < 16; i++){
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	e013      	b.n	8000faa <conv_HEX_to_BIN+0xd2>
			temp = hex_byte_in >> i;
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	fa42 f303 	asr.w	r3, r2, r3
 8000f8a:	60fb      	str	r3, [r7, #12]
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	f1c3 030f 	rsb	r3, r3, #15
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	bf14      	ite	ne
 8000f9c:	2201      	movne	r2, #1
 8000f9e:	2200      	moveq	r2, #0
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	dde8      	ble.n	8000f82 <conv_HEX_to_BIN+0xaa>
		sprintf(uartData, "\n ");
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <conv_HEX_to_BIN+0xf4>)
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000fb4:	8811      	ldrh	r1, [r2, #0]
 8000fb6:	7892      	ldrb	r2, [r2, #2]
 8000fb8:	8019      	strh	r1, [r3, #0]
 8000fba:	709a      	strb	r2, [r3, #2]
		debug_print_msg();
 8000fbc:	f001 f836 	bl	800202c <debug_print_msg>
}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08009250 	.word	0x08009250
 8000fcc:	20001ce8 	.word	0x20001ce8
 8000fd0:	0800926c 	.word	0x0800926c
 8000fd4:	080092a0 	.word	0x080092a0
 8000fd8:	080092a8 	.word	0x080092a8
 8000fdc:	080092ac 	.word	0x080092ac

08000fe0 <conv_BIN_to_HEX>:
uint16_t conv_BIN_to_HEX(bool *bin_byte_in,bool select_8_16){
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	uint16_t acc = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	82fb      	strh	r3, [r7, #22]
	int bits = (select_8_16) ? 8 : 16;
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <conv_BIN_to_HEX+0x1a>
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	e000      	b.n	8000ffc <conv_BIN_to_HEX+0x1c>
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < bits; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	e02c      	b.n	800105e <conv_BIN_to_HEX+0x7e>
		acc += ( *(bin_byte_in+i) )? pow(2,i) : 0;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00d      	beq.n	800102c <conv_BIN_to_HEX+0x4c>
 8001010:	6938      	ldr	r0, [r7, #16]
 8001012:	f7ff faa7 	bl	8000564 <__aeabi_i2d>
 8001016:	4603      	mov	r3, r0
 8001018:	460c      	mov	r4, r1
 800101a:	ec44 3b11 	vmov	d1, r3, r4
 800101e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001070 <conv_BIN_to_HEX+0x90>
 8001022:	f007 f8af 	bl	8008184 <pow>
 8001026:	ec55 4b10 	vmov	r4, r5, d0
 800102a:	e003      	b.n	8001034 <conv_BIN_to_HEX+0x54>
 800102c:	f04f 0400 	mov.w	r4, #0
 8001030:	f04f 0500 	mov.w	r5, #0
 8001034:	8afb      	ldrh	r3, [r7, #22]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa94 	bl	8000564 <__aeabi_i2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4620      	mov	r0, r4
 8001042:	4629      	mov	r1, r5
 8001044:	f7ff f942 	bl	80002cc <__adddf3>
 8001048:	4603      	mov	r3, r0
 800104a:	460c      	mov	r4, r1
 800104c:	4618      	mov	r0, r3
 800104e:	4621      	mov	r1, r4
 8001050:	f7ff fda2 	bl	8000b98 <__aeabi_d2uiz>
 8001054:	4603      	mov	r3, r0
 8001056:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < bits; i++){
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	3301      	adds	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbce      	blt.n	8001004 <conv_BIN_to_HEX+0x24>
	}
	return acc;
 8001066:	8afb      	ldrh	r3, [r7, #22]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bdb0      	pop	{r4, r5, r7, pc}
 8001070:	00000000 	.word	0x00000000
 8001074:	40000000 	.word	0x40000000

08001078 <tx_rx>:

//General Program
//****************************************************************************************************************
void tx_rx() {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	if (changeMode) {
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <tx_rx+0x54>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00a      	beq.n	800109c <tx_rx+0x24>
		changeMode = 0;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <tx_rx+0x54>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
		setHardwareMode(!mode);
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <tx_rx+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f083 0301 	eor.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fef4 	bl	8001e84 <setHardwareMode>
	}

	//Transmission Mode
	if (mode) {
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <tx_rx+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00e      	beq.n	80010c2 <tx_rx+0x4a>
		bool packet_received = false;
 80010a4:	2300      	movs	r3, #0
 80010a6:	71fb      	strb	r3, [r7, #7]
		bool packet_converted = false;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71bb      	strb	r3, [r7, #6]

		//Run receiving KISS
		packet_received = receiving_KISS();
 80010ac:	f000 fa6c 	bl	8001588 <receiving_KISS>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]

		if(packet_received){
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <tx_rx+0x4a>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 80010ba:	f000 fb11 	bl	80016e0 <KISS_TO_AX25>
 80010be:	4603      	mov	r3, r0
 80010c0:	71bb      	strb	r3, [r7, #6]
	}

	//Receiving Mode
	else {
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000a9 	.word	0x200000a9
 80010d0:	2000298c 	.word	0x2000298c

080010d4 <clear_AX25>:
		debug_print_msg();
		output_AX25();
	}
}

void clear_AX25(){
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <clear_AX25+0x4c>)
 80010dc:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <clear_AX25+0x50>)
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <clear_AX25+0x54>)
 80010e2:	4615      	mov	r5, r2
 80010e4:	461c      	mov	r4, r3
 80010e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e8:	6028      	str	r0, [r5, #0]
 80010ea:	6069      	str	r1, [r5, #4]
 80010ec:	60aa      	str	r2, [r5, #8]
 80010ee:	60eb      	str	r3, [r5, #12]
 80010f0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010f2:	6128      	str	r0, [r5, #16]
 80010f4:	6169      	str	r1, [r5, #20]
 80010f6:	61aa      	str	r2, [r5, #24]
	debug_print_msg();
 80010f8:	f000 ff98 	bl	800202c <debug_print_msg>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fc2f 	bl	8007968 <memcpy>
	local_packet->got_packet = false;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001110:	3309      	adds	r3, #9
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
 800111e:	bf00      	nop
 8001120:	200000e4 	.word	0x200000e4
 8001124:	20001ce8 	.word	0x20001ce8
 8001128:	08009320 	.word	0x08009320

0800112c <output_HEX>:

void output_HEX() {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <output_HEX+0x68>)
 8001134:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "\n");
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <output_HEX+0x6c>)
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <output_HEX+0x70>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800113e:	f000 ff75 	bl	800202c <debug_print_msg>

	for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e016      	b.n	8001176 <output_HEX+0x4a>
		sprintf(uartData, "%x",local_UART_packet->HEX_KISS_PACKET[i]);
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	330e      	adds	r3, #14
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4912      	ldr	r1, [pc, #72]	; (80011a0 <output_HEX+0x74>)
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <output_HEX+0x6c>)
 8001158:	f006 fc32 	bl	80079c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800115c:	480e      	ldr	r0, [pc, #56]	; (8001198 <output_HEX+0x6c>)
 800115e:	f7ff f857 	bl	8000210 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	230a      	movs	r3, #10
 8001168:	490b      	ldr	r1, [pc, #44]	; (8001198 <output_HEX+0x6c>)
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <output_HEX+0x78>)
 800116c:	f005 fce7 	bl	8006b3e <HAL_UART_Transmit>
	for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbe3      	blt.n	8001148 <output_HEX+0x1c>
	}

	sprintf(uartData, "\n");
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <output_HEX+0x6c>)
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <output_HEX+0x70>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8001188:	f000 ff50 	bl	800202c <debug_print_msg>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20001450 	.word	0x20001450
 8001198:	20001ce8 	.word	0x20001ce8
 800119c:	0800933c 	.word	0x0800933c
 80011a0:	08009340 	.word	0x08009340
 80011a4:	200029e4 	.word	0x200029e4

080011a8 <receiving_AX25>:

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <receiving_AX25+0x54>)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <receiving_AX25+0x58>)
 80011b2:	4615      	mov	r5, r2
 80011b4:	461c      	mov	r4, r3
 80011b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b8:	6028      	str	r0, [r5, #0]
 80011ba:	6069      	str	r1, [r5, #4]
 80011bc:	60aa      	str	r2, [r5, #8]
 80011be:	60eb      	str	r3, [r5, #12]
 80011c0:	cc03      	ldmia	r4!, {r0, r1}
 80011c2:	6128      	str	r0, [r5, #16]
 80011c4:	6169      	str	r1, [r5, #20]
 80011c6:	7823      	ldrb	r3, [r4, #0]
 80011c8:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 80011ca:	f000 ff2f 	bl	800202c <debug_print_msg>
	struct PACKET_STRUCT* local_packet = &global_packet;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <receiving_AX25+0x5c>)
 80011d0:	607b      	str	r3, [r7, #4]

	//Validate packet
	bool AX25_IsValid = AX25_Packet_Validate();
 80011d2:	f000 f869 	bl	80012a8 <AX25_Packet_Validate>
 80011d6:	4603      	mov	r3, r0
 80011d8:	70fb      	strb	r3, [r7, #3]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		debug_print_msg();

	if(AX25_IsValid){
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <receiving_AX25+0x48>
		//Put data into KISS format and buffer
		AX25_TO_KISS();
 80011e0:	f000 f992 	bl	8001508 <AX25_TO_KISS>

		//Put data into HEX buffer
		KISS_TO_HEX();
 80011e4:	f000 fc72 	bl	8001acc <KISS_TO_HEX>

		//Transmit KISS Packet that has been generated
		output_HEX();
 80011e8:	f7ff ffa0 	bl	800112c <output_HEX>

		//Clear AX.25 buffer
		clear_AX25();
 80011ec:	f7ff ff72 	bl	80010d4 <clear_AX25>
//		clear_KISS();
//		clear_HEX();
	}
}
 80011f0:	bf00      	nop
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20001ce8 	.word	0x20001ce8
 8001200:	08009344 	.word	0x08009344
 8001204:	200000e4 	.word	0x200000e4

08001208 <slide_bits>:

void slide_bits(bool* array,int bits_left){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	memmove(array,array+1,bits_left*bool_size);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f006 fbaf 	bl	800797e <memmove>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <remove_bit_stuffing>:

void remove_bit_stuffing(){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <remove_bit_stuffing+0x78>)
 8001230:	607b      	str	r3, [r7, #4]
//	sprintf(uartData, "Removing bit stuffed zeros\n");
//	debug_print_msg();

	int ones_count = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
	bool curr;
	for(int i = 0;i < rxBit_count;i++){
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	e028      	b.n	800128e <remove_bit_stuffing+0x66>
		curr = local_packet->AX25_PACKET[i]; //iterate through all data received before seperating into subfields
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	70fb      	strb	r3, [r7, #3]
		if(curr){ //current bit is a 1
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <remove_bit_stuffing+0x32>
			ones_count++;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
			if(ones_count > 5){
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b05      	cmp	r3, #5
 8001256:	dd17      	ble.n	8001288 <remove_bit_stuffing+0x60>
//				sprintf(uartData, "ERROR: SHOULD HAVE BEEN A ZERO AFTER FIFTH CONTIGIOUS ONE!\n");
//				debug_print_msg();
				return;
 8001258:	e01e      	b.n	8001298 <remove_bit_stuffing+0x70>
			}
		}
		else{
			if(ones_count >= 5){
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b04      	cmp	r3, #4
 800125e:	dd11      	ble.n	8001284 <remove_bit_stuffing+0x5c>
				slide_bits(&local_packet->AX25_PACKET[i],rxBit_count-i);
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	18d0      	adds	r0, r2, r3
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <remove_bit_stuffing+0x7c>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff ffca 	bl	8001208 <slide_bits>
				i--;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
				rxBit_count--;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <remove_bit_stuffing+0x7c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <remove_bit_stuffing+0x7c>)
 8001282:	6013      	str	r3, [r2, #0]
//				sprintf(uartData, "REMOVED BIT STUFFED ZERO!\n");
//				debug_print_msg();
			}
			ones_count = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
	for(int i = 0;i < rxBit_count;i++){
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3301      	adds	r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <remove_bit_stuffing+0x7c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbd1      	blt.n	800123c <remove_bit_stuffing+0x14>
		}
	}
	//transmit kiss
}
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000e4 	.word	0x200000e4
 80012a4:	200000a4 	.word	0x200000a4

080012a8 <AX25_Packet_Validate>:

bool AX25_Packet_Validate(){
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <AX25_Packet_Validate+0xbc>)
 80012b0:	60fb      	str	r3, [r7, #12]
	int fcs_val = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData,"Received packet bit count: %d\n",local_packet->byte_cnt*8);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80012bc:	330c      	adds	r3, #12
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	461a      	mov	r2, r3
 80012c4:	4928      	ldr	r1, [pc, #160]	; (8001368 <AX25_Packet_Validate+0xc0>)
 80012c6:	4829      	ldr	r0, [pc, #164]	; (800136c <AX25_Packet_Validate+0xc4>)
 80012c8:	f006 fb7a 	bl	80079c0 <siprintf>
	debug_print_msg();
 80012cc:	f000 feae 	bl	800202c <debug_print_msg>

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <AX25_Packet_Validate+0xc8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b77      	cmp	r3, #119	; 0x77
 80012d6:	dc15      	bgt.n	8001304 <AX25_Packet_Validate+0x5c>
		sprintf(uartData,"Trash Packet, not enough bits\n");
 80012d8:	4a24      	ldr	r2, [pc, #144]	; (800136c <AX25_Packet_Validate+0xc4>)
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <AX25_Packet_Validate+0xcc>)
 80012dc:	4615      	mov	r5, r2
 80012de:	461c      	mov	r4, r3
 80012e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e2:	6028      	str	r0, [r5, #0]
 80012e4:	6069      	str	r1, [r5, #4]
 80012e6:	60aa      	str	r2, [r5, #8]
 80012e8:	60eb      	str	r3, [r5, #12]
 80012ea:	cc07      	ldmia	r4!, {r0, r1, r2}
 80012ec:	6128      	str	r0, [r5, #16]
 80012ee:	6169      	str	r1, [r5, #20]
 80012f0:	61aa      	str	r2, [r5, #24]
 80012f2:	8823      	ldrh	r3, [r4, #0]
 80012f4:	78a2      	ldrb	r2, [r4, #2]
 80012f6:	83ab      	strh	r3, [r5, #28]
 80012f8:	4613      	mov	r3, r2
 80012fa:	77ab      	strb	r3, [r5, #30]
		debug_print_msg();
 80012fc:	f000 fe96 	bl	800202c <debug_print_msg>
		return false;
 8001300:	2300      	movs	r3, #0
 8001302:	e02b      	b.n	800135c <AX25_Packet_Validate+0xb4>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <AX25_Packet_Validate+0xc8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	2b00      	cmp	r3, #0
 800130e:	d019      	beq.n	8001344 <AX25_Packet_Validate+0x9c>
		sprintf(uartData,"Trash Packet, not octet aligned\n");
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <AX25_Packet_Validate+0xc4>)
 8001312:	4a19      	ldr	r2, [pc, #100]	; (8001378 <AX25_Packet_Validate+0xd0>)
 8001314:	4614      	mov	r4, r2
 8001316:	469c      	mov	ip, r3
 8001318:	f104 0e20 	add.w	lr, r4, #32
 800131c:	4665      	mov	r5, ip
 800131e:	4626      	mov	r6, r4
 8001320:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001322:	6028      	str	r0, [r5, #0]
 8001324:	6069      	str	r1, [r5, #4]
 8001326:	60aa      	str	r2, [r5, #8]
 8001328:	60eb      	str	r3, [r5, #12]
 800132a:	3410      	adds	r4, #16
 800132c:	f10c 0c10 	add.w	ip, ip, #16
 8001330:	4574      	cmp	r4, lr
 8001332:	d1f3      	bne.n	800131c <AX25_Packet_Validate+0x74>
 8001334:	4663      	mov	r3, ip
 8001336:	4622      	mov	r2, r4
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	701a      	strb	r2, [r3, #0]
		debug_print_msg();
 800133c:	f000 fe76 	bl	800202c <debug_print_msg>
		return false;
 8001340:	2300      	movs	r3, #0
 8001342:	e00b      	b.n	800135c <AX25_Packet_Validate+0xb4>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		uint16_t local_info_len = rxBit_count-INFO_offset_woFlag;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <AX25_Packet_Validate+0xc8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	3b50      	subs	r3, #80	; 0x50
 800134c:	80fb      	strh	r3, [r7, #6]
		set_packet_pointer_AX25(local_info_len);
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f813 	bl	800137c <set_packet_pointer_AX25>
//		print_AX25();

		return crc_check();
 8001356:	f000 fd53 	bl	8001e00 <crc_check>
 800135a:	4603      	mov	r3, r0
	}
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001364:	200000e4 	.word	0x200000e4
 8001368:	08009360 	.word	0x08009360
 800136c:	20001ce8 	.word	0x20001ce8
 8001370:	200000a4 	.word	0x200000a4
 8001374:	08009380 	.word	0x08009380
 8001378:	080093a0 	.word	0x080093a0

0800137c <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(int info_len_in){
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001384:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <set_packet_pointer_AX25+0x16c>)
 8001386:	617b      	str	r3, [r7, #20]
	int not_info = FCS_len;
 8001388:	2310      	movs	r3, #16
 800138a:	613b      	str	r3, [r7, #16]
	local_packet->Info_Len = info_len_in;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 8001396:	4b55      	ldr	r3, [pc, #340]	; (80014ec <set_packet_pointer_AX25+0x170>)
 8001398:	4a55      	ldr	r2, [pc, #340]	; (80014f0 <set_packet_pointer_AX25+0x174>)
 800139a:	4614      	mov	r4, r2
 800139c:	469c      	mov	ip, r3
 800139e:	f104 0e20 	add.w	lr, r4, #32
 80013a2:	4665      	mov	r5, ip
 80013a4:	4626      	mov	r6, r4
 80013a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a8:	6028      	str	r0, [r5, #0]
 80013aa:	6069      	str	r1, [r5, #4]
 80013ac:	60aa      	str	r2, [r5, #8]
 80013ae:	60eb      	str	r3, [r5, #12]
 80013b0:	3410      	adds	r4, #16
 80013b2:	f10c 0c10 	add.w	ip, ip, #16
 80013b6:	4574      	cmp	r4, lr
 80013b8:	d1f3      	bne.n	80013a2 <set_packet_pointer_AX25+0x26>
 80013ba:	4663      	mov	r3, ip
 80013bc:	4622      	mov	r2, r4
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	701a      	strb	r2, [r3, #0]
	debug_print_msg();
 80013c2:	f000 fe33 	bl	800202c <debug_print_msg>
	bool *curr_mem = &local_packet->AX25_PACKET;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Setting pointer for address\n");
 80013ca:	4a48      	ldr	r2, [pc, #288]	; (80014ec <set_packet_pointer_AX25+0x170>)
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <set_packet_pointer_AX25+0x178>)
 80013ce:	4615      	mov	r5, r2
 80013d0:	461c      	mov	r4, r3
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	6028      	str	r0, [r5, #0]
 80013d6:	6069      	str	r1, [r5, #4]
 80013d8:	60aa      	str	r2, [r5, #8]
 80013da:	60eb      	str	r3, [r5, #12]
 80013dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80013de:	6128      	str	r0, [r5, #16]
 80013e0:	6169      	str	r1, [r5, #20]
 80013e2:	61aa      	str	r2, [r5, #24]
 80013e4:	7823      	ldrb	r3, [r4, #0]
 80013e6:	772b      	strb	r3, [r5, #28]
	debug_print_msg();
 80013e8:	f000 fe20 	bl	800202c <debug_print_msg>
	local_packet->address = curr_mem;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80013f2:	3310      	adds	r3, #16
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3370      	adds	r3, #112	; 0x70
 80013fc:	60fb      	str	r3, [r7, #12]
	not_info += address_len;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	3370      	adds	r3, #112	; 0x70
 8001402:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for control\n");
 8001404:	4a39      	ldr	r2, [pc, #228]	; (80014ec <set_packet_pointer_AX25+0x170>)
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <set_packet_pointer_AX25+0x17c>)
 8001408:	4615      	mov	r5, r2
 800140a:	461c      	mov	r4, r3
 800140c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140e:	6028      	str	r0, [r5, #0]
 8001410:	6069      	str	r1, [r5, #4]
 8001412:	60aa      	str	r2, [r5, #8]
 8001414:	60eb      	str	r3, [r5, #12]
 8001416:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001418:	6128      	str	r0, [r5, #16]
 800141a:	6169      	str	r1, [r5, #20]
 800141c:	61aa      	str	r2, [r5, #24]
 800141e:	7823      	ldrb	r3, [r4, #0]
 8001420:	772b      	strb	r3, [r5, #28]
	debug_print_msg();
 8001422:	f000 fe03 	bl	800202c <debug_print_msg>
	local_packet->control = curr_mem;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800142c:	3314      	adds	r3, #20
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3308      	adds	r3, #8
 8001436:	60fb      	str	r3, [r7, #12]
	not_info += control_len;
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	3308      	adds	r3, #8
 800143c:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for PID\n");
 800143e:	4a2b      	ldr	r2, [pc, #172]	; (80014ec <set_packet_pointer_AX25+0x170>)
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <set_packet_pointer_AX25+0x180>)
 8001442:	4615      	mov	r5, r2
 8001444:	461c      	mov	r4, r3
 8001446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001448:	6028      	str	r0, [r5, #0]
 800144a:	6069      	str	r1, [r5, #4]
 800144c:	60aa      	str	r2, [r5, #8]
 800144e:	60eb      	str	r3, [r5, #12]
 8001450:	cc03      	ldmia	r4!, {r0, r1}
 8001452:	6128      	str	r0, [r5, #16]
 8001454:	6169      	str	r1, [r5, #20]
 8001456:	7823      	ldrb	r3, [r4, #0]
 8001458:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 800145a:	f000 fde7 	bl	800202c <debug_print_msg>
	local_packet->PID = curr_mem;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001464:	3318      	adds	r3, #24
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3308      	adds	r3, #8
 800146e:	60fb      	str	r3, [r7, #12]
	not_info += PID_len;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	3308      	adds	r3, #8
 8001474:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for Info\n");
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <set_packet_pointer_AX25+0x170>)
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <set_packet_pointer_AX25+0x184>)
 800147a:	4615      	mov	r5, r2
 800147c:	461c      	mov	r4, r3
 800147e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001480:	6028      	str	r0, [r5, #0]
 8001482:	6069      	str	r1, [r5, #4]
 8001484:	60aa      	str	r2, [r5, #8]
 8001486:	60eb      	str	r3, [r5, #12]
 8001488:	cc03      	ldmia	r4!, {r0, r1}
 800148a:	6128      	str	r0, [r5, #16]
 800148c:	6169      	str	r1, [r5, #20]
 800148e:	8823      	ldrh	r3, [r4, #0]
 8001490:	832b      	strh	r3, [r5, #24]
	debug_print_msg();
 8001492:	f000 fdcb 	bl	800202c <debug_print_msg>
	local_packet->Info = curr_mem;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800149c:	331c      	adds	r3, #28
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Setting pointer for FCS\n");
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <set_packet_pointer_AX25+0x170>)
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <set_packet_pointer_AX25+0x188>)
 80014b6:	4615      	mov	r5, r2
 80014b8:	461c      	mov	r4, r3
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	6028      	str	r0, [r5, #0]
 80014be:	6069      	str	r1, [r5, #4]
 80014c0:	60aa      	str	r2, [r5, #8]
 80014c2:	60eb      	str	r3, [r5, #12]
 80014c4:	cc03      	ldmia	r4!, {r0, r1}
 80014c6:	6128      	str	r0, [r5, #16]
 80014c8:	6169      	str	r1, [r5, #20]
 80014ca:	7823      	ldrb	r3, [r4, #0]
 80014cc:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 80014ce:	f000 fdad 	bl	800202c <debug_print_msg>
	local_packet->FCS = curr_mem;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80014d8:	3304      	adds	r3, #4
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000e4 	.word	0x200000e4
 80014ec:	20001ce8 	.word	0x20001ce8
 80014f0:	080093c4 	.word	0x080093c4
 80014f4:	080093e8 	.word	0x080093e8
 80014f8:	08009408 	.word	0x08009408
 80014fc:	08009428 	.word	0x08009428
 8001500:	08009444 	.word	0x08009444
 8001504:	08009460 	.word	0x08009460

08001508 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <AX25_TO_KISS+0x78>)
 8001510:	607b      	str	r3, [r7, #4]
	bool *curr_mem = local_packet->KISS_PACKET;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001518:	603b      	str	r3, [r7, #0]

	//Put a flag into KISS
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4919      	ldr	r1, [pc, #100]	; (8001584 <AX25_TO_KISS+0x7c>)
 800151e:	461a      	mov	r2, r3
 8001520:	460b      	mov	r3, r1
 8001522:	cb03      	ldmia	r3!, {r0, r1}
 8001524:	6010      	str	r0, [r2, #0]
 8001526:	6051      	str	r1, [r2, #4]
	curr_mem += FLAG_SIZE;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	3308      	adds	r3, #8
 800152c:	603b      	str	r3, [r7, #0]

	//Set port info
	memset(curr_mem,0,8);
 800152e:	2208      	movs	r2, #8
 8001530:	2100      	movs	r1, #0
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f006 fa3c 	bl	80079b0 <memset>
	curr_mem += 8;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3308      	adds	r3, #8
 800153c:	603b      	str	r3, [r7, #0]

	//Put AX25 packet into KISS w/o the FCS, HAVE AN ADDED 8 due to port info
	memcpy(curr_mem,local_packet->AX25_PACKET,(local_packet->byte_cnt*8)-FCS_len);
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001546:	330c      	adds	r3, #12
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3b02      	subs	r3, #2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	461a      	mov	r2, r3
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f006 fa09 	bl	8007968 <memcpy>
	curr_mem += (local_packet->byte_cnt*8)-FCS_len;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800155c:	330c      	adds	r3, #12
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	3b10      	subs	r3, #16
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	603b      	str	r3, [r7, #0]

	//Put a flag into KISS
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4905      	ldr	r1, [pc, #20]	; (8001584 <AX25_TO_KISS+0x7c>)
 800156e:	461a      	mov	r2, r3
 8001570:	460b      	mov	r3, r1
 8001572:	cb03      	ldmia	r3!, {r0, r1}
 8001574:	6010      	str	r0, [r2, #0]
 8001576:	6051      	str	r1, [r2, #4]
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000e4 	.word	0x200000e4
 8001584:	20000000 	.word	0x20000000

08001588 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <receiving_KISS+0xb0>)
 8001590:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <receiving_KISS+0xb4>)
 8001594:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	7b5b      	ldrb	r3, [r3, #13]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d046      	beq.n	800162c <receiving_KISS+0xa4>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4926      	ldr	r1, [pc, #152]	; (8001640 <receiving_KISS+0xb8>)
 80015a6:	4827      	ldr	r0, [pc, #156]	; (8001644 <receiving_KISS+0xbc>)
 80015a8:	f006 fa0a 	bl	80079c0 <siprintf>
		debug_print_msg();
 80015ac:	f000 fd3e 	bl	800202c <debug_print_msg>

		int byte_cnt = local_UART_packet->received_byte_cnt;
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e017      	b.n	80015ec <receiving_KISS+0x64>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[i];
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4413      	add	r3, r2
 80015c2:	330e      	adds	r3, #14
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	3307      	adds	r3, #7
 80015d6:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//debug_print_msg();

			//Selecting 8 bit
			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	2201      	movs	r2, #1
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fc79 	bl	8000ed8 <conv_HEX_to_BIN>
		for(int i = 0;i < byte_cnt;i++){
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbe3      	blt.n	80015bc <receiving_KISS+0x34>
		}

//		local_UART_packet->got_packet = false;
		local_packet->got_packet = true;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80015fa:	3309      	adds	r3, #9
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800160a:	330c      	adds	r3, #12
 800160c:	601a      	str	r2, [r3, #0]

		print_array_octet(local_packet->KISS_PACKET,local_packet->byte_cnt*8);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800161a:	330c      	adds	r3, #12
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f001 f998 	bl	8002958 <print_array_octet>

		return true;
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <receiving_KISS+0xa6>
	}
	return false;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20001450 	.word	0x20001450
 800163c:	200000e4 	.word	0x200000e4
 8001640:	0800947c 	.word	0x0800947c
 8001644:	20001ce8 	.word	0x20001ce8

08001648 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(int info_len_in){
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <set_packet_pointer_KISS+0x8c>)
 8001652:	60fb      	str	r3, [r7, #12]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 8001654:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <set_packet_pointer_KISS+0x90>)
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <set_packet_pointer_KISS+0x94>)
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165e:	6020      	str	r0, [r4, #0]
 8001660:	6061      	str	r1, [r4, #4]
 8001662:	60a2      	str	r2, [r4, #8]
 8001664:	60e3      	str	r3, [r4, #12]
 8001666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001668:	6120      	str	r0, [r4, #16]
 800166a:	6161      	str	r1, [r4, #20]
 800166c:	61a2      	str	r2, [r4, #24]
 800166e:	61e3      	str	r3, [r4, #28]
	debug_print_msg();
 8001670:	f000 fcdc 	bl	800202c <debug_print_msg>

	//Update info len since we received a message over UART
	local_packet->Info_Len =info_len_in;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
//	sprintf(uartData, "Setting info length to %d\n",local_packet->Info_Len);
//	debug_print_msg();

	bool *curr_mem = (local_packet->KISS_PACKET+(8*2));//starting kiss packet skipping 2 bytes of flag and port info
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001684:	3310      	adds	r3, #16
 8001686:	60bb      	str	r3, [r7, #8]

	//Assign Address Pointer
	local_packet->address = curr_mem;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800168e:	3310      	adds	r3, #16
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	3370      	adds	r3, #112	; 0x70
 8001698:	60bb      	str	r3, [r7, #8]

	//Assign Control Pointer
	local_packet->control = curr_mem;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016a0:	3314      	adds	r3, #20
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3308      	adds	r3, #8
 80016aa:	60bb      	str	r3, [r7, #8]

	//Assign PID Pointer
	local_packet->PID = curr_mem;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016b2:	3318      	adds	r3, #24
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3308      	adds	r3, #8
 80016bc:	60bb      	str	r3, [r7, #8]

	//Assign INFO Pointer
	local_packet->Info = curr_mem;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016c4:	331c      	adds	r3, #28
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200000e4 	.word	0x200000e4
 80016d8:	20001ce8 	.word	0x20001ce8
 80016dc:	080094b0 	.word	0x080094b0

080016e0 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <KISS_TO_AX25+0xcc>)
 80016e8:	60fb      	str	r3, [r7, #12]

	int local_info_len = local_packet->byte_cnt*8-INFO_offset_wFlag_woFCS;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80016f0:	330c      	adds	r3, #12
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3b13      	subs	r3, #19
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	60bb      	str	r3, [r7, #8]

	set_packet_pointer_KISS(local_info_len);
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f7ff ffa4 	bl	8001648 <set_packet_pointer_KISS>
	print_KISS();
 8001700:	f000 ffc6 	bl	8002690 <print_KISS>

	bool* cpy_from_ptr = local_packet->KISS_PACKET+16;//starting kiss packet skipping 2 bytes
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 800170a:	3310      	adds	r3, #16
 800170c:	607b      	str	r3, [r7, #4]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25(local_info_len);
 800170e:	68b8      	ldr	r0, [r7, #8]
 8001710:	f7ff fe34 	bl	800137c <set_packet_pointer_AX25>

	//Copy address
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800171a:	3310      	adds	r3, #16
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2270      	movs	r2, #112	; 0x70
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f006 f920 	bl	8007968 <memcpy>
	cpy_from_ptr += address_len;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3370      	adds	r3, #112	; 0x70
 800172c:	607b      	str	r3, [r7, #4]

	//Copy control
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001734:	3314      	adds	r3, #20
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2208      	movs	r2, #8
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	f006 f913 	bl	8007968 <memcpy>
	cpy_from_ptr += control_len;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3308      	adds	r3, #8
 8001746:	607b      	str	r3, [r7, #4]

	//Copy PID
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800174e:	3318      	adds	r3, #24
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2208      	movs	r2, #8
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	f006 f906 	bl	8007968 <memcpy>
	cpy_from_ptr += PID_len;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3308      	adds	r3, #8
 8001760:	607b      	str	r3, [r7, #4]

	//Info
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001768:	331c      	adds	r3, #28
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f006 f8f6 	bl	8007968 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3380      	adds	r3, #128	; 0x80
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <KISS_TO_AX25+0xd0>)
 8001788:	6013      	str	r3, [r2, #0]
	crc_generate();
 800178a:	f000 fa77 	bl	8001c7c <crc_generate>
	print_AX25();
 800178e:	f000 fc5f 	bl	8002050 <print_AX25>
//	}
//	sprintf(uartData, "\n");
//	debug_print_msg();

	//BIT STUFFING NEEDED
	bit_stuff_fields();
 8001792:	f000 f80f 	bl	80017b4 <bit_stuff_fields>
//		debug_print_msg();
//	}
//	sprintf(uartData, "\n");
//	debug_print_msg();

	rxBit_count = 0;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <KISS_TO_AX25+0xd0>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
//	Print the ax25 packet
	print_outAX25();
 800179c:	f000 fd7a 	bl	8002294 <print_outAX25>
	return true; //valid packet
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200000e4 	.word	0x200000e4
 80017b0:	200000a4 	.word	0x200000a4

080017b4 <bit_stuff_fields>:

void bit_stuff_fields(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 80017ba:	4b84      	ldr	r3, [pc, #528]	; (80019cc <bit_stuff_fields+0x218>)
 80017bc:	60fb      	str	r3, [r7, #12]
	int ax25_len = rxBit_count + FCS_len;
 80017be:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <bit_stuff_fields+0x21c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3310      	adds	r3, #16
 80017c4:	60bb      	str	r3, [r7, #8]
	int ones_count = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
	ones_count = bitstuffing(local_packet->address,address_len,ax25_len, ones_count, &(local_packet->stuffed_address));
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80017d0:	3310      	adds	r3, #16
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017da:	3310      	adds	r3, #16
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	2170      	movs	r1, #112	; 0x70
 80017e4:	f000 f910 	bl	8001a08 <bitstuffing>
 80017e8:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_address;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80017f0:	3304      	adds	r3, #4
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017fa:	3310      	adds	r3, #16
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	441a      	add	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001806:	3304      	adds	r3, #4
 8001808:	601a      	str	r2, [r3, #0]
	ax25_len -= address_len;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3b70      	subs	r3, #112	; 0x70
 800180e:	60bb      	str	r3, [r7, #8]

	local_packet->control += local_packet->bit_stuffed_zeros;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001816:	3314      	adds	r3, #20
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001820:	3304      	adds	r3, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	441a      	add	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800182c:	3314      	adds	r3, #20
 800182e:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->control,control_len,ax25_len, ones_count, &(local_packet->stuffed_control));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001836:	3314      	adds	r3, #20
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001840:	3314      	adds	r3, #20
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	2108      	movs	r1, #8
 800184a:	f000 f8dd 	bl	8001a08 <bitstuffing>
 800184e:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_control;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001856:	3304      	adds	r3, #4
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001860:	3314      	adds	r3, #20
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	441a      	add	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800186c:	3304      	adds	r3, #4
 800186e:	601a      	str	r2, [r3, #0]
	ax25_len -= control_len;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	3b08      	subs	r3, #8
 8001874:	60bb      	str	r3, [r7, #8]

	local_packet->PID += local_packet->bit_stuffed_zeros;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800187c:	3318      	adds	r3, #24
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	441a      	add	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001892:	3318      	adds	r3, #24
 8001894:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->PID,PID_len,ax25_len, ones_count, &(local_packet->stuffed_PID));
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800189c:	3318      	adds	r3, #24
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018a6:	3318      	adds	r3, #24
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	2108      	movs	r1, #8
 80018b0:	f000 f8aa 	bl	8001a08 <bitstuffing>
 80018b4:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_PID;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80018bc:	3304      	adds	r3, #4
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018c6:	3318      	adds	r3, #24
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	441a      	add	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80018d2:	3304      	adds	r3, #4
 80018d4:	601a      	str	r2, [r3, #0]
	ax25_len -= PID_len;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b08      	subs	r3, #8
 80018da:	60bb      	str	r3, [r7, #8]

	local_packet->Info += local_packet->bit_stuffed_zeros;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018e2:	331c      	adds	r3, #28
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80018ec:	3304      	adds	r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	441a      	add	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018f8:	331c      	adds	r3, #28
 80018fa:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->Info,local_packet->Info_Len, ax25_len, ones_count, &(local_packet->stuffed_Info));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001902:	331c      	adds	r3, #28
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001914:	331c      	adds	r3, #28
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f000 f874 	bl	8001a08 <bitstuffing>
 8001920:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_Info;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001928:	3304      	adds	r3, #4
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001932:	331c      	adds	r3, #28
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	441a      	add	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800193e:	3304      	adds	r3, #4
 8001940:	601a      	str	r2, [r3, #0]
	ax25_len -= local_packet->Info_Len;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	60bb      	str	r3, [r7, #8]

	local_packet->FCS += local_packet->bit_stuffed_zeros;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001956:	3304      	adds	r3, #4
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001960:	3304      	adds	r3, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	441a      	add	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800196c:	3304      	adds	r3, #4
 800196e:	601a      	str	r2, [r3, #0]
	bitstuffing(local_packet->FCS,FCS_len, ax25_len, ones_count, &(local_packet->stuffed_FCS));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001976:	3304      	adds	r3, #4
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	2110      	movs	r1, #16
 8001988:	f000 f83e 	bl	8001a08 <bitstuffing>
	local_packet->bit_stuffed_zeros += local_packet->stuffed_FCS;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001992:	3304      	adds	r3, #4
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	441a      	add	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80019a6:	3304      	adds	r3, #4
 80019a8:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "bit stuffed zeros = %d\n",local_packet->bit_stuffed_zeros);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4907      	ldr	r1, [pc, #28]	; (80019d4 <bit_stuff_fields+0x220>)
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <bit_stuff_fields+0x224>)
 80019ba:	f006 f801 	bl	80079c0 <siprintf>
	debug_print_msg();
 80019be:	f000 fb35 	bl	800202c <debug_print_msg>
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000e4 	.word	0x200000e4
 80019d0:	200000a4 	.word	0x200000a4
 80019d4:	080094d0 	.word	0x080094d0
 80019d8:	20001ce8 	.word	0x20001ce8

080019dc <bit_stuff>:

void bit_stuff(bool* array,int bits_left){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	1c98      	adds	r0, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3301      	adds	r3, #1
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f005 ffc4 	bl	800797e <memmove>
	*(array+1) = false;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <bitstuffing>:

int bitstuffing(bool* packet,int len,int bits_left, int ones_count,int *stuff){
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <bitstuffing+0xbc>)
 8001a18:	4a2b      	ldr	r2, [pc, #172]	; (8001ac8 <bitstuffing+0xc0>)
 8001a1a:	4614      	mov	r4, r2
 8001a1c:	469c      	mov	ip, r3
 8001a1e:	f104 0e20 	add.w	lr, r4, #32
 8001a22:	4665      	mov	r5, ip
 8001a24:	4626      	mov	r6, r4
 8001a26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a28:	6028      	str	r0, [r5, #0]
 8001a2a:	6069      	str	r1, [r5, #4]
 8001a2c:	60aa      	str	r2, [r5, #8]
 8001a2e:	60eb      	str	r3, [r5, #12]
 8001a30:	3410      	adds	r4, #16
 8001a32:	f10c 0c10 	add.w	ip, ip, #16
 8001a36:	4574      	cmp	r4, lr
 8001a38:	d1f3      	bne.n	8001a22 <bitstuffing+0x1a>
 8001a3a:	4663      	mov	r3, ip
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	6810      	ldr	r0, [r2, #0]
 8001a40:	6018      	str	r0, [r3, #0]
 8001a42:	7912      	ldrb	r2, [r2, #4]
 8001a44:	711a      	strb	r2, [r3, #4]
	debug_print_msg();
 8001a46:	f000 faf1 	bl	800202c <debug_print_msg>

	int bit_stuff_count = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
	bool *curr_mem = packet;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	617b      	str	r3, [r7, #20]
	int left;

	//Increment through array
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	e027      	b.n	8001aa8 <bitstuffing+0xa0>
		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01c      	beq.n	8001a9e <bitstuffing+0x96>
        	//Inc ones count
        	ones_count++;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	603b      	str	r3, [r7, #0]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d118      	bne.n	8001aa2 <bitstuffing+0x9a>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	441a      	add	r2, r3
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
                bit_stuff(curr_mem+i,left);
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4413      	add	r3, r2
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ffa8 	bl	80019dc <bit_stuff>

                bit_stuff_count++;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
                ones_count = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
                i++;
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e001      	b.n	8001aa2 <bitstuffing+0x9a>
            }
        }
        else{
        	ones_count = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbd1      	blt.n	8001a58 <bitstuffing+0x50>
        }
	}
	*stuff = bit_stuff_count;
 8001ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	601a      	str	r2, [r3, #0]
	return ones_count;
 8001aba:	683b      	ldr	r3, [r7, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3724      	adds	r7, #36	; 0x24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac4:	20001ce8 	.word	0x20001ce8
 8001ac8:	080094e8 	.word	0x080094e8

08001acc <KISS_TO_HEX>:

void KISS_TO_HEX(){
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <KISS_TO_HEX+0xb4>)
 8001ad4:	613b      	str	r3, [r7, #16]
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <KISS_TO_HEX+0xb8>)
 8001ad8:	60fb      	str	r3, [r7, #12]

	local_UART_packet->received_byte_cnt = local_packet->byte_cnt+1;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
	bool *curr_mem = local_packet->KISS_PACKET;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001af0:	60bb      	str	r3, [r7, #8]
	uint8_t curr_val;

	sprintf(uartData, "Filling HEX buffer:\n");
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <KISS_TO_HEX+0xbc>)
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <KISS_TO_HEX+0xc0>)
 8001af6:	4615      	mov	r5, r2
 8001af8:	461c      	mov	r4, r3
 8001afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afc:	6028      	str	r0, [r5, #0]
 8001afe:	6069      	str	r1, [r5, #4]
 8001b00:	60aa      	str	r2, [r5, #8]
 8001b02:	60eb      	str	r3, [r5, #12]
 8001b04:	6820      	ldr	r0, [r4, #0]
 8001b06:	6128      	str	r0, [r5, #16]
 8001b08:	7923      	ldrb	r3, [r4, #4]
 8001b0a:	752b      	strb	r3, [r5, #20]
	debug_print_msg();
 8001b0c:	f000 fa8e 	bl	800202c <debug_print_msg>

    for(int i = 0; i < local_UART_packet->received_byte_cnt; i++){
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e01b      	b.n	8001b4e <KISS_TO_HEX+0x82>
    	curr_val = conv_BIN_to_HEX(curr_mem+(i*8),1);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4413      	add	r3, r2
 8001b20:	2101      	movs	r1, #1
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fa5c 	bl	8000fe0 <conv_BIN_to_HEX>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]

        sprintf(uartData, "HEX[%d] = %x\n",i,curr_val);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4917      	ldr	r1, [pc, #92]	; (8001b90 <KISS_TO_HEX+0xc4>)
 8001b32:	4815      	ldr	r0, [pc, #84]	; (8001b88 <KISS_TO_HEX+0xbc>)
 8001b34:	f005 ff44 	bl	80079c0 <siprintf>
    	debug_print_msg();
 8001b38:	f000 fa78 	bl	800202c <debug_print_msg>

        local_UART_packet->HEX_KISS_PACKET[i] = curr_val;
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	4413      	add	r3, r2
 8001b42:	330e      	adds	r3, #14
 8001b44:	79fa      	ldrb	r2, [r7, #7]
 8001b46:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < local_UART_packet->received_byte_cnt; i++){
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbde      	blt.n	8001b16 <KISS_TO_HEX+0x4a>
    }

	sprintf(uartData, "HEX buffer filled\n");
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <KISS_TO_HEX+0xbc>)
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <KISS_TO_HEX+0xc8>)
 8001b5c:	4615      	mov	r5, r2
 8001b5e:	461c      	mov	r4, r3
 8001b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b62:	6028      	str	r0, [r5, #0]
 8001b64:	6069      	str	r1, [r5, #4]
 8001b66:	60aa      	str	r2, [r5, #8]
 8001b68:	60eb      	str	r3, [r5, #12]
 8001b6a:	8823      	ldrh	r3, [r4, #0]
 8001b6c:	78a2      	ldrb	r2, [r4, #2]
 8001b6e:	822b      	strh	r3, [r5, #16]
 8001b70:	4613      	mov	r3, r2
 8001b72:	74ab      	strb	r3, [r5, #18]
	debug_print_msg();
 8001b74:	f000 fa5a 	bl	800202c <debug_print_msg>
}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b80:	200000e4 	.word	0x200000e4
 8001b84:	20001450 	.word	0x20001450
 8001b88:	20001ce8 	.word	0x20001ce8
 8001b8c:	08009510 	.word	0x08009510
 8001b90:	08009528 	.word	0x08009528
 8001b94:	08009538 	.word	0x08009538

08001b98 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001ba4:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <crc_calc+0xd4>)
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
	int max_bits = rxBit_count-FCS_len;
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <crc_calc+0xd8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3b10      	subs	r3, #16
 8001bae:	623b      	str	r3, [r7, #32]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
    int poly = 0x8408;             			//reverse order of 0x1021
 8001bba:	f248 4308 	movw	r3, #33800	; 0x8408
 8001bbe:	61bb      	str	r3, [r7, #24]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4053      	eors	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	105a      	asrs	r2, r3, #1
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <crc_calc+0x46>
 8001bd8:	f248 4308 	movw	r3, #33800	; 0x8408
 8001bdc:	e000      	b.n	8001be0 <crc_calc+0x48>
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
	*crc_ptr_in ^= poly;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	405a      	eors	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]

    //End condition
	if(*crc_count_ptr_in >= max_bits){
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	dc30      	bgt.n	8001c64 <crc_calc+0xcc>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8001c0a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c18:	3308      	adds	r3, #8
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4915      	ldr	r1, [pc, #84]	; (8001c74 <crc_calc+0xdc>)
 8001c20:	4815      	ldr	r0, [pc, #84]	; (8001c78 <crc_calc+0xe0>)
 8001c22:	f005 fecd 	bl	80079c0 <siprintf>
    	debug_print_msg();
 8001c26:	f000 fa01 	bl	800202c <debug_print_msg>
    	if(local_packet->check_crc == false){
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c30:	3310      	adds	r3, #16
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f083 0301 	eor.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <crc_calc+0xcc>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b298      	uxth	r0, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7ff f941 	bl	8000ed8 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c5c:	3308      	adds	r3, #8
 8001c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c62:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200000e4 	.word	0x200000e4
 8001c70:	200000a4 	.word	0x200000a4
 8001c74:	0800954c 	.word	0x0800954c
 8001c78:	20001ce8 	.word	0x20001ce8

08001c7c <crc_generate>:

void crc_generate(){
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001c82:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <crc_generate+0x16c>)
 8001c84:	60fb      	str	r3, [r7, #12]
	uint16_t * crc_ptr = &(local_packet->crc);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	60bb      	str	r3, [r7, #8]
	int * crc_count_ptr = &(local_packet->crc_count);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c96:	330c      	adds	r3, #12
 8001c98:	607b      	str	r3, [r7, #4]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca0:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8001ca8:	4a50      	ldr	r2, [pc, #320]	; (8001dec <crc_generate+0x170>)
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <crc_generate+0x174>)
 8001cac:	4615      	mov	r5, r2
 8001cae:	461c      	mov	r4, r3
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	6028      	str	r0, [r5, #0]
 8001cb4:	6069      	str	r1, [r5, #4]
 8001cb6:	60aa      	str	r2, [r5, #8]
 8001cb8:	60eb      	str	r3, [r5, #12]
 8001cba:	cc03      	ldmia	r4!, {r0, r1}
 8001cbc:	6128      	str	r0, [r5, #16]
 8001cbe:	6169      	str	r1, [r5, #20]
 8001cc0:	8823      	ldrh	r3, [r4, #0]
 8001cc2:	78a2      	ldrb	r2, [r4, #2]
 8001cc4:	832b      	strh	r3, [r5, #24]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	76ab      	strb	r3, [r5, #26]
	debug_print_msg();
 8001cca:	f000 f9af 	bl	800202c <debug_print_msg>

	//Calculate CRC for address
	curr_mem = (local_packet->address);//start at MS Byte(LSB)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	603b      	str	r3, [r7, #0]
	for(int i = 0;i<address_len;i++){
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e00f      	b.n	8001d00 <crc_generate+0x84>
		crc_calc((int)local_packet->address[i],crc_ptr,crc_count_ptr);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ce6:	3310      	adds	r3, #16
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff4f 	bl	8001b98 <crc_calc>
	for(int i = 0;i<address_len;i++){
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b6f      	cmp	r3, #111	; 0x6f
 8001d04:	ddec      	ble.n	8001ce0 <crc_generate+0x64>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < control_len; i++){
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	e00f      	b.n	8001d38 <crc_generate+0xbc>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d1e:	3314      	adds	r3, #20
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff33 	bl	8001b98 <crc_calc>
	for(int i = 0; i < control_len; i++){
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	ddec      	ble.n	8001d18 <crc_generate+0x9c>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d44:	3318      	adds	r3, #24
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < PID_len; i++){
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e00f      	b.n	8001d70 <crc_generate+0xf4>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d56:	3318      	adds	r3, #24
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff17 	bl	8001b98 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b07      	cmp	r3, #7
 8001d74:	ddec      	ble.n	8001d50 <crc_generate+0xd4>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d7c:	331c      	adds	r3, #28
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	603b      	str	r3, [r7, #0]
	for(int i = 0;i<local_packet->Info_Len;i++){
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e00f      	b.n	8001da8 <crc_generate+0x12c>
		crc_calc((int)local_packet->Info[i],crc_ptr,crc_count_ptr);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d8e:	331c      	adds	r3, #28
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fefb 	bl	8001b98 <crc_calc>
	for(int i = 0;i<local_packet->Info_Len;i++){
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	3301      	adds	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dbe8      	blt.n	8001d88 <crc_generate+0x10c>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <crc_generate+0x178>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <crc_generate+0x17c>)
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <crc_generate+0x170>)
 8001dc0:	f005 fdfe 	bl	80079c0 <siprintf>
	debug_print_msg();
 8001dc4:	f000 f932 	bl	800202c <debug_print_msg>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	490b      	ldr	r1, [pc, #44]	; (8001dfc <crc_generate+0x180>)
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <crc_generate+0x170>)
 8001dd2:	f005 fdf5 	bl	80079c0 <siprintf>
	debug_print_msg();
 8001dd6:	f000 f929 	bl	800202c <debug_print_msg>
	*crc_count_ptr = 0;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	200000e4 	.word	0x200000e4
 8001dec:	20001ce8 	.word	0x20001ce8
 8001df0:	0800956c 	.word	0x0800956c
 8001df4:	200000a4 	.word	0x200000a4
 8001df8:	08009588 	.word	0x08009588
 8001dfc:	08009598 	.word	0x08009598

08001e00 <crc_check>:

bool crc_check(){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <crc_check+0x58>)
 8001e08:	607b      	str	r3, [r7, #4]
	local_packet->check_crc = true;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e10:	3310      	adds	r3, #16
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
	uint16_t fcs_val = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	807b      	strh	r3, [r7, #2]
	bool valid_crc = false;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	707b      	strb	r3, [r7, #1]

	fcs_val = conv_BIN_to_HEX(local_packet->FCS,0);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e24:	3304      	adds	r3, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f8d8 	bl	8000fe0 <conv_BIN_to_HEX>
 8001e30:	4603      	mov	r3, r0
 8001e32:	807b      	strh	r3, [r7, #2]

	//generate crc
	crc_generate();
 8001e34:	f7ff ff22 	bl	8001c7c <crc_generate>

	//compare crc
	valid_crc = (local_packet->crc==fcs_val) ? true : false;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e3e:	3308      	adds	r3, #8
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	707b      	strb	r3, [r7, #1]
	return valid_crc;
 8001e4e:	787b      	ldrb	r3, [r7, #1]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200000e4 	.word	0x200000e4

08001e5c <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]

	//Set hardware properly
	mode = modeStart;
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <initProgram+0x24>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	7013      	strb	r3, [r2, #0]
	setHardwareMode(modeStart);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f808 	bl	8001e84 <setHardwareMode>

	init_UART();
 8001e74:	f000 ffa4 	bl	8002dc0 <init_UART>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000298c 	.word	0x2000298c

08001e84 <setHardwareMode>:

void setHardwareMode(int set_mode) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

	//Toggle mode
	mode = set_mode;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <setHardwareMode+0xc8>)
 8001e9a:	701a      	strb	r2, [r3, #0]

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	482c      	ldr	r0, [pc, #176]	; (8001f50 <setHardwareMode+0xcc>)
 8001ea0:	f002 f83f 	bl	8003f22 <HAL_DAC_Stop_DMA>
	midbit = false;
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <setHardwareMode+0xd0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]

	//Stop Timers the Correct Way
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	482a      	ldr	r0, [pc, #168]	; (8001f58 <setHardwareMode+0xd4>)
 8001eae:	f003 fc73 	bl	8005798 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim3);
 8001eb2:	482a      	ldr	r0, [pc, #168]	; (8001f5c <setHardwareMode+0xd8>)
 8001eb4:	f003 fb8b 	bl	80055ce <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8001eb8:	4829      	ldr	r0, [pc, #164]	; (8001f60 <setHardwareMode+0xdc>)
 8001eba:	f003 fb88 	bl	80055ce <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4828      	ldr	r0, [pc, #160]	; (8001f64 <setHardwareMode+0xe0>)
 8001ec2:	f003 fda1 	bl	8005a08 <HAL_TIM_IC_Stop_IT>

	//Zero Timers
	htim2.Instance->CNT = 0;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <setHardwareMode+0xd4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <setHardwareMode+0xd8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
	htim5.Instance->CNT = 0;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <setHardwareMode+0xe0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

	//Transmission Mode
	if (mode) {
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <setHardwareMode+0xc8>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d014      	beq.n	8001f10 <setHardwareMode+0x8c>

		//Set Timer Auto Reload Settings
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <setHardwareMode+0xd4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <setHardwareMode+0xd8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
		htim4.Instance->ARR = TIM4_AUTORELOAD_TX_LOW;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <setHardwareMode+0xdc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	226c      	movs	r2, #108	; 0x6c
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <setHardwareMode+0xe0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c

		//Start Timers the Correct Way
		HAL_TIM_Base_Start(&htim4);
 8001f08:	4815      	ldr	r0, [pc, #84]	; (8001f60 <setHardwareMode+0xdc>)
 8001f0a:	f003 fb3c 	bl	8005586 <HAL_TIM_Base_Start>

//		//Start Timers the Correct Way
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
	}
}
 8001f0e:	e019      	b.n	8001f44 <setHardwareMode+0xc0>
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <setHardwareMode+0xd4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <setHardwareMode+0xd8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
		htim4.Instance->ARR = TIM4_AUTORELOAD_RX;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <setHardwareMode+0xdc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_RX;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <setHardwareMode+0xe0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001f34:	2100      	movs	r1, #0
 8001f36:	4808      	ldr	r0, [pc, #32]	; (8001f58 <setHardwareMode+0xd4>)
 8001f38:	f003 fbaa 	bl	8005690 <HAL_TIM_OC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4809      	ldr	r0, [pc, #36]	; (8001f64 <setHardwareMode+0xe0>)
 8001f40:	f003 fcfa 	bl	8005938 <HAL_TIM_IC_Start_IT>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000298c 	.word	0x2000298c
 8001f50:	20002990 	.word	0x20002990
 8001f54:	200000a8 	.word	0x200000a8
 8001f58:	200029a4 	.word	0x200029a4
 8001f5c:	200028ec 	.word	0x200028ec
 8001f60:	200034b0 	.word	0x200034b0
 8001f64:	200028ac 	.word	0x200028ac

08001f68 <loadBitBuffer>:
 * 11001110
 * 11001110
 */

bool bufffull = false;
int loadBitBuffer(bool bit_val) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	if(canWrite){
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <loadBitBuffer+0x6c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01e      	beq.n	8001fb8 <loadBitBuffer+0x50>
		bitBuffer[bitSaveCount] = bit_val;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <loadBitBuffer+0x70>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <loadBitBuffer+0x74>)
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	5453      	strb	r3, [r2, r1]
		bitSaveCount++;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <loadBitBuffer+0x70>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <loadBitBuffer+0x70>)
 8001f90:	801a      	strh	r2, [r3, #0]
		if (bitSaveCount >= RX_BUFFERSIZE) {
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <loadBitBuffer+0x70>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f640 225e 	movw	r2, #2654	; 0xa5e
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d902      	bls.n	8001fa4 <loadBitBuffer+0x3c>
			canWrite = false;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <loadBitBuffer+0x6c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
		}

		//Buffer is full
		if(bitSaveCount == bitReadCount){
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <loadBitBuffer+0x70>)
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <loadBitBuffer+0x78>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <loadBitBuffer+0x56>
			canWrite = false;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <loadBitBuffer+0x6c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e002      	b.n	8001fbe <loadBitBuffer+0x56>
		}
	} else {
		bufffull = true;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <loadBitBuffer+0x7c>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <loadBitBuffer+0x80>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
	return bitSaveCount;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <loadBitBuffer+0x70>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	20000010 	.word	0x20000010
 8001fd8:	200000ac 	.word	0x200000ac
 8001fdc:	20002a24 	.word	0x20002a24
 8001fe0:	200000ae 	.word	0x200000ae
 8001fe4:	200000aa 	.word	0x200000aa
 8001fe8:	200000ab 	.word	0x200000ab

08001fec <resetBitBuffer>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void resetBitBuffer(){
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	bitReadCount = 0;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <resetBitBuffer+0x2c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
	bitSaveCount = 0;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <resetBitBuffer+0x30>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	801a      	strh	r2, [r3, #0]

	canRead  = false;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <resetBitBuffer+0x34>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
	canWrite = true;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <resetBitBuffer+0x38>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]

	bufffull = false;
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <resetBitBuffer+0x3c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	200000ae 	.word	0x200000ae
 800201c:	200000ac 	.word	0x200000ac
 8002020:	200000ab 	.word	0x200000ab
 8002024:	20000010 	.word	0x20000010
 8002028:	200000aa 	.word	0x200000aa

0800202c <debug_print_msg>:
 *  Created on: Nov 1, 2020
 *      Author: monke
 */
#include "debug.h"

void debug_print_msg(){
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	if(debug_printing){
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <debug_print_msg+0x1c>)
 8002032:	f7fe f8ed 	bl	8000210 <strlen>
 8002036:	4603      	mov	r3, r0
 8002038:	b29a      	uxth	r2, r3
 800203a:	230a      	movs	r3, #10
 800203c:	4902      	ldr	r1, [pc, #8]	; (8002048 <debug_print_msg+0x1c>)
 800203e:	4803      	ldr	r0, [pc, #12]	; (800204c <debug_print_msg+0x20>)
 8002040:	f004 fd7d 	bl	8006b3e <HAL_UART_Transmit>
	}
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20001ce8 	.word	0x20001ce8
 800204c:	200029e4 	.word	0x200029e4

08002050 <print_AX25>:

//Printing Packets
//****************************************************************************************************************
void print_AX25(){
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002052:	b08b      	sub	sp, #44	; 0x2c
 8002054:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002056:	4b85      	ldr	r3, [pc, #532]	; (800226c <print_AX25+0x21c>)
 8002058:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002060:	330c      	adds	r3, #12
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [LSB:MSB]\n");
 8002066:	4b82      	ldr	r3, [pc, #520]	; (8002270 <print_AX25+0x220>)
 8002068:	4a82      	ldr	r2, [pc, #520]	; (8002274 <print_AX25+0x224>)
 800206a:	4614      	mov	r4, r2
 800206c:	469c      	mov	ip, r3
 800206e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002072:	4665      	mov	r5, ip
 8002074:	4626      	mov	r6, r4
 8002076:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002078:	6028      	str	r0, [r5, #0]
 800207a:	6069      	str	r1, [r5, #4]
 800207c:	60aa      	str	r2, [r5, #8]
 800207e:	60eb      	str	r3, [r5, #12]
 8002080:	3410      	adds	r4, #16
 8002082:	f10c 0c10 	add.w	ip, ip, #16
 8002086:	4574      	cmp	r4, lr
 8002088:	d1f3      	bne.n	8002072 <print_AX25+0x22>
 800208a:	4663      	mov	r3, ip
 800208c:	4622      	mov	r2, r4
 800208e:	6810      	ldr	r0, [r2, #0]
 8002090:	6018      	str	r0, [r3, #0]
 8002092:	8891      	ldrh	r1, [r2, #4]
 8002094:	7992      	ldrb	r2, [r2, #6]
 8002096:	8099      	strh	r1, [r3, #4]
 8002098:	719a      	strb	r2, [r3, #6]
	debug_print_msg();
 800209a:	f7ff ffc7 	bl	800202c <debug_print_msg>

	//Print Address Field
	curr_mem = local_packet->AX25_PACKET;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24

	//Output byte at a time
	for(int i = 0;i<address_len/8;i++){
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	e028      	b.n	80020fa <print_AX25+0xaa>

		sprintf(uartData, "Address Field %d =",i+1);
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	3301      	adds	r3, #1
 80020ac:	461a      	mov	r2, r3
 80020ae:	4972      	ldr	r1, [pc, #456]	; (8002278 <print_AX25+0x228>)
 80020b0:	486f      	ldr	r0, [pc, #444]	; (8002270 <print_AX25+0x220>)
 80020b2:	f005 fc85 	bl	80079c0 <siprintf>
		debug_print_msg();
 80020b6:	f7ff ffb9 	bl	800202c <debug_print_msg>

		for(int j = 0;j<8;j++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e00d      	b.n	80020dc <print_AX25+0x8c>
			sprintf(uartData, " %d ",*(curr_mem+j));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	496c      	ldr	r1, [pc, #432]	; (800227c <print_AX25+0x22c>)
 80020cc:	4868      	ldr	r0, [pc, #416]	; (8002270 <print_AX25+0x220>)
 80020ce:	f005 fc77 	bl	80079c0 <siprintf>
			debug_print_msg();
 80020d2:	f7ff ffab 	bl	800202c <debug_print_msg>
		for(int j = 0;j<8;j++){
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b07      	cmp	r3, #7
 80020e0:	ddee      	ble.n	80020c0 <print_AX25+0x70>
		}
		curr_mem += 8;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	3308      	adds	r3, #8
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 80020e8:	4a61      	ldr	r2, [pc, #388]	; (8002270 <print_AX25+0x220>)
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <print_AX25+0x230>)
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80020f0:	f7ff ff9c 	bl	800202c <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	3301      	adds	r3, #1
 80020f8:	623b      	str	r3, [r7, #32]
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	2b0d      	cmp	r3, #13
 80020fe:	ddd3      	ble.n	80020a8 <print_AX25+0x58>
	}

	//Print Control Field
	sprintf(uartData, "Control Field   =");
 8002100:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <print_AX25+0x220>)
 8002102:	4b60      	ldr	r3, [pc, #384]	; (8002284 <print_AX25+0x234>)
 8002104:	4615      	mov	r5, r2
 8002106:	461c      	mov	r4, r3
 8002108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210a:	6028      	str	r0, [r5, #0]
 800210c:	6069      	str	r1, [r5, #4]
 800210e:	60aa      	str	r2, [r5, #8]
 8002110:	60eb      	str	r3, [r5, #12]
 8002112:	8823      	ldrh	r3, [r4, #0]
 8002114:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002116:	f7ff ff89 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	e00d      	b.n	800213c <print_AX25+0xec>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4954      	ldr	r1, [pc, #336]	; (800227c <print_AX25+0x22c>)
 800212c:	4850      	ldr	r0, [pc, #320]	; (8002270 <print_AX25+0x220>)
 800212e:	f005 fc47 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002132:	f7ff ff7b 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	3301      	adds	r3, #1
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b07      	cmp	r3, #7
 8002140:	ddee      	ble.n	8002120 <print_AX25+0xd0>
	}
	sprintf(uartData, "\n");
 8002142:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <print_AX25+0x220>)
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <print_AX25+0x230>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800214a:	f7ff ff6f 	bl	800202c <debug_print_msg>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3308      	adds	r3, #8
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "PID Field       =");
 8002154:	4a46      	ldr	r2, [pc, #280]	; (8002270 <print_AX25+0x220>)
 8002156:	4b4c      	ldr	r3, [pc, #304]	; (8002288 <print_AX25+0x238>)
 8002158:	4615      	mov	r5, r2
 800215a:	461c      	mov	r4, r3
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	6028      	str	r0, [r5, #0]
 8002160:	6069      	str	r1, [r5, #4]
 8002162:	60aa      	str	r2, [r5, #8]
 8002164:	60eb      	str	r3, [r5, #12]
 8002166:	8823      	ldrh	r3, [r4, #0]
 8002168:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 800216a:	f7ff ff5f 	bl	800202c <debug_print_msg>

	for(int i = 0;i<8;i++){
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e00d      	b.n	8002190 <print_AX25+0x140>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	493f      	ldr	r1, [pc, #252]	; (800227c <print_AX25+0x22c>)
 8002180:	483b      	ldr	r0, [pc, #236]	; (8002270 <print_AX25+0x220>)
 8002182:	f005 fc1d 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002186:	f7ff ff51 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b07      	cmp	r3, #7
 8002194:	ddee      	ble.n	8002174 <print_AX25+0x124>
	}
	sprintf(uartData, "\n");
 8002196:	4a36      	ldr	r2, [pc, #216]	; (8002270 <print_AX25+0x220>)
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <print_AX25+0x230>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800219e:	f7ff ff45 	bl	800202c <debug_print_msg>
	curr_mem += PID_len;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3308      	adds	r3, #8
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24

	//Print Info Field
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	e028      	b.n	8002200 <print_AX25+0x1b0>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	3301      	adds	r3, #1
 80021b2:	461a      	mov	r2, r3
 80021b4:	4935      	ldr	r1, [pc, #212]	; (800228c <print_AX25+0x23c>)
 80021b6:	482e      	ldr	r0, [pc, #184]	; (8002270 <print_AX25+0x220>)
 80021b8:	f005 fc02 	bl	80079c0 <siprintf>
		debug_print_msg();
 80021bc:	f7ff ff36 	bl	800202c <debug_print_msg>

		for(int j = 0;j<8;j++){
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e00d      	b.n	80021e2 <print_AX25+0x192>
			sprintf(uartData, " %d ",*(curr_mem+j));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	492a      	ldr	r1, [pc, #168]	; (800227c <print_AX25+0x22c>)
 80021d2:	4827      	ldr	r0, [pc, #156]	; (8002270 <print_AX25+0x220>)
 80021d4:	f005 fbf4 	bl	80079c0 <siprintf>
			debug_print_msg();
 80021d8:	f7ff ff28 	bl	800202c <debug_print_msg>
		for(int j = 0;j<8;j++){
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3301      	adds	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b07      	cmp	r3, #7
 80021e6:	ddee      	ble.n	80021c6 <print_AX25+0x176>
		}
		curr_mem += 8;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3308      	adds	r3, #8
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <print_AX25+0x220>)
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <print_AX25+0x230>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80021f6:	f7ff ff19 	bl	800202c <debug_print_msg>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	3301      	adds	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	da00      	bge.n	800220e <print_AX25+0x1be>
 800220c:	3307      	adds	r3, #7
 800220e:	10db      	asrs	r3, r3, #3
 8002210:	461a      	mov	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4293      	cmp	r3, r2
 8002216:	dbca      	blt.n	80021ae <print_AX25+0x15e>
	}

	sprintf(uartData, "FCS Field = ")	;
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <print_AX25+0x220>)
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <print_AX25+0x240>)
 800221c:	4614      	mov	r4, r2
 800221e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002220:	6020      	str	r0, [r4, #0]
 8002222:	6061      	str	r1, [r4, #4]
 8002224:	60a2      	str	r2, [r4, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 800222a:	f7ff feff 	bl	800202c <debug_print_msg>
	for(int i = 0;i<FCS_len;i++){
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	e00d      	b.n	8002250 <print_AX25+0x200>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	4413      	add	r3, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	490f      	ldr	r1, [pc, #60]	; (800227c <print_AX25+0x22c>)
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <print_AX25+0x220>)
 8002242:	f005 fbbd 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002246:	f7ff fef1 	bl	800202c <debug_print_msg>
	for(int i = 0;i<FCS_len;i++){
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3301      	adds	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	ddee      	ble.n	8002234 <print_AX25+0x1e4>
	}
	sprintf(uartData, "\n");
 8002256:	4a06      	ldr	r2, [pc, #24]	; (8002270 <print_AX25+0x220>)
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <print_AX25+0x230>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800225e:	f7ff fee5 	bl	800202c <debug_print_msg>
}
 8002262:	bf00      	nop
 8002264:	372c      	adds	r7, #44	; 0x2c
 8002266:	46bd      	mov	sp, r7
 8002268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800226a:	bf00      	nop
 800226c:	200000e4 	.word	0x200000e4
 8002270:	20001ce8 	.word	0x20001ce8
 8002274:	080095ac 	.word	0x080095ac
 8002278:	080095e4 	.word	0x080095e4
 800227c:	080095f8 	.word	0x080095f8
 8002280:	08009600 	.word	0x08009600
 8002284:	08009604 	.word	0x08009604
 8002288:	08009618 	.word	0x08009618
 800228c:	0800962c 	.word	0x0800962c
 8002290:	08009640 	.word	0x08009640

08002294 <print_outAX25>:

void print_outAX25(){
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	b08d      	sub	sp, #52	; 0x34
 8002298:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800229a:	4b9b      	ldr	r3, [pc, #620]	; (8002508 <print_outAX25+0x274>)
 800229c:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80022a4:	330c      	adds	r3, #12
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 80022aa:	4b98      	ldr	r3, [pc, #608]	; (800250c <print_outAX25+0x278>)
 80022ac:	4a98      	ldr	r2, [pc, #608]	; (8002510 <print_outAX25+0x27c>)
 80022ae:	4614      	mov	r4, r2
 80022b0:	469c      	mov	ip, r3
 80022b2:	f104 0e20 	add.w	lr, r4, #32
 80022b6:	4665      	mov	r5, ip
 80022b8:	4626      	mov	r6, r4
 80022ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80022bc:	6028      	str	r0, [r5, #0]
 80022be:	6069      	str	r1, [r5, #4]
 80022c0:	60aa      	str	r2, [r5, #8]
 80022c2:	60eb      	str	r3, [r5, #12]
 80022c4:	3410      	adds	r4, #16
 80022c6:	f10c 0c10 	add.w	ip, ip, #16
 80022ca:	4574      	cmp	r4, lr
 80022cc:	d1f3      	bne.n	80022b6 <print_outAX25+0x22>
 80022ce:	4662      	mov	r2, ip
 80022d0:	4623      	mov	r3, r4
 80022d2:	cb03      	ldmia	r3!, {r0, r1}
 80022d4:	6010      	str	r0, [r2, #0]
 80022d6:	6051      	str	r1, [r2, #4]
 80022d8:	8819      	ldrh	r1, [r3, #0]
 80022da:	789b      	ldrb	r3, [r3, #2]
 80022dc:	8111      	strh	r1, [r2, #8]
 80022de:	7293      	strb	r3, [r2, #10]
	debug_print_msg();
 80022e0:	f7ff fea4 	bl	800202c <debug_print_msg>
	sprintf(uartData, "AX25 FLAG = ");
 80022e4:	4a89      	ldr	r2, [pc, #548]	; (800250c <print_outAX25+0x278>)
 80022e6:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <print_outAX25+0x280>)
 80022e8:	4614      	mov	r4, r2
 80022ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022ec:	6020      	str	r0, [r4, #0]
 80022ee:	6061      	str	r1, [r4, #4]
 80022f0:	60a2      	str	r2, [r4, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 80022f6:	f7ff fe99 	bl	800202c <debug_print_msg>
	curr_mem = AX25TBYTE;
 80022fa:	4b87      	ldr	r3, [pc, #540]	; (8002518 <print_outAX25+0x284>)
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 8; i++){
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
 8002302:	e00d      	b.n	8002320 <print_outAX25+0x8c>
		sprintf(uartData, " %d ",curr_mem[i]);
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4983      	ldr	r1, [pc, #524]	; (800251c <print_outAX25+0x288>)
 8002310:	487e      	ldr	r0, [pc, #504]	; (800250c <print_outAX25+0x278>)
 8002312:	f005 fb55 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002316:	f7ff fe89 	bl	800202c <debug_print_msg>
	for(int i = 0; i < 8; i++){
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	3301      	adds	r3, #1
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	2b07      	cmp	r3, #7
 8002324:	ddee      	ble.n	8002304 <print_outAX25+0x70>
	}
	sprintf(uartData, "\n");
 8002326:	4a79      	ldr	r2, [pc, #484]	; (800250c <print_outAX25+0x278>)
 8002328:	4b7d      	ldr	r3, [pc, #500]	; (8002520 <print_outAX25+0x28c>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800232e:	f7ff fe7d 	bl	800202c <debug_print_msg>

	//Print Address Field
	curr_mem = local_packet->address;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002338:	3310      	adds	r3, #16
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	e028      	b.n	8002396 <print_outAX25+0x102>
		sprintf(uartData, "Address Field %d =",i+1);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	3301      	adds	r3, #1
 8002348:	461a      	mov	r2, r3
 800234a:	4976      	ldr	r1, [pc, #472]	; (8002524 <print_outAX25+0x290>)
 800234c:	486f      	ldr	r0, [pc, #444]	; (800250c <print_outAX25+0x278>)
 800234e:	f005 fb37 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002352:	f7ff fe6b 	bl	800202c <debug_print_msg>

		for(int j = 0;j<8;j++){
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	e00d      	b.n	8002378 <print_outAX25+0xe4>
			sprintf(uartData, " %d ",*(curr_mem+j));
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	496d      	ldr	r1, [pc, #436]	; (800251c <print_outAX25+0x288>)
 8002368:	4868      	ldr	r0, [pc, #416]	; (800250c <print_outAX25+0x278>)
 800236a:	f005 fb29 	bl	80079c0 <siprintf>
			debug_print_msg();
 800236e:	f7ff fe5d 	bl	800202c <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	3301      	adds	r3, #1
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2b07      	cmp	r3, #7
 800237c:	ddee      	ble.n	800235c <print_outAX25+0xc8>
		}
		curr_mem += 8;
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	3308      	adds	r3, #8
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002384:	4a61      	ldr	r2, [pc, #388]	; (800250c <print_outAX25+0x278>)
 8002386:	4b66      	ldr	r3, [pc, #408]	; (8002520 <print_outAX25+0x28c>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 800238c:	f7ff fe4e 	bl	800202c <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3301      	adds	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	2b0d      	cmp	r3, #13
 800239a:	ddd3      	ble.n	8002344 <print_outAX25+0xb0>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 800239c:	4a5b      	ldr	r2, [pc, #364]	; (800250c <print_outAX25+0x278>)
 800239e:	4b62      	ldr	r3, [pc, #392]	; (8002528 <print_outAX25+0x294>)
 80023a0:	4614      	mov	r4, r2
 80023a2:	461d      	mov	r5, r3
 80023a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a6:	6020      	str	r0, [r4, #0]
 80023a8:	6061      	str	r1, [r4, #4]
 80023aa:	60a2      	str	r2, [r4, #8]
 80023ac:	60e3      	str	r3, [r4, #12]
 80023ae:	6828      	ldr	r0, [r5, #0]
 80023b0:	6120      	str	r0, [r4, #16]
 80023b2:	88ab      	ldrh	r3, [r5, #4]
 80023b4:	79aa      	ldrb	r2, [r5, #6]
 80023b6:	82a3      	strh	r3, [r4, #20]
 80023b8:	4613      	mov	r3, r2
 80023ba:	75a3      	strb	r3, [r4, #22]
	debug_print_msg();
 80023bc:	f7ff fe36 	bl	800202c <debug_print_msg>
	curr_mem += address_len;
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	3370      	adds	r3, #112	; 0x70
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80023cc:	3310      	adds	r3, #16
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dd19      	ble.n	8002408 <print_outAX25+0x174>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	e00e      	b.n	80023f8 <print_outAX25+0x164>
			sprintf(uartData, " %d ",*(curr_mem-i));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	425b      	negs	r3, r3
 80023de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	494d      	ldr	r1, [pc, #308]	; (800251c <print_outAX25+0x288>)
 80023e8:	4848      	ldr	r0, [pc, #288]	; (800250c <print_outAX25+0x278>)
 80023ea:	f005 fae9 	bl	80079c0 <siprintf>
			debug_print_msg();
 80023ee:	f7ff fe1d 	bl	800202c <debug_print_msg>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80023fe:	3310      	adds	r3, #16
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	429a      	cmp	r2, r3
 8002406:	dbe8      	blt.n	80023da <print_outAX25+0x146>
		}
	}
	sprintf(uartData, "\n");
 8002408:	4a40      	ldr	r2, [pc, #256]	; (800250c <print_outAX25+0x278>)
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <print_outAX25+0x28c>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002410:	f7ff fe0c 	bl	800202c <debug_print_msg>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800241a:	3314      	adds	r3, #20
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002420:	4a3a      	ldr	r2, [pc, #232]	; (800250c <print_outAX25+0x278>)
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <print_outAX25+0x298>)
 8002424:	4615      	mov	r5, r2
 8002426:	461c      	mov	r4, r3
 8002428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242a:	6028      	str	r0, [r5, #0]
 800242c:	6069      	str	r1, [r5, #4]
 800242e:	60aa      	str	r2, [r5, #8]
 8002430:	60eb      	str	r3, [r5, #12]
 8002432:	8823      	ldrh	r3, [r4, #0]
 8002434:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002436:	f7ff fdf9 	bl	800202c <debug_print_msg>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e00d      	b.n	800245c <print_outAX25+0x1c8>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002444:	4413      	add	r3, r2
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4934      	ldr	r1, [pc, #208]	; (800251c <print_outAX25+0x288>)
 800244c:	482f      	ldr	r0, [pc, #188]	; (800250c <print_outAX25+0x278>)
 800244e:	f005 fab7 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002452:	f7ff fdeb 	bl	800202c <debug_print_msg>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3301      	adds	r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002462:	3314      	adds	r3, #20
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3308      	adds	r3, #8
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	429a      	cmp	r2, r3
 800246c:	dbe8      	blt.n	8002440 <print_outAX25+0x1ac>
	}
	sprintf(uartData, "\n");
 800246e:	4a27      	ldr	r2, [pc, #156]	; (800250c <print_outAX25+0x278>)
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <print_outAX25+0x28c>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002476:	f7ff fdd9 	bl	800202c <debug_print_msg>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002480:	3318      	adds	r3, #24
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002486:	4a21      	ldr	r2, [pc, #132]	; (800250c <print_outAX25+0x278>)
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <print_outAX25+0x29c>)
 800248a:	4615      	mov	r5, r2
 800248c:	461c      	mov	r4, r3
 800248e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002490:	6028      	str	r0, [r5, #0]
 8002492:	6069      	str	r1, [r5, #4]
 8002494:	60aa      	str	r2, [r5, #8]
 8002496:	60eb      	str	r3, [r5, #12]
 8002498:	8823      	ldrh	r3, [r4, #0]
 800249a:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 800249c:	f7ff fdc6 	bl	800202c <debug_print_msg>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e00d      	b.n	80024c2 <print_outAX25+0x22e>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024aa:	4413      	add	r3, r2
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	491a      	ldr	r1, [pc, #104]	; (800251c <print_outAX25+0x288>)
 80024b2:	4816      	ldr	r0, [pc, #88]	; (800250c <print_outAX25+0x278>)
 80024b4:	f005 fa84 	bl	80079c0 <siprintf>
		debug_print_msg();
 80024b8:	f7ff fdb8 	bl	800202c <debug_print_msg>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80024c8:	3318      	adds	r3, #24
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3308      	adds	r3, #8
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbe8      	blt.n	80024a6 <print_outAX25+0x212>
	}
	sprintf(uartData, "\n");
 80024d4:	4a0d      	ldr	r2, [pc, #52]	; (800250c <print_outAX25+0x278>)
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <print_outAX25+0x28c>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80024dc:	f7ff fda6 	bl	800202c <debug_print_msg>

	sprintf(uartData, "Info Field = ");
 80024e0:	4a0a      	ldr	r2, [pc, #40]	; (800250c <print_outAX25+0x278>)
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <print_outAX25+0x2a0>)
 80024e4:	4614      	mov	r4, r2
 80024e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024e8:	6020      	str	r0, [r4, #0]
 80024ea:	6061      	str	r1, [r4, #4]
 80024ec:	60a2      	str	r2, [r4, #8]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	81a3      	strh	r3, [r4, #12]
	debug_print_msg();
 80024f2:	f7ff fd9b 	bl	800202c <debug_print_msg>
	curr_mem = local_packet->Info;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80024fc:	331c      	adds	r3, #28
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	e025      	b.n	8002554 <print_outAX25+0x2c0>
 8002508:	200000e4 	.word	0x200000e4
 800250c:	20001ce8 	.word	0x20001ce8
 8002510:	08009650 	.word	0x08009650
 8002514:	0800967c 	.word	0x0800967c
 8002518:	20000008 	.word	0x20000008
 800251c:	080095f8 	.word	0x080095f8
 8002520:	08009600 	.word	0x08009600
 8002524:	080095e4 	.word	0x080095e4
 8002528:	0800968c 	.word	0x0800968c
 800252c:	08009604 	.word	0x08009604
 8002530:	08009618 	.word	0x08009618
 8002534:	080096a4 	.word	0x080096a4
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	494d      	ldr	r1, [pc, #308]	; (8002678 <print_outAX25+0x3e4>)
 8002544:	484d      	ldr	r0, [pc, #308]	; (800267c <print_outAX25+0x3e8>)
 8002546:	f005 fa3b 	bl	80079c0 <siprintf>
		debug_print_msg();
 800254a:	f7ff fd6f 	bl	800202c <debug_print_msg>
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	3301      	adds	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002562:	331c      	adds	r3, #28
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	429a      	cmp	r2, r3
 800256c:	dbe4      	blt.n	8002538 <print_outAX25+0x2a4>
	}
	sprintf(uartData, "\n");
 800256e:	4a43      	ldr	r2, [pc, #268]	; (800267c <print_outAX25+0x3e8>)
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <print_outAX25+0x3ec>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002576:	f7ff fd59 	bl	800202c <debug_print_msg>

	curr_mem = local_packet->FCS;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002580:	3304      	adds	r3, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 8002586:	4a3d      	ldr	r2, [pc, #244]	; (800267c <print_outAX25+0x3e8>)
 8002588:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <print_outAX25+0x3f0>)
 800258a:	4614      	mov	r4, r2
 800258c:	461d      	mov	r5, r3
 800258e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002590:	6020      	str	r0, [r4, #0]
 8002592:	6061      	str	r1, [r4, #4]
 8002594:	60a2      	str	r2, [r4, #8]
 8002596:	60e3      	str	r3, [r4, #12]
	debug_print_msg();
 8002598:	f7ff fd48 	bl	800202c <debug_print_msg>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e00d      	b.n	80025be <print_outAX25+0x32a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4932      	ldr	r1, [pc, #200]	; (8002678 <print_outAX25+0x3e4>)
 80025ae:	4833      	ldr	r0, [pc, #204]	; (800267c <print_outAX25+0x3e8>)
 80025b0:	f005 fa06 	bl	80079c0 <siprintf>
		debug_print_msg();
 80025b4:	f7ff fd3a 	bl	800202c <debug_print_msg>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3310      	adds	r3, #16
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dbe9      	blt.n	80025a2 <print_outAX25+0x30e>
	}

	sprintf(uartData, "\n");
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <print_outAX25+0x3e8>)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <print_outAX25+0x3ec>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80025d6:	f7ff fd29 	bl	800202c <debug_print_msg>

	sprintf(uartData, "AX25 FLAG = ");
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <print_outAX25+0x3e8>)
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <print_outAX25+0x3f4>)
 80025de:	4614      	mov	r4, r2
 80025e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025e2:	6020      	str	r0, [r4, #0]
 80025e4:	6061      	str	r1, [r4, #4]
 80025e6:	60a2      	str	r2, [r4, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 80025ec:	f7ff fd1e 	bl	800202c <debug_print_msg>
	curr_mem = AX25TBYTE;
 80025f0:	4b26      	ldr	r3, [pc, #152]	; (800268c <print_outAX25+0x3f8>)
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 8; i++){
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	e00d      	b.n	8002616 <print_outAX25+0x382>
		sprintf(uartData, " %d ",curr_mem[i]);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025fe:	4413      	add	r3, r2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	491c      	ldr	r1, [pc, #112]	; (8002678 <print_outAX25+0x3e4>)
 8002606:	481d      	ldr	r0, [pc, #116]	; (800267c <print_outAX25+0x3e8>)
 8002608:	f005 f9da 	bl	80079c0 <siprintf>
		debug_print_msg();
 800260c:	f7ff fd0e 	bl	800202c <debug_print_msg>
	for(int i = 0; i < 8; i++){
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3301      	adds	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b07      	cmp	r3, #7
 800261a:	ddee      	ble.n	80025fa <print_outAX25+0x366>
	}
	sprintf(uartData, "\n");
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <print_outAX25+0x3e8>)
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <print_outAX25+0x3ec>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002624:	f7ff fd02 	bl	800202c <debug_print_msg>



	//reset bitstuff members
	local_packet->stuffed_address = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800262e:	3310      	adds	r3, #16
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800263a:	3314      	adds	r3, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002646:	3318      	adds	r3, #24
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002652:	331c      	adds	r3, #28
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
	local_packet->bit_stuffed_zeros = 0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002668:	3304      	adds	r3, #4
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3734      	adds	r7, #52	; 0x34
 8002672:	46bd      	mov	sp, r7
 8002674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002676:	bf00      	nop
 8002678:	080095f8 	.word	0x080095f8
 800267c:	20001ce8 	.word	0x20001ce8
 8002680:	08009600 	.word	0x08009600
 8002684:	080096b4 	.word	0x080096b4
 8002688:	0800967c 	.word	0x0800967c
 800268c:	20000008 	.word	0x20000008

08002690 <print_KISS>:

void print_KISS(){
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002692:	b08d      	sub	sp, #52	; 0x34
 8002694:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002696:	4ba5      	ldr	r3, [pc, #660]	; (800292c <print_KISS+0x29c>)
 8002698:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80026a0:	330c      	adds	r3, #12
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [LSB:MSB]\n");
 80026a6:	4ba2      	ldr	r3, [pc, #648]	; (8002930 <print_KISS+0x2a0>)
 80026a8:	4aa2      	ldr	r2, [pc, #648]	; (8002934 <print_KISS+0x2a4>)
 80026aa:	4614      	mov	r4, r2
 80026ac:	469c      	mov	ip, r3
 80026ae:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80026b2:	4665      	mov	r5, ip
 80026b4:	4626      	mov	r6, r4
 80026b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026b8:	6028      	str	r0, [r5, #0]
 80026ba:	6069      	str	r1, [r5, #4]
 80026bc:	60aa      	str	r2, [r5, #8]
 80026be:	60eb      	str	r3, [r5, #12]
 80026c0:	3410      	adds	r4, #16
 80026c2:	f10c 0c10 	add.w	ip, ip, #16
 80026c6:	4574      	cmp	r4, lr
 80026c8:	d1f3      	bne.n	80026b2 <print_KISS+0x22>
 80026ca:	4663      	mov	r3, ip
 80026cc:	4622      	mov	r2, r4
 80026ce:	6810      	ldr	r0, [r2, #0]
 80026d0:	6018      	str	r0, [r3, #0]
 80026d2:	8891      	ldrh	r1, [r2, #4]
 80026d4:	7992      	ldrb	r2, [r2, #6]
 80026d6:	8099      	strh	r1, [r3, #4]
 80026d8:	719a      	strb	r2, [r3, #6]
	debug_print_msg();
 80026da:	f7ff fca7 	bl	800202c <debug_print_msg>

	//Print Start Flag
	curr_mem = local_packet->KISS_PACKET;//start at the flag start
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 80026e6:	4a92      	ldr	r2, [pc, #584]	; (8002930 <print_KISS+0x2a0>)
 80026e8:	4b93      	ldr	r3, [pc, #588]	; (8002938 <print_KISS+0x2a8>)
 80026ea:	4615      	mov	r5, r2
 80026ec:	461c      	mov	r4, r3
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	6028      	str	r0, [r5, #0]
 80026f2:	6069      	str	r1, [r5, #4]
 80026f4:	60aa      	str	r2, [r5, #8]
 80026f6:	60eb      	str	r3, [r5, #12]
 80026f8:	8823      	ldrh	r3, [r4, #0]
 80026fa:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 80026fc:	f7ff fc96 	bl	800202c <debug_print_msg>

	for(int i = 0;i<8;i++){
 8002700:	2300      	movs	r3, #0
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
 8002704:	e00d      	b.n	8002722 <print_KISS+0x92>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	498a      	ldr	r1, [pc, #552]	; (800293c <print_KISS+0x2ac>)
 8002712:	4887      	ldr	r0, [pc, #540]	; (8002930 <print_KISS+0x2a0>)
 8002714:	f005 f954 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002718:	f7ff fc88 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	3301      	adds	r3, #1
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	2b07      	cmp	r3, #7
 8002726:	ddee      	ble.n	8002706 <print_KISS+0x76>
	}
	sprintf(uartData, "\n");
 8002728:	4a81      	ldr	r2, [pc, #516]	; (8002930 <print_KISS+0x2a0>)
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <print_KISS+0x2b0>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002730:	f7ff fc7c 	bl	800202c <debug_print_msg>

	//Print address
	curr_mem = local_packet->address;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800273a:	3310      	adds	r3, #16
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e028      	b.n	8002798 <print_KISS+0x108>
		sprintf(uartData, "Address Field %d =",i+1);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	3301      	adds	r3, #1
 800274a:	461a      	mov	r2, r3
 800274c:	497d      	ldr	r1, [pc, #500]	; (8002944 <print_KISS+0x2b4>)
 800274e:	4878      	ldr	r0, [pc, #480]	; (8002930 <print_KISS+0x2a0>)
 8002750:	f005 f936 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002754:	f7ff fc6a 	bl	800202c <debug_print_msg>

		for(int j = 0;j<8;j++){
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	e00d      	b.n	800277a <print_KISS+0xea>
			sprintf(uartData, " %d ",*(curr_mem+j));
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	4413      	add	r3, r2
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	4974      	ldr	r1, [pc, #464]	; (800293c <print_KISS+0x2ac>)
 800276a:	4871      	ldr	r0, [pc, #452]	; (8002930 <print_KISS+0x2a0>)
 800276c:	f005 f928 	bl	80079c0 <siprintf>
			debug_print_msg();
 8002770:	f7ff fc5c 	bl	800202c <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	3301      	adds	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b07      	cmp	r3, #7
 800277e:	ddee      	ble.n	800275e <print_KISS+0xce>
		}
		curr_mem += 8;
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	3308      	adds	r3, #8
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002786:	4a6a      	ldr	r2, [pc, #424]	; (8002930 <print_KISS+0x2a0>)
 8002788:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <print_KISS+0x2b0>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 800278e:	f7ff fc4d 	bl	800202c <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3301      	adds	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	2b0d      	cmp	r3, #13
 800279c:	ddd3      	ble.n	8002746 <print_KISS+0xb6>
	}

	//Print Control Field
	curr_mem = (local_packet->control);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80027a4:	3314      	adds	r3, #20
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80027aa:	4a61      	ldr	r2, [pc, #388]	; (8002930 <print_KISS+0x2a0>)
 80027ac:	4b66      	ldr	r3, [pc, #408]	; (8002948 <print_KISS+0x2b8>)
 80027ae:	4615      	mov	r5, r2
 80027b0:	461c      	mov	r4, r3
 80027b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b4:	6028      	str	r0, [r5, #0]
 80027b6:	6069      	str	r1, [r5, #4]
 80027b8:	60aa      	str	r2, [r5, #8]
 80027ba:	60eb      	str	r3, [r5, #12]
 80027bc:	8823      	ldrh	r3, [r4, #0]
 80027be:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 80027c0:	f7ff fc34 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	e00d      	b.n	80027e6 <print_KISS+0x156>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ce:	4413      	add	r3, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4959      	ldr	r1, [pc, #356]	; (800293c <print_KISS+0x2ac>)
 80027d6:	4856      	ldr	r0, [pc, #344]	; (8002930 <print_KISS+0x2a0>)
 80027d8:	f005 f8f2 	bl	80079c0 <siprintf>
		debug_print_msg();
 80027dc:	f7ff fc26 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3301      	adds	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b07      	cmp	r3, #7
 80027ea:	ddee      	ble.n	80027ca <print_KISS+0x13a>
	}
	sprintf(uartData, "\n");
 80027ec:	4a50      	ldr	r2, [pc, #320]	; (8002930 <print_KISS+0x2a0>)
 80027ee:	4b54      	ldr	r3, [pc, #336]	; (8002940 <print_KISS+0x2b0>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80027f4:	f7ff fc1a 	bl	800202c <debug_print_msg>

	//PID
	curr_mem = (local_packet->PID);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80027fe:	3318      	adds	r3, #24
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002804:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <print_KISS+0x2a0>)
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <print_KISS+0x2bc>)
 8002808:	4615      	mov	r5, r2
 800280a:	461c      	mov	r4, r3
 800280c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280e:	6028      	str	r0, [r5, #0]
 8002810:	6069      	str	r1, [r5, #4]
 8002812:	60aa      	str	r2, [r5, #8]
 8002814:	60eb      	str	r3, [r5, #12]
 8002816:	8823      	ldrh	r3, [r4, #0]
 8002818:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 800281a:	f7ff fc07 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e00d      	b.n	8002840 <print_KISS+0x1b0>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4943      	ldr	r1, [pc, #268]	; (800293c <print_KISS+0x2ac>)
 8002830:	483f      	ldr	r0, [pc, #252]	; (8002930 <print_KISS+0x2a0>)
 8002832:	f005 f8c5 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002836:	f7ff fbf9 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	3301      	adds	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b07      	cmp	r3, #7
 8002844:	ddee      	ble.n	8002824 <print_KISS+0x194>
	}
	sprintf(uartData, "\n");
 8002846:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <print_KISS+0x2a0>)
 8002848:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <print_KISS+0x2b0>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800284e:	f7ff fbed 	bl	800202c <debug_print_msg>

	//Print Info Field
	curr_mem = local_packet->Info;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002858:	331c      	adds	r3, #28
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c

	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e028      	b.n	80028b6 <print_KISS+0x226>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	461a      	mov	r2, r3
 800286a:	4939      	ldr	r1, [pc, #228]	; (8002950 <print_KISS+0x2c0>)
 800286c:	4830      	ldr	r0, [pc, #192]	; (8002930 <print_KISS+0x2a0>)
 800286e:	f005 f8a7 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002872:	f7ff fbdb 	bl	800202c <debug_print_msg>

		for(int j = 0;j<8;j++){
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	e00d      	b.n	8002898 <print_KISS+0x208>
			sprintf(uartData, " %d ",*(curr_mem+j));
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002880:	4413      	add	r3, r2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	492d      	ldr	r1, [pc, #180]	; (800293c <print_KISS+0x2ac>)
 8002888:	4829      	ldr	r0, [pc, #164]	; (8002930 <print_KISS+0x2a0>)
 800288a:	f005 f899 	bl	80079c0 <siprintf>
			debug_print_msg();
 800288e:	f7ff fbcd 	bl	800202c <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	3301      	adds	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b07      	cmp	r3, #7
 800289c:	ddee      	ble.n	800287c <print_KISS+0x1ec>
		}
		curr_mem += 8;
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	3308      	adds	r3, #8
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <print_KISS+0x2a0>)
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <print_KISS+0x2b0>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80028ac:	f7ff fbbe 	bl	800202c <debug_print_msg>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da00      	bge.n	80028c4 <print_KISS+0x234>
 80028c2:	3307      	adds	r3, #7
 80028c4:	10db      	asrs	r3, r3, #3
 80028c6:	461a      	mov	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	dbca      	blt.n	8002864 <print_KISS+0x1d4>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <print_KISS+0x2a0>)
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <print_KISS+0x2c4>)
 80028da:	4615      	mov	r5, r2
 80028dc:	461c      	mov	r4, r3
 80028de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e0:	6028      	str	r0, [r5, #0]
 80028e2:	6069      	str	r1, [r5, #4]
 80028e4:	60aa      	str	r2, [r5, #8]
 80028e6:	60eb      	str	r3, [r5, #12]
 80028e8:	8823      	ldrh	r3, [r4, #0]
 80028ea:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 80028ec:	f7ff fb9e 	bl	800202c <debug_print_msg>

	for(int i = 0;i<8;i++){
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e00d      	b.n	8002912 <print_KISS+0x282>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fa:	4413      	add	r3, r2
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <print_KISS+0x2ac>)
 8002902:	480b      	ldr	r0, [pc, #44]	; (8002930 <print_KISS+0x2a0>)
 8002904:	f005 f85c 	bl	80079c0 <siprintf>
		debug_print_msg();
 8002908:	f7ff fb90 	bl	800202c <debug_print_msg>
	for(int i = 0;i<8;i++){
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3301      	adds	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b07      	cmp	r3, #7
 8002916:	ddee      	ble.n	80028f6 <print_KISS+0x266>
	}
	sprintf(uartData, "\n");
 8002918:	4a05      	ldr	r2, [pc, #20]	; (8002930 <print_KISS+0x2a0>)
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <print_KISS+0x2b0>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002920:	f7ff fb84 	bl	800202c <debug_print_msg>

}
 8002924:	bf00      	nop
 8002926:	3734      	adds	r7, #52	; 0x34
 8002928:	46bd      	mov	sp, r7
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292c:	200000e4 	.word	0x200000e4
 8002930:	20001ce8 	.word	0x20001ce8
 8002934:	080096c4 	.word	0x080096c4
 8002938:	080096fc 	.word	0x080096fc
 800293c:	080095f8 	.word	0x080095f8
 8002940:	08009600 	.word	0x08009600
 8002944:	080095e4 	.word	0x080095e4
 8002948:	08009604 	.word	0x08009604
 800294c:	08009618 	.word	0x08009618
 8002950:	0800962c 	.word	0x0800962c
 8002954:	08009710 	.word	0x08009710

08002958 <print_array_octet>:
	debug_print_msg();
}
//****************************************************************************************************************
//End of compare buffers

void print_array_octet(bool* array,int array_size){
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	sprintf(uartData, "Printing array:\n");
 8002962:	4a2a      	ldr	r2, [pc, #168]	; (8002a0c <print_array_octet+0xb4>)
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <print_array_octet+0xb8>)
 8002966:	4615      	mov	r5, r2
 8002968:	461c      	mov	r4, r3
 800296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296c:	6028      	str	r0, [r5, #0]
 800296e:	6069      	str	r1, [r5, #4]
 8002970:	60aa      	str	r2, [r5, #8]
 8002972:	60eb      	str	r3, [r5, #12]
 8002974:	7823      	ldrb	r3, [r4, #0]
 8002976:	742b      	strb	r3, [r5, #16]
	debug_print_msg();
 8002978:	f7ff fb58 	bl	800202c <debug_print_msg>

	//Byte at a time
	for(int i = 0;i<array_size/8;i++){
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e027      	b.n	80029d2 <print_array_octet+0x7a>
		sprintf(uartData, "Byte %d:",i);
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4923      	ldr	r1, [pc, #140]	; (8002a14 <print_array_octet+0xbc>)
 8002986:	4821      	ldr	r0, [pc, #132]	; (8002a0c <print_array_octet+0xb4>)
 8002988:	f005 f81a 	bl	80079c0 <siprintf>
		debug_print_msg();
 800298c:	f7ff fb4e 	bl	800202c <debug_print_msg>

		//Print each bit
		for(int j = 0;j<8;j++){
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	e011      	b.n	80029ba <print_array_octet+0x62>
			sprintf(uartData, " %d ",*(array+(i*8)+j));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	461a      	mov	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4413      	add	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	491b      	ldr	r1, [pc, #108]	; (8002a18 <print_array_octet+0xc0>)
 80029aa:	4818      	ldr	r0, [pc, #96]	; (8002a0c <print_array_octet+0xb4>)
 80029ac:	f005 f808 	bl	80079c0 <siprintf>
			debug_print_msg();
 80029b0:	f7ff fb3c 	bl	800202c <debug_print_msg>
		for(int j = 0;j<8;j++){
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3301      	adds	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b07      	cmp	r3, #7
 80029be:	ddea      	ble.n	8002996 <print_array_octet+0x3e>
		}
		sprintf(uartData, "\n");
 80029c0:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <print_array_octet+0xb4>)
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <print_array_octet+0xc4>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80029c8:	f7ff fb30 	bl	800202c <debug_print_msg>
	for(int i = 0;i<array_size/8;i++){
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da00      	bge.n	80029da <print_array_octet+0x82>
 80029d8:	3307      	adds	r3, #7
 80029da:	10db      	asrs	r3, r3, #3
 80029dc:	461a      	mov	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4293      	cmp	r3, r2
 80029e2:	dbce      	blt.n	8002982 <print_array_octet+0x2a>
	}

	sprintf(uartData, "Finished Printing Array\n");
 80029e4:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <print_array_octet+0xb4>)
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <print_array_octet+0xc8>)
 80029e8:	4615      	mov	r5, r2
 80029ea:	461c      	mov	r4, r3
 80029ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ee:	6028      	str	r0, [r5, #0]
 80029f0:	6069      	str	r1, [r5, #4]
 80029f2:	60aa      	str	r2, [r5, #8]
 80029f4:	60eb      	str	r3, [r5, #12]
 80029f6:	cc03      	ldmia	r4!, {r0, r1}
 80029f8:	6128      	str	r0, [r5, #16]
 80029fa:	6169      	str	r1, [r5, #20]
 80029fc:	7823      	ldrb	r3, [r4, #0]
 80029fe:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 8002a00:	f7ff fb14 	bl	800202c <debug_print_msg>
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0c:	20001ce8 	.word	0x20001ce8
 8002a10:	0800984c 	.word	0x0800984c
 8002a14:	08009860 	.word	0x08009860
 8002a18:	080095f8 	.word	0x080095f8
 8002a1c:	08009600 	.word	0x08009600
 8002a20:	0800986c 	.word	0x0800986c

08002a24 <Tim2_OC_Callback>:
int byteArray[8];
bool got_flag_start = false;
bool got_flag_end = false;

//Timer 2 Output Compare Callback
void Tim2_OC_Callback(){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
	static int save_cnt;
	static int flag_cnt;
	bool isFlag = false;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA,D1_Pin,clk_sync);
 8002a2e:	4b7c      	ldr	r3, [pc, #496]	; (8002c20 <Tim2_OC_Callback+0x1fc>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a38:	487a      	ldr	r0, [pc, #488]	; (8002c24 <Tim2_OC_Callback+0x200>)
 8002a3a:	f002 f80d 	bl	8004a58 <HAL_GPIO_WritePin>

	freq_pin_state_last = hold_state;
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <Tim2_OC_Callback+0x204>)
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <Tim2_OC_Callback+0x208>)
 8002a44:	701a      	strb	r2, [r3, #0]

	//Check if this is valid data
	if(clk_sync){
 8002a46:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <Tim2_OC_Callback+0x1fc>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80ca 	beq.w	8002be4 <Tim2_OC_Callback+0x1c0>
		NRZI = (freq_pin_state_curr==freq_pin_state_last) ? 1 : 0;
 8002a50:	4b77      	ldr	r3, [pc, #476]	; (8002c30 <Tim2_OC_Callback+0x20c>)
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <Tim2_OC_Callback+0x208>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <Tim2_OC_Callback+0x210>)
 8002a64:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA,D0_Pin,NRZI);
 8002a66:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <Tim2_OC_Callback+0x210>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a70:	486c      	ldr	r0, [pc, #432]	; (8002c24 <Tim2_OC_Callback+0x200>)
 8002a72:	f001 fff1 	bl	8004a58 <HAL_GPIO_WritePin>

		//Shift byte array for next comparison
//		memmove(&byteArray[1],&byteArray[0],7*sizeof(int));
		for(int i = 7;i>0;i--){
 8002a76:	2307      	movs	r3, #7
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	e00b      	b.n	8002a94 <Tim2_OC_Callback+0x70>
			byteArray[i] = byteArray[i-1];
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	4a6d      	ldr	r2, [pc, #436]	; (8002c38 <Tim2_OC_Callback+0x214>)
 8002a82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a86:	496c      	ldr	r1, [pc, #432]	; (8002c38 <Tim2_OC_Callback+0x214>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 7;i>0;i--){
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	dcf0      	bgt.n	8002a7c <Tim2_OC_Callback+0x58>
		}

		byteArray[0] = NRZI;
 8002a9a:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <Tim2_OC_Callback+0x210>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <Tim2_OC_Callback+0x214>)
 8002aa2:	601a      	str	r2, [r3, #0]
		//11111100
		//01111110


		//Check if this is the flag
		for (int i = 0; i < 8; i++) {
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e014      	b.n	8002ad4 <Tim2_OC_Callback+0xb0>
			if(byteArray[i] != AX25TBYTE[i]){
 8002aaa:	4a63      	ldr	r2, [pc, #396]	; (8002c38 <Tim2_OC_Callback+0x214>)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	4962      	ldr	r1, [pc, #392]	; (8002c3c <Tim2_OC_Callback+0x218>)
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	440a      	add	r2, r1
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d002      	beq.n	8002ac4 <Tim2_OC_Callback+0xa0>
				isFlag = false;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]
				break;
 8002ac2:	e00a      	b.n	8002ada <Tim2_OC_Callback+0xb6>
			}
			//Got to end of byte array
			if(i==7){
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b07      	cmp	r3, #7
 8002ac8:	d101      	bne.n	8002ace <Tim2_OC_Callback+0xaa>
				isFlag = true;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 8; i++) {
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b07      	cmp	r3, #7
 8002ad8:	dde7      	ble.n	8002aaa <Tim2_OC_Callback+0x86>
			}
		}
		//If this is not a flag, copy the values into the buffer pointer
		if(isFlag){
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d023      	beq.n	8002b28 <Tim2_OC_Callback+0x104>
			flag_cnt++;
 8002ae0:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <Tim2_OC_Callback+0x21c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <Tim2_OC_Callback+0x21c>)
 8002ae8:	6013      	str	r3, [r2, #0]

			//If we have a start flag, this is an end flag
			if(got_flag_start){
 8002aea:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <Tim2_OC_Callback+0x220>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <Tim2_OC_Callback+0xdc>
				got_flag_start = false;
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <Tim2_OC_Callback+0x220>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
				got_flag_end = true;
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <Tim2_OC_Callback+0x224>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e010      	b.n	8002b22 <Tim2_OC_Callback+0xfe>
			}

			//Not sure how many appending flags????????
			else if(flag_cnt>=FLAG_END_COUNT){
 8002b00:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <Tim2_OC_Callback+0x21c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	dd0c      	ble.n	8002b22 <Tim2_OC_Callback+0xfe>
				//If no start flag has occurred
				if(!got_flag_start){
 8002b08:	4b4e      	ldr	r3, [pc, #312]	; (8002c44 <Tim2_OC_Callback+0x220>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <Tim2_OC_Callback+0xf8>
					got_flag_start = true;
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <Tim2_OC_Callback+0x220>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
				}

				//Reset flag count
				flag_cnt = 0;
 8002b1c:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <Tim2_OC_Callback+0x21c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
			}

			//Reset flag var
			isFlag = false;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
 8002b26:	e011      	b.n	8002b4c <Tim2_OC_Callback+0x128>
		}

		else if(got_flag_start){
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <Tim2_OC_Callback+0x220>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <Tim2_OC_Callback+0x128>
			HAL_GPIO_TogglePin(GPIOB,D2_Pin);
 8002b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b34:	4845      	ldr	r0, [pc, #276]	; (8002c4c <Tim2_OC_Callback+0x228>)
 8002b36:	f001 ffa8 	bl	8004a8a <HAL_GPIO_TogglePin>
			//Load the processed bit into the buffer
			save_cnt = loadBitBuffer(NRZI)+1;
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <Tim2_OC_Callback+0x210>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fa12 	bl	8001f68 <loadBitBuffer>
 8002b44:	4603      	mov	r3, r0
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a41      	ldr	r2, [pc, #260]	; (8002c50 <Tim2_OC_Callback+0x22c>)
 8002b4a:	6013      	str	r3, [r2, #0]
		}

		//Found ending flag, now need to process bit buffer
		if(got_flag_end){
 8002b4c:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <Tim2_OC_Callback+0x224>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d039      	beq.n	8002bc8 <Tim2_OC_Callback+0x1a4>
			got_flag_end = false;
 8002b54:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <Tim2_OC_Callback+0x224>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB,D3_Pin);
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	483b      	ldr	r0, [pc, #236]	; (8002c4c <Tim2_OC_Callback+0x228>)
 8002b5e:	f001 ff94 	bl	8004a8a <HAL_GPIO_TogglePin>

			//Disable Interrupts for data processing
			HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8002b62:	2100      	movs	r1, #0
 8002b64:	483b      	ldr	r0, [pc, #236]	; (8002c54 <Tim2_OC_Callback+0x230>)
 8002b66:	f002 fe17 	bl	8005798 <HAL_TIM_OC_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	483a      	ldr	r0, [pc, #232]	; (8002c58 <Tim2_OC_Callback+0x234>)
 8002b6e:	f002 ff4b 	bl	8005a08 <HAL_TIM_IC_Stop_IT>

			//Buffer will be filled with ending flags, dont want this in ax.25 buffer
			save_cnt -= FLAG_SIZE;
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <Tim2_OC_Callback+0x22c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3b08      	subs	r3, #8
 8002b78:	4a35      	ldr	r2, [pc, #212]	; (8002c50 <Tim2_OC_Callback+0x22c>)
 8002b7a:	6013      	str	r3, [r2, #0]
			rxBit_count = save_cnt;
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <Tim2_OC_Callback+0x22c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a36      	ldr	r2, [pc, #216]	; (8002c5c <Tim2_OC_Callback+0x238>)
 8002b82:	6013      	str	r3, [r2, #0]

//			sprintf(uartData, "byte_cnt = %d\n",global_packet.byte_cnt);
//			debug_print_msg();

			memcpy(global_packet.AX25_PACKET,bitBuffer,save_cnt);
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <Tim2_OC_Callback+0x22c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4935      	ldr	r1, [pc, #212]	; (8002c60 <Tim2_OC_Callback+0x23c>)
 8002b8c:	4835      	ldr	r0, [pc, #212]	; (8002c64 <Tim2_OC_Callback+0x240>)
 8002b8e:	f004 feeb 	bl	8007968 <memcpy>

//			compareBoolBuffers(bitBuffer,global_packet.AX25_PACKET,rxBit_count);

			remove_bit_stuffing();
 8002b92:	f7fe fb49 	bl	8001228 <remove_bit_stuffing>
			global_packet.byte_cnt = rxBit_count/8;
 8002b96:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <Tim2_OC_Callback+0x238>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da00      	bge.n	8002ba0 <Tim2_OC_Callback+0x17c>
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	10db      	asrs	r3, r3, #3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <Tim2_OC_Callback+0x240>)
 8002ba6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002baa:	330c      	adds	r3, #12
 8002bac:	601a      	str	r2, [r3, #0]

			//Receive data
			receiving_AX25();
 8002bae:	f7fe fafb 	bl	80011a8 <receiving_AX25>

			save_cnt = 0;
 8002bb2:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <Tim2_OC_Callback+0x22c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

			//Enable Interrupts since data processing is complete
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4826      	ldr	r0, [pc, #152]	; (8002c54 <Tim2_OC_Callback+0x230>)
 8002bbc:	f002 fd68 	bl	8005690 <HAL_TIM_OC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4825      	ldr	r0, [pc, #148]	; (8002c58 <Tim2_OC_Callback+0x234>)
 8002bc4:	f002 feb8 	bl	8005938 <HAL_TIM_IC_Start_IT>
		}

		//Prepare OC for next sample
		uint32_t this_capture = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <Tim2_OC_Callback+0x230>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	60bb      	str	r3, [r7, #8]
		uint32_t next_sampl = this_capture + bit_sample_period;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002bd6:	3335      	adds	r3, #53	; 0x35
 8002bd8:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,next_sampl); // if we have not received a transition to the input capture module, we want to refresh the output compare module with the last known bit period
 8002bda:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <Tim2_OC_Callback+0x230>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
 8002be2:	e008      	b.n	8002bf6 <Tim2_OC_Callback+0x1d2>
	}

	//Clock not syncd
	else
	{
		got_flag_start = false;
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <Tim2_OC_Callback+0x220>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
		got_flag_end = false;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <Tim2_OC_Callback+0x224>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
		flag_cnt = 0;
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <Tim2_OC_Callback+0x21c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
	}

	//Inc number of bits since last clock sync
	captured_bits_count++;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <Tim2_OC_Callback+0x244>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <Tim2_OC_Callback+0x244>)
 8002c00:	701a      	strb	r2, [r3, #0]
	if(captured_bits_count >= samp_per_bit * no_clk_max_cnt){
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <Tim2_OC_Callback+0x244>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b3f      	cmp	r3, #63	; 0x3f
 8002c08:	d902      	bls.n	8002c10 <Tim2_OC_Callback+0x1ec>
		clk_sync = false;	//Clock is no longer sync
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <Tim2_OC_Callback+0x1fc>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
	}
	hold_state = freq_pin_state_curr;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <Tim2_OC_Callback+0x20c>)
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <Tim2_OC_Callback+0x204>)
 8002c16:	701a      	strb	r2, [r3, #0]

	return;
 8002c18:	bf00      	nop
}
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200000b1 	.word	0x200000b1
 8002c24:	40020000 	.word	0x40020000
 8002c28:	20003484 	.word	0x20003484
 8002c2c:	200000c3 	.word	0x200000c3
 8002c30:	200000c2 	.word	0x200000c2
 8002c34:	2000348c 	.word	0x2000348c
 8002c38:	20003490 	.word	0x20003490
 8002c3c:	20000008 	.word	0x20000008
 8002c40:	200000c8 	.word	0x200000c8
 8002c44:	200000c4 	.word	0x200000c4
 8002c48:	200000c5 	.word	0x200000c5
 8002c4c:	40020400 	.word	0x40020400
 8002c50:	200000cc 	.word	0x200000cc
 8002c54:	200029a4 	.word	0x200029a4
 8002c58:	200028ac 	.word	0x200028ac
 8002c5c:	200000a4 	.word	0x200000a4
 8002c60:	20002a24 	.word	0x20002a24
 8002c64:	200000e4 	.word	0x200000e4
 8002c68:	200000b0 	.word	0x200000b0

08002c6c <Tim3_IT_Callback>:
void Tim3_IT_Callback() {
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
	if (mode) {
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <Tim3_IT_Callback+0x1c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <Tim3_IT_Callback+0x12>
		midbit = false;
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <Tim3_IT_Callback+0x20>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
	}
	//Timer 3 does nothing in RX
	else {}
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	2000298c 	.word	0x2000298c
 8002c8c:	200000a8 	.word	0x200000a8

08002c90 <Tim5_IC_Callback>:
//Timer 5 Input Capture Callback
void Tim5_IC_Callback(){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
	uint32_t this_capture = 0;		// simply stores either the rising or falling capture, based on which state we are in (avoids duplicate code)
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]

	//Grap pin state for OC timer
	freq_pin_state_curr = signal_edge;
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <Tim5_IC_Callback+0x104>)
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <Tim5_IC_Callback+0x108>)
 8002ca0:	701a      	strb	r2, [r3, #0]

	//Rising Edge
	if (signal_edge)
 8002ca2:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <Tim5_IC_Callback+0x104>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01f      	beq.n	8002cea <Tim5_IC_Callback+0x5a>
	{
		rising_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1); //Time-stamp interrupt
 8002caa:	2100      	movs	r1, #0
 8002cac:	483b      	ldr	r0, [pc, #236]	; (8002d9c <Tim5_IC_Callback+0x10c>)
 8002cae:	f003 f9d7 	bl	8006060 <HAL_TIM_ReadCapturedValue>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <Tim5_IC_Callback+0x110>)
 8002cb6:	601a      	str	r2, [r3, #0]
		signal_edge = FALLING_EDGE;		// look for falling edge on next capture
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <Tim5_IC_Callback+0x104>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
		rise_captured = true;
 8002cbe:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <Tim5_IC_Callback+0x114>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 8002cc4:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <Tim5_IC_Callback+0x114>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02d      	beq.n	8002d28 <Tim5_IC_Callback+0x98>
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <Tim5_IC_Callback+0x118>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d029      	beq.n	8002d28 <Tim5_IC_Callback+0x98>
		{
			capture_difference = rising_capture - falling_capture;		// calculate difference
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <Tim5_IC_Callback+0x110>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <Tim5_IC_Callback+0x11c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <Tim5_IC_Callback+0x120>)
 8002ce0:	6013      	str	r3, [r2, #0]
			this_capture = rising_capture;		// set current sample to rising edge
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <Tim5_IC_Callback+0x110>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	e01e      	b.n	8002d28 <Tim5_IC_Callback+0x98>
	}

	//Falling edge
	else
	{
		falling_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);		//Time-stamp interrupt
 8002cea:	2100      	movs	r1, #0
 8002cec:	482b      	ldr	r0, [pc, #172]	; (8002d9c <Tim5_IC_Callback+0x10c>)
 8002cee:	f003 f9b7 	bl	8006060 <HAL_TIM_ReadCapturedValue>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <Tim5_IC_Callback+0x11c>)
 8002cf6:	601a      	str	r2, [r3, #0]
		fall_captured = true;
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <Tim5_IC_Callback+0x118>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
		signal_edge = RISING_EDGE;		// look for rising edge on next capture
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <Tim5_IC_Callback+0x104>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <Tim5_IC_Callback+0x114>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <Tim5_IC_Callback+0x98>
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <Tim5_IC_Callback+0x118>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <Tim5_IC_Callback+0x98>
		{
			capture_difference = falling_capture - rising_capture;		// calculate difference
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <Tim5_IC_Callback+0x11c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <Tim5_IC_Callback+0x110>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <Tim5_IC_Callback+0x120>)
 8002d20:	6013      	str	r3, [r2, #0]
			this_capture = falling_capture;
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <Tim5_IC_Callback+0x11c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	607b      	str	r3, [r7, #4]
		}
	}

	//Have now captured the transition period
	//Can use this to align sampling clock
	if (rise_captured && fall_captured)
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <Tim5_IC_Callback+0x114>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02d      	beq.n	8002d8c <Tim5_IC_Callback+0xfc>
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <Tim5_IC_Callback+0x118>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d029      	beq.n	8002d8c <Tim5_IC_Callback+0xfc>
	{
		//Check if the transition was a valid transition period to use
		if(SYMBOL_PERIOD-SYMBOL_MARGIN < capture_difference && capture_difference < SYMBOL_PERIOD+SYMBOL_MARGIN){
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <Tim5_IC_Callback+0x120>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f247 5230 	movw	r2, #30000	; 0x7530
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d923      	bls.n	8002d8c <Tim5_IC_Callback+0xfc>
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <Tim5_IC_Callback+0x120>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f648 7239 	movw	r2, #36665	; 0x8f39
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d81d      	bhi.n	8002d8c <Tim5_IC_Callback+0xfc>

			//Predict clock
			uint32_t next_sampl;

			//If clk was not sync, start sample one period later
			if(!clk_sync){
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <Tim5_IC_Callback+0x124>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <Tim5_IC_Callback+0xde>
				resetBitBuffer();
 8002d5e:	f7ff f945 	bl	8001fec <resetBitBuffer>
				next_sampl = this_capture + SYMBOL_PERIOD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002d68:	3335      	adds	r3, #53	; 0x35
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	e004      	b.n	8002d78 <Tim5_IC_Callback+0xe8>
			}
			//If clk was sync, sample at normal interval
			else {
				next_sampl = this_capture + bit_sample_period;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002d74:	3335      	adds	r3, #53	; 0x35
 8002d76:	603b      	str	r3, [r7, #0]
			}
			//Prepare OC timer int
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_sampl);
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <Tim5_IC_Callback+0x128>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34
			//Reset roll-over value
			captured_bits_count = 0;
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <Tim5_IC_Callback+0x12c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]

			//Have now synced with clock
			clk_sync = true;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <Tim5_IC_Callback+0x124>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000011 	.word	0x20000011
 8002d98:	200000c2 	.word	0x200000c2
 8002d9c:	200028ac 	.word	0x200028ac
 8002da0:	200000b4 	.word	0x200000b4
 8002da4:	200000c0 	.word	0x200000c0
 8002da8:	200000c1 	.word	0x200000c1
 8002dac:	200000b8 	.word	0x200000b8
 8002db0:	200000bc 	.word	0x200000bc
 8002db4:	200000b1 	.word	0x200000b1
 8002db8:	200029a4 	.word	0x200029a4
 8002dbc:	200000b0 	.word	0x200000b0

08002dc0 <init_UART>:

void init_UART(){
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4909      	ldr	r1, [pc, #36]	; (8002dec <init_UART+0x2c>)
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <init_UART+0x30>)
 8002dca:	f003 ff51 	bl	8006c70 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <init_UART+0x34>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <init_UART+0x34>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <init_UART+0x34>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <init_UART+0x34>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000145c 	.word	0x2000145c
 8002df0:	200029e4 	.word	0x200029e4
 8002df4:	20001450 	.word	0x20001450

08002df8 <UART2_Exception_Callback>:
void UART2_Exception_Callback(){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	491d      	ldr	r1, [pc, #116]	; (8002e74 <UART2_Exception_Callback+0x7c>)
 8002e00:	481d      	ldr	r0, [pc, #116]	; (8002e78 <UART2_Exception_Callback+0x80>)
 8002e02:	f003 ff35 	bl	8006c70 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e0e:	7b1b      	ldrb	r3, [r3, #12]
 8002e10:	2bc0      	cmp	r3, #192	; 0xc0
 8002e12:	d104      	bne.n	8002e1e <UART2_Exception_Callback+0x26>
		  UART_packet.flags++;
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e1c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <UART2_Exception_Callback+0x88>)
 8002e26:	4413      	add	r3, r2
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e2a:	7b12      	ldrb	r2, [r2, #12]
 8002e2c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e36:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	dd16      	ble.n	8002e6e <UART2_Exception_Callback+0x76>
		  if(!mode){
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <UART2_Exception_Callback+0x8c>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f083 0301 	eor.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <UART2_Exception_Callback+0x5c>
			  changeMode = true;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <UART2_Exception_Callback+0x90>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e66:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <UART2_Exception_Callback+0x84>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

	  }
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2000145c 	.word	0x2000145c
 8002e78:	200029e4 	.word	0x200029e4
 8002e7c:	20001450 	.word	0x20001450
 8002e80:	2000145e 	.word	0x2000145e
 8002e84:	2000298c 	.word	0x2000298c
 8002e88:	200000a9 	.word	0x200000a9

08002e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e90:	f000 fea2 	bl	8003bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e94:	f000 f818 	bl	8002ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e98:	f000 fa88 	bl	80033ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002e9c:	f000 fa5e 	bl	800335c <MX_DMA_Init>
  MX_DAC_Init();
 8002ea0:	f000 f87e 	bl	8002fa0 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8002ea4:	f000 fa28 	bl	80032f8 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8002ea8:	f000 f9b6 	bl	8003218 <MX_TIM5_Init>
  MX_TIM2_Init();
 8002eac:	f000 f8a2 	bl	8002ff4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002eb0:	f000 f916 	bl	80030e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002eb4:	f000 f962 	bl	800317c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	uart_gpio_init();
 8002eb8:	f000 fb7a 	bl	80035b0 <uart_gpio_init>
	initProgram(false);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fe ffcd 	bl	8001e5c <initProgram>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		tx_rx();
 8002ec2:	f7fe f8d9 	bl	8001078 <tx_rx>
 8002ec6:	e7fc      	b.n	8002ec2 <main+0x36>

08002ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b094      	sub	sp, #80	; 0x50
 8002ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ece:	f107 031c 	add.w	r3, r7, #28
 8002ed2:	2234      	movs	r2, #52	; 0x34
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f004 fd6a 	bl	80079b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eec:	2300      	movs	r3, #0
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <SystemClock_Config+0xd0>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <SystemClock_Config+0xd0>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efa:	6413      	str	r3, [r2, #64]	; 0x40
 8002efc:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <SystemClock_Config+0xd0>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <SystemClock_Config+0xd4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f14:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <SystemClock_Config+0xd4>)
 8002f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <SystemClock_Config+0xd4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f30:	2310      	movs	r3, #16
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f34:	2302      	movs	r3, #2
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002f40:	2350      	movs	r3, #80	; 0x50
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f44:	2302      	movs	r3, #2
 8002f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 f891 	bl	800507c <HAL_RCC_OscConfig>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002f60:	f000 fb4e 	bl	8003600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f64:	230f      	movs	r3, #15
 8002f66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	2102      	movs	r1, #2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 fdc1 	bl	8004b08 <HAL_RCC_ClockConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f8c:	f000 fb38 	bl	8003600 <Error_Handler>
  }
}
 8002f90:	bf00      	nop
 8002f92:	3750      	adds	r7, #80	; 0x50
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40007000 	.word	0x40007000

08002fa0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <MX_DAC_Init+0x4c>)
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <MX_DAC_Init+0x50>)
 8002fb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <MX_DAC_Init+0x4c>)
 8002fb6:	f000 ff92 	bl	8003ede <HAL_DAC_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002fc0:	f000 fb1e 	bl	8003600 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8002fc4:	232c      	movs	r3, #44	; 0x2c
 8002fc6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002fcc:	463b      	mov	r3, r7
 8002fce:	2200      	movs	r2, #0
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4806      	ldr	r0, [pc, #24]	; (8002fec <MX_DAC_Init+0x4c>)
 8002fd4:	f000 ffe6 	bl	8003fa4 <HAL_DAC_ConfigChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002fde:	f000 fb0f 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20002990 	.word	0x20002990
 8002ff0:	40007400 	.word	0x40007400

08002ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	; 0x38
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	615a      	str	r2, [r3, #20]
 8003022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800302a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <MX_TIM2_Init+0xe8>)
 800302e:	2201      	movs	r2, #1
 8003030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <MX_TIM2_Init+0xe8>)
 800303a:	f04f 32ff 	mov.w	r2, #4294967295
 800303e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800304c:	4823      	ldr	r0, [pc, #140]	; (80030dc <MX_TIM2_Init+0xe8>)
 800304e:	f002 fa6f 	bl	8005530 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003058:	f000 fad2 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800305c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003066:	4619      	mov	r1, r3
 8003068:	481c      	ldr	r0, [pc, #112]	; (80030dc <MX_TIM2_Init+0xe8>)
 800306a:	f002 ff41 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003074:	f000 fac4 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003078:	4818      	ldr	r0, [pc, #96]	; (80030dc <MX_TIM2_Init+0xe8>)
 800307a:	f002 fad3 	bl	8005624 <HAL_TIM_OC_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003084:	f000 fabc 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003090:	f107 0320 	add.w	r3, r7, #32
 8003094:	4619      	mov	r1, r3
 8003096:	4811      	ldr	r0, [pc, #68]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003098:	f003 fc74 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80030a2:	f000 faad 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2200      	movs	r2, #0
 80030ba:	4619      	mov	r1, r3
 80030bc:	4807      	ldr	r0, [pc, #28]	; (80030dc <MX_TIM2_Init+0xe8>)
 80030be:	f002 fe1b 	bl	8005cf8 <HAL_TIM_OC_ConfigChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80030c8:	f000 fa9a 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030cc:	4803      	ldr	r0, [pc, #12]	; (80030dc <MX_TIM2_Init+0xe8>)
 80030ce:	f000 fc13 	bl	80038f8 <HAL_TIM_MspPostInit>

}
 80030d2:	bf00      	nop
 80030d4:	3738      	adds	r7, #56	; 0x38
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200029a4 	.word	0x200029a4

080030e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030e6:	f107 0308 	add.w	r3, r7, #8
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f4:	463b      	mov	r3, r7
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <MX_TIM3_Init+0x94>)
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <MX_TIM3_Init+0x98>)
 8003100:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <MX_TIM3_Init+0x94>)
 8003104:	224f      	movs	r2, #79	; 0x4f
 8003106:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <MX_TIM3_Init+0x94>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 828;
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <MX_TIM3_Init+0x94>)
 8003110:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8003114:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <MX_TIM3_Init+0x94>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <MX_TIM3_Init+0x94>)
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003122:	4814      	ldr	r0, [pc, #80]	; (8003174 <MX_TIM3_Init+0x94>)
 8003124:	f002 fa04 	bl	8005530 <HAL_TIM_Base_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800312e:	f000 fa67 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003138:	f107 0308 	add.w	r3, r7, #8
 800313c:	4619      	mov	r1, r3
 800313e:	480d      	ldr	r0, [pc, #52]	; (8003174 <MX_TIM3_Init+0x94>)
 8003140:	f002 fed6 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800314a:	f000 fa59 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003156:	463b      	mov	r3, r7
 8003158:	4619      	mov	r1, r3
 800315a:	4806      	ldr	r0, [pc, #24]	; (8003174 <MX_TIM3_Init+0x94>)
 800315c:	f003 fc12 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003166:	f000 fa4b 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200028ec 	.word	0x200028ec
 8003178:	40000400 	.word	0x40000400

0800317c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003190:	463b      	mov	r3, r7
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <MX_TIM4_Init+0x94>)
 800319a:	4a1e      	ldr	r2, [pc, #120]	; (8003214 <MX_TIM4_Init+0x98>)
 800319c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <MX_TIM4_Init+0x94>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <MX_TIM4_Init+0x94>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <MX_TIM4_Init+0x94>)
 80031ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80031b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <MX_TIM4_Init+0x94>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <MX_TIM4_Init+0x94>)
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031be:	4814      	ldr	r0, [pc, #80]	; (8003210 <MX_TIM4_Init+0x94>)
 80031c0:	f002 f9b6 	bl	8005530 <HAL_TIM_Base_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80031ca:	f000 fa19 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031d4:	f107 0308 	add.w	r3, r7, #8
 80031d8:	4619      	mov	r1, r3
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <MX_TIM4_Init+0x94>)
 80031dc:	f002 fe88 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80031e6:	f000 fa0b 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031ea:	2320      	movs	r3, #32
 80031ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031f2:	463b      	mov	r3, r7
 80031f4:	4619      	mov	r1, r3
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <MX_TIM4_Init+0x94>)
 80031f8:	f003 fbc4 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003202:	f000 f9fd 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200034b0 	.word	0x200034b0
 8003214:	40000800 	.word	0x40000800

08003218 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800321e:	f107 0318 	add.w	r3, r7, #24
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322c:	f107 0310 	add.w	r3, r7, #16
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003236:	463b      	mov	r3, r7
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003242:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <MX_TIM5_Init+0xd8>)
 8003244:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <MX_TIM5_Init+0xdc>)
 8003246:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2-1;
 8003248:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <MX_TIM5_Init+0xd8>)
 800324a:	2201      	movs	r2, #1
 800324c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <MX_TIM5_Init+0xd8>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003254:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <MX_TIM5_Init+0xd8>)
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <MX_TIM5_Init+0xd8>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <MX_TIM5_Init+0xd8>)
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003268:	4821      	ldr	r0, [pc, #132]	; (80032f0 <MX_TIM5_Init+0xd8>)
 800326a:	f002 f961 	bl	8005530 <HAL_TIM_Base_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8003274:	f000 f9c4 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800327e:	f107 0318 	add.w	r3, r7, #24
 8003282:	4619      	mov	r1, r3
 8003284:	481a      	ldr	r0, [pc, #104]	; (80032f0 <MX_TIM5_Init+0xd8>)
 8003286:	f002 fe33 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003290:	f000 f9b6 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003294:	4816      	ldr	r0, [pc, #88]	; (80032f0 <MX_TIM5_Init+0xd8>)
 8003296:	f002 fb19 	bl	80058cc <HAL_TIM_IC_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80032a0:	f000 f9ae 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	4619      	mov	r1, r3
 80032b2:	480f      	ldr	r0, [pc, #60]	; (80032f0 <MX_TIM5_Init+0xd8>)
 80032b4:	f003 fb66 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80032be:	f000 f99f 	bl	8003600 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80032c2:	230a      	movs	r3, #10
 80032c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032c6:	2301      	movs	r3, #1
 80032c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80032d2:	463b      	mov	r3, r7
 80032d4:	2200      	movs	r2, #0
 80032d6:	4619      	mov	r1, r3
 80032d8:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_TIM5_Init+0xd8>)
 80032da:	f002 fd6d 	bl	8005db8 <HAL_TIM_IC_ConfigChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80032e4:	f000 f98c 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032e8:	bf00      	nop
 80032ea:	3728      	adds	r7, #40	; 0x28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200028ac 	.word	0x200028ac
 80032f4:	40000c00 	.word	0x40000c00

080032f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 80032fe:	4a16      	ldr	r2, [pc, #88]	; (8003358 <MX_USART2_UART_Init+0x60>)
 8003300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 8003304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 800331e:	220c      	movs	r2, #12
 8003320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <MX_USART2_UART_Init+0x5c>)
 8003330:	f003 fbb8 	bl	8006aa4 <HAL_UART_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800333a:	f000 f961 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	2026      	movs	r0, #38	; 0x26
 8003344:	f000 fd95 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003348:	2026      	movs	r0, #38	; 0x26
 800334a:	f000 fdae 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200029e4 	.word	0x200029e4
 8003358:	40004400 	.word	0x40004400

0800335c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <MX_DMA_Init+0x4c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <MX_DMA_Init+0x4c>)
 800336c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <MX_DMA_Init+0x4c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2100      	movs	r1, #0
 8003382:	2010      	movs	r0, #16
 8003384:	f000 fd75 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003388:	2010      	movs	r0, #16
 800338a:	f000 fd8e 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800338e:	2200      	movs	r2, #0
 8003390:	2100      	movs	r1, #0
 8003392:	2011      	movs	r0, #17
 8003394:	f000 fd6d 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003398:	2011      	movs	r0, #17
 800339a:	f000 fd86 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800

080033ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <MX_GPIO_Init+0x134>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a45      	ldr	r2, [pc, #276]	; (80034e0 <MX_GPIO_Init+0x134>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <MX_GPIO_Init+0x134>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <MX_GPIO_Init+0x134>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a3e      	ldr	r2, [pc, #248]	; (80034e0 <MX_GPIO_Init+0x134>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b3c      	ldr	r3, [pc, #240]	; (80034e0 <MX_GPIO_Init+0x134>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <MX_GPIO_Init+0x134>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a37      	ldr	r2, [pc, #220]	; (80034e0 <MX_GPIO_Init+0x134>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <MX_GPIO_Init+0x134>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <MX_GPIO_Init+0x134>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <MX_GPIO_Init+0x134>)
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <MX_GPIO_Init+0x134>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D1_Pin|D0_Pin, GPIO_PIN_RESET);
 8003432:	2200      	movs	r2, #0
 8003434:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003438:	482a      	ldr	r0, [pc, #168]	; (80034e4 <MX_GPIO_Init+0x138>)
 800343a:	f001 fb0d 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 800343e:	2200      	movs	r2, #0
 8003440:	2110      	movs	r1, #16
 8003442:	4829      	ldr	r0, [pc, #164]	; (80034e8 <MX_GPIO_Init+0x13c>)
 8003444:	f001 fb08 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin, GPIO_PIN_RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800344e:	4827      	ldr	r0, [pc, #156]	; (80034ec <MX_GPIO_Init+0x140>)
 8003450:	f001 fb02 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <MX_GPIO_Init+0x144>)
 800345c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	481f      	ldr	r0, [pc, #124]	; (80034e8 <MX_GPIO_Init+0x13c>)
 800346a:	f001 f963 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D1_Pin D0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D1_Pin|D0_Pin;
 800346e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003474:	2301      	movs	r3, #1
 8003476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	4619      	mov	r1, r3
 8003486:	4817      	ldr	r0, [pc, #92]	; (80034e4 <MX_GPIO_Init+0x138>)
 8003488:	f001 f954 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 800348c:	2310      	movs	r3, #16
 800348e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003490:	2301      	movs	r3, #1
 8003492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003498:	2300      	movs	r3, #0
 800349a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	4619      	mov	r1, r3
 80034a2:	4811      	ldr	r0, [pc, #68]	; (80034e8 <MX_GPIO_Init+0x13c>)
 80034a4:	f001 f946 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin;
 80034a8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80034ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	480a      	ldr	r0, [pc, #40]	; (80034ec <MX_GPIO_Init+0x140>)
 80034c2:	f001 f937 	bl	8004734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	2028      	movs	r0, #40	; 0x28
 80034cc:	f000 fcd1 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034d0:	2028      	movs	r0, #40	; 0x28
 80034d2:	f000 fcea 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 80034d6:	bf00      	nop
 80034d8:	3728      	adds	r7, #40	; 0x28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020800 	.word	0x40020800
 80034ec:	40020400 	.word	0x40020400
 80034f0:	10210000 	.word	0x10210000

080034f4 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

OC_count = 0;
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d10b      	bne.n	800351e <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7f1b      	ldrb	r3, [r3, #28]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d107      	bne.n	800351e <HAL_TIM_OC_DelayElapsedCallback+0x2a>
	{
		OC_count++;
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8003516:	6013      	str	r3, [r2, #0]
		Tim2_OC_Callback();
 8003518:	f7ff fa84 	bl	8002a24 <Tim2_OC_Callback>
	}
	return;
 800351c:	bf00      	nop
 800351e:	bf00      	nop
}
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200000d0 	.word	0x200000d0

0800352c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d102      	bne.n	8003542 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3_IT_Callback();
 800353c:	f7ff fb96 	bl	8002c6c <Tim3_IT_Callback>
	else
		__NOP();

	return;
 8003540:	e001      	b.n	8003546 <HAL_TIM_PeriodElapsedCallback+0x1a>
		__NOP();
 8003542:	bf00      	nop
	return;
 8003544:	bf00      	nop
}
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200028ec 	.word	0x200028ec

08003550 <HAL_TIM_IC_CaptureCallback>:

int IC_count =0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	//Make sure this is the right timer and channel
	if (htim->Instance == TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_TIM_IC_CaptureCallback+0x34>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10b      	bne.n	800357a <HAL_TIM_IC_CaptureCallback+0x2a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7f1b      	ldrb	r3, [r3, #28]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_TIM_IC_CaptureCallback+0x2a>
	{
		IC_count++;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_TIM_IC_CaptureCallback+0x38>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_TIM_IC_CaptureCallback+0x38>)
 8003572:	6013      	str	r3, [r2, #0]
		Tim5_IC_Callback();
 8003574:	f7ff fb8c 	bl	8002c90 <Tim5_IC_Callback>
	}

	return;
 8003578:	bf00      	nop
 800357a:	bf00      	nop
}
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40000c00 	.word	0x40000c00
 8003588:	200000d4 	.word	0x200000d4

0800358c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_UART_RxCpltCallback+0x20>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_Exception_Callback();
 800359e:	f7ff fc2b 	bl	8002df8 <UART2_Exception_Callback>
  }
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40004400 	.word	0x40004400

080035b0 <uart_gpio_init>:

void uart_gpio_init()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <uart_gpio_init+0x48>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <uart_gpio_init+0x48>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <uart_gpio_init+0x48>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80035d2:	230c      	movs	r3, #12
 80035d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035da:	2301      	movs	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035e2:	2307      	movs	r3, #7
 80035e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4804      	ldr	r0, [pc, #16]	; (80035fc <uart_gpio_init+0x4c>)
 80035ec:	f001 f8a2 	bl	8004734 <HAL_GPIO_Init>
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020000 	.word	0x40020000

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_MspInit+0x4c>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <HAL_MspInit+0x4c>)
 8003620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003624:	6453      	str	r3, [r2, #68]	; 0x44
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_MspInit+0x4c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_MspInit+0x4c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_MspInit+0x4c>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_MspInit+0x4c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800364e:	2007      	movs	r0, #7
 8003650:	f000 fc04 	bl	8003e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2f      	ldr	r2, [pc, #188]	; (800373c <HAL_DAC_MspInit+0xdc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d158      	bne.n	8003734 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_DAC_MspInit+0xe0>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a2d      	ldr	r2, [pc, #180]	; (8003740 <HAL_DAC_MspInit+0xe0>)
 800368c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_DAC_MspInit+0xe0>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_DAC_MspInit+0xe0>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a26      	ldr	r2, [pc, #152]	; (8003740 <HAL_DAC_MspInit+0xe0>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_DAC_MspInit+0xe0>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036ba:	2310      	movs	r3, #16
 80036bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036be:	2303      	movs	r3, #3
 80036c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4619      	mov	r1, r3
 80036cc:	481d      	ldr	r0, [pc, #116]	; (8003744 <HAL_DAC_MspInit+0xe4>)
 80036ce:	f001 f831 	bl	8004734 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_DAC_MspInit+0xec>)
 80036d6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 80036da:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80036de:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 80036e2:	2240      	movs	r2, #64	; 0x40
 80036e4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 80036ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 80036f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036fa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 80036fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003702:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 8003706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 800370e:	2200      	movs	r2, #0
 8003710:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 8003714:	2200      	movs	r2, #0
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003718:	480b      	ldr	r0, [pc, #44]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 800371a:	f000 fc91 	bl	8004040 <HAL_DMA_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003724:	f7ff ff6c 	bl	8003600 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a07      	ldr	r2, [pc, #28]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	4a06      	ldr	r2, [pc, #24]	; (8003748 <HAL_DAC_MspInit+0xe8>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003734:	bf00      	nop
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40007400 	.word	0x40007400
 8003740:	40023800 	.word	0x40023800
 8003744:	40020000 	.word	0x40020000
 8003748:	2000292c 	.word	0x2000292c
 800374c:	40026088 	.word	0x40026088

08003750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d116      	bne.n	80037a0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6413      	str	r3, [r2, #64]	; 0x40
 8003782:	4b56      	ldr	r3, [pc, #344]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	201c      	movs	r0, #28
 8003794:	f000 fb6d 	bl	8003e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003798:	201c      	movs	r0, #28
 800379a:	f000 fb86 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800379e:	e099      	b.n	80038d4 <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a4e      	ldr	r2, [pc, #312]	; (80038e0 <HAL_TIM_Base_MspInit+0x190>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d116      	bne.n	80037d8 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b48      	ldr	r3, [pc, #288]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	201d      	movs	r0, #29
 80037cc:	f000 fb51 	bl	8003e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037d0:	201d      	movs	r0, #29
 80037d2:	f000 fb6a 	bl	8003eaa <HAL_NVIC_EnableIRQ>
}
 80037d6:	e07d      	b.n	80038d4 <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM4)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a41      	ldr	r2, [pc, #260]	; (80038e4 <HAL_TIM_Base_MspInit+0x194>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d13f      	bne.n	8003862 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6413      	str	r3, [r2, #64]	; 0x40
 80037f2:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_up.Instance = DMA1_Stream6;
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003800:	4a3a      	ldr	r2, [pc, #232]	; (80038ec <HAL_TIM_Base_MspInit+0x19c>)
 8003802:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003806:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800380a:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003814:	2200      	movs	r2, #0
 8003816:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003818:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 800381a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381e:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003826:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003828:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 800382a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800382e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003836:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003838:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 800383a:	2200      	movs	r2, #0
 800383c:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800383e:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003840:	2200      	movs	r2, #0
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8003844:	4828      	ldr	r0, [pc, #160]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003846:	f000 fbfb 	bl	8004040 <HAL_DMA_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_TIM_Base_MspInit+0x104>
      Error_Handler();
 8003850:	f7ff fed6 	bl	8003600 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 8003858:	621a      	str	r2, [r3, #32]
 800385a:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_TIM_Base_MspInit+0x198>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003860:	e038      	b.n	80038d4 <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM5)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <HAL_TIM_Base_MspInit+0x1a0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d133      	bne.n	80038d4 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 8003876:	f043 0308 	orr.w	r3, r3, #8
 800387a:	6413      	str	r3, [r2, #64]	; 0x40
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4a12      	ldr	r2, [pc, #72]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6313      	str	r3, [r2, #48]	; 0x30
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_TIM_Base_MspInit+0x18c>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038a4:	2301      	movs	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a8:	2302      	movs	r3, #2
 80038aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038b4:	2302      	movs	r3, #2
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	f107 031c 	add.w	r3, r7, #28
 80038bc:	4619      	mov	r1, r3
 80038be:	480d      	ldr	r0, [pc, #52]	; (80038f4 <HAL_TIM_Base_MspInit+0x1a4>)
 80038c0:	f000 ff38 	bl	8004734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80038c4:	2200      	movs	r2, #0
 80038c6:	2100      	movs	r1, #0
 80038c8:	2032      	movs	r0, #50	; 0x32
 80038ca:	f000 fad2 	bl	8003e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80038ce:	2032      	movs	r0, #50	; 0x32
 80038d0:	f000 faeb 	bl	8003eaa <HAL_NVIC_EnableIRQ>
}
 80038d4:	bf00      	nop
 80038d6:	3730      	adds	r7, #48	; 0x30
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	200034f0 	.word	0x200034f0
 80038ec:	400260a0 	.word	0x400260a0
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40020000 	.word	0x40020000

080038f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d11e      	bne.n	8003958 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_TIM_MspPostInit+0x68>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <HAL_TIM_MspPostInit+0x68>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_TIM_MspPostInit+0x68>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003948:	2301      	movs	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	4619      	mov	r1, r3
 8003952:	4804      	ldr	r0, [pc, #16]	; (8003964 <HAL_TIM_MspPostInit+0x6c>)
 8003954:	f000 feee 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003958:	bf00      	nop
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	40020000 	.word	0x40020000

08003968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_UART_MspInit+0x94>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d133      	bne.n	80039f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <HAL_UART_MspInit+0x98>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_UART_MspInit+0x98>)
 8003994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_UART_MspInit+0x98>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <HAL_UART_MspInit+0x98>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <HAL_UART_MspInit+0x98>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_UART_MspInit+0x98>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039c2:	230c      	movs	r3, #12
 80039c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c6:	2302      	movs	r3, #2
 80039c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2303      	movs	r3, #3
 80039d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039d2:	2307      	movs	r3, #7
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	4619      	mov	r1, r3
 80039dc:	4809      	ldr	r0, [pc, #36]	; (8003a04 <HAL_UART_MspInit+0x9c>)
 80039de:	f000 fea9 	bl	8004734 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2100      	movs	r1, #0
 80039e6:	2026      	movs	r0, #38	; 0x26
 80039e8:	f000 fa43 	bl	8003e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039ec:	2026      	movs	r0, #38	; 0x26
 80039ee:	f000 fa5c 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039f2:	bf00      	nop
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40004400 	.word	0x40004400
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020000 	.word	0x40020000

08003a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a1a:	e7fe      	b.n	8003a1a <HardFault_Handler+0x4>

08003a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a20:	e7fe      	b.n	8003a20 <MemManage_Handler+0x4>

08003a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a26:	e7fe      	b.n	8003a26 <BusFault_Handler+0x4>

08003a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a2c:	e7fe      	b.n	8003a2c <UsageFault_Handler+0x4>

08003a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a5c:	f000 f90e 	bl	8003c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003a68:	4802      	ldr	r0, [pc, #8]	; (8003a74 <DMA1_Stream5_IRQHandler+0x10>)
 8003a6a:	f000 fc29 	bl	80042c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000292c 	.word	0x2000292c

08003a78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <DMA1_Stream6_IRQHandler+0x10>)
 8003a7e:	f000 fc1f 	bl	80042c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200034f0 	.word	0x200034f0

08003a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <TIM2_IRQHandler+0x10>)
 8003a92:	f002 f829 	bl	8005ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200029a4 	.word	0x200029a4

08003aa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <TIM3_IRQHandler+0x10>)
 8003aa6:	f002 f81f 	bl	8005ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200028ec 	.word	0x200028ec

08003ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <USART2_IRQHandler+0x10>)
 8003aba:	f003 f92f 	bl	8006d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200029e4 	.word	0x200029e4

08003ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ad0:	f000 fff6 	bl	8004ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <TIM5_IRQHandler+0x10>)
 8003ade:	f002 f803 	bl	8005ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200028ac 	.word	0x200028ac

08003aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <_sbrk+0x5c>)
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <_sbrk+0x60>)
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <_sbrk+0x64>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <_sbrk+0x64>)
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <_sbrk+0x68>)
 8003b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <_sbrk+0x64>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d207      	bcs.n	8003b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b1c:	f003 fefa 	bl	8007914 <__errno>
 8003b20:	4602      	mov	r2, r0
 8003b22:	230c      	movs	r3, #12
 8003b24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e009      	b.n	8003b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <_sbrk+0x64>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <_sbrk+0x64>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <_sbrk+0x64>)
 8003b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20020000 	.word	0x20020000
 8003b4c:	00000400 	.word	0x00000400
 8003b50:	200000d8 	.word	0x200000d8
 8003b54:	20003558 	.word	0x20003558

08003b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <SystemInit+0x28>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	4a07      	ldr	r2, [pc, #28]	; (8003b80 <SystemInit+0x28>)
 8003b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <SystemInit+0x28>)
 8003b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b72:	609a      	str	r2, [r3, #8]
#endif
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b8a:	e003      	b.n	8003b94 <LoopCopyDataInit>

08003b8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b92:	3104      	adds	r1, #4

08003b94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b94:	480b      	ldr	r0, [pc, #44]	; (8003bc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b9c:	d3f6      	bcc.n	8003b8c <CopyDataInit>
  ldr  r2, =_sbss
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ba0:	e002      	b.n	8003ba8 <LoopFillZerobss>

08003ba2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ba2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ba4:	f842 3b04 	str.w	r3, [r2], #4

08003ba8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003baa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bac:	d3f9      	bcc.n	8003ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bae:	f7ff ffd3 	bl	8003b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bb2:	f003 feb5 	bl	8007920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb6:	f7ff f969 	bl	8002e8c <main>
  bx  lr    
 8003bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003bc0:	08009930 	.word	0x08009930
  ldr  r0, =_sdata
 8003bc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bc8:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8003bcc:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8003bd0:	20003558 	.word	0x20003558

08003bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd4:	e7fe      	b.n	8003bd4 <ADC_IRQHandler>
	...

08003bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_Init+0x40>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <HAL_Init+0x40>)
 8003be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_Init+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <HAL_Init+0x40>)
 8003bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_Init+0x40>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <HAL_Init+0x40>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c00:	2003      	movs	r0, #3
 8003c02:	f000 f92b 	bl	8003e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c06:	2000      	movs	r0, #0
 8003c08:	f000 f808 	bl	8003c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c0c:	f7ff fd00 	bl	8003610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00

08003c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_InitTick+0x54>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_InitTick+0x58>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f943 	bl	8003ec6 <HAL_SYSTICK_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00e      	b.n	8003c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b0f      	cmp	r3, #15
 8003c4e:	d80a      	bhi.n	8003c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c50:	2200      	movs	r2, #0
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f000 f90b 	bl	8003e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c5c:	4a06      	ldr	r2, [pc, #24]	; (8003c78 <HAL_InitTick+0x5c>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000014 	.word	0x20000014
 8003c74:	2000001c 	.word	0x2000001c
 8003c78:	20000018 	.word	0x20000018

08003c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_IncTick+0x20>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_IncTick+0x24>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_IncTick+0x24>)
 8003c8e:	6013      	str	r3, [r2, #0]
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	2000001c 	.word	0x2000001c
 8003ca0:	20003550 	.word	0x20003550

08003ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <HAL_GetTick+0x14>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20003550 	.word	0x20003550

08003cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60d3      	str	r3, [r2, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <__NVIC_GetPriorityGrouping+0x18>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 0307 	and.w	r3, r3, #7
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	db0b      	blt.n	8003d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	4907      	ldr	r1, [pc, #28]	; (8003d58 <__NVIC_EnableIRQ+0x38>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2001      	movs	r0, #1
 8003d42:	fa00 f202 	lsl.w	r2, r0, r2
 8003d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000e100 	.word	0xe000e100

08003d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	db0a      	blt.n	8003d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	490c      	ldr	r1, [pc, #48]	; (8003da8 <__NVIC_SetPriority+0x4c>)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d84:	e00a      	b.n	8003d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4908      	ldr	r1, [pc, #32]	; (8003dac <__NVIC_SetPriority+0x50>)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	3b04      	subs	r3, #4
 8003d94:	0112      	lsls	r2, r2, #4
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	440b      	add	r3, r1
 8003d9a:	761a      	strb	r2, [r3, #24]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000e100 	.word	0xe000e100
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f1c3 0307 	rsb	r3, r3, #7
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf28      	it	cs
 8003dce:	2304      	movcs	r3, #4
 8003dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d902      	bls.n	8003de0 <NVIC_EncodePriority+0x30>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3b03      	subs	r3, #3
 8003dde:	e000      	b.n	8003de2 <NVIC_EncodePriority+0x32>
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	401a      	ands	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	43d9      	mvns	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	4313      	orrs	r3, r2
         );
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3724      	adds	r7, #36	; 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e28:	d301      	bcc.n	8003e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00f      	b.n	8003e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <SysTick_Config+0x40>)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e36:	210f      	movs	r1, #15
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	f7ff ff8e 	bl	8003d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <SysTick_Config+0x40>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <SysTick_Config+0x40>)
 8003e48:	2207      	movs	r2, #7
 8003e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	e000e010 	.word	0xe000e010

08003e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff ff29 	bl	8003cbc <__NVIC_SetPriorityGrouping>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	4603      	mov	r3, r0
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e84:	f7ff ff3e 	bl	8003d04 <__NVIC_GetPriorityGrouping>
 8003e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f7ff ff8e 	bl	8003db0 <NVIC_EncodePriority>
 8003e94:	4602      	mov	r2, r0
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff5d 	bl	8003d5c <__NVIC_SetPriority>
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff31 	bl	8003d20 <__NVIC_EnableIRQ>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ffa2 	bl	8003e18 <SysTick_Config>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e014      	b.n	8003f1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fbad 	bl	8003660 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43da      	mvns	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	400a      	ands	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	400a      	ands	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f915 	bl	800419c <HAL_DMA_Abort>
 8003f72:	4603      	mov	r3, r0
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	e006      	b.n	8003f86 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f90d 	bl	800419c <HAL_DMA_Abort>
 8003f82:	4603      	mov	r3, r0
 8003f84:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	711a      	strb	r2, [r3, #4]
 8003f92:	e002      	b.n	8003f9a <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	795b      	ldrb	r3, [r3, #5]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DAC_ConfigChannel+0x20>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e036      	b.n	8004032 <HAL_DAC_ConfigChannel+0x8e>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003fd8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	22c0      	movs	r2, #192	; 0xc0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43da      	mvns	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	400a      	ands	r2, r1
 8004022:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7ff fe2a 	bl	8003ca4 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e099      	b.n	8004190 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800407c:	e00f      	b.n	800409e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800407e:	f7ff fe11 	bl	8003ca4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b05      	cmp	r3, #5
 800408a:	d908      	bls.n	800409e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2203      	movs	r2, #3
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e078      	b.n	8004190 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e8      	bne.n	800407e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <HAL_DMA_Init+0x158>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d107      	bne.n	8004108 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	4313      	orrs	r3, r2
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b04      	cmp	r3, #4
 8004130:	d117      	bne.n	8004162 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa7b 	bl	8004640 <DMA_CheckFifoParam>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2240      	movs	r2, #64	; 0x40
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800415e:	2301      	movs	r3, #1
 8004160:	e016      	b.n	8004190 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa32 	bl	80045d4 <DMA_CalcBaseAndBitshift>
 8004170:	4603      	mov	r3, r0
 8004172:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	223f      	movs	r2, #63	; 0x3f
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	f010803f 	.word	0xf010803f

0800419c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041aa:	f7ff fd7b 	bl	8003ca4 <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e052      	b.n	8004274 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0216 	bic.w	r2, r2, #22
 80041dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_DMA_Abort+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0208 	bic.w	r2, r2, #8
 800420c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800421e:	e013      	b.n	8004248 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004220:	f7ff fd40 	bl	8003ca4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b05      	cmp	r3, #5
 800422c:	d90c      	bls.n	8004248 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2203      	movs	r2, #3
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e015      	b.n	8004274 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e4      	bne.n	8004220 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	223f      	movs	r2, #63	; 0x3f
 800425c:	409a      	lsls	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d004      	beq.n	800429a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00c      	b.n	80042b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2205      	movs	r2, #5
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042cc:	4b92      	ldr	r3, [pc, #584]	; (8004518 <HAL_DMA_IRQHandler+0x258>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a92      	ldr	r2, [pc, #584]	; (800451c <HAL_DMA_IRQHandler+0x25c>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	2208      	movs	r2, #8
 80042ec:	409a      	lsls	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01a      	beq.n	800432c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d013      	beq.n	800432c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	2208      	movs	r2, #8
 800431a:	409a      	lsls	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2201      	movs	r2, #1
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	2201      	movs	r2, #1
 8004350:	409a      	lsls	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f043 0202 	orr.w	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	2204      	movs	r2, #4
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	2204      	movs	r2, #4
 8004386:	409a      	lsls	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	2210      	movs	r2, #16
 800439e:	409a      	lsls	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d043      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03c      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	2210      	movs	r2, #16
 80043bc:	409a      	lsls	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d024      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e01f      	b.n	8004430 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e016      	b.n	8004430 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0208 	bic.w	r2, r2, #8
 800441e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	2220      	movs	r2, #32
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 808e 	beq.w	800455e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8086 	beq.w	800455e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	2220      	movs	r2, #32
 8004458:	409a      	lsls	r2, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b05      	cmp	r3, #5
 8004468:	d136      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0216 	bic.w	r2, r2, #22
 8004478:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004488:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <HAL_DMA_IRQHandler+0x1da>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0208 	bic.w	r2, r2, #8
 80044a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	223f      	movs	r2, #63	; 0x3f
 80044b0:	409a      	lsls	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d07d      	beq.n	80045ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
        }
        return;
 80044d6:	e078      	b.n	80045ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01c      	beq.n	8004520 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d108      	bne.n	8004506 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d030      	beq.n	800455e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
 8004504:	e02b      	b.n	800455e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d027      	beq.n	800455e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
 8004516:	e022      	b.n	800455e <HAL_DMA_IRQHandler+0x29e>
 8004518:	20000014 	.word	0x20000014
 800451c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0210 	bic.w	r2, r2, #16
 800453c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	2b00      	cmp	r3, #0
 8004564:	d032      	beq.n	80045cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d022      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2205      	movs	r2, #5
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3301      	adds	r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	429a      	cmp	r2, r3
 8004594:	d307      	bcc.n	80045a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f2      	bne.n	800458a <HAL_DMA_IRQHandler+0x2ca>
 80045a4:	e000      	b.n	80045a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
 80045c8:	e000      	b.n	80045cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80045ca:	bf00      	nop
    }
  }
}
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop

080045d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	3b10      	subs	r3, #16
 80045e4:	4a14      	ldr	r2, [pc, #80]	; (8004638 <DMA_CalcBaseAndBitshift+0x64>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <DMA_CalcBaseAndBitshift+0x68>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d909      	bls.n	8004616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	1d1a      	adds	r2, r3, #4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	659a      	str	r2, [r3, #88]	; 0x58
 8004614:	e007      	b.n	8004626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	aaaaaaab 	.word	0xaaaaaaab
 800463c:	080098a0 	.word	0x080098a0

08004640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11f      	bne.n	800469a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d855      	bhi.n	800470c <DMA_CheckFifoParam+0xcc>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <DMA_CheckFifoParam+0x28>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	08004679 	.word	0x08004679
 800466c:	0800468b 	.word	0x0800468b
 8004670:	08004679 	.word	0x08004679
 8004674:	0800470d 	.word	0x0800470d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d045      	beq.n	8004710 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004688:	e042      	b.n	8004710 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004692:	d13f      	bne.n	8004714 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e03c      	b.n	8004714 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a2:	d121      	bne.n	80046e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d836      	bhi.n	8004718 <DMA_CheckFifoParam+0xd8>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <DMA_CheckFifoParam+0x70>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046c7 	.word	0x080046c7
 80046b8:	080046c1 	.word	0x080046c1
 80046bc:	080046d9 	.word	0x080046d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	e02f      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d024      	beq.n	800471c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d6:	e021      	b.n	800471c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046e0:	d11e      	bne.n	8004720 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046e6:	e01b      	b.n	8004720 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <DMA_CheckFifoParam+0xb4>
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d003      	beq.n	80046fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046f2:	e018      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
      break;
 80046f8:	e015      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00e      	beq.n	8004724 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      break;
 800470a:	e00b      	b.n	8004724 <DMA_CheckFifoParam+0xe4>
      break;
 800470c:	bf00      	nop
 800470e:	e00a      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;
 8004710:	bf00      	nop
 8004712:	e008      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;
 8004714:	bf00      	nop
 8004716:	e006      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;
 8004718:	bf00      	nop
 800471a:	e004      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;
 800471c:	bf00      	nop
 800471e:	e002      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;   
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;
 8004724:	bf00      	nop
    }
  } 
  
  return status; 
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e165      	b.n	8004a1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004750:	2201      	movs	r2, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	429a      	cmp	r2, r3
 800476a:	f040 8154 	bne.w	8004a16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d00b      	beq.n	800478e <HAL_GPIO_Init+0x5a>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d007      	beq.n	800478e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004782:	2b11      	cmp	r3, #17
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b12      	cmp	r3, #18
 800478c:	d130      	bne.n	80047f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	2203      	movs	r2, #3
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047c4:	2201      	movs	r2, #1
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4013      	ands	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 0201 	and.w	r2, r3, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d003      	beq.n	8004830 <HAL_GPIO_Init+0xfc>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b12      	cmp	r3, #18
 800482e:	d123      	bne.n	8004878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	08da      	lsrs	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3208      	adds	r2, #8
 8004838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	220f      	movs	r2, #15
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	08da      	lsrs	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3208      	adds	r2, #8
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	2203      	movs	r2, #3
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0203 	and.w	r2, r3, #3
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80ae 	beq.w	8004a16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <HAL_GPIO_Init+0x2fc>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	4a5b      	ldr	r2, [pc, #364]	; (8004a30 <HAL_GPIO_Init+0x2fc>)
 80048c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048c8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ca:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_GPIO_Init+0x2fc>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d6:	4a57      	ldr	r2, [pc, #348]	; (8004a34 <HAL_GPIO_Init+0x300>)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	3302      	adds	r3, #2
 80048de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a4e      	ldr	r2, [pc, #312]	; (8004a38 <HAL_GPIO_Init+0x304>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d025      	beq.n	800494e <HAL_GPIO_Init+0x21a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a4d      	ldr	r2, [pc, #308]	; (8004a3c <HAL_GPIO_Init+0x308>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01f      	beq.n	800494a <HAL_GPIO_Init+0x216>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a4c      	ldr	r2, [pc, #304]	; (8004a40 <HAL_GPIO_Init+0x30c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d019      	beq.n	8004946 <HAL_GPIO_Init+0x212>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a4b      	ldr	r2, [pc, #300]	; (8004a44 <HAL_GPIO_Init+0x310>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_GPIO_Init+0x20e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a4a      	ldr	r2, [pc, #296]	; (8004a48 <HAL_GPIO_Init+0x314>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00d      	beq.n	800493e <HAL_GPIO_Init+0x20a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a49      	ldr	r2, [pc, #292]	; (8004a4c <HAL_GPIO_Init+0x318>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <HAL_GPIO_Init+0x206>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a48      	ldr	r2, [pc, #288]	; (8004a50 <HAL_GPIO_Init+0x31c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <HAL_GPIO_Init+0x202>
 8004932:	2306      	movs	r3, #6
 8004934:	e00c      	b.n	8004950 <HAL_GPIO_Init+0x21c>
 8004936:	2307      	movs	r3, #7
 8004938:	e00a      	b.n	8004950 <HAL_GPIO_Init+0x21c>
 800493a:	2305      	movs	r3, #5
 800493c:	e008      	b.n	8004950 <HAL_GPIO_Init+0x21c>
 800493e:	2304      	movs	r3, #4
 8004940:	e006      	b.n	8004950 <HAL_GPIO_Init+0x21c>
 8004942:	2303      	movs	r3, #3
 8004944:	e004      	b.n	8004950 <HAL_GPIO_Init+0x21c>
 8004946:	2302      	movs	r3, #2
 8004948:	e002      	b.n	8004950 <HAL_GPIO_Init+0x21c>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_GPIO_Init+0x21c>
 800494e:	2300      	movs	r3, #0
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	f002 0203 	and.w	r2, r2, #3
 8004956:	0092      	lsls	r2, r2, #2
 8004958:	4093      	lsls	r3, r2
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004960:	4934      	ldr	r1, [pc, #208]	; (8004a34 <HAL_GPIO_Init+0x300>)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	3302      	adds	r3, #2
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800496e:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_GPIO_Init+0x320>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004992:	4a30      	ldr	r2, [pc, #192]	; (8004a54 <HAL_GPIO_Init+0x320>)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004998:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <HAL_GPIO_Init+0x320>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049bc:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <HAL_GPIO_Init+0x320>)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_GPIO_Init+0x320>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049e6:	4a1b      	ldr	r2, [pc, #108]	; (8004a54 <HAL_GPIO_Init+0x320>)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_GPIO_Init+0x320>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4013      	ands	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a10:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <HAL_GPIO_Init+0x320>)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	f67f ae96 	bls.w	8004750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a24:	bf00      	nop
 8004a26:	3724      	adds	r7, #36	; 0x24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40013800 	.word	0x40013800
 8004a38:	40020000 	.word	0x40020000
 8004a3c:	40020400 	.word	0x40020400
 8004a40:	40020800 	.word	0x40020800
 8004a44:	40020c00 	.word	0x40020c00
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40021400 	.word	0x40021400
 8004a50:	40021800 	.word	0x40021800
 8004a54:	40013c00 	.word	0x40013c00

08004a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
 8004a64:	4613      	mov	r3, r2
 8004a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a74:	e003      	b.n	8004a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a76:	887b      	ldrh	r3, [r7, #2]
 8004a78:	041a      	lsls	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	619a      	str	r2, [r3, #24]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	887b      	ldrh	r3, [r7, #2]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d104      	bne.n	8004aae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	041a      	lsls	r2, r3, #16
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004aac:	e002      	b.n	8004ab4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	619a      	str	r2, [r3, #24]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004aca:	4b08      	ldr	r3, [pc, #32]	; (8004aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d006      	beq.n	8004ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ad6:	4a05      	ldr	r2, [pc, #20]	; (8004aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f806 	bl	8004af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40013c00 	.word	0x40013c00

08004af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0cc      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b68      	ldr	r3, [pc, #416]	; (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d90c      	bls.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b65      	ldr	r3, [pc, #404]	; (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b63      	ldr	r3, [pc, #396]	; (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0b8      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b5c:	4b59      	ldr	r3, [pc, #356]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a58      	ldr	r2, [pc, #352]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b74:	4b53      	ldr	r3, [pc, #332]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a52      	ldr	r2, [pc, #328]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b80:	4b50      	ldr	r3, [pc, #320]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	494d      	ldr	r1, [pc, #308]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d044      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d119      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e07f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e06f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e067      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be6:	4b37      	ldr	r3, [pc, #220]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 0203 	bic.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4934      	ldr	r1, [pc, #208]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf8:	f7ff f854 	bl	8003ca4 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c00:	f7ff f850 	bl	8003ca4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 020c 	and.w	r2, r3, #12
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d1eb      	bne.n	8004c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c28:	4b25      	ldr	r3, [pc, #148]	; (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d20c      	bcs.n	8004c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e032      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5c:	4b19      	ldr	r3, [pc, #100]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4916      	ldr	r1, [pc, #88]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	490e      	ldr	r1, [pc, #56]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c8e:	f000 f855 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004c92:	4601      	mov	r1, r0
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca0:	5cd3      	ldrb	r3, [r2, r3]
 8004ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ca6:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe ffb4 	bl	8003c1c <HAL_InitTick>

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023c00 	.word	0x40023c00
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	08009888 	.word	0x08009888
 8004ccc:	20000014 	.word	0x20000014
 8004cd0:	20000018 	.word	0x20000018

08004cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000014 	.word	0x20000014

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf0:	f7ff fff0 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4601      	mov	r1, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d02:	5cd3      	ldrb	r3, [r2, r3]
 8004d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	08009898 	.word	0x08009898

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d18:	f7ff ffdc 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4601      	mov	r1, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0b5b      	lsrs	r3, r3, #13
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4a03      	ldr	r2, [pc, #12]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	08009898 	.word	0x08009898

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d56:	4bc6      	ldr	r3, [pc, #792]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	f200 817e 	bhi.w	8005060 <HAL_RCC_GetSysClockFreq+0x324>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_RCC_GetSysClockFreq+0x30>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08005061 	.word	0x08005061
 8004d74:	08005061 	.word	0x08005061
 8004d78:	08005061 	.word	0x08005061
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	08005061 	.word	0x08005061
 8004d84:	08005061 	.word	0x08005061
 8004d88:	08005061 	.word	0x08005061
 8004d8c:	08004dad 	.word	0x08004dad
 8004d90:	08005061 	.word	0x08005061
 8004d94:	08005061 	.word	0x08005061
 8004d98:	08005061 	.word	0x08005061
 8004d9c:	08004f09 	.word	0x08004f09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4bb4      	ldr	r3, [pc, #720]	; (8005074 <HAL_RCC_GetSysClockFreq+0x338>)
 8004da2:	613b      	str	r3, [r7, #16]
       break;
 8004da4:	e15f      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da6:	4bb4      	ldr	r3, [pc, #720]	; (8005078 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004da8:	613b      	str	r3, [r7, #16]
      break;
 8004daa:	e15c      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4bb0      	ldr	r3, [pc, #704]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db6:	4bae      	ldr	r3, [pc, #696]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d04a      	beq.n	8004e58 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc2:	4bab      	ldr	r3, [pc, #684]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	f04f 0400 	mov.w	r4, #0
 8004dcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	ea03 0501 	and.w	r5, r3, r1
 8004dd8:	ea04 0602 	and.w	r6, r4, r2
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4632      	mov	r2, r6
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f04f 0400 	mov.w	r4, #0
 8004de8:	0154      	lsls	r4, r2, #5
 8004dea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dee:	014b      	lsls	r3, r1, #5
 8004df0:	4619      	mov	r1, r3
 8004df2:	4622      	mov	r2, r4
 8004df4:	1b49      	subs	r1, r1, r5
 8004df6:	eb62 0206 	sbc.w	r2, r2, r6
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	0194      	lsls	r4, r2, #6
 8004e04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e08:	018b      	lsls	r3, r1, #6
 8004e0a:	1a5b      	subs	r3, r3, r1
 8004e0c:	eb64 0402 	sbc.w	r4, r4, r2
 8004e10:	f04f 0100 	mov.w	r1, #0
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	00e2      	lsls	r2, r4, #3
 8004e1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e1e:	00d9      	lsls	r1, r3, #3
 8004e20:	460b      	mov	r3, r1
 8004e22:	4614      	mov	r4, r2
 8004e24:	195b      	adds	r3, r3, r5
 8004e26:	eb44 0406 	adc.w	r4, r4, r6
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	0262      	lsls	r2, r4, #9
 8004e34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e38:	0259      	lsls	r1, r3, #9
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	4621      	mov	r1, r4
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f04f 0400 	mov.w	r4, #0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	f7fb fec4 	bl	8000bd8 <__aeabi_uldivmod>
 8004e50:	4603      	mov	r3, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e049      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e58:	4b85      	ldr	r3, [pc, #532]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	099b      	lsrs	r3, r3, #6
 8004e5e:	f04f 0400 	mov.w	r4, #0
 8004e62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	ea03 0501 	and.w	r5, r3, r1
 8004e6e:	ea04 0602 	and.w	r6, r4, r2
 8004e72:	4629      	mov	r1, r5
 8004e74:	4632      	mov	r2, r6
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	f04f 0400 	mov.w	r4, #0
 8004e7e:	0154      	lsls	r4, r2, #5
 8004e80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e84:	014b      	lsls	r3, r1, #5
 8004e86:	4619      	mov	r1, r3
 8004e88:	4622      	mov	r2, r4
 8004e8a:	1b49      	subs	r1, r1, r5
 8004e8c:	eb62 0206 	sbc.w	r2, r2, r6
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	f04f 0400 	mov.w	r4, #0
 8004e98:	0194      	lsls	r4, r2, #6
 8004e9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e9e:	018b      	lsls	r3, r1, #6
 8004ea0:	1a5b      	subs	r3, r3, r1
 8004ea2:	eb64 0402 	sbc.w	r4, r4, r2
 8004ea6:	f04f 0100 	mov.w	r1, #0
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	00e2      	lsls	r2, r4, #3
 8004eb0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004eb4:	00d9      	lsls	r1, r3, #3
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4614      	mov	r4, r2
 8004eba:	195b      	adds	r3, r3, r5
 8004ebc:	eb44 0406 	adc.w	r4, r4, r6
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	02a2      	lsls	r2, r4, #10
 8004eca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ece:	0299      	lsls	r1, r3, #10
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4614      	mov	r4, r2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f04f 0400 	mov.w	r4, #0
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	f7fb fe79 	bl	8000bd8 <__aeabi_uldivmod>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	460c      	mov	r4, r1
 8004eea:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eec:	4b60      	ldr	r3, [pc, #384]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	613b      	str	r3, [r7, #16]
      break;
 8004f06:	e0ae      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f08:	4b59      	ldr	r3, [pc, #356]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f10:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f12:	4b57      	ldr	r3, [pc, #348]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d04a      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1e:	4b54      	ldr	r3, [pc, #336]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	f04f 0400 	mov.w	r4, #0
 8004f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	ea03 0501 	and.w	r5, r3, r1
 8004f34:	ea04 0602 	and.w	r6, r4, r2
 8004f38:	4629      	mov	r1, r5
 8004f3a:	4632      	mov	r2, r6
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	f04f 0400 	mov.w	r4, #0
 8004f44:	0154      	lsls	r4, r2, #5
 8004f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f4a:	014b      	lsls	r3, r1, #5
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4622      	mov	r2, r4
 8004f50:	1b49      	subs	r1, r1, r5
 8004f52:	eb62 0206 	sbc.w	r2, r2, r6
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	f04f 0400 	mov.w	r4, #0
 8004f5e:	0194      	lsls	r4, r2, #6
 8004f60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f64:	018b      	lsls	r3, r1, #6
 8004f66:	1a5b      	subs	r3, r3, r1
 8004f68:	eb64 0402 	sbc.w	r4, r4, r2
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	00e2      	lsls	r2, r4, #3
 8004f76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f7a:	00d9      	lsls	r1, r3, #3
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4614      	mov	r4, r2
 8004f80:	195b      	adds	r3, r3, r5
 8004f82:	eb44 0406 	adc.w	r4, r4, r6
 8004f86:	f04f 0100 	mov.w	r1, #0
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	0262      	lsls	r2, r4, #9
 8004f90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f94:	0259      	lsls	r1, r3, #9
 8004f96:	460b      	mov	r3, r1
 8004f98:	4614      	mov	r4, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f04f 0400 	mov.w	r4, #0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	f7fb fe16 	bl	8000bd8 <__aeabi_uldivmod>
 8004fac:	4603      	mov	r3, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e049      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	099b      	lsrs	r3, r3, #6
 8004fba:	f04f 0400 	mov.w	r4, #0
 8004fbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	ea03 0501 	and.w	r5, r3, r1
 8004fca:	ea04 0602 	and.w	r6, r4, r2
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	f04f 0400 	mov.w	r4, #0
 8004fda:	0154      	lsls	r4, r2, #5
 8004fdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fe0:	014b      	lsls	r3, r1, #5
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	1b49      	subs	r1, r1, r5
 8004fe8:	eb62 0206 	sbc.w	r2, r2, r6
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	f04f 0400 	mov.w	r4, #0
 8004ff4:	0194      	lsls	r4, r2, #6
 8004ff6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ffa:	018b      	lsls	r3, r1, #6
 8004ffc:	1a5b      	subs	r3, r3, r1
 8004ffe:	eb64 0402 	sbc.w	r4, r4, r2
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	00e2      	lsls	r2, r4, #3
 800500c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005010:	00d9      	lsls	r1, r3, #3
 8005012:	460b      	mov	r3, r1
 8005014:	4614      	mov	r4, r2
 8005016:	195b      	adds	r3, r3, r5
 8005018:	eb44 0406 	adc.w	r4, r4, r6
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	02a2      	lsls	r2, r4, #10
 8005026:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800502a:	0299      	lsls	r1, r3, #10
 800502c:	460b      	mov	r3, r1
 800502e:	4614      	mov	r4, r2
 8005030:	4618      	mov	r0, r3
 8005032:	4621      	mov	r1, r4
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f04f 0400 	mov.w	r4, #0
 800503a:	461a      	mov	r2, r3
 800503c:	4623      	mov	r3, r4
 800503e:	f7fb fdcb 	bl	8000bd8 <__aeabi_uldivmod>
 8005042:	4603      	mov	r3, r0
 8005044:	460c      	mov	r4, r1
 8005046:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCC_GetSysClockFreq+0x334>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0f1b      	lsrs	r3, r3, #28
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	613b      	str	r3, [r7, #16]
      break;
 800505e:	e002      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_RCC_GetSysClockFreq+0x338>)
 8005062:	613b      	str	r3, [r7, #16]
      break;
 8005064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005066:	693b      	ldr	r3, [r7, #16]
}
 8005068:	4618      	mov	r0, r3
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	00f42400 	.word	0x00f42400
 8005078:	007a1200 	.word	0x007a1200

0800507c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8083 	beq.w	800519c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005096:	4b95      	ldr	r3, [pc, #596]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d019      	beq.n	80050d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050a2:	4b92      	ldr	r3, [pc, #584]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d106      	bne.n	80050bc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050ae:	4b8f      	ldr	r3, [pc, #572]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ba:	d00c      	beq.n	80050d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050bc:	4b8b      	ldr	r3, [pc, #556]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d112      	bne.n	80050ee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c8:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d4:	d10b      	bne.n	80050ee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d6:	4b85      	ldr	r3, [pc, #532]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d05b      	beq.n	800519a <HAL_RCC_OscConfig+0x11e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d157      	bne.n	800519a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e216      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d106      	bne.n	8005106 <HAL_RCC_OscConfig+0x8a>
 80050f8:	4b7c      	ldr	r3, [pc, #496]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a7b      	ldr	r2, [pc, #492]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e01d      	b.n	8005142 <HAL_RCC_OscConfig+0xc6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800510e:	d10c      	bne.n	800512a <HAL_RCC_OscConfig+0xae>
 8005110:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a75      	ldr	r2, [pc, #468]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b73      	ldr	r3, [pc, #460]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a72      	ldr	r2, [pc, #456]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e00b      	b.n	8005142 <HAL_RCC_OscConfig+0xc6>
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6f      	ldr	r2, [pc, #444]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6c      	ldr	r2, [pc, #432]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 800513c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005140:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d013      	beq.n	8005172 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514a:	f7fe fdab 	bl	8003ca4 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005152:	f7fe fda7 	bl	8003ca4 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b64      	cmp	r3, #100	; 0x64
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e1db      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0xd6>
 8005170:	e014      	b.n	800519c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fe fd97 	bl	8003ca4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800517a:	f7fe fd93 	bl	8003ca4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b64      	cmp	r3, #100	; 0x64
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e1c7      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518c:	4b57      	ldr	r3, [pc, #348]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0xfe>
 8005198:	e000      	b.n	800519c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d06f      	beq.n	8005288 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051a8:	4b50      	ldr	r3, [pc, #320]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d017      	beq.n	80051e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051b4:	4b4d      	ldr	r3, [pc, #308]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051c0:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00b      	beq.n	80051e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051cc:	4b47      	ldr	r3, [pc, #284]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d11c      	bne.n	8005212 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d8:	4b44      	ldr	r3, [pc, #272]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d116      	bne.n	8005212 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e4:	4b41      	ldr	r3, [pc, #260]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_OscConfig+0x180>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e18f      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fc:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4938      	ldr	r1, [pc, #224]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 800520c:	4313      	orrs	r3, r2
 800520e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005210:	e03a      	b.n	8005288 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d020      	beq.n	800525c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800521a:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <HAL_RCC_OscConfig+0x274>)
 800521c:	2201      	movs	r2, #1
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fe fd40 	bl	8003ca4 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005228:	f7fe fd3c 	bl	8003ca4 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e170      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523a:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	4b29      	ldr	r3, [pc, #164]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4925      	ldr	r1, [pc, #148]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
 800525a:	e015      	b.n	8005288 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800525c:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCC_OscConfig+0x274>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005262:	f7fe fd1f 	bl	8003ca4 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800526a:	f7fe fd1b 	bl	8003ca4 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e14f      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527c:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f0      	bne.n	800526a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d037      	beq.n	8005304 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800529c:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <HAL_RCC_OscConfig+0x278>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fe fcff 	bl	8003ca4 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052aa:	f7fe fcfb 	bl	8003ca4 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e12f      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 80052be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x22e>
 80052c8:	e01c      	b.n	8005304 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <HAL_RCC_OscConfig+0x278>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fe fce8 	bl	8003ca4 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d6:	e00f      	b.n	80052f8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052d8:	f7fe fce4 	bl	8003ca4 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d908      	bls.n	80052f8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e118      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
 80052f0:	42470000 	.word	0x42470000
 80052f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f8:	4b8a      	ldr	r3, [pc, #552]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80052fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e9      	bne.n	80052d8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8097 	beq.w	8005440 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005316:	4b83      	ldr	r3, [pc, #524]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10f      	bne.n	8005342 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	4b7f      	ldr	r3, [pc, #508]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	4a7e      	ldr	r2, [pc, #504]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005330:	6413      	str	r3, [r2, #64]	; 0x40
 8005332:	4b7c      	ldr	r3, [pc, #496]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005342:	4b79      	ldr	r3, [pc, #484]	; (8005528 <HAL_RCC_OscConfig+0x4ac>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d118      	bne.n	8005380 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534e:	4b76      	ldr	r3, [pc, #472]	; (8005528 <HAL_RCC_OscConfig+0x4ac>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a75      	ldr	r2, [pc, #468]	; (8005528 <HAL_RCC_OscConfig+0x4ac>)
 8005354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535a:	f7fe fca3 	bl	8003ca4 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005362:	f7fe fc9f 	bl	8003ca4 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e0d3      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005374:	4b6c      	ldr	r3, [pc, #432]	; (8005528 <HAL_RCC_OscConfig+0x4ac>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d106      	bne.n	8005396 <HAL_RCC_OscConfig+0x31a>
 8005388:	4b66      	ldr	r3, [pc, #408]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	4a65      	ldr	r2, [pc, #404]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	6713      	str	r3, [r2, #112]	; 0x70
 8005394:	e01c      	b.n	80053d0 <HAL_RCC_OscConfig+0x354>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b05      	cmp	r3, #5
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x33c>
 800539e:	4b61      	ldr	r3, [pc, #388]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a60      	ldr	r2, [pc, #384]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053a4:	f043 0304 	orr.w	r3, r3, #4
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	4b5e      	ldr	r3, [pc, #376]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a5d      	ldr	r2, [pc, #372]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0x354>
 80053b8:	4b5a      	ldr	r3, [pc, #360]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	4a59      	ldr	r2, [pc, #356]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
 80053c4:	4b57      	ldr	r3, [pc, #348]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a56      	ldr	r2, [pc, #344]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053ca:	f023 0304 	bic.w	r3, r3, #4
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d015      	beq.n	8005404 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fe fc64 	bl	8003ca4 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053de:	e00a      	b.n	80053f6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fe fc60 	bl	8003ca4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e092      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f6:	4b4b      	ldr	r3, [pc, #300]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0ee      	beq.n	80053e0 <HAL_RCC_OscConfig+0x364>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fe fc4e 	bl	8003ca4 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540a:	e00a      	b.n	8005422 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540c:	f7fe fc4a 	bl	8003ca4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e07c      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005422:	4b40      	ldr	r3, [pc, #256]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ee      	bne.n	800540c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005434:	4b3b      	ldr	r3, [pc, #236]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	4a3a      	ldr	r2, [pc, #232]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 800543a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d068      	beq.n	800551a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005448:	4b36      	ldr	r3, [pc, #216]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 030c 	and.w	r3, r3, #12
 8005450:	2b08      	cmp	r3, #8
 8005452:	d060      	beq.n	8005516 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d145      	bne.n	80054e8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545c:	4b33      	ldr	r3, [pc, #204]	; (800552c <HAL_RCC_OscConfig+0x4b0>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005462:	f7fe fc1f 	bl	8003ca4 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546a:	f7fe fc1b 	bl	8003ca4 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e04f      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547c:	4b29      	ldr	r3, [pc, #164]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f0      	bne.n	800546a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	019b      	lsls	r3, r3, #6
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	3b01      	subs	r3, #1
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	071b      	lsls	r3, r3, #28
 80054b4:	491b      	ldr	r1, [pc, #108]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <HAL_RCC_OscConfig+0x4b0>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fe fbf0 	bl	8003ca4 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fe fbec 	bl	8003ca4 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e020      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x44c>
 80054e6:	e018      	b.n	800551a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_RCC_OscConfig+0x4b0>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fe fbd9 	bl	8003ca4 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fe fbd5 	bl	8003ca4 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e009      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <HAL_RCC_OscConfig+0x4a8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f0      	bne.n	80054f6 <HAL_RCC_OscConfig+0x47a>
 8005514:	e001      	b.n	800551a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40023800 	.word	0x40023800
 8005528:	40007000 	.word	0x40007000
 800552c:	42470060 	.word	0x42470060

08005530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e01d      	b.n	800557e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fe f8fa 	bl	8003750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f000 fdce 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b06      	cmp	r3, #6
 80055a6:	d007      	beq.n	80055b8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10f      	bne.n	800560e <HAL_TIM_Base_Stop+0x40>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	f240 4344 	movw	r3, #1092	; 0x444
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <HAL_TIM_Base_Stop+0x40>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e01d      	b.n	8005672 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f815 	bl	800567a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 fd54 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	d841      	bhi.n	8005724 <HAL_TIM_OC_Start_IT+0x94>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <HAL_TIM_OC_Start_IT+0x18>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	08005725 	.word	0x08005725
 80056b0:	08005725 	.word	0x08005725
 80056b4:	08005725 	.word	0x08005725
 80056b8:	080056ef 	.word	0x080056ef
 80056bc:	08005725 	.word	0x08005725
 80056c0:	08005725 	.word	0x08005725
 80056c4:	08005725 	.word	0x08005725
 80056c8:	08005701 	.word	0x08005701
 80056cc:	08005725 	.word	0x08005725
 80056d0:	08005725 	.word	0x08005725
 80056d4:	08005725 	.word	0x08005725
 80056d8:	08005713 	.word	0x08005713
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0202 	orr.w	r2, r2, #2
 80056ea:	60da      	str	r2, [r3, #12]
      break;
 80056ec:	e01b      	b.n	8005726 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0204 	orr.w	r2, r2, #4
 80056fc:	60da      	str	r2, [r3, #12]
      break;
 80056fe:	e012      	b.n	8005726 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0208 	orr.w	r2, r2, #8
 800570e:	60da      	str	r2, [r3, #12]
      break;
 8005710:	e009      	b.n	8005726 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0210 	orr.w	r2, r2, #16
 8005720:	60da      	str	r2, [r3, #12]
      break;
 8005722:	e000      	b.n	8005726 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8005724:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f001 f902 	bl	8006938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a15      	ldr	r2, [pc, #84]	; (8005790 <HAL_TIM_OC_Start_IT+0x100>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIM_OC_Start_IT+0xb8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a14      	ldr	r2, [pc, #80]	; (8005794 <HAL_TIM_OC_Start_IT+0x104>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d101      	bne.n	800574c <HAL_TIM_OC_Start_IT+0xbc>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_TIM_OC_Start_IT+0xbe>
 800574c:	2300      	movs	r3, #0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b06      	cmp	r3, #6
 8005772:	d007      	beq.n	8005784 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40010400 	.word	0x40010400

08005798 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d841      	bhi.n	800582c <HAL_TIM_OC_Stop_IT+0x94>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <HAL_TIM_OC_Stop_IT+0x18>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057e5 	.word	0x080057e5
 80057b4:	0800582d 	.word	0x0800582d
 80057b8:	0800582d 	.word	0x0800582d
 80057bc:	0800582d 	.word	0x0800582d
 80057c0:	080057f7 	.word	0x080057f7
 80057c4:	0800582d 	.word	0x0800582d
 80057c8:	0800582d 	.word	0x0800582d
 80057cc:	0800582d 	.word	0x0800582d
 80057d0:	08005809 	.word	0x08005809
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	0800582d 	.word	0x0800582d
 80057e0:	0800581b 	.word	0x0800581b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0202 	bic.w	r2, r2, #2
 80057f2:	60da      	str	r2, [r3, #12]
      break;
 80057f4:	e01b      	b.n	800582e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0204 	bic.w	r2, r2, #4
 8005804:	60da      	str	r2, [r3, #12]
      break;
 8005806:	e012      	b.n	800582e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0208 	bic.w	r2, r2, #8
 8005816:	60da      	str	r2, [r3, #12]
      break;
 8005818:	e009      	b.n	800582e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0210 	bic.w	r2, r2, #16
 8005828:	60da      	str	r2, [r3, #12]
      break;
 800582a:	e000      	b.n	800582e <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800582c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f001 f87e 	bl	8006938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <HAL_TIM_OC_Stop_IT+0x12c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIM_OC_Stop_IT+0xb8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_TIM_OC_Stop_IT+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <HAL_TIM_OC_Stop_IT+0xbc>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_TIM_OC_Stop_IT+0xbe>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d017      	beq.n	800588a <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	f241 1311 	movw	r3, #4369	; 0x1111
 8005864:	4013      	ands	r3, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <HAL_TIM_OC_Stop_IT+0xf2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	f240 4344 	movw	r3, #1092	; 0x444
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d107      	bne.n	800588a <HAL_TIM_OC_Stop_IT+0xf2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	f241 1311 	movw	r3, #4369	; 0x1111
 8005894:	4013      	ands	r3, r2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <HAL_TIM_OC_Stop_IT+0x122>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f240 4344 	movw	r3, #1092	; 0x444
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d107      	bne.n	80058ba <HAL_TIM_OC_Stop_IT+0x122>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400

080058cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e01d      	b.n	800591a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f815 	bl	8005922 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f000 fc00 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d841      	bhi.n	80059cc <HAL_TIM_IC_Start_IT+0x94>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_TIM_IC_Start_IT+0x18>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005985 	.word	0x08005985
 8005954:	080059cd 	.word	0x080059cd
 8005958:	080059cd 	.word	0x080059cd
 800595c:	080059cd 	.word	0x080059cd
 8005960:	08005997 	.word	0x08005997
 8005964:	080059cd 	.word	0x080059cd
 8005968:	080059cd 	.word	0x080059cd
 800596c:	080059cd 	.word	0x080059cd
 8005970:	080059a9 	.word	0x080059a9
 8005974:	080059cd 	.word	0x080059cd
 8005978:	080059cd 	.word	0x080059cd
 800597c:	080059cd 	.word	0x080059cd
 8005980:	080059bb 	.word	0x080059bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0202 	orr.w	r2, r2, #2
 8005992:	60da      	str	r2, [r3, #12]
      break;
 8005994:	e01b      	b.n	80059ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0204 	orr.w	r2, r2, #4
 80059a4:	60da      	str	r2, [r3, #12]
      break;
 80059a6:	e012      	b.n	80059ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0208 	orr.w	r2, r2, #8
 80059b6:	60da      	str	r2, [r3, #12]
      break;
 80059b8:	e009      	b.n	80059ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0210 	orr.w	r2, r2, #16
 80059c8:	60da      	str	r2, [r3, #12]
      break;
 80059ca:	e000      	b.n	80059ce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80059cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2201      	movs	r2, #1
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 ffae 	bl	8006938 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b06      	cmp	r3, #6
 80059ec:	d007      	beq.n	80059fe <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d841      	bhi.n	8005a9c <HAL_TIM_IC_Stop_IT+0x94>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <HAL_TIM_IC_Stop_IT+0x18>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a55 	.word	0x08005a55
 8005a24:	08005a9d 	.word	0x08005a9d
 8005a28:	08005a9d 	.word	0x08005a9d
 8005a2c:	08005a9d 	.word	0x08005a9d
 8005a30:	08005a67 	.word	0x08005a67
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a9d 	.word	0x08005a9d
 8005a3c:	08005a9d 	.word	0x08005a9d
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a9d 	.word	0x08005a9d
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a9d 	.word	0x08005a9d
 8005a50:	08005a8b 	.word	0x08005a8b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0202 	bic.w	r2, r2, #2
 8005a62:	60da      	str	r2, [r3, #12]
      break;
 8005a64:	e01b      	b.n	8005a9e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0204 	bic.w	r2, r2, #4
 8005a74:	60da      	str	r2, [r3, #12]
      break;
 8005a76:	e012      	b.n	8005a9e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0208 	bic.w	r2, r2, #8
 8005a86:	60da      	str	r2, [r3, #12]
      break;
 8005a88:	e009      	b.n	8005a9e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0210 	bic.w	r2, r2, #16
 8005a98:	60da      	str	r2, [r3, #12]
      break;
 8005a9a:	e000      	b.n	8005a9e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005a9c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 ff46 	bl	8006938 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10f      	bne.n	8005adc <HAL_TIM_IC_Stop_IT+0xd4>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	f240 4344 	movw	r3, #1092	; 0x444
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d107      	bne.n	8005adc <HAL_TIM_IC_Stop_IT+0xd4>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop

08005ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0202 	mvn.w	r2, #2
 8005b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fd fd10 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fd fcde 	bl	80034f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fad5 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0204 	mvn.w	r2, #4
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fd fce6 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fd fcb4 	bl	80034f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 faab 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d122      	bne.n	8005bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d11b      	bne.n	8005bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0208 	mvn.w	r2, #8
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fd fcbc 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fd fc8a 	bl	80034f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fa81 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d122      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0210 	mvn.w	r2, #16
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2208      	movs	r2, #8
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fd fc92 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fd fc60 	bl	80034f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fa57 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d10e      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d107      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0201 	mvn.w	r2, #1
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fd fc60 	bl	800352c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b80      	cmp	r3, #128	; 0x80
 8005c78:	d10e      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c84:	2b80      	cmp	r3, #128	; 0x80
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fefc 	bl	8006a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	d10e      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	d107      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa1c 	bl	80060fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0220 	mvn.w	r2, #32
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fec6 	bl	8006a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e04e      	b.n	8005db0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d839      	bhi.n	8005d9c <HAL_TIM_OC_ConfigChannel+0xa4>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d65 	.word	0x08005d65
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005d9d 	.word	0x08005d9d
 8005d40:	08005d73 	.word	0x08005d73
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	08005d81 	.word	0x08005d81
 8005d54:	08005d9d 	.word	0x08005d9d
 8005d58:	08005d9d 	.word	0x08005d9d
 8005d5c:	08005d9d 	.word	0x08005d9d
 8005d60:	08005d8f 	.word	0x08005d8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fa70 	bl	8006250 <TIM_OC1_SetConfig>
      break;
 8005d70:	e015      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fad9 	bl	8006330 <TIM_OC2_SetConfig>
      break;
 8005d7e:	e00e      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fb48 	bl	800641c <TIM_OC3_SetConfig>
      break;
 8005d8c:	e007      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fbb5 	bl	8006504 <TIM_OC4_SetConfig>
      break;
 8005d9a:	e000      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005d9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e08a      	b.n	8005ee8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11b      	bne.n	8005e20 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6819      	ldr	r1, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f000 fbda 	bl	80065b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020c 	bic.w	r2, r2, #12
 8005e0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6999      	ldr	r1, [r3, #24]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	619a      	str	r2, [r3, #24]
 8005e1e:	e05a      	b.n	8005ed6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d11c      	bne.n	8005e60 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f000 fc5e 	bl	80066f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6999      	ldr	r1, [r3, #24]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	021a      	lsls	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	619a      	str	r2, [r3, #24]
 8005e5e:	e03a      	b.n	8005ed6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d11b      	bne.n	8005e9e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6819      	ldr	r1, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f000 fcab 	bl	80067d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 020c 	bic.w	r2, r2, #12
 8005e88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69d9      	ldr	r1, [r3, #28]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	61da      	str	r2, [r3, #28]
 8005e9c:	e01b      	b.n	8005ed6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6819      	ldr	r1, [r3, #0]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f000 fccb 	bl	8006848 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ec0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	021a      	lsls	r2, r3, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_ConfigClockSource+0x18>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e0a6      	b.n	8006056 <HAL_TIM_ConfigClockSource+0x166>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d067      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0x120>
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d80b      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x6c>
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d073      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d802      	bhi.n	8005f52 <HAL_TIM_ConfigClockSource+0x62>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d06f      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f50:	e078      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d06c      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
 8005f56:	2b30      	cmp	r3, #48	; 0x30
 8005f58:	d06a      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005f5a:	e073      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f5c:	2b70      	cmp	r3, #112	; 0x70
 8005f5e:	d00d      	beq.n	8005f7c <HAL_TIM_ConfigClockSource+0x8c>
 8005f60:	2b70      	cmp	r3, #112	; 0x70
 8005f62:	d804      	bhi.n	8005f6e <HAL_TIM_ConfigClockSource+0x7e>
 8005f64:	2b50      	cmp	r3, #80	; 0x50
 8005f66:	d033      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0xe0>
 8005f68:	2b60      	cmp	r3, #96	; 0x60
 8005f6a:	d041      	beq.n	8005ff0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f6c:	e06a      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	d066      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x152>
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f78:	d017      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f7a:	e063      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	6899      	ldr	r1, [r3, #8]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f000 fcb4 	bl	80068f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	609a      	str	r2, [r3, #8]
      break;
 8005fa8:	e04c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f000 fc9d 	bl	80068f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fcc:	609a      	str	r2, [r3, #8]
      break;
 8005fce:	e039      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f000 fb5b 	bl	8006698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2150      	movs	r1, #80	; 0x50
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fc6a 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8005fee:	e029      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6859      	ldr	r1, [r3, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f000 fbb7 	bl	8006770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2160      	movs	r1, #96	; 0x60
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fc5a 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 800600e:	e019      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	461a      	mov	r2, r3
 800601e:	f000 fb3b 	bl	8006698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fc4a 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 800602e:	e009      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fc41 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006040:	e000      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d831      	bhi.n	80060d8 <HAL_TIM_ReadCapturedValue+0x78>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060d9 	.word	0x080060d9
 8006084:	080060d9 	.word	0x080060d9
 8006088:	080060d9 	.word	0x080060d9
 800608c:	080060bb 	.word	0x080060bb
 8006090:	080060d9 	.word	0x080060d9
 8006094:	080060d9 	.word	0x080060d9
 8006098:	080060d9 	.word	0x080060d9
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060d9 	.word	0x080060d9
 80060a4:	080060d9 	.word	0x080060d9
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060cf 	.word	0x080060cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	60fb      	str	r3, [r7, #12]

      break;
 80060b8:	e00f      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	60fb      	str	r3, [r7, #12]

      break;
 80060c2:	e00a      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	60fb      	str	r3, [r7, #12]

      break;
 80060cc:	e005      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	60fb      	str	r3, [r7, #12]

      break;
 80060d6:	e000      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060d8:	bf00      	nop
  }

  return tmpreg;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a40      	ldr	r2, [pc, #256]	; (8006224 <TIM_Base_SetConfig+0x114>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612e:	d00f      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a3d      	ldr	r2, [pc, #244]	; (8006228 <TIM_Base_SetConfig+0x118>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00b      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a3c      	ldr	r2, [pc, #240]	; (800622c <TIM_Base_SetConfig+0x11c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a3b      	ldr	r2, [pc, #236]	; (8006230 <TIM_Base_SetConfig+0x120>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a3a      	ldr	r2, [pc, #232]	; (8006234 <TIM_Base_SetConfig+0x124>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d108      	bne.n	8006162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <TIM_Base_SetConfig+0x114>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d02b      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006170:	d027      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2c      	ldr	r2, [pc, #176]	; (8006228 <TIM_Base_SetConfig+0x118>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d023      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2b      	ldr	r2, [pc, #172]	; (800622c <TIM_Base_SetConfig+0x11c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01f      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2a      	ldr	r2, [pc, #168]	; (8006230 <TIM_Base_SetConfig+0x120>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01b      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a29      	ldr	r2, [pc, #164]	; (8006234 <TIM_Base_SetConfig+0x124>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d017      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a28      	ldr	r2, [pc, #160]	; (8006238 <TIM_Base_SetConfig+0x128>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a27      	ldr	r2, [pc, #156]	; (800623c <TIM_Base_SetConfig+0x12c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a26      	ldr	r2, [pc, #152]	; (8006240 <TIM_Base_SetConfig+0x130>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a25      	ldr	r2, [pc, #148]	; (8006244 <TIM_Base_SetConfig+0x134>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a24      	ldr	r2, [pc, #144]	; (8006248 <TIM_Base_SetConfig+0x138>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a23      	ldr	r2, [pc, #140]	; (800624c <TIM_Base_SetConfig+0x13c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d108      	bne.n	80061d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <TIM_Base_SetConfig+0x114>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0xf8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a0c      	ldr	r2, [pc, #48]	; (8006234 <TIM_Base_SetConfig+0x124>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d103      	bne.n	8006210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	615a      	str	r2, [r3, #20]
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40010400 	.word	0x40010400
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800
 8006244:	40001800 	.word	0x40001800
 8006248:	40001c00 	.word	0x40001c00
 800624c:	40002000 	.word	0x40002000

08006250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f023 0302 	bic.w	r3, r3, #2
 8006298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a20      	ldr	r2, [pc, #128]	; (8006328 <TIM_OC1_SetConfig+0xd8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC1_SetConfig+0x64>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a1f      	ldr	r2, [pc, #124]	; (800632c <TIM_OC1_SetConfig+0xdc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d10c      	bne.n	80062ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0308 	bic.w	r3, r3, #8
 80062ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 0304 	bic.w	r3, r3, #4
 80062cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a15      	ldr	r2, [pc, #84]	; (8006328 <TIM_OC1_SetConfig+0xd8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d003      	beq.n	80062de <TIM_OC1_SetConfig+0x8e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a14      	ldr	r2, [pc, #80]	; (800632c <TIM_OC1_SetConfig+0xdc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d111      	bne.n	8006302 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	621a      	str	r2, [r3, #32]
}
 800631c:	bf00      	nop
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	40010000 	.word	0x40010000
 800632c:	40010400 	.word	0x40010400

08006330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f023 0210 	bic.w	r2, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0320 	bic.w	r3, r3, #32
 800637a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a22      	ldr	r2, [pc, #136]	; (8006414 <TIM_OC2_SetConfig+0xe4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC2_SetConfig+0x68>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a21      	ldr	r2, [pc, #132]	; (8006418 <TIM_OC2_SetConfig+0xe8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d10d      	bne.n	80063b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800639e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a17      	ldr	r2, [pc, #92]	; (8006414 <TIM_OC2_SetConfig+0xe4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC2_SetConfig+0x94>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a16      	ldr	r2, [pc, #88]	; (8006418 <TIM_OC2_SetConfig+0xe8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d113      	bne.n	80063ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40010000 	.word	0x40010000
 8006418:	40010400 	.word	0x40010400

0800641c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0303 	bic.w	r3, r3, #3
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a21      	ldr	r2, [pc, #132]	; (80064fc <TIM_OC3_SetConfig+0xe0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_OC3_SetConfig+0x66>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a20      	ldr	r2, [pc, #128]	; (8006500 <TIM_OC3_SetConfig+0xe4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10d      	bne.n	800649e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800649c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a16      	ldr	r2, [pc, #88]	; (80064fc <TIM_OC3_SetConfig+0xe0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC3_SetConfig+0x92>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a15      	ldr	r2, [pc, #84]	; (8006500 <TIM_OC3_SetConfig+0xe4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d113      	bne.n	80064d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40010000 	.word	0x40010000
 8006500:	40010400 	.word	0x40010400

08006504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800654e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	031b      	lsls	r3, r3, #12
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <TIM_OC4_SetConfig+0xa4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_OC4_SetConfig+0x68>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a11      	ldr	r2, [pc, #68]	; (80065ac <TIM_OC4_SetConfig+0xa8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d109      	bne.n	8006580 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	019b      	lsls	r3, r3, #6
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400

080065b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a28      	ldr	r2, [pc, #160]	; (800667c <TIM_TI1_SetConfig+0xcc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01b      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d017      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a25      	ldr	r2, [pc, #148]	; (8006680 <TIM_TI1_SetConfig+0xd0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a24      	ldr	r2, [pc, #144]	; (8006684 <TIM_TI1_SetConfig+0xd4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00f      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a23      	ldr	r2, [pc, #140]	; (8006688 <TIM_TI1_SetConfig+0xd8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a22      	ldr	r2, [pc, #136]	; (800668c <TIM_TI1_SetConfig+0xdc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a21      	ldr	r2, [pc, #132]	; (8006690 <TIM_TI1_SetConfig+0xe0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a20      	ldr	r2, [pc, #128]	; (8006694 <TIM_TI1_SetConfig+0xe4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d101      	bne.n	800661a <TIM_TI1_SetConfig+0x6a>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <TIM_TI1_SetConfig+0x6c>
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e003      	b.n	800663a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	b2db      	uxtb	r3, r3
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f023 030a 	bic.w	r3, r3, #10
 8006654:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f003 030a 	and.w	r3, r3, #10
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40001800 	.word	0x40001800

08006698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0201 	bic.w	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 030a 	bic.w	r3, r3, #10
 80066d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	f023 0210 	bic.w	r2, r3, #16
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006722:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	031b      	lsls	r3, r3, #12
 800673a:	b29b      	uxth	r3, r3
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006748:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f023 0210 	bic.w	r2, r3, #16
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	031b      	lsls	r3, r3, #12
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800680c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	b2db      	uxtb	r3, r3
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006820:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006874:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006886:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	031b      	lsls	r3, r3, #12
 800688c:	b29b      	uxth	r3, r3
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800689a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	031b      	lsls	r3, r3, #12
 80068a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	f043 0307 	orr.w	r3, r3, #7
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	609a      	str	r2, [r3, #8]
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	021a      	lsls	r2, r3, #8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	431a      	orrs	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4313      	orrs	r3, r2
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	609a      	str	r2, [r3, #8]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2201      	movs	r2, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006998:	2302      	movs	r3, #2
 800699a:	e05a      	b.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d022      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e8:	d01d      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d018      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d013      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1a      	ldr	r2, [pc, #104]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00e      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a18      	ldr	r2, [pc, #96]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d009      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a17      	ldr	r2, [pc, #92]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d004      	beq.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d10c      	bne.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40001800 	.word	0x40001800

08006a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e03f      	b.n	8006b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fc ff4c 	bl	8003968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2224      	movs	r2, #36	; 0x24
 8006ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb97 	bl	800721c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b088      	sub	sp, #32
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	f040 8083 	bne.w	8006c66 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_UART_Transmit+0x2e>
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e07b      	b.n	8006c68 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Transmit+0x40>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e074      	b.n	8006c68 <HAL_UART_Transmit+0x12a>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2221      	movs	r2, #33	; 0x21
 8006b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006b94:	f7fd f886 	bl	8003ca4 <HAL_GetTick>
 8006b98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006bae:	e042      	b.n	8006c36 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	d122      	bne.n	8006c0e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2180      	movs	r1, #128	; 0x80
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f9b6 	bl	8006f44 <UART_WaitOnFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e042      	b.n	8006c68 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bf4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	3302      	adds	r3, #2
 8006c02:	60bb      	str	r3, [r7, #8]
 8006c04:	e017      	b.n	8006c36 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	e013      	b.n	8006c36 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2200      	movs	r2, #0
 8006c16:	2180      	movs	r1, #128	; 0x80
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f993 	bl	8006f44 <UART_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e01f      	b.n	8006c68 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	60ba      	str	r2, [r7, #8]
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1b7      	bne.n	8006bb0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2200      	movs	r2, #0
 8006c48:	2140      	movs	r1, #64	; 0x40
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f97a 	bl	8006f44 <UART_WaitOnFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e006      	b.n	8006c68 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e000      	b.n	8006c68 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006c66:	2302      	movs	r3, #2
  }
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d140      	bne.n	8006d0c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_UART_Receive_IT+0x26>
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e039      	b.n	8006d0e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_UART_Receive_IT+0x38>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e032      	b.n	8006d0e <HAL_UART_Receive_IT+0x9e>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2222      	movs	r2, #34	; 0x22
 8006ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695a      	ldr	r2, [r3, #20]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0220 	orr.w	r2, r2, #32
 8006d06:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e000      	b.n	8006d0e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006d0c:	2302      	movs	r3, #2
  }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
	...

08006d1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_UART_IRQHandler+0x52>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9d6 	bl	8007118 <UART_Receive_IT>
      return;
 8006d6c:	e0d1      	b.n	8006f12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80b0 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x1ba>
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d105      	bne.n	8006d8c <HAL_UART_IRQHandler+0x70>
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80a5 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <HAL_UART_IRQHandler+0x90>
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	f043 0201 	orr.w	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <HAL_UART_IRQHandler+0xb0>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc4:	f043 0202 	orr.w	r2, r3, #2
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_UART_IRQHandler+0xd0>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	f043 0204 	orr.w	r2, r3, #4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00f      	beq.n	8006e16 <HAL_UART_IRQHandler+0xfa>
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <HAL_UART_IRQHandler+0xee>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	f043 0208 	orr.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d078      	beq.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <HAL_UART_IRQHandler+0x11c>
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f970 	bl	8007118 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	bf0c      	ite	eq
 8006e46:	2301      	moveq	r3, #1
 8006e48:	2300      	movne	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <HAL_UART_IRQHandler+0x144>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d031      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8b9 	bl	8006fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	d123      	bne.n	8006ebc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d013      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e90:	4a21      	ldr	r2, [pc, #132]	; (8006f18 <HAL_UART_IRQHandler+0x1fc>)
 8006e92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fd f9ef 	bl	800427c <HAL_DMA_Abort_IT>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d016      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb2:	e00e      	b.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f83b 	bl	8006f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eba:	e00a      	b.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f837 	bl	8006f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec2:	e006      	b.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f833 	bl	8006f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006ed0:	e01e      	b.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed2:	bf00      	nop
    return;
 8006ed4:	e01c      	b.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d008      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1d6>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8a6 	bl	800703c <UART_Transmit_IT>
    return;
 8006ef0:	e00f      	b.n	8006f12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_UART_IRQHandler+0x1f6>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f8ee 	bl	80070e8 <UART_EndTransmit_IT>
    return;
 8006f0c:	bf00      	nop
 8006f0e:	e000      	b.n	8006f12 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006f10:	bf00      	nop
  }
}
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	08007015 	.word	0x08007015

08006f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f54:	e02c      	b.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d028      	beq.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f64:	f7fc fe9e 	bl	8003ca4 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d21d      	bcs.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e00f      	b.n	8006fd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2301      	moveq	r3, #1
 8006fc2:	2300      	movne	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d0c3      	beq.n	8006f56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f7ff ff7e 	bl	8006f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007034:	bf00      	nop
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b21      	cmp	r3, #33	; 0x21
 800704e:	d144      	bne.n	80070da <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007058:	d11a      	bne.n	8007090 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800706e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d105      	bne.n	8007084 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	1c9a      	adds	r2, r3, #2
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]
 8007082:	e00e      	b.n	80070a2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]
 800708e:	e008      	b.n	80070a2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	1c59      	adds	r1, r3, #1
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6211      	str	r1, [r2, #32]
 800709a:	781a      	ldrb	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	4619      	mov	r1, r3
 80070b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10f      	bne.n	80070d6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e000      	b.n	80070dc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff ff07 	bl	8006f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b22      	cmp	r3, #34	; 0x22
 800712a:	d171      	bne.n	8007210 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007134:	d123      	bne.n	800717e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10e      	bne.n	8007162 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	1c9a      	adds	r2, r3, #2
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	629a      	str	r2, [r3, #40]	; 0x28
 8007160:	e029      	b.n	80071b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	b29b      	uxth	r3, r3
 800716a:	b2db      	uxtb	r3, r3
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28
 800717c:	e01b      	b.n	80071b6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6858      	ldr	r0, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	1c59      	adds	r1, r3, #1
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6291      	str	r1, [r2, #40]	; 0x28
 8007196:	b2c2      	uxtb	r2, r0
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	e00c      	b.n	80071b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	1c58      	adds	r0, r3, #1
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	6288      	str	r0, [r1, #40]	; 0x28
 80071ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29b      	uxth	r3, r3
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4619      	mov	r1, r3
 80071c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d120      	bne.n	800720c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0220 	bic.w	r2, r2, #32
 80071d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fc f9c2 	bl	800358c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	e002      	b.n	8007212 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e000      	b.n	8007212 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007210:	2302      	movs	r3, #2
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800725e:	f023 030c 	bic.w	r3, r3, #12
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	430b      	orrs	r3, r1
 800726a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800728a:	f040 818b 	bne.w	80075a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4ac1      	ldr	r2, [pc, #772]	; (8007598 <UART_SetConfig+0x37c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d005      	beq.n	80072a4 <UART_SetConfig+0x88>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4abf      	ldr	r2, [pc, #764]	; (800759c <UART_SetConfig+0x380>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f040 80bd 	bne.w	800741e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fd fd36 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 80072a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	461d      	mov	r5, r3
 80072ae:	f04f 0600 	mov.w	r6, #0
 80072b2:	46a8      	mov	r8, r5
 80072b4:	46b1      	mov	r9, r6
 80072b6:	eb18 0308 	adds.w	r3, r8, r8
 80072ba:	eb49 0409 	adc.w	r4, r9, r9
 80072be:	4698      	mov	r8, r3
 80072c0:	46a1      	mov	r9, r4
 80072c2:	eb18 0805 	adds.w	r8, r8, r5
 80072c6:	eb49 0906 	adc.w	r9, r9, r6
 80072ca:	f04f 0100 	mov.w	r1, #0
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072de:	4688      	mov	r8, r1
 80072e0:	4691      	mov	r9, r2
 80072e2:	eb18 0005 	adds.w	r0, r8, r5
 80072e6:	eb49 0106 	adc.w	r1, r9, r6
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	461d      	mov	r5, r3
 80072f0:	f04f 0600 	mov.w	r6, #0
 80072f4:	196b      	adds	r3, r5, r5
 80072f6:	eb46 0406 	adc.w	r4, r6, r6
 80072fa:	461a      	mov	r2, r3
 80072fc:	4623      	mov	r3, r4
 80072fe:	f7f9 fc6b 	bl	8000bd8 <__aeabi_uldivmod>
 8007302:	4603      	mov	r3, r0
 8007304:	460c      	mov	r4, r1
 8007306:	461a      	mov	r2, r3
 8007308:	4ba5      	ldr	r3, [pc, #660]	; (80075a0 <UART_SetConfig+0x384>)
 800730a:	fba3 2302 	umull	r2, r3, r3, r2
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	461d      	mov	r5, r3
 8007318:	f04f 0600 	mov.w	r6, #0
 800731c:	46a9      	mov	r9, r5
 800731e:	46b2      	mov	sl, r6
 8007320:	eb19 0309 	adds.w	r3, r9, r9
 8007324:	eb4a 040a 	adc.w	r4, sl, sl
 8007328:	4699      	mov	r9, r3
 800732a:	46a2      	mov	sl, r4
 800732c:	eb19 0905 	adds.w	r9, r9, r5
 8007330:	eb4a 0a06 	adc.w	sl, sl, r6
 8007334:	f04f 0100 	mov.w	r1, #0
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007348:	4689      	mov	r9, r1
 800734a:	4692      	mov	sl, r2
 800734c:	eb19 0005 	adds.w	r0, r9, r5
 8007350:	eb4a 0106 	adc.w	r1, sl, r6
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	461d      	mov	r5, r3
 800735a:	f04f 0600 	mov.w	r6, #0
 800735e:	196b      	adds	r3, r5, r5
 8007360:	eb46 0406 	adc.w	r4, r6, r6
 8007364:	461a      	mov	r2, r3
 8007366:	4623      	mov	r3, r4
 8007368:	f7f9 fc36 	bl	8000bd8 <__aeabi_uldivmod>
 800736c:	4603      	mov	r3, r0
 800736e:	460c      	mov	r4, r1
 8007370:	461a      	mov	r2, r3
 8007372:	4b8b      	ldr	r3, [pc, #556]	; (80075a0 <UART_SetConfig+0x384>)
 8007374:	fba3 1302 	umull	r1, r3, r3, r2
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	2164      	movs	r1, #100	; 0x64
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	3332      	adds	r3, #50	; 0x32
 8007386:	4a86      	ldr	r2, [pc, #536]	; (80075a0 <UART_SetConfig+0x384>)
 8007388:	fba2 2303 	umull	r2, r3, r2, r3
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007394:	4498      	add	r8, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	461d      	mov	r5, r3
 800739a:	f04f 0600 	mov.w	r6, #0
 800739e:	46a9      	mov	r9, r5
 80073a0:	46b2      	mov	sl, r6
 80073a2:	eb19 0309 	adds.w	r3, r9, r9
 80073a6:	eb4a 040a 	adc.w	r4, sl, sl
 80073aa:	4699      	mov	r9, r3
 80073ac:	46a2      	mov	sl, r4
 80073ae:	eb19 0905 	adds.w	r9, r9, r5
 80073b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80073b6:	f04f 0100 	mov.w	r1, #0
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ca:	4689      	mov	r9, r1
 80073cc:	4692      	mov	sl, r2
 80073ce:	eb19 0005 	adds.w	r0, r9, r5
 80073d2:	eb4a 0106 	adc.w	r1, sl, r6
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	461d      	mov	r5, r3
 80073dc:	f04f 0600 	mov.w	r6, #0
 80073e0:	196b      	adds	r3, r5, r5
 80073e2:	eb46 0406 	adc.w	r4, r6, r6
 80073e6:	461a      	mov	r2, r3
 80073e8:	4623      	mov	r3, r4
 80073ea:	f7f9 fbf5 	bl	8000bd8 <__aeabi_uldivmod>
 80073ee:	4603      	mov	r3, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	461a      	mov	r2, r3
 80073f4:	4b6a      	ldr	r3, [pc, #424]	; (80075a0 <UART_SetConfig+0x384>)
 80073f6:	fba3 1302 	umull	r1, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	2164      	movs	r1, #100	; 0x64
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	3332      	adds	r3, #50	; 0x32
 8007408:	4a65      	ldr	r2, [pc, #404]	; (80075a0 <UART_SetConfig+0x384>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f003 0207 	and.w	r2, r3, #7
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4442      	add	r2, r8
 800741a:	609a      	str	r2, [r3, #8]
 800741c:	e26f      	b.n	80078fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800741e:	f7fd fc65 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8007422:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	461d      	mov	r5, r3
 8007428:	f04f 0600 	mov.w	r6, #0
 800742c:	46a8      	mov	r8, r5
 800742e:	46b1      	mov	r9, r6
 8007430:	eb18 0308 	adds.w	r3, r8, r8
 8007434:	eb49 0409 	adc.w	r4, r9, r9
 8007438:	4698      	mov	r8, r3
 800743a:	46a1      	mov	r9, r4
 800743c:	eb18 0805 	adds.w	r8, r8, r5
 8007440:	eb49 0906 	adc.w	r9, r9, r6
 8007444:	f04f 0100 	mov.w	r1, #0
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007450:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007454:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007458:	4688      	mov	r8, r1
 800745a:	4691      	mov	r9, r2
 800745c:	eb18 0005 	adds.w	r0, r8, r5
 8007460:	eb49 0106 	adc.w	r1, r9, r6
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	461d      	mov	r5, r3
 800746a:	f04f 0600 	mov.w	r6, #0
 800746e:	196b      	adds	r3, r5, r5
 8007470:	eb46 0406 	adc.w	r4, r6, r6
 8007474:	461a      	mov	r2, r3
 8007476:	4623      	mov	r3, r4
 8007478:	f7f9 fbae 	bl	8000bd8 <__aeabi_uldivmod>
 800747c:	4603      	mov	r3, r0
 800747e:	460c      	mov	r4, r1
 8007480:	461a      	mov	r2, r3
 8007482:	4b47      	ldr	r3, [pc, #284]	; (80075a0 <UART_SetConfig+0x384>)
 8007484:	fba3 2302 	umull	r2, r3, r3, r2
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	461d      	mov	r5, r3
 8007492:	f04f 0600 	mov.w	r6, #0
 8007496:	46a9      	mov	r9, r5
 8007498:	46b2      	mov	sl, r6
 800749a:	eb19 0309 	adds.w	r3, r9, r9
 800749e:	eb4a 040a 	adc.w	r4, sl, sl
 80074a2:	4699      	mov	r9, r3
 80074a4:	46a2      	mov	sl, r4
 80074a6:	eb19 0905 	adds.w	r9, r9, r5
 80074aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80074ae:	f04f 0100 	mov.w	r1, #0
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074c2:	4689      	mov	r9, r1
 80074c4:	4692      	mov	sl, r2
 80074c6:	eb19 0005 	adds.w	r0, r9, r5
 80074ca:	eb4a 0106 	adc.w	r1, sl, r6
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	461d      	mov	r5, r3
 80074d4:	f04f 0600 	mov.w	r6, #0
 80074d8:	196b      	adds	r3, r5, r5
 80074da:	eb46 0406 	adc.w	r4, r6, r6
 80074de:	461a      	mov	r2, r3
 80074e0:	4623      	mov	r3, r4
 80074e2:	f7f9 fb79 	bl	8000bd8 <__aeabi_uldivmod>
 80074e6:	4603      	mov	r3, r0
 80074e8:	460c      	mov	r4, r1
 80074ea:	461a      	mov	r2, r3
 80074ec:	4b2c      	ldr	r3, [pc, #176]	; (80075a0 <UART_SetConfig+0x384>)
 80074ee:	fba3 1302 	umull	r1, r3, r3, r2
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	2164      	movs	r1, #100	; 0x64
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	3332      	adds	r3, #50	; 0x32
 8007500:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <UART_SetConfig+0x384>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800750e:	4498      	add	r8, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	461d      	mov	r5, r3
 8007514:	f04f 0600 	mov.w	r6, #0
 8007518:	46a9      	mov	r9, r5
 800751a:	46b2      	mov	sl, r6
 800751c:	eb19 0309 	adds.w	r3, r9, r9
 8007520:	eb4a 040a 	adc.w	r4, sl, sl
 8007524:	4699      	mov	r9, r3
 8007526:	46a2      	mov	sl, r4
 8007528:	eb19 0905 	adds.w	r9, r9, r5
 800752c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007530:	f04f 0100 	mov.w	r1, #0
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800753c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007544:	4689      	mov	r9, r1
 8007546:	4692      	mov	sl, r2
 8007548:	eb19 0005 	adds.w	r0, r9, r5
 800754c:	eb4a 0106 	adc.w	r1, sl, r6
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	461d      	mov	r5, r3
 8007556:	f04f 0600 	mov.w	r6, #0
 800755a:	196b      	adds	r3, r5, r5
 800755c:	eb46 0406 	adc.w	r4, r6, r6
 8007560:	461a      	mov	r2, r3
 8007562:	4623      	mov	r3, r4
 8007564:	f7f9 fb38 	bl	8000bd8 <__aeabi_uldivmod>
 8007568:	4603      	mov	r3, r0
 800756a:	460c      	mov	r4, r1
 800756c:	461a      	mov	r2, r3
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <UART_SetConfig+0x384>)
 8007570:	fba3 1302 	umull	r1, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	2164      	movs	r1, #100	; 0x64
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	3332      	adds	r3, #50	; 0x32
 8007582:	4a07      	ldr	r2, [pc, #28]	; (80075a0 <UART_SetConfig+0x384>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f003 0207 	and.w	r2, r3, #7
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4442      	add	r2, r8
 8007594:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007596:	e1b2      	b.n	80078fe <UART_SetConfig+0x6e2>
 8007598:	40011000 	.word	0x40011000
 800759c:	40011400 	.word	0x40011400
 80075a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4ad7      	ldr	r2, [pc, #860]	; (8007908 <UART_SetConfig+0x6ec>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d005      	beq.n	80075ba <UART_SetConfig+0x39e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4ad6      	ldr	r2, [pc, #856]	; (800790c <UART_SetConfig+0x6f0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	f040 80d1 	bne.w	800775c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80075ba:	f7fd fbab 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 80075be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	469a      	mov	sl, r3
 80075c4:	f04f 0b00 	mov.w	fp, #0
 80075c8:	46d0      	mov	r8, sl
 80075ca:	46d9      	mov	r9, fp
 80075cc:	eb18 0308 	adds.w	r3, r8, r8
 80075d0:	eb49 0409 	adc.w	r4, r9, r9
 80075d4:	4698      	mov	r8, r3
 80075d6:	46a1      	mov	r9, r4
 80075d8:	eb18 080a 	adds.w	r8, r8, sl
 80075dc:	eb49 090b 	adc.w	r9, r9, fp
 80075e0:	f04f 0100 	mov.w	r1, #0
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075f4:	4688      	mov	r8, r1
 80075f6:	4691      	mov	r9, r2
 80075f8:	eb1a 0508 	adds.w	r5, sl, r8
 80075fc:	eb4b 0609 	adc.w	r6, fp, r9
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4619      	mov	r1, r3
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	f04f 0400 	mov.w	r4, #0
 8007612:	0094      	lsls	r4, r2, #2
 8007614:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007618:	008b      	lsls	r3, r1, #2
 800761a:	461a      	mov	r2, r3
 800761c:	4623      	mov	r3, r4
 800761e:	4628      	mov	r0, r5
 8007620:	4631      	mov	r1, r6
 8007622:	f7f9 fad9 	bl	8000bd8 <__aeabi_uldivmod>
 8007626:	4603      	mov	r3, r0
 8007628:	460c      	mov	r4, r1
 800762a:	461a      	mov	r2, r3
 800762c:	4bb8      	ldr	r3, [pc, #736]	; (8007910 <UART_SetConfig+0x6f4>)
 800762e:	fba3 2302 	umull	r2, r3, r3, r2
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	469b      	mov	fp, r3
 800763c:	f04f 0c00 	mov.w	ip, #0
 8007640:	46d9      	mov	r9, fp
 8007642:	46e2      	mov	sl, ip
 8007644:	eb19 0309 	adds.w	r3, r9, r9
 8007648:	eb4a 040a 	adc.w	r4, sl, sl
 800764c:	4699      	mov	r9, r3
 800764e:	46a2      	mov	sl, r4
 8007650:	eb19 090b 	adds.w	r9, r9, fp
 8007654:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007658:	f04f 0100 	mov.w	r1, #0
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007664:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007668:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800766c:	4689      	mov	r9, r1
 800766e:	4692      	mov	sl, r2
 8007670:	eb1b 0509 	adds.w	r5, fp, r9
 8007674:	eb4c 060a 	adc.w	r6, ip, sl
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4619      	mov	r1, r3
 800767e:	f04f 0200 	mov.w	r2, #0
 8007682:	f04f 0300 	mov.w	r3, #0
 8007686:	f04f 0400 	mov.w	r4, #0
 800768a:	0094      	lsls	r4, r2, #2
 800768c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007690:	008b      	lsls	r3, r1, #2
 8007692:	461a      	mov	r2, r3
 8007694:	4623      	mov	r3, r4
 8007696:	4628      	mov	r0, r5
 8007698:	4631      	mov	r1, r6
 800769a:	f7f9 fa9d 	bl	8000bd8 <__aeabi_uldivmod>
 800769e:	4603      	mov	r3, r0
 80076a0:	460c      	mov	r4, r1
 80076a2:	461a      	mov	r2, r3
 80076a4:	4b9a      	ldr	r3, [pc, #616]	; (8007910 <UART_SetConfig+0x6f4>)
 80076a6:	fba3 1302 	umull	r1, r3, r3, r2
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	2164      	movs	r1, #100	; 0x64
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	3332      	adds	r3, #50	; 0x32
 80076b8:	4a95      	ldr	r2, [pc, #596]	; (8007910 <UART_SetConfig+0x6f4>)
 80076ba:	fba2 2303 	umull	r2, r3, r2, r3
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076c4:	4498      	add	r8, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	469b      	mov	fp, r3
 80076ca:	f04f 0c00 	mov.w	ip, #0
 80076ce:	46d9      	mov	r9, fp
 80076d0:	46e2      	mov	sl, ip
 80076d2:	eb19 0309 	adds.w	r3, r9, r9
 80076d6:	eb4a 040a 	adc.w	r4, sl, sl
 80076da:	4699      	mov	r9, r3
 80076dc:	46a2      	mov	sl, r4
 80076de:	eb19 090b 	adds.w	r9, r9, fp
 80076e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076fa:	4689      	mov	r9, r1
 80076fc:	4692      	mov	sl, r2
 80076fe:	eb1b 0509 	adds.w	r5, fp, r9
 8007702:	eb4c 060a 	adc.w	r6, ip, sl
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	4619      	mov	r1, r3
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	f04f 0400 	mov.w	r4, #0
 8007718:	0094      	lsls	r4, r2, #2
 800771a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800771e:	008b      	lsls	r3, r1, #2
 8007720:	461a      	mov	r2, r3
 8007722:	4623      	mov	r3, r4
 8007724:	4628      	mov	r0, r5
 8007726:	4631      	mov	r1, r6
 8007728:	f7f9 fa56 	bl	8000bd8 <__aeabi_uldivmod>
 800772c:	4603      	mov	r3, r0
 800772e:	460c      	mov	r4, r1
 8007730:	461a      	mov	r2, r3
 8007732:	4b77      	ldr	r3, [pc, #476]	; (8007910 <UART_SetConfig+0x6f4>)
 8007734:	fba3 1302 	umull	r1, r3, r3, r2
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	2164      	movs	r1, #100	; 0x64
 800773c:	fb01 f303 	mul.w	r3, r1, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	3332      	adds	r3, #50	; 0x32
 8007746:	4a72      	ldr	r2, [pc, #456]	; (8007910 <UART_SetConfig+0x6f4>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	f003 020f 	and.w	r2, r3, #15
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4442      	add	r2, r8
 8007758:	609a      	str	r2, [r3, #8]
 800775a:	e0d0      	b.n	80078fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800775c:	f7fd fac6 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8007760:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	469a      	mov	sl, r3
 8007766:	f04f 0b00 	mov.w	fp, #0
 800776a:	46d0      	mov	r8, sl
 800776c:	46d9      	mov	r9, fp
 800776e:	eb18 0308 	adds.w	r3, r8, r8
 8007772:	eb49 0409 	adc.w	r4, r9, r9
 8007776:	4698      	mov	r8, r3
 8007778:	46a1      	mov	r9, r4
 800777a:	eb18 080a 	adds.w	r8, r8, sl
 800777e:	eb49 090b 	adc.w	r9, r9, fp
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800778e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007792:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007796:	4688      	mov	r8, r1
 8007798:	4691      	mov	r9, r2
 800779a:	eb1a 0508 	adds.w	r5, sl, r8
 800779e:	eb4b 0609 	adc.w	r6, fp, r9
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4619      	mov	r1, r3
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	f04f 0400 	mov.w	r4, #0
 80077b4:	0094      	lsls	r4, r2, #2
 80077b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077ba:	008b      	lsls	r3, r1, #2
 80077bc:	461a      	mov	r2, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	4631      	mov	r1, r6
 80077c4:	f7f9 fa08 	bl	8000bd8 <__aeabi_uldivmod>
 80077c8:	4603      	mov	r3, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	461a      	mov	r2, r3
 80077ce:	4b50      	ldr	r3, [pc, #320]	; (8007910 <UART_SetConfig+0x6f4>)
 80077d0:	fba3 2302 	umull	r2, r3, r3, r2
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	469b      	mov	fp, r3
 80077de:	f04f 0c00 	mov.w	ip, #0
 80077e2:	46d9      	mov	r9, fp
 80077e4:	46e2      	mov	sl, ip
 80077e6:	eb19 0309 	adds.w	r3, r9, r9
 80077ea:	eb4a 040a 	adc.w	r4, sl, sl
 80077ee:	4699      	mov	r9, r3
 80077f0:	46a2      	mov	sl, r4
 80077f2:	eb19 090b 	adds.w	r9, r9, fp
 80077f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077fa:	f04f 0100 	mov.w	r1, #0
 80077fe:	f04f 0200 	mov.w	r2, #0
 8007802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007806:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800780a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800780e:	4689      	mov	r9, r1
 8007810:	4692      	mov	sl, r2
 8007812:	eb1b 0509 	adds.w	r5, fp, r9
 8007816:	eb4c 060a 	adc.w	r6, ip, sl
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	4619      	mov	r1, r3
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	f04f 0400 	mov.w	r4, #0
 800782c:	0094      	lsls	r4, r2, #2
 800782e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007832:	008b      	lsls	r3, r1, #2
 8007834:	461a      	mov	r2, r3
 8007836:	4623      	mov	r3, r4
 8007838:	4628      	mov	r0, r5
 800783a:	4631      	mov	r1, r6
 800783c:	f7f9 f9cc 	bl	8000bd8 <__aeabi_uldivmod>
 8007840:	4603      	mov	r3, r0
 8007842:	460c      	mov	r4, r1
 8007844:	461a      	mov	r2, r3
 8007846:	4b32      	ldr	r3, [pc, #200]	; (8007910 <UART_SetConfig+0x6f4>)
 8007848:	fba3 1302 	umull	r1, r3, r3, r2
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	2164      	movs	r1, #100	; 0x64
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	3332      	adds	r3, #50	; 0x32
 800785a:	4a2d      	ldr	r2, [pc, #180]	; (8007910 <UART_SetConfig+0x6f4>)
 800785c:	fba2 2303 	umull	r2, r3, r2, r3
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007866:	4498      	add	r8, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	469b      	mov	fp, r3
 800786c:	f04f 0c00 	mov.w	ip, #0
 8007870:	46d9      	mov	r9, fp
 8007872:	46e2      	mov	sl, ip
 8007874:	eb19 0309 	adds.w	r3, r9, r9
 8007878:	eb4a 040a 	adc.w	r4, sl, sl
 800787c:	4699      	mov	r9, r3
 800787e:	46a2      	mov	sl, r4
 8007880:	eb19 090b 	adds.w	r9, r9, fp
 8007884:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007888:	f04f 0100 	mov.w	r1, #0
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007894:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007898:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800789c:	4689      	mov	r9, r1
 800789e:	4692      	mov	sl, r2
 80078a0:	eb1b 0509 	adds.w	r5, fp, r9
 80078a4:	eb4c 060a 	adc.w	r6, ip, sl
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	4619      	mov	r1, r3
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	0094      	lsls	r4, r2, #2
 80078bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078c0:	008b      	lsls	r3, r1, #2
 80078c2:	461a      	mov	r2, r3
 80078c4:	4623      	mov	r3, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	4631      	mov	r1, r6
 80078ca:	f7f9 f985 	bl	8000bd8 <__aeabi_uldivmod>
 80078ce:	4603      	mov	r3, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	461a      	mov	r2, r3
 80078d4:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <UART_SetConfig+0x6f4>)
 80078d6:	fba3 1302 	umull	r1, r3, r3, r2
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	2164      	movs	r1, #100	; 0x64
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	3332      	adds	r3, #50	; 0x32
 80078e8:	4a09      	ldr	r2, [pc, #36]	; (8007910 <UART_SetConfig+0x6f4>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	f003 020f 	and.w	r2, r3, #15
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4442      	add	r2, r8
 80078fa:	609a      	str	r2, [r3, #8]
}
 80078fc:	e7ff      	b.n	80078fe <UART_SetConfig+0x6e2>
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007908:	40011000 	.word	0x40011000
 800790c:	40011400 	.word	0x40011400
 8007910:	51eb851f 	.word	0x51eb851f

08007914 <__errno>:
 8007914:	4b01      	ldr	r3, [pc, #4]	; (800791c <__errno+0x8>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000020 	.word	0x20000020

08007920 <__libc_init_array>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	4e0d      	ldr	r6, [pc, #52]	; (8007958 <__libc_init_array+0x38>)
 8007924:	4c0d      	ldr	r4, [pc, #52]	; (800795c <__libc_init_array+0x3c>)
 8007926:	1ba4      	subs	r4, r4, r6
 8007928:	10a4      	asrs	r4, r4, #2
 800792a:	2500      	movs	r5, #0
 800792c:	42a5      	cmp	r5, r4
 800792e:	d109      	bne.n	8007944 <__libc_init_array+0x24>
 8007930:	4e0b      	ldr	r6, [pc, #44]	; (8007960 <__libc_init_array+0x40>)
 8007932:	4c0c      	ldr	r4, [pc, #48]	; (8007964 <__libc_init_array+0x44>)
 8007934:	f001 fc7e 	bl	8009234 <_init>
 8007938:	1ba4      	subs	r4, r4, r6
 800793a:	10a4      	asrs	r4, r4, #2
 800793c:	2500      	movs	r5, #0
 800793e:	42a5      	cmp	r5, r4
 8007940:	d105      	bne.n	800794e <__libc_init_array+0x2e>
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007948:	4798      	blx	r3
 800794a:	3501      	adds	r5, #1
 800794c:	e7ee      	b.n	800792c <__libc_init_array+0xc>
 800794e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007952:	4798      	blx	r3
 8007954:	3501      	adds	r5, #1
 8007956:	e7f2      	b.n	800793e <__libc_init_array+0x1e>
 8007958:	08009928 	.word	0x08009928
 800795c:	08009928 	.word	0x08009928
 8007960:	08009928 	.word	0x08009928
 8007964:	0800992c 	.word	0x0800992c

08007968 <memcpy>:
 8007968:	b510      	push	{r4, lr}
 800796a:	1e43      	subs	r3, r0, #1
 800796c:	440a      	add	r2, r1
 800796e:	4291      	cmp	r1, r2
 8007970:	d100      	bne.n	8007974 <memcpy+0xc>
 8007972:	bd10      	pop	{r4, pc}
 8007974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797c:	e7f7      	b.n	800796e <memcpy+0x6>

0800797e <memmove>:
 800797e:	4288      	cmp	r0, r1
 8007980:	b510      	push	{r4, lr}
 8007982:	eb01 0302 	add.w	r3, r1, r2
 8007986:	d807      	bhi.n	8007998 <memmove+0x1a>
 8007988:	1e42      	subs	r2, r0, #1
 800798a:	4299      	cmp	r1, r3
 800798c:	d00a      	beq.n	80079a4 <memmove+0x26>
 800798e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007992:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007996:	e7f8      	b.n	800798a <memmove+0xc>
 8007998:	4283      	cmp	r3, r0
 800799a:	d9f5      	bls.n	8007988 <memmove+0xa>
 800799c:	1881      	adds	r1, r0, r2
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	42d3      	cmn	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memmove+0x28>
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079aa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079ae:	e7f7      	b.n	80079a0 <memmove+0x22>

080079b0 <memset>:
 80079b0:	4402      	add	r2, r0
 80079b2:	4603      	mov	r3, r0
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d100      	bne.n	80079ba <memset+0xa>
 80079b8:	4770      	bx	lr
 80079ba:	f803 1b01 	strb.w	r1, [r3], #1
 80079be:	e7f9      	b.n	80079b4 <memset+0x4>

080079c0 <siprintf>:
 80079c0:	b40e      	push	{r1, r2, r3}
 80079c2:	b500      	push	{lr}
 80079c4:	b09c      	sub	sp, #112	; 0x70
 80079c6:	ab1d      	add	r3, sp, #116	; 0x74
 80079c8:	9002      	str	r0, [sp, #8]
 80079ca:	9006      	str	r0, [sp, #24]
 80079cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079d0:	4809      	ldr	r0, [pc, #36]	; (80079f8 <siprintf+0x38>)
 80079d2:	9107      	str	r1, [sp, #28]
 80079d4:	9104      	str	r1, [sp, #16]
 80079d6:	4909      	ldr	r1, [pc, #36]	; (80079fc <siprintf+0x3c>)
 80079d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079dc:	9105      	str	r1, [sp, #20]
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	a902      	add	r1, sp, #8
 80079e4:	f000 f866 	bl	8007ab4 <_svfiprintf_r>
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	b01c      	add	sp, #112	; 0x70
 80079f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079f4:	b003      	add	sp, #12
 80079f6:	4770      	bx	lr
 80079f8:	20000020 	.word	0x20000020
 80079fc:	ffff0208 	.word	0xffff0208

08007a00 <__ssputs_r>:
 8007a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a04:	688e      	ldr	r6, [r1, #8]
 8007a06:	429e      	cmp	r6, r3
 8007a08:	4682      	mov	sl, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	4699      	mov	r9, r3
 8007a10:	d837      	bhi.n	8007a82 <__ssputs_r+0x82>
 8007a12:	898a      	ldrh	r2, [r1, #12]
 8007a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a18:	d031      	beq.n	8007a7e <__ssputs_r+0x7e>
 8007a1a:	6825      	ldr	r5, [r4, #0]
 8007a1c:	6909      	ldr	r1, [r1, #16]
 8007a1e:	1a6f      	subs	r7, r5, r1
 8007a20:	6965      	ldr	r5, [r4, #20]
 8007a22:	2302      	movs	r3, #2
 8007a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a28:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a2c:	f109 0301 	add.w	r3, r9, #1
 8007a30:	443b      	add	r3, r7
 8007a32:	429d      	cmp	r5, r3
 8007a34:	bf38      	it	cc
 8007a36:	461d      	movcc	r5, r3
 8007a38:	0553      	lsls	r3, r2, #21
 8007a3a:	d530      	bpl.n	8007a9e <__ssputs_r+0x9e>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f000 fb07 	bl	8008050 <_malloc_r>
 8007a42:	4606      	mov	r6, r0
 8007a44:	b950      	cbnz	r0, 8007a5c <__ssputs_r+0x5c>
 8007a46:	230c      	movs	r3, #12
 8007a48:	f8ca 3000 	str.w	r3, [sl]
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	6921      	ldr	r1, [r4, #16]
 8007a60:	f7ff ff82 	bl	8007968 <memcpy>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	6126      	str	r6, [r4, #16]
 8007a72:	6165      	str	r5, [r4, #20]
 8007a74:	443e      	add	r6, r7
 8007a76:	1bed      	subs	r5, r5, r7
 8007a78:	6026      	str	r6, [r4, #0]
 8007a7a:	60a5      	str	r5, [r4, #8]
 8007a7c:	464e      	mov	r6, r9
 8007a7e:	454e      	cmp	r6, r9
 8007a80:	d900      	bls.n	8007a84 <__ssputs_r+0x84>
 8007a82:	464e      	mov	r6, r9
 8007a84:	4632      	mov	r2, r6
 8007a86:	4641      	mov	r1, r8
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	f7ff ff78 	bl	800797e <memmove>
 8007a8e:	68a3      	ldr	r3, [r4, #8]
 8007a90:	1b9b      	subs	r3, r3, r6
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	441e      	add	r6, r3
 8007a98:	6026      	str	r6, [r4, #0]
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e7dc      	b.n	8007a58 <__ssputs_r+0x58>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	f000 fb30 	bl	8008104 <_realloc_r>
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d1e2      	bne.n	8007a70 <__ssputs_r+0x70>
 8007aaa:	6921      	ldr	r1, [r4, #16]
 8007aac:	4650      	mov	r0, sl
 8007aae:	f000 fa81 	bl	8007fb4 <_free_r>
 8007ab2:	e7c8      	b.n	8007a46 <__ssputs_r+0x46>

08007ab4 <_svfiprintf_r>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	461d      	mov	r5, r3
 8007aba:	898b      	ldrh	r3, [r1, #12]
 8007abc:	061f      	lsls	r7, r3, #24
 8007abe:	b09d      	sub	sp, #116	; 0x74
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	d50f      	bpl.n	8007ae8 <_svfiprintf_r+0x34>
 8007ac8:	690b      	ldr	r3, [r1, #16]
 8007aca:	b96b      	cbnz	r3, 8007ae8 <_svfiprintf_r+0x34>
 8007acc:	2140      	movs	r1, #64	; 0x40
 8007ace:	f000 fabf 	bl	8008050 <_malloc_r>
 8007ad2:	6020      	str	r0, [r4, #0]
 8007ad4:	6120      	str	r0, [r4, #16]
 8007ad6:	b928      	cbnz	r0, 8007ae4 <_svfiprintf_r+0x30>
 8007ad8:	230c      	movs	r3, #12
 8007ada:	f8c8 3000 	str.w	r3, [r8]
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	e0c8      	b.n	8007c76 <_svfiprintf_r+0x1c2>
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	6163      	str	r3, [r4, #20]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9309      	str	r3, [sp, #36]	; 0x24
 8007aec:	2320      	movs	r3, #32
 8007aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007af2:	2330      	movs	r3, #48	; 0x30
 8007af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af8:	9503      	str	r5, [sp, #12]
 8007afa:	f04f 0b01 	mov.w	fp, #1
 8007afe:	4637      	mov	r7, r6
 8007b00:	463d      	mov	r5, r7
 8007b02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b06:	b10b      	cbz	r3, 8007b0c <_svfiprintf_r+0x58>
 8007b08:	2b25      	cmp	r3, #37	; 0x25
 8007b0a:	d13e      	bne.n	8007b8a <_svfiprintf_r+0xd6>
 8007b0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b10:	d00b      	beq.n	8007b2a <_svfiprintf_r+0x76>
 8007b12:	4653      	mov	r3, sl
 8007b14:	4632      	mov	r2, r6
 8007b16:	4621      	mov	r1, r4
 8007b18:	4640      	mov	r0, r8
 8007b1a:	f7ff ff71 	bl	8007a00 <__ssputs_r>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f000 80a4 	beq.w	8007c6c <_svfiprintf_r+0x1b8>
 8007b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b26:	4453      	add	r3, sl
 8007b28:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2a:	783b      	ldrb	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 809d 	beq.w	8007c6c <_svfiprintf_r+0x1b8>
 8007b32:	2300      	movs	r3, #0
 8007b34:	f04f 32ff 	mov.w	r2, #4294967295
 8007b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b44:	931a      	str	r3, [sp, #104]	; 0x68
 8007b46:	462f      	mov	r7, r5
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b4e:	4850      	ldr	r0, [pc, #320]	; (8007c90 <_svfiprintf_r+0x1dc>)
 8007b50:	f7f8 fb66 	bl	8000220 <memchr>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	b9d0      	cbnz	r0, 8007b8e <_svfiprintf_r+0xda>
 8007b58:	06d9      	lsls	r1, r3, #27
 8007b5a:	bf44      	itt	mi
 8007b5c:	2220      	movmi	r2, #32
 8007b5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b62:	071a      	lsls	r2, r3, #28
 8007b64:	bf44      	itt	mi
 8007b66:	222b      	movmi	r2, #43	; 0x2b
 8007b68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b6c:	782a      	ldrb	r2, [r5, #0]
 8007b6e:	2a2a      	cmp	r2, #42	; 0x2a
 8007b70:	d015      	beq.n	8007b9e <_svfiprintf_r+0xea>
 8007b72:	9a07      	ldr	r2, [sp, #28]
 8007b74:	462f      	mov	r7, r5
 8007b76:	2000      	movs	r0, #0
 8007b78:	250a      	movs	r5, #10
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b80:	3b30      	subs	r3, #48	; 0x30
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d94d      	bls.n	8007c22 <_svfiprintf_r+0x16e>
 8007b86:	b1b8      	cbz	r0, 8007bb8 <_svfiprintf_r+0x104>
 8007b88:	e00f      	b.n	8007baa <_svfiprintf_r+0xf6>
 8007b8a:	462f      	mov	r7, r5
 8007b8c:	e7b8      	b.n	8007b00 <_svfiprintf_r+0x4c>
 8007b8e:	4a40      	ldr	r2, [pc, #256]	; (8007c90 <_svfiprintf_r+0x1dc>)
 8007b90:	1a80      	subs	r0, r0, r2
 8007b92:	fa0b f000 	lsl.w	r0, fp, r0
 8007b96:	4318      	orrs	r0, r3
 8007b98:	9004      	str	r0, [sp, #16]
 8007b9a:	463d      	mov	r5, r7
 8007b9c:	e7d3      	b.n	8007b46 <_svfiprintf_r+0x92>
 8007b9e:	9a03      	ldr	r2, [sp, #12]
 8007ba0:	1d11      	adds	r1, r2, #4
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	9103      	str	r1, [sp, #12]
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	db01      	blt.n	8007bae <_svfiprintf_r+0xfa>
 8007baa:	9207      	str	r2, [sp, #28]
 8007bac:	e004      	b.n	8007bb8 <_svfiprintf_r+0x104>
 8007bae:	4252      	negs	r2, r2
 8007bb0:	f043 0302 	orr.w	r3, r3, #2
 8007bb4:	9207      	str	r2, [sp, #28]
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	783b      	ldrb	r3, [r7, #0]
 8007bba:	2b2e      	cmp	r3, #46	; 0x2e
 8007bbc:	d10c      	bne.n	8007bd8 <_svfiprintf_r+0x124>
 8007bbe:	787b      	ldrb	r3, [r7, #1]
 8007bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc2:	d133      	bne.n	8007c2c <_svfiprintf_r+0x178>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	9203      	str	r2, [sp, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfb8      	it	lt
 8007bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd4:	3702      	adds	r7, #2
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	4d2e      	ldr	r5, [pc, #184]	; (8007c94 <_svfiprintf_r+0x1e0>)
 8007bda:	7839      	ldrb	r1, [r7, #0]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7f8 fb1e 	bl	8000220 <memchr>
 8007be4:	b138      	cbz	r0, 8007bf6 <_svfiprintf_r+0x142>
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	1b40      	subs	r0, r0, r5
 8007bea:	fa03 f000 	lsl.w	r0, r3, r0
 8007bee:	9b04      	ldr	r3, [sp, #16]
 8007bf0:	4303      	orrs	r3, r0
 8007bf2:	3701      	adds	r7, #1
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	7839      	ldrb	r1, [r7, #0]
 8007bf8:	4827      	ldr	r0, [pc, #156]	; (8007c98 <_svfiprintf_r+0x1e4>)
 8007bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bfe:	2206      	movs	r2, #6
 8007c00:	1c7e      	adds	r6, r7, #1
 8007c02:	f7f8 fb0d 	bl	8000220 <memchr>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d038      	beq.n	8007c7c <_svfiprintf_r+0x1c8>
 8007c0a:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <_svfiprintf_r+0x1e8>)
 8007c0c:	bb13      	cbnz	r3, 8007c54 <_svfiprintf_r+0x1a0>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	3307      	adds	r3, #7
 8007c12:	f023 0307 	bic.w	r3, r3, #7
 8007c16:	3308      	adds	r3, #8
 8007c18:	9303      	str	r3, [sp, #12]
 8007c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1c:	444b      	add	r3, r9
 8007c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c20:	e76d      	b.n	8007afe <_svfiprintf_r+0x4a>
 8007c22:	fb05 3202 	mla	r2, r5, r2, r3
 8007c26:	2001      	movs	r0, #1
 8007c28:	460f      	mov	r7, r1
 8007c2a:	e7a6      	b.n	8007b7a <_svfiprintf_r+0xc6>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	3701      	adds	r7, #1
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	4619      	mov	r1, r3
 8007c34:	250a      	movs	r5, #10
 8007c36:	4638      	mov	r0, r7
 8007c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c3c:	3a30      	subs	r2, #48	; 0x30
 8007c3e:	2a09      	cmp	r2, #9
 8007c40:	d903      	bls.n	8007c4a <_svfiprintf_r+0x196>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c8      	beq.n	8007bd8 <_svfiprintf_r+0x124>
 8007c46:	9105      	str	r1, [sp, #20]
 8007c48:	e7c6      	b.n	8007bd8 <_svfiprintf_r+0x124>
 8007c4a:	fb05 2101 	mla	r1, r5, r1, r2
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4607      	mov	r7, r0
 8007c52:	e7f0      	b.n	8007c36 <_svfiprintf_r+0x182>
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <_svfiprintf_r+0x1ec>)
 8007c5c:	a904      	add	r1, sp, #16
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f3af 8000 	nop.w
 8007c64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c68:	4681      	mov	r9, r0
 8007c6a:	d1d6      	bne.n	8007c1a <_svfiprintf_r+0x166>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	065b      	lsls	r3, r3, #25
 8007c70:	f53f af35 	bmi.w	8007ade <_svfiprintf_r+0x2a>
 8007c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c76:	b01d      	add	sp, #116	; 0x74
 8007c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7c:	ab03      	add	r3, sp, #12
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4622      	mov	r2, r4
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <_svfiprintf_r+0x1ec>)
 8007c84:	a904      	add	r1, sp, #16
 8007c86:	4640      	mov	r0, r8
 8007c88:	f000 f882 	bl	8007d90 <_printf_i>
 8007c8c:	e7ea      	b.n	8007c64 <_svfiprintf_r+0x1b0>
 8007c8e:	bf00      	nop
 8007c90:	080098a8 	.word	0x080098a8
 8007c94:	080098ae 	.word	0x080098ae
 8007c98:	080098b2 	.word	0x080098b2
 8007c9c:	00000000 	.word	0x00000000
 8007ca0:	08007a01 	.word	0x08007a01

08007ca4 <_printf_common>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	4691      	mov	r9, r2
 8007caa:	461f      	mov	r7, r3
 8007cac:	688a      	ldr	r2, [r1, #8]
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bfb8      	it	lt
 8007cb8:	4613      	movlt	r3, r2
 8007cba:	f8c9 3000 	str.w	r3, [r9]
 8007cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	b112      	cbz	r2, 8007cce <_printf_common+0x2a>
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f8c9 3000 	str.w	r3, [r9]
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	0699      	lsls	r1, r3, #26
 8007cd2:	bf42      	ittt	mi
 8007cd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cd8:	3302      	addmi	r3, #2
 8007cda:	f8c9 3000 	strmi.w	r3, [r9]
 8007cde:	6825      	ldr	r5, [r4, #0]
 8007ce0:	f015 0506 	ands.w	r5, r5, #6
 8007ce4:	d107      	bne.n	8007cf6 <_printf_common+0x52>
 8007ce6:	f104 0a19 	add.w	sl, r4, #25
 8007cea:	68e3      	ldr	r3, [r4, #12]
 8007cec:	f8d9 2000 	ldr.w	r2, [r9]
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	42ab      	cmp	r3, r5
 8007cf4:	dc28      	bgt.n	8007d48 <_printf_common+0xa4>
 8007cf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	3300      	adds	r3, #0
 8007cfe:	bf18      	it	ne
 8007d00:	2301      	movne	r3, #1
 8007d02:	0692      	lsls	r2, r2, #26
 8007d04:	d42d      	bmi.n	8007d62 <_printf_common+0xbe>
 8007d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	47c0      	blx	r8
 8007d10:	3001      	adds	r0, #1
 8007d12:	d020      	beq.n	8007d56 <_printf_common+0xb2>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	68e5      	ldr	r5, [r4, #12]
 8007d18:	f8d9 2000 	ldr.w	r2, [r9]
 8007d1c:	f003 0306 	and.w	r3, r3, #6
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	bf08      	it	eq
 8007d24:	1aad      	subeq	r5, r5, r2
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	6922      	ldr	r2, [r4, #16]
 8007d2a:	bf0c      	ite	eq
 8007d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d30:	2500      	movne	r5, #0
 8007d32:	4293      	cmp	r3, r2
 8007d34:	bfc4      	itt	gt
 8007d36:	1a9b      	subgt	r3, r3, r2
 8007d38:	18ed      	addgt	r5, r5, r3
 8007d3a:	f04f 0900 	mov.w	r9, #0
 8007d3e:	341a      	adds	r4, #26
 8007d40:	454d      	cmp	r5, r9
 8007d42:	d11a      	bne.n	8007d7a <_printf_common+0xd6>
 8007d44:	2000      	movs	r0, #0
 8007d46:	e008      	b.n	8007d5a <_printf_common+0xb6>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	4630      	mov	r0, r6
 8007d50:	47c0      	blx	r8
 8007d52:	3001      	adds	r0, #1
 8007d54:	d103      	bne.n	8007d5e <_printf_common+0xba>
 8007d56:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5e:	3501      	adds	r5, #1
 8007d60:	e7c3      	b.n	8007cea <_printf_common+0x46>
 8007d62:	18e1      	adds	r1, r4, r3
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	2030      	movs	r0, #48	; 0x30
 8007d68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d6c:	4422      	add	r2, r4
 8007d6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d76:	3302      	adds	r3, #2
 8007d78:	e7c5      	b.n	8007d06 <_printf_common+0x62>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	4639      	mov	r1, r7
 8007d80:	4630      	mov	r0, r6
 8007d82:	47c0      	blx	r8
 8007d84:	3001      	adds	r0, #1
 8007d86:	d0e6      	beq.n	8007d56 <_printf_common+0xb2>
 8007d88:	f109 0901 	add.w	r9, r9, #1
 8007d8c:	e7d8      	b.n	8007d40 <_printf_common+0x9c>
	...

08007d90 <_printf_i>:
 8007d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d98:	460c      	mov	r4, r1
 8007d9a:	7e09      	ldrb	r1, [r1, #24]
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	296e      	cmp	r1, #110	; 0x6e
 8007da0:	4617      	mov	r7, r2
 8007da2:	4606      	mov	r6, r0
 8007da4:	4698      	mov	r8, r3
 8007da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007da8:	f000 80b3 	beq.w	8007f12 <_printf_i+0x182>
 8007dac:	d822      	bhi.n	8007df4 <_printf_i+0x64>
 8007dae:	2963      	cmp	r1, #99	; 0x63
 8007db0:	d036      	beq.n	8007e20 <_printf_i+0x90>
 8007db2:	d80a      	bhi.n	8007dca <_printf_i+0x3a>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	f000 80b9 	beq.w	8007f2c <_printf_i+0x19c>
 8007dba:	2958      	cmp	r1, #88	; 0x58
 8007dbc:	f000 8083 	beq.w	8007ec6 <_printf_i+0x136>
 8007dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007dc8:	e032      	b.n	8007e30 <_printf_i+0xa0>
 8007dca:	2964      	cmp	r1, #100	; 0x64
 8007dcc:	d001      	beq.n	8007dd2 <_printf_i+0x42>
 8007dce:	2969      	cmp	r1, #105	; 0x69
 8007dd0:	d1f6      	bne.n	8007dc0 <_printf_i+0x30>
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	6813      	ldr	r3, [r2, #0]
 8007dd6:	0605      	lsls	r5, r0, #24
 8007dd8:	f103 0104 	add.w	r1, r3, #4
 8007ddc:	d52a      	bpl.n	8007e34 <_printf_i+0xa4>
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	da03      	bge.n	8007dee <_printf_i+0x5e>
 8007de6:	222d      	movs	r2, #45	; 0x2d
 8007de8:	425b      	negs	r3, r3
 8007dea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dee:	486f      	ldr	r0, [pc, #444]	; (8007fac <_printf_i+0x21c>)
 8007df0:	220a      	movs	r2, #10
 8007df2:	e039      	b.n	8007e68 <_printf_i+0xd8>
 8007df4:	2973      	cmp	r1, #115	; 0x73
 8007df6:	f000 809d 	beq.w	8007f34 <_printf_i+0x1a4>
 8007dfa:	d808      	bhi.n	8007e0e <_printf_i+0x7e>
 8007dfc:	296f      	cmp	r1, #111	; 0x6f
 8007dfe:	d020      	beq.n	8007e42 <_printf_i+0xb2>
 8007e00:	2970      	cmp	r1, #112	; 0x70
 8007e02:	d1dd      	bne.n	8007dc0 <_printf_i+0x30>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	f043 0320 	orr.w	r3, r3, #32
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	e003      	b.n	8007e16 <_printf_i+0x86>
 8007e0e:	2975      	cmp	r1, #117	; 0x75
 8007e10:	d017      	beq.n	8007e42 <_printf_i+0xb2>
 8007e12:	2978      	cmp	r1, #120	; 0x78
 8007e14:	d1d4      	bne.n	8007dc0 <_printf_i+0x30>
 8007e16:	2378      	movs	r3, #120	; 0x78
 8007e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e1c:	4864      	ldr	r0, [pc, #400]	; (8007fb0 <_printf_i+0x220>)
 8007e1e:	e055      	b.n	8007ecc <_printf_i+0x13c>
 8007e20:	6813      	ldr	r3, [r2, #0]
 8007e22:	1d19      	adds	r1, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6011      	str	r1, [r2, #0]
 8007e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e30:	2301      	movs	r3, #1
 8007e32:	e08c      	b.n	8007f4e <_printf_i+0x1be>
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6011      	str	r1, [r2, #0]
 8007e38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e3c:	bf18      	it	ne
 8007e3e:	b21b      	sxthne	r3, r3
 8007e40:	e7cf      	b.n	8007de2 <_printf_i+0x52>
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	6825      	ldr	r5, [r4, #0]
 8007e46:	1d18      	adds	r0, r3, #4
 8007e48:	6010      	str	r0, [r2, #0]
 8007e4a:	0628      	lsls	r0, r5, #24
 8007e4c:	d501      	bpl.n	8007e52 <_printf_i+0xc2>
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	e002      	b.n	8007e58 <_printf_i+0xc8>
 8007e52:	0668      	lsls	r0, r5, #25
 8007e54:	d5fb      	bpl.n	8007e4e <_printf_i+0xbe>
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	4854      	ldr	r0, [pc, #336]	; (8007fac <_printf_i+0x21c>)
 8007e5a:	296f      	cmp	r1, #111	; 0x6f
 8007e5c:	bf14      	ite	ne
 8007e5e:	220a      	movne	r2, #10
 8007e60:	2208      	moveq	r2, #8
 8007e62:	2100      	movs	r1, #0
 8007e64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e68:	6865      	ldr	r5, [r4, #4]
 8007e6a:	60a5      	str	r5, [r4, #8]
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	f2c0 8095 	blt.w	8007f9c <_printf_i+0x20c>
 8007e72:	6821      	ldr	r1, [r4, #0]
 8007e74:	f021 0104 	bic.w	r1, r1, #4
 8007e78:	6021      	str	r1, [r4, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d13d      	bne.n	8007efa <_printf_i+0x16a>
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	f040 808e 	bne.w	8007fa0 <_printf_i+0x210>
 8007e84:	4665      	mov	r5, ip
 8007e86:	2a08      	cmp	r2, #8
 8007e88:	d10b      	bne.n	8007ea2 <_printf_i+0x112>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	07db      	lsls	r3, r3, #31
 8007e8e:	d508      	bpl.n	8007ea2 <_printf_i+0x112>
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	6862      	ldr	r2, [r4, #4]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	bfde      	ittt	le
 8007e98:	2330      	movle	r3, #48	; 0x30
 8007e9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ea2:	ebac 0305 	sub.w	r3, ip, r5
 8007ea6:	6123      	str	r3, [r4, #16]
 8007ea8:	f8cd 8000 	str.w	r8, [sp]
 8007eac:	463b      	mov	r3, r7
 8007eae:	aa03      	add	r2, sp, #12
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff fef6 	bl	8007ca4 <_printf_common>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d14d      	bne.n	8007f58 <_printf_i+0x1c8>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	b005      	add	sp, #20
 8007ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ec6:	4839      	ldr	r0, [pc, #228]	; (8007fac <_printf_i+0x21c>)
 8007ec8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ecc:	6813      	ldr	r3, [r2, #0]
 8007ece:	6821      	ldr	r1, [r4, #0]
 8007ed0:	1d1d      	adds	r5, r3, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6015      	str	r5, [r2, #0]
 8007ed6:	060a      	lsls	r2, r1, #24
 8007ed8:	d50b      	bpl.n	8007ef2 <_printf_i+0x162>
 8007eda:	07ca      	lsls	r2, r1, #31
 8007edc:	bf44      	itt	mi
 8007ede:	f041 0120 	orrmi.w	r1, r1, #32
 8007ee2:	6021      	strmi	r1, [r4, #0]
 8007ee4:	b91b      	cbnz	r3, 8007eee <_printf_i+0x15e>
 8007ee6:	6822      	ldr	r2, [r4, #0]
 8007ee8:	f022 0220 	bic.w	r2, r2, #32
 8007eec:	6022      	str	r2, [r4, #0]
 8007eee:	2210      	movs	r2, #16
 8007ef0:	e7b7      	b.n	8007e62 <_printf_i+0xd2>
 8007ef2:	064d      	lsls	r5, r1, #25
 8007ef4:	bf48      	it	mi
 8007ef6:	b29b      	uxthmi	r3, r3
 8007ef8:	e7ef      	b.n	8007eda <_printf_i+0x14a>
 8007efa:	4665      	mov	r5, ip
 8007efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f00:	fb02 3311 	mls	r3, r2, r1, r3
 8007f04:	5cc3      	ldrb	r3, [r0, r3]
 8007f06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	d1f5      	bne.n	8007efc <_printf_i+0x16c>
 8007f10:	e7b9      	b.n	8007e86 <_printf_i+0xf6>
 8007f12:	6813      	ldr	r3, [r2, #0]
 8007f14:	6825      	ldr	r5, [r4, #0]
 8007f16:	6961      	ldr	r1, [r4, #20]
 8007f18:	1d18      	adds	r0, r3, #4
 8007f1a:	6010      	str	r0, [r2, #0]
 8007f1c:	0628      	lsls	r0, r5, #24
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	d501      	bpl.n	8007f26 <_printf_i+0x196>
 8007f22:	6019      	str	r1, [r3, #0]
 8007f24:	e002      	b.n	8007f2c <_printf_i+0x19c>
 8007f26:	066a      	lsls	r2, r5, #25
 8007f28:	d5fb      	bpl.n	8007f22 <_printf_i+0x192>
 8007f2a:	8019      	strh	r1, [r3, #0]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	4665      	mov	r5, ip
 8007f32:	e7b9      	b.n	8007ea8 <_printf_i+0x118>
 8007f34:	6813      	ldr	r3, [r2, #0]
 8007f36:	1d19      	adds	r1, r3, #4
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	681d      	ldr	r5, [r3, #0]
 8007f3c:	6862      	ldr	r2, [r4, #4]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	4628      	mov	r0, r5
 8007f42:	f7f8 f96d 	bl	8000220 <memchr>
 8007f46:	b108      	cbz	r0, 8007f4c <_printf_i+0x1bc>
 8007f48:	1b40      	subs	r0, r0, r5
 8007f4a:	6060      	str	r0, [r4, #4]
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	6123      	str	r3, [r4, #16]
 8007f50:	2300      	movs	r3, #0
 8007f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f56:	e7a7      	b.n	8007ea8 <_printf_i+0x118>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4630      	mov	r0, r6
 8007f60:	47c0      	blx	r8
 8007f62:	3001      	adds	r0, #1
 8007f64:	d0aa      	beq.n	8007ebc <_printf_i+0x12c>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	079b      	lsls	r3, r3, #30
 8007f6a:	d413      	bmi.n	8007f94 <_printf_i+0x204>
 8007f6c:	68e0      	ldr	r0, [r4, #12]
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	4298      	cmp	r0, r3
 8007f72:	bfb8      	it	lt
 8007f74:	4618      	movlt	r0, r3
 8007f76:	e7a3      	b.n	8007ec0 <_printf_i+0x130>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	464a      	mov	r2, r9
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	4630      	mov	r0, r6
 8007f80:	47c0      	blx	r8
 8007f82:	3001      	adds	r0, #1
 8007f84:	d09a      	beq.n	8007ebc <_printf_i+0x12c>
 8007f86:	3501      	adds	r5, #1
 8007f88:	68e3      	ldr	r3, [r4, #12]
 8007f8a:	9a03      	ldr	r2, [sp, #12]
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	42ab      	cmp	r3, r5
 8007f90:	dcf2      	bgt.n	8007f78 <_printf_i+0x1e8>
 8007f92:	e7eb      	b.n	8007f6c <_printf_i+0x1dc>
 8007f94:	2500      	movs	r5, #0
 8007f96:	f104 0919 	add.w	r9, r4, #25
 8007f9a:	e7f5      	b.n	8007f88 <_printf_i+0x1f8>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1ac      	bne.n	8007efa <_printf_i+0x16a>
 8007fa0:	7803      	ldrb	r3, [r0, #0]
 8007fa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007faa:	e76c      	b.n	8007e86 <_printf_i+0xf6>
 8007fac:	080098b9 	.word	0x080098b9
 8007fb0:	080098ca 	.word	0x080098ca

08007fb4 <_free_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	d045      	beq.n	8008048 <_free_r+0x94>
 8007fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc0:	1f0c      	subs	r4, r1, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bfb8      	it	lt
 8007fc6:	18e4      	addlt	r4, r4, r3
 8007fc8:	f000 f8d2 	bl	8008170 <__malloc_lock>
 8007fcc:	4a1f      	ldr	r2, [pc, #124]	; (800804c <_free_r+0x98>)
 8007fce:	6813      	ldr	r3, [r2, #0]
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	b933      	cbnz	r3, 8007fe2 <_free_r+0x2e>
 8007fd4:	6063      	str	r3, [r4, #4]
 8007fd6:	6014      	str	r4, [r2, #0]
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fde:	f000 b8c8 	b.w	8008172 <__malloc_unlock>
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	d90c      	bls.n	8008000 <_free_r+0x4c>
 8007fe6:	6821      	ldr	r1, [r4, #0]
 8007fe8:	1862      	adds	r2, r4, r1
 8007fea:	4293      	cmp	r3, r2
 8007fec:	bf04      	itt	eq
 8007fee:	681a      	ldreq	r2, [r3, #0]
 8007ff0:	685b      	ldreq	r3, [r3, #4]
 8007ff2:	6063      	str	r3, [r4, #4]
 8007ff4:	bf04      	itt	eq
 8007ff6:	1852      	addeq	r2, r2, r1
 8007ff8:	6022      	streq	r2, [r4, #0]
 8007ffa:	6004      	str	r4, [r0, #0]
 8007ffc:	e7ec      	b.n	8007fd8 <_free_r+0x24>
 8007ffe:	4613      	mov	r3, r2
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	b10a      	cbz	r2, 8008008 <_free_r+0x54>
 8008004:	42a2      	cmp	r2, r4
 8008006:	d9fa      	bls.n	8007ffe <_free_r+0x4a>
 8008008:	6819      	ldr	r1, [r3, #0]
 800800a:	1858      	adds	r0, r3, r1
 800800c:	42a0      	cmp	r0, r4
 800800e:	d10b      	bne.n	8008028 <_free_r+0x74>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	4401      	add	r1, r0
 8008014:	1858      	adds	r0, r3, r1
 8008016:	4282      	cmp	r2, r0
 8008018:	6019      	str	r1, [r3, #0]
 800801a:	d1dd      	bne.n	8007fd8 <_free_r+0x24>
 800801c:	6810      	ldr	r0, [r2, #0]
 800801e:	6852      	ldr	r2, [r2, #4]
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	4401      	add	r1, r0
 8008024:	6019      	str	r1, [r3, #0]
 8008026:	e7d7      	b.n	8007fd8 <_free_r+0x24>
 8008028:	d902      	bls.n	8008030 <_free_r+0x7c>
 800802a:	230c      	movs	r3, #12
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	e7d3      	b.n	8007fd8 <_free_r+0x24>
 8008030:	6820      	ldr	r0, [r4, #0]
 8008032:	1821      	adds	r1, r4, r0
 8008034:	428a      	cmp	r2, r1
 8008036:	bf04      	itt	eq
 8008038:	6811      	ldreq	r1, [r2, #0]
 800803a:	6852      	ldreq	r2, [r2, #4]
 800803c:	6062      	str	r2, [r4, #4]
 800803e:	bf04      	itt	eq
 8008040:	1809      	addeq	r1, r1, r0
 8008042:	6021      	streq	r1, [r4, #0]
 8008044:	605c      	str	r4, [r3, #4]
 8008046:	e7c7      	b.n	8007fd8 <_free_r+0x24>
 8008048:	bd38      	pop	{r3, r4, r5, pc}
 800804a:	bf00      	nop
 800804c:	200000dc 	.word	0x200000dc

08008050 <_malloc_r>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	1ccd      	adds	r5, r1, #3
 8008054:	f025 0503 	bic.w	r5, r5, #3
 8008058:	3508      	adds	r5, #8
 800805a:	2d0c      	cmp	r5, #12
 800805c:	bf38      	it	cc
 800805e:	250c      	movcc	r5, #12
 8008060:	2d00      	cmp	r5, #0
 8008062:	4606      	mov	r6, r0
 8008064:	db01      	blt.n	800806a <_malloc_r+0x1a>
 8008066:	42a9      	cmp	r1, r5
 8008068:	d903      	bls.n	8008072 <_malloc_r+0x22>
 800806a:	230c      	movs	r3, #12
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	2000      	movs	r0, #0
 8008070:	bd70      	pop	{r4, r5, r6, pc}
 8008072:	f000 f87d 	bl	8008170 <__malloc_lock>
 8008076:	4a21      	ldr	r2, [pc, #132]	; (80080fc <_malloc_r+0xac>)
 8008078:	6814      	ldr	r4, [r2, #0]
 800807a:	4621      	mov	r1, r4
 800807c:	b991      	cbnz	r1, 80080a4 <_malloc_r+0x54>
 800807e:	4c20      	ldr	r4, [pc, #128]	; (8008100 <_malloc_r+0xb0>)
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	b91b      	cbnz	r3, 800808c <_malloc_r+0x3c>
 8008084:	4630      	mov	r0, r6
 8008086:	f000 f863 	bl	8008150 <_sbrk_r>
 800808a:	6020      	str	r0, [r4, #0]
 800808c:	4629      	mov	r1, r5
 800808e:	4630      	mov	r0, r6
 8008090:	f000 f85e 	bl	8008150 <_sbrk_r>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d124      	bne.n	80080e2 <_malloc_r+0x92>
 8008098:	230c      	movs	r3, #12
 800809a:	6033      	str	r3, [r6, #0]
 800809c:	4630      	mov	r0, r6
 800809e:	f000 f868 	bl	8008172 <__malloc_unlock>
 80080a2:	e7e4      	b.n	800806e <_malloc_r+0x1e>
 80080a4:	680b      	ldr	r3, [r1, #0]
 80080a6:	1b5b      	subs	r3, r3, r5
 80080a8:	d418      	bmi.n	80080dc <_malloc_r+0x8c>
 80080aa:	2b0b      	cmp	r3, #11
 80080ac:	d90f      	bls.n	80080ce <_malloc_r+0x7e>
 80080ae:	600b      	str	r3, [r1, #0]
 80080b0:	50cd      	str	r5, [r1, r3]
 80080b2:	18cc      	adds	r4, r1, r3
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 f85c 	bl	8008172 <__malloc_unlock>
 80080ba:	f104 000b 	add.w	r0, r4, #11
 80080be:	1d23      	adds	r3, r4, #4
 80080c0:	f020 0007 	bic.w	r0, r0, #7
 80080c4:	1ac3      	subs	r3, r0, r3
 80080c6:	d0d3      	beq.n	8008070 <_malloc_r+0x20>
 80080c8:	425a      	negs	r2, r3
 80080ca:	50e2      	str	r2, [r4, r3]
 80080cc:	e7d0      	b.n	8008070 <_malloc_r+0x20>
 80080ce:	428c      	cmp	r4, r1
 80080d0:	684b      	ldr	r3, [r1, #4]
 80080d2:	bf16      	itet	ne
 80080d4:	6063      	strne	r3, [r4, #4]
 80080d6:	6013      	streq	r3, [r2, #0]
 80080d8:	460c      	movne	r4, r1
 80080da:	e7eb      	b.n	80080b4 <_malloc_r+0x64>
 80080dc:	460c      	mov	r4, r1
 80080de:	6849      	ldr	r1, [r1, #4]
 80080e0:	e7cc      	b.n	800807c <_malloc_r+0x2c>
 80080e2:	1cc4      	adds	r4, r0, #3
 80080e4:	f024 0403 	bic.w	r4, r4, #3
 80080e8:	42a0      	cmp	r0, r4
 80080ea:	d005      	beq.n	80080f8 <_malloc_r+0xa8>
 80080ec:	1a21      	subs	r1, r4, r0
 80080ee:	4630      	mov	r0, r6
 80080f0:	f000 f82e 	bl	8008150 <_sbrk_r>
 80080f4:	3001      	adds	r0, #1
 80080f6:	d0cf      	beq.n	8008098 <_malloc_r+0x48>
 80080f8:	6025      	str	r5, [r4, #0]
 80080fa:	e7db      	b.n	80080b4 <_malloc_r+0x64>
 80080fc:	200000dc 	.word	0x200000dc
 8008100:	200000e0 	.word	0x200000e0

08008104 <_realloc_r>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	4607      	mov	r7, r0
 8008108:	4614      	mov	r4, r2
 800810a:	460e      	mov	r6, r1
 800810c:	b921      	cbnz	r1, 8008118 <_realloc_r+0x14>
 800810e:	4611      	mov	r1, r2
 8008110:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008114:	f7ff bf9c 	b.w	8008050 <_malloc_r>
 8008118:	b922      	cbnz	r2, 8008124 <_realloc_r+0x20>
 800811a:	f7ff ff4b 	bl	8007fb4 <_free_r>
 800811e:	4625      	mov	r5, r4
 8008120:	4628      	mov	r0, r5
 8008122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008124:	f000 f826 	bl	8008174 <_malloc_usable_size_r>
 8008128:	42a0      	cmp	r0, r4
 800812a:	d20f      	bcs.n	800814c <_realloc_r+0x48>
 800812c:	4621      	mov	r1, r4
 800812e:	4638      	mov	r0, r7
 8008130:	f7ff ff8e 	bl	8008050 <_malloc_r>
 8008134:	4605      	mov	r5, r0
 8008136:	2800      	cmp	r0, #0
 8008138:	d0f2      	beq.n	8008120 <_realloc_r+0x1c>
 800813a:	4631      	mov	r1, r6
 800813c:	4622      	mov	r2, r4
 800813e:	f7ff fc13 	bl	8007968 <memcpy>
 8008142:	4631      	mov	r1, r6
 8008144:	4638      	mov	r0, r7
 8008146:	f7ff ff35 	bl	8007fb4 <_free_r>
 800814a:	e7e9      	b.n	8008120 <_realloc_r+0x1c>
 800814c:	4635      	mov	r5, r6
 800814e:	e7e7      	b.n	8008120 <_realloc_r+0x1c>

08008150 <_sbrk_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4c06      	ldr	r4, [pc, #24]	; (800816c <_sbrk_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4605      	mov	r5, r0
 8008158:	4608      	mov	r0, r1
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	f7fb fcc6 	bl	8003aec <_sbrk>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_sbrk_r+0x1a>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	b103      	cbz	r3, 800816a <_sbrk_r+0x1a>
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	20003554 	.word	0x20003554

08008170 <__malloc_lock>:
 8008170:	4770      	bx	lr

08008172 <__malloc_unlock>:
 8008172:	4770      	bx	lr

08008174 <_malloc_usable_size_r>:
 8008174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008178:	1f18      	subs	r0, r3, #4
 800817a:	2b00      	cmp	r3, #0
 800817c:	bfbc      	itt	lt
 800817e:	580b      	ldrlt	r3, [r1, r0]
 8008180:	18c0      	addlt	r0, r0, r3
 8008182:	4770      	bx	lr

08008184 <pow>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	ed2d 8b04 	vpush	{d8-d9}
 800818c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008460 <pow+0x2dc>
 8008190:	b08d      	sub	sp, #52	; 0x34
 8008192:	ec57 6b10 	vmov	r6, r7, d0
 8008196:	ec55 4b11 	vmov	r4, r5, d1
 800819a:	f000 f965 	bl	8008468 <__ieee754_pow>
 800819e:	f999 3000 	ldrsb.w	r3, [r9]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	eeb0 8a40 	vmov.f32	s16, s0
 80081aa:	eef0 8a60 	vmov.f32	s17, s1
 80081ae:	46c8      	mov	r8, r9
 80081b0:	d05f      	beq.n	8008272 <pow+0xee>
 80081b2:	4622      	mov	r2, r4
 80081b4:	462b      	mov	r3, r5
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 fcd7 	bl	8000b6c <__aeabi_dcmpun>
 80081be:	4683      	mov	fp, r0
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d156      	bne.n	8008272 <pow+0xee>
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fcce 	bl	8000b6c <__aeabi_dcmpun>
 80081d0:	9001      	str	r0, [sp, #4]
 80081d2:	b1e8      	cbz	r0, 8008210 <pow+0x8c>
 80081d4:	2200      	movs	r2, #0
 80081d6:	2300      	movs	r3, #0
 80081d8:	4620      	mov	r0, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	f7f8 fc94 	bl	8000b08 <__aeabi_dcmpeq>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d046      	beq.n	8008272 <pow+0xee>
 80081e4:	2301      	movs	r3, #1
 80081e6:	9302      	str	r3, [sp, #8]
 80081e8:	4b96      	ldr	r3, [pc, #600]	; (8008444 <pow+0x2c0>)
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	4b96      	ldr	r3, [pc, #600]	; (8008448 <pow+0x2c4>)
 80081ee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80081f2:	2200      	movs	r2, #0
 80081f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008200:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008204:	d033      	beq.n	800826e <pow+0xea>
 8008206:	a802      	add	r0, sp, #8
 8008208:	f000 fefd 	bl	8009006 <matherr>
 800820c:	bb48      	cbnz	r0, 8008262 <pow+0xde>
 800820e:	e05d      	b.n	80082cc <pow+0x148>
 8008210:	f04f 0a00 	mov.w	sl, #0
 8008214:	f04f 0b00 	mov.w	fp, #0
 8008218:	4652      	mov	r2, sl
 800821a:	465b      	mov	r3, fp
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	f7f8 fc72 	bl	8000b08 <__aeabi_dcmpeq>
 8008224:	ec4b ab19 	vmov	d9, sl, fp
 8008228:	2800      	cmp	r0, #0
 800822a:	d054      	beq.n	80082d6 <pow+0x152>
 800822c:	4652      	mov	r2, sl
 800822e:	465b      	mov	r3, fp
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	f7f8 fc68 	bl	8000b08 <__aeabi_dcmpeq>
 8008238:	4680      	mov	r8, r0
 800823a:	b318      	cbz	r0, 8008284 <pow+0x100>
 800823c:	2301      	movs	r3, #1
 800823e:	9302      	str	r3, [sp, #8]
 8008240:	4b80      	ldr	r3, [pc, #512]	; (8008444 <pow+0x2c0>)
 8008242:	9303      	str	r3, [sp, #12]
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	930a      	str	r3, [sp, #40]	; 0x28
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800824e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008252:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0d5      	beq.n	8008206 <pow+0x82>
 800825a:	4b7b      	ldr	r3, [pc, #492]	; (8008448 <pow+0x2c4>)
 800825c:	2200      	movs	r2, #0
 800825e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008264:	b11b      	cbz	r3, 800826e <pow+0xea>
 8008266:	f7ff fb55 	bl	8007914 <__errno>
 800826a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008272:	eeb0 0a48 	vmov.f32	s0, s16
 8008276:	eef0 0a68 	vmov.f32	s1, s17
 800827a:	b00d      	add	sp, #52	; 0x34
 800827c:	ecbd 8b04 	vpop	{d8-d9}
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	ec45 4b10 	vmov	d0, r4, r5
 8008288:	f000 feb5 	bl	8008ff6 <finite>
 800828c:	2800      	cmp	r0, #0
 800828e:	d0f0      	beq.n	8008272 <pow+0xee>
 8008290:	4652      	mov	r2, sl
 8008292:	465b      	mov	r3, fp
 8008294:	4620      	mov	r0, r4
 8008296:	4629      	mov	r1, r5
 8008298:	f7f8 fc40 	bl	8000b1c <__aeabi_dcmplt>
 800829c:	2800      	cmp	r0, #0
 800829e:	d0e8      	beq.n	8008272 <pow+0xee>
 80082a0:	2301      	movs	r3, #1
 80082a2:	9302      	str	r3, [sp, #8]
 80082a4:	4b67      	ldr	r3, [pc, #412]	; (8008444 <pow+0x2c0>)
 80082a6:	9303      	str	r3, [sp, #12]
 80082a8:	f999 3000 	ldrsb.w	r3, [r9]
 80082ac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80082b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80082b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80082b8:	b913      	cbnz	r3, 80082c0 <pow+0x13c>
 80082ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80082be:	e7a2      	b.n	8008206 <pow+0x82>
 80082c0:	4962      	ldr	r1, [pc, #392]	; (800844c <pow+0x2c8>)
 80082c2:	2000      	movs	r0, #0
 80082c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d19c      	bne.n	8008206 <pow+0x82>
 80082cc:	f7ff fb22 	bl	8007914 <__errno>
 80082d0:	2321      	movs	r3, #33	; 0x21
 80082d2:	6003      	str	r3, [r0, #0]
 80082d4:	e7c5      	b.n	8008262 <pow+0xde>
 80082d6:	eeb0 0a48 	vmov.f32	s0, s16
 80082da:	eef0 0a68 	vmov.f32	s1, s17
 80082de:	f000 fe8a 	bl	8008ff6 <finite>
 80082e2:	9000      	str	r0, [sp, #0]
 80082e4:	2800      	cmp	r0, #0
 80082e6:	f040 8081 	bne.w	80083ec <pow+0x268>
 80082ea:	ec47 6b10 	vmov	d0, r6, r7
 80082ee:	f000 fe82 	bl	8008ff6 <finite>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d07a      	beq.n	80083ec <pow+0x268>
 80082f6:	ec45 4b10 	vmov	d0, r4, r5
 80082fa:	f000 fe7c 	bl	8008ff6 <finite>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d074      	beq.n	80083ec <pow+0x268>
 8008302:	ec53 2b18 	vmov	r2, r3, d8
 8008306:	ee18 0a10 	vmov	r0, s16
 800830a:	4619      	mov	r1, r3
 800830c:	f7f8 fc2e 	bl	8000b6c <__aeabi_dcmpun>
 8008310:	f999 9000 	ldrsb.w	r9, [r9]
 8008314:	4b4b      	ldr	r3, [pc, #300]	; (8008444 <pow+0x2c0>)
 8008316:	b1b0      	cbz	r0, 8008346 <pow+0x1c2>
 8008318:	2201      	movs	r2, #1
 800831a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800831e:	9b00      	ldr	r3, [sp, #0]
 8008320:	930a      	str	r3, [sp, #40]	; 0x28
 8008322:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008326:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	d0c4      	beq.n	80082ba <pow+0x136>
 8008330:	4652      	mov	r2, sl
 8008332:	465b      	mov	r3, fp
 8008334:	4650      	mov	r0, sl
 8008336:	4659      	mov	r1, fp
 8008338:	f7f8 faa8 	bl	800088c <__aeabi_ddiv>
 800833c:	f1b9 0f02 	cmp.w	r9, #2
 8008340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008344:	e7c1      	b.n	80082ca <pow+0x146>
 8008346:	2203      	movs	r2, #3
 8008348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800834c:	900a      	str	r0, [sp, #40]	; 0x28
 800834e:	4629      	mov	r1, r5
 8008350:	4620      	mov	r0, r4
 8008352:	2200      	movs	r2, #0
 8008354:	4b3e      	ldr	r3, [pc, #248]	; (8008450 <pow+0x2cc>)
 8008356:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800835a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800835e:	f7f8 f96b 	bl	8000638 <__aeabi_dmul>
 8008362:	4604      	mov	r4, r0
 8008364:	460d      	mov	r5, r1
 8008366:	f1b9 0f00 	cmp.w	r9, #0
 800836a:	d124      	bne.n	80083b6 <pow+0x232>
 800836c:	4b39      	ldr	r3, [pc, #228]	; (8008454 <pow+0x2d0>)
 800836e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008372:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008376:	4630      	mov	r0, r6
 8008378:	4652      	mov	r2, sl
 800837a:	465b      	mov	r3, fp
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 fbcd 	bl	8000b1c <__aeabi_dcmplt>
 8008382:	2800      	cmp	r0, #0
 8008384:	d056      	beq.n	8008434 <pow+0x2b0>
 8008386:	ec45 4b10 	vmov	d0, r4, r5
 800838a:	f000 fe49 	bl	8009020 <rint>
 800838e:	4622      	mov	r2, r4
 8008390:	462b      	mov	r3, r5
 8008392:	ec51 0b10 	vmov	r0, r1, d0
 8008396:	f7f8 fbb7 	bl	8000b08 <__aeabi_dcmpeq>
 800839a:	b920      	cbnz	r0, 80083a6 <pow+0x222>
 800839c:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <pow+0x2d4>)
 800839e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80083a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083a6:	f998 3000 	ldrsb.w	r3, [r8]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d142      	bne.n	8008434 <pow+0x2b0>
 80083ae:	f7ff fab1 	bl	8007914 <__errno>
 80083b2:	2322      	movs	r3, #34	; 0x22
 80083b4:	e78d      	b.n	80082d2 <pow+0x14e>
 80083b6:	4b29      	ldr	r3, [pc, #164]	; (800845c <pow+0x2d8>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083be:	4630      	mov	r0, r6
 80083c0:	4652      	mov	r2, sl
 80083c2:	465b      	mov	r3, fp
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f8 fba9 	bl	8000b1c <__aeabi_dcmplt>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d0eb      	beq.n	80083a6 <pow+0x222>
 80083ce:	ec45 4b10 	vmov	d0, r4, r5
 80083d2:	f000 fe25 	bl	8009020 <rint>
 80083d6:	4622      	mov	r2, r4
 80083d8:	462b      	mov	r3, r5
 80083da:	ec51 0b10 	vmov	r0, r1, d0
 80083de:	f7f8 fb93 	bl	8000b08 <__aeabi_dcmpeq>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d1df      	bne.n	80083a6 <pow+0x222>
 80083e6:	2200      	movs	r2, #0
 80083e8:	4b18      	ldr	r3, [pc, #96]	; (800844c <pow+0x2c8>)
 80083ea:	e7da      	b.n	80083a2 <pow+0x21e>
 80083ec:	2200      	movs	r2, #0
 80083ee:	2300      	movs	r3, #0
 80083f0:	ec51 0b18 	vmov	r0, r1, d8
 80083f4:	f7f8 fb88 	bl	8000b08 <__aeabi_dcmpeq>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f43f af3a 	beq.w	8008272 <pow+0xee>
 80083fe:	ec47 6b10 	vmov	d0, r6, r7
 8008402:	f000 fdf8 	bl	8008ff6 <finite>
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f af33 	beq.w	8008272 <pow+0xee>
 800840c:	ec45 4b10 	vmov	d0, r4, r5
 8008410:	f000 fdf1 	bl	8008ff6 <finite>
 8008414:	2800      	cmp	r0, #0
 8008416:	f43f af2c 	beq.w	8008272 <pow+0xee>
 800841a:	2304      	movs	r3, #4
 800841c:	9302      	str	r3, [sp, #8]
 800841e:	4b09      	ldr	r3, [pc, #36]	; (8008444 <pow+0x2c0>)
 8008420:	9303      	str	r3, [sp, #12]
 8008422:	2300      	movs	r3, #0
 8008424:	930a      	str	r3, [sp, #40]	; 0x28
 8008426:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800842a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800842e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008432:	e7b8      	b.n	80083a6 <pow+0x222>
 8008434:	a802      	add	r0, sp, #8
 8008436:	f000 fde6 	bl	8009006 <matherr>
 800843a:	2800      	cmp	r0, #0
 800843c:	f47f af11 	bne.w	8008262 <pow+0xde>
 8008440:	e7b5      	b.n	80083ae <pow+0x22a>
 8008442:	bf00      	nop
 8008444:	080098db 	.word	0x080098db
 8008448:	3ff00000 	.word	0x3ff00000
 800844c:	fff00000 	.word	0xfff00000
 8008450:	3fe00000 	.word	0x3fe00000
 8008454:	47efffff 	.word	0x47efffff
 8008458:	c7efffff 	.word	0xc7efffff
 800845c:	7ff00000 	.word	0x7ff00000
 8008460:	20000084 	.word	0x20000084
 8008464:	00000000 	.word	0x00000000

08008468 <__ieee754_pow>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	b091      	sub	sp, #68	; 0x44
 800846e:	ed8d 1b00 	vstr	d1, [sp]
 8008472:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008476:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800847a:	ea58 0302 	orrs.w	r3, r8, r2
 800847e:	ec57 6b10 	vmov	r6, r7, d0
 8008482:	f000 84be 	beq.w	8008e02 <__ieee754_pow+0x99a>
 8008486:	4b7a      	ldr	r3, [pc, #488]	; (8008670 <__ieee754_pow+0x208>)
 8008488:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800848c:	429c      	cmp	r4, r3
 800848e:	463d      	mov	r5, r7
 8008490:	ee10 aa10 	vmov	sl, s0
 8008494:	dc09      	bgt.n	80084aa <__ieee754_pow+0x42>
 8008496:	d103      	bne.n	80084a0 <__ieee754_pow+0x38>
 8008498:	b93e      	cbnz	r6, 80084aa <__ieee754_pow+0x42>
 800849a:	45a0      	cmp	r8, r4
 800849c:	dc0d      	bgt.n	80084ba <__ieee754_pow+0x52>
 800849e:	e001      	b.n	80084a4 <__ieee754_pow+0x3c>
 80084a0:	4598      	cmp	r8, r3
 80084a2:	dc02      	bgt.n	80084aa <__ieee754_pow+0x42>
 80084a4:	4598      	cmp	r8, r3
 80084a6:	d10e      	bne.n	80084c6 <__ieee754_pow+0x5e>
 80084a8:	b16a      	cbz	r2, 80084c6 <__ieee754_pow+0x5e>
 80084aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80084ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80084b2:	ea54 030a 	orrs.w	r3, r4, sl
 80084b6:	f000 84a4 	beq.w	8008e02 <__ieee754_pow+0x99a>
 80084ba:	486e      	ldr	r0, [pc, #440]	; (8008674 <__ieee754_pow+0x20c>)
 80084bc:	b011      	add	sp, #68	; 0x44
 80084be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c2:	f000 bda5 	b.w	8009010 <nan>
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	da53      	bge.n	8008572 <__ieee754_pow+0x10a>
 80084ca:	4b6b      	ldr	r3, [pc, #428]	; (8008678 <__ieee754_pow+0x210>)
 80084cc:	4598      	cmp	r8, r3
 80084ce:	dc4d      	bgt.n	800856c <__ieee754_pow+0x104>
 80084d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80084d4:	4598      	cmp	r8, r3
 80084d6:	dd4c      	ble.n	8008572 <__ieee754_pow+0x10a>
 80084d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80084dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084e0:	2b14      	cmp	r3, #20
 80084e2:	dd26      	ble.n	8008532 <__ieee754_pow+0xca>
 80084e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80084e8:	fa22 f103 	lsr.w	r1, r2, r3
 80084ec:	fa01 f303 	lsl.w	r3, r1, r3
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d13e      	bne.n	8008572 <__ieee754_pow+0x10a>
 80084f4:	f001 0101 	and.w	r1, r1, #1
 80084f8:	f1c1 0b02 	rsb	fp, r1, #2
 80084fc:	2a00      	cmp	r2, #0
 80084fe:	d15b      	bne.n	80085b8 <__ieee754_pow+0x150>
 8008500:	4b5b      	ldr	r3, [pc, #364]	; (8008670 <__ieee754_pow+0x208>)
 8008502:	4598      	cmp	r8, r3
 8008504:	d124      	bne.n	8008550 <__ieee754_pow+0xe8>
 8008506:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800850a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800850e:	ea53 030a 	orrs.w	r3, r3, sl
 8008512:	f000 8476 	beq.w	8008e02 <__ieee754_pow+0x99a>
 8008516:	4b59      	ldr	r3, [pc, #356]	; (800867c <__ieee754_pow+0x214>)
 8008518:	429c      	cmp	r4, r3
 800851a:	dd2d      	ble.n	8008578 <__ieee754_pow+0x110>
 800851c:	f1b9 0f00 	cmp.w	r9, #0
 8008520:	f280 8473 	bge.w	8008e0a <__ieee754_pow+0x9a2>
 8008524:	2000      	movs	r0, #0
 8008526:	2100      	movs	r1, #0
 8008528:	ec41 0b10 	vmov	d0, r0, r1
 800852c:	b011      	add	sp, #68	; 0x44
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	2a00      	cmp	r2, #0
 8008534:	d13e      	bne.n	80085b4 <__ieee754_pow+0x14c>
 8008536:	f1c3 0314 	rsb	r3, r3, #20
 800853a:	fa48 f103 	asr.w	r1, r8, r3
 800853e:	fa01 f303 	lsl.w	r3, r1, r3
 8008542:	4543      	cmp	r3, r8
 8008544:	f040 8469 	bne.w	8008e1a <__ieee754_pow+0x9b2>
 8008548:	f001 0101 	and.w	r1, r1, #1
 800854c:	f1c1 0b02 	rsb	fp, r1, #2
 8008550:	4b4b      	ldr	r3, [pc, #300]	; (8008680 <__ieee754_pow+0x218>)
 8008552:	4598      	cmp	r8, r3
 8008554:	d118      	bne.n	8008588 <__ieee754_pow+0x120>
 8008556:	f1b9 0f00 	cmp.w	r9, #0
 800855a:	f280 845a 	bge.w	8008e12 <__ieee754_pow+0x9aa>
 800855e:	4948      	ldr	r1, [pc, #288]	; (8008680 <__ieee754_pow+0x218>)
 8008560:	4632      	mov	r2, r6
 8008562:	463b      	mov	r3, r7
 8008564:	2000      	movs	r0, #0
 8008566:	f7f8 f991 	bl	800088c <__aeabi_ddiv>
 800856a:	e7dd      	b.n	8008528 <__ieee754_pow+0xc0>
 800856c:	f04f 0b02 	mov.w	fp, #2
 8008570:	e7c4      	b.n	80084fc <__ieee754_pow+0x94>
 8008572:	f04f 0b00 	mov.w	fp, #0
 8008576:	e7c1      	b.n	80084fc <__ieee754_pow+0x94>
 8008578:	f1b9 0f00 	cmp.w	r9, #0
 800857c:	dad2      	bge.n	8008524 <__ieee754_pow+0xbc>
 800857e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008582:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008586:	e7cf      	b.n	8008528 <__ieee754_pow+0xc0>
 8008588:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800858c:	d106      	bne.n	800859c <__ieee754_pow+0x134>
 800858e:	4632      	mov	r2, r6
 8008590:	463b      	mov	r3, r7
 8008592:	4610      	mov	r0, r2
 8008594:	4619      	mov	r1, r3
 8008596:	f7f8 f84f 	bl	8000638 <__aeabi_dmul>
 800859a:	e7c5      	b.n	8008528 <__ieee754_pow+0xc0>
 800859c:	4b39      	ldr	r3, [pc, #228]	; (8008684 <__ieee754_pow+0x21c>)
 800859e:	4599      	cmp	r9, r3
 80085a0:	d10a      	bne.n	80085b8 <__ieee754_pow+0x150>
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	db08      	blt.n	80085b8 <__ieee754_pow+0x150>
 80085a6:	ec47 6b10 	vmov	d0, r6, r7
 80085aa:	b011      	add	sp, #68	; 0x44
 80085ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	f000 bc68 	b.w	8008e84 <__ieee754_sqrt>
 80085b4:	f04f 0b00 	mov.w	fp, #0
 80085b8:	ec47 6b10 	vmov	d0, r6, r7
 80085bc:	f000 fd12 	bl	8008fe4 <fabs>
 80085c0:	ec51 0b10 	vmov	r0, r1, d0
 80085c4:	f1ba 0f00 	cmp.w	sl, #0
 80085c8:	d127      	bne.n	800861a <__ieee754_pow+0x1b2>
 80085ca:	b124      	cbz	r4, 80085d6 <__ieee754_pow+0x16e>
 80085cc:	4b2c      	ldr	r3, [pc, #176]	; (8008680 <__ieee754_pow+0x218>)
 80085ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d121      	bne.n	800861a <__ieee754_pow+0x1b2>
 80085d6:	f1b9 0f00 	cmp.w	r9, #0
 80085da:	da05      	bge.n	80085e8 <__ieee754_pow+0x180>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	2000      	movs	r0, #0
 80085e2:	4927      	ldr	r1, [pc, #156]	; (8008680 <__ieee754_pow+0x218>)
 80085e4:	f7f8 f952 	bl	800088c <__aeabi_ddiv>
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	da9d      	bge.n	8008528 <__ieee754_pow+0xc0>
 80085ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80085f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80085f4:	ea54 030b 	orrs.w	r3, r4, fp
 80085f8:	d108      	bne.n	800860c <__ieee754_pow+0x1a4>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4610      	mov	r0, r2
 8008600:	4619      	mov	r1, r3
 8008602:	f7f7 fe61 	bl	80002c8 <__aeabi_dsub>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	e7ac      	b.n	8008566 <__ieee754_pow+0xfe>
 800860c:	f1bb 0f01 	cmp.w	fp, #1
 8008610:	d18a      	bne.n	8008528 <__ieee754_pow+0xc0>
 8008612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008616:	4619      	mov	r1, r3
 8008618:	e786      	b.n	8008528 <__ieee754_pow+0xc0>
 800861a:	0fed      	lsrs	r5, r5, #31
 800861c:	1e6b      	subs	r3, r5, #1
 800861e:	930d      	str	r3, [sp, #52]	; 0x34
 8008620:	ea5b 0303 	orrs.w	r3, fp, r3
 8008624:	d102      	bne.n	800862c <__ieee754_pow+0x1c4>
 8008626:	4632      	mov	r2, r6
 8008628:	463b      	mov	r3, r7
 800862a:	e7e8      	b.n	80085fe <__ieee754_pow+0x196>
 800862c:	4b16      	ldr	r3, [pc, #88]	; (8008688 <__ieee754_pow+0x220>)
 800862e:	4598      	cmp	r8, r3
 8008630:	f340 80fe 	ble.w	8008830 <__ieee754_pow+0x3c8>
 8008634:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008638:	4598      	cmp	r8, r3
 800863a:	dd0a      	ble.n	8008652 <__ieee754_pow+0x1ea>
 800863c:	4b0f      	ldr	r3, [pc, #60]	; (800867c <__ieee754_pow+0x214>)
 800863e:	429c      	cmp	r4, r3
 8008640:	dc0d      	bgt.n	800865e <__ieee754_pow+0x1f6>
 8008642:	f1b9 0f00 	cmp.w	r9, #0
 8008646:	f6bf af6d 	bge.w	8008524 <__ieee754_pow+0xbc>
 800864a:	a307      	add	r3, pc, #28	; (adr r3, 8008668 <__ieee754_pow+0x200>)
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	e79f      	b.n	8008592 <__ieee754_pow+0x12a>
 8008652:	4b0e      	ldr	r3, [pc, #56]	; (800868c <__ieee754_pow+0x224>)
 8008654:	429c      	cmp	r4, r3
 8008656:	ddf4      	ble.n	8008642 <__ieee754_pow+0x1da>
 8008658:	4b09      	ldr	r3, [pc, #36]	; (8008680 <__ieee754_pow+0x218>)
 800865a:	429c      	cmp	r4, r3
 800865c:	dd18      	ble.n	8008690 <__ieee754_pow+0x228>
 800865e:	f1b9 0f00 	cmp.w	r9, #0
 8008662:	dcf2      	bgt.n	800864a <__ieee754_pow+0x1e2>
 8008664:	e75e      	b.n	8008524 <__ieee754_pow+0xbc>
 8008666:	bf00      	nop
 8008668:	8800759c 	.word	0x8800759c
 800866c:	7e37e43c 	.word	0x7e37e43c
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	080098ad 	.word	0x080098ad
 8008678:	433fffff 	.word	0x433fffff
 800867c:	3fefffff 	.word	0x3fefffff
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	3fe00000 	.word	0x3fe00000
 8008688:	41e00000 	.word	0x41e00000
 800868c:	3feffffe 	.word	0x3feffffe
 8008690:	2200      	movs	r2, #0
 8008692:	4b63      	ldr	r3, [pc, #396]	; (8008820 <__ieee754_pow+0x3b8>)
 8008694:	f7f7 fe18 	bl	80002c8 <__aeabi_dsub>
 8008698:	a355      	add	r3, pc, #340	; (adr r3, 80087f0 <__ieee754_pow+0x388>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	4604      	mov	r4, r0
 80086a0:	460d      	mov	r5, r1
 80086a2:	f7f7 ffc9 	bl	8000638 <__aeabi_dmul>
 80086a6:	a354      	add	r3, pc, #336	; (adr r3, 80087f8 <__ieee754_pow+0x390>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	4620      	mov	r0, r4
 80086b2:	4629      	mov	r1, r5
 80086b4:	f7f7 ffc0 	bl	8000638 <__aeabi_dmul>
 80086b8:	2200      	movs	r2, #0
 80086ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086be:	4b59      	ldr	r3, [pc, #356]	; (8008824 <__ieee754_pow+0x3bc>)
 80086c0:	4620      	mov	r0, r4
 80086c2:	4629      	mov	r1, r5
 80086c4:	f7f7 ffb8 	bl	8000638 <__aeabi_dmul>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	a14c      	add	r1, pc, #304	; (adr r1, 8008800 <__ieee754_pow+0x398>)
 80086ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d2:	f7f7 fdf9 	bl	80002c8 <__aeabi_dsub>
 80086d6:	4622      	mov	r2, r4
 80086d8:	462b      	mov	r3, r5
 80086da:	f7f7 ffad 	bl	8000638 <__aeabi_dmul>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	2000      	movs	r0, #0
 80086e4:	4950      	ldr	r1, [pc, #320]	; (8008828 <__ieee754_pow+0x3c0>)
 80086e6:	f7f7 fdef 	bl	80002c8 <__aeabi_dsub>
 80086ea:	4622      	mov	r2, r4
 80086ec:	462b      	mov	r3, r5
 80086ee:	4680      	mov	r8, r0
 80086f0:	4689      	mov	r9, r1
 80086f2:	4620      	mov	r0, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f7 ff9f 	bl	8000638 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f7 ff99 	bl	8000638 <__aeabi_dmul>
 8008706:	a340      	add	r3, pc, #256	; (adr r3, 8008808 <__ieee754_pow+0x3a0>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 ff94 	bl	8000638 <__aeabi_dmul>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008718:	f7f7 fdd6 	bl	80002c8 <__aeabi_dsub>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4604      	mov	r4, r0
 8008722:	460d      	mov	r5, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f7 fdd0 	bl	80002cc <__adddf3>
 800872c:	2000      	movs	r0, #0
 800872e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008732:	4632      	mov	r2, r6
 8008734:	463b      	mov	r3, r7
 8008736:	f7f7 fdc7 	bl	80002c8 <__aeabi_dsub>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4620      	mov	r0, r4
 8008740:	4629      	mov	r1, r5
 8008742:	f7f7 fdc1 	bl	80002c8 <__aeabi_dsub>
 8008746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008748:	f10b 33ff 	add.w	r3, fp, #4294967295
 800874c:	4313      	orrs	r3, r2
 800874e:	4606      	mov	r6, r0
 8008750:	460f      	mov	r7, r1
 8008752:	f040 81eb 	bne.w	8008b2c <__ieee754_pow+0x6c4>
 8008756:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008810 <__ieee754_pow+0x3a8>
 800875a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800875e:	2400      	movs	r4, #0
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008768:	ed8d 7b02 	vstr	d7, [sp, #8]
 800876c:	f7f7 fdac 	bl	80002c8 <__aeabi_dsub>
 8008770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008774:	f7f7 ff60 	bl	8000638 <__aeabi_dmul>
 8008778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800877c:	4680      	mov	r8, r0
 800877e:	4689      	mov	r9, r1
 8008780:	4630      	mov	r0, r6
 8008782:	4639      	mov	r1, r7
 8008784:	f7f7 ff58 	bl	8000638 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4640      	mov	r0, r8
 800878e:	4649      	mov	r1, r9
 8008790:	f7f7 fd9c 	bl	80002cc <__adddf3>
 8008794:	4622      	mov	r2, r4
 8008796:	462b      	mov	r3, r5
 8008798:	4680      	mov	r8, r0
 800879a:	4689      	mov	r9, r1
 800879c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a0:	f7f7 ff4a 	bl	8000638 <__aeabi_dmul>
 80087a4:	460b      	mov	r3, r1
 80087a6:	4604      	mov	r4, r0
 80087a8:	460d      	mov	r5, r1
 80087aa:	4602      	mov	r2, r0
 80087ac:	4649      	mov	r1, r9
 80087ae:	4640      	mov	r0, r8
 80087b0:	e9cd 4500 	strd	r4, r5, [sp]
 80087b4:	f7f7 fd8a 	bl	80002cc <__adddf3>
 80087b8:	4b1c      	ldr	r3, [pc, #112]	; (800882c <__ieee754_pow+0x3c4>)
 80087ba:	4299      	cmp	r1, r3
 80087bc:	4606      	mov	r6, r0
 80087be:	460f      	mov	r7, r1
 80087c0:	468b      	mov	fp, r1
 80087c2:	f340 82f7 	ble.w	8008db4 <__ieee754_pow+0x94c>
 80087c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80087ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80087ce:	4303      	orrs	r3, r0
 80087d0:	f000 81ea 	beq.w	8008ba8 <__ieee754_pow+0x740>
 80087d4:	a310      	add	r3, pc, #64	; (adr r3, 8008818 <__ieee754_pow+0x3b0>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087de:	f7f7 ff2b 	bl	8000638 <__aeabi_dmul>
 80087e2:	a30d      	add	r3, pc, #52	; (adr r3, 8008818 <__ieee754_pow+0x3b0>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	e6d5      	b.n	8008596 <__ieee754_pow+0x12e>
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w
 80087f0:	60000000 	.word	0x60000000
 80087f4:	3ff71547 	.word	0x3ff71547
 80087f8:	f85ddf44 	.word	0xf85ddf44
 80087fc:	3e54ae0b 	.word	0x3e54ae0b
 8008800:	55555555 	.word	0x55555555
 8008804:	3fd55555 	.word	0x3fd55555
 8008808:	652b82fe 	.word	0x652b82fe
 800880c:	3ff71547 	.word	0x3ff71547
 8008810:	00000000 	.word	0x00000000
 8008814:	bff00000 	.word	0xbff00000
 8008818:	8800759c 	.word	0x8800759c
 800881c:	7e37e43c 	.word	0x7e37e43c
 8008820:	3ff00000 	.word	0x3ff00000
 8008824:	3fd00000 	.word	0x3fd00000
 8008828:	3fe00000 	.word	0x3fe00000
 800882c:	408fffff 	.word	0x408fffff
 8008830:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	da05      	bge.n	8008846 <__ieee754_pow+0x3de>
 800883a:	4bd3      	ldr	r3, [pc, #844]	; (8008b88 <__ieee754_pow+0x720>)
 800883c:	f7f7 fefc 	bl	8000638 <__aeabi_dmul>
 8008840:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008844:	460c      	mov	r4, r1
 8008846:	1523      	asrs	r3, r4, #20
 8008848:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800884c:	4413      	add	r3, r2
 800884e:	9309      	str	r3, [sp, #36]	; 0x24
 8008850:	4bce      	ldr	r3, [pc, #824]	; (8008b8c <__ieee754_pow+0x724>)
 8008852:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008856:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800885a:	429c      	cmp	r4, r3
 800885c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008860:	dd08      	ble.n	8008874 <__ieee754_pow+0x40c>
 8008862:	4bcb      	ldr	r3, [pc, #812]	; (8008b90 <__ieee754_pow+0x728>)
 8008864:	429c      	cmp	r4, r3
 8008866:	f340 815e 	ble.w	8008b26 <__ieee754_pow+0x6be>
 800886a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886c:	3301      	adds	r3, #1
 800886e:	9309      	str	r3, [sp, #36]	; 0x24
 8008870:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008874:	f04f 0a00 	mov.w	sl, #0
 8008878:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800887c:	930c      	str	r3, [sp, #48]	; 0x30
 800887e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008880:	4bc4      	ldr	r3, [pc, #784]	; (8008b94 <__ieee754_pow+0x72c>)
 8008882:	4413      	add	r3, r2
 8008884:	ed93 7b00 	vldr	d7, [r3]
 8008888:	4629      	mov	r1, r5
 800888a:	ec53 2b17 	vmov	r2, r3, d7
 800888e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008892:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008896:	f7f7 fd17 	bl	80002c8 <__aeabi_dsub>
 800889a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800889e:	4606      	mov	r6, r0
 80088a0:	460f      	mov	r7, r1
 80088a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088a6:	f7f7 fd11 	bl	80002cc <__adddf3>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	2000      	movs	r0, #0
 80088b0:	49b9      	ldr	r1, [pc, #740]	; (8008b98 <__ieee754_pow+0x730>)
 80088b2:	f7f7 ffeb 	bl	800088c <__aeabi_ddiv>
 80088b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4630      	mov	r0, r6
 80088c0:	4639      	mov	r1, r7
 80088c2:	f7f7 feb9 	bl	8000638 <__aeabi_dmul>
 80088c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80088ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80088d2:	2300      	movs	r3, #0
 80088d4:	9302      	str	r3, [sp, #8]
 80088d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088da:	106d      	asrs	r5, r5, #1
 80088dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80088e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80088e4:	2200      	movs	r2, #0
 80088e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	4614      	mov	r4, r2
 80088f0:	461d      	mov	r5, r3
 80088f2:	f7f7 fea1 	bl	8000638 <__aeabi_dmul>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4630      	mov	r0, r6
 80088fc:	4639      	mov	r1, r7
 80088fe:	f7f7 fce3 	bl	80002c8 <__aeabi_dsub>
 8008902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	4620      	mov	r0, r4
 800890c:	4629      	mov	r1, r5
 800890e:	f7f7 fcdb 	bl	80002c8 <__aeabi_dsub>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800891a:	f7f7 fcd5 	bl	80002c8 <__aeabi_dsub>
 800891e:	4642      	mov	r2, r8
 8008920:	464b      	mov	r3, r9
 8008922:	f7f7 fe89 	bl	8000638 <__aeabi_dmul>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 fccb 	bl	80002c8 <__aeabi_dsub>
 8008932:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008936:	f7f7 fe7f 	bl	8000638 <__aeabi_dmul>
 800893a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800893e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008942:	4610      	mov	r0, r2
 8008944:	4619      	mov	r1, r3
 8008946:	f7f7 fe77 	bl	8000638 <__aeabi_dmul>
 800894a:	a37b      	add	r3, pc, #492	; (adr r3, 8008b38 <__ieee754_pow+0x6d0>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4604      	mov	r4, r0
 8008952:	460d      	mov	r5, r1
 8008954:	f7f7 fe70 	bl	8000638 <__aeabi_dmul>
 8008958:	a379      	add	r3, pc, #484	; (adr r3, 8008b40 <__ieee754_pow+0x6d8>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fcb5 	bl	80002cc <__adddf3>
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	f7f7 fe67 	bl	8000638 <__aeabi_dmul>
 800896a:	a377      	add	r3, pc, #476	; (adr r3, 8008b48 <__ieee754_pow+0x6e0>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f7f7 fcac 	bl	80002cc <__adddf3>
 8008974:	4622      	mov	r2, r4
 8008976:	462b      	mov	r3, r5
 8008978:	f7f7 fe5e 	bl	8000638 <__aeabi_dmul>
 800897c:	a374      	add	r3, pc, #464	; (adr r3, 8008b50 <__ieee754_pow+0x6e8>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f7f7 fca3 	bl	80002cc <__adddf3>
 8008986:	4622      	mov	r2, r4
 8008988:	462b      	mov	r3, r5
 800898a:	f7f7 fe55 	bl	8000638 <__aeabi_dmul>
 800898e:	a372      	add	r3, pc, #456	; (adr r3, 8008b58 <__ieee754_pow+0x6f0>)
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f7f7 fc9a 	bl	80002cc <__adddf3>
 8008998:	4622      	mov	r2, r4
 800899a:	462b      	mov	r3, r5
 800899c:	f7f7 fe4c 	bl	8000638 <__aeabi_dmul>
 80089a0:	a36f      	add	r3, pc, #444	; (adr r3, 8008b60 <__ieee754_pow+0x6f8>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fc91 	bl	80002cc <__adddf3>
 80089aa:	4622      	mov	r2, r4
 80089ac:	4606      	mov	r6, r0
 80089ae:	460f      	mov	r7, r1
 80089b0:	462b      	mov	r3, r5
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f7 fe3f 	bl	8000638 <__aeabi_dmul>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 fe39 	bl	8000638 <__aeabi_dmul>
 80089c6:	4642      	mov	r2, r8
 80089c8:	4604      	mov	r4, r0
 80089ca:	460d      	mov	r5, r1
 80089cc:	464b      	mov	r3, r9
 80089ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089d2:	f7f7 fc7b 	bl	80002cc <__adddf3>
 80089d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089da:	f7f7 fe2d 	bl	8000638 <__aeabi_dmul>
 80089de:	4622      	mov	r2, r4
 80089e0:	462b      	mov	r3, r5
 80089e2:	f7f7 fc73 	bl	80002cc <__adddf3>
 80089e6:	4642      	mov	r2, r8
 80089e8:	4606      	mov	r6, r0
 80089ea:	460f      	mov	r7, r1
 80089ec:	464b      	mov	r3, r9
 80089ee:	4640      	mov	r0, r8
 80089f0:	4649      	mov	r1, r9
 80089f2:	f7f7 fe21 	bl	8000638 <__aeabi_dmul>
 80089f6:	2200      	movs	r2, #0
 80089f8:	4b68      	ldr	r3, [pc, #416]	; (8008b9c <__ieee754_pow+0x734>)
 80089fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80089fe:	f7f7 fc65 	bl	80002cc <__adddf3>
 8008a02:	4632      	mov	r2, r6
 8008a04:	463b      	mov	r3, r7
 8008a06:	f7f7 fc61 	bl	80002cc <__adddf3>
 8008a0a:	9802      	ldr	r0, [sp, #8]
 8008a0c:	460d      	mov	r5, r1
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4640      	mov	r0, r8
 8008a16:	4649      	mov	r1, r9
 8008a18:	f7f7 fe0e 	bl	8000638 <__aeabi_dmul>
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4680      	mov	r8, r0
 8008a20:	4689      	mov	r9, r1
 8008a22:	4b5e      	ldr	r3, [pc, #376]	; (8008b9c <__ieee754_pow+0x734>)
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7f7 fc4e 	bl	80002c8 <__aeabi_dsub>
 8008a2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a30:	f7f7 fc4a 	bl	80002c8 <__aeabi_dsub>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fc44 	bl	80002c8 <__aeabi_dsub>
 8008a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a44:	f7f7 fdf8 	bl	8000638 <__aeabi_dmul>
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	462b      	mov	r3, r5
 8008a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a54:	f7f7 fdf0 	bl	8000638 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	4639      	mov	r1, r7
 8008a60:	f7f7 fc34 	bl	80002cc <__adddf3>
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	4649      	mov	r1, r9
 8008a70:	f7f7 fc2c 	bl	80002cc <__adddf3>
 8008a74:	9802      	ldr	r0, [sp, #8]
 8008a76:	a33c      	add	r3, pc, #240	; (adr r3, 8008b68 <__ieee754_pow+0x700>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	460d      	mov	r5, r1
 8008a80:	f7f7 fdda 	bl	8000638 <__aeabi_dmul>
 8008a84:	4642      	mov	r2, r8
 8008a86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	f7f7 fc1a 	bl	80002c8 <__aeabi_dsub>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4630      	mov	r0, r6
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	f7f7 fc14 	bl	80002c8 <__aeabi_dsub>
 8008aa0:	a333      	add	r3, pc, #204	; (adr r3, 8008b70 <__ieee754_pow+0x708>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fdc7 	bl	8000638 <__aeabi_dmul>
 8008aaa:	a333      	add	r3, pc, #204	; (adr r3, 8008b78 <__ieee754_pow+0x710>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f7 fdbe 	bl	8000638 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f7 fc02 	bl	80002cc <__adddf3>
 8008ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008aca:	4b35      	ldr	r3, [pc, #212]	; (8008ba0 <__ieee754_pow+0x738>)
 8008acc:	4413      	add	r3, r2
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fbfb 	bl	80002cc <__adddf3>
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ada:	460d      	mov	r5, r1
 8008adc:	f7f7 fd42 	bl	8000564 <__aeabi_i2d>
 8008ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ae2:	4b30      	ldr	r3, [pc, #192]	; (8008ba4 <__ieee754_pow+0x73c>)
 8008ae4:	4413      	add	r3, r2
 8008ae6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aea:	4606      	mov	r6, r0
 8008aec:	460f      	mov	r7, r1
 8008aee:	4622      	mov	r2, r4
 8008af0:	462b      	mov	r3, r5
 8008af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008af6:	f7f7 fbe9 	bl	80002cc <__adddf3>
 8008afa:	4642      	mov	r2, r8
 8008afc:	464b      	mov	r3, r9
 8008afe:	f7f7 fbe5 	bl	80002cc <__adddf3>
 8008b02:	4632      	mov	r2, r6
 8008b04:	463b      	mov	r3, r7
 8008b06:	f7f7 fbe1 	bl	80002cc <__adddf3>
 8008b0a:	9802      	ldr	r0, [sp, #8]
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	463b      	mov	r3, r7
 8008b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b14:	f7f7 fbd8 	bl	80002c8 <__aeabi_dsub>
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	f7f7 fbd4 	bl	80002c8 <__aeabi_dsub>
 8008b20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b24:	e607      	b.n	8008736 <__ieee754_pow+0x2ce>
 8008b26:	f04f 0a01 	mov.w	sl, #1
 8008b2a:	e6a5      	b.n	8008878 <__ieee754_pow+0x410>
 8008b2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008b80 <__ieee754_pow+0x718>
 8008b30:	e613      	b.n	800875a <__ieee754_pow+0x2f2>
 8008b32:	bf00      	nop
 8008b34:	f3af 8000 	nop.w
 8008b38:	4a454eef 	.word	0x4a454eef
 8008b3c:	3fca7e28 	.word	0x3fca7e28
 8008b40:	93c9db65 	.word	0x93c9db65
 8008b44:	3fcd864a 	.word	0x3fcd864a
 8008b48:	a91d4101 	.word	0xa91d4101
 8008b4c:	3fd17460 	.word	0x3fd17460
 8008b50:	518f264d 	.word	0x518f264d
 8008b54:	3fd55555 	.word	0x3fd55555
 8008b58:	db6fabff 	.word	0xdb6fabff
 8008b5c:	3fdb6db6 	.word	0x3fdb6db6
 8008b60:	33333303 	.word	0x33333303
 8008b64:	3fe33333 	.word	0x3fe33333
 8008b68:	e0000000 	.word	0xe0000000
 8008b6c:	3feec709 	.word	0x3feec709
 8008b70:	dc3a03fd 	.word	0xdc3a03fd
 8008b74:	3feec709 	.word	0x3feec709
 8008b78:	145b01f5 	.word	0x145b01f5
 8008b7c:	be3e2fe0 	.word	0xbe3e2fe0
 8008b80:	00000000 	.word	0x00000000
 8008b84:	3ff00000 	.word	0x3ff00000
 8008b88:	43400000 	.word	0x43400000
 8008b8c:	0003988e 	.word	0x0003988e
 8008b90:	000bb679 	.word	0x000bb679
 8008b94:	080098e0 	.word	0x080098e0
 8008b98:	3ff00000 	.word	0x3ff00000
 8008b9c:	40080000 	.word	0x40080000
 8008ba0:	08009900 	.word	0x08009900
 8008ba4:	080098f0 	.word	0x080098f0
 8008ba8:	a3b4      	add	r3, pc, #720	; (adr r3, 8008e7c <__ieee754_pow+0xa14>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	f7f7 fb8b 	bl	80002cc <__adddf3>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	f7f7 fb81 	bl	80002c8 <__aeabi_dsub>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bce:	f7f7 ffc3 	bl	8000b58 <__aeabi_dcmpgt>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	f47f adfe 	bne.w	80087d4 <__ieee754_pow+0x36c>
 8008bd8:	4aa3      	ldr	r2, [pc, #652]	; (8008e68 <__ieee754_pow+0xa00>)
 8008bda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bde:	4293      	cmp	r3, r2
 8008be0:	f340 810a 	ble.w	8008df8 <__ieee754_pow+0x990>
 8008be4:	151b      	asrs	r3, r3, #20
 8008be6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008bea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008bee:	fa4a f303 	asr.w	r3, sl, r3
 8008bf2:	445b      	add	r3, fp
 8008bf4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008bf8:	4e9c      	ldr	r6, [pc, #624]	; (8008e6c <__ieee754_pow+0xa04>)
 8008bfa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008bfe:	4116      	asrs	r6, r2
 8008c00:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008c04:	2000      	movs	r0, #0
 8008c06:	ea23 0106 	bic.w	r1, r3, r6
 8008c0a:	f1c2 0214 	rsb	r2, r2, #20
 8008c0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c12:	fa4a fa02 	asr.w	sl, sl, r2
 8008c16:	f1bb 0f00 	cmp.w	fp, #0
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	bfb8      	it	lt
 8008c24:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c28:	f7f7 fb4e 	bl	80002c8 <__aeabi_dsub>
 8008c2c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c30:	4642      	mov	r2, r8
 8008c32:	464b      	mov	r3, r9
 8008c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c38:	f7f7 fb48 	bl	80002cc <__adddf3>
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	a378      	add	r3, pc, #480	; (adr r3, 8008e20 <__ieee754_pow+0x9b8>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	4604      	mov	r4, r0
 8008c46:	460d      	mov	r5, r1
 8008c48:	f7f7 fcf6 	bl	8000638 <__aeabi_dmul>
 8008c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c50:	4606      	mov	r6, r0
 8008c52:	460f      	mov	r7, r1
 8008c54:	4620      	mov	r0, r4
 8008c56:	4629      	mov	r1, r5
 8008c58:	f7f7 fb36 	bl	80002c8 <__aeabi_dsub>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4640      	mov	r0, r8
 8008c62:	4649      	mov	r1, r9
 8008c64:	f7f7 fb30 	bl	80002c8 <__aeabi_dsub>
 8008c68:	a36f      	add	r3, pc, #444	; (adr r3, 8008e28 <__ieee754_pow+0x9c0>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fce3 	bl	8000638 <__aeabi_dmul>
 8008c72:	a36f      	add	r3, pc, #444	; (adr r3, 8008e30 <__ieee754_pow+0x9c8>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	4680      	mov	r8, r0
 8008c7a:	4689      	mov	r9, r1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 fcda 	bl	8000638 <__aeabi_dmul>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4640      	mov	r0, r8
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	f7f7 fb1e 	bl	80002cc <__adddf3>
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	f7f7 fb16 	bl	80002cc <__adddf3>
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4689      	mov	r9, r1
 8008ca8:	f7f7 fb0e 	bl	80002c8 <__aeabi_dsub>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f7f7 fb08 	bl	80002c8 <__aeabi_dsub>
 8008cb8:	4642      	mov	r2, r8
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 fcb8 	bl	8000638 <__aeabi_dmul>
 8008cc8:	a35b      	add	r3, pc, #364	; (adr r3, 8008e38 <__ieee754_pow+0x9d0>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	f7f7 fcb1 	bl	8000638 <__aeabi_dmul>
 8008cd6:	a35a      	add	r3, pc, #360	; (adr r3, 8008e40 <__ieee754_pow+0x9d8>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 faf4 	bl	80002c8 <__aeabi_dsub>
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	f7f7 fca8 	bl	8000638 <__aeabi_dmul>
 8008ce8:	a357      	add	r3, pc, #348	; (adr r3, 8008e48 <__ieee754_pow+0x9e0>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 faed 	bl	80002cc <__adddf3>
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	f7f7 fc9f 	bl	8000638 <__aeabi_dmul>
 8008cfa:	a355      	add	r3, pc, #340	; (adr r3, 8008e50 <__ieee754_pow+0x9e8>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 fae2 	bl	80002c8 <__aeabi_dsub>
 8008d04:	4622      	mov	r2, r4
 8008d06:	462b      	mov	r3, r5
 8008d08:	f7f7 fc96 	bl	8000638 <__aeabi_dmul>
 8008d0c:	a352      	add	r3, pc, #328	; (adr r3, 8008e58 <__ieee754_pow+0x9f0>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fadb 	bl	80002cc <__adddf3>
 8008d16:	4622      	mov	r2, r4
 8008d18:	462b      	mov	r3, r5
 8008d1a:	f7f7 fc8d 	bl	8000638 <__aeabi_dmul>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4640      	mov	r0, r8
 8008d24:	4649      	mov	r1, r9
 8008d26:	f7f7 facf 	bl	80002c8 <__aeabi_dsub>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fc7f 	bl	8000638 <__aeabi_dmul>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8008d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d44:	4620      	mov	r0, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	f7f7 fabe 	bl	80002c8 <__aeabi_dsub>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d54:	f7f7 fd9a 	bl	800088c <__aeabi_ddiv>
 8008d58:	4632      	mov	r2, r6
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	463b      	mov	r3, r7
 8008d60:	4640      	mov	r0, r8
 8008d62:	4649      	mov	r1, r9
 8008d64:	f7f7 fc68 	bl	8000638 <__aeabi_dmul>
 8008d68:	4632      	mov	r2, r6
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	f7f7 faae 	bl	80002cc <__adddf3>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4620      	mov	r0, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 faa6 	bl	80002c8 <__aeabi_dsub>
 8008d7c:	4642      	mov	r2, r8
 8008d7e:	464b      	mov	r3, r9
 8008d80:	f7f7 faa2 	bl	80002c8 <__aeabi_dsub>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4939      	ldr	r1, [pc, #228]	; (8008e70 <__ieee754_pow+0xa08>)
 8008d8c:	f7f7 fa9c 	bl	80002c8 <__aeabi_dsub>
 8008d90:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008d94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	da2f      	bge.n	8008dfe <__ieee754_pow+0x996>
 8008d9e:	4650      	mov	r0, sl
 8008da0:	ec43 2b10 	vmov	d0, r2, r3
 8008da4:	f000 f9c0 	bl	8009128 <scalbn>
 8008da8:	ec51 0b10 	vmov	r0, r1, d0
 8008dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008db0:	f7ff bbf1 	b.w	8008596 <__ieee754_pow+0x12e>
 8008db4:	4b2f      	ldr	r3, [pc, #188]	; (8008e74 <__ieee754_pow+0xa0c>)
 8008db6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008dba:	429e      	cmp	r6, r3
 8008dbc:	f77f af0c 	ble.w	8008bd8 <__ieee754_pow+0x770>
 8008dc0:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <__ieee754_pow+0xa10>)
 8008dc2:	440b      	add	r3, r1
 8008dc4:	4303      	orrs	r3, r0
 8008dc6:	d00b      	beq.n	8008de0 <__ieee754_pow+0x978>
 8008dc8:	a325      	add	r3, pc, #148	; (adr r3, 8008e60 <__ieee754_pow+0x9f8>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd2:	f7f7 fc31 	bl	8000638 <__aeabi_dmul>
 8008dd6:	a322      	add	r3, pc, #136	; (adr r3, 8008e60 <__ieee754_pow+0x9f8>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7ff bbdb 	b.w	8008596 <__ieee754_pow+0x12e>
 8008de0:	4622      	mov	r2, r4
 8008de2:	462b      	mov	r3, r5
 8008de4:	f7f7 fa70 	bl	80002c8 <__aeabi_dsub>
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	f7f7 feaa 	bl	8000b44 <__aeabi_dcmpge>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f43f aef1 	beq.w	8008bd8 <__ieee754_pow+0x770>
 8008df6:	e7e7      	b.n	8008dc8 <__ieee754_pow+0x960>
 8008df8:	f04f 0a00 	mov.w	sl, #0
 8008dfc:	e718      	b.n	8008c30 <__ieee754_pow+0x7c8>
 8008dfe:	4621      	mov	r1, r4
 8008e00:	e7d4      	b.n	8008dac <__ieee754_pow+0x944>
 8008e02:	2000      	movs	r0, #0
 8008e04:	491a      	ldr	r1, [pc, #104]	; (8008e70 <__ieee754_pow+0xa08>)
 8008e06:	f7ff bb8f 	b.w	8008528 <__ieee754_pow+0xc0>
 8008e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e0e:	f7ff bb8b 	b.w	8008528 <__ieee754_pow+0xc0>
 8008e12:	4630      	mov	r0, r6
 8008e14:	4639      	mov	r1, r7
 8008e16:	f7ff bb87 	b.w	8008528 <__ieee754_pow+0xc0>
 8008e1a:	4693      	mov	fp, r2
 8008e1c:	f7ff bb98 	b.w	8008550 <__ieee754_pow+0xe8>
 8008e20:	00000000 	.word	0x00000000
 8008e24:	3fe62e43 	.word	0x3fe62e43
 8008e28:	fefa39ef 	.word	0xfefa39ef
 8008e2c:	3fe62e42 	.word	0x3fe62e42
 8008e30:	0ca86c39 	.word	0x0ca86c39
 8008e34:	be205c61 	.word	0xbe205c61
 8008e38:	72bea4d0 	.word	0x72bea4d0
 8008e3c:	3e663769 	.word	0x3e663769
 8008e40:	c5d26bf1 	.word	0xc5d26bf1
 8008e44:	3ebbbd41 	.word	0x3ebbbd41
 8008e48:	af25de2c 	.word	0xaf25de2c
 8008e4c:	3f11566a 	.word	0x3f11566a
 8008e50:	16bebd93 	.word	0x16bebd93
 8008e54:	3f66c16c 	.word	0x3f66c16c
 8008e58:	5555553e 	.word	0x5555553e
 8008e5c:	3fc55555 	.word	0x3fc55555
 8008e60:	c2f8f359 	.word	0xc2f8f359
 8008e64:	01a56e1f 	.word	0x01a56e1f
 8008e68:	3fe00000 	.word	0x3fe00000
 8008e6c:	000fffff 	.word	0x000fffff
 8008e70:	3ff00000 	.word	0x3ff00000
 8008e74:	4090cbff 	.word	0x4090cbff
 8008e78:	3f6f3400 	.word	0x3f6f3400
 8008e7c:	652b82fe 	.word	0x652b82fe
 8008e80:	3c971547 	.word	0x3c971547

08008e84 <__ieee754_sqrt>:
 8008e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e88:	4955      	ldr	r1, [pc, #340]	; (8008fe0 <__ieee754_sqrt+0x15c>)
 8008e8a:	ec55 4b10 	vmov	r4, r5, d0
 8008e8e:	43a9      	bics	r1, r5
 8008e90:	462b      	mov	r3, r5
 8008e92:	462a      	mov	r2, r5
 8008e94:	d112      	bne.n	8008ebc <__ieee754_sqrt+0x38>
 8008e96:	ee10 2a10 	vmov	r2, s0
 8008e9a:	ee10 0a10 	vmov	r0, s0
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 fbca 	bl	8000638 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	f7f7 fa0e 	bl	80002cc <__adddf3>
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	ec45 4b10 	vmov	d0, r4, r5
 8008eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	ee10 0a10 	vmov	r0, s0
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	dc0f      	bgt.n	8008ee6 <__ieee754_sqrt+0x62>
 8008ec6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008eca:	4330      	orrs	r0, r6
 8008ecc:	d0f2      	beq.n	8008eb4 <__ieee754_sqrt+0x30>
 8008ece:	b155      	cbz	r5, 8008ee6 <__ieee754_sqrt+0x62>
 8008ed0:	ee10 2a10 	vmov	r2, s0
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f7f7 f9f6 	bl	80002c8 <__aeabi_dsub>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	f7f7 fcd4 	bl	800088c <__aeabi_ddiv>
 8008ee4:	e7e4      	b.n	8008eb0 <__ieee754_sqrt+0x2c>
 8008ee6:	151b      	asrs	r3, r3, #20
 8008ee8:	d073      	beq.n	8008fd2 <__ieee754_sqrt+0x14e>
 8008eea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008eee:	07dd      	lsls	r5, r3, #31
 8008ef0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008ef4:	bf48      	it	mi
 8008ef6:	0fc8      	lsrmi	r0, r1, #31
 8008ef8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008efc:	bf44      	itt	mi
 8008efe:	0049      	lslmi	r1, r1, #1
 8008f00:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008f04:	2500      	movs	r5, #0
 8008f06:	1058      	asrs	r0, r3, #1
 8008f08:	0fcb      	lsrs	r3, r1, #31
 8008f0a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008f0e:	0049      	lsls	r1, r1, #1
 8008f10:	2316      	movs	r3, #22
 8008f12:	462c      	mov	r4, r5
 8008f14:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008f18:	19a7      	adds	r7, r4, r6
 8008f1a:	4297      	cmp	r7, r2
 8008f1c:	bfde      	ittt	le
 8008f1e:	19bc      	addle	r4, r7, r6
 8008f20:	1bd2      	suble	r2, r2, r7
 8008f22:	19ad      	addle	r5, r5, r6
 8008f24:	0fcf      	lsrs	r7, r1, #31
 8008f26:	3b01      	subs	r3, #1
 8008f28:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008f2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008f30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008f34:	d1f0      	bne.n	8008f18 <__ieee754_sqrt+0x94>
 8008f36:	f04f 0c20 	mov.w	ip, #32
 8008f3a:	469e      	mov	lr, r3
 8008f3c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f40:	42a2      	cmp	r2, r4
 8008f42:	eb06 070e 	add.w	r7, r6, lr
 8008f46:	dc02      	bgt.n	8008f4e <__ieee754_sqrt+0xca>
 8008f48:	d112      	bne.n	8008f70 <__ieee754_sqrt+0xec>
 8008f4a:	428f      	cmp	r7, r1
 8008f4c:	d810      	bhi.n	8008f70 <__ieee754_sqrt+0xec>
 8008f4e:	2f00      	cmp	r7, #0
 8008f50:	eb07 0e06 	add.w	lr, r7, r6
 8008f54:	da42      	bge.n	8008fdc <__ieee754_sqrt+0x158>
 8008f56:	f1be 0f00 	cmp.w	lr, #0
 8008f5a:	db3f      	blt.n	8008fdc <__ieee754_sqrt+0x158>
 8008f5c:	f104 0801 	add.w	r8, r4, #1
 8008f60:	1b12      	subs	r2, r2, r4
 8008f62:	428f      	cmp	r7, r1
 8008f64:	bf88      	it	hi
 8008f66:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008f6a:	1bc9      	subs	r1, r1, r7
 8008f6c:	4433      	add	r3, r6
 8008f6e:	4644      	mov	r4, r8
 8008f70:	0052      	lsls	r2, r2, #1
 8008f72:	f1bc 0c01 	subs.w	ip, ip, #1
 8008f76:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008f7a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008f7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008f82:	d1dd      	bne.n	8008f40 <__ieee754_sqrt+0xbc>
 8008f84:	430a      	orrs	r2, r1
 8008f86:	d006      	beq.n	8008f96 <__ieee754_sqrt+0x112>
 8008f88:	1c5c      	adds	r4, r3, #1
 8008f8a:	bf13      	iteet	ne
 8008f8c:	3301      	addne	r3, #1
 8008f8e:	3501      	addeq	r5, #1
 8008f90:	4663      	moveq	r3, ip
 8008f92:	f023 0301 	bicne.w	r3, r3, #1
 8008f96:	106a      	asrs	r2, r5, #1
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	07e9      	lsls	r1, r5, #31
 8008f9c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008fa0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008fa4:	bf48      	it	mi
 8008fa6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008faa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008fae:	461c      	mov	r4, r3
 8008fb0:	e780      	b.n	8008eb4 <__ieee754_sqrt+0x30>
 8008fb2:	0aca      	lsrs	r2, r1, #11
 8008fb4:	3815      	subs	r0, #21
 8008fb6:	0549      	lsls	r1, r1, #21
 8008fb8:	2a00      	cmp	r2, #0
 8008fba:	d0fa      	beq.n	8008fb2 <__ieee754_sqrt+0x12e>
 8008fbc:	02d6      	lsls	r6, r2, #11
 8008fbe:	d50a      	bpl.n	8008fd6 <__ieee754_sqrt+0x152>
 8008fc0:	f1c3 0420 	rsb	r4, r3, #32
 8008fc4:	fa21 f404 	lsr.w	r4, r1, r4
 8008fc8:	1e5d      	subs	r5, r3, #1
 8008fca:	4099      	lsls	r1, r3
 8008fcc:	4322      	orrs	r2, r4
 8008fce:	1b43      	subs	r3, r0, r5
 8008fd0:	e78b      	b.n	8008eea <__ieee754_sqrt+0x66>
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	e7f0      	b.n	8008fb8 <__ieee754_sqrt+0x134>
 8008fd6:	0052      	lsls	r2, r2, #1
 8008fd8:	3301      	adds	r3, #1
 8008fda:	e7ef      	b.n	8008fbc <__ieee754_sqrt+0x138>
 8008fdc:	46a0      	mov	r8, r4
 8008fde:	e7bf      	b.n	8008f60 <__ieee754_sqrt+0xdc>
 8008fe0:	7ff00000 	.word	0x7ff00000

08008fe4 <fabs>:
 8008fe4:	ec51 0b10 	vmov	r0, r1, d0
 8008fe8:	ee10 2a10 	vmov	r2, s0
 8008fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ff0:	ec43 2b10 	vmov	d0, r2, r3
 8008ff4:	4770      	bx	lr

08008ff6 <finite>:
 8008ff6:	ee10 3a90 	vmov	r3, s1
 8008ffa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008ffe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009002:	0fc0      	lsrs	r0, r0, #31
 8009004:	4770      	bx	lr

08009006 <matherr>:
 8009006:	2000      	movs	r0, #0
 8009008:	4770      	bx	lr
 800900a:	0000      	movs	r0, r0
 800900c:	0000      	movs	r0, r0
	...

08009010 <nan>:
 8009010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009018 <nan+0x8>
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	00000000 	.word	0x00000000
 800901c:	7ff80000 	.word	0x7ff80000

08009020 <rint>:
 8009020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009022:	ec51 0b10 	vmov	r0, r1, d0
 8009026:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800902a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800902e:	2e13      	cmp	r6, #19
 8009030:	460b      	mov	r3, r1
 8009032:	ee10 4a10 	vmov	r4, s0
 8009036:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800903a:	dc56      	bgt.n	80090ea <rint+0xca>
 800903c:	2e00      	cmp	r6, #0
 800903e:	da2b      	bge.n	8009098 <rint+0x78>
 8009040:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009044:	4302      	orrs	r2, r0
 8009046:	d023      	beq.n	8009090 <rint+0x70>
 8009048:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800904c:	4302      	orrs	r2, r0
 800904e:	4254      	negs	r4, r2
 8009050:	4314      	orrs	r4, r2
 8009052:	0c4b      	lsrs	r3, r1, #17
 8009054:	0b24      	lsrs	r4, r4, #12
 8009056:	045b      	lsls	r3, r3, #17
 8009058:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800905c:	ea44 0103 	orr.w	r1, r4, r3
 8009060:	460b      	mov	r3, r1
 8009062:	492f      	ldr	r1, [pc, #188]	; (8009120 <rint+0x100>)
 8009064:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009068:	e9d1 6700 	ldrd	r6, r7, [r1]
 800906c:	4602      	mov	r2, r0
 800906e:	4639      	mov	r1, r7
 8009070:	4630      	mov	r0, r6
 8009072:	f7f7 f92b 	bl	80002cc <__adddf3>
 8009076:	e9cd 0100 	strd	r0, r1, [sp]
 800907a:	463b      	mov	r3, r7
 800907c:	4632      	mov	r2, r6
 800907e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009082:	f7f7 f921 	bl	80002c8 <__aeabi_dsub>
 8009086:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800908a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800908e:	4639      	mov	r1, r7
 8009090:	ec41 0b10 	vmov	d0, r0, r1
 8009094:	b003      	add	sp, #12
 8009096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009098:	4a22      	ldr	r2, [pc, #136]	; (8009124 <rint+0x104>)
 800909a:	4132      	asrs	r2, r6
 800909c:	ea01 0702 	and.w	r7, r1, r2
 80090a0:	4307      	orrs	r7, r0
 80090a2:	d0f5      	beq.n	8009090 <rint+0x70>
 80090a4:	0852      	lsrs	r2, r2, #1
 80090a6:	4011      	ands	r1, r2
 80090a8:	430c      	orrs	r4, r1
 80090aa:	d00b      	beq.n	80090c4 <rint+0xa4>
 80090ac:	ea23 0202 	bic.w	r2, r3, r2
 80090b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090b4:	2e13      	cmp	r6, #19
 80090b6:	fa43 f306 	asr.w	r3, r3, r6
 80090ba:	bf0c      	ite	eq
 80090bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80090c0:	2400      	movne	r4, #0
 80090c2:	4313      	orrs	r3, r2
 80090c4:	4916      	ldr	r1, [pc, #88]	; (8009120 <rint+0x100>)
 80090c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80090ca:	4622      	mov	r2, r4
 80090cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090d0:	4620      	mov	r0, r4
 80090d2:	4629      	mov	r1, r5
 80090d4:	f7f7 f8fa 	bl	80002cc <__adddf3>
 80090d8:	e9cd 0100 	strd	r0, r1, [sp]
 80090dc:	4622      	mov	r2, r4
 80090de:	462b      	mov	r3, r5
 80090e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090e4:	f7f7 f8f0 	bl	80002c8 <__aeabi_dsub>
 80090e8:	e7d2      	b.n	8009090 <rint+0x70>
 80090ea:	2e33      	cmp	r6, #51	; 0x33
 80090ec:	dd07      	ble.n	80090fe <rint+0xde>
 80090ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80090f2:	d1cd      	bne.n	8009090 <rint+0x70>
 80090f4:	ee10 2a10 	vmov	r2, s0
 80090f8:	f7f7 f8e8 	bl	80002cc <__adddf3>
 80090fc:	e7c8      	b.n	8009090 <rint+0x70>
 80090fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009102:	f04f 32ff 	mov.w	r2, #4294967295
 8009106:	40f2      	lsrs	r2, r6
 8009108:	4210      	tst	r0, r2
 800910a:	d0c1      	beq.n	8009090 <rint+0x70>
 800910c:	0852      	lsrs	r2, r2, #1
 800910e:	4210      	tst	r0, r2
 8009110:	bf1f      	itttt	ne
 8009112:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009116:	ea20 0202 	bicne.w	r2, r0, r2
 800911a:	4134      	asrne	r4, r6
 800911c:	4314      	orrne	r4, r2
 800911e:	e7d1      	b.n	80090c4 <rint+0xa4>
 8009120:	08009910 	.word	0x08009910
 8009124:	000fffff 	.word	0x000fffff

08009128 <scalbn>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	ec55 4b10 	vmov	r4, r5, d0
 800912e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009132:	4606      	mov	r6, r0
 8009134:	462b      	mov	r3, r5
 8009136:	b9aa      	cbnz	r2, 8009164 <scalbn+0x3c>
 8009138:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800913c:	4323      	orrs	r3, r4
 800913e:	d03b      	beq.n	80091b8 <scalbn+0x90>
 8009140:	4b31      	ldr	r3, [pc, #196]	; (8009208 <scalbn+0xe0>)
 8009142:	4629      	mov	r1, r5
 8009144:	2200      	movs	r2, #0
 8009146:	ee10 0a10 	vmov	r0, s0
 800914a:	f7f7 fa75 	bl	8000638 <__aeabi_dmul>
 800914e:	4b2f      	ldr	r3, [pc, #188]	; (800920c <scalbn+0xe4>)
 8009150:	429e      	cmp	r6, r3
 8009152:	4604      	mov	r4, r0
 8009154:	460d      	mov	r5, r1
 8009156:	da12      	bge.n	800917e <scalbn+0x56>
 8009158:	a327      	add	r3, pc, #156	; (adr r3, 80091f8 <scalbn+0xd0>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 fa6b 	bl	8000638 <__aeabi_dmul>
 8009162:	e009      	b.n	8009178 <scalbn+0x50>
 8009164:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009168:	428a      	cmp	r2, r1
 800916a:	d10c      	bne.n	8009186 <scalbn+0x5e>
 800916c:	ee10 2a10 	vmov	r2, s0
 8009170:	4620      	mov	r0, r4
 8009172:	4629      	mov	r1, r5
 8009174:	f7f7 f8aa 	bl	80002cc <__adddf3>
 8009178:	4604      	mov	r4, r0
 800917a:	460d      	mov	r5, r1
 800917c:	e01c      	b.n	80091b8 <scalbn+0x90>
 800917e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009182:	460b      	mov	r3, r1
 8009184:	3a36      	subs	r2, #54	; 0x36
 8009186:	4432      	add	r2, r6
 8009188:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800918c:	428a      	cmp	r2, r1
 800918e:	dd0b      	ble.n	80091a8 <scalbn+0x80>
 8009190:	ec45 4b11 	vmov	d1, r4, r5
 8009194:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009200 <scalbn+0xd8>
 8009198:	f000 f83c 	bl	8009214 <copysign>
 800919c:	a318      	add	r3, pc, #96	; (adr r3, 8009200 <scalbn+0xd8>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	ec51 0b10 	vmov	r0, r1, d0
 80091a6:	e7da      	b.n	800915e <scalbn+0x36>
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	dd08      	ble.n	80091be <scalbn+0x96>
 80091ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80091b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80091b8:	ec45 4b10 	vmov	d0, r4, r5
 80091bc:	bd70      	pop	{r4, r5, r6, pc}
 80091be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80091c2:	da0d      	bge.n	80091e0 <scalbn+0xb8>
 80091c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80091c8:	429e      	cmp	r6, r3
 80091ca:	ec45 4b11 	vmov	d1, r4, r5
 80091ce:	dce1      	bgt.n	8009194 <scalbn+0x6c>
 80091d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80091f8 <scalbn+0xd0>
 80091d4:	f000 f81e 	bl	8009214 <copysign>
 80091d8:	a307      	add	r3, pc, #28	; (adr r3, 80091f8 <scalbn+0xd0>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	e7e0      	b.n	80091a2 <scalbn+0x7a>
 80091e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091e4:	3236      	adds	r2, #54	; 0x36
 80091e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80091ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	2200      	movs	r2, #0
 80091f4:	4b06      	ldr	r3, [pc, #24]	; (8009210 <scalbn+0xe8>)
 80091f6:	e7b2      	b.n	800915e <scalbn+0x36>
 80091f8:	c2f8f359 	.word	0xc2f8f359
 80091fc:	01a56e1f 	.word	0x01a56e1f
 8009200:	8800759c 	.word	0x8800759c
 8009204:	7e37e43c 	.word	0x7e37e43c
 8009208:	43500000 	.word	0x43500000
 800920c:	ffff3cb0 	.word	0xffff3cb0
 8009210:	3c900000 	.word	0x3c900000

08009214 <copysign>:
 8009214:	ec51 0b10 	vmov	r0, r1, d0
 8009218:	ee11 0a90 	vmov	r0, s3
 800921c:	ee10 2a10 	vmov	r2, s0
 8009220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009224:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009228:	ea41 0300 	orr.w	r3, r1, r0
 800922c:	ec43 2b10 	vmov	d0, r2, r3
 8009230:	4770      	bx	lr
	...

08009234 <_init>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr

08009240 <_fini>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	bf00      	nop
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr
