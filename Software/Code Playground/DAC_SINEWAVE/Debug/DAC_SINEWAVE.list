
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08009e18  08009e18  00019e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a660  0800a660  000209e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a660  0800a660  0001a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a668  0800a668  000209e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e8  20000000  0800a670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034d0  200009e8  0800b058  000209e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003eb8  0800b058  00023eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016434  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002de5  00000000  00000000  00036e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  0003abd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023db7  00000000  00000000  0003ba18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e25a  00000000  00000000  0005f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2c2a  00000000  00000000  0006da29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140653  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  001406d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e8 	.word	0x200009e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009dfc 	.word	0x08009dfc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009ec 	.word	0x200009ec
 800020c:	08009dfc 	.word	0x08009dfc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 0, 0, 0, 0, 0, 0, 1, 1 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	4613      	mov	r3, r2
 8000f36:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 8000f38:	797b      	ldrb	r3, [r7, #5]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4939      	ldr	r1, [pc, #228]	; (8001024 <conv_HEX_to_BIN+0xfc>)
 8000f3e:	483a      	ldr	r0, [pc, #232]	; (8001028 <conv_HEX_to_BIN+0x100>)
 8000f40:	f007 fb22 	bl	8008588 <siprintf>
    debug_print_msg();
 8000f44:	f001 face 	bl	80024e4 <debug_print_msg>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4937      	ldr	r1, [pc, #220]	; (800102c <conv_HEX_to_BIN+0x104>)
 8000f4e:	4836      	ldr	r0, [pc, #216]	; (8001028 <conv_HEX_to_BIN+0x100>)
 8000f50:	f007 fb1a 	bl	8008588 <siprintf>
	debug_print_msg();
 8000f54:	f001 fac6 	bl	80024e4 <debug_print_msg>

	//8 bits
    if(select_8_16){
 8000f58:	797b      	ldrb	r3, [r7, #5]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d02e      	beq.n	8000fbc <conv_HEX_to_BIN+0x94>
		for(int i = 0; i < 8; i++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e01f      	b.n	8000fa4 <conv_HEX_to_BIN+0x7c>
			temp = hex_byte_in >> i;
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa42 f303 	asr.w	r3, r2, r3
 8000f6c:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	bfb8      	it	lt
 8000f78:	425b      	neglt	r3, r3
 8000f7a:	60fb      	str	r3, [r7, #12]

			sprintf(uartData, " %d ",temp);
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	492c      	ldr	r1, [pc, #176]	; (8001030 <conv_HEX_to_BIN+0x108>)
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <conv_HEX_to_BIN+0x100>)
 8000f82:	f007 fb01 	bl	8008588 <siprintf>
			debug_print_msg();
 8000f86:	f001 faad 	bl	80024e4 <debug_print_msg>

			*(bin_byte_out+i) = temp;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	bf14      	ite	ne
 8000f96:	2201      	movne	r2, #1
 8000f98:	2200      	moveq	r2, #0
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	dddc      	ble.n	8000f64 <conv_HEX_to_BIN+0x3c>
		}
		sprintf(uartData, "\n ");
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <conv_HEX_to_BIN+0x100>)
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <conv_HEX_to_BIN+0x10c>)
 8000fae:	8811      	ldrh	r1, [r2, #0]
 8000fb0:	7892      	ldrb	r2, [r2, #2]
 8000fb2:	8019      	strh	r1, [r3, #0]
 8000fb4:	709a      	strb	r2, [r3, #2]
		debug_print_msg();
 8000fb6:	f001 fa95 	bl	80024e4 <debug_print_msg>
		debug_print_msg();
    }

    //sprintf(uartData, "\n");
	//debug_print_msg();
}
 8000fba:	e02e      	b.n	800101a <conv_HEX_to_BIN+0xf2>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	491d      	ldr	r1, [pc, #116]	; (8001038 <conv_HEX_to_BIN+0x110>)
 8000fc2:	4819      	ldr	r0, [pc, #100]	; (8001028 <conv_HEX_to_BIN+0x100>)
 8000fc4:	f007 fae0 	bl	8008588 <siprintf>
		debug_print_msg();
 8000fc8:	f001 fa8c 	bl	80024e4 <debug_print_msg>
		for(int i = 0; i < 16; i++){
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	e018      	b.n	8001004 <conv_HEX_to_BIN+0xdc>
			temp = hex_byte_in >> i;
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	fa42 f303 	asr.w	r3, r2, r3
 8000fda:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	bfb8      	it	lt
 8000fe6:	425b      	neglt	r3, r3
 8000fe8:	60fb      	str	r3, [r7, #12]
			*(bin_byte_out + i) = temp; //MSB is at lowest index
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	2a00      	cmp	r2, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2201      	movne	r2, #1
 8000ff8:	2200      	moveq	r2, #0
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	3301      	adds	r3, #1
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	dde3      	ble.n	8000fd2 <conv_HEX_to_BIN+0xaa>
		sprintf(uartData, "\n ");
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <conv_HEX_to_BIN+0x100>)
 800100c:	4a09      	ldr	r2, [pc, #36]	; (8001034 <conv_HEX_to_BIN+0x10c>)
 800100e:	8811      	ldrh	r1, [r2, #0]
 8001010:	7892      	ldrb	r2, [r2, #2]
 8001012:	8019      	strh	r1, [r3, #0]
 8001014:	709a      	strb	r2, [r3, #2]
		debug_print_msg();
 8001016:	f001 fa65 	bl	80024e4 <debug_print_msg>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	08009e18 	.word	0x08009e18
 8001028:	20002648 	.word	0x20002648
 800102c:	08009e34 	.word	0x08009e34
 8001030:	08009e68 	.word	0x08009e68
 8001034:	08009e70 	.word	0x08009e70
 8001038:	08009e74 	.word	0x08009e74
 800103c:	00000000 	.word	0x00000000

08001040 <conv_BIN_to_HEX>:
uint16_t conv_BIN_to_HEX(bool *bin_byte_in,bool select_8_16){
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
	uint16_t acc = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	82fb      	strh	r3, [r7, #22]
	int bits = (select_8_16) ? 8 : 16;
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <conv_BIN_to_HEX+0x1a>
 8001056:	2308      	movs	r3, #8
 8001058:	e000      	b.n	800105c <conv_BIN_to_HEX+0x1c>
 800105a:	2310      	movs	r3, #16
 800105c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < bits; i++){
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e02c      	b.n	80010be <conv_BIN_to_HEX+0x7e>
		acc += ( *(bin_byte_in+i) )? pow(2,i) : 0;
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00d      	beq.n	800108c <conv_BIN_to_HEX+0x4c>
 8001070:	6938      	ldr	r0, [r7, #16]
 8001072:	f7ff fa77 	bl	8000564 <__aeabi_i2d>
 8001076:	4603      	mov	r3, r0
 8001078:	460c      	mov	r4, r1
 800107a:	ec44 3b11 	vmov	d1, r3, r4
 800107e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80010d0 <conv_BIN_to_HEX+0x90>
 8001082:	f007 fe63 	bl	8008d4c <pow>
 8001086:	ec55 4b10 	vmov	r4, r5, d0
 800108a:	e003      	b.n	8001094 <conv_BIN_to_HEX+0x54>
 800108c:	f04f 0400 	mov.w	r4, #0
 8001090:	f04f 0500 	mov.w	r5, #0
 8001094:	8afb      	ldrh	r3, [r7, #22]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa64 	bl	8000564 <__aeabi_i2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f7ff f912 	bl	80002cc <__adddf3>
 80010a8:	4603      	mov	r3, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4618      	mov	r0, r3
 80010ae:	4621      	mov	r1, r4
 80010b0:	f7ff fd9a 	bl	8000be8 <__aeabi_d2uiz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < bits; i++){
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	3301      	adds	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dbce      	blt.n	8001064 <conv_BIN_to_HEX+0x24>
	}
	return acc;
 80010c6:	8afb      	ldrh	r3, [r7, #22]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40000000 	.word	0x40000000

080010d8 <tx_rx>:

//General Program
//****************************************************************************************************************
void tx_rx() {
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
	//Transmission Mode
	if (mode) {
 80010de:	4b37      	ldr	r3, [pc, #220]	; (80011bc <tx_rx+0xe4>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d065      	beq.n	80011b2 <tx_rx+0xda>
		bool packet_received = false;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71bb      	strb	r3, [r7, #6]
		bool packet_converted = false;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]

		//Run receiving KISS
		packet_received = receiving_KISS();
 80010ee:	f000 fc01 	bl	80018f4 <receiving_KISS>
 80010f2:	4603      	mov	r3, r0
 80010f4:	71bb      	strb	r3, [r7, #6]

		if(packet_received){
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <tx_rx+0x2c>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 80010fc:	f000 fca8 	bl	8001a50 <KISS_TO_AX25>
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <tx_rx+0x36>
			output_AX25();
 800110a:	f000 f861 	bl	80011d0 <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 800110e:	f000 f973 	bl	80013f8 <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	f083 0301 	eor.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d011      	beq.n	8001142 <tx_rx+0x6a>
			sprintf(uartData, "Error receiving KISS packet\n");
 800111e:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <tx_rx+0xe8>)
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <tx_rx+0xec>)
 8001122:	4615      	mov	r5, r2
 8001124:	461c      	mov	r4, r3
 8001126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001128:	6028      	str	r0, [r5, #0]
 800112a:	6069      	str	r1, [r5, #4]
 800112c:	60aa      	str	r2, [r5, #8]
 800112e:	60eb      	str	r3, [r5, #12]
 8001130:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001132:	6128      	str	r0, [r5, #16]
 8001134:	6169      	str	r1, [r5, #20]
 8001136:	61aa      	str	r2, [r5, #24]
 8001138:	7823      	ldrb	r3, [r4, #0]
 800113a:	772b      	strb	r3, [r5, #28]
			debug_print_msg();
 800113c:	f001 f9d2 	bl	80024e4 <debug_print_msg>
 8001140:	e034      	b.n	80011ac <tx_rx+0xd4>
		}
		//Packet was not converted properly
		else if(!packet_converted){
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f083 0301 	eor.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d011      	beq.n	8001172 <tx_rx+0x9a>
			sprintf(uartData, "Error converting KISS packet\n");
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <tx_rx+0xe8>)
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <tx_rx+0xf0>)
 8001152:	4615      	mov	r5, r2
 8001154:	461c      	mov	r4, r3
 8001156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001158:	6028      	str	r0, [r5, #0]
 800115a:	6069      	str	r1, [r5, #4]
 800115c:	60aa      	str	r2, [r5, #8]
 800115e:	60eb      	str	r3, [r5, #12]
 8001160:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001162:	6128      	str	r0, [r5, #16]
 8001164:	6169      	str	r1, [r5, #20]
 8001166:	61aa      	str	r2, [r5, #24]
 8001168:	8823      	ldrh	r3, [r4, #0]
 800116a:	83ab      	strh	r3, [r5, #28]
			debug_print_msg();
 800116c:	f001 f9ba 	bl	80024e4 <debug_print_msg>
 8001170:	e01c      	b.n	80011ac <tx_rx+0xd4>
		}
		//Successful transmission!
		else {
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <tx_rx+0xe8>)
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <tx_rx+0xf4>)
 8001176:	4614      	mov	r4, r2
 8001178:	469c      	mov	ip, r3
 800117a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800117e:	4665      	mov	r5, ip
 8001180:	4626      	mov	r6, r4
 8001182:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001184:	6028      	str	r0, [r5, #0]
 8001186:	6069      	str	r1, [r5, #4]
 8001188:	60aa      	str	r2, [r5, #8]
 800118a:	60eb      	str	r3, [r5, #12]
 800118c:	3410      	adds	r4, #16
 800118e:	f10c 0c10 	add.w	ip, ip, #16
 8001192:	4574      	cmp	r4, lr
 8001194:	d1f3      	bne.n	800117e <tx_rx+0xa6>
 8001196:	4662      	mov	r2, ip
 8001198:	4623      	mov	r3, r4
 800119a:	cb03      	ldmia	r3!, {r0, r1}
 800119c:	6010      	str	r0, [r2, #0]
 800119e:	6051      	str	r1, [r2, #4]
 80011a0:	8819      	ldrh	r1, [r3, #0]
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	8111      	strh	r1, [r2, #8]
 80011a6:	7293      	strb	r3, [r2, #10]
			debug_print_msg();
 80011a8:	f001 f99c 	bl	80024e4 <debug_print_msg>
		}

		setHardwareMode(0);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f001 f829 	bl	8002204 <setHardwareMode>
	}

	//Receiving Mode
	else {
	}
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200032ec 	.word	0x200032ec
 80011c0:	20002648 	.word	0x20002648
 80011c4:	08009ea8 	.word	0x08009ea8
 80011c8:	08009ec8 	.word	0x08009ec8
 80011cc:	08009ee8 	.word	0x08009ee8

080011d0 <output_AX25>:

void output_AX25(){
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <output_AX25+0x1f4>)
 80011d8:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Beginning AFSK transmission\n");
 80011da:	4a7b      	ldr	r2, [pc, #492]	; (80013c8 <output_AX25+0x1f8>)
 80011dc:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <output_AX25+0x1fc>)
 80011de:	4615      	mov	r5, r2
 80011e0:	461c      	mov	r4, r3
 80011e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e4:	6028      	str	r0, [r5, #0]
 80011e6:	6069      	str	r1, [r5, #4]
 80011e8:	60aa      	str	r2, [r5, #8]
 80011ea:	60eb      	str	r3, [r5, #12]
 80011ec:	cc07      	ldmia	r4!, {r0, r1, r2}
 80011ee:	6128      	str	r0, [r5, #16]
 80011f0:	6169      	str	r1, [r5, #20]
 80011f2:	61aa      	str	r2, [r5, #24]
 80011f4:	7823      	ldrb	r3, [r4, #0]
 80011f6:	772b      	strb	r3, [r5, #28]
	debug_print_msg();
 80011f8:	f001 f974 	bl	80024e4 <debug_print_msg>

	int wave_start = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
	freqSelect = true;
 8001200:	4b73      	ldr	r3, [pc, #460]	; (80013d0 <output_AX25+0x200>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2120      	movs	r1, #32
 800120a:	4872      	ldr	r0, [pc, #456]	; (80013d4 <output_AX25+0x204>)
 800120c:	f004 f9e4 	bl	80055d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 8001210:	2201      	movs	r2, #1
 8001212:	2110      	movs	r1, #16
 8001214:	4870      	ldr	r0, [pc, #448]	; (80013d8 <output_AX25+0x208>)
 8001216:	f004 f9df 	bl	80055d8 <HAL_GPIO_WritePin>

	bool dumbbits[4] = { 0, 0, 0, 0 };
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
	//Init dac playing 4*8 zeros to help receiver sync
	for(int i = 0;i<8;i++){
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	e009      	b.n	8001238 <output_AX25+0x68>
		wave_start = bitToAudio(dumbbits,4,1,wave_start);
 8001224:	1d38      	adds	r0, r7, #4
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2201      	movs	r2, #1
 800122a:	2104      	movs	r1, #4
 800122c:	f001 f8be 	bl	80023ac <bitToAudio>
 8001230:	61f8      	str	r0, [r7, #28]
	for(int i = 0;i<8;i++){
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	3301      	adds	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b07      	cmp	r3, #7
 800123c:	ddf2      	ble.n	8001224 <output_AX25+0x54>
	}

	wave_start = bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start); //start flag
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2201      	movs	r2, #1
 8001242:	2108      	movs	r1, #8
 8001244:	4865      	ldr	r0, [pc, #404]	; (80013dc <output_AX25+0x20c>)
 8001246:	f001 f8b1 	bl	80023ac <bitToAudio>
 800124a:	61f8      	str	r0, [r7, #28]

	//Real information fields
	wave_start = bitToAudio(local_packet->address, address_len + local_packet->stuffed_address,1,wave_start); 		//lsb first
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001252:	3310      	adds	r3, #16
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800125c:	3310      	adds	r3, #16
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2201      	movs	r2, #1
 8001268:	f001 f8a0 	bl	80023ac <bitToAudio>
 800126c:	61f8      	str	r0, [r7, #28]
	wave_start = bitToAudio(local_packet->control,control_len + local_packet->stuffed_control,1,wave_start);		//lsb first
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001274:	3314      	adds	r3, #20
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800127e:	3314      	adds	r3, #20
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f103 0108 	add.w	r1, r3, #8
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	2201      	movs	r2, #1
 800128a:	f001 f88f 	bl	80023ac <bitToAudio>
 800128e:	61f8      	str	r0, [r7, #28]
	wave_start = bitToAudio(local_packet->PID,PID_len + local_packet->stuffed_PID,1,wave_start);					//lsb first
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001296:	3318      	adds	r3, #24
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80012a0:	3318      	adds	r3, #24
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f103 0108 	add.w	r1, r3, #8
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f001 f87e 	bl	80023ac <bitToAudio>
 80012b0:	61f8      	str	r0, [r7, #28]
	wave_start = bitToAudio(local_packet->Info,local_packet->Info_Len + local_packet->stuffed_Info,1,wave_start);	//lsb first
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80012b8:	331c      	adds	r3, #28
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80012ca:	331c      	adds	r3, #28
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	18d1      	adds	r1, r2, r3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f001 f86a 	bl	80023ac <bitToAudio>
 80012d8:	61f8      	str	r0, [r7, #28]
	bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS + local_packet->stuffed_FCS,1,wave_start);		//msb first
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80012e0:	3304      	adds	r3, #4
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f103 0210 	add.w	r2, r3, #16
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f001 f855 	bl	80023ac <bitToAudio>

	bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start);//stop flag
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	2201      	movs	r2, #1
 8001306:	2108      	movs	r1, #8
 8001308:	4834      	ldr	r0, [pc, #208]	; (80013dc <output_AX25+0x20c>)
 800130a:	f001 f84f 	bl	80023ac <bitToAudio>

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800130e:	2100      	movs	r1, #0
 8001310:	4833      	ldr	r0, [pc, #204]	; (80013e0 <output_AX25+0x210>)
 8001312:	f003 fa99 	bl	8004848 <HAL_DAC_Stop_DMA>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2120      	movs	r1, #32
 800131a:	482e      	ldr	r0, [pc, #184]	; (80013d4 <output_AX25+0x204>)
 800131c:	f004 f95c 	bl	80055d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 8001320:	2200      	movs	r2, #0
 8001322:	2110      	movs	r1, #16
 8001324:	482c      	ldr	r0, [pc, #176]	; (80013d8 <output_AX25+0x208>)
 8001326:	f004 f957 	bl	80055d8 <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <output_AX25+0x1f8>)
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <output_AX25+0x214>)
 800132e:	4615      	mov	r5, r2
 8001330:	461c      	mov	r4, r3
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	6028      	str	r0, [r5, #0]
 8001336:	6069      	str	r1, [r5, #4]
 8001338:	60aa      	str	r2, [r5, #8]
 800133a:	60eb      	str	r3, [r5, #12]
 800133c:	cc03      	ldmia	r4!, {r0, r1}
 800133e:	6128      	str	r0, [r5, #16]
 8001340:	6169      	str	r1, [r5, #20]
 8001342:	8823      	ldrh	r3, [r4, #0]
 8001344:	832b      	strh	r3, [r5, #24]
	debug_print_msg();
 8001346:	f001 f8cd 	bl	80024e4 <debug_print_msg>

	//Debugging mode that will repeat send message. Must restart to stop or change message
	if(BROADCASTR){
		const int millis = 4000;
 800134a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800134e:	60fb      	str	r3, [r7, #12]
		sprintf(uartData, "BROADCASTING WILL REPEAT IN A %d MILLISSECOND",millis);
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4925      	ldr	r1, [pc, #148]	; (80013e8 <output_AX25+0x218>)
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <output_AX25+0x1f8>)
 8001356:	f007 f917 	bl	8008588 <siprintf>
		debug_print_msg();
 800135a:	f001 f8c3 	bl	80024e4 <debug_print_msg>

		int millis_div = (millis * 1.0) / 10 * 1.0;
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff f900 	bl	8000564 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <output_AX25+0x21c>)
 800136a:	f7ff fa8f 	bl	800088c <__aeabi_ddiv>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	4618      	mov	r0, r3
 8001374:	4621      	mov	r1, r4
 8001376:	f7ff fc0f 	bl	8000b98 <__aeabi_d2iz>
 800137a:	4603      	mov	r3, r0
 800137c:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i<10;i++){
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e00c      	b.n	800139e <output_AX25+0x1ce>
			sprintf(uartData, " . ");
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <output_AX25+0x1f8>)
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <output_AX25+0x220>)
 8001388:	6810      	ldr	r0, [r2, #0]
 800138a:	6018      	str	r0, [r3, #0]
			debug_print_msg();
 800138c:	f001 f8aa 	bl	80024e4 <debug_print_msg>
			HAL_Delay(millis_div);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4618      	mov	r0, r3
 8001394:	f003 f854 	bl	8004440 <HAL_Delay>
		for(int i = 0;i<10;i++){
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	ddef      	ble.n	8001384 <output_AX25+0x1b4>
		}
		sprintf(uartData, "\n\n");
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <output_AX25+0x1f8>)
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <output_AX25+0x224>)
 80013a8:	8811      	ldrh	r1, [r2, #0]
 80013aa:	7892      	ldrb	r2, [r2, #2]
 80013ac:	8019      	strh	r1, [r3, #0]
 80013ae:	709a      	strb	r2, [r3, #2]
		debug_print_msg();
 80013b0:	f001 f898 	bl	80024e4 <debug_print_msg>

		print_AX25();
 80013b4:	f001 f89e 	bl	80024f4 <print_AX25>
		output_AX25();
 80013b8:	f7ff ff0a 	bl	80011d0 <output_AX25>
	}
}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	20000a44 	.word	0x20000a44
 80013c8:	20002648 	.word	0x20002648
 80013cc:	08009f24 	.word	0x08009f24
 80013d0:	20000a0a 	.word	0x20000a0a
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020800 	.word	0x40020800
 80013dc:	20000008 	.word	0x20000008
 80013e0:	200032f0 	.word	0x200032f0
 80013e4:	08009f44 	.word	0x08009f44
 80013e8:	08009f60 	.word	0x08009f60
 80013ec:	40240000 	.word	0x40240000
 80013f0:	08009f90 	.word	0x08009f90
 80013f4:	08009f94 	.word	0x08009f94

080013f8 <clear_AX25>:

void clear_AX25(){
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <clear_AX25+0x90>)
 8001400:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8001402:	4a22      	ldr	r2, [pc, #136]	; (800148c <clear_AX25+0x94>)
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <clear_AX25+0x98>)
 8001406:	4615      	mov	r5, r2
 8001408:	461c      	mov	r4, r3
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	6028      	str	r0, [r5, #0]
 800140e:	6069      	str	r1, [r5, #4]
 8001410:	60aa      	str	r2, [r5, #8]
 8001412:	60eb      	str	r3, [r5, #12]
 8001414:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001416:	6128      	str	r0, [r5, #16]
 8001418:	6169      	str	r1, [r5, #20]
 800141a:	61aa      	str	r2, [r5, #24]
	debug_print_msg();
 800141c:	f001 f862 	bl	80024e4 <debug_print_msg>

	//reset bitstuff members
	local_packet->stuffed_address = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001426:	3310      	adds	r3, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001432:	3314      	adds	r3, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800143e:	3318      	adds	r3, #24
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800144a:	331c      	adds	r3, #28
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	local_packet->bit_stuffed_zeros = 0;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001460:	3304      	adds	r3, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f640 225f 	movw	r2, #2655	; 0xa5f
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f007 f85e 	bl	8008530 <memcpy>
	local_packet->got_packet = false;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800147a:	3309      	adds	r3, #9
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	20000a44 	.word	0x20000a44
 800148c:	20002648 	.word	0x20002648
 8001490:	08009f98 	.word	0x08009f98

08001494 <output_HEX>:

void output_HEX() {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <output_HEX+0x68>)
 800149c:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "\n");
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <output_HEX+0x6c>)
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <output_HEX+0x70>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80014a6:	f001 f81d 	bl	80024e4 <debug_print_msg>

	for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e016      	b.n	80014de <output_HEX+0x4a>
		sprintf(uartData, "%x",local_UART_packet->HEX_KISS_PACKET[i]);
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	330e      	adds	r3, #14
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4912      	ldr	r1, [pc, #72]	; (8001508 <output_HEX+0x74>)
 80014be:	4810      	ldr	r0, [pc, #64]	; (8001500 <output_HEX+0x6c>)
 80014c0:	f007 f862 	bl	8008588 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <output_HEX+0x6c>)
 80014c6:	f7fe fea3 	bl	8000210 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	230a      	movs	r3, #10
 80014d0:	490b      	ldr	r1, [pc, #44]	; (8001500 <output_HEX+0x6c>)
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <output_HEX+0x78>)
 80014d4:	f006 f917 	bl	8007706 <HAL_UART_Transmit>
	for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3301      	adds	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbe3      	blt.n	80014b0 <output_HEX+0x1c>
	}

	sprintf(uartData, "\n");
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <output_HEX+0x6c>)
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <output_HEX+0x70>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80014f0:	f000 fff8 	bl	80024e4 <debug_print_msg>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20001db0 	.word	0x20001db0
 8001500:	20002648 	.word	0x20002648
 8001504:	08009fb4 	.word	0x08009fb4
 8001508:	08009fb8 	.word	0x08009fb8
 800150c:	20003344 	.word	0x20003344

08001510 <receiving_AX25>:

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <receiving_AX25+0x54>)
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <receiving_AX25+0x58>)
 800151a:	4615      	mov	r5, r2
 800151c:	461c      	mov	r4, r3
 800151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001520:	6028      	str	r0, [r5, #0]
 8001522:	6069      	str	r1, [r5, #4]
 8001524:	60aa      	str	r2, [r5, #8]
 8001526:	60eb      	str	r3, [r5, #12]
 8001528:	cc03      	ldmia	r4!, {r0, r1}
 800152a:	6128      	str	r0, [r5, #16]
 800152c:	6169      	str	r1, [r5, #20]
 800152e:	7823      	ldrb	r3, [r4, #0]
 8001530:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 8001532:	f000 ffd7 	bl	80024e4 <debug_print_msg>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <receiving_AX25+0x5c>)
 8001538:	607b      	str	r3, [r7, #4]

	//Validate packet
	bool AX25_IsValid = AX25_Packet_Validate();
 800153a:	f000 f869 	bl	8001610 <AX25_Packet_Validate>
 800153e:	4603      	mov	r3, r0
 8001540:	70fb      	strb	r3, [r7, #3]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		debug_print_msg();

	if(AX25_IsValid){
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <receiving_AX25+0x48>
		//Put data into KISS format and buffer
		AX25_TO_KISS();
 8001548:	f000 f994 	bl	8001874 <AX25_TO_KISS>

		//Put data into HEX buffer
		KISS_TO_HEX();
 800154c:	f000 fc76 	bl	8001e3c <KISS_TO_HEX>

		//Transmit KISS Packet that has been generated
		output_HEX();
 8001550:	f7ff ffa0 	bl	8001494 <output_HEX>

		//Clear AX.25 buffer
		clear_AX25();
 8001554:	f7ff ff50 	bl	80013f8 <clear_AX25>
//		clear_KISS();
//		clear_HEX();
	}
}
 8001558:	bf00      	nop
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bdb0      	pop	{r4, r5, r7, pc}
 8001562:	bf00      	nop
 8001564:	20002648 	.word	0x20002648
 8001568:	08009fbc 	.word	0x08009fbc
 800156c:	20000a44 	.word	0x20000a44

08001570 <slide_bits>:

void slide_bits(bool* array,int bits_left){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	memmove(array,array+1,bits_left*bool_size);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3301      	adds	r3, #1
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 ffdf 	bl	8008546 <memmove>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <remove_bit_stuffing>:

void remove_bit_stuffing(){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <remove_bit_stuffing+0x78>)
 8001598:	607b      	str	r3, [r7, #4]
//	sprintf(uartData, "Removing bit stuffed zeros\n");
//	debug_print_msg();

	int ones_count = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
	bool curr;
	for(int i = 0;i < rxBit_count;i++){
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	e028      	b.n	80015f6 <remove_bit_stuffing+0x66>
		curr = local_packet->AX25_PACKET[i]; //iterate through all data received before seperating into subfields
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	70fb      	strb	r3, [r7, #3]
		if(curr){ //current bit is a 1
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <remove_bit_stuffing+0x32>
			ones_count++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
			if(ones_count > 5){
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	dd17      	ble.n	80015f0 <remove_bit_stuffing+0x60>
//				sprintf(uartData, "ERROR: SHOULD HAVE BEEN A ZERO AFTER FIFTH CONTIGIOUS ONE!\n");
//				debug_print_msg();
				return;
 80015c0:	e01e      	b.n	8001600 <remove_bit_stuffing+0x70>
			}
		}
		else{
			if(ones_count >= 5){
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	dd11      	ble.n	80015ec <remove_bit_stuffing+0x5c>
				slide_bits(&local_packet->AX25_PACKET[i],rxBit_count-i);
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	18d0      	adds	r0, r2, r3
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <remove_bit_stuffing+0x7c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff ffca 	bl	8001570 <slide_bits>
				i--;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3b01      	subs	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
				rxBit_count--;
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <remove_bit_stuffing+0x7c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	4a08      	ldr	r2, [pc, #32]	; (800160c <remove_bit_stuffing+0x7c>)
 80015ea:	6013      	str	r3, [r2, #0]
//				sprintf(uartData, "REMOVED BIT STUFFED ZERO!\n");
//				debug_print_msg();
			}
			ones_count = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
	for(int i = 0;i < rxBit_count;i++){
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	3301      	adds	r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <remove_bit_stuffing+0x7c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbd1      	blt.n	80015a4 <remove_bit_stuffing+0x14>
		}
	}
	//transmit kiss
}
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000a44 	.word	0x20000a44
 800160c:	20000a04 	.word	0x20000a04

08001610 <AX25_Packet_Validate>:

bool AX25_Packet_Validate(){
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <AX25_Packet_Validate+0xc0>)
 8001618:	60fb      	str	r3, [r7, #12]
	int fcs_val = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData,"Received packet bit count: %d\n",local_packet->byte_cnt*8);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001624:	330c      	adds	r3, #12
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	461a      	mov	r2, r3
 800162c:	4929      	ldr	r1, [pc, #164]	; (80016d4 <AX25_Packet_Validate+0xc4>)
 800162e:	482a      	ldr	r0, [pc, #168]	; (80016d8 <AX25_Packet_Validate+0xc8>)
 8001630:	f006 ffaa 	bl	8008588 <siprintf>
	debug_print_msg();
 8001634:	f000 ff56 	bl	80024e4 <debug_print_msg>

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <AX25_Packet_Validate+0xcc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b77      	cmp	r3, #119	; 0x77
 800163e:	dc15      	bgt.n	800166c <AX25_Packet_Validate+0x5c>
		sprintf(uartData,"Trash Packet, not enough bits\n");
 8001640:	4a25      	ldr	r2, [pc, #148]	; (80016d8 <AX25_Packet_Validate+0xc8>)
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <AX25_Packet_Validate+0xd0>)
 8001644:	4615      	mov	r5, r2
 8001646:	461c      	mov	r4, r3
 8001648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164a:	6028      	str	r0, [r5, #0]
 800164c:	6069      	str	r1, [r5, #4]
 800164e:	60aa      	str	r2, [r5, #8]
 8001650:	60eb      	str	r3, [r5, #12]
 8001652:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001654:	6128      	str	r0, [r5, #16]
 8001656:	6169      	str	r1, [r5, #20]
 8001658:	61aa      	str	r2, [r5, #24]
 800165a:	8823      	ldrh	r3, [r4, #0]
 800165c:	78a2      	ldrb	r2, [r4, #2]
 800165e:	83ab      	strh	r3, [r5, #28]
 8001660:	4613      	mov	r3, r2
 8001662:	77ab      	strb	r3, [r5, #30]
		debug_print_msg();
 8001664:	f000 ff3e 	bl	80024e4 <debug_print_msg>
		return false;
 8001668:	2300      	movs	r3, #0
 800166a:	e02d      	b.n	80016c8 <AX25_Packet_Validate+0xb8>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <AX25_Packet_Validate+0xcc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	2b00      	cmp	r3, #0
 8001676:	d019      	beq.n	80016ac <AX25_Packet_Validate+0x9c>
		sprintf(uartData,"Trash Packet, not octet aligned\n");
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <AX25_Packet_Validate+0xc8>)
 800167a:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <AX25_Packet_Validate+0xd4>)
 800167c:	4614      	mov	r4, r2
 800167e:	469c      	mov	ip, r3
 8001680:	f104 0e20 	add.w	lr, r4, #32
 8001684:	4665      	mov	r5, ip
 8001686:	4626      	mov	r6, r4
 8001688:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800168a:	6028      	str	r0, [r5, #0]
 800168c:	6069      	str	r1, [r5, #4]
 800168e:	60aa      	str	r2, [r5, #8]
 8001690:	60eb      	str	r3, [r5, #12]
 8001692:	3410      	adds	r4, #16
 8001694:	f10c 0c10 	add.w	ip, ip, #16
 8001698:	4574      	cmp	r4, lr
 800169a:	d1f3      	bne.n	8001684 <AX25_Packet_Validate+0x74>
 800169c:	4663      	mov	r3, ip
 800169e:	4622      	mov	r2, r4
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	701a      	strb	r2, [r3, #0]
		debug_print_msg();
 80016a4:	f000 ff1e 	bl	80024e4 <debug_print_msg>
		return false;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e00d      	b.n	80016c8 <AX25_Packet_Validate+0xb8>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		uint16_t local_info_len = rxBit_count-INFO_offset_woFlag;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <AX25_Packet_Validate+0xcc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b90      	subs	r3, #144	; 0x90
 80016b4:	80fb      	strh	r3, [r7, #6]
		set_packet_pointer_AX25(local_info_len);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f815 	bl	80016e8 <set_packet_pointer_AX25>
		print_AX25();
 80016be:	f000 ff19 	bl	80024f4 <print_AX25>

		return crc_check();
 80016c2:	f000 fd5b 	bl	800217c <crc_check>
 80016c6:	4603      	mov	r3, r0
	}
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d0:	20000a44 	.word	0x20000a44
 80016d4:	08009fd8 	.word	0x08009fd8
 80016d8:	20002648 	.word	0x20002648
 80016dc:	20000a04 	.word	0x20000a04
 80016e0:	08009ff8 	.word	0x08009ff8
 80016e4:	0800a018 	.word	0x0800a018

080016e8 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(int info_len_in){
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <set_packet_pointer_AX25+0x16c>)
 80016f2:	617b      	str	r3, [r7, #20]
	int not_info = FCS_len;
 80016f4:	2310      	movs	r3, #16
 80016f6:	613b      	str	r3, [r7, #16]
	local_packet->Info_Len = info_len_in;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <set_packet_pointer_AX25+0x170>)
 8001704:	4a55      	ldr	r2, [pc, #340]	; (800185c <set_packet_pointer_AX25+0x174>)
 8001706:	4614      	mov	r4, r2
 8001708:	469c      	mov	ip, r3
 800170a:	f104 0e20 	add.w	lr, r4, #32
 800170e:	4665      	mov	r5, ip
 8001710:	4626      	mov	r6, r4
 8001712:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001714:	6028      	str	r0, [r5, #0]
 8001716:	6069      	str	r1, [r5, #4]
 8001718:	60aa      	str	r2, [r5, #8]
 800171a:	60eb      	str	r3, [r5, #12]
 800171c:	3410      	adds	r4, #16
 800171e:	f10c 0c10 	add.w	ip, ip, #16
 8001722:	4574      	cmp	r4, lr
 8001724:	d1f3      	bne.n	800170e <set_packet_pointer_AX25+0x26>
 8001726:	4663      	mov	r3, ip
 8001728:	4622      	mov	r2, r4
 800172a:	7812      	ldrb	r2, [r2, #0]
 800172c:	701a      	strb	r2, [r3, #0]
	debug_print_msg();
 800172e:	f000 fed9 	bl	80024e4 <debug_print_msg>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Setting pointer for address\n");
 8001736:	4a48      	ldr	r2, [pc, #288]	; (8001858 <set_packet_pointer_AX25+0x170>)
 8001738:	4b49      	ldr	r3, [pc, #292]	; (8001860 <set_packet_pointer_AX25+0x178>)
 800173a:	4615      	mov	r5, r2
 800173c:	461c      	mov	r4, r3
 800173e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001740:	6028      	str	r0, [r5, #0]
 8001742:	6069      	str	r1, [r5, #4]
 8001744:	60aa      	str	r2, [r5, #8]
 8001746:	60eb      	str	r3, [r5, #12]
 8001748:	cc07      	ldmia	r4!, {r0, r1, r2}
 800174a:	6128      	str	r0, [r5, #16]
 800174c:	6169      	str	r1, [r5, #20]
 800174e:	61aa      	str	r2, [r5, #24]
 8001750:	7823      	ldrb	r3, [r4, #0]
 8001752:	772b      	strb	r3, [r5, #28]
	debug_print_msg();
 8001754:	f000 fec6 	bl	80024e4 <debug_print_msg>
	local_packet->address = curr_mem;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800175e:	3310      	adds	r3, #16
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3370      	adds	r3, #112	; 0x70
 8001768:	60fb      	str	r3, [r7, #12]
	not_info += address_len;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3370      	adds	r3, #112	; 0x70
 800176e:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for control\n");
 8001770:	4a39      	ldr	r2, [pc, #228]	; (8001858 <set_packet_pointer_AX25+0x170>)
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <set_packet_pointer_AX25+0x17c>)
 8001774:	4615      	mov	r5, r2
 8001776:	461c      	mov	r4, r3
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	6028      	str	r0, [r5, #0]
 800177c:	6069      	str	r1, [r5, #4]
 800177e:	60aa      	str	r2, [r5, #8]
 8001780:	60eb      	str	r3, [r5, #12]
 8001782:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001784:	6128      	str	r0, [r5, #16]
 8001786:	6169      	str	r1, [r5, #20]
 8001788:	61aa      	str	r2, [r5, #24]
 800178a:	7823      	ldrb	r3, [r4, #0]
 800178c:	772b      	strb	r3, [r5, #28]
	debug_print_msg();
 800178e:	f000 fea9 	bl	80024e4 <debug_print_msg>
	local_packet->control = curr_mem;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001798:	3314      	adds	r3, #20
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3308      	adds	r3, #8
 80017a2:	60fb      	str	r3, [r7, #12]
	not_info += control_len;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	3308      	adds	r3, #8
 80017a8:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for PID\n");
 80017aa:	4a2b      	ldr	r2, [pc, #172]	; (8001858 <set_packet_pointer_AX25+0x170>)
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <set_packet_pointer_AX25+0x180>)
 80017ae:	4615      	mov	r5, r2
 80017b0:	461c      	mov	r4, r3
 80017b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b4:	6028      	str	r0, [r5, #0]
 80017b6:	6069      	str	r1, [r5, #4]
 80017b8:	60aa      	str	r2, [r5, #8]
 80017ba:	60eb      	str	r3, [r5, #12]
 80017bc:	cc03      	ldmia	r4!, {r0, r1}
 80017be:	6128      	str	r0, [r5, #16]
 80017c0:	6169      	str	r1, [r5, #20]
 80017c2:	7823      	ldrb	r3, [r4, #0]
 80017c4:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 80017c6:	f000 fe8d 	bl	80024e4 <debug_print_msg>
	local_packet->PID = curr_mem;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80017d0:	3318      	adds	r3, #24
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3308      	adds	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
	not_info += PID_len;
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	3308      	adds	r3, #8
 80017e0:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for Info\n");
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <set_packet_pointer_AX25+0x170>)
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <set_packet_pointer_AX25+0x184>)
 80017e6:	4615      	mov	r5, r2
 80017e8:	461c      	mov	r4, r3
 80017ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ec:	6028      	str	r0, [r5, #0]
 80017ee:	6069      	str	r1, [r5, #4]
 80017f0:	60aa      	str	r2, [r5, #8]
 80017f2:	60eb      	str	r3, [r5, #12]
 80017f4:	cc03      	ldmia	r4!, {r0, r1}
 80017f6:	6128      	str	r0, [r5, #16]
 80017f8:	6169      	str	r1, [r5, #20]
 80017fa:	8823      	ldrh	r3, [r4, #0]
 80017fc:	832b      	strh	r3, [r5, #24]
	debug_print_msg();
 80017fe:	f000 fe71 	bl	80024e4 <debug_print_msg>
	local_packet->Info = curr_mem;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001808:	331c      	adds	r3, #28
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Setting pointer for FCS\n");
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <set_packet_pointer_AX25+0x170>)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <set_packet_pointer_AX25+0x188>)
 8001822:	4615      	mov	r5, r2
 8001824:	461c      	mov	r4, r3
 8001826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001828:	6028      	str	r0, [r5, #0]
 800182a:	6069      	str	r1, [r5, #4]
 800182c:	60aa      	str	r2, [r5, #8]
 800182e:	60eb      	str	r3, [r5, #12]
 8001830:	cc03      	ldmia	r4!, {r0, r1}
 8001832:	6128      	str	r0, [r5, #16]
 8001834:	6169      	str	r1, [r5, #20]
 8001836:	7823      	ldrb	r3, [r4, #0]
 8001838:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 800183a:	f000 fe53 	bl	80024e4 <debug_print_msg>
	local_packet->FCS = curr_mem;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001844:	3304      	adds	r3, #4
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	601a      	str	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001852:	bf00      	nop
 8001854:	20000a44 	.word	0x20000a44
 8001858:	20002648 	.word	0x20002648
 800185c:	0800a03c 	.word	0x0800a03c
 8001860:	0800a060 	.word	0x0800a060
 8001864:	0800a080 	.word	0x0800a080
 8001868:	0800a0a0 	.word	0x0800a0a0
 800186c:	0800a0bc 	.word	0x0800a0bc
 8001870:	0800a0d8 	.word	0x0800a0d8

08001874 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <AX25_TO_KISS+0x78>)
 800187c:	607b      	str	r3, [r7, #4]
	bool *curr_mem = local_packet->KISS_PACKET;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001884:	603b      	str	r3, [r7, #0]

	//Put a flag into KISS
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4919      	ldr	r1, [pc, #100]	; (80018f0 <AX25_TO_KISS+0x7c>)
 800188a:	461a      	mov	r2, r3
 800188c:	460b      	mov	r3, r1
 800188e:	cb03      	ldmia	r3!, {r0, r1}
 8001890:	6010      	str	r0, [r2, #0]
 8001892:	6051      	str	r1, [r2, #4]
	curr_mem += FLAG_SIZE;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3308      	adds	r3, #8
 8001898:	603b      	str	r3, [r7, #0]

	//Set port info
	memset(curr_mem,0,8);
 800189a:	2208      	movs	r2, #8
 800189c:	2100      	movs	r1, #0
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f006 fe6a 	bl	8008578 <memset>
	curr_mem += 8;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3308      	adds	r3, #8
 80018a8:	603b      	str	r3, [r7, #0]

	//Put AX25 packet into KISS w/o the FCS, HAVE AN ADDED 8 due to port info
	memcpy(curr_mem,local_packet->AX25_PACKET,(local_packet->byte_cnt*8)-FCS_len);
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018b2:	330c      	adds	r3, #12
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3b02      	subs	r3, #2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	461a      	mov	r2, r3
 80018bc:	6838      	ldr	r0, [r7, #0]
 80018be:	f006 fe37 	bl	8008530 <memcpy>
	curr_mem += (local_packet->byte_cnt*8)-FCS_len;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018c8:	330c      	adds	r3, #12
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	3b10      	subs	r3, #16
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	603b      	str	r3, [r7, #0]

	//Put a flag into KISS
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	4905      	ldr	r1, [pc, #20]	; (80018f0 <AX25_TO_KISS+0x7c>)
 80018da:	461a      	mov	r2, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	cb03      	ldmia	r3!, {r0, r1}
 80018e0:	6010      	str	r0, [r2, #0]
 80018e2:	6051      	str	r1, [r2, #4]
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000a44 	.word	0x20000a44
 80018f0:	20000000 	.word	0x20000000

080018f4 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <receiving_KISS+0xb4>)
 80018fc:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <receiving_KISS+0xb8>)
 8001900:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	7b5b      	ldrb	r3, [r3, #13]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d049      	beq.n	800199e <receiving_KISS+0xaa>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	461a      	mov	r2, r3
 8001910:	4927      	ldr	r1, [pc, #156]	; (80019b0 <receiving_KISS+0xbc>)
 8001912:	4828      	ldr	r0, [pc, #160]	; (80019b4 <receiving_KISS+0xc0>)
 8001914:	f006 fe38 	bl	8008588 <siprintf>
		debug_print_msg();
 8001918:	f000 fde4 	bl	80024e4 <debug_print_msg>

		int byte_cnt = local_UART_packet->received_byte_cnt;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e017      	b.n	8001958 <receiving_KISS+0x64>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[i];
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4413      	add	r3, r2
 800192e:	330e      	adds	r3, #14
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	71fb      	strb	r3, [r7, #7]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	3307      	adds	r3, #7
 8001942:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//debug_print_msg();

			//Selecting 8 bit
			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	b29b      	uxth	r3, r3
 8001948:	2201      	movs	r2, #1
 800194a:	6839      	ldr	r1, [r7, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff faeb 	bl	8000f28 <conv_HEX_to_BIN>
		for(int i = 0;i < byte_cnt;i++){
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbe3      	blt.n	8001928 <receiving_KISS+0x34>
		}

		local_UART_packet->got_packet = false;
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2200      	movs	r2, #0
 8001964:	735a      	strb	r2, [r3, #13]
		local_packet->got_packet = true;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800196c:	3309      	adds	r3, #9
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800197c:	330c      	adds	r3, #12
 800197e:	601a      	str	r2, [r3, #0]

		print_array_octet(local_packet->KISS_PACKET,local_packet->byte_cnt*8);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800198c:	330c      	adds	r3, #12
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f001 fb95 	bl	80030c4 <print_array_octet>

		return true;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <receiving_KISS+0xac>
	}
	return false;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20001db0 	.word	0x20001db0
 80019ac:	20000a44 	.word	0x20000a44
 80019b0:	0800a0f4 	.word	0x0800a0f4
 80019b4:	20002648 	.word	0x20002648

080019b8 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(int info_len_in){
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <set_packet_pointer_KISS+0x8c>)
 80019c2:	60fb      	str	r3, [r7, #12]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <set_packet_pointer_KISS+0x90>)
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <set_packet_pointer_KISS+0x94>)
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ce:	6020      	str	r0, [r4, #0]
 80019d0:	6061      	str	r1, [r4, #4]
 80019d2:	60a2      	str	r2, [r4, #8]
 80019d4:	60e3      	str	r3, [r4, #12]
 80019d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d8:	6120      	str	r0, [r4, #16]
 80019da:	6161      	str	r1, [r4, #20]
 80019dc:	61a2      	str	r2, [r4, #24]
 80019de:	61e3      	str	r3, [r4, #28]
	debug_print_msg();
 80019e0:	f000 fd80 	bl	80024e4 <debug_print_msg>

	//Update info len since we received a message over UART
	local_packet->Info_Len =info_len_in;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
//	sprintf(uartData, "Setting info length to %d\n",local_packet->Info_Len);
//	debug_print_msg();

	bool *curr_mem = (local_packet->KISS_PACKET+(8*2));//starting kiss packet skipping 2 bytes of flag and port info
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80019f4:	3310      	adds	r3, #16
 80019f6:	60bb      	str	r3, [r7, #8]

	//Assign Address Pointer
	local_packet->address = curr_mem;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019fe:	3310      	adds	r3, #16
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	3370      	adds	r3, #112	; 0x70
 8001a08:	60bb      	str	r3, [r7, #8]

	//Assign Control Pointer
	local_packet->control = curr_mem;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a10:	3314      	adds	r3, #20
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3308      	adds	r3, #8
 8001a1a:	60bb      	str	r3, [r7, #8]

	//Assign PID Pointer
	local_packet->PID = curr_mem;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a22:	3318      	adds	r3, #24
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	60bb      	str	r3, [r7, #8]

	//Assign INFO Pointer
	local_packet->Info = curr_mem;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a34:	331c      	adds	r3, #28
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000a44 	.word	0x20000a44
 8001a48:	20002648 	.word	0x20002648
 8001a4c:	0800a128 	.word	0x0800a128

08001a50 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <KISS_TO_AX25+0xcc>)
 8001a58:	60fb      	str	r3, [r7, #12]

	int local_info_len = local_packet->byte_cnt*8-INFO_offset_wFlag_woFCS;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a60:	330c      	adds	r3, #12
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3b13      	subs	r3, #19
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	60bb      	str	r3, [r7, #8]

	set_packet_pointer_KISS(local_info_len);
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	f7ff ffa4 	bl	80019b8 <set_packet_pointer_KISS>
	print_KISS();
 8001a70:	f001 f9c4 	bl	8002dfc <print_KISS>

	bool* cpy_from_ptr = local_packet->KISS_PACKET+16;//starting kiss packet skipping 2 bytes
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001a7a:	3310      	adds	r3, #16
 8001a7c:	607b      	str	r3, [r7, #4]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25(local_info_len);
 8001a7e:	68b8      	ldr	r0, [r7, #8]
 8001a80:	f7ff fe32 	bl	80016e8 <set_packet_pointer_AX25>

	//Copy address
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2270      	movs	r2, #112	; 0x70
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f006 fd4c 	bl	8008530 <memcpy>
	cpy_from_ptr += address_len;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3370      	adds	r3, #112	; 0x70
 8001a9c:	607b      	str	r3, [r7, #4]

	//Copy control
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001aa4:	3314      	adds	r3, #20
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f006 fd3f 	bl	8008530 <memcpy>
	cpy_from_ptr += control_len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	607b      	str	r3, [r7, #4]

	//Copy PID
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001abe:	3318      	adds	r3, #24
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 fd32 	bl	8008530 <memcpy>
	cpy_from_ptr += PID_len;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	607b      	str	r3, [r7, #4]

	//Info
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ad8:	331c      	adds	r3, #28
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f006 fd22 	bl	8008530 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3380      	adds	r3, #128	; 0x80
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <KISS_TO_AX25+0xd0>)
 8001af8:	6013      	str	r3, [r2, #0]
	crc_generate(true);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f000 fa76 	bl	8001fec <crc_generate>
	print_AX25();
 8001b00:	f000 fcf8 	bl	80024f4 <print_AX25>

	//BIT STUFFING NEEDED
	bit_stuff_fields();
 8001b04:	f000 f80e 	bl	8001b24 <bit_stuff_fields>

	rxBit_count = 0;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <KISS_TO_AX25+0xd0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
//	Print the ax25 packet
	print_outAX25();
 8001b0e:	f000 ff51 	bl	80029b4 <print_outAX25>
	return true; //valid packet
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000a44 	.word	0x20000a44
 8001b20:	20000a04 	.word	0x20000a04

08001b24 <bit_stuff_fields>:

void bit_stuff_fields(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001b2a:	4b84      	ldr	r3, [pc, #528]	; (8001d3c <bit_stuff_fields+0x218>)
 8001b2c:	60fb      	str	r3, [r7, #12]
	int ax25_len = rxBit_count + FCS_len;
 8001b2e:	4b84      	ldr	r3, [pc, #528]	; (8001d40 <bit_stuff_fields+0x21c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3310      	adds	r3, #16
 8001b34:	60bb      	str	r3, [r7, #8]
	int ones_count = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
	ones_count = bitstuffing(local_packet->address,address_len,ax25_len, ones_count, &(local_packet->stuffed_address));
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b40:	3310      	adds	r3, #16
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b4a:	3310      	adds	r3, #16
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	2170      	movs	r1, #112	; 0x70
 8001b54:	f000 f910 	bl	8001d78 <bitstuffing>
 8001b58:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_address;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001b60:	3304      	adds	r3, #4
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b6a:	3310      	adds	r3, #16
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	441a      	add	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001b76:	3304      	adds	r3, #4
 8001b78:	601a      	str	r2, [r3, #0]
	ax25_len -= address_len;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3b70      	subs	r3, #112	; 0x70
 8001b7e:	60bb      	str	r3, [r7, #8]

	local_packet->control += local_packet->bit_stuffed_zeros;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b86:	3314      	adds	r3, #20
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001b90:	3304      	adds	r3, #4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	441a      	add	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b9c:	3314      	adds	r3, #20
 8001b9e:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->control,control_len,ax25_len, ones_count, &(local_packet->stuffed_control));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001bb0:	3314      	adds	r3, #20
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	2108      	movs	r1, #8
 8001bba:	f000 f8dd 	bl	8001d78 <bitstuffing>
 8001bbe:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_control;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001bd0:	3314      	adds	r3, #20
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	441a      	add	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001bdc:	3304      	adds	r3, #4
 8001bde:	601a      	str	r2, [r3, #0]
	ax25_len -= control_len;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3b08      	subs	r3, #8
 8001be4:	60bb      	str	r3, [r7, #8]

	local_packet->PID += local_packet->bit_stuffed_zeros;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001bec:	3318      	adds	r3, #24
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	441a      	add	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c02:	3318      	adds	r3, #24
 8001c04:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->PID,PID_len,ax25_len, ones_count, &(local_packet->stuffed_PID));
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c16:	3318      	adds	r3, #24
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	2108      	movs	r1, #8
 8001c20:	f000 f8aa 	bl	8001d78 <bitstuffing>
 8001c24:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_PID;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c36:	3318      	adds	r3, #24
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	441a      	add	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c42:	3304      	adds	r3, #4
 8001c44:	601a      	str	r2, [r3, #0]
	ax25_len -= PID_len;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3b08      	subs	r3, #8
 8001c4a:	60bb      	str	r3, [r7, #8]

	local_packet->Info += local_packet->bit_stuffed_zeros;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c52:	331c      	adds	r3, #28
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	441a      	add	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c68:	331c      	adds	r3, #28
 8001c6a:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->Info,local_packet->Info_Len, ax25_len, ones_count, &(local_packet->stuffed_Info));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c72:	331c      	adds	r3, #28
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c84:	331c      	adds	r3, #28
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f000 f874 	bl	8001d78 <bitstuffing>
 8001c90:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_Info;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c98:	3304      	adds	r3, #4
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ca2:	331c      	adds	r3, #28
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001cae:	3304      	adds	r3, #4
 8001cb0:	601a      	str	r2, [r3, #0]
	ax25_len -= local_packet->Info_Len;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	60bb      	str	r3, [r7, #8]

	local_packet->FCS += local_packet->bit_stuffed_zeros;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	441a      	add	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cdc:	3304      	adds	r3, #4
 8001cde:	601a      	str	r2, [r3, #0]
	bitstuffing(local_packet->FCS,FCS_len, ax25_len, ones_count, &(local_packet->stuffed_FCS));
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	f000 f83e 	bl	8001d78 <bitstuffing>
	local_packet->bit_stuffed_zeros += local_packet->stuffed_FCS;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d02:	3304      	adds	r3, #4
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	441a      	add	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d16:	3304      	adds	r3, #4
 8001d18:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "bit stuffed zeros = %d\n",local_packet->bit_stuffed_zeros);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d20:	3304      	adds	r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4907      	ldr	r1, [pc, #28]	; (8001d44 <bit_stuff_fields+0x220>)
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <bit_stuff_fields+0x224>)
 8001d2a:	f006 fc2d 	bl	8008588 <siprintf>
	debug_print_msg();
 8001d2e:	f000 fbd9 	bl	80024e4 <debug_print_msg>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000a44 	.word	0x20000a44
 8001d40:	20000a04 	.word	0x20000a04
 8001d44:	0800a148 	.word	0x0800a148
 8001d48:	20002648 	.word	0x20002648

08001d4c <bit_stuff>:

void bit_stuff(bool* array,int bits_left){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	1c98      	adds	r0, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f006 fbf0 	bl	8008546 <memmove>
	*(array+1) = false;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <bitstuffing>:

int bitstuffing(bool* packet,int len,int bits_left, int ones_count,int *stuff){
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <bitstuffing+0xbc>)
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <bitstuffing+0xc0>)
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	469c      	mov	ip, r3
 8001d8e:	f104 0e20 	add.w	lr, r4, #32
 8001d92:	4665      	mov	r5, ip
 8001d94:	4626      	mov	r6, r4
 8001d96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d98:	6028      	str	r0, [r5, #0]
 8001d9a:	6069      	str	r1, [r5, #4]
 8001d9c:	60aa      	str	r2, [r5, #8]
 8001d9e:	60eb      	str	r3, [r5, #12]
 8001da0:	3410      	adds	r4, #16
 8001da2:	f10c 0c10 	add.w	ip, ip, #16
 8001da6:	4574      	cmp	r4, lr
 8001da8:	d1f3      	bne.n	8001d92 <bitstuffing+0x1a>
 8001daa:	4663      	mov	r3, ip
 8001dac:	4622      	mov	r2, r4
 8001dae:	6810      	ldr	r0, [r2, #0]
 8001db0:	6018      	str	r0, [r3, #0]
 8001db2:	7912      	ldrb	r2, [r2, #4]
 8001db4:	711a      	strb	r2, [r3, #4]
	debug_print_msg();
 8001db6:	f000 fb95 	bl	80024e4 <debug_print_msg>

	int bit_stuff_count = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
	bool *curr_mem = packet;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	617b      	str	r3, [r7, #20]
	int left;

	//Increment through array
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e027      	b.n	8001e18 <bitstuffing+0xa0>
		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01c      	beq.n	8001e0e <bitstuffing+0x96>
        	//Inc ones count
        	ones_count++;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	603b      	str	r3, [r7, #0]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d118      	bne.n	8001e12 <bitstuffing+0x9a>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	441a      	add	r2, r3
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
                bit_stuff(curr_mem+i,left);
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4413      	add	r3, r2
 8001df4:	6939      	ldr	r1, [r7, #16]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ffa8 	bl	8001d4c <bit_stuff>

                bit_stuff_count++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
                ones_count = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
                i++;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e001      	b.n	8001e12 <bitstuffing+0x9a>
            }
        }
        else{
        	ones_count = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbd1      	blt.n	8001dc8 <bitstuffing+0x50>
        }
	}
	*stuff = bit_stuff_count;
 8001e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	601a      	str	r2, [r3, #0]
	return ones_count;
 8001e2a:	683b      	ldr	r3, [r7, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3724      	adds	r7, #36	; 0x24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e34:	20002648 	.word	0x20002648
 8001e38:	0800a160 	.word	0x0800a160

08001e3c <KISS_TO_HEX>:

void KISS_TO_HEX(){
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <KISS_TO_HEX+0xb4>)
 8001e44:	613b      	str	r3, [r7, #16]
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <KISS_TO_HEX+0xb8>)
 8001e48:	60fb      	str	r3, [r7, #12]

	local_UART_packet->received_byte_cnt = local_packet->byte_cnt+1;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e50:	330c      	adds	r3, #12
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	605a      	str	r2, [r3, #4]
	bool *curr_mem = local_packet->KISS_PACKET;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001e60:	60bb      	str	r3, [r7, #8]
	uint8_t curr_val;

	sprintf(uartData, "Filling HEX buffer:\n");
 8001e62:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <KISS_TO_HEX+0xbc>)
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <KISS_TO_HEX+0xc0>)
 8001e66:	4615      	mov	r5, r2
 8001e68:	461c      	mov	r4, r3
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	6028      	str	r0, [r5, #0]
 8001e6e:	6069      	str	r1, [r5, #4]
 8001e70:	60aa      	str	r2, [r5, #8]
 8001e72:	60eb      	str	r3, [r5, #12]
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	6128      	str	r0, [r5, #16]
 8001e78:	7923      	ldrb	r3, [r4, #4]
 8001e7a:	752b      	strb	r3, [r5, #20]
	debug_print_msg();
 8001e7c:	f000 fb32 	bl	80024e4 <debug_print_msg>

    for(int i = 0; i < local_UART_packet->received_byte_cnt; i++){
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e01b      	b.n	8001ebe <KISS_TO_HEX+0x82>
    	curr_val = conv_BIN_to_HEX(curr_mem+(i*8),1);
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4413      	add	r3, r2
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f8d4 	bl	8001040 <conv_BIN_to_HEX>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]

        sprintf(uartData, "HEX[%d] = %x\n",i,curr_val);
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4917      	ldr	r1, [pc, #92]	; (8001f00 <KISS_TO_HEX+0xc4>)
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <KISS_TO_HEX+0xbc>)
 8001ea4:	f006 fb70 	bl	8008588 <siprintf>
    	debug_print_msg();
 8001ea8:	f000 fb1c 	bl	80024e4 <debug_print_msg>

        local_UART_packet->HEX_KISS_PACKET[i] = curr_val;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	330e      	adds	r3, #14
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < local_UART_packet->received_byte_cnt; i++){
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbde      	blt.n	8001e86 <KISS_TO_HEX+0x4a>
    }

	sprintf(uartData, "HEX buffer filled\n");
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <KISS_TO_HEX+0xbc>)
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <KISS_TO_HEX+0xc8>)
 8001ecc:	4615      	mov	r5, r2
 8001ece:	461c      	mov	r4, r3
 8001ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed2:	6028      	str	r0, [r5, #0]
 8001ed4:	6069      	str	r1, [r5, #4]
 8001ed6:	60aa      	str	r2, [r5, #8]
 8001ed8:	60eb      	str	r3, [r5, #12]
 8001eda:	8823      	ldrh	r3, [r4, #0]
 8001edc:	78a2      	ldrb	r2, [r4, #2]
 8001ede:	822b      	strh	r3, [r5, #16]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	74ab      	strb	r3, [r5, #18]
	debug_print_msg();
 8001ee4:	f000 fafe 	bl	80024e4 <debug_print_msg>
}
 8001ee8:	bf00      	nop
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef0:	20000a44 	.word	0x20000a44
 8001ef4:	20001db0 	.word	0x20001db0
 8001ef8:	20002648 	.word	0x20002648
 8001efc:	0800a188 	.word	0x0800a188
 8001f00:	0800a1a0 	.word	0x0800a1a0
 8001f04:	0800a1b0 	.word	0x0800a1b0

08001f08 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in, bool tx_rx){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	70fb      	strb	r3, [r7, #3]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <crc_calc+0xd4>)
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
	int max_bits = (tx_rx) ? rxBit_count : rxBit_count-FCS_len;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <crc_calc+0x1e>
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <crc_calc+0xd8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	e002      	b.n	8001f2c <crc_calc+0x24>
 8001f26:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <crc_calc+0xd8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3b10      	subs	r3, #16
 8001f2c:	623b      	str	r3, [r7, #32]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
    int poly = 0x8408;             			//reverse order of 0x1021
 8001f38:	f248 4308 	movw	r3, #33800	; 0x8408
 8001f3c:	61bb      	str	r3, [r7, #24]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4053      	eors	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	105a      	asrs	r2, r3, #1
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <crc_calc+0x54>
 8001f56:	f248 4308 	movw	r3, #33800	; 0x8408
 8001f5a:	e000      	b.n	8001f5e <crc_calc+0x56>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
	*crc_ptr_in ^= poly;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	405a      	eors	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]

    //End condition
	if(*crc_count_ptr_in >= max_bits){
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a3a      	ldr	r2, [r7, #32]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dc29      	bgt.n	8001fd4 <crc_calc+0xcc>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8001f88:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001f96:	3308      	adds	r3, #8
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4911      	ldr	r1, [pc, #68]	; (8001fe4 <crc_calc+0xdc>)
 8001f9e:	4812      	ldr	r0, [pc, #72]	; (8001fe8 <crc_calc+0xe0>)
 8001fa0:	f006 faf2 	bl	8008588 <siprintf>
    	debug_print_msg();
 8001fa4:	f000 fa9e 	bl	80024e4 <debug_print_msg>
    	if(tx_rx){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <crc_calc+0xbe>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
			conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe ffb1 	bl	8000f28 <conv_HEX_to_BIN>
    	}
    	local_packet->crc = 0xFFFF;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001fcc:	3308      	adds	r3, #8
 8001fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd2:	801a      	strh	r2, [r3, #0]
    }
}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000a44 	.word	0x20000a44
 8001fe0:	20000a04 	.word	0x20000a04
 8001fe4:	0800a1c4 	.word	0x0800a1c4
 8001fe8:	20002648 	.word	0x20002648

08001fec <crc_generate>:

void crc_generate(bool tx_rx){
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <crc_generate+0x178>)
 8001ff8:	617b      	str	r3, [r7, #20]
	uint16_t * crc_ptr = &(local_packet->crc);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002000:	3308      	adds	r3, #8
 8002002:	613b      	str	r3, [r7, #16]
	int * crc_count_ptr = &(local_packet->crc_count);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800200a:	330c      	adds	r3, #12
 800200c:	60fb      	str	r3, [r7, #12]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002014:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 800201c:	4a52      	ldr	r2, [pc, #328]	; (8002168 <crc_generate+0x17c>)
 800201e:	4b53      	ldr	r3, [pc, #332]	; (800216c <crc_generate+0x180>)
 8002020:	4615      	mov	r5, r2
 8002022:	461c      	mov	r4, r3
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	6028      	str	r0, [r5, #0]
 8002028:	6069      	str	r1, [r5, #4]
 800202a:	60aa      	str	r2, [r5, #8]
 800202c:	60eb      	str	r3, [r5, #12]
 800202e:	cc03      	ldmia	r4!, {r0, r1}
 8002030:	6128      	str	r0, [r5, #16]
 8002032:	6169      	str	r1, [r5, #20]
 8002034:	8823      	ldrh	r3, [r4, #0]
 8002036:	78a2      	ldrb	r2, [r4, #2]
 8002038:	832b      	strh	r3, [r5, #24]
 800203a:	4613      	mov	r3, r2
 800203c:	76ab      	strb	r3, [r5, #26]
	debug_print_msg();
 800203e:	f000 fa51 	bl	80024e4 <debug_print_msg>

	//Calculate CRC for address
	curr_mem = (local_packet->address);//start at MS Byte(LSB)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002048:	3310      	adds	r3, #16
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60bb      	str	r3, [r7, #8]
	for(int i = 0;i<address_len;i++){
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	e010      	b.n	8002076 <crc_generate+0x8a>
		crc_calc((int)local_packet->address[i],crc_ptr,crc_count_ptr,tx_rx);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800205a:	3310      	adds	r3, #16
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	f7ff ff4c 	bl	8001f08 <crc_calc>
	for(int i = 0;i<address_len;i++){
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3301      	adds	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	2b6f      	cmp	r3, #111	; 0x6f
 800207a:	ddeb      	ble.n	8002054 <crc_generate+0x68>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002082:	3314      	adds	r3, #20
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < control_len; i++){
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	e010      	b.n	80020b0 <crc_generate+0xc4>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr,tx_rx);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002094:	3314      	adds	r3, #20
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	6939      	ldr	r1, [r7, #16]
 80020a6:	f7ff ff2f 	bl	8001f08 <crc_calc>
	for(int i = 0; i < control_len; i++){
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	3301      	adds	r3, #1
 80020ae:	623b      	str	r3, [r7, #32]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	ddeb      	ble.n	800208e <crc_generate+0xa2>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80020bc:	3318      	adds	r3, #24
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < PID_len; i++){
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e010      	b.n	80020ea <crc_generate+0xfe>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr,tx_rx);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80020ce:	3318      	adds	r3, #24
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	f7ff ff12 	bl	8001f08 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2b07      	cmp	r3, #7
 80020ee:	ddeb      	ble.n	80020c8 <crc_generate+0xdc>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80020f6:	331c      	adds	r3, #28
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
	for(int i = 0;i<local_packet->Info_Len;i++){
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e010      	b.n	8002124 <crc_generate+0x138>
		crc_calc((int)local_packet->Info[i],crc_ptr,crc_count_ptr,tx_rx);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002108:	331c      	adds	r3, #28
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	6939      	ldr	r1, [r7, #16]
 800211a:	f7ff fef5 	bl	8001f08 <crc_calc>
	for(int i = 0;i<local_packet->Info_Len;i++){
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	429a      	cmp	r2, r3
 8002130:	dbe7      	blt.n	8002102 <crc_generate+0x116>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <crc_generate+0x184>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <crc_generate+0x188>)
 800213a:	480b      	ldr	r0, [pc, #44]	; (8002168 <crc_generate+0x17c>)
 800213c:	f006 fa24 	bl	8008588 <siprintf>
	debug_print_msg();
 8002140:	f000 f9d0 	bl	80024e4 <debug_print_msg>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	490b      	ldr	r1, [pc, #44]	; (8002178 <crc_generate+0x18c>)
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <crc_generate+0x17c>)
 800214e:	f006 fa1b 	bl	8008588 <siprintf>
	debug_print_msg();
 8002152:	f000 f9c7 	bl	80024e4 <debug_print_msg>
	*crc_count_ptr = 0;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bdb0      	pop	{r4, r5, r7, pc}
 8002164:	20000a44 	.word	0x20000a44
 8002168:	20002648 	.word	0x20002648
 800216c:	0800a1e4 	.word	0x0800a1e4
 8002170:	20000a04 	.word	0x20000a04
 8002174:	0800a200 	.word	0x0800a200
 8002178:	0800a210 	.word	0x0800a210

0800217c <crc_check>:

bool crc_check(){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <crc_check+0x5c>)
 8002184:	607b      	str	r3, [r7, #4]
	local_packet->check_crc = true;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800218c:	3310      	adds	r3, #16
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
	uint16_t fcs_val = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	807b      	strh	r3, [r7, #2]
	bool valid_crc = false;
 8002196:	2300      	movs	r3, #0
 8002198:	707b      	strb	r3, [r7, #1]

	fcs_val = conv_BIN_to_HEX(local_packet->FCS,0);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80021a0:	3304      	adds	r3, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe ff4a 	bl	8001040 <conv_BIN_to_HEX>
 80021ac:	4603      	mov	r3, r0
 80021ae:	807b      	strh	r3, [r7, #2]

	//generate crc
	crc_generate(false);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff ff1b 	bl	8001fec <crc_generate>

	//compare crc
	valid_crc = (local_packet->crc==fcs_val) ? true : false;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80021bc:	3308      	adds	r3, #8
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	707b      	strb	r3, [r7, #1]
	return valid_crc;
 80021cc:	787b      	ldrb	r3, [r7, #1]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000a44 	.word	0x20000a44

080021dc <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]

	//Set hardware properly
	mode = modeStart;
 80021e6:	4a06      	ldr	r2, [pc, #24]	; (8002200 <initProgram+0x24>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	7013      	strb	r3, [r2, #0]
	setHardwareMode(modeStart);
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f808 	bl	8002204 <setHardwareMode>

	init_UART();
 80021f4:	f001 f9b2 	bl	800355c <init_UART>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200032ec 	.word	0x200032ec

08002204 <setHardwareMode>:

void setHardwareMode(int set_mode) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

	//Set mode
	mode = set_mode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <setHardwareMode+0xc8>)
 800221a:	701a      	strb	r2, [r3, #0]

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800221c:	2100      	movs	r1, #0
 800221e:	482c      	ldr	r0, [pc, #176]	; (80022d0 <setHardwareMode+0xcc>)
 8002220:	f002 fb12 	bl	8004848 <HAL_DAC_Stop_DMA>
	midbit = false;
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <setHardwareMode+0xd0>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

	//Stop Timers the Correct Way
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800222a:	2100      	movs	r1, #0
 800222c:	482a      	ldr	r0, [pc, #168]	; (80022d8 <setHardwareMode+0xd4>)
 800222e:	f004 f897 	bl	8006360 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim3);
 8002232:	482a      	ldr	r0, [pc, #168]	; (80022dc <setHardwareMode+0xd8>)
 8002234:	f003 ff8b 	bl	800614e <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8002238:	4829      	ldr	r0, [pc, #164]	; (80022e0 <setHardwareMode+0xdc>)
 800223a:	f003 ff88 	bl	800614e <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 800223e:	2100      	movs	r1, #0
 8002240:	4828      	ldr	r0, [pc, #160]	; (80022e4 <setHardwareMode+0xe0>)
 8002242:	f004 f9c5 	bl	80065d0 <HAL_TIM_IC_Stop_IT>

	//Zero Timers
	htim2.Instance->CNT = 0;
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <setHardwareMode+0xd4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 800224e:	4b23      	ldr	r3, [pc, #140]	; (80022dc <setHardwareMode+0xd8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
	htim5.Instance->CNT = 0;
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <setHardwareMode+0xe0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

	//Transmission Mode
	if (mode) {
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <setHardwareMode+0xc8>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d014      	beq.n	8002290 <setHardwareMode+0x8c>

		//Set Timer Auto Reload Settings
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <setHardwareMode+0xd4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <setHardwareMode+0xd8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
		htim4.Instance->ARR = TIM4_AUTORELOAD_TX_LOW;
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <setHardwareMode+0xdc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	226c      	movs	r2, #108	; 0x6c
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <setHardwareMode+0xe0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c

		//Start Timers the Correct Way
		HAL_TIM_Base_Start(&htim4);
 8002288:	4815      	ldr	r0, [pc, #84]	; (80022e0 <setHardwareMode+0xdc>)
 800228a:	f003 ff3c 	bl	8006106 <HAL_TIM_Base_Start>

//		//Start Timers the Correct Way
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
	}
}
 800228e:	e019      	b.n	80022c4 <setHardwareMode+0xc0>
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <setHardwareMode+0xd4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <setHardwareMode+0xd8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
		htim4.Instance->ARR = TIM4_AUTORELOAD_RX;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <setHardwareMode+0xdc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_RX;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <setHardwareMode+0xe0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f04f 32ff 	mov.w	r2, #4294967295
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80022b4:	2100      	movs	r1, #0
 80022b6:	4808      	ldr	r0, [pc, #32]	; (80022d8 <setHardwareMode+0xd4>)
 80022b8:	f003 ffce 	bl	8006258 <HAL_TIM_OC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	4809      	ldr	r0, [pc, #36]	; (80022e4 <setHardwareMode+0xe0>)
 80022c0:	f004 f91e 	bl	8006500 <HAL_TIM_IC_Start_IT>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200032ec 	.word	0x200032ec
 80022d0:	200032f0 	.word	0x200032f0
 80022d4:	20000a08 	.word	0x20000a08
 80022d8:	20003304 	.word	0x20003304
 80022dc:	2000324c 	.word	0x2000324c
 80022e0:	20003e10 	.word	0x20003e10
 80022e4:	2000320c 	.word	0x2000320c

080022e8 <loadBitBuffer>:
 * 11001110
 * 11001110
 */

bool bufffull = false;
int loadBitBuffer(bool bit_val) {
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
	if(canWrite){
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <loadBitBuffer+0x6c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01e      	beq.n	8002338 <loadBitBuffer+0x50>
		bitBuffer[bitSaveCount] = bit_val;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <loadBitBuffer+0x70>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <loadBitBuffer+0x74>)
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	5453      	strb	r3, [r2, r1]
		bitSaveCount++;
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <loadBitBuffer+0x70>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <loadBitBuffer+0x70>)
 8002310:	801a      	strh	r2, [r3, #0]
		if (bitSaveCount >= RX_BUFFERSIZE) {
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <loadBitBuffer+0x70>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f640 225e 	movw	r2, #2654	; 0xa5e
 800231a:	4293      	cmp	r3, r2
 800231c:	d902      	bls.n	8002324 <loadBitBuffer+0x3c>
			canWrite = false;
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <loadBitBuffer+0x6c>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
		}

		//Buffer is full
		if(bitSaveCount == bitReadCount){
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <loadBitBuffer+0x70>)
 8002326:	881a      	ldrh	r2, [r3, #0]
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <loadBitBuffer+0x78>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d106      	bne.n	800233e <loadBitBuffer+0x56>
			canWrite = false;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <loadBitBuffer+0x6c>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e002      	b.n	800233e <loadBitBuffer+0x56>
		}
	} else {
		bufffull = true;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <loadBitBuffer+0x7c>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <loadBitBuffer+0x80>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
	return bitSaveCount;
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <loadBitBuffer+0x70>)
 8002346:	881b      	ldrh	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20000010 	.word	0x20000010
 8002358:	20000a0c 	.word	0x20000a0c
 800235c:	20003384 	.word	0x20003384
 8002360:	20000a0e 	.word	0x20000a0e
 8002364:	20000a09 	.word	0x20000a09
 8002368:	20000a0b 	.word	0x20000a0b

0800236c <resetBitBuffer>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void resetBitBuffer(){
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
	bitReadCount = 0;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <resetBitBuffer+0x2c>)
 8002372:	2200      	movs	r2, #0
 8002374:	801a      	strh	r2, [r3, #0]
	bitSaveCount = 0;
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <resetBitBuffer+0x30>)
 8002378:	2200      	movs	r2, #0
 800237a:	801a      	strh	r2, [r3, #0]

	canRead  = false;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <resetBitBuffer+0x34>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	canWrite = true;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <resetBitBuffer+0x38>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]

	bufffull = false;
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <resetBitBuffer+0x3c>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	20000a0e 	.word	0x20000a0e
 800239c:	20000a0c 	.word	0x20000a0c
 80023a0:	20000a0b 	.word	0x20000a0b
 80023a4:	20000010 	.word	0x20000010
 80023a8:	20000a09 	.word	0x20000a09

080023ac <bitToAudio>:
		sprintf(uartData, "sinArray[%d] = %d\n",i,sinArray[i]);
		debug_print_msg();
	}
}

int bitToAudio(bool *bitStream, int arraySize, bool direction,int wave_start) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71fb      	strb	r3, [r7, #7]
	bool changeFreq;
	int waveoffset = wave_start;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < arraySize; i++) {
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e072      	b.n	80024ac <bitToAudio+0x100>
		//Check if freq needs to be changed for NRZI
		if(direction){
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <bitToAudio+0x2c>
			changeFreq = bitStream[i];
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	77fb      	strb	r3, [r7, #31]
 80023d6:	e007      	b.n	80023e8 <bitToAudio+0x3c>
		} else {
			changeFreq = bitStream[arraySize - i - 1];
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	77fb      	strb	r3, [r7, #31]

		//NRZ
		//freqSelect = !changeFreq;

		//NRZI
		freqSelect = (changeFreq) ? freqSelect : !freqSelect;
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <bitToAudio+0x52>
 80023ee:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <bitToAudio+0x118>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e00c      	b.n	8002418 <bitToAudio+0x6c>
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <bitToAudio+0x118>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f083 0301 	eor.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <bitToAudio+0x118>)
 800241a:	7013      	strb	r3, [r2, #0]

		HAL_GPIO_WritePin(GPIOB, D4_Pin, changeFreq);
 800241c:	7ffb      	ldrb	r3, [r7, #31]
 800241e:	461a      	mov	r2, r3
 8002420:	2120      	movs	r1, #32
 8002422:	4829      	ldr	r0, [pc, #164]	; (80024c8 <bitToAudio+0x11c>)
 8002424:	f003 f8d8 	bl	80055d8 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(GPIOB, D4_Pin, freqSelect);

		if (freqSelect) {
 8002428:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <bitToAudio+0x118>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <bitToAudio+0x94>
			htim4.Instance->ARR = TIM4_AUTORELOAD_TX_HIGH;
 8002430:	4b26      	ldr	r3, [pc, #152]	; (80024cc <bitToAudio+0x120>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	223b      	movs	r2, #59	; 0x3b
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * HIGHF) / (1.0 * LOWF);
 8002438:	f240 2326 	movw	r3, #550	; 0x226
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e006      	b.n	800244e <bitToAudio+0xa2>
		}
		else {
			htim4.Instance->ARR = TIM4_AUTORELOAD_TX_LOW;
 8002440:	4b22      	ldr	r3, [pc, #136]	; (80024cc <bitToAudio+0x120>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	226c      	movs	r2, #108	; 0x6c
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * LOWF) / (1.0 * LOWF);
 8002448:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800244c:	61bb      	str	r3, [r7, #24]
		}

		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <bitToAudio+0x124>)
 8002454:	441a      	add	r2, r3
 8002456:	2300      	movs	r3, #0
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800245e:	2100      	movs	r1, #0
 8002460:	481c      	ldr	r0, [pc, #112]	; (80024d4 <bitToAudio+0x128>)
 8002462:	f002 f943 	bl	80046ec <HAL_DAC_Start_DMA>
		htim3.Instance->CNT = 0;
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <bitToAudio+0x12c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 800246e:	481a      	ldr	r0, [pc, #104]	; (80024d8 <bitToAudio+0x12c>)
 8002470:	f003 fe98 	bl	80061a4 <HAL_TIM_Base_Start_IT>

		//Calculate ending point for wave
		wave_start = (wave_start+waveoffset+1)%FREQ_SAMP;
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	3301      	adds	r3, #1
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <bitToAudio+0x130>)
 800247e:	fb82 1203 	smull	r1, r2, r2, r3
 8002482:	1151      	asrs	r1, r2, #5
 8002484:	17da      	asrs	r2, r3, #31
 8002486:	1a8a      	subs	r2, r1, r2
 8002488:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800248c:	fb01 f202 	mul.w	r2, r1, r2
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	603b      	str	r3, [r7, #0]

		midbit = true;
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <bitToAudio+0x134>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
		while (midbit){
 800249a:	e000      	b.n	800249e <bitToAudio+0xf2>
			//In the future this leaves the CPU free for scheduling or something
			__NOP();
 800249c:	bf00      	nop
		while (midbit){
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <bitToAudio+0x134>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1fa      	bne.n	800249c <bitToAudio+0xf0>
	for (int i = 0; i < arraySize; i++) {
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	db88      	blt.n	80023c6 <bitToAudio+0x1a>
		}

	}

	HAL_TIM_Base_Stop(&htim3);
 80024b4:	4808      	ldr	r0, [pc, #32]	; (80024d8 <bitToAudio+0x12c>)
 80024b6:	f003 fe4a 	bl	800614e <HAL_TIM_Base_Stop>
	return wave_start;
 80024ba:	683b      	ldr	r3, [r7, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000a0a 	.word	0x20000a0a
 80024c8:	40020400 	.word	0x40020400
 80024cc:	20003e10 	.word	0x20003e10
 80024d0:	20000014 	.word	0x20000014
 80024d4:	200032f0 	.word	0x200032f0
 80024d8:	2000324c 	.word	0x2000324c
 80024dc:	1b4e81b5 	.word	0x1b4e81b5
 80024e0:	20000a08 	.word	0x20000a08

080024e4 <debug_print_msg>:
 *  Created on: Nov 1, 2020
 *      Author: monke
 */
#include "debug.h"

void debug_print_msg(){
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
	if(debug_printing){
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <print_AX25>:

//Printing Packets
//****************************************************************************************************************
void print_AX25(){
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	b091      	sub	sp, #68	; 0x44
 80024f8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80024fa:	4baf      	ldr	r3, [pc, #700]	; (80027b8 <print_AX25+0x2c4>)
 80024fc:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002504:	330c      	adds	r3, #12
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [LSB:MSB]\n");
 800250a:	4bac      	ldr	r3, [pc, #688]	; (80027bc <print_AX25+0x2c8>)
 800250c:	4aac      	ldr	r2, [pc, #688]	; (80027c0 <print_AX25+0x2cc>)
 800250e:	4614      	mov	r4, r2
 8002510:	469c      	mov	ip, r3
 8002512:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002516:	4665      	mov	r5, ip
 8002518:	4626      	mov	r6, r4
 800251a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800251c:	6028      	str	r0, [r5, #0]
 800251e:	6069      	str	r1, [r5, #4]
 8002520:	60aa      	str	r2, [r5, #8]
 8002522:	60eb      	str	r3, [r5, #12]
 8002524:	3410      	adds	r4, #16
 8002526:	f10c 0c10 	add.w	ip, ip, #16
 800252a:	4574      	cmp	r4, lr
 800252c:	d1f3      	bne.n	8002516 <print_AX25+0x22>
 800252e:	4663      	mov	r3, ip
 8002530:	4622      	mov	r2, r4
 8002532:	6810      	ldr	r0, [r2, #0]
 8002534:	6018      	str	r0, [r3, #0]
 8002536:	8891      	ldrh	r1, [r2, #4]
 8002538:	7992      	ldrb	r2, [r2, #6]
 800253a:	8099      	strh	r1, [r3, #4]
 800253c:	719a      	strb	r2, [r3, #6]
	debug_print_msg();
 800253e:	f7ff ffd1 	bl	80024e4 <debug_print_msg>

	//Print Address Field
	curr_mem = local_packet->AX25_PACKET;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Output byte at a time
	for(int i = 0;i<address_len/8;i++){
 8002546:	2300      	movs	r3, #0
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
 800254a:	e028      	b.n	800259e <print_AX25+0xaa>

		sprintf(uartData, "Address Field %d =",i+1);
 800254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254e:	3301      	adds	r3, #1
 8002550:	461a      	mov	r2, r3
 8002552:	499c      	ldr	r1, [pc, #624]	; (80027c4 <print_AX25+0x2d0>)
 8002554:	4899      	ldr	r0, [pc, #612]	; (80027bc <print_AX25+0x2c8>)
 8002556:	f006 f817 	bl	8008588 <siprintf>
		debug_print_msg();
 800255a:	f7ff ffc3 	bl	80024e4 <debug_print_msg>

		for(int j = 0;j<8;j++){
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
 8002562:	e00d      	b.n	8002580 <print_AX25+0x8c>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002568:	4413      	add	r3, r2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4996      	ldr	r1, [pc, #600]	; (80027c8 <print_AX25+0x2d4>)
 8002570:	4892      	ldr	r0, [pc, #584]	; (80027bc <print_AX25+0x2c8>)
 8002572:	f006 f809 	bl	8008588 <siprintf>
			debug_print_msg();
 8002576:	f7ff ffb5 	bl	80024e4 <debug_print_msg>
		for(int j = 0;j<8;j++){
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	3301      	adds	r3, #1
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	2b07      	cmp	r3, #7
 8002584:	ddee      	ble.n	8002564 <print_AX25+0x70>
		}
		curr_mem += 8;
 8002586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002588:	3308      	adds	r3, #8
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
		sprintf(uartData, "\n");
 800258c:	4a8b      	ldr	r2, [pc, #556]	; (80027bc <print_AX25+0x2c8>)
 800258e:	4b8f      	ldr	r3, [pc, #572]	; (80027cc <print_AX25+0x2d8>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8002594:	f7ff ffa6 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	3301      	adds	r3, #1
 800259c:	63bb      	str	r3, [r7, #56]	; 0x38
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	2b0d      	cmp	r3, #13
 80025a2:	ddd3      	ble.n	800254c <print_AX25+0x58>
	}

	//Check if address is stuffed
	if(local_packet->stuffed_address>0){
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80025aa:	3310      	adds	r3, #16
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	dd34      	ble.n	800261c <print_AX25+0x128>
		sprintf(uartData, "Stuffed Address:");
 80025b2:	4a82      	ldr	r2, [pc, #520]	; (80027bc <print_AX25+0x2c8>)
 80025b4:	4b86      	ldr	r3, [pc, #536]	; (80027d0 <print_AX25+0x2dc>)
 80025b6:	4615      	mov	r5, r2
 80025b8:	461c      	mov	r4, r3
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	6028      	str	r0, [r5, #0]
 80025be:	6069      	str	r1, [r5, #4]
 80025c0:	60aa      	str	r2, [r5, #8]
 80025c2:	60eb      	str	r3, [r5, #12]
 80025c4:	7823      	ldrb	r3, [r4, #0]
 80025c6:	742b      	strb	r3, [r5, #16]
		debug_print_msg();
 80025c8:	f7ff ff8c 	bl	80024e4 <debug_print_msg>

		for(int i = 0;i<local_packet->stuffed_address;i++){
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
 80025d0:	e00d      	b.n	80025ee <print_AX25+0xfa>
			sprintf(uartData, "%d",*(curr_mem+i));
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	497d      	ldr	r1, [pc, #500]	; (80027d4 <print_AX25+0x2e0>)
 80025de:	4877      	ldr	r0, [pc, #476]	; (80027bc <print_AX25+0x2c8>)
 80025e0:	f005 ffd2 	bl	8008588 <siprintf>
			debug_print_msg();
 80025e4:	f7ff ff7e 	bl	80024e4 <debug_print_msg>
		for(int i = 0;i<local_packet->stuffed_address;i++){
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	3301      	adds	r3, #1
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80025f4:	3310      	adds	r3, #16
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dbe9      	blt.n	80025d2 <print_AX25+0xde>
		}
		sprintf(uartData, "\n");
 80025fe:	4a6f      	ldr	r2, [pc, #444]	; (80027bc <print_AX25+0x2c8>)
 8002600:	4b72      	ldr	r3, [pc, #456]	; (80027cc <print_AX25+0x2d8>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8002606:	f7ff ff6d 	bl	80024e4 <debug_print_msg>

		curr_mem+=local_packet->stuffed_address;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002610:	3310      	adds	r3, #16
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002618:	4413      	add	r3, r2
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	//Print Control Field
	sprintf(uartData, "Control Field   =");
 800261c:	4a67      	ldr	r2, [pc, #412]	; (80027bc <print_AX25+0x2c8>)
 800261e:	4b6e      	ldr	r3, [pc, #440]	; (80027d8 <print_AX25+0x2e4>)
 8002620:	4615      	mov	r5, r2
 8002622:	461c      	mov	r4, r3
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	6028      	str	r0, [r5, #0]
 8002628:	6069      	str	r1, [r5, #4]
 800262a:	60aa      	str	r2, [r5, #8]
 800262c:	60eb      	str	r3, [r5, #12]
 800262e:	8823      	ldrh	r3, [r4, #0]
 8002630:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002632:	f7ff ff57 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002636:	2300      	movs	r3, #0
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263a:	e00d      	b.n	8002658 <print_AX25+0x164>
		sprintf(uartData, " %d ",*(curr_mem+i));
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4960      	ldr	r1, [pc, #384]	; (80027c8 <print_AX25+0x2d4>)
 8002648:	485c      	ldr	r0, [pc, #368]	; (80027bc <print_AX25+0x2c8>)
 800264a:	f005 ff9d 	bl	8008588 <siprintf>
		debug_print_msg();
 800264e:	f7ff ff49 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	3301      	adds	r3, #1
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	2b07      	cmp	r3, #7
 800265c:	ddee      	ble.n	800263c <print_AX25+0x148>
	}
	sprintf(uartData, "\n");
 800265e:	4a57      	ldr	r2, [pc, #348]	; (80027bc <print_AX25+0x2c8>)
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <print_AX25+0x2d8>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002666:	f7ff ff3d 	bl	80024e4 <debug_print_msg>
	curr_mem += control_len;//Subtract 8 to start at the flag start
 800266a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266c:	3308      	adds	r3, #8
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Check if control is stuffed
	if(local_packet->stuffed_control>0){
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002676:	3314      	adds	r3, #20
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	dd34      	ble.n	80026e8 <print_AX25+0x1f4>
		sprintf(uartData, "Stuffed Control:");
 800267e:	4a4f      	ldr	r2, [pc, #316]	; (80027bc <print_AX25+0x2c8>)
 8002680:	4b56      	ldr	r3, [pc, #344]	; (80027dc <print_AX25+0x2e8>)
 8002682:	4615      	mov	r5, r2
 8002684:	461c      	mov	r4, r3
 8002686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002688:	6028      	str	r0, [r5, #0]
 800268a:	6069      	str	r1, [r5, #4]
 800268c:	60aa      	str	r2, [r5, #8]
 800268e:	60eb      	str	r3, [r5, #12]
 8002690:	7823      	ldrb	r3, [r4, #0]
 8002692:	742b      	strb	r3, [r5, #16]
		debug_print_msg();
 8002694:	f7ff ff26 	bl	80024e4 <debug_print_msg>

		for(int i = 0;i<local_packet->stuffed_control;i++){
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
 800269c:	e00d      	b.n	80026ba <print_AX25+0x1c6>
			sprintf(uartData, "%d",*(curr_mem+i));
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	494a      	ldr	r1, [pc, #296]	; (80027d4 <print_AX25+0x2e0>)
 80026aa:	4844      	ldr	r0, [pc, #272]	; (80027bc <print_AX25+0x2c8>)
 80026ac:	f005 ff6c 	bl	8008588 <siprintf>
			debug_print_msg();
 80026b0:	f7ff ff18 	bl	80024e4 <debug_print_msg>
		for(int i = 0;i<local_packet->stuffed_control;i++){
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	3301      	adds	r3, #1
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80026c0:	3314      	adds	r3, #20
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c6:	429a      	cmp	r2, r3
 80026c8:	dbe9      	blt.n	800269e <print_AX25+0x1aa>
		}
		sprintf(uartData, "\n");
 80026ca:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <print_AX25+0x2c8>)
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <print_AX25+0x2d8>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80026d2:	f7ff ff07 	bl	80024e4 <debug_print_msg>

		curr_mem+=local_packet->stuffed_control;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80026dc:	3314      	adds	r3, #20
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e4:	4413      	add	r3, r2
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	//PID
	sprintf(uartData, "PID Field       =");
 80026e8:	4a34      	ldr	r2, [pc, #208]	; (80027bc <print_AX25+0x2c8>)
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <print_AX25+0x2ec>)
 80026ec:	4615      	mov	r5, r2
 80026ee:	461c      	mov	r4, r3
 80026f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f2:	6028      	str	r0, [r5, #0]
 80026f4:	6069      	str	r1, [r5, #4]
 80026f6:	60aa      	str	r2, [r5, #8]
 80026f8:	60eb      	str	r3, [r5, #12]
 80026fa:	8823      	ldrh	r3, [r4, #0]
 80026fc:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 80026fe:	f7ff fef1 	bl	80024e4 <debug_print_msg>

	for(int i = 0;i<8;i++){
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	e00d      	b.n	8002724 <print_AX25+0x230>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	492d      	ldr	r1, [pc, #180]	; (80027c8 <print_AX25+0x2d4>)
 8002714:	4829      	ldr	r0, [pc, #164]	; (80027bc <print_AX25+0x2c8>)
 8002716:	f005 ff37 	bl	8008588 <siprintf>
		debug_print_msg();
 800271a:	f7ff fee3 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	3301      	adds	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	2b07      	cmp	r3, #7
 8002728:	ddee      	ble.n	8002708 <print_AX25+0x214>
	}
	sprintf(uartData, "\n");
 800272a:	4a24      	ldr	r2, [pc, #144]	; (80027bc <print_AX25+0x2c8>)
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <print_AX25+0x2d8>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002732:	f7ff fed7 	bl	80024e4 <debug_print_msg>
	curr_mem += PID_len;
 8002736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002738:	3308      	adds	r3, #8
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Check if PID is stuffed
	if(local_packet->stuffed_control>0){
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002742:	3314      	adds	r3, #20
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	dd32      	ble.n	80027b0 <print_AX25+0x2bc>
		sprintf(uartData, "Stuffed PID:");
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <print_AX25+0x2c8>)
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <print_AX25+0x2f0>)
 800274e:	4614      	mov	r4, r2
 8002750:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002752:	6020      	str	r0, [r4, #0]
 8002754:	6061      	str	r1, [r4, #4]
 8002756:	60a2      	str	r2, [r4, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	7323      	strb	r3, [r4, #12]
		debug_print_msg();
 800275c:	f7ff fec2 	bl	80024e4 <debug_print_msg>

		for(int i = 0;i<local_packet->stuffed_PID;i++){
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	e00d      	b.n	8002782 <print_AX25+0x28e>
			sprintf(uartData, "%d",*(curr_mem+i));
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4918      	ldr	r1, [pc, #96]	; (80027d4 <print_AX25+0x2e0>)
 8002772:	4812      	ldr	r0, [pc, #72]	; (80027bc <print_AX25+0x2c8>)
 8002774:	f005 ff08 	bl	8008588 <siprintf>
			debug_print_msg();
 8002778:	f7ff feb4 	bl	80024e4 <debug_print_msg>
		for(int i = 0;i<local_packet->stuffed_PID;i++){
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	3301      	adds	r3, #1
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002788:	3318      	adds	r3, #24
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a3a      	ldr	r2, [r7, #32]
 800278e:	429a      	cmp	r2, r3
 8002790:	dbe9      	blt.n	8002766 <print_AX25+0x272>
		}
		sprintf(uartData, "\n");
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <print_AX25+0x2c8>)
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <print_AX25+0x2d8>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 800279a:	f7ff fea3 	bl	80024e4 <debug_print_msg>

		curr_mem+=local_packet->stuffed_PID;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80027a4:	3318      	adds	r3, #24
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ac:	4413      	add	r3, r2
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	//Print Info Field
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	e041      	b.n	800283a <print_AX25+0x346>
 80027b6:	bf00      	nop
 80027b8:	20000a44 	.word	0x20000a44
 80027bc:	20002648 	.word	0x20002648
 80027c0:	0800a224 	.word	0x0800a224
 80027c4:	0800a25c 	.word	0x0800a25c
 80027c8:	0800a270 	.word	0x0800a270
 80027cc:	0800a278 	.word	0x0800a278
 80027d0:	0800a27c 	.word	0x0800a27c
 80027d4:	0800a290 	.word	0x0800a290
 80027d8:	0800a294 	.word	0x0800a294
 80027dc:	0800a2a8 	.word	0x0800a2a8
 80027e0:	0800a2bc 	.word	0x0800a2bc
 80027e4:	0800a2d0 	.word	0x0800a2d0
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	461a      	mov	r2, r3
 80027ee:	4969      	ldr	r1, [pc, #420]	; (8002994 <print_AX25+0x4a0>)
 80027f0:	4869      	ldr	r0, [pc, #420]	; (8002998 <print_AX25+0x4a4>)
 80027f2:	f005 fec9 	bl	8008588 <siprintf>
		debug_print_msg();
 80027f6:	f7ff fe75 	bl	80024e4 <debug_print_msg>

		for(int j = 0;j<8;j++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e00d      	b.n	800281c <print_AX25+0x328>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002804:	4413      	add	r3, r2
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4964      	ldr	r1, [pc, #400]	; (800299c <print_AX25+0x4a8>)
 800280c:	4862      	ldr	r0, [pc, #392]	; (8002998 <print_AX25+0x4a4>)
 800280e:	f005 febb 	bl	8008588 <siprintf>
			debug_print_msg();
 8002812:	f7ff fe67 	bl	80024e4 <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3301      	adds	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b07      	cmp	r3, #7
 8002820:	ddee      	ble.n	8002800 <print_AX25+0x30c>
		}
		curr_mem += 8;
 8002822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002824:	3308      	adds	r3, #8
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
		sprintf(uartData, "\n");
 8002828:	4a5b      	ldr	r2, [pc, #364]	; (8002998 <print_AX25+0x4a4>)
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <print_AX25+0x4ac>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8002830:	f7ff fe58 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3301      	adds	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	da00      	bge.n	8002848 <print_AX25+0x354>
 8002846:	3307      	adds	r3, #7
 8002848:	10db      	asrs	r3, r3, #3
 800284a:	461a      	mov	r2, r3
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4293      	cmp	r3, r2
 8002850:	dbca      	blt.n	80027e8 <print_AX25+0x2f4>
	}
	//Check if INFO is stuffed
	if(local_packet->stuffed_Info>0){
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002858:	331c      	adds	r3, #28
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	dd32      	ble.n	80028c6 <print_AX25+0x3d2>
		sprintf(uartData, "Stuffed INFO:");
 8002860:	4a4d      	ldr	r2, [pc, #308]	; (8002998 <print_AX25+0x4a4>)
 8002862:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <print_AX25+0x4b0>)
 8002864:	4614      	mov	r4, r2
 8002866:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002868:	6020      	str	r0, [r4, #0]
 800286a:	6061      	str	r1, [r4, #4]
 800286c:	60a2      	str	r2, [r4, #8]
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	81a3      	strh	r3, [r4, #12]
		debug_print_msg();
 8002872:	f7ff fe37 	bl	80024e4 <debug_print_msg>

		for(int i = 0;i<local_packet->stuffed_Info;i++){
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e00d      	b.n	8002898 <print_AX25+0x3a4>
			sprintf(uartData, "%d",*(curr_mem+i));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002880:	4413      	add	r3, r2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4948      	ldr	r1, [pc, #288]	; (80029a8 <print_AX25+0x4b4>)
 8002888:	4843      	ldr	r0, [pc, #268]	; (8002998 <print_AX25+0x4a4>)
 800288a:	f005 fe7d 	bl	8008588 <siprintf>
			debug_print_msg();
 800288e:	f7ff fe29 	bl	80024e4 <debug_print_msg>
		for(int i = 0;i<local_packet->stuffed_Info;i++){
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800289e:	331c      	adds	r3, #28
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbe9      	blt.n	800287c <print_AX25+0x388>
		}
		sprintf(uartData, "\n");
 80028a8:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <print_AX25+0x4a4>)
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <print_AX25+0x4ac>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80028b0:	f7ff fe18 	bl	80024e4 <debug_print_msg>

		curr_mem+=local_packet->stuffed_Info;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80028ba:	331c      	adds	r3, #28
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	4413      	add	r3, r2
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sprintf(uartData, "FCS Field = ")	;
 80028c6:	4a34      	ldr	r2, [pc, #208]	; (8002998 <print_AX25+0x4a4>)
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <print_AX25+0x4b8>)
 80028ca:	4614      	mov	r4, r2
 80028cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028ce:	6020      	str	r0, [r4, #0]
 80028d0:	6061      	str	r1, [r4, #4]
 80028d2:	60a2      	str	r2, [r4, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 80028d8:	f7ff fe04 	bl	80024e4 <debug_print_msg>
	curr_mem = local_packet->FCS;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80028e2:	3304      	adds	r3, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0;i<FCS_len;i++){
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e00d      	b.n	800290a <print_AX25+0x416>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4928      	ldr	r1, [pc, #160]	; (800299c <print_AX25+0x4a8>)
 80028fa:	4827      	ldr	r0, [pc, #156]	; (8002998 <print_AX25+0x4a4>)
 80028fc:	f005 fe44 	bl	8008588 <siprintf>
		debug_print_msg();
 8002900:	f7ff fdf0 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<FCS_len;i++){
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	3301      	adds	r3, #1
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	ddee      	ble.n	80028ee <print_AX25+0x3fa>
	}
	sprintf(uartData, "\n");
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <print_AX25+0x4a4>)
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <print_AX25+0x4ac>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002918:	f7ff fde4 	bl	80024e4 <debug_print_msg>

	//Check if FCS is stuffed
	if(local_packet->stuffed_FCS>0){
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	dd30      	ble.n	800298a <print_AX25+0x496>
		sprintf(uartData, "Stuffed FCS:");
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <print_AX25+0x4a4>)
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <print_AX25+0x4bc>)
 800292c:	4614      	mov	r4, r2
 800292e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002930:	6020      	str	r0, [r4, #0]
 8002932:	6061      	str	r1, [r4, #4]
 8002934:	60a2      	str	r2, [r4, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	7323      	strb	r3, [r4, #12]
		debug_print_msg();
 800293a:	f7ff fdd3 	bl	80024e4 <debug_print_msg>

		for (int i = 0; i < local_packet->stuffed_FCS;i++){
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e00d      	b.n	8002960 <print_AX25+0x46c>
			sprintf(uartData, "%d",*(curr_mem+i));
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4916      	ldr	r1, [pc, #88]	; (80029a8 <print_AX25+0x4b4>)
 8002950:	4811      	ldr	r0, [pc, #68]	; (8002998 <print_AX25+0x4a4>)
 8002952:	f005 fe19 	bl	8008588 <siprintf>
			debug_print_msg();
 8002956:	f7ff fdc5 	bl	80024e4 <debug_print_msg>
		for (int i = 0; i < local_packet->stuffed_FCS;i++){
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	429a      	cmp	r2, r3
 800296c:	dbea      	blt.n	8002944 <print_AX25+0x450>
		}
		sprintf(uartData, "\n");
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <print_AX25+0x4a4>)
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <print_AX25+0x4ac>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8002976:	f7ff fdb5 	bl	80024e4 <debug_print_msg>

		curr_mem+=local_packet->stuffed_FCS;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002986:	4413      	add	r3, r2
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
}
 800298a:	bf00      	nop
 800298c:	3744      	adds	r7, #68	; 0x44
 800298e:	46bd      	mov	sp, r7
 8002990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002992:	bf00      	nop
 8002994:	0800a2e0 	.word	0x0800a2e0
 8002998:	20002648 	.word	0x20002648
 800299c:	0800a270 	.word	0x0800a270
 80029a0:	0800a278 	.word	0x0800a278
 80029a4:	0800a2f4 	.word	0x0800a2f4
 80029a8:	0800a290 	.word	0x0800a290
 80029ac:	0800a304 	.word	0x0800a304
 80029b0:	0800a314 	.word	0x0800a314

080029b4 <print_outAX25>:

void print_outAX25(){
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b08f      	sub	sp, #60	; 0x3c
 80029b8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80029ba:	4b9b      	ldr	r3, [pc, #620]	; (8002c28 <print_outAX25+0x274>)
 80029bc:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80029c4:	330c      	adds	r3, #12
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 80029ca:	4b98      	ldr	r3, [pc, #608]	; (8002c2c <print_outAX25+0x278>)
 80029cc:	4a98      	ldr	r2, [pc, #608]	; (8002c30 <print_outAX25+0x27c>)
 80029ce:	4614      	mov	r4, r2
 80029d0:	469c      	mov	ip, r3
 80029d2:	f104 0e20 	add.w	lr, r4, #32
 80029d6:	4665      	mov	r5, ip
 80029d8:	4626      	mov	r6, r4
 80029da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029dc:	6028      	str	r0, [r5, #0]
 80029de:	6069      	str	r1, [r5, #4]
 80029e0:	60aa      	str	r2, [r5, #8]
 80029e2:	60eb      	str	r3, [r5, #12]
 80029e4:	3410      	adds	r4, #16
 80029e6:	f10c 0c10 	add.w	ip, ip, #16
 80029ea:	4574      	cmp	r4, lr
 80029ec:	d1f3      	bne.n	80029d6 <print_outAX25+0x22>
 80029ee:	4662      	mov	r2, ip
 80029f0:	4623      	mov	r3, r4
 80029f2:	cb03      	ldmia	r3!, {r0, r1}
 80029f4:	6010      	str	r0, [r2, #0]
 80029f6:	6051      	str	r1, [r2, #4]
 80029f8:	8819      	ldrh	r1, [r3, #0]
 80029fa:	789b      	ldrb	r3, [r3, #2]
 80029fc:	8111      	strh	r1, [r2, #8]
 80029fe:	7293      	strb	r3, [r2, #10]
	debug_print_msg();
 8002a00:	f7ff fd70 	bl	80024e4 <debug_print_msg>
	sprintf(uartData, "AX25 FLAG = ");
 8002a04:	4a89      	ldr	r2, [pc, #548]	; (8002c2c <print_outAX25+0x278>)
 8002a06:	4b8b      	ldr	r3, [pc, #556]	; (8002c34 <print_outAX25+0x280>)
 8002a08:	4614      	mov	r4, r2
 8002a0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a0c:	6020      	str	r0, [r4, #0]
 8002a0e:	6061      	str	r1, [r4, #4]
 8002a10:	60a2      	str	r2, [r4, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 8002a16:	f7ff fd65 	bl	80024e4 <debug_print_msg>
	curr_mem = AX25TBYTE;
 8002a1a:	4b87      	ldr	r3, [pc, #540]	; (8002c38 <print_outAX25+0x284>)
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < 8; i++){
 8002a1e:	2300      	movs	r3, #0
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	e00d      	b.n	8002a40 <print_outAX25+0x8c>
		sprintf(uartData, " %d ",curr_mem[i]);
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4983      	ldr	r1, [pc, #524]	; (8002c3c <print_outAX25+0x288>)
 8002a30:	487e      	ldr	r0, [pc, #504]	; (8002c2c <print_outAX25+0x278>)
 8002a32:	f005 fda9 	bl	8008588 <siprintf>
		debug_print_msg();
 8002a36:	f7ff fd55 	bl	80024e4 <debug_print_msg>
	for(int i = 0; i < 8; i++){
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	2b07      	cmp	r3, #7
 8002a44:	ddee      	ble.n	8002a24 <print_outAX25+0x70>
	}
	sprintf(uartData, "\n");
 8002a46:	4a79      	ldr	r2, [pc, #484]	; (8002c2c <print_outAX25+0x278>)
 8002a48:	4b7d      	ldr	r3, [pc, #500]	; (8002c40 <print_outAX25+0x28c>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002a4e:	f7ff fd49 	bl	80024e4 <debug_print_msg>

	//Print Address Field
	curr_mem = local_packet->address;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002a58:	3310      	adds	r3, #16
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0;i<address_len/8;i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a62:	e028      	b.n	8002ab6 <print_outAX25+0x102>
		sprintf(uartData, "Address Field %d =",i+1);
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	3301      	adds	r3, #1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4976      	ldr	r1, [pc, #472]	; (8002c44 <print_outAX25+0x290>)
 8002a6c:	486f      	ldr	r0, [pc, #444]	; (8002c2c <print_outAX25+0x278>)
 8002a6e:	f005 fd8b 	bl	8008588 <siprintf>
		debug_print_msg();
 8002a72:	f7ff fd37 	bl	80024e4 <debug_print_msg>

		for(int j = 0;j<8;j++){
 8002a76:	2300      	movs	r3, #0
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7a:	e00d      	b.n	8002a98 <print_outAX25+0xe4>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	496d      	ldr	r1, [pc, #436]	; (8002c3c <print_outAX25+0x288>)
 8002a88:	4868      	ldr	r0, [pc, #416]	; (8002c2c <print_outAX25+0x278>)
 8002a8a:	f005 fd7d 	bl	8008588 <siprintf>
			debug_print_msg();
 8002a8e:	f7ff fd29 	bl	80024e4 <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	3301      	adds	r3, #1
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	ddee      	ble.n	8002a7c <print_outAX25+0xc8>
		}
		curr_mem += 8;
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
		sprintf(uartData, "\n");
 8002aa4:	4a61      	ldr	r2, [pc, #388]	; (8002c2c <print_outAX25+0x278>)
 8002aa6:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <print_outAX25+0x28c>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8002aac:	f7ff fd1a 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	2b0d      	cmp	r3, #13
 8002aba:	ddd3      	ble.n	8002a64 <print_outAX25+0xb0>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 8002abc:	4a5b      	ldr	r2, [pc, #364]	; (8002c2c <print_outAX25+0x278>)
 8002abe:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <print_outAX25+0x294>)
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac6:	6020      	str	r0, [r4, #0]
 8002ac8:	6061      	str	r1, [r4, #4]
 8002aca:	60a2      	str	r2, [r4, #8]
 8002acc:	60e3      	str	r3, [r4, #12]
 8002ace:	6828      	ldr	r0, [r5, #0]
 8002ad0:	6120      	str	r0, [r4, #16]
 8002ad2:	88ab      	ldrh	r3, [r5, #4]
 8002ad4:	79aa      	ldrb	r2, [r5, #6]
 8002ad6:	82a3      	strh	r3, [r4, #20]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	75a3      	strb	r3, [r4, #22]
	debug_print_msg();
 8002adc:	f7ff fd02 	bl	80024e4 <debug_print_msg>
	curr_mem += address_len;
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	3370      	adds	r3, #112	; 0x70
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
	if(local_packet->stuffed_address > 0){
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002aec:	3310      	adds	r3, #16
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	dd19      	ble.n	8002b28 <print_outAX25+0x174>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	e00e      	b.n	8002b18 <print_outAX25+0x164>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	425b      	negs	r3, r3
 8002afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	494d      	ldr	r1, [pc, #308]	; (8002c3c <print_outAX25+0x288>)
 8002b08:	4848      	ldr	r0, [pc, #288]	; (8002c2c <print_outAX25+0x278>)
 8002b0a:	f005 fd3d 	bl	8008588 <siprintf>
			debug_print_msg();
 8002b0e:	f7ff fce9 	bl	80024e4 <debug_print_msg>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	3301      	adds	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002b1e:	3310      	adds	r3, #16
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dbe8      	blt.n	8002afa <print_outAX25+0x146>
		}
	}
	sprintf(uartData, "\n");
 8002b28:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <print_outAX25+0x278>)
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <print_outAX25+0x28c>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002b30:	f7ff fcd8 	bl	80024e4 <debug_print_msg>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002b3a:	3314      	adds	r3, #20
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(uartData, "Control Field   =");
 8002b40:	4a3a      	ldr	r2, [pc, #232]	; (8002c2c <print_outAX25+0x278>)
 8002b42:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <print_outAX25+0x298>)
 8002b44:	4615      	mov	r5, r2
 8002b46:	461c      	mov	r4, r3
 8002b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4a:	6028      	str	r0, [r5, #0]
 8002b4c:	6069      	str	r1, [r5, #4]
 8002b4e:	60aa      	str	r2, [r5, #8]
 8002b50:	60eb      	str	r3, [r5, #12]
 8002b52:	8823      	ldrh	r3, [r4, #0]
 8002b54:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002b56:	f7ff fcc5 	bl	80024e4 <debug_print_msg>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	e00d      	b.n	8002b7c <print_outAX25+0x1c8>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4934      	ldr	r1, [pc, #208]	; (8002c3c <print_outAX25+0x288>)
 8002b6c:	482f      	ldr	r0, [pc, #188]	; (8002c2c <print_outAX25+0x278>)
 8002b6e:	f005 fd0b 	bl	8008588 <siprintf>
		debug_print_msg();
 8002b72:	f7ff fcb7 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	623b      	str	r3, [r7, #32]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002b82:	3314      	adds	r3, #20
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3308      	adds	r3, #8
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	dbe8      	blt.n	8002b60 <print_outAX25+0x1ac>
	}
	sprintf(uartData, "\n");
 8002b8e:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <print_outAX25+0x278>)
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <print_outAX25+0x28c>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002b96:	f7ff fca5 	bl	80024e4 <debug_print_msg>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(uartData, "PID Field       =");
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <print_outAX25+0x278>)
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <print_outAX25+0x29c>)
 8002baa:	4615      	mov	r5, r2
 8002bac:	461c      	mov	r4, r3
 8002bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb0:	6028      	str	r0, [r5, #0]
 8002bb2:	6069      	str	r1, [r5, #4]
 8002bb4:	60aa      	str	r2, [r5, #8]
 8002bb6:	60eb      	str	r3, [r5, #12]
 8002bb8:	8823      	ldrh	r3, [r4, #0]
 8002bba:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002bbc:	f7ff fc92 	bl	80024e4 <debug_print_msg>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	e00d      	b.n	8002be2 <print_outAX25+0x22e>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	491a      	ldr	r1, [pc, #104]	; (8002c3c <print_outAX25+0x288>)
 8002bd2:	4816      	ldr	r0, [pc, #88]	; (8002c2c <print_outAX25+0x278>)
 8002bd4:	f005 fcd8 	bl	8008588 <siprintf>
		debug_print_msg();
 8002bd8:	f7ff fc84 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3301      	adds	r3, #1
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002be8:	3318      	adds	r3, #24
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3308      	adds	r3, #8
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbe8      	blt.n	8002bc6 <print_outAX25+0x212>
	}
	sprintf(uartData, "\n");
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <print_outAX25+0x278>)
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <print_outAX25+0x28c>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002bfc:	f7ff fc72 	bl	80024e4 <debug_print_msg>

	sprintf(uartData, "Info Field = ");
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <print_outAX25+0x278>)
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <print_outAX25+0x2a0>)
 8002c04:	4614      	mov	r4, r2
 8002c06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c08:	6020      	str	r0, [r4, #0]
 8002c0a:	6061      	str	r1, [r4, #4]
 8002c0c:	60a2      	str	r2, [r4, #8]
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	81a3      	strh	r3, [r4, #12]
	debug_print_msg();
 8002c12:	f7ff fc67 	bl	80024e4 <debug_print_msg>
	curr_mem = local_packet->Info;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002c1c:	331c      	adds	r3, #28
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < local_packet->Info_Len;i++){
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e030      	b.n	8002c8a <print_outAX25+0x2d6>
 8002c28:	20000a44 	.word	0x20000a44
 8002c2c:	20002648 	.word	0x20002648
 8002c30:	0800a324 	.word	0x0800a324
 8002c34:	0800a350 	.word	0x0800a350
 8002c38:	20000008 	.word	0x20000008
 8002c3c:	0800a270 	.word	0x0800a270
 8002c40:	0800a278 	.word	0x0800a278
 8002c44:	0800a25c 	.word	0x0800a25c
 8002c48:	0800a360 	.word	0x0800a360
 8002c4c:	0800a294 	.word	0x0800a294
 8002c50:	0800a2bc 	.word	0x0800a2bc
 8002c54:	0800a378 	.word	0x0800a378
		if(i%8==0){
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <print_outAX25+0x2ba>
			sprintf(uartData, " \n ");
 8002c62:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <print_outAX25+0x428>)
 8002c64:	4a5e      	ldr	r2, [pc, #376]	; (8002de0 <print_outAX25+0x42c>)
 8002c66:	6810      	ldr	r0, [r2, #0]
 8002c68:	6018      	str	r0, [r3, #0]
			debug_print_msg();
 8002c6a:	f7ff fc3b 	bl	80024e4 <debug_print_msg>
		}
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c72:	4413      	add	r3, r2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	495a      	ldr	r1, [pc, #360]	; (8002de4 <print_outAX25+0x430>)
 8002c7a:	4858      	ldr	r0, [pc, #352]	; (8002ddc <print_outAX25+0x428>)
 8002c7c:	f005 fc84 	bl	8008588 <siprintf>
		debug_print_msg();
 8002c80:	f7ff fc30 	bl	80024e4 <debug_print_msg>
	for(int i = 0; i < local_packet->Info_Len;i++){
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	3301      	adds	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbdf      	blt.n	8002c58 <print_outAX25+0x2a4>
	}
	sprintf(uartData, "\n");
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <print_outAX25+0x428>)
 8002c9a:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <print_outAX25+0x434>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002ca0:	f7ff fc20 	bl	80024e4 <debug_print_msg>
	curr_mem+=local_packet->Info_Len;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	4413      	add	r3, r2
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34

	sprintf(uartData, "Stuffed Info Field = ");
 8002cb4:	4a49      	ldr	r2, [pc, #292]	; (8002ddc <print_outAX25+0x428>)
 8002cb6:	4b4d      	ldr	r3, [pc, #308]	; (8002dec <print_outAX25+0x438>)
 8002cb8:	4615      	mov	r5, r2
 8002cba:	461c      	mov	r4, r3
 8002cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cbe:	6028      	str	r0, [r5, #0]
 8002cc0:	6069      	str	r1, [r5, #4]
 8002cc2:	60aa      	str	r2, [r5, #8]
 8002cc4:	60eb      	str	r3, [r5, #12]
 8002cc6:	6820      	ldr	r0, [r4, #0]
 8002cc8:	6128      	str	r0, [r5, #16]
 8002cca:	88a3      	ldrh	r3, [r4, #4]
 8002ccc:	82ab      	strh	r3, [r5, #20]
	debug_print_msg();
 8002cce:	f7ff fc09 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<local_packet->stuffed_Info;i++){
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e018      	b.n	8002d0a <print_outAX25+0x356>
		if(i%8==0){
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <print_outAX25+0x33a>
			sprintf(uartData, " \n ");
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <print_outAX25+0x428>)
 8002ce4:	4a3e      	ldr	r2, [pc, #248]	; (8002de0 <print_outAX25+0x42c>)
 8002ce6:	6810      	ldr	r0, [r2, #0]
 8002ce8:	6018      	str	r0, [r3, #0]
			debug_print_msg();
 8002cea:	f7ff fbfb 	bl	80024e4 <debug_print_msg>
		}
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	493a      	ldr	r1, [pc, #232]	; (8002de4 <print_outAX25+0x430>)
 8002cfa:	4838      	ldr	r0, [pc, #224]	; (8002ddc <print_outAX25+0x428>)
 8002cfc:	f005 fc44 	bl	8008588 <siprintf>
		debug_print_msg();
 8002d00:	f7ff fbf0 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<local_packet->stuffed_Info;i++){
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002d10:	331c      	adds	r3, #28
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	dbde      	blt.n	8002cd8 <print_outAX25+0x324>
	}
	sprintf(uartData, "\n");
 8002d1a:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <print_outAX25+0x428>)
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <print_outAX25+0x434>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002d22:	f7ff fbdf 	bl	80024e4 <debug_print_msg>

	curr_mem = local_packet->FCS;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(uartData, "FCS Field     =");
 8002d32:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <print_outAX25+0x428>)
 8002d34:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <print_outAX25+0x43c>)
 8002d36:	4614      	mov	r4, r2
 8002d38:	461d      	mov	r5, r3
 8002d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3c:	6020      	str	r0, [r4, #0]
 8002d3e:	6061      	str	r1, [r4, #4]
 8002d40:	60a2      	str	r2, [r4, #8]
 8002d42:	60e3      	str	r3, [r4, #12]
	debug_print_msg();
 8002d44:	f7ff fbce 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e00d      	b.n	8002d6a <print_outAX25+0x3b6>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4922      	ldr	r1, [pc, #136]	; (8002de4 <print_outAX25+0x430>)
 8002d5a:	4820      	ldr	r0, [pc, #128]	; (8002ddc <print_outAX25+0x428>)
 8002d5c:	f005 fc14 	bl	8008588 <siprintf>
		debug_print_msg();
 8002d60:	f7ff fbc0 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	3301      	adds	r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3310      	adds	r3, #16
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbe9      	blt.n	8002d4e <print_outAX25+0x39a>
	}

	sprintf(uartData, "\n");
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <print_outAX25+0x428>)
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <print_outAX25+0x434>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002d82:	f7ff fbaf 	bl	80024e4 <debug_print_msg>

	sprintf(uartData, "AX25 FLAG = ");
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <print_outAX25+0x428>)
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <print_outAX25+0x440>)
 8002d8a:	4614      	mov	r4, r2
 8002d8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d8e:	6020      	str	r0, [r4, #0]
 8002d90:	6061      	str	r1, [r4, #4]
 8002d92:	60a2      	str	r2, [r4, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 8002d98:	f7ff fba4 	bl	80024e4 <debug_print_msg>
	curr_mem = AX25TBYTE;
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <print_outAX25+0x444>)
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < 8; i++){
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e00d      	b.n	8002dc2 <print_outAX25+0x40e>
		sprintf(uartData, " %d ",curr_mem[i]);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <print_outAX25+0x430>)
 8002db2:	480a      	ldr	r0, [pc, #40]	; (8002ddc <print_outAX25+0x428>)
 8002db4:	f005 fbe8 	bl	8008588 <siprintf>
		debug_print_msg();
 8002db8:	f7ff fb94 	bl	80024e4 <debug_print_msg>
	for(int i = 0; i < 8; i++){
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b07      	cmp	r3, #7
 8002dc6:	ddee      	ble.n	8002da6 <print_outAX25+0x3f2>
	}
	sprintf(uartData, "\n");
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <print_outAX25+0x428>)
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <print_outAX25+0x434>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002dd0:	f7ff fb88 	bl	80024e4 <debug_print_msg>
}
 8002dd4:	bf00      	nop
 8002dd6:	373c      	adds	r7, #60	; 0x3c
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ddc:	20002648 	.word	0x20002648
 8002de0:	0800a388 	.word	0x0800a388
 8002de4:	0800a270 	.word	0x0800a270
 8002de8:	0800a278 	.word	0x0800a278
 8002dec:	0800a38c 	.word	0x0800a38c
 8002df0:	0800a3a4 	.word	0x0800a3a4
 8002df4:	0800a350 	.word	0x0800a350
 8002df8:	20000008 	.word	0x20000008

08002dfc <print_KISS>:

void print_KISS(){
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b08d      	sub	sp, #52	; 0x34
 8002e00:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002e02:	4ba5      	ldr	r3, [pc, #660]	; (8003098 <print_KISS+0x29c>)
 8002e04:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [LSB:MSB]\n");
 8002e12:	4ba2      	ldr	r3, [pc, #648]	; (800309c <print_KISS+0x2a0>)
 8002e14:	4aa2      	ldr	r2, [pc, #648]	; (80030a0 <print_KISS+0x2a4>)
 8002e16:	4614      	mov	r4, r2
 8002e18:	469c      	mov	ip, r3
 8002e1a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002e1e:	4665      	mov	r5, ip
 8002e20:	4626      	mov	r6, r4
 8002e22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e24:	6028      	str	r0, [r5, #0]
 8002e26:	6069      	str	r1, [r5, #4]
 8002e28:	60aa      	str	r2, [r5, #8]
 8002e2a:	60eb      	str	r3, [r5, #12]
 8002e2c:	3410      	adds	r4, #16
 8002e2e:	f10c 0c10 	add.w	ip, ip, #16
 8002e32:	4574      	cmp	r4, lr
 8002e34:	d1f3      	bne.n	8002e1e <print_KISS+0x22>
 8002e36:	4663      	mov	r3, ip
 8002e38:	4622      	mov	r2, r4
 8002e3a:	6810      	ldr	r0, [r2, #0]
 8002e3c:	6018      	str	r0, [r3, #0]
 8002e3e:	8891      	ldrh	r1, [r2, #4]
 8002e40:	7992      	ldrb	r2, [r2, #6]
 8002e42:	8099      	strh	r1, [r3, #4]
 8002e44:	719a      	strb	r2, [r3, #6]
	debug_print_msg();
 8002e46:	f7ff fb4d 	bl	80024e4 <debug_print_msg>

	//Print Start Flag
	curr_mem = local_packet->KISS_PACKET;//start at the flag start
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8002e52:	4a92      	ldr	r2, [pc, #584]	; (800309c <print_KISS+0x2a0>)
 8002e54:	4b93      	ldr	r3, [pc, #588]	; (80030a4 <print_KISS+0x2a8>)
 8002e56:	4615      	mov	r5, r2
 8002e58:	461c      	mov	r4, r3
 8002e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5c:	6028      	str	r0, [r5, #0]
 8002e5e:	6069      	str	r1, [r5, #4]
 8002e60:	60aa      	str	r2, [r5, #8]
 8002e62:	60eb      	str	r3, [r5, #12]
 8002e64:	8823      	ldrh	r3, [r4, #0]
 8002e66:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002e68:	f7ff fb3c 	bl	80024e4 <debug_print_msg>

	for(int i = 0;i<8;i++){
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e70:	e00d      	b.n	8002e8e <print_KISS+0x92>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	498a      	ldr	r1, [pc, #552]	; (80030a8 <print_KISS+0x2ac>)
 8002e7e:	4887      	ldr	r0, [pc, #540]	; (800309c <print_KISS+0x2a0>)
 8002e80:	f005 fb82 	bl	8008588 <siprintf>
		debug_print_msg();
 8002e84:	f7ff fb2e 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2b07      	cmp	r3, #7
 8002e92:	ddee      	ble.n	8002e72 <print_KISS+0x76>
	}
	sprintf(uartData, "\n");
 8002e94:	4a81      	ldr	r2, [pc, #516]	; (800309c <print_KISS+0x2a0>)
 8002e96:	4b85      	ldr	r3, [pc, #532]	; (80030ac <print_KISS+0x2b0>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002e9c:	f7ff fb22 	bl	80024e4 <debug_print_msg>

	//Print address
	curr_mem = local_packet->address;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	e028      	b.n	8002f04 <print_KISS+0x108>
		sprintf(uartData, "Address Field %d =",i+1);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	497d      	ldr	r1, [pc, #500]	; (80030b0 <print_KISS+0x2b4>)
 8002eba:	4878      	ldr	r0, [pc, #480]	; (800309c <print_KISS+0x2a0>)
 8002ebc:	f005 fb64 	bl	8008588 <siprintf>
		debug_print_msg();
 8002ec0:	f7ff fb10 	bl	80024e4 <debug_print_msg>

		for(int j = 0;j<8;j++){
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	e00d      	b.n	8002ee6 <print_KISS+0xea>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ece:	4413      	add	r3, r2
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4974      	ldr	r1, [pc, #464]	; (80030a8 <print_KISS+0x2ac>)
 8002ed6:	4871      	ldr	r0, [pc, #452]	; (800309c <print_KISS+0x2a0>)
 8002ed8:	f005 fb56 	bl	8008588 <siprintf>
			debug_print_msg();
 8002edc:	f7ff fb02 	bl	80024e4 <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	ddee      	ble.n	8002eca <print_KISS+0xce>
		}
		curr_mem += 8;
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	3308      	adds	r3, #8
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	; (800309c <print_KISS+0x2a0>)
 8002ef4:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <print_KISS+0x2b0>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8002efa:	f7ff faf3 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	3301      	adds	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	2b0d      	cmp	r3, #13
 8002f08:	ddd3      	ble.n	8002eb2 <print_KISS+0xb6>
	}

	//Print Control Field
	curr_mem = (local_packet->control);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002f10:	3314      	adds	r3, #20
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002f16:	4a61      	ldr	r2, [pc, #388]	; (800309c <print_KISS+0x2a0>)
 8002f18:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <print_KISS+0x2b8>)
 8002f1a:	4615      	mov	r5, r2
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f20:	6028      	str	r0, [r5, #0]
 8002f22:	6069      	str	r1, [r5, #4]
 8002f24:	60aa      	str	r2, [r5, #8]
 8002f26:	60eb      	str	r3, [r5, #12]
 8002f28:	8823      	ldrh	r3, [r4, #0]
 8002f2a:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002f2c:	f7ff fada 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	e00d      	b.n	8002f52 <print_KISS+0x156>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3a:	4413      	add	r3, r2
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4959      	ldr	r1, [pc, #356]	; (80030a8 <print_KISS+0x2ac>)
 8002f42:	4856      	ldr	r0, [pc, #344]	; (800309c <print_KISS+0x2a0>)
 8002f44:	f005 fb20 	bl	8008588 <siprintf>
		debug_print_msg();
 8002f48:	f7ff facc 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	ddee      	ble.n	8002f36 <print_KISS+0x13a>
	}
	sprintf(uartData, "\n");
 8002f58:	4a50      	ldr	r2, [pc, #320]	; (800309c <print_KISS+0x2a0>)
 8002f5a:	4b54      	ldr	r3, [pc, #336]	; (80030ac <print_KISS+0x2b0>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002f60:	f7ff fac0 	bl	80024e4 <debug_print_msg>

	//PID
	curr_mem = (local_packet->PID);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002f70:	4a4a      	ldr	r2, [pc, #296]	; (800309c <print_KISS+0x2a0>)
 8002f72:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <print_KISS+0x2bc>)
 8002f74:	4615      	mov	r5, r2
 8002f76:	461c      	mov	r4, r3
 8002f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7a:	6028      	str	r0, [r5, #0]
 8002f7c:	6069      	str	r1, [r5, #4]
 8002f7e:	60aa      	str	r2, [r5, #8]
 8002f80:	60eb      	str	r3, [r5, #12]
 8002f82:	8823      	ldrh	r3, [r4, #0]
 8002f84:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002f86:	f7ff faad 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e00d      	b.n	8002fac <print_KISS+0x1b0>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f94:	4413      	add	r3, r2
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4943      	ldr	r1, [pc, #268]	; (80030a8 <print_KISS+0x2ac>)
 8002f9c:	483f      	ldr	r0, [pc, #252]	; (800309c <print_KISS+0x2a0>)
 8002f9e:	f005 faf3 	bl	8008588 <siprintf>
		debug_print_msg();
 8002fa2:	f7ff fa9f 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	ddee      	ble.n	8002f90 <print_KISS+0x194>
	}
	sprintf(uartData, "\n");
 8002fb2:	4a3a      	ldr	r2, [pc, #232]	; (800309c <print_KISS+0x2a0>)
 8002fb4:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <print_KISS+0x2b0>)
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002fba:	f7ff fa93 	bl	80024e4 <debug_print_msg>

	//Print Info Field
	curr_mem = local_packet->Info;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002fc4:	331c      	adds	r3, #28
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e028      	b.n	8003022 <print_KISS+0x226>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4939      	ldr	r1, [pc, #228]	; (80030bc <print_KISS+0x2c0>)
 8002fd8:	4830      	ldr	r0, [pc, #192]	; (800309c <print_KISS+0x2a0>)
 8002fda:	f005 fad5 	bl	8008588 <siprintf>
		debug_print_msg();
 8002fde:	f7ff fa81 	bl	80024e4 <debug_print_msg>

		for(int j = 0;j<8;j++){
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e00d      	b.n	8003004 <print_KISS+0x208>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fec:	4413      	add	r3, r2
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	492d      	ldr	r1, [pc, #180]	; (80030a8 <print_KISS+0x2ac>)
 8002ff4:	4829      	ldr	r0, [pc, #164]	; (800309c <print_KISS+0x2a0>)
 8002ff6:	f005 fac7 	bl	8008588 <siprintf>
			debug_print_msg();
 8002ffa:	f7ff fa73 	bl	80024e4 <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3301      	adds	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b07      	cmp	r3, #7
 8003008:	ddee      	ble.n	8002fe8 <print_KISS+0x1ec>
		}
		curr_mem += 8;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	3308      	adds	r3, #8
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8003010:	4a22      	ldr	r2, [pc, #136]	; (800309c <print_KISS+0x2a0>)
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <print_KISS+0x2b0>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8003018:	f7ff fa64 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da00      	bge.n	8003030 <print_KISS+0x234>
 800302e:	3307      	adds	r3, #7
 8003030:	10db      	asrs	r3, r3, #3
 8003032:	461a      	mov	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4293      	cmp	r3, r2
 8003038:	dbca      	blt.n	8002fd0 <print_KISS+0x1d4>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 8003042:	4a16      	ldr	r2, [pc, #88]	; (800309c <print_KISS+0x2a0>)
 8003044:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <print_KISS+0x2c4>)
 8003046:	4615      	mov	r5, r2
 8003048:	461c      	mov	r4, r3
 800304a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304c:	6028      	str	r0, [r5, #0]
 800304e:	6069      	str	r1, [r5, #4]
 8003050:	60aa      	str	r2, [r5, #8]
 8003052:	60eb      	str	r3, [r5, #12]
 8003054:	8823      	ldrh	r3, [r4, #0]
 8003056:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8003058:	f7ff fa44 	bl	80024e4 <debug_print_msg>

	for(int i = 0;i<8;i++){
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e00d      	b.n	800307e <print_KISS+0x282>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	490e      	ldr	r1, [pc, #56]	; (80030a8 <print_KISS+0x2ac>)
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <print_KISS+0x2a0>)
 8003070:	f005 fa8a 	bl	8008588 <siprintf>
		debug_print_msg();
 8003074:	f7ff fa36 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b07      	cmp	r3, #7
 8003082:	ddee      	ble.n	8003062 <print_KISS+0x266>
	}
	sprintf(uartData, "\n");
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <print_KISS+0x2a0>)
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <print_KISS+0x2b0>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800308c:	f7ff fa2a 	bl	80024e4 <debug_print_msg>

}
 8003090:	bf00      	nop
 8003092:	3734      	adds	r7, #52	; 0x34
 8003094:	46bd      	mov	sp, r7
 8003096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003098:	20000a44 	.word	0x20000a44
 800309c:	20002648 	.word	0x20002648
 80030a0:	0800a3b4 	.word	0x0800a3b4
 80030a4:	0800a3ec 	.word	0x0800a3ec
 80030a8:	0800a270 	.word	0x0800a270
 80030ac:	0800a278 	.word	0x0800a278
 80030b0:	0800a25c 	.word	0x0800a25c
 80030b4:	0800a294 	.word	0x0800a294
 80030b8:	0800a2bc 	.word	0x0800a2bc
 80030bc:	0800a2e0 	.word	0x0800a2e0
 80030c0:	0800a400 	.word	0x0800a400

080030c4 <print_array_octet>:
	debug_print_msg();
}
//****************************************************************************************************************
//End of compare buffers

void print_array_octet(bool* array,int array_size){
 80030c4:	b5b0      	push	{r4, r5, r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
	sprintf(uartData, "Printing array:\n");
 80030ce:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <print_array_octet+0xb4>)
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <print_array_octet+0xb8>)
 80030d2:	4615      	mov	r5, r2
 80030d4:	461c      	mov	r4, r3
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	6028      	str	r0, [r5, #0]
 80030da:	6069      	str	r1, [r5, #4]
 80030dc:	60aa      	str	r2, [r5, #8]
 80030de:	60eb      	str	r3, [r5, #12]
 80030e0:	7823      	ldrb	r3, [r4, #0]
 80030e2:	742b      	strb	r3, [r5, #16]
	debug_print_msg();
 80030e4:	f7ff f9fe 	bl	80024e4 <debug_print_msg>

	//Byte at a time
	for(int i = 0;i<array_size/8;i++){
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	e027      	b.n	800313e <print_array_octet+0x7a>
		sprintf(uartData, "Byte %d:",i);
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4923      	ldr	r1, [pc, #140]	; (8003180 <print_array_octet+0xbc>)
 80030f2:	4821      	ldr	r0, [pc, #132]	; (8003178 <print_array_octet+0xb4>)
 80030f4:	f005 fa48 	bl	8008588 <siprintf>
		debug_print_msg();
 80030f8:	f7ff f9f4 	bl	80024e4 <debug_print_msg>

		//Print each bit
		for(int j = 0;j<8;j++){
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	e011      	b.n	8003126 <print_array_octet+0x62>
			sprintf(uartData, " %d ",*(array+(i*8)+j));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	491b      	ldr	r1, [pc, #108]	; (8003184 <print_array_octet+0xc0>)
 8003116:	4818      	ldr	r0, [pc, #96]	; (8003178 <print_array_octet+0xb4>)
 8003118:	f005 fa36 	bl	8008588 <siprintf>
			debug_print_msg();
 800311c:	f7ff f9e2 	bl	80024e4 <debug_print_msg>
		for(int j = 0;j<8;j++){
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3301      	adds	r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b07      	cmp	r3, #7
 800312a:	ddea      	ble.n	8003102 <print_array_octet+0x3e>
		}
		sprintf(uartData, "\n");
 800312c:	4a12      	ldr	r2, [pc, #72]	; (8003178 <print_array_octet+0xb4>)
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <print_array_octet+0xc4>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 8003134:	f7ff f9d6 	bl	80024e4 <debug_print_msg>
	for(int i = 0;i<array_size/8;i++){
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	da00      	bge.n	8003146 <print_array_octet+0x82>
 8003144:	3307      	adds	r3, #7
 8003146:	10db      	asrs	r3, r3, #3
 8003148:	461a      	mov	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4293      	cmp	r3, r2
 800314e:	dbce      	blt.n	80030ee <print_array_octet+0x2a>
	}

	sprintf(uartData, "Finished Printing Array\n");
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <print_array_octet+0xb4>)
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <print_array_octet+0xc8>)
 8003154:	4615      	mov	r5, r2
 8003156:	461c      	mov	r4, r3
 8003158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315a:	6028      	str	r0, [r5, #0]
 800315c:	6069      	str	r1, [r5, #4]
 800315e:	60aa      	str	r2, [r5, #8]
 8003160:	60eb      	str	r3, [r5, #12]
 8003162:	cc03      	ldmia	r4!, {r0, r1}
 8003164:	6128      	str	r0, [r5, #16]
 8003166:	6169      	str	r1, [r5, #20]
 8003168:	7823      	ldrb	r3, [r4, #0]
 800316a:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 800316c:	f7ff f9ba 	bl	80024e4 <debug_print_msg>
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bdb0      	pop	{r4, r5, r7, pc}
 8003178:	20002648 	.word	0x20002648
 800317c:	0800a53c 	.word	0x0800a53c
 8003180:	0800a550 	.word	0x0800a550
 8003184:	0800a270 	.word	0x0800a270
 8003188:	0800a278 	.word	0x0800a278
 800318c:	0800a55c 	.word	0x0800a55c

08003190 <Tim2_OC_Callback>:
int byteArray[8];
bool got_flag_start = false;
bool got_flag_end = false;

//Timer 2 Output Compare Callback
void Tim2_OC_Callback(){
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
	static int save_cnt;
	static int flag_cnt;
	bool isFlag = false;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA,D1_Pin,clk_sync);
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <Tim2_OC_Callback+0x220>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031a4:	4883      	ldr	r0, [pc, #524]	; (80033b4 <Tim2_OC_Callback+0x224>)
 80031a6:	f002 fa17 	bl	80055d8 <HAL_GPIO_WritePin>

	freq_pin_state_last = hold_state;
 80031aa:	4b83      	ldr	r3, [pc, #524]	; (80033b8 <Tim2_OC_Callback+0x228>)
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	4b83      	ldr	r3, [pc, #524]	; (80033bc <Tim2_OC_Callback+0x22c>)
 80031b0:	701a      	strb	r2, [r3, #0]

	//Check if this is valid data
	if(clk_sync){
 80031b2:	4b7f      	ldr	r3, [pc, #508]	; (80033b0 <Tim2_OC_Callback+0x220>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80dc 	beq.w	8003374 <Tim2_OC_Callback+0x1e4>
		NRZI = (freq_pin_state_curr==freq_pin_state_last) ? 1 : 0;
 80031bc:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <Tim2_OC_Callback+0x230>)
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <Tim2_OC_Callback+0x22c>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4b7d      	ldr	r3, [pc, #500]	; (80033c4 <Tim2_OC_Callback+0x234>)
 80031d0:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA,D0_Pin,NRZI);
 80031d2:	4b7c      	ldr	r3, [pc, #496]	; (80033c4 <Tim2_OC_Callback+0x234>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031dc:	4875      	ldr	r0, [pc, #468]	; (80033b4 <Tim2_OC_Callback+0x224>)
 80031de:	f002 f9fb 	bl	80055d8 <HAL_GPIO_WritePin>

		//Shift byte array for next comparison
//		memmove(&byteArray[1],&byteArray[0],7*sizeof(int));
		for(int i = 7;i>0;i--){
 80031e2:	2307      	movs	r3, #7
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e00b      	b.n	8003200 <Tim2_OC_Callback+0x70>
			byteArray[i] = byteArray[i-1];
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	4a76      	ldr	r2, [pc, #472]	; (80033c8 <Tim2_OC_Callback+0x238>)
 80031ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031f2:	4975      	ldr	r1, [pc, #468]	; (80033c8 <Tim2_OC_Callback+0x238>)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 7;i>0;i--){
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dcf0      	bgt.n	80031e8 <Tim2_OC_Callback+0x58>
		}

		byteArray[0] = NRZI;
 8003206:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <Tim2_OC_Callback+0x234>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b6e      	ldr	r3, [pc, #440]	; (80033c8 <Tim2_OC_Callback+0x238>)
 800320e:	601a      	str	r2, [r3, #0]
		//11111100
		//01111110


		//Check if this is the flag
		for (int i = 0; i < 8; i++) {
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e014      	b.n	8003240 <Tim2_OC_Callback+0xb0>
			if(byteArray[i] != AX25TBYTE[i]){
 8003216:	4a6c      	ldr	r2, [pc, #432]	; (80033c8 <Tim2_OC_Callback+0x238>)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321e:	496b      	ldr	r1, [pc, #428]	; (80033cc <Tim2_OC_Callback+0x23c>)
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	440a      	add	r2, r1
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	4293      	cmp	r3, r2
 8003228:	d002      	beq.n	8003230 <Tim2_OC_Callback+0xa0>
				isFlag = false;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]
				break;
 800322e:	e00a      	b.n	8003246 <Tim2_OC_Callback+0xb6>
			}
			//Got to end of byte array
			if(i==7){
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b07      	cmp	r3, #7
 8003234:	d101      	bne.n	800323a <Tim2_OC_Callback+0xaa>
				isFlag = true;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 8; i++) {
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3301      	adds	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b07      	cmp	r3, #7
 8003244:	dde7      	ble.n	8003216 <Tim2_OC_Callback+0x86>
			}
		}
		//If this is not a flag, copy the values into the buffer pointer
		if(isFlag){
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d023      	beq.n	8003294 <Tim2_OC_Callback+0x104>
			flag_cnt++;
 800324c:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <Tim2_OC_Callback+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	4a5f      	ldr	r2, [pc, #380]	; (80033d0 <Tim2_OC_Callback+0x240>)
 8003254:	6013      	str	r3, [r2, #0]

			//If we have a start flag, this is an end flag
			if(got_flag_start){
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <Tim2_OC_Callback+0x244>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <Tim2_OC_Callback+0xdc>
				got_flag_start = false;
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <Tim2_OC_Callback+0x244>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
				got_flag_end = true;
 8003264:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <Tim2_OC_Callback+0x248>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e010      	b.n	800328e <Tim2_OC_Callback+0xfe>
			}

			//Not sure how many appending flags????????
			else if(flag_cnt>=FLAG_END_COUNT){
 800326c:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <Tim2_OC_Callback+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	dd0c      	ble.n	800328e <Tim2_OC_Callback+0xfe>
				//If no start flag has occurred
				if(!got_flag_start){
 8003274:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <Tim2_OC_Callback+0x244>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <Tim2_OC_Callback+0xf8>
					got_flag_start = true;
 8003282:	4b54      	ldr	r3, [pc, #336]	; (80033d4 <Tim2_OC_Callback+0x244>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
				}

				//Reset flag count
				flag_cnt = 0;
 8003288:	4b51      	ldr	r3, [pc, #324]	; (80033d0 <Tim2_OC_Callback+0x240>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
			}

			//Reset flag var
			isFlag = false;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
 8003292:	e011      	b.n	80032b8 <Tim2_OC_Callback+0x128>
		}

		else if(got_flag_start){
 8003294:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <Tim2_OC_Callback+0x244>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <Tim2_OC_Callback+0x128>
			HAL_GPIO_TogglePin(GPIOB,D2_Pin);
 800329c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032a0:	484e      	ldr	r0, [pc, #312]	; (80033dc <Tim2_OC_Callback+0x24c>)
 80032a2:	f002 f9b2 	bl	800560a <HAL_GPIO_TogglePin>
			//Load the processed bit into the buffer
			save_cnt = loadBitBuffer(NRZI)+1;
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <Tim2_OC_Callback+0x234>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f81c 	bl	80022e8 <loadBitBuffer>
 80032b0:	4603      	mov	r3, r0
 80032b2:	3301      	adds	r3, #1
 80032b4:	4a4a      	ldr	r2, [pc, #296]	; (80033e0 <Tim2_OC_Callback+0x250>)
 80032b6:	6013      	str	r3, [r2, #0]
		}

		//Found ending flag, now need to process bit buffer
		if(got_flag_end){
 80032b8:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <Tim2_OC_Callback+0x248>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d04b      	beq.n	8003358 <Tim2_OC_Callback+0x1c8>
			got_flag_end = false;
 80032c0:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <Tim2_OC_Callback+0x248>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB,D3_Pin);
 80032c6:	2110      	movs	r1, #16
 80032c8:	4844      	ldr	r0, [pc, #272]	; (80033dc <Tim2_OC_Callback+0x24c>)
 80032ca:	f002 f99e 	bl	800560a <HAL_GPIO_TogglePin>

			//Disable Interrupts for data processing
			HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80032ce:	2100      	movs	r1, #0
 80032d0:	4844      	ldr	r0, [pc, #272]	; (80033e4 <Tim2_OC_Callback+0x254>)
 80032d2:	f003 f845 	bl	8006360 <HAL_TIM_OC_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 80032d6:	2100      	movs	r1, #0
 80032d8:	4843      	ldr	r0, [pc, #268]	; (80033e8 <Tim2_OC_Callback+0x258>)
 80032da:	f003 f979 	bl	80065d0 <HAL_TIM_IC_Stop_IT>

			//Buffer will be filled with ending flags, dont want this in ax.25 buffer
			save_cnt -= FLAG_SIZE;
 80032de:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <Tim2_OC_Callback+0x250>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3b08      	subs	r3, #8
 80032e4:	4a3e      	ldr	r2, [pc, #248]	; (80033e0 <Tim2_OC_Callback+0x250>)
 80032e6:	6013      	str	r3, [r2, #0]
			rxBit_count = save_cnt;//Must be before remove_bit_stuffing
 80032e8:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <Tim2_OC_Callback+0x250>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <Tim2_OC_Callback+0x25c>)
 80032ee:	6013      	str	r3, [r2, #0]

//			sprintf(uartData, "byte_cnt = %d\n",global_packet.byte_cnt);
//			debug_print_msg();

			memcpy(global_packet.AX25_PACKET,bitBuffer,save_cnt);
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <Tim2_OC_Callback+0x250>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	493e      	ldr	r1, [pc, #248]	; (80033f0 <Tim2_OC_Callback+0x260>)
 80032f8:	483e      	ldr	r0, [pc, #248]	; (80033f4 <Tim2_OC_Callback+0x264>)
 80032fa:	f005 f919 	bl	8008530 <memcpy>

//			compareBoolBuffers(bitBuffer,global_packet.AX25_PACKET,rxBit_count);

			sprintf(uartData, "rxBit_count (before bit destuff) = %d\n",rxBit_count);
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <Tim2_OC_Callback+0x25c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	493c      	ldr	r1, [pc, #240]	; (80033f8 <Tim2_OC_Callback+0x268>)
 8003306:	483d      	ldr	r0, [pc, #244]	; (80033fc <Tim2_OC_Callback+0x26c>)
 8003308:	f005 f93e 	bl	8008588 <siprintf>
			debug_print_msg();
 800330c:	f7ff f8ea 	bl	80024e4 <debug_print_msg>

			remove_bit_stuffing();
 8003310:	f7fe f93e 	bl	8001590 <remove_bit_stuffing>

			sprintf(uartData, "rxBit_count (after bit destuff) = %d\n",rxBit_count);
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <Tim2_OC_Callback+0x25c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4939      	ldr	r1, [pc, #228]	; (8003400 <Tim2_OC_Callback+0x270>)
 800331c:	4837      	ldr	r0, [pc, #220]	; (80033fc <Tim2_OC_Callback+0x26c>)
 800331e:	f005 f933 	bl	8008588 <siprintf>
			debug_print_msg();
 8003322:	f7ff f8df 	bl	80024e4 <debug_print_msg>


			global_packet.byte_cnt = rxBit_count/8;
 8003326:	4b31      	ldr	r3, [pc, #196]	; (80033ec <Tim2_OC_Callback+0x25c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	da00      	bge.n	8003330 <Tim2_OC_Callback+0x1a0>
 800332e:	3307      	adds	r3, #7
 8003330:	10db      	asrs	r3, r3, #3
 8003332:	461a      	mov	r2, r3
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <Tim2_OC_Callback+0x264>)
 8003336:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800333a:	330c      	adds	r3, #12
 800333c:	601a      	str	r2, [r3, #0]

			//Receive data
			receiving_AX25();
 800333e:	f7fe f8e7 	bl	8001510 <receiving_AX25>

			save_cnt = 0;
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <Tim2_OC_Callback+0x250>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

			//Enable Interrupts since data processing is complete
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8003348:	2100      	movs	r1, #0
 800334a:	4826      	ldr	r0, [pc, #152]	; (80033e4 <Tim2_OC_Callback+0x254>)
 800334c:	f002 ff84 	bl	8006258 <HAL_TIM_OC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8003350:	2100      	movs	r1, #0
 8003352:	4825      	ldr	r0, [pc, #148]	; (80033e8 <Tim2_OC_Callback+0x258>)
 8003354:	f003 f8d4 	bl	8006500 <HAL_TIM_IC_Start_IT>
		}

		//Prepare OC for next sample
		uint32_t this_capture = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <Tim2_OC_Callback+0x254>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	60bb      	str	r3, [r7, #8]
		uint32_t next_sampl = this_capture + bit_sample_period;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8003366:	3335      	adds	r3, #53	; 0x35
 8003368:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,next_sampl); // if we have not received a transition to the input capture module, we want to refresh the output compare module with the last known bit period
 800336a:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <Tim2_OC_Callback+0x254>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
 8003372:	e008      	b.n	8003386 <Tim2_OC_Callback+0x1f6>
	}

	//Clock not syncd
	else
	{
		got_flag_start = false;
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <Tim2_OC_Callback+0x244>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
		got_flag_end = false;
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <Tim2_OC_Callback+0x248>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
		flag_cnt = 0;
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <Tim2_OC_Callback+0x240>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
	}

	//Inc number of bits since last clock sync
	captured_bits_count++;
 8003386:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <Tim2_OC_Callback+0x274>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <Tim2_OC_Callback+0x274>)
 8003390:	701a      	strb	r2, [r3, #0]
	if(captured_bits_count >= samp_per_bit * no_clk_max_cnt){
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <Tim2_OC_Callback+0x274>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b3f      	cmp	r3, #63	; 0x3f
 8003398:	d902      	bls.n	80033a0 <Tim2_OC_Callback+0x210>
		clk_sync = false;	//Clock is no longer sync
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <Tim2_OC_Callback+0x220>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
	}
	hold_state = freq_pin_state_curr;
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <Tim2_OC_Callback+0x230>)
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <Tim2_OC_Callback+0x228>)
 80033a6:	701a      	strb	r2, [r3, #0]

	return;
 80033a8:	bf00      	nop
}
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000a11 	.word	0x20000a11
 80033b4:	40020000 	.word	0x40020000
 80033b8:	20003de4 	.word	0x20003de4
 80033bc:	20000a23 	.word	0x20000a23
 80033c0:	20000a22 	.word	0x20000a22
 80033c4:	20003dec 	.word	0x20003dec
 80033c8:	20003df0 	.word	0x20003df0
 80033cc:	20000008 	.word	0x20000008
 80033d0:	20000a28 	.word	0x20000a28
 80033d4:	20000a24 	.word	0x20000a24
 80033d8:	20000a25 	.word	0x20000a25
 80033dc:	40020400 	.word	0x40020400
 80033e0:	20000a2c 	.word	0x20000a2c
 80033e4:	20003304 	.word	0x20003304
 80033e8:	2000320c 	.word	0x2000320c
 80033ec:	20000a04 	.word	0x20000a04
 80033f0:	20003384 	.word	0x20003384
 80033f4:	20000a44 	.word	0x20000a44
 80033f8:	0800a578 	.word	0x0800a578
 80033fc:	20002648 	.word	0x20002648
 8003400:	0800a5a0 	.word	0x0800a5a0
 8003404:	20000a10 	.word	0x20000a10

08003408 <Tim3_IT_Callback>:
void Tim3_IT_Callback() {
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	if (mode) {
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <Tim3_IT_Callback+0x1c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <Tim3_IT_Callback+0x12>
		midbit = false;
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <Tim3_IT_Callback+0x20>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
	}
	//Timer 3 does nothing in RX
	else {}
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	200032ec 	.word	0x200032ec
 8003428:	20000a08 	.word	0x20000a08

0800342c <Tim5_IC_Callback>:
//Timer 5 Input Capture Callback
void Tim5_IC_Callback(){
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
	uint32_t this_capture = 0;		// simply stores either the rising or falling capture, based on which state we are in (avoids duplicate code)
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]

	//Grap pin state for OC timer
	freq_pin_state_curr = signal_edge;
 8003436:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <Tim5_IC_Callback+0x104>)
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <Tim5_IC_Callback+0x108>)
 800343c:	701a      	strb	r2, [r3, #0]

	//Rising Edge
	if (signal_edge)
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <Tim5_IC_Callback+0x104>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01f      	beq.n	8003486 <Tim5_IC_Callback+0x5a>
	{
		rising_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1); //Time-stamp interrupt
 8003446:	2100      	movs	r1, #0
 8003448:	483b      	ldr	r0, [pc, #236]	; (8003538 <Tim5_IC_Callback+0x10c>)
 800344a:	f003 fbed 	bl	8006c28 <HAL_TIM_ReadCapturedValue>
 800344e:	4602      	mov	r2, r0
 8003450:	4b3a      	ldr	r3, [pc, #232]	; (800353c <Tim5_IC_Callback+0x110>)
 8003452:	601a      	str	r2, [r3, #0]
		signal_edge = FALLING_EDGE;		// look for falling edge on next capture
 8003454:	4b36      	ldr	r3, [pc, #216]	; (8003530 <Tim5_IC_Callback+0x104>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
		rise_captured = true;
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <Tim5_IC_Callback+0x114>)
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 8003460:	4b37      	ldr	r3, [pc, #220]	; (8003540 <Tim5_IC_Callback+0x114>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02d      	beq.n	80034c4 <Tim5_IC_Callback+0x98>
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <Tim5_IC_Callback+0x118>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d029      	beq.n	80034c4 <Tim5_IC_Callback+0x98>
		{
			capture_difference = rising_capture - falling_capture;		// calculate difference
 8003470:	4b32      	ldr	r3, [pc, #200]	; (800353c <Tim5_IC_Callback+0x110>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b34      	ldr	r3, [pc, #208]	; (8003548 <Tim5_IC_Callback+0x11c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	4a34      	ldr	r2, [pc, #208]	; (800354c <Tim5_IC_Callback+0x120>)
 800347c:	6013      	str	r3, [r2, #0]
			this_capture = rising_capture;		// set current sample to rising edge
 800347e:	4b2f      	ldr	r3, [pc, #188]	; (800353c <Tim5_IC_Callback+0x110>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e01e      	b.n	80034c4 <Tim5_IC_Callback+0x98>
	}

	//Falling edge
	else
	{
		falling_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);		//Time-stamp interrupt
 8003486:	2100      	movs	r1, #0
 8003488:	482b      	ldr	r0, [pc, #172]	; (8003538 <Tim5_IC_Callback+0x10c>)
 800348a:	f003 fbcd 	bl	8006c28 <HAL_TIM_ReadCapturedValue>
 800348e:	4602      	mov	r2, r0
 8003490:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <Tim5_IC_Callback+0x11c>)
 8003492:	601a      	str	r2, [r3, #0]
		fall_captured = true;
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <Tim5_IC_Callback+0x118>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
		signal_edge = RISING_EDGE;		// look for rising edge on next capture
 800349a:	4b25      	ldr	r3, [pc, #148]	; (8003530 <Tim5_IC_Callback+0x104>)
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <Tim5_IC_Callback+0x114>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <Tim5_IC_Callback+0x98>
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <Tim5_IC_Callback+0x118>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d009      	beq.n	80034c4 <Tim5_IC_Callback+0x98>
		{
			capture_difference = falling_capture - rising_capture;		// calculate difference
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <Tim5_IC_Callback+0x11c>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b21      	ldr	r3, [pc, #132]	; (800353c <Tim5_IC_Callback+0x110>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	4a24      	ldr	r2, [pc, #144]	; (800354c <Tim5_IC_Callback+0x120>)
 80034bc:	6013      	str	r3, [r2, #0]
			this_capture = falling_capture;
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <Tim5_IC_Callback+0x11c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	607b      	str	r3, [r7, #4]
		}
	}

	//Have now captured the transition period
	//Can use this to align sampling clock
	if (rise_captured && fall_captured)
 80034c4:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <Tim5_IC_Callback+0x114>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02d      	beq.n	8003528 <Tim5_IC_Callback+0xfc>
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <Tim5_IC_Callback+0x118>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d029      	beq.n	8003528 <Tim5_IC_Callback+0xfc>
	{
		//Check if the transition was a valid transition period to use
		if(SYMBOL_PERIOD-SYMBOL_MARGIN < capture_difference && capture_difference < SYMBOL_PERIOD+SYMBOL_MARGIN){
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <Tim5_IC_Callback+0x120>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f247 5230 	movw	r2, #30000	; 0x7530
 80034dc:	4293      	cmp	r3, r2
 80034de:	d923      	bls.n	8003528 <Tim5_IC_Callback+0xfc>
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <Tim5_IC_Callback+0x120>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f648 7239 	movw	r2, #36665	; 0x8f39
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d81d      	bhi.n	8003528 <Tim5_IC_Callback+0xfc>

			//Predict clock
			uint32_t next_sampl;

			//If clk was not sync, start sample one period later
			if(!clk_sync){
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <Tim5_IC_Callback+0x124>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f083 0301 	eor.w	r3, r3, #1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <Tim5_IC_Callback+0xde>
				resetBitBuffer();
 80034fa:	f7fe ff37 	bl	800236c <resetBitBuffer>
				next_sampl = this_capture + SYMBOL_PERIOD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8003504:	3335      	adds	r3, #53	; 0x35
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	e004      	b.n	8003514 <Tim5_IC_Callback+0xe8>
			}
			//If clk was sync, sample at normal interval
			else {
				next_sampl = this_capture + bit_sample_period;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8003510:	3335      	adds	r3, #53	; 0x35
 8003512:	603b      	str	r3, [r7, #0]
			}
			//Prepare OC timer int
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_sampl);
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <Tim5_IC_Callback+0x128>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	635a      	str	r2, [r3, #52]	; 0x34
			//Reset roll-over value
			captured_bits_count = 0;
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <Tim5_IC_Callback+0x12c>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]

			//Have now synced with clock
			clk_sync = true;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <Tim5_IC_Callback+0x124>)
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000011 	.word	0x20000011
 8003534:	20000a22 	.word	0x20000a22
 8003538:	2000320c 	.word	0x2000320c
 800353c:	20000a14 	.word	0x20000a14
 8003540:	20000a20 	.word	0x20000a20
 8003544:	20000a21 	.word	0x20000a21
 8003548:	20000a18 	.word	0x20000a18
 800354c:	20000a1c 	.word	0x20000a1c
 8003550:	20000a11 	.word	0x20000a11
 8003554:	20003304 	.word	0x20003304
 8003558:	20000a10 	.word	0x20000a10

0800355c <init_UART>:

void init_UART(){
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8003560:	2201      	movs	r2, #1
 8003562:	4909      	ldr	r1, [pc, #36]	; (8003588 <init_UART+0x2c>)
 8003564:	4809      	ldr	r0, [pc, #36]	; (800358c <init_UART+0x30>)
 8003566:	f004 f967 	bl	8007838 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <init_UART+0x34>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <init_UART+0x34>)
 8003572:	2200      	movs	r2, #0
 8003574:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <init_UART+0x34>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <init_UART+0x34>)
 800357e:	2200      	movs	r2, #0
 8003580:	605a      	str	r2, [r3, #4]
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20001dbc 	.word	0x20001dbc
 800358c:	20003344 	.word	0x20003344
 8003590:	20001db0 	.word	0x20001db0

08003594 <UART2_Exception_Callback>:
void UART2_Exception_Callback(){
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 8003598:	2201      	movs	r2, #1
 800359a:	4919      	ldr	r1, [pc, #100]	; (8003600 <UART2_Exception_Callback+0x6c>)
 800359c:	4819      	ldr	r0, [pc, #100]	; (8003604 <UART2_Exception_Callback+0x70>)
 800359e:	f004 f94b 	bl	8007838 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 80035a2:	4b19      	ldr	r3, [pc, #100]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035aa:	7b1b      	ldrb	r3, [r3, #12]
 80035ac:	2bc0      	cmp	r3, #192	; 0xc0
 80035ae:	d104      	bne.n	80035ba <UART2_Exception_Callback+0x26>
		  UART_packet.flags++;
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	3301      	adds	r3, #1
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035b8:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <UART2_Exception_Callback+0x78>)
 80035c2:	4413      	add	r3, r2
 80035c4:	4a10      	ldr	r2, [pc, #64]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035c6:	7b12      	ldrb	r2, [r2, #12]
 80035c8:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035d2:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	dd0f      	ble.n	80035fc <UART2_Exception_Callback+0x68>
		  setHardwareMode(1);
 80035dc:	2001      	movs	r0, #1
 80035de:	f7fe fe11 	bl	8002204 <setHardwareMode>
		  UART_packet.got_packet = true;
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a06      	ldr	r2, [pc, #24]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035ee:	6053      	str	r3, [r2, #4]



		  UART_packet.flags = 0;
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
		  UART_packet.rx_cnt=0;
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <UART2_Exception_Callback+0x74>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

	  }
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20001dbc 	.word	0x20001dbc
 8003604:	20003344 	.word	0x20003344
 8003608:	20001db0 	.word	0x20001db0
 800360c:	20001dbe 	.word	0x20001dbe

08003610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003614:	f000 fea2 	bl	800435c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003618:	f000 f818 	bl	800364c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800361c:	f000 fa88 	bl	8003b30 <MX_GPIO_Init>
  MX_DMA_Init();
 8003620:	f000 fa5e 	bl	8003ae0 <MX_DMA_Init>
  MX_DAC_Init();
 8003624:	f000 f87e 	bl	8003724 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8003628:	f000 fa28 	bl	8003a7c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800362c:	f000 f9b6 	bl	800399c <MX_TIM5_Init>
  MX_TIM2_Init();
 8003630:	f000 f8a2 	bl	8003778 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003634:	f000 f916 	bl	8003864 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003638:	f000 f962 	bl	8003900 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	uart_gpio_init();
 800363c:	f000 fb7a 	bl	8003d34 <uart_gpio_init>
	initProgram(false);
 8003640:	2000      	movs	r0, #0
 8003642:	f7fe fdcb 	bl	80021dc <initProgram>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		tx_rx();
 8003646:	f7fd fd47 	bl	80010d8 <tx_rx>
 800364a:	e7fc      	b.n	8003646 <main+0x36>

0800364c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b094      	sub	sp, #80	; 0x50
 8003650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	2234      	movs	r2, #52	; 0x34
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f004 ff8c 	bl	8008578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <SystemClock_Config+0xd0>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <SystemClock_Config+0xd0>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	6413      	str	r3, [r2, #64]	; 0x40
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <SystemClock_Config+0xd0>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800368c:	2300      	movs	r3, #0
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <SystemClock_Config+0xd4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003698:	4a21      	ldr	r2, [pc, #132]	; (8003720 <SystemClock_Config+0xd4>)
 800369a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <SystemClock_Config+0xd4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036ac:	2302      	movs	r3, #2
 80036ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036b0:	2301      	movs	r3, #1
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036b4:	2310      	movs	r3, #16
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b8:	2302      	movs	r3, #2
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036bc:	2300      	movs	r3, #0
 80036be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036c0:	2308      	movs	r3, #8
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80036c4:	2350      	movs	r3, #80	; 0x50
 80036c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036c8:	2302      	movs	r3, #2
 80036ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80036cc:	2302      	movs	r3, #2
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036d0:	2302      	movs	r3, #2
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d4:	f107 031c 	add.w	r3, r7, #28
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 fa8f 	bl	8005bfc <HAL_RCC_OscConfig>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80036e4:	f000 fb4e 	bl	8003d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036e8:	230f      	movs	r3, #15
 80036ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ec:	2302      	movs	r3, #2
 80036ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036fe:	f107 0308 	add.w	r3, r7, #8
 8003702:	2102      	movs	r1, #2
 8003704:	4618      	mov	r0, r3
 8003706:	f001 ffbf 	bl	8005688 <HAL_RCC_ClockConfig>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003710:	f000 fb38 	bl	8003d84 <Error_Handler>
  }
}
 8003714:	bf00      	nop
 8003716:	3750      	adds	r7, #80	; 0x50
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000

08003724 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800372a:	463b      	mov	r3, r7
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <MX_DAC_Init+0x4c>)
 8003734:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <MX_DAC_Init+0x50>)
 8003736:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003738:	480d      	ldr	r0, [pc, #52]	; (8003770 <MX_DAC_Init+0x4c>)
 800373a:	f000 ffb4 	bl	80046a6 <HAL_DAC_Init>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003744:	f000 fb1e 	bl	8003d84 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8003748:	232c      	movs	r3, #44	; 0x2c
 800374a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800374c:	2300      	movs	r3, #0
 800374e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003750:	463b      	mov	r3, r7
 8003752:	2200      	movs	r2, #0
 8003754:	4619      	mov	r1, r3
 8003756:	4806      	ldr	r0, [pc, #24]	; (8003770 <MX_DAC_Init+0x4c>)
 8003758:	f001 f8d5 	bl	8004906 <HAL_DAC_ConfigChannel>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003762:	f000 fb0f 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200032f0 	.word	0x200032f0
 8003774:	40007400 	.word	0x40007400

08003778 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	; 0x38
 800377c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800377e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378c:	f107 0320 	add.w	r3, r7, #32
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
 80037a4:	615a      	str	r2, [r3, #20]
 80037a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80037b0:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037be:	f04f 32ff 	mov.w	r2, #4294967295
 80037c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c4:	4b26      	ldr	r3, [pc, #152]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ca:	4b25      	ldr	r3, [pc, #148]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037d0:	4823      	ldr	r0, [pc, #140]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037d2:	f002 fc6d 	bl	80060b0 <HAL_TIM_Base_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80037dc:	f000 fad2 	bl	8003d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ea:	4619      	mov	r1, r3
 80037ec:	481c      	ldr	r0, [pc, #112]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037ee:	f003 f963 	bl	8006ab8 <HAL_TIM_ConfigClockSource>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80037f8:	f000 fac4 	bl	8003d84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80037fc:	4818      	ldr	r0, [pc, #96]	; (8003860 <MX_TIM2_Init+0xe8>)
 80037fe:	f002 fcf5 	bl	80061ec <HAL_TIM_OC_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003808:	f000 fabc 	bl	8003d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003814:	f107 0320 	add.w	r3, r7, #32
 8003818:	4619      	mov	r1, r3
 800381a:	4811      	ldr	r0, [pc, #68]	; (8003860 <MX_TIM2_Init+0xe8>)
 800381c:	f003 fe96 	bl	800754c <HAL_TIMEx_MasterConfigSynchronization>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003826:	f000 faad 	bl	8003d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	2200      	movs	r2, #0
 800383e:	4619      	mov	r1, r3
 8003840:	4807      	ldr	r0, [pc, #28]	; (8003860 <MX_TIM2_Init+0xe8>)
 8003842:	f003 f83d 	bl	80068c0 <HAL_TIM_OC_ConfigChannel>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800384c:	f000 fa9a 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <MX_TIM2_Init+0xe8>)
 8003852:	f000 fc13 	bl	800407c <HAL_TIM_MspPostInit>

}
 8003856:	bf00      	nop
 8003858:	3738      	adds	r7, #56	; 0x38
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20003304 	.word	0x20003304

08003864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800386a:	f107 0308 	add.w	r3, r7, #8
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003878:	463b      	mov	r3, r7
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <MX_TIM3_Init+0x94>)
 8003882:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <MX_TIM3_Init+0x98>)
 8003884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <MX_TIM3_Init+0x94>)
 8003888:	224f      	movs	r2, #79	; 0x4f
 800388a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <MX_TIM3_Init+0x94>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 828;
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <MX_TIM3_Init+0x94>)
 8003894:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8003898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800389a:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <MX_TIM3_Init+0x94>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <MX_TIM3_Init+0x94>)
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038a6:	4814      	ldr	r0, [pc, #80]	; (80038f8 <MX_TIM3_Init+0x94>)
 80038a8:	f002 fc02 	bl	80060b0 <HAL_TIM_Base_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80038b2:	f000 fa67 	bl	8003d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	4619      	mov	r1, r3
 80038c2:	480d      	ldr	r0, [pc, #52]	; (80038f8 <MX_TIM3_Init+0x94>)
 80038c4:	f003 f8f8 	bl	8006ab8 <HAL_TIM_ConfigClockSource>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80038ce:	f000 fa59 	bl	8003d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038da:	463b      	mov	r3, r7
 80038dc:	4619      	mov	r1, r3
 80038de:	4806      	ldr	r0, [pc, #24]	; (80038f8 <MX_TIM3_Init+0x94>)
 80038e0:	f003 fe34 	bl	800754c <HAL_TIMEx_MasterConfigSynchronization>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80038ea:	f000 fa4b 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000324c 	.word	0x2000324c
 80038fc:	40000400 	.word	0x40000400

08003900 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003906:	f107 0308 	add.w	r3, r7, #8
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003914:	463b      	mov	r3, r7
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <MX_TIM4_Init+0x94>)
 800391e:	4a1e      	ldr	r2, [pc, #120]	; (8003998 <MX_TIM4_Init+0x98>)
 8003920:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8003922:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <MX_TIM4_Init+0x94>)
 8003924:	2201      	movs	r2, #1
 8003926:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <MX_TIM4_Init+0x94>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <MX_TIM4_Init+0x94>)
 8003930:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003934:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <MX_TIM4_Init+0x94>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800393c:	4b15      	ldr	r3, [pc, #84]	; (8003994 <MX_TIM4_Init+0x94>)
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003942:	4814      	ldr	r0, [pc, #80]	; (8003994 <MX_TIM4_Init+0x94>)
 8003944:	f002 fbb4 	bl	80060b0 <HAL_TIM_Base_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800394e:	f000 fa19 	bl	8003d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003956:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003958:	f107 0308 	add.w	r3, r7, #8
 800395c:	4619      	mov	r1, r3
 800395e:	480d      	ldr	r0, [pc, #52]	; (8003994 <MX_TIM4_Init+0x94>)
 8003960:	f003 f8aa 	bl	8006ab8 <HAL_TIM_ConfigClockSource>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800396a:	f000 fa0b 	bl	8003d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800396e:	2320      	movs	r3, #32
 8003970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003976:	463b      	mov	r3, r7
 8003978:	4619      	mov	r1, r3
 800397a:	4806      	ldr	r0, [pc, #24]	; (8003994 <MX_TIM4_Init+0x94>)
 800397c:	f003 fde6 	bl	800754c <HAL_TIMEx_MasterConfigSynchronization>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003986:	f000 f9fd 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20003e10 	.word	0x20003e10
 8003998:	40000800 	.word	0x40000800

0800399c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039a2:	f107 0318 	add.w	r3, r7, #24
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b0:	f107 0310 	add.w	r3, r7, #16
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80039ba:	463b      	mov	r3, r7
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039c6:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <MX_TIM5_Init+0xd8>)
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <MX_TIM5_Init+0xdc>)
 80039ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2-1;
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <MX_TIM5_Init+0xd8>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <MX_TIM5_Init+0xd8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80039d8:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <MX_TIM5_Init+0xd8>)
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <MX_TIM5_Init+0xd8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039e6:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <MX_TIM5_Init+0xd8>)
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80039ec:	4821      	ldr	r0, [pc, #132]	; (8003a74 <MX_TIM5_Init+0xd8>)
 80039ee:	f002 fb5f 	bl	80060b0 <HAL_TIM_Base_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80039f8:	f000 f9c4 	bl	8003d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a00:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a02:	f107 0318 	add.w	r3, r7, #24
 8003a06:	4619      	mov	r1, r3
 8003a08:	481a      	ldr	r0, [pc, #104]	; (8003a74 <MX_TIM5_Init+0xd8>)
 8003a0a:	f003 f855 	bl	8006ab8 <HAL_TIM_ConfigClockSource>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003a14:	f000 f9b6 	bl	8003d84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003a18:	4816      	ldr	r0, [pc, #88]	; (8003a74 <MX_TIM5_Init+0xd8>)
 8003a1a:	f002 fd3b 	bl	8006494 <HAL_TIM_IC_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003a24:	f000 f9ae 	bl	8003d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a30:	f107 0310 	add.w	r3, r7, #16
 8003a34:	4619      	mov	r1, r3
 8003a36:	480f      	ldr	r0, [pc, #60]	; (8003a74 <MX_TIM5_Init+0xd8>)
 8003a38:	f003 fd88 	bl	800754c <HAL_TIMEx_MasterConfigSynchronization>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8003a42:	f000 f99f 	bl	8003d84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003a46:	230a      	movs	r3, #10
 8003a48:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003a56:	463b      	mov	r3, r7
 8003a58:	2200      	movs	r2, #0
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4805      	ldr	r0, [pc, #20]	; (8003a74 <MX_TIM5_Init+0xd8>)
 8003a5e:	f002 ff8f 	bl	8006980 <HAL_TIM_IC_ConfigChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8003a68:	f000 f98c 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a6c:	bf00      	nop
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	2000320c 	.word	0x2000320c
 8003a78:	40000c00 	.word	0x40000c00

08003a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003a82:	4a16      	ldr	r2, [pc, #88]	; (8003adc <MX_USART2_UART_Init+0x60>)
 8003a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a86:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a94:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ab2:	4809      	ldr	r0, [pc, #36]	; (8003ad8 <MX_USART2_UART_Init+0x5c>)
 8003ab4:	f003 fdda 	bl	800766c <HAL_UART_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003abe:	f000 f961 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2026      	movs	r0, #38	; 0x26
 8003ac8:	f000 fdb7 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003acc:	2026      	movs	r0, #38	; 0x26
 8003ace:	f000 fdd0 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20003344 	.word	0x20003344
 8003adc:	40004400 	.word	0x40004400

08003ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <MX_DMA_Init+0x4c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4a0f      	ldr	r2, [pc, #60]	; (8003b2c <MX_DMA_Init+0x4c>)
 8003af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003af4:	6313      	str	r3, [r2, #48]	; 0x30
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <MX_DMA_Init+0x4c>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	2010      	movs	r0, #16
 8003b08:	f000 fd97 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	f000 fdb0 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	2011      	movs	r0, #17
 8003b18:	f000 fd8f 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003b1c:	2011      	movs	r0, #17
 8003b1e:	f000 fda8 	bl	8004672 <HAL_NVIC_EnableIRQ>

}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800

08003b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a45      	ldr	r2, [pc, #276]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a30      	ldr	r2, [pc, #192]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <MX_GPIO_Init+0x134>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D1_Pin|D0_Pin, GPIO_PIN_RESET);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003bbc:	482a      	ldr	r0, [pc, #168]	; (8003c68 <MX_GPIO_Init+0x138>)
 8003bbe:	f001 fd0b 	bl	80055d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2110      	movs	r1, #16
 8003bc6:	4829      	ldr	r0, [pc, #164]	; (8003c6c <MX_GPIO_Init+0x13c>)
 8003bc8:	f001 fd06 	bl	80055d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8003bd2:	4827      	ldr	r0, [pc, #156]	; (8003c70 <MX_GPIO_Init+0x140>)
 8003bd4:	f001 fd00 	bl	80055d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bde:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <MX_GPIO_Init+0x144>)
 8003be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4619      	mov	r1, r3
 8003bec:	481f      	ldr	r0, [pc, #124]	; (8003c6c <MX_GPIO_Init+0x13c>)
 8003bee:	f001 fb61 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D1_Pin D0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D1_Pin|D0_Pin;
 8003bf2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4817      	ldr	r0, [pc, #92]	; (8003c68 <MX_GPIO_Init+0x138>)
 8003c0c:	f001 fb52 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8003c10:	2310      	movs	r3, #16
 8003c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	4811      	ldr	r0, [pc, #68]	; (8003c6c <MX_GPIO_Init+0x13c>)
 8003c28:	f001 fb44 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin;
 8003c2c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4619      	mov	r1, r3
 8003c44:	480a      	ldr	r0, [pc, #40]	; (8003c70 <MX_GPIO_Init+0x140>)
 8003c46:	f001 fb35 	bl	80052b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	2028      	movs	r0, #40	; 0x28
 8003c50:	f000 fcf3 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c54:	2028      	movs	r0, #40	; 0x28
 8003c56:	f000 fd0c 	bl	8004672 <HAL_NVIC_EnableIRQ>

}
 8003c5a:	bf00      	nop
 8003c5c:	3728      	adds	r7, #40	; 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	40020800 	.word	0x40020800
 8003c70:	40020400 	.word	0x40020400
 8003c74:	10210000 	.word	0x10210000

08003c78 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

OC_count = 0;
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d10b      	bne.n	8003ca2 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7f1b      	ldrb	r3, [r3, #28]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
	{
		OC_count++;
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8003c9a:	6013      	str	r3, [r2, #0]
		Tim2_OC_Callback();
 8003c9c:	f7ff fa78 	bl	8003190 <Tim2_OC_Callback>
	}
	return;
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
}
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000a30 	.word	0x20000a30

08003cb0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d102      	bne.n	8003cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3_IT_Callback();
 8003cc0:	f7ff fba2 	bl	8003408 <Tim3_IT_Callback>
	else
		__NOP();

	return;
 8003cc4:	e001      	b.n	8003cca <HAL_TIM_PeriodElapsedCallback+0x1a>
		__NOP();
 8003cc6:	bf00      	nop
	return;
 8003cc8:	bf00      	nop
}
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	2000324c 	.word	0x2000324c

08003cd4 <HAL_TIM_IC_CaptureCallback>:

int IC_count =0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	//Make sure this is the right timer and channel
	if (htim->Instance == TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_TIM_IC_CaptureCallback+0x34>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10b      	bne.n	8003cfe <HAL_TIM_IC_CaptureCallback+0x2a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7f1b      	ldrb	r3, [r3, #28]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d107      	bne.n	8003cfe <HAL_TIM_IC_CaptureCallback+0x2a>
	{
		IC_count++;
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <HAL_TIM_IC_CaptureCallback+0x38>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <HAL_TIM_IC_CaptureCallback+0x38>)
 8003cf6:	6013      	str	r3, [r2, #0]
		Tim5_IC_Callback();
 8003cf8:	f7ff fb98 	bl	800342c <Tim5_IC_Callback>
	}

	return;
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
}
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	20000a34 	.word	0x20000a34

08003d10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <HAL_UART_RxCpltCallback+0x20>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_Exception_Callback();
 8003d22:	f7ff fc37 	bl	8003594 <UART2_Exception_Callback>
  }
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40004400 	.word	0x40004400

08003d34 <uart_gpio_init>:

void uart_gpio_init()
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <uart_gpio_init+0x48>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <uart_gpio_init+0x48>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <uart_gpio_init+0x48>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003d56:	230c      	movs	r3, #12
 8003d58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d66:	2307      	movs	r3, #7
 8003d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4804      	ldr	r0, [pc, #16]	; (8003d80 <uart_gpio_init+0x4c>)
 8003d70:	f001 faa0 	bl	80052b4 <HAL_GPIO_Init>
}
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40020000 	.word	0x40020000

08003d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_MspInit+0x4c>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <HAL_MspInit+0x4c>)
 8003da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da8:	6453      	str	r3, [r2, #68]	; 0x44
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <HAL_MspInit+0x4c>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_MspInit+0x4c>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <HAL_MspInit+0x4c>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_MspInit+0x4c>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003dd2:	2007      	movs	r0, #7
 8003dd4:	f000 fc26 	bl	8004624 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <HAL_DAC_MspInit+0xdc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d158      	bne.n	8003eb8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_DAC_MspInit+0xe0>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <HAL_DAC_MspInit+0xe0>)
 8003e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_DAC_MspInit+0xe0>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_DAC_MspInit+0xe0>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <HAL_DAC_MspInit+0xe0>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_DAC_MspInit+0xe0>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e3e:	2310      	movs	r3, #16
 8003e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e42:	2303      	movs	r3, #3
 8003e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	481d      	ldr	r0, [pc, #116]	; (8003ec8 <HAL_DAC_MspInit+0xe4>)
 8003e52:	f001 fa2f 	bl	80052b4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_DAC_MspInit+0xec>)
 8003e5a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e5e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003e62:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e76:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e78:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e7e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e86:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e8e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003e9c:	480b      	ldr	r0, [pc, #44]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003e9e:	f000 fe09 	bl	8004ab4 <HAL_DMA_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003ea8:	f7ff ff6c 	bl	8003d84 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <HAL_DAC_MspInit+0xe8>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003eb8:	bf00      	nop
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40007400 	.word	0x40007400
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	2000328c 	.word	0x2000328c
 8003ed0:	40026088 	.word	0x40026088

08003ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	; 0x30
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 031c 	add.w	r3, r7, #28
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d116      	bne.n	8003f24 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6413      	str	r3, [r2, #64]	; 0x40
 8003f06:	4b56      	ldr	r3, [pc, #344]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2100      	movs	r1, #0
 8003f16:	201c      	movs	r0, #28
 8003f18:	f000 fb8f 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f1c:	201c      	movs	r0, #28
 8003f1e:	f000 fba8 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003f22:	e099      	b.n	8004058 <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM3)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <HAL_TIM_Base_MspInit+0x190>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d116      	bne.n	8003f5c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	4a4a      	ldr	r2, [pc, #296]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3e:	4b48      	ldr	r3, [pc, #288]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	201d      	movs	r0, #29
 8003f50:	f000 fb73 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f54:	201d      	movs	r0, #29
 8003f56:	f000 fb8c 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8003f5a:	e07d      	b.n	8004058 <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a41      	ldr	r2, [pc, #260]	; (8004068 <HAL_TIM_Base_MspInit+0x194>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d13f      	bne.n	8003fe6 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a3c      	ldr	r2, [pc, #240]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_up.Instance = DMA1_Stream6;
 8003f82:	4b3a      	ldr	r3, [pc, #232]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003f84:	4a3a      	ldr	r2, [pc, #232]	; (8004070 <HAL_TIM_Base_MspInit+0x19c>)
 8003f86:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8003f88:	4b38      	ldr	r3, [pc, #224]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003f8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f8e:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f90:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f96:	4b35      	ldr	r3, [pc, #212]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003f9c:	4b33      	ldr	r3, [pc, #204]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa2:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fa4:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003faa:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fac:	4b2f      	ldr	r3, [pc, #188]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fb2:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8003fb4:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fba:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8003fc8:	4828      	ldr	r0, [pc, #160]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fca:	f000 fd73 	bl	8004ab4 <HAL_DMA_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_TIM_Base_MspInit+0x104>
      Error_Handler();
 8003fd4:	f7ff fed6 	bl	8003d84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a24      	ldr	r2, [pc, #144]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fdc:	621a      	str	r2, [r3, #32]
 8003fde:	4a23      	ldr	r2, [pc, #140]	; (800406c <HAL_TIM_Base_MspInit+0x198>)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003fe4:	e038      	b.n	8004058 <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM5)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a22      	ldr	r2, [pc, #136]	; (8004074 <HAL_TIM_Base_MspInit+0x1a0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d133      	bne.n	8004058 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8003ffa:	f043 0308 	orr.w	r3, r3, #8
 8003ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	4a12      	ldr	r2, [pc, #72]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6313      	str	r3, [r2, #48]	; 0x30
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_TIM_Base_MspInit+0x18c>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004028:	2301      	movs	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004038:	2302      	movs	r3, #2
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403c:	f107 031c 	add.w	r3, r7, #28
 8004040:	4619      	mov	r1, r3
 8004042:	480d      	ldr	r0, [pc, #52]	; (8004078 <HAL_TIM_Base_MspInit+0x1a4>)
 8004044:	f001 f936 	bl	80052b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	2100      	movs	r1, #0
 800404c:	2032      	movs	r0, #50	; 0x32
 800404e:	f000 faf4 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004052:	2032      	movs	r0, #50	; 0x32
 8004054:	f000 fb0d 	bl	8004672 <HAL_NVIC_EnableIRQ>
}
 8004058:	bf00      	nop
 800405a:	3730      	adds	r7, #48	; 0x30
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	20003e50 	.word	0x20003e50
 8004070:	400260a0 	.word	0x400260a0
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40020000 	.word	0x40020000

0800407c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d11e      	bne.n	80040dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_TIM_MspPostInit+0x68>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <HAL_TIM_MspPostInit+0x68>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_TIM_MspPostInit+0x68>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	2302      	movs	r3, #2
 80040c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040cc:	2301      	movs	r3, #1
 80040ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d0:	f107 030c 	add.w	r3, r7, #12
 80040d4:	4619      	mov	r1, r3
 80040d6:	4804      	ldr	r0, [pc, #16]	; (80040e8 <HAL_TIM_MspPostInit+0x6c>)
 80040d8:	f001 f8ec 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80040dc:	bf00      	nop
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40020000 	.word	0x40020000

080040ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_UART_MspInit+0x94>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d133      	bne.n	8004176 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <HAL_UART_MspInit+0x98>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_UART_MspInit+0x98>)
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	6413      	str	r3, [r2, #64]	; 0x40
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_UART_MspInit+0x98>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_UART_MspInit+0x98>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	4a14      	ldr	r2, [pc, #80]	; (8004184 <HAL_UART_MspInit+0x98>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6313      	str	r3, [r2, #48]	; 0x30
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_UART_MspInit+0x98>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004146:	230c      	movs	r3, #12
 8004148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004152:	2303      	movs	r3, #3
 8004154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004156:	2307      	movs	r3, #7
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415a:	f107 0314 	add.w	r3, r7, #20
 800415e:	4619      	mov	r1, r3
 8004160:	4809      	ldr	r0, [pc, #36]	; (8004188 <HAL_UART_MspInit+0x9c>)
 8004162:	f001 f8a7 	bl	80052b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2100      	movs	r1, #0
 800416a:	2026      	movs	r0, #38	; 0x26
 800416c:	f000 fa65 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004170:	2026      	movs	r0, #38	; 0x26
 8004172:	f000 fa7e 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004176:	bf00      	nop
 8004178:	3728      	adds	r7, #40	; 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40004400 	.word	0x40004400
 8004184:	40023800 	.word	0x40023800
 8004188:	40020000 	.word	0x40020000

0800418c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800419e:	e7fe      	b.n	800419e <HardFault_Handler+0x4>

080041a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <MemManage_Handler+0x4>

080041a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041aa:	e7fe      	b.n	80041aa <BusFault_Handler+0x4>

080041ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <UsageFault_Handler+0x4>

080041b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041e0:	f000 f90e 	bl	8004400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <DMA1_Stream5_IRQHandler+0x10>)
 80041ee:	f000 fdf9 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	2000328c 	.word	0x2000328c

080041fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <DMA1_Stream6_IRQHandler+0x10>)
 8004202:	f000 fdef 	bl	8004de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20003e50 	.word	0x20003e50

08004210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <TIM2_IRQHandler+0x10>)
 8004216:	f002 fa4b 	bl	80066b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20003304 	.word	0x20003304

08004224 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <TIM3_IRQHandler+0x10>)
 800422a:	f002 fa41 	bl	80066b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000324c 	.word	0x2000324c

08004238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <USART2_IRQHandler+0x10>)
 800423e:	f003 fb51 	bl	80078e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20003344 	.word	0x20003344

0800424c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004250:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004254:	f001 f9f4 	bl	8005640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}

0800425c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004260:	4802      	ldr	r0, [pc, #8]	; (800426c <TIM5_IRQHandler+0x10>)
 8004262:	f002 fa25 	bl	80066b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000320c 	.word	0x2000320c

08004270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <_sbrk+0x5c>)
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <_sbrk+0x60>)
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <_sbrk+0x64>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <_sbrk+0x64>)
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <_sbrk+0x68>)
 8004290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <_sbrk+0x64>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	429a      	cmp	r2, r3
 800429e:	d207      	bcs.n	80042b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042a0:	f004 f91c 	bl	80084dc <__errno>
 80042a4:	4602      	mov	r2, r0
 80042a6:	230c      	movs	r3, #12
 80042a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80042aa:	f04f 33ff 	mov.w	r3, #4294967295
 80042ae:	e009      	b.n	80042c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <_sbrk+0x64>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042b6:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <_sbrk+0x64>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <_sbrk+0x64>)
 80042c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042c2:	68fb      	ldr	r3, [r7, #12]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20020000 	.word	0x20020000
 80042d0:	00000400 	.word	0x00000400
 80042d4:	20000a38 	.word	0x20000a38
 80042d8:	20003eb8 	.word	0x20003eb8

080042dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <SystemInit+0x28>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <SystemInit+0x28>)
 80042e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <SystemInit+0x28>)
 80042f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042f6:	609a      	str	r2, [r3, #8]
#endif
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800430c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800430e:	e003      	b.n	8004318 <LoopCopyDataInit>

08004310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004316:	3104      	adds	r1, #4

08004318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004318:	480b      	ldr	r0, [pc, #44]	; (8004348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800431c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800431e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004320:	d3f6      	bcc.n	8004310 <CopyDataInit>
  ldr  r2, =_sbss
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004324:	e002      	b.n	800432c <LoopFillZerobss>

08004326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004328:	f842 3b04 	str.w	r3, [r2], #4

0800432c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800432e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004330:	d3f9      	bcc.n	8004326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004332:	f7ff ffd3 	bl	80042dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004336:	f004 f8d7 	bl	80084e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433a:	f7ff f969 	bl	8003610 <main>
  bx  lr    
 800433e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004340:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004344:	0800a670 	.word	0x0800a670
  ldr  r0, =_sdata
 8004348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800434c:	200009e8 	.word	0x200009e8
  ldr  r2, =_sbss
 8004350:	200009e8 	.word	0x200009e8
  ldr  r3, = _ebss
 8004354:	20003eb8 	.word	0x20003eb8

08004358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004358:	e7fe      	b.n	8004358 <ADC_IRQHandler>
	...

0800435c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_Init+0x40>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0d      	ldr	r2, [pc, #52]	; (800439c <HAL_Init+0x40>)
 8004366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_Init+0x40>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <HAL_Init+0x40>)
 8004372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_Init+0x40>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_Init+0x40>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004384:	2003      	movs	r0, #3
 8004386:	f000 f94d 	bl	8004624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438a:	2000      	movs	r0, #0
 800438c:	f000 f808 	bl	80043a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004390:	f7ff fd00 	bl	8003d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00

080043a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_InitTick+0x54>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <HAL_InitTick+0x58>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	4619      	mov	r1, r3
 80043b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f965 	bl	800468e <HAL_SYSTICK_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00e      	b.n	80043ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0f      	cmp	r3, #15
 80043d2:	d80a      	bhi.n	80043ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d4:	2200      	movs	r2, #0
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	f000 f92d 	bl	800463a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e0:	4a06      	ldr	r2, [pc, #24]	; (80043fc <HAL_InitTick+0x5c>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000974 	.word	0x20000974
 80043f8:	2000097c 	.word	0x2000097c
 80043fc:	20000978 	.word	0x20000978

08004400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_IncTick+0x20>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_IncTick+0x24>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4413      	add	r3, r2
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_IncTick+0x24>)
 8004412:	6013      	str	r3, [r2, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	2000097c 	.word	0x2000097c
 8004424:	20003eb0 	.word	0x20003eb0

08004428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return uwTick;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_GetTick+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20003eb0 	.word	0x20003eb0

08004440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff ffee 	bl	8004428 <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d005      	beq.n	8004466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_Delay+0x40>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004466:	bf00      	nop
 8004468:	f7ff ffde 	bl	8004428 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d8f7      	bhi.n	8004468 <HAL_Delay+0x28>
  {
  }
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000097c 	.word	0x2000097c

08004484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db0b      	blt.n	8004512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4907      	ldr	r1, [pc, #28]	; (8004520 <__NVIC_EnableIRQ+0x38>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2001      	movs	r0, #1
 800450a:	fa00 f202 	lsl.w	r2, r0, r2
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	; (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf28      	it	cs
 8004596:	2304      	movcs	r3, #4
 8004598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3304      	adds	r3, #4
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d902      	bls.n	80045a8 <NVIC_EncodePriority+0x30>
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3b03      	subs	r3, #3
 80045a6:	e000      	b.n	80045aa <NVIC_EncodePriority+0x32>
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	401a      	ands	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	4313      	orrs	r3, r2
         );
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f0:	d301      	bcc.n	80045f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00f      	b.n	8004616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <SysTick_Config+0x40>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fe:	210f      	movs	r1, #15
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	f7ff ff8e 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <SysTick_Config+0x40>)
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <SysTick_Config+0x40>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000e010 	.word	0xe000e010

08004624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff29 	bl	8004484 <__NVIC_SetPriorityGrouping>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800464c:	f7ff ff3e 	bl	80044cc <__NVIC_GetPriorityGrouping>
 8004650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	6978      	ldr	r0, [r7, #20]
 8004658:	f7ff ff8e 	bl	8004578 <NVIC_EncodePriority>
 800465c:	4602      	mov	r2, r0
 800465e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff5d 	bl	8004524 <__NVIC_SetPriority>
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff31 	bl	80044e8 <__NVIC_EnableIRQ>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ffa2 	bl	80045e0 <SysTick_Config>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e014      	b.n	80046e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	791b      	ldrb	r3, [r3, #4]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fb8b 	bl	8003de4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	795b      	ldrb	r3, [r3, #5]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_DAC_Start_DMA+0x1e>
 8004706:	2302      	movs	r3, #2
 8004708:	e08e      	b.n	8004828 <HAL_DAC_Start_DMA+0x13c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2202      	movs	r2, #2
 8004714:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d12a      	bne.n	8004772 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a43      	ldr	r2, [pc, #268]	; (8004830 <HAL_DAC_Start_DMA+0x144>)
 8004722:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a42      	ldr	r2, [pc, #264]	; (8004834 <HAL_DAC_Start_DMA+0x148>)
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <HAL_DAC_Start_DMA+0x14c>)
 8004732:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004742:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d009      	beq.n	800475e <HAL_DAC_Start_DMA+0x72>
 800474a:	2b08      	cmp	r3, #8
 800474c:	d00c      	beq.n	8004768 <HAL_DAC_Start_DMA+0x7c>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d000      	beq.n	8004754 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004752:	e039      	b.n	80047c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3308      	adds	r3, #8
 800475a:	617b      	str	r3, [r7, #20]
        break;
 800475c:	e034      	b.n	80047c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	617b      	str	r3, [r7, #20]
        break;
 8004766:	e02f      	b.n	80047c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3310      	adds	r3, #16
 800476e:	617b      	str	r3, [r7, #20]
        break;
 8004770:	e02a      	b.n	80047c8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4a31      	ldr	r2, [pc, #196]	; (800483c <HAL_DAC_Start_DMA+0x150>)
 8004778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4a30      	ldr	r2, [pc, #192]	; (8004840 <HAL_DAC_Start_DMA+0x154>)
 8004780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	4a2f      	ldr	r2, [pc, #188]	; (8004844 <HAL_DAC_Start_DMA+0x158>)
 8004788:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004798:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d009      	beq.n	80047b4 <HAL_DAC_Start_DMA+0xc8>
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d00c      	beq.n	80047be <HAL_DAC_Start_DMA+0xd2>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d000      	beq.n	80047aa <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80047a8:	e00e      	b.n	80047c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	617b      	str	r3, [r7, #20]
        break;
 80047b2:	e009      	b.n	80047c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3318      	adds	r3, #24
 80047ba:	617b      	str	r3, [r7, #20]
        break;
 80047bc:	e004      	b.n	80047c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	331c      	adds	r3, #28
 80047c4:	617b      	str	r3, [r7, #20]
        break;
 80047c6:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047dc:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6898      	ldr	r0, [r3, #8]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	f000 fa12 	bl	8004c10 <HAL_DMA_Start_IT>
 80047ec:	e00e      	b.n	800480c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80047fc:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68d8      	ldr	r0, [r3, #12]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	f000 fa02 	bl	8004c10 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	409a      	lsls	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	080049a1 	.word	0x080049a1
 8004834:	080049c3 	.word	0x080049c3
 8004838:	080049df 	.word	0x080049df
 800483c:	08004a49 	.word	0x08004a49
 8004840:	08004a6b 	.word	0x08004a6b
 8004844:	08004a87 	.word	0x08004a87

08004848 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43da      	mvns	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	400a      	ands	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	2201      	movs	r2, #1
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	400a      	ands	r2, r1
 8004886:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fa14 	bl	8004cc0 <HAL_DMA_Abort>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e006      	b.n	80048ac <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fa0c 	bl	8004cc0 <HAL_DMA_Abort>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	711a      	strb	r2, [r3, #4]
 80048b8:	e002      	b.n	80048c0 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	795b      	ldrb	r3, [r3, #5]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_DAC_ConfigChannel+0x20>
 8004922:	2302      	movs	r3, #2
 8004924:	e036      	b.n	8004994 <HAL_DAC_ConfigChannel+0x8e>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2202      	movs	r2, #2
 8004930:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800493a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4013      	ands	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	22c0      	movs	r2, #192	; 0xc0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43da      	mvns	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	400a      	ands	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff ff8b 	bl	80048ca <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	711a      	strb	r2, [r3, #4]
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff ff84 	bl	80048de <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f043 0204 	orr.w	r2, r3, #4
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff7a 	bl	80048f2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	711a      	strb	r2, [r3, #4]
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ffd8 	bl	8004a0c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	711a      	strb	r2, [r3, #4]
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff ffd1 	bl	8004a20 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff ffc7 	bl	8004a34 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	711a      	strb	r2, [r3, #4]
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ac0:	f7ff fcb2 	bl	8004428 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e099      	b.n	8004c04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af0:	e00f      	b.n	8004b12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af2:	f7ff fc99 	bl	8004428 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d908      	bls.n	8004b12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e078      	b.n	8004c04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e8      	bne.n	8004af2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <HAL_DMA_Init+0x158>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d107      	bne.n	8004b7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	4313      	orrs	r3, r2
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d117      	bne.n	8004bd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fb01 	bl	80051c0 <DMA_CheckFifoParam>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2240      	movs	r2, #64	; 0x40
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e016      	b.n	8004c04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fab8 	bl	8005154 <DMA_CalcBaseAndBitshift>
 8004be4:	4603      	mov	r3, r0
 8004be6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	223f      	movs	r2, #63	; 0x3f
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	f010803f 	.word	0xf010803f

08004c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_DMA_Start_IT+0x26>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e040      	b.n	8004cb8 <HAL_DMA_Start_IT+0xa8>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d12f      	bne.n	8004caa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa4a 	bl	80050f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	223f      	movs	r2, #63	; 0x3f
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0216 	orr.w	r2, r2, #22
 8004c7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e005      	b.n	8004cb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cce:	f7ff fbab 	bl	8004428 <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d008      	beq.n	8004cf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2280      	movs	r2, #128	; 0x80
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e052      	b.n	8004d98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0216 	bic.w	r2, r2, #22
 8004d00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <HAL_DMA_Abort+0x62>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0208 	bic.w	r2, r2, #8
 8004d30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d42:	e013      	b.n	8004d6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d44:	f7ff fb70 	bl	8004428 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d90c      	bls.n	8004d6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e015      	b.n	8004d98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e4      	bne.n	8004d44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	223f      	movs	r2, #63	; 0x3f
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d004      	beq.n	8004dbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e00c      	b.n	8004dd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004df0:	4b92      	ldr	r3, [pc, #584]	; (800503c <HAL_DMA_IRQHandler+0x258>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a92      	ldr	r2, [pc, #584]	; (8005040 <HAL_DMA_IRQHandler+0x25c>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0a9b      	lsrs	r3, r3, #10
 8004dfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	2208      	movs	r2, #8
 8004e10:	409a      	lsls	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01a      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0204 	bic.w	r2, r2, #4
 8004e36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	f043 0201 	orr.w	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	2201      	movs	r2, #1
 8004e56:	409a      	lsls	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	2201      	movs	r2, #1
 8004e74:	409a      	lsls	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f043 0202 	orr.w	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d012      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0204 	orr.w	r2, r3, #4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d043      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d03c      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2210      	movs	r2, #16
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d018      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d024      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
 8004f12:	e01f      	b.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	e016      	b.n	8004f54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0208 	bic.w	r2, r2, #8
 8004f42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	2220      	movs	r2, #32
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 808e 	beq.w	8005082 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8086 	beq.w	8005082 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d136      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0216 	bic.w	r2, r2, #22
 8004f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_DMA_IRQHandler+0x1da>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0208 	bic.w	r2, r2, #8
 8004fcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	223f      	movs	r2, #63	; 0x3f
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d07d      	beq.n	80050ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
        }
        return;
 8004ffa:	e078      	b.n	80050ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01c      	beq.n	8005044 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	2b00      	cmp	r3, #0
 800501e:	d030      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	e02b      	b.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d027      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
 800503a:	e022      	b.n	8005082 <HAL_DMA_IRQHandler+0x29e>
 800503c:	20000974 	.word	0x20000974
 8005040:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0210 	bic.w	r2, r2, #16
 8005060:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	2b00      	cmp	r3, #0
 8005088:	d032      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d022      	beq.n	80050dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2205      	movs	r2, #5
 800509a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d307      	bcc.n	80050ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f2      	bne.n	80050ae <HAL_DMA_IRQHandler+0x2ca>
 80050c8:	e000      	b.n	80050cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80050ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	4798      	blx	r3
 80050ec:	e000      	b.n	80050f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050ee:	bf00      	nop
    }
  }
}
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005114:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d108      	bne.n	8005138 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005136:	e007      	b.n	8005148 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	3b10      	subs	r3, #16
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800516e:	4a13      	ldr	r2, [pc, #76]	; (80051bc <DMA_CalcBaseAndBitshift+0x68>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d909      	bls.n	8005196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	659a      	str	r2, [r3, #88]	; 0x58
 8005194:	e007      	b.n	80051a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	aaaaaaab 	.word	0xaaaaaaab
 80051bc:	0800a5e0 	.word	0x0800a5e0

080051c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11f      	bne.n	800521a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d855      	bhi.n	800528c <DMA_CheckFifoParam+0xcc>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <DMA_CheckFifoParam+0x28>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	0800520b 	.word	0x0800520b
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	0800528d 	.word	0x0800528d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d045      	beq.n	8005290 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005208:	e042      	b.n	8005290 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005212:	d13f      	bne.n	8005294 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005218:	e03c      	b.n	8005294 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d121      	bne.n	8005268 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d836      	bhi.n	8005298 <DMA_CheckFifoParam+0xd8>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <DMA_CheckFifoParam+0x70>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	08005247 	.word	0x08005247
 8005238:	08005241 	.word	0x08005241
 800523c:	08005259 	.word	0x08005259
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      break;
 8005244:	e02f      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d024      	beq.n	800529c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005256:	e021      	b.n	800529c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005260:	d11e      	bne.n	80052a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005266:	e01b      	b.n	80052a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d902      	bls.n	8005274 <DMA_CheckFifoParam+0xb4>
 800526e:	2b03      	cmp	r3, #3
 8005270:	d003      	beq.n	800527a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005272:	e018      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	e015      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      break;
 800528a:	e00b      	b.n	80052a4 <DMA_CheckFifoParam+0xe4>
      break;
 800528c:	bf00      	nop
 800528e:	e00a      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 8005290:	bf00      	nop
 8005292:	e008      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 8005294:	bf00      	nop
 8005296:	e006      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 8005298:	bf00      	nop
 800529a:	e004      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 800529c:	bf00      	nop
 800529e:	e002      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80052a0:	bf00      	nop
 80052a2:	e000      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
      break;
 80052a4:	bf00      	nop
    }
  } 
  
  return status; 
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	e165      	b.n	800559c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052d0:	2201      	movs	r2, #1
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4013      	ands	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	f040 8154 	bne.w	8005596 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d00b      	beq.n	800530e <HAL_GPIO_Init+0x5a>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d007      	beq.n	800530e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005302:	2b11      	cmp	r3, #17
 8005304:	d003      	beq.n	800530e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b12      	cmp	r3, #18
 800530c:	d130      	bne.n	8005370 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	2203      	movs	r2, #3
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4013      	ands	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4313      	orrs	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005344:	2201      	movs	r2, #1
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 0201 	and.w	r2, r3, #1
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	2203      	movs	r2, #3
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0xfc>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b12      	cmp	r3, #18
 80053ae:	d123      	bne.n	80053f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	08da      	lsrs	r2, r3, #3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3208      	adds	r2, #8
 80053b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	220f      	movs	r2, #15
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	08da      	lsrs	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3208      	adds	r2, #8
 80053f2:	69b9      	ldr	r1, [r7, #24]
 80053f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	2203      	movs	r2, #3
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0203 	and.w	r2, r3, #3
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80ae 	beq.w	8005596 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	4b5c      	ldr	r3, [pc, #368]	; (80055b0 <HAL_GPIO_Init+0x2fc>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	4a5b      	ldr	r2, [pc, #364]	; (80055b0 <HAL_GPIO_Init+0x2fc>)
 8005444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005448:	6453      	str	r3, [r2, #68]	; 0x44
 800544a:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_GPIO_Init+0x2fc>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005456:	4a57      	ldr	r2, [pc, #348]	; (80055b4 <HAL_GPIO_Init+0x300>)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	3302      	adds	r3, #2
 800545e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	220f      	movs	r2, #15
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4013      	ands	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a4e      	ldr	r2, [pc, #312]	; (80055b8 <HAL_GPIO_Init+0x304>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d025      	beq.n	80054ce <HAL_GPIO_Init+0x21a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a4d      	ldr	r2, [pc, #308]	; (80055bc <HAL_GPIO_Init+0x308>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01f      	beq.n	80054ca <HAL_GPIO_Init+0x216>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a4c      	ldr	r2, [pc, #304]	; (80055c0 <HAL_GPIO_Init+0x30c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d019      	beq.n	80054c6 <HAL_GPIO_Init+0x212>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a4b      	ldr	r2, [pc, #300]	; (80055c4 <HAL_GPIO_Init+0x310>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <HAL_GPIO_Init+0x20e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4a      	ldr	r2, [pc, #296]	; (80055c8 <HAL_GPIO_Init+0x314>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00d      	beq.n	80054be <HAL_GPIO_Init+0x20a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a49      	ldr	r2, [pc, #292]	; (80055cc <HAL_GPIO_Init+0x318>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <HAL_GPIO_Init+0x206>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a48      	ldr	r2, [pc, #288]	; (80055d0 <HAL_GPIO_Init+0x31c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d101      	bne.n	80054b6 <HAL_GPIO_Init+0x202>
 80054b2:	2306      	movs	r3, #6
 80054b4:	e00c      	b.n	80054d0 <HAL_GPIO_Init+0x21c>
 80054b6:	2307      	movs	r3, #7
 80054b8:	e00a      	b.n	80054d0 <HAL_GPIO_Init+0x21c>
 80054ba:	2305      	movs	r3, #5
 80054bc:	e008      	b.n	80054d0 <HAL_GPIO_Init+0x21c>
 80054be:	2304      	movs	r3, #4
 80054c0:	e006      	b.n	80054d0 <HAL_GPIO_Init+0x21c>
 80054c2:	2303      	movs	r3, #3
 80054c4:	e004      	b.n	80054d0 <HAL_GPIO_Init+0x21c>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e002      	b.n	80054d0 <HAL_GPIO_Init+0x21c>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <HAL_GPIO_Init+0x21c>
 80054ce:	2300      	movs	r3, #0
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	f002 0203 	and.w	r2, r2, #3
 80054d6:	0092      	lsls	r2, r2, #2
 80054d8:	4093      	lsls	r3, r2
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4313      	orrs	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054e0:	4934      	ldr	r1, [pc, #208]	; (80055b4 <HAL_GPIO_Init+0x300>)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	3302      	adds	r3, #2
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ee:	4b39      	ldr	r3, [pc, #228]	; (80055d4 <HAL_GPIO_Init+0x320>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	43db      	mvns	r3, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4013      	ands	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005512:	4a30      	ldr	r2, [pc, #192]	; (80055d4 <HAL_GPIO_Init+0x320>)
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005518:	4b2e      	ldr	r3, [pc, #184]	; (80055d4 <HAL_GPIO_Init+0x320>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800553c:	4a25      	ldr	r2, [pc, #148]	; (80055d4 <HAL_GPIO_Init+0x320>)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_GPIO_Init+0x320>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005566:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <HAL_GPIO_Init+0x320>)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_GPIO_Init+0x320>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	43db      	mvns	r3, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4013      	ands	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005590:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <HAL_GPIO_Init+0x320>)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	3301      	adds	r3, #1
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	f67f ae96 	bls.w	80052d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055a4:	bf00      	nop
 80055a6:	3724      	adds	r7, #36	; 0x24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40013800 	.word	0x40013800
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40020400 	.word	0x40020400
 80055c0:	40020800 	.word	0x40020800
 80055c4:	40020c00 	.word	0x40020c00
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40021400 	.word	0x40021400
 80055d0:	40021800 	.word	0x40021800
 80055d4:	40013c00 	.word	0x40013c00

080055d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	807b      	strh	r3, [r7, #2]
 80055e4:	4613      	mov	r3, r2
 80055e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055e8:	787b      	ldrb	r3, [r7, #1]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ee:	887a      	ldrh	r2, [r7, #2]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055f4:	e003      	b.n	80055fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055f6:	887b      	ldrh	r3, [r7, #2]
 80055f8:	041a      	lsls	r2, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	619a      	str	r2, [r3, #24]
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	887b      	ldrh	r3, [r7, #2]
 800561c:	401a      	ands	r2, r3
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	429a      	cmp	r2, r3
 8005622:	d104      	bne.n	800562e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005624:	887b      	ldrh	r3, [r7, #2]
 8005626:	041a      	lsls	r2, r3, #16
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800562c:	e002      	b.n	8005634 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	619a      	str	r2, [r3, #24]
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005656:	4a05      	ldr	r2, [pc, #20]	; (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f806 	bl	8005670 <HAL_GPIO_EXTI_Callback>
  }
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40013c00 	.word	0x40013c00

08005670 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0cc      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b68      	ldr	r3, [pc, #416]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90c      	bls.n	80056c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b65      	ldr	r3, [pc, #404]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b63      	ldr	r3, [pc, #396]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0b8      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056dc:	4b59      	ldr	r3, [pc, #356]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a58      	ldr	r2, [pc, #352]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f4:	4b53      	ldr	r3, [pc, #332]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4a52      	ldr	r2, [pc, #328]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005700:	4b50      	ldr	r3, [pc, #320]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	494d      	ldr	r1, [pc, #308]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d044      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d107      	bne.n	8005736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d119      	bne.n	8005766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e07f      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d003      	beq.n	8005746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005742:	2b03      	cmp	r3, #3
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005746:	4b3f      	ldr	r3, [pc, #252]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e06f      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005756:	4b3b      	ldr	r3, [pc, #236]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e067      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005766:	4b37      	ldr	r3, [pc, #220]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f023 0203 	bic.w	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4934      	ldr	r1, [pc, #208]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	4313      	orrs	r3, r2
 8005776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005778:	f7fe fe56 	bl	8004428 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	e00a      	b.n	8005796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005780:	f7fe fe52 	bl	8004428 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e04f      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 020c 	and.w	r2, r3, #12
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d1eb      	bne.n	8005780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d20c      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e032      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4916      	ldr	r1, [pc, #88]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	490e      	ldr	r1, [pc, #56]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800580e:	f000 f855 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 8005812:	4601      	mov	r1, r0
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <HAL_RCC_ClockConfig+0x1c0>)
 8005820:	5cd3      	ldrb	r3, [r2, r3]
 8005822:	fa21 f303 	lsr.w	r3, r1, r3
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1c8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fdb6 	bl	80043a0 <HAL_InitTick>

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40023c00 	.word	0x40023c00
 8005844:	40023800 	.word	0x40023800
 8005848:	0800a5c8 	.word	0x0800a5c8
 800584c:	20000974 	.word	0x20000974
 8005850:	20000978 	.word	0x20000978

08005854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005858:	4b03      	ldr	r3, [pc, #12]	; (8005868 <HAL_RCC_GetHCLKFreq+0x14>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000974 	.word	0x20000974

0800586c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005870:	f7ff fff0 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005874:	4601      	mov	r1, r0
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0a9b      	lsrs	r3, r3, #10
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4a03      	ldr	r2, [pc, #12]	; (8005890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005882:	5cd3      	ldrb	r3, [r2, r3]
 8005884:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40023800 	.word	0x40023800
 8005890:	0800a5d8 	.word	0x0800a5d8

08005894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005898:	f7ff ffdc 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 800589c:	4601      	mov	r1, r0
 800589e:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0b5b      	lsrs	r3, r3, #13
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4a03      	ldr	r2, [pc, #12]	; (80058b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058aa:	5cd3      	ldrb	r3, [r2, r3]
 80058ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40023800 	.word	0x40023800
 80058b8:	0800a5d8 	.word	0x0800a5d8

080058bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d6:	4bc6      	ldr	r3, [pc, #792]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	f200 817e 	bhi.w	8005be0 <HAL_RCC_GetSysClockFreq+0x324>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <HAL_RCC_GetSysClockFreq+0x30>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005be1 	.word	0x08005be1
 80058f4:	08005be1 	.word	0x08005be1
 80058f8:	08005be1 	.word	0x08005be1
 80058fc:	08005927 	.word	0x08005927
 8005900:	08005be1 	.word	0x08005be1
 8005904:	08005be1 	.word	0x08005be1
 8005908:	08005be1 	.word	0x08005be1
 800590c:	0800592d 	.word	0x0800592d
 8005910:	08005be1 	.word	0x08005be1
 8005914:	08005be1 	.word	0x08005be1
 8005918:	08005be1 	.word	0x08005be1
 800591c:	08005a89 	.word	0x08005a89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005920:	4bb4      	ldr	r3, [pc, #720]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x338>)
 8005922:	613b      	str	r3, [r7, #16]
       break;
 8005924:	e15f      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005926:	4bb4      	ldr	r3, [pc, #720]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005928:	613b      	str	r3, [r7, #16]
      break;
 800592a:	e15c      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800592c:	4bb0      	ldr	r3, [pc, #704]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005934:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005936:	4bae      	ldr	r3, [pc, #696]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d04a      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005942:	4bab      	ldr	r3, [pc, #684]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	099b      	lsrs	r3, r3, #6
 8005948:	f04f 0400 	mov.w	r4, #0
 800594c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	ea03 0501 	and.w	r5, r3, r1
 8005958:	ea04 0602 	and.w	r6, r4, r2
 800595c:	4629      	mov	r1, r5
 800595e:	4632      	mov	r2, r6
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	0154      	lsls	r4, r2, #5
 800596a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800596e:	014b      	lsls	r3, r1, #5
 8005970:	4619      	mov	r1, r3
 8005972:	4622      	mov	r2, r4
 8005974:	1b49      	subs	r1, r1, r5
 8005976:	eb62 0206 	sbc.w	r2, r2, r6
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	0194      	lsls	r4, r2, #6
 8005984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005988:	018b      	lsls	r3, r1, #6
 800598a:	1a5b      	subs	r3, r3, r1
 800598c:	eb64 0402 	sbc.w	r4, r4, r2
 8005990:	f04f 0100 	mov.w	r1, #0
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	00e2      	lsls	r2, r4, #3
 800599a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800599e:	00d9      	lsls	r1, r3, #3
 80059a0:	460b      	mov	r3, r1
 80059a2:	4614      	mov	r4, r2
 80059a4:	195b      	adds	r3, r3, r5
 80059a6:	eb44 0406 	adc.w	r4, r4, r6
 80059aa:	f04f 0100 	mov.w	r1, #0
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	0262      	lsls	r2, r4, #9
 80059b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80059b8:	0259      	lsls	r1, r3, #9
 80059ba:	460b      	mov	r3, r1
 80059bc:	4614      	mov	r4, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	4621      	mov	r1, r4
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f04f 0400 	mov.w	r4, #0
 80059c8:	461a      	mov	r2, r3
 80059ca:	4623      	mov	r3, r4
 80059cc:	f7fb f92c 	bl	8000c28 <__aeabi_uldivmod>
 80059d0:	4603      	mov	r3, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e049      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d8:	4b85      	ldr	r3, [pc, #532]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	099b      	lsrs	r3, r3, #6
 80059de:	f04f 0400 	mov.w	r4, #0
 80059e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	ea03 0501 	and.w	r5, r3, r1
 80059ee:	ea04 0602 	and.w	r6, r4, r2
 80059f2:	4629      	mov	r1, r5
 80059f4:	4632      	mov	r2, r6
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	f04f 0400 	mov.w	r4, #0
 80059fe:	0154      	lsls	r4, r2, #5
 8005a00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a04:	014b      	lsls	r3, r1, #5
 8005a06:	4619      	mov	r1, r3
 8005a08:	4622      	mov	r2, r4
 8005a0a:	1b49      	subs	r1, r1, r5
 8005a0c:	eb62 0206 	sbc.w	r2, r2, r6
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	f04f 0400 	mov.w	r4, #0
 8005a18:	0194      	lsls	r4, r2, #6
 8005a1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a1e:	018b      	lsls	r3, r1, #6
 8005a20:	1a5b      	subs	r3, r3, r1
 8005a22:	eb64 0402 	sbc.w	r4, r4, r2
 8005a26:	f04f 0100 	mov.w	r1, #0
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	00e2      	lsls	r2, r4, #3
 8005a30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a34:	00d9      	lsls	r1, r3, #3
 8005a36:	460b      	mov	r3, r1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	195b      	adds	r3, r3, r5
 8005a3c:	eb44 0406 	adc.w	r4, r4, r6
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	02a2      	lsls	r2, r4, #10
 8005a4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a4e:	0299      	lsls	r1, r3, #10
 8005a50:	460b      	mov	r3, r1
 8005a52:	4614      	mov	r4, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	4621      	mov	r1, r4
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f04f 0400 	mov.w	r4, #0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4623      	mov	r3, r4
 8005a62:	f7fb f8e1 	bl	8000c28 <__aeabi_uldivmod>
 8005a66:	4603      	mov	r3, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a6c:	4b60      	ldr	r3, [pc, #384]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	3301      	adds	r3, #1
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a84:	613b      	str	r3, [r7, #16]
      break;
 8005a86:	e0ae      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a88:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a90:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a92:	4b57      	ldr	r3, [pc, #348]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d04a      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9e:	4b54      	ldr	r3, [pc, #336]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	f04f 0400 	mov.w	r4, #0
 8005aa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	ea03 0501 	and.w	r5, r3, r1
 8005ab4:	ea04 0602 	and.w	r6, r4, r2
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4632      	mov	r2, r6
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	f04f 0400 	mov.w	r4, #0
 8005ac4:	0154      	lsls	r4, r2, #5
 8005ac6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aca:	014b      	lsls	r3, r1, #5
 8005acc:	4619      	mov	r1, r3
 8005ace:	4622      	mov	r2, r4
 8005ad0:	1b49      	subs	r1, r1, r5
 8005ad2:	eb62 0206 	sbc.w	r2, r2, r6
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	f04f 0400 	mov.w	r4, #0
 8005ade:	0194      	lsls	r4, r2, #6
 8005ae0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ae4:	018b      	lsls	r3, r1, #6
 8005ae6:	1a5b      	subs	r3, r3, r1
 8005ae8:	eb64 0402 	sbc.w	r4, r4, r2
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	00e2      	lsls	r2, r4, #3
 8005af6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005afa:	00d9      	lsls	r1, r3, #3
 8005afc:	460b      	mov	r3, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	195b      	adds	r3, r3, r5
 8005b02:	eb44 0406 	adc.w	r4, r4, r6
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	0262      	lsls	r2, r4, #9
 8005b10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b14:	0259      	lsls	r1, r3, #9
 8005b16:	460b      	mov	r3, r1
 8005b18:	4614      	mov	r4, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f04f 0400 	mov.w	r4, #0
 8005b24:	461a      	mov	r2, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	f7fb f87e 	bl	8000c28 <__aeabi_uldivmod>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	e049      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b34:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	f04f 0400 	mov.w	r4, #0
 8005b3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	ea03 0501 	and.w	r5, r3, r1
 8005b4a:	ea04 0602 	and.w	r6, r4, r2
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4632      	mov	r2, r6
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	f04f 0400 	mov.w	r4, #0
 8005b5a:	0154      	lsls	r4, r2, #5
 8005b5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b60:	014b      	lsls	r3, r1, #5
 8005b62:	4619      	mov	r1, r3
 8005b64:	4622      	mov	r2, r4
 8005b66:	1b49      	subs	r1, r1, r5
 8005b68:	eb62 0206 	sbc.w	r2, r2, r6
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	f04f 0400 	mov.w	r4, #0
 8005b74:	0194      	lsls	r4, r2, #6
 8005b76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b7a:	018b      	lsls	r3, r1, #6
 8005b7c:	1a5b      	subs	r3, r3, r1
 8005b7e:	eb64 0402 	sbc.w	r4, r4, r2
 8005b82:	f04f 0100 	mov.w	r1, #0
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	00e2      	lsls	r2, r4, #3
 8005b8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b90:	00d9      	lsls	r1, r3, #3
 8005b92:	460b      	mov	r3, r1
 8005b94:	4614      	mov	r4, r2
 8005b96:	195b      	adds	r3, r3, r5
 8005b98:	eb44 0406 	adc.w	r4, r4, r6
 8005b9c:	f04f 0100 	mov.w	r1, #0
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	02a2      	lsls	r2, r4, #10
 8005ba6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005baa:	0299      	lsls	r1, r3, #10
 8005bac:	460b      	mov	r3, r1
 8005bae:	4614      	mov	r4, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f04f 0400 	mov.w	r4, #0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	f7fb f833 	bl	8000c28 <__aeabi_uldivmod>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	0f1b      	lsrs	r3, r3, #28
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	613b      	str	r3, [r7, #16]
      break;
 8005bde:	e002      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x338>)
 8005be2:	613b      	str	r3, [r7, #16]
      break;
 8005be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be6:	693b      	ldr	r3, [r7, #16]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	00f42400 	.word	0x00f42400
 8005bf8:	007a1200 	.word	0x007a1200

08005bfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8083 	beq.w	8005d1c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c16:	4b95      	ldr	r3, [pc, #596]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d019      	beq.n	8005c56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c22:	4b92      	ldr	r3, [pc, #584]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c2e:	4b8f      	ldr	r3, [pc, #572]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c3a:	d00c      	beq.n	8005c56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c3c:	4b8b      	ldr	r3, [pc, #556]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c44:	2b0c      	cmp	r3, #12
 8005c46:	d112      	bne.n	8005c6e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c48:	4b88      	ldr	r3, [pc, #544]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c54:	d10b      	bne.n	8005c6e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c56:	4b85      	ldr	r3, [pc, #532]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d05b      	beq.n	8005d1a <HAL_RCC_OscConfig+0x11e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d157      	bne.n	8005d1a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e216      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c76:	d106      	bne.n	8005c86 <HAL_RCC_OscConfig+0x8a>
 8005c78:	4b7c      	ldr	r3, [pc, #496]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a7b      	ldr	r2, [pc, #492]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	e01d      	b.n	8005cc2 <HAL_RCC_OscConfig+0xc6>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCC_OscConfig+0xae>
 8005c90:	4b76      	ldr	r3, [pc, #472]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a75      	ldr	r2, [pc, #468]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b73      	ldr	r3, [pc, #460]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a72      	ldr	r2, [pc, #456]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e00b      	b.n	8005cc2 <HAL_RCC_OscConfig+0xc6>
 8005caa:	4b70      	ldr	r3, [pc, #448]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6f      	ldr	r2, [pc, #444]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4b6d      	ldr	r3, [pc, #436]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6c      	ldr	r2, [pc, #432]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d013      	beq.n	8005cf2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cca:	f7fe fbad 	bl	8004428 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cd2:	f7fe fba9 	bl	8004428 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b64      	cmp	r3, #100	; 0x64
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e1db      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce4:	4b61      	ldr	r3, [pc, #388]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0xd6>
 8005cf0:	e014      	b.n	8005d1c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf2:	f7fe fb99 	bl	8004428 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cfa:	f7fe fb95 	bl	8004428 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b64      	cmp	r3, #100	; 0x64
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e1c7      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0c:	4b57      	ldr	r3, [pc, #348]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCC_OscConfig+0xfe>
 8005d18:	e000      	b.n	8005d1c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d06f      	beq.n	8005e08 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d28:	4b50      	ldr	r3, [pc, #320]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d017      	beq.n	8005d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d34:	4b4d      	ldr	r3, [pc, #308]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d105      	bne.n	8005d4c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d40:	4b4a      	ldr	r3, [pc, #296]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4c:	4b47      	ldr	r3, [pc, #284]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d54:	2b0c      	cmp	r3, #12
 8005d56:	d11c      	bne.n	8005d92 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d58:	4b44      	ldr	r3, [pc, #272]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d116      	bne.n	8005d92 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d64:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_RCC_OscConfig+0x180>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e18f      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7c:	4b3b      	ldr	r3, [pc, #236]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4938      	ldr	r1, [pc, #224]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d90:	e03a      	b.n	8005e08 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d020      	beq.n	8005ddc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d9a:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fe fb42 	bl	8004428 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da8:	f7fe fb3e 	bl	8004428 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e170      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dba:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4925      	ldr	r1, [pc, #148]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
 8005dda:	e015      	b.n	8005e08 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <HAL_RCC_OscConfig+0x274>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fe fb21 	bl	8004428 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dea:	f7fe fb1d 	bl	8004428 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e14f      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d037      	beq.n	8005e84 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d016      	beq.n	8005e4a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e1c:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <HAL_RCC_OscConfig+0x278>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e22:	f7fe fb01 	bl	8004428 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e2a:	f7fe fafd 	bl	8004428 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e12f      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_RCC_OscConfig+0x270>)
 8005e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x22e>
 8005e48:	e01c      	b.n	8005e84 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_RCC_OscConfig+0x278>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e50:	f7fe faea 	bl	8004428 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e56:	e00f      	b.n	8005e78 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e58:	f7fe fae6 	bl	8004428 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d908      	bls.n	8005e78 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e118      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	42470000 	.word	0x42470000
 8005e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e78:	4b8a      	ldr	r3, [pc, #552]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e9      	bne.n	8005e58 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8097 	beq.w	8005fc0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e96:	4b83      	ldr	r3, [pc, #524]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10f      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	4b7f      	ldr	r3, [pc, #508]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	4a7e      	ldr	r2, [pc, #504]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb2:	4b7c      	ldr	r3, [pc, #496]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec2:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d118      	bne.n	8005f00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ece:	4b76      	ldr	r3, [pc, #472]	; (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a75      	ldr	r2, [pc, #468]	; (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eda:	f7fe faa5 	bl	8004428 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee2:	f7fe faa1 	bl	8004428 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0d3      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef4:	4b6c      	ldr	r3, [pc, #432]	; (80060a8 <HAL_RCC_OscConfig+0x4ac>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d106      	bne.n	8005f16 <HAL_RCC_OscConfig+0x31a>
 8005f08:	4b66      	ldr	r3, [pc, #408]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70
 8005f14:	e01c      	b.n	8005f50 <HAL_RCC_OscConfig+0x354>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x33c>
 8005f1e:	4b61      	ldr	r3, [pc, #388]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	4a60      	ldr	r2, [pc, #384]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f24:	f043 0304 	orr.w	r3, r3, #4
 8005f28:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2a:	4b5e      	ldr	r3, [pc, #376]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a5d      	ldr	r2, [pc, #372]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	e00b      	b.n	8005f50 <HAL_RCC_OscConfig+0x354>
 8005f38:	4b5a      	ldr	r3, [pc, #360]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4a59      	ldr	r2, [pc, #356]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	6713      	str	r3, [r2, #112]	; 0x70
 8005f44:	4b57      	ldr	r3, [pc, #348]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	4a56      	ldr	r2, [pc, #344]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f4a:	f023 0304 	bic.w	r3, r3, #4
 8005f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fe fa66 	bl	8004428 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f60:	f7fe fa62 	bl	8004428 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e092      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f76:	4b4b      	ldr	r3, [pc, #300]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0ee      	beq.n	8005f60 <HAL_RCC_OscConfig+0x364>
 8005f82:	e014      	b.n	8005fae <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f84:	f7fe fa50 	bl	8004428 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f8c:	f7fe fa4c 	bl	8004428 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e07c      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa2:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1ee      	bne.n	8005f8c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb4:	4b3b      	ldr	r3, [pc, #236]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	4a3a      	ldr	r2, [pc, #232]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d068      	beq.n	800609a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc8:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 030c 	and.w	r3, r3, #12
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d060      	beq.n	8006096 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d145      	bne.n	8006068 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fdc:	4b33      	ldr	r3, [pc, #204]	; (80060ac <HAL_RCC_OscConfig+0x4b0>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe2:	f7fe fa21 	bl	8004428 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fea:	f7fe fa1d 	bl	8004428 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e04f      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffc:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69da      	ldr	r2, [r3, #28]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	019b      	lsls	r3, r3, #6
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	085b      	lsrs	r3, r3, #1
 8006020:	3b01      	subs	r3, #1
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	061b      	lsls	r3, r3, #24
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	071b      	lsls	r3, r3, #28
 8006034:	491b      	ldr	r1, [pc, #108]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 8006036:	4313      	orrs	r3, r2
 8006038:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800603a:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <HAL_RCC_OscConfig+0x4b0>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fe f9f2 	bl	8004428 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fe f9ee 	bl	8004428 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e020      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605a:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0x44c>
 8006066:	e018      	b.n	800609a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006068:	4b10      	ldr	r3, [pc, #64]	; (80060ac <HAL_RCC_OscConfig+0x4b0>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606e:	f7fe f9db 	bl	8004428 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006076:	f7fe f9d7 	bl	8004428 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e009      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006088:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <HAL_RCC_OscConfig+0x4a8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x47a>
 8006094:	e001      	b.n	800609a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40023800 	.word	0x40023800
 80060a8:	40007000 	.word	0x40007000
 80060ac:	42470060 	.word	0x42470060

080060b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e01d      	b.n	80060fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fd fefc 	bl	8003ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f000 fdf2 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b06      	cmp	r3, #6
 8006126:	d007      	beq.n	8006138 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	f241 1311 	movw	r3, #4369	; 0x1111
 8006168:	4013      	ands	r3, r2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_TIM_Base_Stop+0x40>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a1a      	ldr	r2, [r3, #32]
 8006174:	f240 4344 	movw	r3, #1092	; 0x444
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d107      	bne.n	800618e <HAL_TIM_Base_Stop+0x40>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d007      	beq.n	80061de <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e01d      	b.n	800623a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f815 	bl	8006242 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f000 fd54 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d841      	bhi.n	80062ec <HAL_TIM_OC_Start_IT+0x94>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <HAL_TIM_OC_Start_IT+0x18>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080062ed 	.word	0x080062ed
 8006278:	080062ed 	.word	0x080062ed
 800627c:	080062ed 	.word	0x080062ed
 8006280:	080062b7 	.word	0x080062b7
 8006284:	080062ed 	.word	0x080062ed
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080062ed 	.word	0x080062ed
 8006290:	080062c9 	.word	0x080062c9
 8006294:	080062ed 	.word	0x080062ed
 8006298:	080062ed 	.word	0x080062ed
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	080062db 	.word	0x080062db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0202 	orr.w	r2, r2, #2
 80062b2:	60da      	str	r2, [r3, #12]
      break;
 80062b4:	e01b      	b.n	80062ee <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0204 	orr.w	r2, r2, #4
 80062c4:	60da      	str	r2, [r3, #12]
      break;
 80062c6:	e012      	b.n	80062ee <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	60da      	str	r2, [r3, #12]
      break;
 80062d8:	e009      	b.n	80062ee <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0210 	orr.w	r2, r2, #16
 80062e8:	60da      	str	r2, [r3, #12]
      break;
 80062ea:	e000      	b.n	80062ee <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80062ec:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f902 	bl	8007500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <HAL_TIM_OC_Start_IT+0x100>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIM_OC_Start_IT+0xb8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a14      	ldr	r2, [pc, #80]	; (800635c <HAL_TIM_OC_Start_IT+0x104>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_TIM_OC_Start_IT+0xbc>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_TIM_OC_Start_IT+0xbe>
 8006314:	2300      	movs	r3, #0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b06      	cmp	r3, #6
 800633a:	d007      	beq.n	800634c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	d841      	bhi.n	80063f4 <HAL_TIM_OC_Stop_IT+0x94>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_TIM_OC_Stop_IT+0x18>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080063f5 	.word	0x080063f5
 8006380:	080063f5 	.word	0x080063f5
 8006384:	080063f5 	.word	0x080063f5
 8006388:	080063bf 	.word	0x080063bf
 800638c:	080063f5 	.word	0x080063f5
 8006390:	080063f5 	.word	0x080063f5
 8006394:	080063f5 	.word	0x080063f5
 8006398:	080063d1 	.word	0x080063d1
 800639c:	080063f5 	.word	0x080063f5
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	080063f5 	.word	0x080063f5
 80063a8:	080063e3 	.word	0x080063e3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0202 	bic.w	r2, r2, #2
 80063ba:	60da      	str	r2, [r3, #12]
      break;
 80063bc:	e01b      	b.n	80063f6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0204 	bic.w	r2, r2, #4
 80063cc:	60da      	str	r2, [r3, #12]
      break;
 80063ce:	e012      	b.n	80063f6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0208 	bic.w	r2, r2, #8
 80063de:	60da      	str	r2, [r3, #12]
      break;
 80063e0:	e009      	b.n	80063f6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0210 	bic.w	r2, r2, #16
 80063f0:	60da      	str	r2, [r3, #12]
      break;
 80063f2:	e000      	b.n	80063f6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80063f4:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2200      	movs	r2, #0
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 f87e 	bl	8007500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a20      	ldr	r2, [pc, #128]	; (800648c <HAL_TIM_OC_Stop_IT+0x12c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_TIM_OC_Stop_IT+0xb8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <HAL_TIM_OC_Stop_IT+0x130>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d101      	bne.n	800641c <HAL_TIM_OC_Stop_IT+0xbc>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <HAL_TIM_OC_Stop_IT+0xbe>
 800641c:	2300      	movs	r3, #0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d017      	beq.n	8006452 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	f241 1311 	movw	r3, #4369	; 0x1111
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <HAL_TIM_OC_Stop_IT+0xf2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	f240 4344 	movw	r3, #1092	; 0x444
 800643c:	4013      	ands	r3, r2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d107      	bne.n	8006452 <HAL_TIM_OC_Stop_IT+0xf2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	f241 1311 	movw	r3, #4369	; 0x1111
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10f      	bne.n	8006482 <HAL_TIM_OC_Stop_IT+0x122>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	f240 4344 	movw	r3, #1092	; 0x444
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_TIM_OC_Stop_IT+0x122>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e01d      	b.n	80064e2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f815 	bl	80064ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f000 fc00 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b0c      	cmp	r3, #12
 800650e:	d841      	bhi.n	8006594 <HAL_TIM_IC_Start_IT+0x94>
 8006510:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <HAL_TIM_IC_Start_IT+0x18>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	0800654d 	.word	0x0800654d
 800651c:	08006595 	.word	0x08006595
 8006520:	08006595 	.word	0x08006595
 8006524:	08006595 	.word	0x08006595
 8006528:	0800655f 	.word	0x0800655f
 800652c:	08006595 	.word	0x08006595
 8006530:	08006595 	.word	0x08006595
 8006534:	08006595 	.word	0x08006595
 8006538:	08006571 	.word	0x08006571
 800653c:	08006595 	.word	0x08006595
 8006540:	08006595 	.word	0x08006595
 8006544:	08006595 	.word	0x08006595
 8006548:	08006583 	.word	0x08006583
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0202 	orr.w	r2, r2, #2
 800655a:	60da      	str	r2, [r3, #12]
      break;
 800655c:	e01b      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0204 	orr.w	r2, r2, #4
 800656c:	60da      	str	r2, [r3, #12]
      break;
 800656e:	e012      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0208 	orr.w	r2, r2, #8
 800657e:	60da      	str	r2, [r3, #12]
      break;
 8006580:	e009      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0210 	orr.w	r2, r2, #16
 8006590:	60da      	str	r2, [r3, #12]
      break;
 8006592:	e000      	b.n	8006596 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006594:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2201      	movs	r2, #1
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ffae 	bl	8007500 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	d007      	beq.n	80065c6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d841      	bhi.n	8006664 <HAL_TIM_IC_Stop_IT+0x94>
 80065e0:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <HAL_TIM_IC_Stop_IT+0x18>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	08006665 	.word	0x08006665
 80065f0:	08006665 	.word	0x08006665
 80065f4:	08006665 	.word	0x08006665
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	08006665 	.word	0x08006665
 8006600:	08006665 	.word	0x08006665
 8006604:	08006665 	.word	0x08006665
 8006608:	08006641 	.word	0x08006641
 800660c:	08006665 	.word	0x08006665
 8006610:	08006665 	.word	0x08006665
 8006614:	08006665 	.word	0x08006665
 8006618:	08006653 	.word	0x08006653
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0202 	bic.w	r2, r2, #2
 800662a:	60da      	str	r2, [r3, #12]
      break;
 800662c:	e01b      	b.n	8006666 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0204 	bic.w	r2, r2, #4
 800663c:	60da      	str	r2, [r3, #12]
      break;
 800663e:	e012      	b.n	8006666 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0208 	bic.w	r2, r2, #8
 800664e:	60da      	str	r2, [r3, #12]
      break;
 8006650:	e009      	b.n	8006666 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0210 	bic.w	r2, r2, #16
 8006660:	60da      	str	r2, [r3, #12]
      break;
 8006662:	e000      	b.n	8006666 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8006664:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 ff46 	bl	8007500 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6a1a      	ldr	r2, [r3, #32]
 800667a:	f241 1311 	movw	r3, #4369	; 0x1111
 800667e:	4013      	ands	r3, r2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10f      	bne.n	80066a4 <HAL_TIM_IC_Stop_IT+0xd4>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6a1a      	ldr	r2, [r3, #32]
 800668a:	f240 4344 	movw	r3, #1092	; 0x444
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_IC_Stop_IT+0xd4>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d122      	bne.n	800670c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d11b      	bne.n	800670c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0202 	mvn.w	r2, #2
 80066dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fd faee 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fd fabc 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fad5 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d122      	bne.n	8006760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d11b      	bne.n	8006760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0204 	mvn.w	r2, #4
 8006730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fd fac4 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fd fa92 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 faab 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b08      	cmp	r3, #8
 800676c:	d122      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b08      	cmp	r3, #8
 800677a:	d11b      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0208 	mvn.w	r2, #8
 8006784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2204      	movs	r2, #4
 800678a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fd fa9a 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 80067a0:	e005      	b.n	80067ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fd fa68 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fa81 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b10      	cmp	r3, #16
 80067c0:	d122      	bne.n	8006808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d11b      	bne.n	8006808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0210 	mvn.w	r2, #16
 80067d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2208      	movs	r2, #8
 80067de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fd fa70 	bl	8003cd4 <HAL_TIM_IC_CaptureCallback>
 80067f4:	e005      	b.n	8006802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fd fa3e 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa57 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d10e      	bne.n	8006834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b01      	cmp	r3, #1
 8006822:	d107      	bne.n	8006834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0201 	mvn.w	r2, #1
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fd fa3e 	bl	8003cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b80      	cmp	r3, #128	; 0x80
 8006840:	d10e      	bne.n	8006860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d107      	bne.n	8006860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fefc 	bl	8007658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d10e      	bne.n	800688c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d107      	bne.n	800688c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa1c 	bl	8006cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b20      	cmp	r3, #32
 8006898:	d10e      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d107      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0220 	mvn.w	r2, #32
 80068b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fec6 	bl	8007644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_TIM_OC_ConfigChannel+0x1a>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e04e      	b.n	8006978 <HAL_TIM_OC_ConfigChannel+0xb8>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	d839      	bhi.n	8006964 <HAL_TIM_OC_ConfigChannel+0xa4>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800692d 	.word	0x0800692d
 80068fc:	08006965 	.word	0x08006965
 8006900:	08006965 	.word	0x08006965
 8006904:	08006965 	.word	0x08006965
 8006908:	0800693b 	.word	0x0800693b
 800690c:	08006965 	.word	0x08006965
 8006910:	08006965 	.word	0x08006965
 8006914:	08006965 	.word	0x08006965
 8006918:	08006949 	.word	0x08006949
 800691c:	08006965 	.word	0x08006965
 8006920:	08006965 	.word	0x08006965
 8006924:	08006965 	.word	0x08006965
 8006928:	08006957 	.word	0x08006957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fa70 	bl	8006e18 <TIM_OC1_SetConfig>
      break;
 8006938:	e015      	b.n	8006966 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fad9 	bl	8006ef8 <TIM_OC2_SetConfig>
      break;
 8006946:	e00e      	b.n	8006966 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb48 	bl	8006fe4 <TIM_OC3_SetConfig>
      break;
 8006954:	e007      	b.n	8006966 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fbb5 	bl	80070cc <TIM_OC4_SetConfig>
      break;
 8006962:	e000      	b.n	8006966 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006964:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006996:	2302      	movs	r3, #2
 8006998:	e08a      	b.n	8006ab0 <HAL_TIM_IC_ConfigChannel+0x130>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2202      	movs	r2, #2
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d11b      	bne.n	80069e8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6819      	ldr	r1, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f000 fbda 	bl	8007178 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 020c 	bic.w	r2, r2, #12
 80069d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6999      	ldr	r1, [r3, #24]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	619a      	str	r2, [r3, #24]
 80069e6:	e05a      	b.n	8006a9e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d11c      	bne.n	8006a28 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6819      	ldr	r1, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f000 fc5e 	bl	80072be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a10:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6999      	ldr	r1, [r3, #24]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	021a      	lsls	r2, r3, #8
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	619a      	str	r2, [r3, #24]
 8006a26:	e03a      	b.n	8006a9e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d11b      	bne.n	8006a66 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f000 fcab 	bl	8007398 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 020c 	bic.w	r2, r2, #12
 8006a50:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69d9      	ldr	r1, [r3, #28]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	61da      	str	r2, [r3, #28]
 8006a64:	e01b      	b.n	8006a9e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6819      	ldr	r1, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f000 fccb 	bl	8007410 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a88:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	021a      	lsls	r2, r3, #8
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_TIM_ConfigClockSource+0x18>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e0a6      	b.n	8006c1e <HAL_TIM_ConfigClockSource+0x166>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d067      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0x120>
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d80b      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x6c>
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d073      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0x140>
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d802      	bhi.n	8006b1a <HAL_TIM_ConfigClockSource+0x62>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d06f      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b18:	e078      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d06c      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0x140>
 8006b1e:	2b30      	cmp	r3, #48	; 0x30
 8006b20:	d06a      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006b22:	e073      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b24:	2b70      	cmp	r3, #112	; 0x70
 8006b26:	d00d      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0x8c>
 8006b28:	2b70      	cmp	r3, #112	; 0x70
 8006b2a:	d804      	bhi.n	8006b36 <HAL_TIM_ConfigClockSource+0x7e>
 8006b2c:	2b50      	cmp	r3, #80	; 0x50
 8006b2e:	d033      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0xe0>
 8006b30:	2b60      	cmp	r3, #96	; 0x60
 8006b32:	d041      	beq.n	8006bb8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006b34:	e06a      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3a:	d066      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x152>
 8006b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b40:	d017      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006b42:	e063      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6899      	ldr	r1, [r3, #8]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f000 fcb4 	bl	80074c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
      break;
 8006b70:	e04c      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6899      	ldr	r1, [r3, #8]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f000 fc9d 	bl	80074c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b94:	609a      	str	r2, [r3, #8]
      break;
 8006b96:	e039      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6859      	ldr	r1, [r3, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f000 fb5b 	bl	8007260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2150      	movs	r1, #80	; 0x50
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fc6a 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006bb6:	e029      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	6859      	ldr	r1, [r3, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f000 fbb7 	bl	8007338 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2160      	movs	r1, #96	; 0x60
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fc5a 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006bd6:	e019      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6859      	ldr	r1, [r3, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	461a      	mov	r2, r3
 8006be6:	f000 fb3b 	bl	8007260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2140      	movs	r1, #64	; 0x40
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fc4a 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006bf6:	e009      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f000 fc41 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006c08:	e000      	b.n	8006c0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b0c      	cmp	r3, #12
 8006c3a:	d831      	bhi.n	8006ca0 <HAL_TIM_ReadCapturedValue+0x78>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c79 	.word	0x08006c79
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006ca1 	.word	0x08006ca1
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006c83 	.word	0x08006c83
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006c8d 	.word	0x08006c8d
 8006c68:	08006ca1 	.word	0x08006ca1
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006ca1 	.word	0x08006ca1
 8006c74:	08006c97 	.word	0x08006c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	60fb      	str	r3, [r7, #12]

      break;
 8006c80:	e00f      	b.n	8006ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	60fb      	str	r3, [r7, #12]

      break;
 8006c8a:	e00a      	b.n	8006ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	60fb      	str	r3, [r7, #12]

      break;
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	60fb      	str	r3, [r7, #12]

      break;
 8006c9e:	e000      	b.n	8006ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006ca0:	bf00      	nop
  }

  return tmpreg;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a40      	ldr	r2, [pc, #256]	; (8006dec <TIM_Base_SetConfig+0x114>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf6:	d00f      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a3d      	ldr	r2, [pc, #244]	; (8006df0 <TIM_Base_SetConfig+0x118>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00b      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a3c      	ldr	r2, [pc, #240]	; (8006df4 <TIM_Base_SetConfig+0x11c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d007      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a3b      	ldr	r2, [pc, #236]	; (8006df8 <TIM_Base_SetConfig+0x120>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a3a      	ldr	r2, [pc, #232]	; (8006dfc <TIM_Base_SetConfig+0x124>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d108      	bne.n	8006d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2f      	ldr	r2, [pc, #188]	; (8006dec <TIM_Base_SetConfig+0x114>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d02b      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d38:	d027      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <TIM_Base_SetConfig+0x118>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d023      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <TIM_Base_SetConfig+0x11c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01f      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <TIM_Base_SetConfig+0x120>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01b      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a29      	ldr	r2, [pc, #164]	; (8006dfc <TIM_Base_SetConfig+0x124>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d017      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <TIM_Base_SetConfig+0x128>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <TIM_Base_SetConfig+0x12c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00f      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <TIM_Base_SetConfig+0x130>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00b      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <TIM_Base_SetConfig+0x134>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d007      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a24      	ldr	r2, [pc, #144]	; (8006e10 <TIM_Base_SetConfig+0x138>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a23      	ldr	r2, [pc, #140]	; (8006e14 <TIM_Base_SetConfig+0x13c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d108      	bne.n	8006d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <TIM_Base_SetConfig+0x114>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_Base_SetConfig+0xf8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a0c      	ldr	r2, [pc, #48]	; (8006dfc <TIM_Base_SetConfig+0x124>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d103      	bne.n	8006dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	615a      	str	r2, [r3, #20]
}
 8006dde:	bf00      	nop
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40010000 	.word	0x40010000
 8006df0:	40000400 	.word	0x40000400
 8006df4:	40000800 	.word	0x40000800
 8006df8:	40000c00 	.word	0x40000c00
 8006dfc:	40010400 	.word	0x40010400
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400
 8006e08:	40014800 	.word	0x40014800
 8006e0c:	40001800 	.word	0x40001800
 8006e10:	40001c00 	.word	0x40001c00
 8006e14:	40002000 	.word	0x40002000

08006e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f023 0201 	bic.w	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 0302 	bic.w	r3, r3, #2
 8006e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <TIM_OC1_SetConfig+0xd8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_OC1_SetConfig+0x64>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <TIM_OC1_SetConfig+0xdc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d10c      	bne.n	8006e96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 0308 	bic.w	r3, r3, #8
 8006e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f023 0304 	bic.w	r3, r3, #4
 8006e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a15      	ldr	r2, [pc, #84]	; (8006ef0 <TIM_OC1_SetConfig+0xd8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC1_SetConfig+0x8e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a14      	ldr	r2, [pc, #80]	; (8006ef4 <TIM_OC1_SetConfig+0xdc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d111      	bne.n	8006eca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	621a      	str	r2, [r3, #32]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	40010000 	.word	0x40010000
 8006ef4:	40010400 	.word	0x40010400

08006ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0210 	bic.w	r2, r3, #16
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0320 	bic.w	r3, r3, #32
 8006f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a22      	ldr	r2, [pc, #136]	; (8006fdc <TIM_OC2_SetConfig+0xe4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_OC2_SetConfig+0x68>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a21      	ldr	r2, [pc, #132]	; (8006fe0 <TIM_OC2_SetConfig+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10d      	bne.n	8006f7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <TIM_OC2_SetConfig+0xe4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_OC2_SetConfig+0x94>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <TIM_OC2_SetConfig+0xe8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d113      	bne.n	8006fb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40010400 	.word	0x40010400

08006fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800702c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a21      	ldr	r2, [pc, #132]	; (80070c4 <TIM_OC3_SetConfig+0xe0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_OC3_SetConfig+0x66>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a20      	ldr	r2, [pc, #128]	; (80070c8 <TIM_OC3_SetConfig+0xe4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d10d      	bne.n	8007066 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <TIM_OC3_SetConfig+0xe0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <TIM_OC3_SetConfig+0x92>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a15      	ldr	r2, [pc, #84]	; (80070c8 <TIM_OC3_SetConfig+0xe4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d113      	bne.n	800709e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800707c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	621a      	str	r2, [r3, #32]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40010400 	.word	0x40010400

080070cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	031b      	lsls	r3, r3, #12
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a12      	ldr	r2, [pc, #72]	; (8007170 <TIM_OC4_SetConfig+0xa4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_OC4_SetConfig+0x68>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a11      	ldr	r2, [pc, #68]	; (8007174 <TIM_OC4_SetConfig+0xa8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d109      	bne.n	8007148 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	019b      	lsls	r3, r3, #6
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40010000 	.word	0x40010000
 8007174:	40010400 	.word	0x40010400

08007178 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4a28      	ldr	r2, [pc, #160]	; (8007244 <TIM_TI1_SetConfig+0xcc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d01b      	beq.n	80071de <TIM_TI1_SetConfig+0x66>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ac:	d017      	beq.n	80071de <TIM_TI1_SetConfig+0x66>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a25      	ldr	r2, [pc, #148]	; (8007248 <TIM_TI1_SetConfig+0xd0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <TIM_TI1_SetConfig+0x66>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a24      	ldr	r2, [pc, #144]	; (800724c <TIM_TI1_SetConfig+0xd4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00f      	beq.n	80071de <TIM_TI1_SetConfig+0x66>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a23      	ldr	r2, [pc, #140]	; (8007250 <TIM_TI1_SetConfig+0xd8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00b      	beq.n	80071de <TIM_TI1_SetConfig+0x66>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4a22      	ldr	r2, [pc, #136]	; (8007254 <TIM_TI1_SetConfig+0xdc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d007      	beq.n	80071de <TIM_TI1_SetConfig+0x66>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a21      	ldr	r2, [pc, #132]	; (8007258 <TIM_TI1_SetConfig+0xe0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d003      	beq.n	80071de <TIM_TI1_SetConfig+0x66>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a20      	ldr	r2, [pc, #128]	; (800725c <TIM_TI1_SetConfig+0xe4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <TIM_TI1_SetConfig+0x6a>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <TIM_TI1_SetConfig+0x6c>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f023 0303 	bic.w	r3, r3, #3
 80071ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	e003      	b.n	8007202 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	b2db      	uxtb	r3, r3
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f023 030a 	bic.w	r3, r3, #10
 800721c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 030a 	and.w	r3, r3, #10
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	621a      	str	r2, [r3, #32]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40010000 	.word	0x40010000
 8007248:	40000400 	.word	0x40000400
 800724c:	40000800 	.word	0x40000800
 8007250:	40000c00 	.word	0x40000c00
 8007254:	40010400 	.word	0x40010400
 8007258:	40014000 	.word	0x40014000
 800725c:	40001800 	.word	0x40001800

08007260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f023 0201 	bic.w	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800728a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f023 030a 	bic.w	r3, r3, #10
 800729c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	621a      	str	r2, [r3, #32]
}
 80072b2:	bf00      	nop
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072be:	b480      	push	{r7}
 80072c0:	b087      	sub	sp, #28
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	f023 0210 	bic.w	r2, r3, #16
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	b29b      	uxth	r3, r3
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007310:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	621a      	str	r2, [r3, #32]
}
 800732c:	bf00      	nop
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f023 0210 	bic.w	r2, r3, #16
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007362:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	031b      	lsls	r3, r3, #12
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007374:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	621a      	str	r2, [r3, #32]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f023 0303 	bic.w	r3, r3, #3
 80073c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80073e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	621a      	str	r2, [r3, #32]
}
 8007404:	bf00      	nop
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800744e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	031b      	lsls	r3, r3, #12
 8007454:	b29b      	uxth	r3, r3
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007462:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	031b      	lsls	r3, r3, #12
 8007468:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f043 0307 	orr.w	r3, r3, #7
 80074ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	609a      	str	r2, [r3, #8]
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	021a      	lsls	r2, r3, #8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	609a      	str	r2, [r3, #8]
}
 80074f4:	bf00      	nop
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2201      	movs	r2, #1
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	43db      	mvns	r3, r3
 8007522:	401a      	ands	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	fa01 f303 	lsl.w	r3, r1, r3
 8007538:	431a      	orrs	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007560:	2302      	movs	r3, #2
 8007562:	e05a      	b.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a21      	ldr	r2, [pc, #132]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d022      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b0:	d01d      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1d      	ldr	r2, [pc, #116]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d018      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1b      	ldr	r2, [pc, #108]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d013      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00e      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a18      	ldr	r2, [pc, #96]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d009      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a17      	ldr	r2, [pc, #92]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d004      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d10c      	bne.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	40010000 	.word	0x40010000
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	40010400 	.word	0x40010400
 800763c:	40014000 	.word	0x40014000
 8007640:	40001800 	.word	0x40001800

08007644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e03f      	b.n	80076fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fc fd2a 	bl	80040ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2224      	movs	r2, #36	; 0x24
 800769c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fb97 	bl	8007de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b088      	sub	sp, #32
 800770a:	af02      	add	r7, sp, #8
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b20      	cmp	r3, #32
 8007724:	f040 8083 	bne.w	800782e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <HAL_UART_Transmit+0x2e>
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e07b      	b.n	8007830 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800773e:	2b01      	cmp	r3, #1
 8007740:	d101      	bne.n	8007746 <HAL_UART_Transmit+0x40>
 8007742:	2302      	movs	r3, #2
 8007744:	e074      	b.n	8007830 <HAL_UART_Transmit+0x12a>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2221      	movs	r2, #33	; 0x21
 8007758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800775c:	f7fc fe64 	bl	8004428 <HAL_GetTick>
 8007760:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007776:	e042      	b.n	80077fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778e:	d122      	bne.n	80077d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	2180      	movs	r1, #128	; 0x80
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f9b6 	bl	8007b0c <UART_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e042      	b.n	8007830 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d103      	bne.n	80077ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	3302      	adds	r3, #2
 80077ca:	60bb      	str	r3, [r7, #8]
 80077cc:	e017      	b.n	80077fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60bb      	str	r3, [r7, #8]
 80077d4:	e013      	b.n	80077fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2200      	movs	r2, #0
 80077de:	2180      	movs	r1, #128	; 0x80
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f993 	bl	8007b0c <UART_WaitOnFlagUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e01f      	b.n	8007830 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	60ba      	str	r2, [r7, #8]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1b7      	bne.n	8007778 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2200      	movs	r2, #0
 8007810:	2140      	movs	r1, #64	; 0x40
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f97a 	bl	8007b0c <UART_WaitOnFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e006      	b.n	8007830 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2220      	movs	r2, #32
 8007826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	e000      	b.n	8007830 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800782e:	2302      	movs	r3, #2
  }
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b20      	cmp	r3, #32
 8007850:	d140      	bne.n	80078d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_UART_Receive_IT+0x26>
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e039      	b.n	80078d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_UART_Receive_IT+0x38>
 800786c:	2302      	movs	r3, #2
 800786e:	e032      	b.n	80078d6 <HAL_UART_Receive_IT+0x9e>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2222      	movs	r2, #34	; 0x22
 8007894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695a      	ldr	r2, [r3, #20]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0220 	orr.w	r2, r2, #32
 80078ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e000      	b.n	80078d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80078d4:	2302      	movs	r3, #2
  }
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10d      	bne.n	8007936 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_UART_IRQHandler+0x52>
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f9d6 	bl	8007ce0 <UART_Receive_IT>
      return;
 8007934:	e0d1      	b.n	8007ada <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80b0 	beq.w	8007a9e <HAL_UART_IRQHandler+0x1ba>
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d105      	bne.n	8007954 <HAL_UART_IRQHandler+0x70>
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 80a5 	beq.w	8007a9e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <HAL_UART_IRQHandler+0x90>
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	f043 0201 	orr.w	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_UART_IRQHandler+0xb0>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	f043 0202 	orr.w	r2, r3, #2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <HAL_UART_IRQHandler+0xd0>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ac:	f043 0204 	orr.w	r2, r3, #4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00f      	beq.n	80079de <HAL_UART_IRQHandler+0xfa>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <HAL_UART_IRQHandler+0xee>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d005      	beq.n	80079de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	f043 0208 	orr.w	r2, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d078      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d007      	beq.n	8007a00 <HAL_UART_IRQHandler+0x11c>
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f970 	bl	8007ce0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b40      	cmp	r3, #64	; 0x40
 8007a0c:	bf0c      	ite	eq
 8007a0e:	2301      	moveq	r3, #1
 8007a10:	2300      	movne	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <HAL_UART_IRQHandler+0x144>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d031      	beq.n	8007a8c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8b9 	bl	8007ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d123      	bne.n	8007a84 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d013      	beq.n	8007a7c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a58:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <HAL_UART_IRQHandler+0x1fc>)
 8007a5a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fd f99d 	bl	8004da0 <HAL_DMA_Abort_IT>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d016      	beq.n	8007a9a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a76:	4610      	mov	r0, r2
 8007a78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7a:	e00e      	b.n	8007a9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f83b 	bl	8007af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a82:	e00a      	b.n	8007a9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f837 	bl	8007af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8a:	e006      	b.n	8007a9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f833 	bl	8007af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007a98:	e01e      	b.n	8007ad8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9a:	bf00      	nop
    return;
 8007a9c:	e01c      	b.n	8007ad8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d008      	beq.n	8007aba <HAL_UART_IRQHandler+0x1d6>
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f8a6 	bl	8007c04 <UART_Transmit_IT>
    return;
 8007ab8:	e00f      	b.n	8007ada <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <HAL_UART_IRQHandler+0x1f6>
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8ee 	bl	8007cb0 <UART_EndTransmit_IT>
    return;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <HAL_UART_IRQHandler+0x1f6>
    return;
 8007ad8:	bf00      	nop
  }
}
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	08007bdd 	.word	0x08007bdd

08007ae4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b1c:	e02c      	b.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d028      	beq.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b2c:	f7fc fc7c 	bl	8004428 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d21d      	bcs.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695a      	ldr	r2, [r3, #20]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e00f      	b.n	8007b98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	4013      	ands	r3, r2
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	bf0c      	ite	eq
 8007b88:	2301      	moveq	r3, #1
 8007b8a:	2300      	movne	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d0c3      	beq.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695a      	ldr	r2, [r3, #20]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff ff7e 	bl	8007af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b21      	cmp	r3, #33	; 0x21
 8007c16:	d144      	bne.n	8007ca2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c20:	d11a      	bne.n	8007c58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d105      	bne.n	8007c4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	1c9a      	adds	r2, r3, #2
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]
 8007c4a:	e00e      	b.n	8007c6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	621a      	str	r2, [r3, #32]
 8007c56:	e008      	b.n	8007c6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	1c59      	adds	r1, r3, #1
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6211      	str	r1, [r2, #32]
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	4619      	mov	r1, r3
 8007c78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10f      	bne.n	8007c9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e000      	b.n	8007ca4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ca2:	2302      	movs	r3, #2
  }
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff ff07 	bl	8007ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b22      	cmp	r3, #34	; 0x22
 8007cf2:	d171      	bne.n	8007dd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfc:	d123      	bne.n	8007d46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10e      	bne.n	8007d2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	1c9a      	adds	r2, r3, #2
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	629a      	str	r2, [r3, #40]	; 0x28
 8007d28:	e029      	b.n	8007d7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	629a      	str	r2, [r3, #40]	; 0x28
 8007d44:	e01b      	b.n	8007d7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6858      	ldr	r0, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	1c59      	adds	r1, r3, #1
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6291      	str	r1, [r2, #40]	; 0x28
 8007d5e:	b2c2      	uxtb	r2, r0
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	e00c      	b.n	8007d7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	1c58      	adds	r0, r3, #1
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	6288      	str	r0, [r1, #40]	; 0x28
 8007d76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d120      	bne.n	8007dd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0220 	bic.w	r2, r2, #32
 8007da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695a      	ldr	r2, [r3, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fb ffa0 	bl	8003d10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e002      	b.n	8007dda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	e000      	b.n	8007dda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007dd8:	2302      	movs	r3, #2
  }
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007e26:	f023 030c 	bic.w	r3, r3, #12
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	430b      	orrs	r3, r1
 8007e32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e52:	f040 818b 	bne.w	800816c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4ac1      	ldr	r2, [pc, #772]	; (8008160 <UART_SetConfig+0x37c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d005      	beq.n	8007e6c <UART_SetConfig+0x88>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4abf      	ldr	r2, [pc, #764]	; (8008164 <UART_SetConfig+0x380>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	f040 80bd 	bne.w	8007fe6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e6c:	f7fd fd12 	bl	8005894 <HAL_RCC_GetPCLK2Freq>
 8007e70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	461d      	mov	r5, r3
 8007e76:	f04f 0600 	mov.w	r6, #0
 8007e7a:	46a8      	mov	r8, r5
 8007e7c:	46b1      	mov	r9, r6
 8007e7e:	eb18 0308 	adds.w	r3, r8, r8
 8007e82:	eb49 0409 	adc.w	r4, r9, r9
 8007e86:	4698      	mov	r8, r3
 8007e88:	46a1      	mov	r9, r4
 8007e8a:	eb18 0805 	adds.w	r8, r8, r5
 8007e8e:	eb49 0906 	adc.w	r9, r9, r6
 8007e92:	f04f 0100 	mov.w	r1, #0
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ea2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ea6:	4688      	mov	r8, r1
 8007ea8:	4691      	mov	r9, r2
 8007eaa:	eb18 0005 	adds.w	r0, r8, r5
 8007eae:	eb49 0106 	adc.w	r1, r9, r6
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	f04f 0600 	mov.w	r6, #0
 8007ebc:	196b      	adds	r3, r5, r5
 8007ebe:	eb46 0406 	adc.w	r4, r6, r6
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	f7f8 feaf 	bl	8000c28 <__aeabi_uldivmod>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4ba5      	ldr	r3, [pc, #660]	; (8008168 <UART_SetConfig+0x384>)
 8007ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	461d      	mov	r5, r3
 8007ee0:	f04f 0600 	mov.w	r6, #0
 8007ee4:	46a9      	mov	r9, r5
 8007ee6:	46b2      	mov	sl, r6
 8007ee8:	eb19 0309 	adds.w	r3, r9, r9
 8007eec:	eb4a 040a 	adc.w	r4, sl, sl
 8007ef0:	4699      	mov	r9, r3
 8007ef2:	46a2      	mov	sl, r4
 8007ef4:	eb19 0905 	adds.w	r9, r9, r5
 8007ef8:	eb4a 0a06 	adc.w	sl, sl, r6
 8007efc:	f04f 0100 	mov.w	r1, #0
 8007f00:	f04f 0200 	mov.w	r2, #0
 8007f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f10:	4689      	mov	r9, r1
 8007f12:	4692      	mov	sl, r2
 8007f14:	eb19 0005 	adds.w	r0, r9, r5
 8007f18:	eb4a 0106 	adc.w	r1, sl, r6
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	461d      	mov	r5, r3
 8007f22:	f04f 0600 	mov.w	r6, #0
 8007f26:	196b      	adds	r3, r5, r5
 8007f28:	eb46 0406 	adc.w	r4, r6, r6
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4623      	mov	r3, r4
 8007f30:	f7f8 fe7a 	bl	8000c28 <__aeabi_uldivmod>
 8007f34:	4603      	mov	r3, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4b8b      	ldr	r3, [pc, #556]	; (8008168 <UART_SetConfig+0x384>)
 8007f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f40:	095b      	lsrs	r3, r3, #5
 8007f42:	2164      	movs	r1, #100	; 0x64
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	3332      	adds	r3, #50	; 0x32
 8007f4e:	4a86      	ldr	r2, [pc, #536]	; (8008168 <UART_SetConfig+0x384>)
 8007f50:	fba2 2303 	umull	r2, r3, r2, r3
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f5c:	4498      	add	r8, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	461d      	mov	r5, r3
 8007f62:	f04f 0600 	mov.w	r6, #0
 8007f66:	46a9      	mov	r9, r5
 8007f68:	46b2      	mov	sl, r6
 8007f6a:	eb19 0309 	adds.w	r3, r9, r9
 8007f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8007f72:	4699      	mov	r9, r3
 8007f74:	46a2      	mov	sl, r4
 8007f76:	eb19 0905 	adds.w	r9, r9, r5
 8007f7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f7e:	f04f 0100 	mov.w	r1, #0
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f92:	4689      	mov	r9, r1
 8007f94:	4692      	mov	sl, r2
 8007f96:	eb19 0005 	adds.w	r0, r9, r5
 8007f9a:	eb4a 0106 	adc.w	r1, sl, r6
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	461d      	mov	r5, r3
 8007fa4:	f04f 0600 	mov.w	r6, #0
 8007fa8:	196b      	adds	r3, r5, r5
 8007faa:	eb46 0406 	adc.w	r4, r6, r6
 8007fae:	461a      	mov	r2, r3
 8007fb0:	4623      	mov	r3, r4
 8007fb2:	f7f8 fe39 	bl	8000c28 <__aeabi_uldivmod>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4b6a      	ldr	r3, [pc, #424]	; (8008168 <UART_SetConfig+0x384>)
 8007fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	2164      	movs	r1, #100	; 0x64
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	3332      	adds	r3, #50	; 0x32
 8007fd0:	4a65      	ldr	r2, [pc, #404]	; (8008168 <UART_SetConfig+0x384>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	f003 0207 	and.w	r2, r3, #7
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4442      	add	r2, r8
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	e26f      	b.n	80084c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fd fc41 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8007fea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	461d      	mov	r5, r3
 8007ff0:	f04f 0600 	mov.w	r6, #0
 8007ff4:	46a8      	mov	r8, r5
 8007ff6:	46b1      	mov	r9, r6
 8007ff8:	eb18 0308 	adds.w	r3, r8, r8
 8007ffc:	eb49 0409 	adc.w	r4, r9, r9
 8008000:	4698      	mov	r8, r3
 8008002:	46a1      	mov	r9, r4
 8008004:	eb18 0805 	adds.w	r8, r8, r5
 8008008:	eb49 0906 	adc.w	r9, r9, r6
 800800c:	f04f 0100 	mov.w	r1, #0
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008018:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800801c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008020:	4688      	mov	r8, r1
 8008022:	4691      	mov	r9, r2
 8008024:	eb18 0005 	adds.w	r0, r8, r5
 8008028:	eb49 0106 	adc.w	r1, r9, r6
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	461d      	mov	r5, r3
 8008032:	f04f 0600 	mov.w	r6, #0
 8008036:	196b      	adds	r3, r5, r5
 8008038:	eb46 0406 	adc.w	r4, r6, r6
 800803c:	461a      	mov	r2, r3
 800803e:	4623      	mov	r3, r4
 8008040:	f7f8 fdf2 	bl	8000c28 <__aeabi_uldivmod>
 8008044:	4603      	mov	r3, r0
 8008046:	460c      	mov	r4, r1
 8008048:	461a      	mov	r2, r3
 800804a:	4b47      	ldr	r3, [pc, #284]	; (8008168 <UART_SetConfig+0x384>)
 800804c:	fba3 2302 	umull	r2, r3, r3, r2
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	461d      	mov	r5, r3
 800805a:	f04f 0600 	mov.w	r6, #0
 800805e:	46a9      	mov	r9, r5
 8008060:	46b2      	mov	sl, r6
 8008062:	eb19 0309 	adds.w	r3, r9, r9
 8008066:	eb4a 040a 	adc.w	r4, sl, sl
 800806a:	4699      	mov	r9, r3
 800806c:	46a2      	mov	sl, r4
 800806e:	eb19 0905 	adds.w	r9, r9, r5
 8008072:	eb4a 0a06 	adc.w	sl, sl, r6
 8008076:	f04f 0100 	mov.w	r1, #0
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800808a:	4689      	mov	r9, r1
 800808c:	4692      	mov	sl, r2
 800808e:	eb19 0005 	adds.w	r0, r9, r5
 8008092:	eb4a 0106 	adc.w	r1, sl, r6
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	461d      	mov	r5, r3
 800809c:	f04f 0600 	mov.w	r6, #0
 80080a0:	196b      	adds	r3, r5, r5
 80080a2:	eb46 0406 	adc.w	r4, r6, r6
 80080a6:	461a      	mov	r2, r3
 80080a8:	4623      	mov	r3, r4
 80080aa:	f7f8 fdbd 	bl	8000c28 <__aeabi_uldivmod>
 80080ae:	4603      	mov	r3, r0
 80080b0:	460c      	mov	r4, r1
 80080b2:	461a      	mov	r2, r3
 80080b4:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <UART_SetConfig+0x384>)
 80080b6:	fba3 1302 	umull	r1, r3, r3, r2
 80080ba:	095b      	lsrs	r3, r3, #5
 80080bc:	2164      	movs	r1, #100	; 0x64
 80080be:	fb01 f303 	mul.w	r3, r1, r3
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	3332      	adds	r3, #50	; 0x32
 80080c8:	4a27      	ldr	r2, [pc, #156]	; (8008168 <UART_SetConfig+0x384>)
 80080ca:	fba2 2303 	umull	r2, r3, r2, r3
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080d6:	4498      	add	r8, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	461d      	mov	r5, r3
 80080dc:	f04f 0600 	mov.w	r6, #0
 80080e0:	46a9      	mov	r9, r5
 80080e2:	46b2      	mov	sl, r6
 80080e4:	eb19 0309 	adds.w	r3, r9, r9
 80080e8:	eb4a 040a 	adc.w	r4, sl, sl
 80080ec:	4699      	mov	r9, r3
 80080ee:	46a2      	mov	sl, r4
 80080f0:	eb19 0905 	adds.w	r9, r9, r5
 80080f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80080f8:	f04f 0100 	mov.w	r1, #0
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800810c:	4689      	mov	r9, r1
 800810e:	4692      	mov	sl, r2
 8008110:	eb19 0005 	adds.w	r0, r9, r5
 8008114:	eb4a 0106 	adc.w	r1, sl, r6
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	461d      	mov	r5, r3
 800811e:	f04f 0600 	mov.w	r6, #0
 8008122:	196b      	adds	r3, r5, r5
 8008124:	eb46 0406 	adc.w	r4, r6, r6
 8008128:	461a      	mov	r2, r3
 800812a:	4623      	mov	r3, r4
 800812c:	f7f8 fd7c 	bl	8000c28 <__aeabi_uldivmod>
 8008130:	4603      	mov	r3, r0
 8008132:	460c      	mov	r4, r1
 8008134:	461a      	mov	r2, r3
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <UART_SetConfig+0x384>)
 8008138:	fba3 1302 	umull	r1, r3, r3, r2
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	2164      	movs	r1, #100	; 0x64
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	3332      	adds	r3, #50	; 0x32
 800814a:	4a07      	ldr	r2, [pc, #28]	; (8008168 <UART_SetConfig+0x384>)
 800814c:	fba2 2303 	umull	r2, r3, r2, r3
 8008150:	095b      	lsrs	r3, r3, #5
 8008152:	f003 0207 	and.w	r2, r3, #7
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4442      	add	r2, r8
 800815c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800815e:	e1b2      	b.n	80084c6 <UART_SetConfig+0x6e2>
 8008160:	40011000 	.word	0x40011000
 8008164:	40011400 	.word	0x40011400
 8008168:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4ad7      	ldr	r2, [pc, #860]	; (80084d0 <UART_SetConfig+0x6ec>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d005      	beq.n	8008182 <UART_SetConfig+0x39e>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4ad6      	ldr	r2, [pc, #856]	; (80084d4 <UART_SetConfig+0x6f0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	f040 80d1 	bne.w	8008324 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008182:	f7fd fb87 	bl	8005894 <HAL_RCC_GetPCLK2Freq>
 8008186:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	469a      	mov	sl, r3
 800818c:	f04f 0b00 	mov.w	fp, #0
 8008190:	46d0      	mov	r8, sl
 8008192:	46d9      	mov	r9, fp
 8008194:	eb18 0308 	adds.w	r3, r8, r8
 8008198:	eb49 0409 	adc.w	r4, r9, r9
 800819c:	4698      	mov	r8, r3
 800819e:	46a1      	mov	r9, r4
 80081a0:	eb18 080a 	adds.w	r8, r8, sl
 80081a4:	eb49 090b 	adc.w	r9, r9, fp
 80081a8:	f04f 0100 	mov.w	r1, #0
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081bc:	4688      	mov	r8, r1
 80081be:	4691      	mov	r9, r2
 80081c0:	eb1a 0508 	adds.w	r5, sl, r8
 80081c4:	eb4b 0609 	adc.w	r6, fp, r9
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	f04f 0300 	mov.w	r3, #0
 80081d6:	f04f 0400 	mov.w	r4, #0
 80081da:	0094      	lsls	r4, r2, #2
 80081dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081e0:	008b      	lsls	r3, r1, #2
 80081e2:	461a      	mov	r2, r3
 80081e4:	4623      	mov	r3, r4
 80081e6:	4628      	mov	r0, r5
 80081e8:	4631      	mov	r1, r6
 80081ea:	f7f8 fd1d 	bl	8000c28 <__aeabi_uldivmod>
 80081ee:	4603      	mov	r3, r0
 80081f0:	460c      	mov	r4, r1
 80081f2:	461a      	mov	r2, r3
 80081f4:	4bb8      	ldr	r3, [pc, #736]	; (80084d8 <UART_SetConfig+0x6f4>)
 80081f6:	fba3 2302 	umull	r2, r3, r3, r2
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	469b      	mov	fp, r3
 8008204:	f04f 0c00 	mov.w	ip, #0
 8008208:	46d9      	mov	r9, fp
 800820a:	46e2      	mov	sl, ip
 800820c:	eb19 0309 	adds.w	r3, r9, r9
 8008210:	eb4a 040a 	adc.w	r4, sl, sl
 8008214:	4699      	mov	r9, r3
 8008216:	46a2      	mov	sl, r4
 8008218:	eb19 090b 	adds.w	r9, r9, fp
 800821c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008220:	f04f 0100 	mov.w	r1, #0
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800822c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008230:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008234:	4689      	mov	r9, r1
 8008236:	4692      	mov	sl, r2
 8008238:	eb1b 0509 	adds.w	r5, fp, r9
 800823c:	eb4c 060a 	adc.w	r6, ip, sl
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	4619      	mov	r1, r3
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	f04f 0400 	mov.w	r4, #0
 8008252:	0094      	lsls	r4, r2, #2
 8008254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008258:	008b      	lsls	r3, r1, #2
 800825a:	461a      	mov	r2, r3
 800825c:	4623      	mov	r3, r4
 800825e:	4628      	mov	r0, r5
 8008260:	4631      	mov	r1, r6
 8008262:	f7f8 fce1 	bl	8000c28 <__aeabi_uldivmod>
 8008266:	4603      	mov	r3, r0
 8008268:	460c      	mov	r4, r1
 800826a:	461a      	mov	r2, r3
 800826c:	4b9a      	ldr	r3, [pc, #616]	; (80084d8 <UART_SetConfig+0x6f4>)
 800826e:	fba3 1302 	umull	r1, r3, r3, r2
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	2164      	movs	r1, #100	; 0x64
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	3332      	adds	r3, #50	; 0x32
 8008280:	4a95      	ldr	r2, [pc, #596]	; (80084d8 <UART_SetConfig+0x6f4>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800828c:	4498      	add	r8, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	469b      	mov	fp, r3
 8008292:	f04f 0c00 	mov.w	ip, #0
 8008296:	46d9      	mov	r9, fp
 8008298:	46e2      	mov	sl, ip
 800829a:	eb19 0309 	adds.w	r3, r9, r9
 800829e:	eb4a 040a 	adc.w	r4, sl, sl
 80082a2:	4699      	mov	r9, r3
 80082a4:	46a2      	mov	sl, r4
 80082a6:	eb19 090b 	adds.w	r9, r9, fp
 80082aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80082ae:	f04f 0100 	mov.w	r1, #0
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082c2:	4689      	mov	r9, r1
 80082c4:	4692      	mov	sl, r2
 80082c6:	eb1b 0509 	adds.w	r5, fp, r9
 80082ca:	eb4c 060a 	adc.w	r6, ip, sl
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	4619      	mov	r1, r3
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	f04f 0400 	mov.w	r4, #0
 80082e0:	0094      	lsls	r4, r2, #2
 80082e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082e6:	008b      	lsls	r3, r1, #2
 80082e8:	461a      	mov	r2, r3
 80082ea:	4623      	mov	r3, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	4631      	mov	r1, r6
 80082f0:	f7f8 fc9a 	bl	8000c28 <__aeabi_uldivmod>
 80082f4:	4603      	mov	r3, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b77      	ldr	r3, [pc, #476]	; (80084d8 <UART_SetConfig+0x6f4>)
 80082fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	2164      	movs	r1, #100	; 0x64
 8008304:	fb01 f303 	mul.w	r3, r1, r3
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	3332      	adds	r3, #50	; 0x32
 800830e:	4a72      	ldr	r2, [pc, #456]	; (80084d8 <UART_SetConfig+0x6f4>)
 8008310:	fba2 2303 	umull	r2, r3, r2, r3
 8008314:	095b      	lsrs	r3, r3, #5
 8008316:	f003 020f 	and.w	r2, r3, #15
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4442      	add	r2, r8
 8008320:	609a      	str	r2, [r3, #8]
 8008322:	e0d0      	b.n	80084c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008324:	f7fd faa2 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8008328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	469a      	mov	sl, r3
 800832e:	f04f 0b00 	mov.w	fp, #0
 8008332:	46d0      	mov	r8, sl
 8008334:	46d9      	mov	r9, fp
 8008336:	eb18 0308 	adds.w	r3, r8, r8
 800833a:	eb49 0409 	adc.w	r4, r9, r9
 800833e:	4698      	mov	r8, r3
 8008340:	46a1      	mov	r9, r4
 8008342:	eb18 080a 	adds.w	r8, r8, sl
 8008346:	eb49 090b 	adc.w	r9, r9, fp
 800834a:	f04f 0100 	mov.w	r1, #0
 800834e:	f04f 0200 	mov.w	r2, #0
 8008352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800835a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800835e:	4688      	mov	r8, r1
 8008360:	4691      	mov	r9, r2
 8008362:	eb1a 0508 	adds.w	r5, sl, r8
 8008366:	eb4b 0609 	adc.w	r6, fp, r9
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4619      	mov	r1, r3
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	f04f 0400 	mov.w	r4, #0
 800837c:	0094      	lsls	r4, r2, #2
 800837e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008382:	008b      	lsls	r3, r1, #2
 8008384:	461a      	mov	r2, r3
 8008386:	4623      	mov	r3, r4
 8008388:	4628      	mov	r0, r5
 800838a:	4631      	mov	r1, r6
 800838c:	f7f8 fc4c 	bl	8000c28 <__aeabi_uldivmod>
 8008390:	4603      	mov	r3, r0
 8008392:	460c      	mov	r4, r1
 8008394:	461a      	mov	r2, r3
 8008396:	4b50      	ldr	r3, [pc, #320]	; (80084d8 <UART_SetConfig+0x6f4>)
 8008398:	fba3 2302 	umull	r2, r3, r3, r2
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	469b      	mov	fp, r3
 80083a6:	f04f 0c00 	mov.w	ip, #0
 80083aa:	46d9      	mov	r9, fp
 80083ac:	46e2      	mov	sl, ip
 80083ae:	eb19 0309 	adds.w	r3, r9, r9
 80083b2:	eb4a 040a 	adc.w	r4, sl, sl
 80083b6:	4699      	mov	r9, r3
 80083b8:	46a2      	mov	sl, r4
 80083ba:	eb19 090b 	adds.w	r9, r9, fp
 80083be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083c2:	f04f 0100 	mov.w	r1, #0
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083d6:	4689      	mov	r9, r1
 80083d8:	4692      	mov	sl, r2
 80083da:	eb1b 0509 	adds.w	r5, fp, r9
 80083de:	eb4c 060a 	adc.w	r6, ip, sl
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	4619      	mov	r1, r3
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	f04f 0400 	mov.w	r4, #0
 80083f4:	0094      	lsls	r4, r2, #2
 80083f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083fa:	008b      	lsls	r3, r1, #2
 80083fc:	461a      	mov	r2, r3
 80083fe:	4623      	mov	r3, r4
 8008400:	4628      	mov	r0, r5
 8008402:	4631      	mov	r1, r6
 8008404:	f7f8 fc10 	bl	8000c28 <__aeabi_uldivmod>
 8008408:	4603      	mov	r3, r0
 800840a:	460c      	mov	r4, r1
 800840c:	461a      	mov	r2, r3
 800840e:	4b32      	ldr	r3, [pc, #200]	; (80084d8 <UART_SetConfig+0x6f4>)
 8008410:	fba3 1302 	umull	r1, r3, r3, r2
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	2164      	movs	r1, #100	; 0x64
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	3332      	adds	r3, #50	; 0x32
 8008422:	4a2d      	ldr	r2, [pc, #180]	; (80084d8 <UART_SetConfig+0x6f4>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800842e:	4498      	add	r8, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	469b      	mov	fp, r3
 8008434:	f04f 0c00 	mov.w	ip, #0
 8008438:	46d9      	mov	r9, fp
 800843a:	46e2      	mov	sl, ip
 800843c:	eb19 0309 	adds.w	r3, r9, r9
 8008440:	eb4a 040a 	adc.w	r4, sl, sl
 8008444:	4699      	mov	r9, r3
 8008446:	46a2      	mov	sl, r4
 8008448:	eb19 090b 	adds.w	r9, r9, fp
 800844c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008450:	f04f 0100 	mov.w	r1, #0
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800845c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008464:	4689      	mov	r9, r1
 8008466:	4692      	mov	sl, r2
 8008468:	eb1b 0509 	adds.w	r5, fp, r9
 800846c:	eb4c 060a 	adc.w	r6, ip, sl
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4619      	mov	r1, r3
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	f04f 0400 	mov.w	r4, #0
 8008482:	0094      	lsls	r4, r2, #2
 8008484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008488:	008b      	lsls	r3, r1, #2
 800848a:	461a      	mov	r2, r3
 800848c:	4623      	mov	r3, r4
 800848e:	4628      	mov	r0, r5
 8008490:	4631      	mov	r1, r6
 8008492:	f7f8 fbc9 	bl	8000c28 <__aeabi_uldivmod>
 8008496:	4603      	mov	r3, r0
 8008498:	460c      	mov	r4, r1
 800849a:	461a      	mov	r2, r3
 800849c:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <UART_SetConfig+0x6f4>)
 800849e:	fba3 1302 	umull	r1, r3, r3, r2
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	2164      	movs	r1, #100	; 0x64
 80084a6:	fb01 f303 	mul.w	r3, r1, r3
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	3332      	adds	r3, #50	; 0x32
 80084b0:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <UART_SetConfig+0x6f4>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	f003 020f 	and.w	r2, r3, #15
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4442      	add	r2, r8
 80084c2:	609a      	str	r2, [r3, #8]
}
 80084c4:	e7ff      	b.n	80084c6 <UART_SetConfig+0x6e2>
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d0:	40011000 	.word	0x40011000
 80084d4:	40011400 	.word	0x40011400
 80084d8:	51eb851f 	.word	0x51eb851f

080084dc <__errno>:
 80084dc:	4b01      	ldr	r3, [pc, #4]	; (80084e4 <__errno+0x8>)
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000980 	.word	0x20000980

080084e8 <__libc_init_array>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	4e0d      	ldr	r6, [pc, #52]	; (8008520 <__libc_init_array+0x38>)
 80084ec:	4c0d      	ldr	r4, [pc, #52]	; (8008524 <__libc_init_array+0x3c>)
 80084ee:	1ba4      	subs	r4, r4, r6
 80084f0:	10a4      	asrs	r4, r4, #2
 80084f2:	2500      	movs	r5, #0
 80084f4:	42a5      	cmp	r5, r4
 80084f6:	d109      	bne.n	800850c <__libc_init_array+0x24>
 80084f8:	4e0b      	ldr	r6, [pc, #44]	; (8008528 <__libc_init_array+0x40>)
 80084fa:	4c0c      	ldr	r4, [pc, #48]	; (800852c <__libc_init_array+0x44>)
 80084fc:	f001 fc7e 	bl	8009dfc <_init>
 8008500:	1ba4      	subs	r4, r4, r6
 8008502:	10a4      	asrs	r4, r4, #2
 8008504:	2500      	movs	r5, #0
 8008506:	42a5      	cmp	r5, r4
 8008508:	d105      	bne.n	8008516 <__libc_init_array+0x2e>
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008510:	4798      	blx	r3
 8008512:	3501      	adds	r5, #1
 8008514:	e7ee      	b.n	80084f4 <__libc_init_array+0xc>
 8008516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800851a:	4798      	blx	r3
 800851c:	3501      	adds	r5, #1
 800851e:	e7f2      	b.n	8008506 <__libc_init_array+0x1e>
 8008520:	0800a668 	.word	0x0800a668
 8008524:	0800a668 	.word	0x0800a668
 8008528:	0800a668 	.word	0x0800a668
 800852c:	0800a66c 	.word	0x0800a66c

08008530 <memcpy>:
 8008530:	b510      	push	{r4, lr}
 8008532:	1e43      	subs	r3, r0, #1
 8008534:	440a      	add	r2, r1
 8008536:	4291      	cmp	r1, r2
 8008538:	d100      	bne.n	800853c <memcpy+0xc>
 800853a:	bd10      	pop	{r4, pc}
 800853c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008544:	e7f7      	b.n	8008536 <memcpy+0x6>

08008546 <memmove>:
 8008546:	4288      	cmp	r0, r1
 8008548:	b510      	push	{r4, lr}
 800854a:	eb01 0302 	add.w	r3, r1, r2
 800854e:	d807      	bhi.n	8008560 <memmove+0x1a>
 8008550:	1e42      	subs	r2, r0, #1
 8008552:	4299      	cmp	r1, r3
 8008554:	d00a      	beq.n	800856c <memmove+0x26>
 8008556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800855e:	e7f8      	b.n	8008552 <memmove+0xc>
 8008560:	4283      	cmp	r3, r0
 8008562:	d9f5      	bls.n	8008550 <memmove+0xa>
 8008564:	1881      	adds	r1, r0, r2
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	42d3      	cmn	r3, r2
 800856a:	d100      	bne.n	800856e <memmove+0x28>
 800856c:	bd10      	pop	{r4, pc}
 800856e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008572:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008576:	e7f7      	b.n	8008568 <memmove+0x22>

08008578 <memset>:
 8008578:	4402      	add	r2, r0
 800857a:	4603      	mov	r3, r0
 800857c:	4293      	cmp	r3, r2
 800857e:	d100      	bne.n	8008582 <memset+0xa>
 8008580:	4770      	bx	lr
 8008582:	f803 1b01 	strb.w	r1, [r3], #1
 8008586:	e7f9      	b.n	800857c <memset+0x4>

08008588 <siprintf>:
 8008588:	b40e      	push	{r1, r2, r3}
 800858a:	b500      	push	{lr}
 800858c:	b09c      	sub	sp, #112	; 0x70
 800858e:	ab1d      	add	r3, sp, #116	; 0x74
 8008590:	9002      	str	r0, [sp, #8]
 8008592:	9006      	str	r0, [sp, #24]
 8008594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008598:	4809      	ldr	r0, [pc, #36]	; (80085c0 <siprintf+0x38>)
 800859a:	9107      	str	r1, [sp, #28]
 800859c:	9104      	str	r1, [sp, #16]
 800859e:	4909      	ldr	r1, [pc, #36]	; (80085c4 <siprintf+0x3c>)
 80085a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a4:	9105      	str	r1, [sp, #20]
 80085a6:	6800      	ldr	r0, [r0, #0]
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	a902      	add	r1, sp, #8
 80085ac:	f000 f866 	bl	800867c <_svfiprintf_r>
 80085b0:	9b02      	ldr	r3, [sp, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	b01c      	add	sp, #112	; 0x70
 80085b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085bc:	b003      	add	sp, #12
 80085be:	4770      	bx	lr
 80085c0:	20000980 	.word	0x20000980
 80085c4:	ffff0208 	.word	0xffff0208

080085c8 <__ssputs_r>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	688e      	ldr	r6, [r1, #8]
 80085ce:	429e      	cmp	r6, r3
 80085d0:	4682      	mov	sl, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	4690      	mov	r8, r2
 80085d6:	4699      	mov	r9, r3
 80085d8:	d837      	bhi.n	800864a <__ssputs_r+0x82>
 80085da:	898a      	ldrh	r2, [r1, #12]
 80085dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085e0:	d031      	beq.n	8008646 <__ssputs_r+0x7e>
 80085e2:	6825      	ldr	r5, [r4, #0]
 80085e4:	6909      	ldr	r1, [r1, #16]
 80085e6:	1a6f      	subs	r7, r5, r1
 80085e8:	6965      	ldr	r5, [r4, #20]
 80085ea:	2302      	movs	r3, #2
 80085ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80085f4:	f109 0301 	add.w	r3, r9, #1
 80085f8:	443b      	add	r3, r7
 80085fa:	429d      	cmp	r5, r3
 80085fc:	bf38      	it	cc
 80085fe:	461d      	movcc	r5, r3
 8008600:	0553      	lsls	r3, r2, #21
 8008602:	d530      	bpl.n	8008666 <__ssputs_r+0x9e>
 8008604:	4629      	mov	r1, r5
 8008606:	f000 fb07 	bl	8008c18 <_malloc_r>
 800860a:	4606      	mov	r6, r0
 800860c:	b950      	cbnz	r0, 8008624 <__ssputs_r+0x5c>
 800860e:	230c      	movs	r3, #12
 8008610:	f8ca 3000 	str.w	r3, [sl]
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	463a      	mov	r2, r7
 8008626:	6921      	ldr	r1, [r4, #16]
 8008628:	f7ff ff82 	bl	8008530 <memcpy>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	6126      	str	r6, [r4, #16]
 800863a:	6165      	str	r5, [r4, #20]
 800863c:	443e      	add	r6, r7
 800863e:	1bed      	subs	r5, r5, r7
 8008640:	6026      	str	r6, [r4, #0]
 8008642:	60a5      	str	r5, [r4, #8]
 8008644:	464e      	mov	r6, r9
 8008646:	454e      	cmp	r6, r9
 8008648:	d900      	bls.n	800864c <__ssputs_r+0x84>
 800864a:	464e      	mov	r6, r9
 800864c:	4632      	mov	r2, r6
 800864e:	4641      	mov	r1, r8
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	f7ff ff78 	bl	8008546 <memmove>
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	1b9b      	subs	r3, r3, r6
 800865a:	60a3      	str	r3, [r4, #8]
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	441e      	add	r6, r3
 8008660:	6026      	str	r6, [r4, #0]
 8008662:	2000      	movs	r0, #0
 8008664:	e7dc      	b.n	8008620 <__ssputs_r+0x58>
 8008666:	462a      	mov	r2, r5
 8008668:	f000 fb30 	bl	8008ccc <_realloc_r>
 800866c:	4606      	mov	r6, r0
 800866e:	2800      	cmp	r0, #0
 8008670:	d1e2      	bne.n	8008638 <__ssputs_r+0x70>
 8008672:	6921      	ldr	r1, [r4, #16]
 8008674:	4650      	mov	r0, sl
 8008676:	f000 fa81 	bl	8008b7c <_free_r>
 800867a:	e7c8      	b.n	800860e <__ssputs_r+0x46>

0800867c <_svfiprintf_r>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	461d      	mov	r5, r3
 8008682:	898b      	ldrh	r3, [r1, #12]
 8008684:	061f      	lsls	r7, r3, #24
 8008686:	b09d      	sub	sp, #116	; 0x74
 8008688:	4680      	mov	r8, r0
 800868a:	460c      	mov	r4, r1
 800868c:	4616      	mov	r6, r2
 800868e:	d50f      	bpl.n	80086b0 <_svfiprintf_r+0x34>
 8008690:	690b      	ldr	r3, [r1, #16]
 8008692:	b96b      	cbnz	r3, 80086b0 <_svfiprintf_r+0x34>
 8008694:	2140      	movs	r1, #64	; 0x40
 8008696:	f000 fabf 	bl	8008c18 <_malloc_r>
 800869a:	6020      	str	r0, [r4, #0]
 800869c:	6120      	str	r0, [r4, #16]
 800869e:	b928      	cbnz	r0, 80086ac <_svfiprintf_r+0x30>
 80086a0:	230c      	movs	r3, #12
 80086a2:	f8c8 3000 	str.w	r3, [r8]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	e0c8      	b.n	800883e <_svfiprintf_r+0x1c2>
 80086ac:	2340      	movs	r3, #64	; 0x40
 80086ae:	6163      	str	r3, [r4, #20]
 80086b0:	2300      	movs	r3, #0
 80086b2:	9309      	str	r3, [sp, #36]	; 0x24
 80086b4:	2320      	movs	r3, #32
 80086b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ba:	2330      	movs	r3, #48	; 0x30
 80086bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086c0:	9503      	str	r5, [sp, #12]
 80086c2:	f04f 0b01 	mov.w	fp, #1
 80086c6:	4637      	mov	r7, r6
 80086c8:	463d      	mov	r5, r7
 80086ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086ce:	b10b      	cbz	r3, 80086d4 <_svfiprintf_r+0x58>
 80086d0:	2b25      	cmp	r3, #37	; 0x25
 80086d2:	d13e      	bne.n	8008752 <_svfiprintf_r+0xd6>
 80086d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80086d8:	d00b      	beq.n	80086f2 <_svfiprintf_r+0x76>
 80086da:	4653      	mov	r3, sl
 80086dc:	4632      	mov	r2, r6
 80086de:	4621      	mov	r1, r4
 80086e0:	4640      	mov	r0, r8
 80086e2:	f7ff ff71 	bl	80085c8 <__ssputs_r>
 80086e6:	3001      	adds	r0, #1
 80086e8:	f000 80a4 	beq.w	8008834 <_svfiprintf_r+0x1b8>
 80086ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ee:	4453      	add	r3, sl
 80086f0:	9309      	str	r3, [sp, #36]	; 0x24
 80086f2:	783b      	ldrb	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 809d 	beq.w	8008834 <_svfiprintf_r+0x1b8>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	9307      	str	r3, [sp, #28]
 8008708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800870c:	931a      	str	r3, [sp, #104]	; 0x68
 800870e:	462f      	mov	r7, r5
 8008710:	2205      	movs	r2, #5
 8008712:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008716:	4850      	ldr	r0, [pc, #320]	; (8008858 <_svfiprintf_r+0x1dc>)
 8008718:	f7f7 fd82 	bl	8000220 <memchr>
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	b9d0      	cbnz	r0, 8008756 <_svfiprintf_r+0xda>
 8008720:	06d9      	lsls	r1, r3, #27
 8008722:	bf44      	itt	mi
 8008724:	2220      	movmi	r2, #32
 8008726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800872a:	071a      	lsls	r2, r3, #28
 800872c:	bf44      	itt	mi
 800872e:	222b      	movmi	r2, #43	; 0x2b
 8008730:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008734:	782a      	ldrb	r2, [r5, #0]
 8008736:	2a2a      	cmp	r2, #42	; 0x2a
 8008738:	d015      	beq.n	8008766 <_svfiprintf_r+0xea>
 800873a:	9a07      	ldr	r2, [sp, #28]
 800873c:	462f      	mov	r7, r5
 800873e:	2000      	movs	r0, #0
 8008740:	250a      	movs	r5, #10
 8008742:	4639      	mov	r1, r7
 8008744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008748:	3b30      	subs	r3, #48	; 0x30
 800874a:	2b09      	cmp	r3, #9
 800874c:	d94d      	bls.n	80087ea <_svfiprintf_r+0x16e>
 800874e:	b1b8      	cbz	r0, 8008780 <_svfiprintf_r+0x104>
 8008750:	e00f      	b.n	8008772 <_svfiprintf_r+0xf6>
 8008752:	462f      	mov	r7, r5
 8008754:	e7b8      	b.n	80086c8 <_svfiprintf_r+0x4c>
 8008756:	4a40      	ldr	r2, [pc, #256]	; (8008858 <_svfiprintf_r+0x1dc>)
 8008758:	1a80      	subs	r0, r0, r2
 800875a:	fa0b f000 	lsl.w	r0, fp, r0
 800875e:	4318      	orrs	r0, r3
 8008760:	9004      	str	r0, [sp, #16]
 8008762:	463d      	mov	r5, r7
 8008764:	e7d3      	b.n	800870e <_svfiprintf_r+0x92>
 8008766:	9a03      	ldr	r2, [sp, #12]
 8008768:	1d11      	adds	r1, r2, #4
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	9103      	str	r1, [sp, #12]
 800876e:	2a00      	cmp	r2, #0
 8008770:	db01      	blt.n	8008776 <_svfiprintf_r+0xfa>
 8008772:	9207      	str	r2, [sp, #28]
 8008774:	e004      	b.n	8008780 <_svfiprintf_r+0x104>
 8008776:	4252      	negs	r2, r2
 8008778:	f043 0302 	orr.w	r3, r3, #2
 800877c:	9207      	str	r2, [sp, #28]
 800877e:	9304      	str	r3, [sp, #16]
 8008780:	783b      	ldrb	r3, [r7, #0]
 8008782:	2b2e      	cmp	r3, #46	; 0x2e
 8008784:	d10c      	bne.n	80087a0 <_svfiprintf_r+0x124>
 8008786:	787b      	ldrb	r3, [r7, #1]
 8008788:	2b2a      	cmp	r3, #42	; 0x2a
 800878a:	d133      	bne.n	80087f4 <_svfiprintf_r+0x178>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	1d1a      	adds	r2, r3, #4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	9203      	str	r2, [sp, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfb8      	it	lt
 8008798:	f04f 33ff 	movlt.w	r3, #4294967295
 800879c:	3702      	adds	r7, #2
 800879e:	9305      	str	r3, [sp, #20]
 80087a0:	4d2e      	ldr	r5, [pc, #184]	; (800885c <_svfiprintf_r+0x1e0>)
 80087a2:	7839      	ldrb	r1, [r7, #0]
 80087a4:	2203      	movs	r2, #3
 80087a6:	4628      	mov	r0, r5
 80087a8:	f7f7 fd3a 	bl	8000220 <memchr>
 80087ac:	b138      	cbz	r0, 80087be <_svfiprintf_r+0x142>
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	1b40      	subs	r0, r0, r5
 80087b2:	fa03 f000 	lsl.w	r0, r3, r0
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	4303      	orrs	r3, r0
 80087ba:	3701      	adds	r7, #1
 80087bc:	9304      	str	r3, [sp, #16]
 80087be:	7839      	ldrb	r1, [r7, #0]
 80087c0:	4827      	ldr	r0, [pc, #156]	; (8008860 <_svfiprintf_r+0x1e4>)
 80087c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c6:	2206      	movs	r2, #6
 80087c8:	1c7e      	adds	r6, r7, #1
 80087ca:	f7f7 fd29 	bl	8000220 <memchr>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d038      	beq.n	8008844 <_svfiprintf_r+0x1c8>
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <_svfiprintf_r+0x1e8>)
 80087d4:	bb13      	cbnz	r3, 800881c <_svfiprintf_r+0x1a0>
 80087d6:	9b03      	ldr	r3, [sp, #12]
 80087d8:	3307      	adds	r3, #7
 80087da:	f023 0307 	bic.w	r3, r3, #7
 80087de:	3308      	adds	r3, #8
 80087e0:	9303      	str	r3, [sp, #12]
 80087e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e4:	444b      	add	r3, r9
 80087e6:	9309      	str	r3, [sp, #36]	; 0x24
 80087e8:	e76d      	b.n	80086c6 <_svfiprintf_r+0x4a>
 80087ea:	fb05 3202 	mla	r2, r5, r2, r3
 80087ee:	2001      	movs	r0, #1
 80087f0:	460f      	mov	r7, r1
 80087f2:	e7a6      	b.n	8008742 <_svfiprintf_r+0xc6>
 80087f4:	2300      	movs	r3, #0
 80087f6:	3701      	adds	r7, #1
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	4619      	mov	r1, r3
 80087fc:	250a      	movs	r5, #10
 80087fe:	4638      	mov	r0, r7
 8008800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008804:	3a30      	subs	r2, #48	; 0x30
 8008806:	2a09      	cmp	r2, #9
 8008808:	d903      	bls.n	8008812 <_svfiprintf_r+0x196>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0c8      	beq.n	80087a0 <_svfiprintf_r+0x124>
 800880e:	9105      	str	r1, [sp, #20]
 8008810:	e7c6      	b.n	80087a0 <_svfiprintf_r+0x124>
 8008812:	fb05 2101 	mla	r1, r5, r1, r2
 8008816:	2301      	movs	r3, #1
 8008818:	4607      	mov	r7, r0
 800881a:	e7f0      	b.n	80087fe <_svfiprintf_r+0x182>
 800881c:	ab03      	add	r3, sp, #12
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4622      	mov	r2, r4
 8008822:	4b11      	ldr	r3, [pc, #68]	; (8008868 <_svfiprintf_r+0x1ec>)
 8008824:	a904      	add	r1, sp, #16
 8008826:	4640      	mov	r0, r8
 8008828:	f3af 8000 	nop.w
 800882c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008830:	4681      	mov	r9, r0
 8008832:	d1d6      	bne.n	80087e2 <_svfiprintf_r+0x166>
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	065b      	lsls	r3, r3, #25
 8008838:	f53f af35 	bmi.w	80086a6 <_svfiprintf_r+0x2a>
 800883c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883e:	b01d      	add	sp, #116	; 0x74
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	ab03      	add	r3, sp, #12
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4622      	mov	r2, r4
 800884a:	4b07      	ldr	r3, [pc, #28]	; (8008868 <_svfiprintf_r+0x1ec>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	4640      	mov	r0, r8
 8008850:	f000 f882 	bl	8008958 <_printf_i>
 8008854:	e7ea      	b.n	800882c <_svfiprintf_r+0x1b0>
 8008856:	bf00      	nop
 8008858:	0800a5e8 	.word	0x0800a5e8
 800885c:	0800a5ee 	.word	0x0800a5ee
 8008860:	0800a5f2 	.word	0x0800a5f2
 8008864:	00000000 	.word	0x00000000
 8008868:	080085c9 	.word	0x080085c9

0800886c <_printf_common>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	4691      	mov	r9, r2
 8008872:	461f      	mov	r7, r3
 8008874:	688a      	ldr	r2, [r1, #8]
 8008876:	690b      	ldr	r3, [r1, #16]
 8008878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800887c:	4293      	cmp	r3, r2
 800887e:	bfb8      	it	lt
 8008880:	4613      	movlt	r3, r2
 8008882:	f8c9 3000 	str.w	r3, [r9]
 8008886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800888a:	4606      	mov	r6, r0
 800888c:	460c      	mov	r4, r1
 800888e:	b112      	cbz	r2, 8008896 <_printf_common+0x2a>
 8008890:	3301      	adds	r3, #1
 8008892:	f8c9 3000 	str.w	r3, [r9]
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	0699      	lsls	r1, r3, #26
 800889a:	bf42      	ittt	mi
 800889c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80088a0:	3302      	addmi	r3, #2
 80088a2:	f8c9 3000 	strmi.w	r3, [r9]
 80088a6:	6825      	ldr	r5, [r4, #0]
 80088a8:	f015 0506 	ands.w	r5, r5, #6
 80088ac:	d107      	bne.n	80088be <_printf_common+0x52>
 80088ae:	f104 0a19 	add.w	sl, r4, #25
 80088b2:	68e3      	ldr	r3, [r4, #12]
 80088b4:	f8d9 2000 	ldr.w	r2, [r9]
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	42ab      	cmp	r3, r5
 80088bc:	dc28      	bgt.n	8008910 <_printf_common+0xa4>
 80088be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	3300      	adds	r3, #0
 80088c6:	bf18      	it	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	0692      	lsls	r2, r2, #26
 80088cc:	d42d      	bmi.n	800892a <_printf_common+0xbe>
 80088ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088d2:	4639      	mov	r1, r7
 80088d4:	4630      	mov	r0, r6
 80088d6:	47c0      	blx	r8
 80088d8:	3001      	adds	r0, #1
 80088da:	d020      	beq.n	800891e <_printf_common+0xb2>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	68e5      	ldr	r5, [r4, #12]
 80088e0:	f8d9 2000 	ldr.w	r2, [r9]
 80088e4:	f003 0306 	and.w	r3, r3, #6
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	bf08      	it	eq
 80088ec:	1aad      	subeq	r5, r5, r2
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	bf0c      	ite	eq
 80088f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f8:	2500      	movne	r5, #0
 80088fa:	4293      	cmp	r3, r2
 80088fc:	bfc4      	itt	gt
 80088fe:	1a9b      	subgt	r3, r3, r2
 8008900:	18ed      	addgt	r5, r5, r3
 8008902:	f04f 0900 	mov.w	r9, #0
 8008906:	341a      	adds	r4, #26
 8008908:	454d      	cmp	r5, r9
 800890a:	d11a      	bne.n	8008942 <_printf_common+0xd6>
 800890c:	2000      	movs	r0, #0
 800890e:	e008      	b.n	8008922 <_printf_common+0xb6>
 8008910:	2301      	movs	r3, #1
 8008912:	4652      	mov	r2, sl
 8008914:	4639      	mov	r1, r7
 8008916:	4630      	mov	r0, r6
 8008918:	47c0      	blx	r8
 800891a:	3001      	adds	r0, #1
 800891c:	d103      	bne.n	8008926 <_printf_common+0xba>
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008926:	3501      	adds	r5, #1
 8008928:	e7c3      	b.n	80088b2 <_printf_common+0x46>
 800892a:	18e1      	adds	r1, r4, r3
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	2030      	movs	r0, #48	; 0x30
 8008930:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008934:	4422      	add	r2, r4
 8008936:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800893a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800893e:	3302      	adds	r3, #2
 8008940:	e7c5      	b.n	80088ce <_printf_common+0x62>
 8008942:	2301      	movs	r3, #1
 8008944:	4622      	mov	r2, r4
 8008946:	4639      	mov	r1, r7
 8008948:	4630      	mov	r0, r6
 800894a:	47c0      	blx	r8
 800894c:	3001      	adds	r0, #1
 800894e:	d0e6      	beq.n	800891e <_printf_common+0xb2>
 8008950:	f109 0901 	add.w	r9, r9, #1
 8008954:	e7d8      	b.n	8008908 <_printf_common+0x9c>
	...

08008958 <_printf_i>:
 8008958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800895c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008960:	460c      	mov	r4, r1
 8008962:	7e09      	ldrb	r1, [r1, #24]
 8008964:	b085      	sub	sp, #20
 8008966:	296e      	cmp	r1, #110	; 0x6e
 8008968:	4617      	mov	r7, r2
 800896a:	4606      	mov	r6, r0
 800896c:	4698      	mov	r8, r3
 800896e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008970:	f000 80b3 	beq.w	8008ada <_printf_i+0x182>
 8008974:	d822      	bhi.n	80089bc <_printf_i+0x64>
 8008976:	2963      	cmp	r1, #99	; 0x63
 8008978:	d036      	beq.n	80089e8 <_printf_i+0x90>
 800897a:	d80a      	bhi.n	8008992 <_printf_i+0x3a>
 800897c:	2900      	cmp	r1, #0
 800897e:	f000 80b9 	beq.w	8008af4 <_printf_i+0x19c>
 8008982:	2958      	cmp	r1, #88	; 0x58
 8008984:	f000 8083 	beq.w	8008a8e <_printf_i+0x136>
 8008988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800898c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008990:	e032      	b.n	80089f8 <_printf_i+0xa0>
 8008992:	2964      	cmp	r1, #100	; 0x64
 8008994:	d001      	beq.n	800899a <_printf_i+0x42>
 8008996:	2969      	cmp	r1, #105	; 0x69
 8008998:	d1f6      	bne.n	8008988 <_printf_i+0x30>
 800899a:	6820      	ldr	r0, [r4, #0]
 800899c:	6813      	ldr	r3, [r2, #0]
 800899e:	0605      	lsls	r5, r0, #24
 80089a0:	f103 0104 	add.w	r1, r3, #4
 80089a4:	d52a      	bpl.n	80089fc <_printf_i+0xa4>
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6011      	str	r1, [r2, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da03      	bge.n	80089b6 <_printf_i+0x5e>
 80089ae:	222d      	movs	r2, #45	; 0x2d
 80089b0:	425b      	negs	r3, r3
 80089b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80089b6:	486f      	ldr	r0, [pc, #444]	; (8008b74 <_printf_i+0x21c>)
 80089b8:	220a      	movs	r2, #10
 80089ba:	e039      	b.n	8008a30 <_printf_i+0xd8>
 80089bc:	2973      	cmp	r1, #115	; 0x73
 80089be:	f000 809d 	beq.w	8008afc <_printf_i+0x1a4>
 80089c2:	d808      	bhi.n	80089d6 <_printf_i+0x7e>
 80089c4:	296f      	cmp	r1, #111	; 0x6f
 80089c6:	d020      	beq.n	8008a0a <_printf_i+0xb2>
 80089c8:	2970      	cmp	r1, #112	; 0x70
 80089ca:	d1dd      	bne.n	8008988 <_printf_i+0x30>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	e003      	b.n	80089de <_printf_i+0x86>
 80089d6:	2975      	cmp	r1, #117	; 0x75
 80089d8:	d017      	beq.n	8008a0a <_printf_i+0xb2>
 80089da:	2978      	cmp	r1, #120	; 0x78
 80089dc:	d1d4      	bne.n	8008988 <_printf_i+0x30>
 80089de:	2378      	movs	r3, #120	; 0x78
 80089e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089e4:	4864      	ldr	r0, [pc, #400]	; (8008b78 <_printf_i+0x220>)
 80089e6:	e055      	b.n	8008a94 <_printf_i+0x13c>
 80089e8:	6813      	ldr	r3, [r2, #0]
 80089ea:	1d19      	adds	r1, r3, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6011      	str	r1, [r2, #0]
 80089f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089f8:	2301      	movs	r3, #1
 80089fa:	e08c      	b.n	8008b16 <_printf_i+0x1be>
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6011      	str	r1, [r2, #0]
 8008a00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a04:	bf18      	it	ne
 8008a06:	b21b      	sxthne	r3, r3
 8008a08:	e7cf      	b.n	80089aa <_printf_i+0x52>
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	6825      	ldr	r5, [r4, #0]
 8008a0e:	1d18      	adds	r0, r3, #4
 8008a10:	6010      	str	r0, [r2, #0]
 8008a12:	0628      	lsls	r0, r5, #24
 8008a14:	d501      	bpl.n	8008a1a <_printf_i+0xc2>
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	e002      	b.n	8008a20 <_printf_i+0xc8>
 8008a1a:	0668      	lsls	r0, r5, #25
 8008a1c:	d5fb      	bpl.n	8008a16 <_printf_i+0xbe>
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	4854      	ldr	r0, [pc, #336]	; (8008b74 <_printf_i+0x21c>)
 8008a22:	296f      	cmp	r1, #111	; 0x6f
 8008a24:	bf14      	ite	ne
 8008a26:	220a      	movne	r2, #10
 8008a28:	2208      	moveq	r2, #8
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a30:	6865      	ldr	r5, [r4, #4]
 8008a32:	60a5      	str	r5, [r4, #8]
 8008a34:	2d00      	cmp	r5, #0
 8008a36:	f2c0 8095 	blt.w	8008b64 <_printf_i+0x20c>
 8008a3a:	6821      	ldr	r1, [r4, #0]
 8008a3c:	f021 0104 	bic.w	r1, r1, #4
 8008a40:	6021      	str	r1, [r4, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d13d      	bne.n	8008ac2 <_printf_i+0x16a>
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	f040 808e 	bne.w	8008b68 <_printf_i+0x210>
 8008a4c:	4665      	mov	r5, ip
 8008a4e:	2a08      	cmp	r2, #8
 8008a50:	d10b      	bne.n	8008a6a <_printf_i+0x112>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	07db      	lsls	r3, r3, #31
 8008a56:	d508      	bpl.n	8008a6a <_printf_i+0x112>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	6862      	ldr	r2, [r4, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	bfde      	ittt	le
 8008a60:	2330      	movle	r3, #48	; 0x30
 8008a62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a6a:	ebac 0305 	sub.w	r3, ip, r5
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	f8cd 8000 	str.w	r8, [sp]
 8008a74:	463b      	mov	r3, r7
 8008a76:	aa03      	add	r2, sp, #12
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff fef6 	bl	800886c <_printf_common>
 8008a80:	3001      	adds	r0, #1
 8008a82:	d14d      	bne.n	8008b20 <_printf_i+0x1c8>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	b005      	add	sp, #20
 8008a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	4839      	ldr	r0, [pc, #228]	; (8008b74 <_printf_i+0x21c>)
 8008a90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a94:	6813      	ldr	r3, [r2, #0]
 8008a96:	6821      	ldr	r1, [r4, #0]
 8008a98:	1d1d      	adds	r5, r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6015      	str	r5, [r2, #0]
 8008a9e:	060a      	lsls	r2, r1, #24
 8008aa0:	d50b      	bpl.n	8008aba <_printf_i+0x162>
 8008aa2:	07ca      	lsls	r2, r1, #31
 8008aa4:	bf44      	itt	mi
 8008aa6:	f041 0120 	orrmi.w	r1, r1, #32
 8008aaa:	6021      	strmi	r1, [r4, #0]
 8008aac:	b91b      	cbnz	r3, 8008ab6 <_printf_i+0x15e>
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	f022 0220 	bic.w	r2, r2, #32
 8008ab4:	6022      	str	r2, [r4, #0]
 8008ab6:	2210      	movs	r2, #16
 8008ab8:	e7b7      	b.n	8008a2a <_printf_i+0xd2>
 8008aba:	064d      	lsls	r5, r1, #25
 8008abc:	bf48      	it	mi
 8008abe:	b29b      	uxthmi	r3, r3
 8008ac0:	e7ef      	b.n	8008aa2 <_printf_i+0x14a>
 8008ac2:	4665      	mov	r5, ip
 8008ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ac8:	fb02 3311 	mls	r3, r2, r1, r3
 8008acc:	5cc3      	ldrb	r3, [r0, r3]
 8008ace:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	d1f5      	bne.n	8008ac4 <_printf_i+0x16c>
 8008ad8:	e7b9      	b.n	8008a4e <_printf_i+0xf6>
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	6825      	ldr	r5, [r4, #0]
 8008ade:	6961      	ldr	r1, [r4, #20]
 8008ae0:	1d18      	adds	r0, r3, #4
 8008ae2:	6010      	str	r0, [r2, #0]
 8008ae4:	0628      	lsls	r0, r5, #24
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	d501      	bpl.n	8008aee <_printf_i+0x196>
 8008aea:	6019      	str	r1, [r3, #0]
 8008aec:	e002      	b.n	8008af4 <_printf_i+0x19c>
 8008aee:	066a      	lsls	r2, r5, #25
 8008af0:	d5fb      	bpl.n	8008aea <_printf_i+0x192>
 8008af2:	8019      	strh	r1, [r3, #0]
 8008af4:	2300      	movs	r3, #0
 8008af6:	6123      	str	r3, [r4, #16]
 8008af8:	4665      	mov	r5, ip
 8008afa:	e7b9      	b.n	8008a70 <_printf_i+0x118>
 8008afc:	6813      	ldr	r3, [r2, #0]
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	6011      	str	r1, [r2, #0]
 8008b02:	681d      	ldr	r5, [r3, #0]
 8008b04:	6862      	ldr	r2, [r4, #4]
 8008b06:	2100      	movs	r1, #0
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f7f7 fb89 	bl	8000220 <memchr>
 8008b0e:	b108      	cbz	r0, 8008b14 <_printf_i+0x1bc>
 8008b10:	1b40      	subs	r0, r0, r5
 8008b12:	6060      	str	r0, [r4, #4]
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b1e:	e7a7      	b.n	8008a70 <_printf_i+0x118>
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	462a      	mov	r2, r5
 8008b24:	4639      	mov	r1, r7
 8008b26:	4630      	mov	r0, r6
 8008b28:	47c0      	blx	r8
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d0aa      	beq.n	8008a84 <_printf_i+0x12c>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	079b      	lsls	r3, r3, #30
 8008b32:	d413      	bmi.n	8008b5c <_printf_i+0x204>
 8008b34:	68e0      	ldr	r0, [r4, #12]
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	4298      	cmp	r0, r3
 8008b3a:	bfb8      	it	lt
 8008b3c:	4618      	movlt	r0, r3
 8008b3e:	e7a3      	b.n	8008a88 <_printf_i+0x130>
 8008b40:	2301      	movs	r3, #1
 8008b42:	464a      	mov	r2, r9
 8008b44:	4639      	mov	r1, r7
 8008b46:	4630      	mov	r0, r6
 8008b48:	47c0      	blx	r8
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d09a      	beq.n	8008a84 <_printf_i+0x12c>
 8008b4e:	3501      	adds	r5, #1
 8008b50:	68e3      	ldr	r3, [r4, #12]
 8008b52:	9a03      	ldr	r2, [sp, #12]
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	42ab      	cmp	r3, r5
 8008b58:	dcf2      	bgt.n	8008b40 <_printf_i+0x1e8>
 8008b5a:	e7eb      	b.n	8008b34 <_printf_i+0x1dc>
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	f104 0919 	add.w	r9, r4, #25
 8008b62:	e7f5      	b.n	8008b50 <_printf_i+0x1f8>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1ac      	bne.n	8008ac2 <_printf_i+0x16a>
 8008b68:	7803      	ldrb	r3, [r0, #0]
 8008b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b72:	e76c      	b.n	8008a4e <_printf_i+0xf6>
 8008b74:	0800a5f9 	.word	0x0800a5f9
 8008b78:	0800a60a 	.word	0x0800a60a

08008b7c <_free_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4605      	mov	r5, r0
 8008b80:	2900      	cmp	r1, #0
 8008b82:	d045      	beq.n	8008c10 <_free_r+0x94>
 8008b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b88:	1f0c      	subs	r4, r1, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bfb8      	it	lt
 8008b8e:	18e4      	addlt	r4, r4, r3
 8008b90:	f000 f8d2 	bl	8008d38 <__malloc_lock>
 8008b94:	4a1f      	ldr	r2, [pc, #124]	; (8008c14 <_free_r+0x98>)
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	4610      	mov	r0, r2
 8008b9a:	b933      	cbnz	r3, 8008baa <_free_r+0x2e>
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6014      	str	r4, [r2, #0]
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba6:	f000 b8c8 	b.w	8008d3a <__malloc_unlock>
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	d90c      	bls.n	8008bc8 <_free_r+0x4c>
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	1862      	adds	r2, r4, r1
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	bf04      	itt	eq
 8008bb6:	681a      	ldreq	r2, [r3, #0]
 8008bb8:	685b      	ldreq	r3, [r3, #4]
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	bf04      	itt	eq
 8008bbe:	1852      	addeq	r2, r2, r1
 8008bc0:	6022      	streq	r2, [r4, #0]
 8008bc2:	6004      	str	r4, [r0, #0]
 8008bc4:	e7ec      	b.n	8008ba0 <_free_r+0x24>
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	b10a      	cbz	r2, 8008bd0 <_free_r+0x54>
 8008bcc:	42a2      	cmp	r2, r4
 8008bce:	d9fa      	bls.n	8008bc6 <_free_r+0x4a>
 8008bd0:	6819      	ldr	r1, [r3, #0]
 8008bd2:	1858      	adds	r0, r3, r1
 8008bd4:	42a0      	cmp	r0, r4
 8008bd6:	d10b      	bne.n	8008bf0 <_free_r+0x74>
 8008bd8:	6820      	ldr	r0, [r4, #0]
 8008bda:	4401      	add	r1, r0
 8008bdc:	1858      	adds	r0, r3, r1
 8008bde:	4282      	cmp	r2, r0
 8008be0:	6019      	str	r1, [r3, #0]
 8008be2:	d1dd      	bne.n	8008ba0 <_free_r+0x24>
 8008be4:	6810      	ldr	r0, [r2, #0]
 8008be6:	6852      	ldr	r2, [r2, #4]
 8008be8:	605a      	str	r2, [r3, #4]
 8008bea:	4401      	add	r1, r0
 8008bec:	6019      	str	r1, [r3, #0]
 8008bee:	e7d7      	b.n	8008ba0 <_free_r+0x24>
 8008bf0:	d902      	bls.n	8008bf8 <_free_r+0x7c>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	602b      	str	r3, [r5, #0]
 8008bf6:	e7d3      	b.n	8008ba0 <_free_r+0x24>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	1821      	adds	r1, r4, r0
 8008bfc:	428a      	cmp	r2, r1
 8008bfe:	bf04      	itt	eq
 8008c00:	6811      	ldreq	r1, [r2, #0]
 8008c02:	6852      	ldreq	r2, [r2, #4]
 8008c04:	6062      	str	r2, [r4, #4]
 8008c06:	bf04      	itt	eq
 8008c08:	1809      	addeq	r1, r1, r0
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	605c      	str	r4, [r3, #4]
 8008c0e:	e7c7      	b.n	8008ba0 <_free_r+0x24>
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	20000a3c 	.word	0x20000a3c

08008c18 <_malloc_r>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	1ccd      	adds	r5, r1, #3
 8008c1c:	f025 0503 	bic.w	r5, r5, #3
 8008c20:	3508      	adds	r5, #8
 8008c22:	2d0c      	cmp	r5, #12
 8008c24:	bf38      	it	cc
 8008c26:	250c      	movcc	r5, #12
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	db01      	blt.n	8008c32 <_malloc_r+0x1a>
 8008c2e:	42a9      	cmp	r1, r5
 8008c30:	d903      	bls.n	8008c3a <_malloc_r+0x22>
 8008c32:	230c      	movs	r3, #12
 8008c34:	6033      	str	r3, [r6, #0]
 8008c36:	2000      	movs	r0, #0
 8008c38:	bd70      	pop	{r4, r5, r6, pc}
 8008c3a:	f000 f87d 	bl	8008d38 <__malloc_lock>
 8008c3e:	4a21      	ldr	r2, [pc, #132]	; (8008cc4 <_malloc_r+0xac>)
 8008c40:	6814      	ldr	r4, [r2, #0]
 8008c42:	4621      	mov	r1, r4
 8008c44:	b991      	cbnz	r1, 8008c6c <_malloc_r+0x54>
 8008c46:	4c20      	ldr	r4, [pc, #128]	; (8008cc8 <_malloc_r+0xb0>)
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	b91b      	cbnz	r3, 8008c54 <_malloc_r+0x3c>
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f000 f863 	bl	8008d18 <_sbrk_r>
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	4629      	mov	r1, r5
 8008c56:	4630      	mov	r0, r6
 8008c58:	f000 f85e 	bl	8008d18 <_sbrk_r>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d124      	bne.n	8008caa <_malloc_r+0x92>
 8008c60:	230c      	movs	r3, #12
 8008c62:	6033      	str	r3, [r6, #0]
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 f868 	bl	8008d3a <__malloc_unlock>
 8008c6a:	e7e4      	b.n	8008c36 <_malloc_r+0x1e>
 8008c6c:	680b      	ldr	r3, [r1, #0]
 8008c6e:	1b5b      	subs	r3, r3, r5
 8008c70:	d418      	bmi.n	8008ca4 <_malloc_r+0x8c>
 8008c72:	2b0b      	cmp	r3, #11
 8008c74:	d90f      	bls.n	8008c96 <_malloc_r+0x7e>
 8008c76:	600b      	str	r3, [r1, #0]
 8008c78:	50cd      	str	r5, [r1, r3]
 8008c7a:	18cc      	adds	r4, r1, r3
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f000 f85c 	bl	8008d3a <__malloc_unlock>
 8008c82:	f104 000b 	add.w	r0, r4, #11
 8008c86:	1d23      	adds	r3, r4, #4
 8008c88:	f020 0007 	bic.w	r0, r0, #7
 8008c8c:	1ac3      	subs	r3, r0, r3
 8008c8e:	d0d3      	beq.n	8008c38 <_malloc_r+0x20>
 8008c90:	425a      	negs	r2, r3
 8008c92:	50e2      	str	r2, [r4, r3]
 8008c94:	e7d0      	b.n	8008c38 <_malloc_r+0x20>
 8008c96:	428c      	cmp	r4, r1
 8008c98:	684b      	ldr	r3, [r1, #4]
 8008c9a:	bf16      	itet	ne
 8008c9c:	6063      	strne	r3, [r4, #4]
 8008c9e:	6013      	streq	r3, [r2, #0]
 8008ca0:	460c      	movne	r4, r1
 8008ca2:	e7eb      	b.n	8008c7c <_malloc_r+0x64>
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	6849      	ldr	r1, [r1, #4]
 8008ca8:	e7cc      	b.n	8008c44 <_malloc_r+0x2c>
 8008caa:	1cc4      	adds	r4, r0, #3
 8008cac:	f024 0403 	bic.w	r4, r4, #3
 8008cb0:	42a0      	cmp	r0, r4
 8008cb2:	d005      	beq.n	8008cc0 <_malloc_r+0xa8>
 8008cb4:	1a21      	subs	r1, r4, r0
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f000 f82e 	bl	8008d18 <_sbrk_r>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d0cf      	beq.n	8008c60 <_malloc_r+0x48>
 8008cc0:	6025      	str	r5, [r4, #0]
 8008cc2:	e7db      	b.n	8008c7c <_malloc_r+0x64>
 8008cc4:	20000a3c 	.word	0x20000a3c
 8008cc8:	20000a40 	.word	0x20000a40

08008ccc <_realloc_r>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	4607      	mov	r7, r0
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	460e      	mov	r6, r1
 8008cd4:	b921      	cbnz	r1, 8008ce0 <_realloc_r+0x14>
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cdc:	f7ff bf9c 	b.w	8008c18 <_malloc_r>
 8008ce0:	b922      	cbnz	r2, 8008cec <_realloc_r+0x20>
 8008ce2:	f7ff ff4b 	bl	8008b7c <_free_r>
 8008ce6:	4625      	mov	r5, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cec:	f000 f826 	bl	8008d3c <_malloc_usable_size_r>
 8008cf0:	42a0      	cmp	r0, r4
 8008cf2:	d20f      	bcs.n	8008d14 <_realloc_r+0x48>
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f7ff ff8e 	bl	8008c18 <_malloc_r>
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d0f2      	beq.n	8008ce8 <_realloc_r+0x1c>
 8008d02:	4631      	mov	r1, r6
 8008d04:	4622      	mov	r2, r4
 8008d06:	f7ff fc13 	bl	8008530 <memcpy>
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff ff35 	bl	8008b7c <_free_r>
 8008d12:	e7e9      	b.n	8008ce8 <_realloc_r+0x1c>
 8008d14:	4635      	mov	r5, r6
 8008d16:	e7e7      	b.n	8008ce8 <_realloc_r+0x1c>

08008d18 <_sbrk_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4c06      	ldr	r4, [pc, #24]	; (8008d34 <_sbrk_r+0x1c>)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4605      	mov	r5, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	f7fb faa4 	bl	8004270 <_sbrk>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_sbrk_r+0x1a>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_sbrk_r+0x1a>
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	20003eb4 	.word	0x20003eb4

08008d38 <__malloc_lock>:
 8008d38:	4770      	bx	lr

08008d3a <__malloc_unlock>:
 8008d3a:	4770      	bx	lr

08008d3c <_malloc_usable_size_r>:
 8008d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d40:	1f18      	subs	r0, r3, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	bfbc      	itt	lt
 8008d46:	580b      	ldrlt	r3, [r1, r0]
 8008d48:	18c0      	addlt	r0, r0, r3
 8008d4a:	4770      	bx	lr

08008d4c <pow>:
 8008d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d50:	ed2d 8b04 	vpush	{d8-d9}
 8008d54:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009028 <pow+0x2dc>
 8008d58:	b08d      	sub	sp, #52	; 0x34
 8008d5a:	ec57 6b10 	vmov	r6, r7, d0
 8008d5e:	ec55 4b11 	vmov	r4, r5, d1
 8008d62:	f000 f965 	bl	8009030 <__ieee754_pow>
 8008d66:	f999 3000 	ldrsb.w	r3, [r9]
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8008d72:	eef0 8a60 	vmov.f32	s17, s1
 8008d76:	46c8      	mov	r8, r9
 8008d78:	d05f      	beq.n	8008e3a <pow+0xee>
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	462b      	mov	r3, r5
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fef3 	bl	8000b6c <__aeabi_dcmpun>
 8008d86:	4683      	mov	fp, r0
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d156      	bne.n	8008e3a <pow+0xee>
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	463b      	mov	r3, r7
 8008d90:	4630      	mov	r0, r6
 8008d92:	4639      	mov	r1, r7
 8008d94:	f7f7 feea 	bl	8000b6c <__aeabi_dcmpun>
 8008d98:	9001      	str	r0, [sp, #4]
 8008d9a:	b1e8      	cbz	r0, 8008dd8 <pow+0x8c>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4620      	mov	r0, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	f7f7 feb0 	bl	8000b08 <__aeabi_dcmpeq>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d046      	beq.n	8008e3a <pow+0xee>
 8008dac:	2301      	movs	r3, #1
 8008dae:	9302      	str	r3, [sp, #8]
 8008db0:	4b96      	ldr	r3, [pc, #600]	; (800900c <pow+0x2c0>)
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	4b96      	ldr	r3, [pc, #600]	; (8009010 <pow+0x2c4>)
 8008db6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008dba:	2200      	movs	r2, #0
 8008dbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008dc0:	9b00      	ldr	r3, [sp, #0]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008dc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008dcc:	d033      	beq.n	8008e36 <pow+0xea>
 8008dce:	a802      	add	r0, sp, #8
 8008dd0:	f000 fefd 	bl	8009bce <matherr>
 8008dd4:	bb48      	cbnz	r0, 8008e2a <pow+0xde>
 8008dd6:	e05d      	b.n	8008e94 <pow+0x148>
 8008dd8:	f04f 0a00 	mov.w	sl, #0
 8008ddc:	f04f 0b00 	mov.w	fp, #0
 8008de0:	4652      	mov	r2, sl
 8008de2:	465b      	mov	r3, fp
 8008de4:	4630      	mov	r0, r6
 8008de6:	4639      	mov	r1, r7
 8008de8:	f7f7 fe8e 	bl	8000b08 <__aeabi_dcmpeq>
 8008dec:	ec4b ab19 	vmov	d9, sl, fp
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d054      	beq.n	8008e9e <pow+0x152>
 8008df4:	4652      	mov	r2, sl
 8008df6:	465b      	mov	r3, fp
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7f7 fe84 	bl	8000b08 <__aeabi_dcmpeq>
 8008e00:	4680      	mov	r8, r0
 8008e02:	b318      	cbz	r0, 8008e4c <pow+0x100>
 8008e04:	2301      	movs	r3, #1
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	4b80      	ldr	r3, [pc, #512]	; (800900c <pow+0x2c0>)
 8008e0a:	9303      	str	r3, [sp, #12]
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e10:	9b00      	ldr	r3, [sp, #0]
 8008e12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008e1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0d5      	beq.n	8008dce <pow+0x82>
 8008e22:	4b7b      	ldr	r3, [pc, #492]	; (8009010 <pow+0x2c4>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e2c:	b11b      	cbz	r3, 8008e36 <pow+0xea>
 8008e2e:	f7ff fb55 	bl	80084dc <__errno>
 8008e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e34:	6003      	str	r3, [r0, #0]
 8008e36:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8008e3e:	eef0 0a68 	vmov.f32	s1, s17
 8008e42:	b00d      	add	sp, #52	; 0x34
 8008e44:	ecbd 8b04 	vpop	{d8-d9}
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4c:	ec45 4b10 	vmov	d0, r4, r5
 8008e50:	f000 feb5 	bl	8009bbe <finite>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d0f0      	beq.n	8008e3a <pow+0xee>
 8008e58:	4652      	mov	r2, sl
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	4629      	mov	r1, r5
 8008e60:	f7f7 fe5c 	bl	8000b1c <__aeabi_dcmplt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d0e8      	beq.n	8008e3a <pow+0xee>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	9302      	str	r3, [sp, #8]
 8008e6c:	4b67      	ldr	r3, [pc, #412]	; (800900c <pow+0x2c0>)
 8008e6e:	9303      	str	r3, [sp, #12]
 8008e70:	f999 3000 	ldrsb.w	r3, [r9]
 8008e74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008e78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008e80:	b913      	cbnz	r3, 8008e88 <pow+0x13c>
 8008e82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008e86:	e7a2      	b.n	8008dce <pow+0x82>
 8008e88:	4962      	ldr	r1, [pc, #392]	; (8009014 <pow+0x2c8>)
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d19c      	bne.n	8008dce <pow+0x82>
 8008e94:	f7ff fb22 	bl	80084dc <__errno>
 8008e98:	2321      	movs	r3, #33	; 0x21
 8008e9a:	6003      	str	r3, [r0, #0]
 8008e9c:	e7c5      	b.n	8008e2a <pow+0xde>
 8008e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8008ea2:	eef0 0a68 	vmov.f32	s1, s17
 8008ea6:	f000 fe8a 	bl	8009bbe <finite>
 8008eaa:	9000      	str	r0, [sp, #0]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	f040 8081 	bne.w	8008fb4 <pow+0x268>
 8008eb2:	ec47 6b10 	vmov	d0, r6, r7
 8008eb6:	f000 fe82 	bl	8009bbe <finite>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d07a      	beq.n	8008fb4 <pow+0x268>
 8008ebe:	ec45 4b10 	vmov	d0, r4, r5
 8008ec2:	f000 fe7c 	bl	8009bbe <finite>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d074      	beq.n	8008fb4 <pow+0x268>
 8008eca:	ec53 2b18 	vmov	r2, r3, d8
 8008ece:	ee18 0a10 	vmov	r0, s16
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	f7f7 fe4a 	bl	8000b6c <__aeabi_dcmpun>
 8008ed8:	f999 9000 	ldrsb.w	r9, [r9]
 8008edc:	4b4b      	ldr	r3, [pc, #300]	; (800900c <pow+0x2c0>)
 8008ede:	b1b0      	cbz	r0, 8008f0e <pow+0x1c2>
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8008eea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008eee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ef2:	f1b9 0f00 	cmp.w	r9, #0
 8008ef6:	d0c4      	beq.n	8008e82 <pow+0x136>
 8008ef8:	4652      	mov	r2, sl
 8008efa:	465b      	mov	r3, fp
 8008efc:	4650      	mov	r0, sl
 8008efe:	4659      	mov	r1, fp
 8008f00:	f7f7 fcc4 	bl	800088c <__aeabi_ddiv>
 8008f04:	f1b9 0f02 	cmp.w	r9, #2
 8008f08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f0c:	e7c1      	b.n	8008e92 <pow+0x146>
 8008f0e:	2203      	movs	r2, #3
 8008f10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f14:	900a      	str	r0, [sp, #40]	; 0x28
 8008f16:	4629      	mov	r1, r5
 8008f18:	4620      	mov	r0, r4
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4b3e      	ldr	r3, [pc, #248]	; (8009018 <pow+0x2cc>)
 8008f1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f26:	f7f7 fb87 	bl	8000638 <__aeabi_dmul>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	f1b9 0f00 	cmp.w	r9, #0
 8008f32:	d124      	bne.n	8008f7e <pow+0x232>
 8008f34:	4b39      	ldr	r3, [pc, #228]	; (800901c <pow+0x2d0>)
 8008f36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008f3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f3e:	4630      	mov	r0, r6
 8008f40:	4652      	mov	r2, sl
 8008f42:	465b      	mov	r3, fp
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7f7 fde9 	bl	8000b1c <__aeabi_dcmplt>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d056      	beq.n	8008ffc <pow+0x2b0>
 8008f4e:	ec45 4b10 	vmov	d0, r4, r5
 8008f52:	f000 fe49 	bl	8009be8 <rint>
 8008f56:	4622      	mov	r2, r4
 8008f58:	462b      	mov	r3, r5
 8008f5a:	ec51 0b10 	vmov	r0, r1, d0
 8008f5e:	f7f7 fdd3 	bl	8000b08 <__aeabi_dcmpeq>
 8008f62:	b920      	cbnz	r0, 8008f6e <pow+0x222>
 8008f64:	4b2e      	ldr	r3, [pc, #184]	; (8009020 <pow+0x2d4>)
 8008f66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008f6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f6e:	f998 3000 	ldrsb.w	r3, [r8]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d142      	bne.n	8008ffc <pow+0x2b0>
 8008f76:	f7ff fab1 	bl	80084dc <__errno>
 8008f7a:	2322      	movs	r3, #34	; 0x22
 8008f7c:	e78d      	b.n	8008e9a <pow+0x14e>
 8008f7e:	4b29      	ldr	r3, [pc, #164]	; (8009024 <pow+0x2d8>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f86:	4630      	mov	r0, r6
 8008f88:	4652      	mov	r2, sl
 8008f8a:	465b      	mov	r3, fp
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	f7f7 fdc5 	bl	8000b1c <__aeabi_dcmplt>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d0eb      	beq.n	8008f6e <pow+0x222>
 8008f96:	ec45 4b10 	vmov	d0, r4, r5
 8008f9a:	f000 fe25 	bl	8009be8 <rint>
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	ec51 0b10 	vmov	r0, r1, d0
 8008fa6:	f7f7 fdaf 	bl	8000b08 <__aeabi_dcmpeq>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d1df      	bne.n	8008f6e <pow+0x222>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	4b18      	ldr	r3, [pc, #96]	; (8009014 <pow+0x2c8>)
 8008fb2:	e7da      	b.n	8008f6a <pow+0x21e>
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	ec51 0b18 	vmov	r0, r1, d8
 8008fbc:	f7f7 fda4 	bl	8000b08 <__aeabi_dcmpeq>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f43f af3a 	beq.w	8008e3a <pow+0xee>
 8008fc6:	ec47 6b10 	vmov	d0, r6, r7
 8008fca:	f000 fdf8 	bl	8009bbe <finite>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f af33 	beq.w	8008e3a <pow+0xee>
 8008fd4:	ec45 4b10 	vmov	d0, r4, r5
 8008fd8:	f000 fdf1 	bl	8009bbe <finite>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f43f af2c 	beq.w	8008e3a <pow+0xee>
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	9302      	str	r3, [sp, #8]
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <pow+0x2c0>)
 8008fe8:	9303      	str	r3, [sp, #12]
 8008fea:	2300      	movs	r3, #0
 8008fec:	930a      	str	r3, [sp, #40]	; 0x28
 8008fee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ff2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ff6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008ffa:	e7b8      	b.n	8008f6e <pow+0x222>
 8008ffc:	a802      	add	r0, sp, #8
 8008ffe:	f000 fde6 	bl	8009bce <matherr>
 8009002:	2800      	cmp	r0, #0
 8009004:	f47f af11 	bne.w	8008e2a <pow+0xde>
 8009008:	e7b5      	b.n	8008f76 <pow+0x22a>
 800900a:	bf00      	nop
 800900c:	0800a61b 	.word	0x0800a61b
 8009010:	3ff00000 	.word	0x3ff00000
 8009014:	fff00000 	.word	0xfff00000
 8009018:	3fe00000 	.word	0x3fe00000
 800901c:	47efffff 	.word	0x47efffff
 8009020:	c7efffff 	.word	0xc7efffff
 8009024:	7ff00000 	.word	0x7ff00000
 8009028:	200009e4 	.word	0x200009e4
 800902c:	00000000 	.word	0x00000000

08009030 <__ieee754_pow>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	b091      	sub	sp, #68	; 0x44
 8009036:	ed8d 1b00 	vstr	d1, [sp]
 800903a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800903e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009042:	ea58 0302 	orrs.w	r3, r8, r2
 8009046:	ec57 6b10 	vmov	r6, r7, d0
 800904a:	f000 84be 	beq.w	80099ca <__ieee754_pow+0x99a>
 800904e:	4b7a      	ldr	r3, [pc, #488]	; (8009238 <__ieee754_pow+0x208>)
 8009050:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009054:	429c      	cmp	r4, r3
 8009056:	463d      	mov	r5, r7
 8009058:	ee10 aa10 	vmov	sl, s0
 800905c:	dc09      	bgt.n	8009072 <__ieee754_pow+0x42>
 800905e:	d103      	bne.n	8009068 <__ieee754_pow+0x38>
 8009060:	b93e      	cbnz	r6, 8009072 <__ieee754_pow+0x42>
 8009062:	45a0      	cmp	r8, r4
 8009064:	dc0d      	bgt.n	8009082 <__ieee754_pow+0x52>
 8009066:	e001      	b.n	800906c <__ieee754_pow+0x3c>
 8009068:	4598      	cmp	r8, r3
 800906a:	dc02      	bgt.n	8009072 <__ieee754_pow+0x42>
 800906c:	4598      	cmp	r8, r3
 800906e:	d10e      	bne.n	800908e <__ieee754_pow+0x5e>
 8009070:	b16a      	cbz	r2, 800908e <__ieee754_pow+0x5e>
 8009072:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009076:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800907a:	ea54 030a 	orrs.w	r3, r4, sl
 800907e:	f000 84a4 	beq.w	80099ca <__ieee754_pow+0x99a>
 8009082:	486e      	ldr	r0, [pc, #440]	; (800923c <__ieee754_pow+0x20c>)
 8009084:	b011      	add	sp, #68	; 0x44
 8009086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908a:	f000 bda5 	b.w	8009bd8 <nan>
 800908e:	2d00      	cmp	r5, #0
 8009090:	da53      	bge.n	800913a <__ieee754_pow+0x10a>
 8009092:	4b6b      	ldr	r3, [pc, #428]	; (8009240 <__ieee754_pow+0x210>)
 8009094:	4598      	cmp	r8, r3
 8009096:	dc4d      	bgt.n	8009134 <__ieee754_pow+0x104>
 8009098:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800909c:	4598      	cmp	r8, r3
 800909e:	dd4c      	ble.n	800913a <__ieee754_pow+0x10a>
 80090a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80090a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090a8:	2b14      	cmp	r3, #20
 80090aa:	dd26      	ble.n	80090fa <__ieee754_pow+0xca>
 80090ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80090b0:	fa22 f103 	lsr.w	r1, r2, r3
 80090b4:	fa01 f303 	lsl.w	r3, r1, r3
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d13e      	bne.n	800913a <__ieee754_pow+0x10a>
 80090bc:	f001 0101 	and.w	r1, r1, #1
 80090c0:	f1c1 0b02 	rsb	fp, r1, #2
 80090c4:	2a00      	cmp	r2, #0
 80090c6:	d15b      	bne.n	8009180 <__ieee754_pow+0x150>
 80090c8:	4b5b      	ldr	r3, [pc, #364]	; (8009238 <__ieee754_pow+0x208>)
 80090ca:	4598      	cmp	r8, r3
 80090cc:	d124      	bne.n	8009118 <__ieee754_pow+0xe8>
 80090ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80090d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80090d6:	ea53 030a 	orrs.w	r3, r3, sl
 80090da:	f000 8476 	beq.w	80099ca <__ieee754_pow+0x99a>
 80090de:	4b59      	ldr	r3, [pc, #356]	; (8009244 <__ieee754_pow+0x214>)
 80090e0:	429c      	cmp	r4, r3
 80090e2:	dd2d      	ble.n	8009140 <__ieee754_pow+0x110>
 80090e4:	f1b9 0f00 	cmp.w	r9, #0
 80090e8:	f280 8473 	bge.w	80099d2 <__ieee754_pow+0x9a2>
 80090ec:	2000      	movs	r0, #0
 80090ee:	2100      	movs	r1, #0
 80090f0:	ec41 0b10 	vmov	d0, r0, r1
 80090f4:	b011      	add	sp, #68	; 0x44
 80090f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	d13e      	bne.n	800917c <__ieee754_pow+0x14c>
 80090fe:	f1c3 0314 	rsb	r3, r3, #20
 8009102:	fa48 f103 	asr.w	r1, r8, r3
 8009106:	fa01 f303 	lsl.w	r3, r1, r3
 800910a:	4543      	cmp	r3, r8
 800910c:	f040 8469 	bne.w	80099e2 <__ieee754_pow+0x9b2>
 8009110:	f001 0101 	and.w	r1, r1, #1
 8009114:	f1c1 0b02 	rsb	fp, r1, #2
 8009118:	4b4b      	ldr	r3, [pc, #300]	; (8009248 <__ieee754_pow+0x218>)
 800911a:	4598      	cmp	r8, r3
 800911c:	d118      	bne.n	8009150 <__ieee754_pow+0x120>
 800911e:	f1b9 0f00 	cmp.w	r9, #0
 8009122:	f280 845a 	bge.w	80099da <__ieee754_pow+0x9aa>
 8009126:	4948      	ldr	r1, [pc, #288]	; (8009248 <__ieee754_pow+0x218>)
 8009128:	4632      	mov	r2, r6
 800912a:	463b      	mov	r3, r7
 800912c:	2000      	movs	r0, #0
 800912e:	f7f7 fbad 	bl	800088c <__aeabi_ddiv>
 8009132:	e7dd      	b.n	80090f0 <__ieee754_pow+0xc0>
 8009134:	f04f 0b02 	mov.w	fp, #2
 8009138:	e7c4      	b.n	80090c4 <__ieee754_pow+0x94>
 800913a:	f04f 0b00 	mov.w	fp, #0
 800913e:	e7c1      	b.n	80090c4 <__ieee754_pow+0x94>
 8009140:	f1b9 0f00 	cmp.w	r9, #0
 8009144:	dad2      	bge.n	80090ec <__ieee754_pow+0xbc>
 8009146:	e9dd 0300 	ldrd	r0, r3, [sp]
 800914a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800914e:	e7cf      	b.n	80090f0 <__ieee754_pow+0xc0>
 8009150:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009154:	d106      	bne.n	8009164 <__ieee754_pow+0x134>
 8009156:	4632      	mov	r2, r6
 8009158:	463b      	mov	r3, r7
 800915a:	4610      	mov	r0, r2
 800915c:	4619      	mov	r1, r3
 800915e:	f7f7 fa6b 	bl	8000638 <__aeabi_dmul>
 8009162:	e7c5      	b.n	80090f0 <__ieee754_pow+0xc0>
 8009164:	4b39      	ldr	r3, [pc, #228]	; (800924c <__ieee754_pow+0x21c>)
 8009166:	4599      	cmp	r9, r3
 8009168:	d10a      	bne.n	8009180 <__ieee754_pow+0x150>
 800916a:	2d00      	cmp	r5, #0
 800916c:	db08      	blt.n	8009180 <__ieee754_pow+0x150>
 800916e:	ec47 6b10 	vmov	d0, r6, r7
 8009172:	b011      	add	sp, #68	; 0x44
 8009174:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	f000 bc68 	b.w	8009a4c <__ieee754_sqrt>
 800917c:	f04f 0b00 	mov.w	fp, #0
 8009180:	ec47 6b10 	vmov	d0, r6, r7
 8009184:	f000 fd12 	bl	8009bac <fabs>
 8009188:	ec51 0b10 	vmov	r0, r1, d0
 800918c:	f1ba 0f00 	cmp.w	sl, #0
 8009190:	d127      	bne.n	80091e2 <__ieee754_pow+0x1b2>
 8009192:	b124      	cbz	r4, 800919e <__ieee754_pow+0x16e>
 8009194:	4b2c      	ldr	r3, [pc, #176]	; (8009248 <__ieee754_pow+0x218>)
 8009196:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800919a:	429a      	cmp	r2, r3
 800919c:	d121      	bne.n	80091e2 <__ieee754_pow+0x1b2>
 800919e:	f1b9 0f00 	cmp.w	r9, #0
 80091a2:	da05      	bge.n	80091b0 <__ieee754_pow+0x180>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	2000      	movs	r0, #0
 80091aa:	4927      	ldr	r1, [pc, #156]	; (8009248 <__ieee754_pow+0x218>)
 80091ac:	f7f7 fb6e 	bl	800088c <__aeabi_ddiv>
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	da9d      	bge.n	80090f0 <__ieee754_pow+0xc0>
 80091b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80091b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091bc:	ea54 030b 	orrs.w	r3, r4, fp
 80091c0:	d108      	bne.n	80091d4 <__ieee754_pow+0x1a4>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4610      	mov	r0, r2
 80091c8:	4619      	mov	r1, r3
 80091ca:	f7f7 f87d 	bl	80002c8 <__aeabi_dsub>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	e7ac      	b.n	800912e <__ieee754_pow+0xfe>
 80091d4:	f1bb 0f01 	cmp.w	fp, #1
 80091d8:	d18a      	bne.n	80090f0 <__ieee754_pow+0xc0>
 80091da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091de:	4619      	mov	r1, r3
 80091e0:	e786      	b.n	80090f0 <__ieee754_pow+0xc0>
 80091e2:	0fed      	lsrs	r5, r5, #31
 80091e4:	1e6b      	subs	r3, r5, #1
 80091e6:	930d      	str	r3, [sp, #52]	; 0x34
 80091e8:	ea5b 0303 	orrs.w	r3, fp, r3
 80091ec:	d102      	bne.n	80091f4 <__ieee754_pow+0x1c4>
 80091ee:	4632      	mov	r2, r6
 80091f0:	463b      	mov	r3, r7
 80091f2:	e7e8      	b.n	80091c6 <__ieee754_pow+0x196>
 80091f4:	4b16      	ldr	r3, [pc, #88]	; (8009250 <__ieee754_pow+0x220>)
 80091f6:	4598      	cmp	r8, r3
 80091f8:	f340 80fe 	ble.w	80093f8 <__ieee754_pow+0x3c8>
 80091fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009200:	4598      	cmp	r8, r3
 8009202:	dd0a      	ble.n	800921a <__ieee754_pow+0x1ea>
 8009204:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <__ieee754_pow+0x214>)
 8009206:	429c      	cmp	r4, r3
 8009208:	dc0d      	bgt.n	8009226 <__ieee754_pow+0x1f6>
 800920a:	f1b9 0f00 	cmp.w	r9, #0
 800920e:	f6bf af6d 	bge.w	80090ec <__ieee754_pow+0xbc>
 8009212:	a307      	add	r3, pc, #28	; (adr r3, 8009230 <__ieee754_pow+0x200>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	e79f      	b.n	800915a <__ieee754_pow+0x12a>
 800921a:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <__ieee754_pow+0x224>)
 800921c:	429c      	cmp	r4, r3
 800921e:	ddf4      	ble.n	800920a <__ieee754_pow+0x1da>
 8009220:	4b09      	ldr	r3, [pc, #36]	; (8009248 <__ieee754_pow+0x218>)
 8009222:	429c      	cmp	r4, r3
 8009224:	dd18      	ble.n	8009258 <__ieee754_pow+0x228>
 8009226:	f1b9 0f00 	cmp.w	r9, #0
 800922a:	dcf2      	bgt.n	8009212 <__ieee754_pow+0x1e2>
 800922c:	e75e      	b.n	80090ec <__ieee754_pow+0xbc>
 800922e:	bf00      	nop
 8009230:	8800759c 	.word	0x8800759c
 8009234:	7e37e43c 	.word	0x7e37e43c
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	0800a5ed 	.word	0x0800a5ed
 8009240:	433fffff 	.word	0x433fffff
 8009244:	3fefffff 	.word	0x3fefffff
 8009248:	3ff00000 	.word	0x3ff00000
 800924c:	3fe00000 	.word	0x3fe00000
 8009250:	41e00000 	.word	0x41e00000
 8009254:	3feffffe 	.word	0x3feffffe
 8009258:	2200      	movs	r2, #0
 800925a:	4b63      	ldr	r3, [pc, #396]	; (80093e8 <__ieee754_pow+0x3b8>)
 800925c:	f7f7 f834 	bl	80002c8 <__aeabi_dsub>
 8009260:	a355      	add	r3, pc, #340	; (adr r3, 80093b8 <__ieee754_pow+0x388>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	4604      	mov	r4, r0
 8009268:	460d      	mov	r5, r1
 800926a:	f7f7 f9e5 	bl	8000638 <__aeabi_dmul>
 800926e:	a354      	add	r3, pc, #336	; (adr r3, 80093c0 <__ieee754_pow+0x390>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	4606      	mov	r6, r0
 8009276:	460f      	mov	r7, r1
 8009278:	4620      	mov	r0, r4
 800927a:	4629      	mov	r1, r5
 800927c:	f7f7 f9dc 	bl	8000638 <__aeabi_dmul>
 8009280:	2200      	movs	r2, #0
 8009282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009286:	4b59      	ldr	r3, [pc, #356]	; (80093ec <__ieee754_pow+0x3bc>)
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f7 f9d4 	bl	8000638 <__aeabi_dmul>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	a14c      	add	r1, pc, #304	; (adr r1, 80093c8 <__ieee754_pow+0x398>)
 8009296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800929a:	f7f7 f815 	bl	80002c8 <__aeabi_dsub>
 800929e:	4622      	mov	r2, r4
 80092a0:	462b      	mov	r3, r5
 80092a2:	f7f7 f9c9 	bl	8000638 <__aeabi_dmul>
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	2000      	movs	r0, #0
 80092ac:	4950      	ldr	r1, [pc, #320]	; (80093f0 <__ieee754_pow+0x3c0>)
 80092ae:	f7f7 f80b 	bl	80002c8 <__aeabi_dsub>
 80092b2:	4622      	mov	r2, r4
 80092b4:	462b      	mov	r3, r5
 80092b6:	4680      	mov	r8, r0
 80092b8:	4689      	mov	r9, r1
 80092ba:	4620      	mov	r0, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	f7f7 f9bb 	bl	8000638 <__aeabi_dmul>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 f9b5 	bl	8000638 <__aeabi_dmul>
 80092ce:	a340      	add	r3, pc, #256	; (adr r3, 80093d0 <__ieee754_pow+0x3a0>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f7f7 f9b0 	bl	8000638 <__aeabi_dmul>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092e0:	f7f6 fff2 	bl	80002c8 <__aeabi_dsub>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4604      	mov	r4, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	4630      	mov	r0, r6
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f6 ffec 	bl	80002cc <__adddf3>
 80092f4:	2000      	movs	r0, #0
 80092f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092fa:	4632      	mov	r2, r6
 80092fc:	463b      	mov	r3, r7
 80092fe:	f7f6 ffe3 	bl	80002c8 <__aeabi_dsub>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4620      	mov	r0, r4
 8009308:	4629      	mov	r1, r5
 800930a:	f7f6 ffdd 	bl	80002c8 <__aeabi_dsub>
 800930e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009310:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009314:	4313      	orrs	r3, r2
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	f040 81eb 	bne.w	80096f4 <__ieee754_pow+0x6c4>
 800931e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80093d8 <__ieee754_pow+0x3a8>
 8009322:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009326:	2400      	movs	r4, #0
 8009328:	4622      	mov	r2, r4
 800932a:	462b      	mov	r3, r5
 800932c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009330:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009334:	f7f6 ffc8 	bl	80002c8 <__aeabi_dsub>
 8009338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800933c:	f7f7 f97c 	bl	8000638 <__aeabi_dmul>
 8009340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f7f7 f974 	bl	8000638 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	f7f6 ffb8 	bl	80002cc <__adddf3>
 800935c:	4622      	mov	r2, r4
 800935e:	462b      	mov	r3, r5
 8009360:	4680      	mov	r8, r0
 8009362:	4689      	mov	r9, r1
 8009364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009368:	f7f7 f966 	bl	8000638 <__aeabi_dmul>
 800936c:	460b      	mov	r3, r1
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	4602      	mov	r2, r0
 8009374:	4649      	mov	r1, r9
 8009376:	4640      	mov	r0, r8
 8009378:	e9cd 4500 	strd	r4, r5, [sp]
 800937c:	f7f6 ffa6 	bl	80002cc <__adddf3>
 8009380:	4b1c      	ldr	r3, [pc, #112]	; (80093f4 <__ieee754_pow+0x3c4>)
 8009382:	4299      	cmp	r1, r3
 8009384:	4606      	mov	r6, r0
 8009386:	460f      	mov	r7, r1
 8009388:	468b      	mov	fp, r1
 800938a:	f340 82f7 	ble.w	800997c <__ieee754_pow+0x94c>
 800938e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009392:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009396:	4303      	orrs	r3, r0
 8009398:	f000 81ea 	beq.w	8009770 <__ieee754_pow+0x740>
 800939c:	a310      	add	r3, pc, #64	; (adr r3, 80093e0 <__ieee754_pow+0x3b0>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a6:	f7f7 f947 	bl	8000638 <__aeabi_dmul>
 80093aa:	a30d      	add	r3, pc, #52	; (adr r3, 80093e0 <__ieee754_pow+0x3b0>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	e6d5      	b.n	800915e <__ieee754_pow+0x12e>
 80093b2:	bf00      	nop
 80093b4:	f3af 8000 	nop.w
 80093b8:	60000000 	.word	0x60000000
 80093bc:	3ff71547 	.word	0x3ff71547
 80093c0:	f85ddf44 	.word	0xf85ddf44
 80093c4:	3e54ae0b 	.word	0x3e54ae0b
 80093c8:	55555555 	.word	0x55555555
 80093cc:	3fd55555 	.word	0x3fd55555
 80093d0:	652b82fe 	.word	0x652b82fe
 80093d4:	3ff71547 	.word	0x3ff71547
 80093d8:	00000000 	.word	0x00000000
 80093dc:	bff00000 	.word	0xbff00000
 80093e0:	8800759c 	.word	0x8800759c
 80093e4:	7e37e43c 	.word	0x7e37e43c
 80093e8:	3ff00000 	.word	0x3ff00000
 80093ec:	3fd00000 	.word	0x3fd00000
 80093f0:	3fe00000 	.word	0x3fe00000
 80093f4:	408fffff 	.word	0x408fffff
 80093f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	da05      	bge.n	800940e <__ieee754_pow+0x3de>
 8009402:	4bd3      	ldr	r3, [pc, #844]	; (8009750 <__ieee754_pow+0x720>)
 8009404:	f7f7 f918 	bl	8000638 <__aeabi_dmul>
 8009408:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800940c:	460c      	mov	r4, r1
 800940e:	1523      	asrs	r3, r4, #20
 8009410:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009414:	4413      	add	r3, r2
 8009416:	9309      	str	r3, [sp, #36]	; 0x24
 8009418:	4bce      	ldr	r3, [pc, #824]	; (8009754 <__ieee754_pow+0x724>)
 800941a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800941e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009422:	429c      	cmp	r4, r3
 8009424:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009428:	dd08      	ble.n	800943c <__ieee754_pow+0x40c>
 800942a:	4bcb      	ldr	r3, [pc, #812]	; (8009758 <__ieee754_pow+0x728>)
 800942c:	429c      	cmp	r4, r3
 800942e:	f340 815e 	ble.w	80096ee <__ieee754_pow+0x6be>
 8009432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009434:	3301      	adds	r3, #1
 8009436:	9309      	str	r3, [sp, #36]	; 0x24
 8009438:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800943c:	f04f 0a00 	mov.w	sl, #0
 8009440:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009444:	930c      	str	r3, [sp, #48]	; 0x30
 8009446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009448:	4bc4      	ldr	r3, [pc, #784]	; (800975c <__ieee754_pow+0x72c>)
 800944a:	4413      	add	r3, r2
 800944c:	ed93 7b00 	vldr	d7, [r3]
 8009450:	4629      	mov	r1, r5
 8009452:	ec53 2b17 	vmov	r2, r3, d7
 8009456:	ed8d 7b06 	vstr	d7, [sp, #24]
 800945a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800945e:	f7f6 ff33 	bl	80002c8 <__aeabi_dsub>
 8009462:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009466:	4606      	mov	r6, r0
 8009468:	460f      	mov	r7, r1
 800946a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800946e:	f7f6 ff2d 	bl	80002cc <__adddf3>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	2000      	movs	r0, #0
 8009478:	49b9      	ldr	r1, [pc, #740]	; (8009760 <__ieee754_pow+0x730>)
 800947a:	f7f7 fa07 	bl	800088c <__aeabi_ddiv>
 800947e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f7 f8d5 	bl	8000638 <__aeabi_dmul>
 800948e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009492:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009496:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800949a:	2300      	movs	r3, #0
 800949c:	9302      	str	r3, [sp, #8]
 800949e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094a2:	106d      	asrs	r5, r5, #1
 80094a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80094a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80094ac:	2200      	movs	r2, #0
 80094ae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80094b2:	4640      	mov	r0, r8
 80094b4:	4649      	mov	r1, r9
 80094b6:	4614      	mov	r4, r2
 80094b8:	461d      	mov	r5, r3
 80094ba:	f7f7 f8bd 	bl	8000638 <__aeabi_dmul>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4630      	mov	r0, r6
 80094c4:	4639      	mov	r1, r7
 80094c6:	f7f6 feff 	bl	80002c8 <__aeabi_dsub>
 80094ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094ce:	4606      	mov	r6, r0
 80094d0:	460f      	mov	r7, r1
 80094d2:	4620      	mov	r0, r4
 80094d4:	4629      	mov	r1, r5
 80094d6:	f7f6 fef7 	bl	80002c8 <__aeabi_dsub>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094e2:	f7f6 fef1 	bl	80002c8 <__aeabi_dsub>
 80094e6:	4642      	mov	r2, r8
 80094e8:	464b      	mov	r3, r9
 80094ea:	f7f7 f8a5 	bl	8000638 <__aeabi_dmul>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4630      	mov	r0, r6
 80094f4:	4639      	mov	r1, r7
 80094f6:	f7f6 fee7 	bl	80002c8 <__aeabi_dsub>
 80094fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80094fe:	f7f7 f89b 	bl	8000638 <__aeabi_dmul>
 8009502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	f7f7 f893 	bl	8000638 <__aeabi_dmul>
 8009512:	a37b      	add	r3, pc, #492	; (adr r3, 8009700 <__ieee754_pow+0x6d0>)
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	4604      	mov	r4, r0
 800951a:	460d      	mov	r5, r1
 800951c:	f7f7 f88c 	bl	8000638 <__aeabi_dmul>
 8009520:	a379      	add	r3, pc, #484	; (adr r3, 8009708 <__ieee754_pow+0x6d8>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f6 fed1 	bl	80002cc <__adddf3>
 800952a:	4622      	mov	r2, r4
 800952c:	462b      	mov	r3, r5
 800952e:	f7f7 f883 	bl	8000638 <__aeabi_dmul>
 8009532:	a377      	add	r3, pc, #476	; (adr r3, 8009710 <__ieee754_pow+0x6e0>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f6 fec8 	bl	80002cc <__adddf3>
 800953c:	4622      	mov	r2, r4
 800953e:	462b      	mov	r3, r5
 8009540:	f7f7 f87a 	bl	8000638 <__aeabi_dmul>
 8009544:	a374      	add	r3, pc, #464	; (adr r3, 8009718 <__ieee754_pow+0x6e8>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f6 febf 	bl	80002cc <__adddf3>
 800954e:	4622      	mov	r2, r4
 8009550:	462b      	mov	r3, r5
 8009552:	f7f7 f871 	bl	8000638 <__aeabi_dmul>
 8009556:	a372      	add	r3, pc, #456	; (adr r3, 8009720 <__ieee754_pow+0x6f0>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f7f6 feb6 	bl	80002cc <__adddf3>
 8009560:	4622      	mov	r2, r4
 8009562:	462b      	mov	r3, r5
 8009564:	f7f7 f868 	bl	8000638 <__aeabi_dmul>
 8009568:	a36f      	add	r3, pc, #444	; (adr r3, 8009728 <__ieee754_pow+0x6f8>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	f7f6 fead 	bl	80002cc <__adddf3>
 8009572:	4622      	mov	r2, r4
 8009574:	4606      	mov	r6, r0
 8009576:	460f      	mov	r7, r1
 8009578:	462b      	mov	r3, r5
 800957a:	4620      	mov	r0, r4
 800957c:	4629      	mov	r1, r5
 800957e:	f7f7 f85b 	bl	8000638 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4630      	mov	r0, r6
 8009588:	4639      	mov	r1, r7
 800958a:	f7f7 f855 	bl	8000638 <__aeabi_dmul>
 800958e:	4642      	mov	r2, r8
 8009590:	4604      	mov	r4, r0
 8009592:	460d      	mov	r5, r1
 8009594:	464b      	mov	r3, r9
 8009596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800959a:	f7f6 fe97 	bl	80002cc <__adddf3>
 800959e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095a2:	f7f7 f849 	bl	8000638 <__aeabi_dmul>
 80095a6:	4622      	mov	r2, r4
 80095a8:	462b      	mov	r3, r5
 80095aa:	f7f6 fe8f 	bl	80002cc <__adddf3>
 80095ae:	4642      	mov	r2, r8
 80095b0:	4606      	mov	r6, r0
 80095b2:	460f      	mov	r7, r1
 80095b4:	464b      	mov	r3, r9
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f7 f83d 	bl	8000638 <__aeabi_dmul>
 80095be:	2200      	movs	r2, #0
 80095c0:	4b68      	ldr	r3, [pc, #416]	; (8009764 <__ieee754_pow+0x734>)
 80095c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80095c6:	f7f6 fe81 	bl	80002cc <__adddf3>
 80095ca:	4632      	mov	r2, r6
 80095cc:	463b      	mov	r3, r7
 80095ce:	f7f6 fe7d 	bl	80002cc <__adddf3>
 80095d2:	9802      	ldr	r0, [sp, #8]
 80095d4:	460d      	mov	r5, r1
 80095d6:	4604      	mov	r4, r0
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4640      	mov	r0, r8
 80095de:	4649      	mov	r1, r9
 80095e0:	f7f7 f82a 	bl	8000638 <__aeabi_dmul>
 80095e4:	2200      	movs	r2, #0
 80095e6:	4680      	mov	r8, r0
 80095e8:	4689      	mov	r9, r1
 80095ea:	4b5e      	ldr	r3, [pc, #376]	; (8009764 <__ieee754_pow+0x734>)
 80095ec:	4620      	mov	r0, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	f7f6 fe6a 	bl	80002c8 <__aeabi_dsub>
 80095f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095f8:	f7f6 fe66 	bl	80002c8 <__aeabi_dsub>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f6 fe60 	bl	80002c8 <__aeabi_dsub>
 8009608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800960c:	f7f7 f814 	bl	8000638 <__aeabi_dmul>
 8009610:	4622      	mov	r2, r4
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	462b      	mov	r3, r5
 8009618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800961c:	f7f7 f80c 	bl	8000638 <__aeabi_dmul>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f6 fe50 	bl	80002cc <__adddf3>
 800962c:	4606      	mov	r6, r0
 800962e:	460f      	mov	r7, r1
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4640      	mov	r0, r8
 8009636:	4649      	mov	r1, r9
 8009638:	f7f6 fe48 	bl	80002cc <__adddf3>
 800963c:	9802      	ldr	r0, [sp, #8]
 800963e:	a33c      	add	r3, pc, #240	; (adr r3, 8009730 <__ieee754_pow+0x700>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	4604      	mov	r4, r0
 8009646:	460d      	mov	r5, r1
 8009648:	f7f6 fff6 	bl	8000638 <__aeabi_dmul>
 800964c:	4642      	mov	r2, r8
 800964e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009652:	464b      	mov	r3, r9
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f6 fe36 	bl	80002c8 <__aeabi_dsub>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f6 fe30 	bl	80002c8 <__aeabi_dsub>
 8009668:	a333      	add	r3, pc, #204	; (adr r3, 8009738 <__ieee754_pow+0x708>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7f6 ffe3 	bl	8000638 <__aeabi_dmul>
 8009672:	a333      	add	r3, pc, #204	; (adr r3, 8009740 <__ieee754_pow+0x710>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f7f6 ffda 	bl	8000638 <__aeabi_dmul>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	f7f6 fe1e 	bl	80002cc <__adddf3>
 8009690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009692:	4b35      	ldr	r3, [pc, #212]	; (8009768 <__ieee754_pow+0x738>)
 8009694:	4413      	add	r3, r2
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f7f6 fe17 	bl	80002cc <__adddf3>
 800969e:	4604      	mov	r4, r0
 80096a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a2:	460d      	mov	r5, r1
 80096a4:	f7f6 ff5e 	bl	8000564 <__aeabi_i2d>
 80096a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096aa:	4b30      	ldr	r3, [pc, #192]	; (800976c <__ieee754_pow+0x73c>)
 80096ac:	4413      	add	r3, r2
 80096ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096b2:	4606      	mov	r6, r0
 80096b4:	460f      	mov	r7, r1
 80096b6:	4622      	mov	r2, r4
 80096b8:	462b      	mov	r3, r5
 80096ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096be:	f7f6 fe05 	bl	80002cc <__adddf3>
 80096c2:	4642      	mov	r2, r8
 80096c4:	464b      	mov	r3, r9
 80096c6:	f7f6 fe01 	bl	80002cc <__adddf3>
 80096ca:	4632      	mov	r2, r6
 80096cc:	463b      	mov	r3, r7
 80096ce:	f7f6 fdfd 	bl	80002cc <__adddf3>
 80096d2:	9802      	ldr	r0, [sp, #8]
 80096d4:	4632      	mov	r2, r6
 80096d6:	463b      	mov	r3, r7
 80096d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096dc:	f7f6 fdf4 	bl	80002c8 <__aeabi_dsub>
 80096e0:	4642      	mov	r2, r8
 80096e2:	464b      	mov	r3, r9
 80096e4:	f7f6 fdf0 	bl	80002c8 <__aeabi_dsub>
 80096e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096ec:	e607      	b.n	80092fe <__ieee754_pow+0x2ce>
 80096ee:	f04f 0a01 	mov.w	sl, #1
 80096f2:	e6a5      	b.n	8009440 <__ieee754_pow+0x410>
 80096f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009748 <__ieee754_pow+0x718>
 80096f8:	e613      	b.n	8009322 <__ieee754_pow+0x2f2>
 80096fa:	bf00      	nop
 80096fc:	f3af 8000 	nop.w
 8009700:	4a454eef 	.word	0x4a454eef
 8009704:	3fca7e28 	.word	0x3fca7e28
 8009708:	93c9db65 	.word	0x93c9db65
 800970c:	3fcd864a 	.word	0x3fcd864a
 8009710:	a91d4101 	.word	0xa91d4101
 8009714:	3fd17460 	.word	0x3fd17460
 8009718:	518f264d 	.word	0x518f264d
 800971c:	3fd55555 	.word	0x3fd55555
 8009720:	db6fabff 	.word	0xdb6fabff
 8009724:	3fdb6db6 	.word	0x3fdb6db6
 8009728:	33333303 	.word	0x33333303
 800972c:	3fe33333 	.word	0x3fe33333
 8009730:	e0000000 	.word	0xe0000000
 8009734:	3feec709 	.word	0x3feec709
 8009738:	dc3a03fd 	.word	0xdc3a03fd
 800973c:	3feec709 	.word	0x3feec709
 8009740:	145b01f5 	.word	0x145b01f5
 8009744:	be3e2fe0 	.word	0xbe3e2fe0
 8009748:	00000000 	.word	0x00000000
 800974c:	3ff00000 	.word	0x3ff00000
 8009750:	43400000 	.word	0x43400000
 8009754:	0003988e 	.word	0x0003988e
 8009758:	000bb679 	.word	0x000bb679
 800975c:	0800a620 	.word	0x0800a620
 8009760:	3ff00000 	.word	0x3ff00000
 8009764:	40080000 	.word	0x40080000
 8009768:	0800a640 	.word	0x0800a640
 800976c:	0800a630 	.word	0x0800a630
 8009770:	a3b4      	add	r3, pc, #720	; (adr r3, 8009a44 <__ieee754_pow+0xa14>)
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f6 fda7 	bl	80002cc <__adddf3>
 800977e:	4622      	mov	r2, r4
 8009780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009784:	462b      	mov	r3, r5
 8009786:	4630      	mov	r0, r6
 8009788:	4639      	mov	r1, r7
 800978a:	f7f6 fd9d 	bl	80002c8 <__aeabi_dsub>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009796:	f7f7 f9df 	bl	8000b58 <__aeabi_dcmpgt>
 800979a:	2800      	cmp	r0, #0
 800979c:	f47f adfe 	bne.w	800939c <__ieee754_pow+0x36c>
 80097a0:	4aa3      	ldr	r2, [pc, #652]	; (8009a30 <__ieee754_pow+0xa00>)
 80097a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097a6:	4293      	cmp	r3, r2
 80097a8:	f340 810a 	ble.w	80099c0 <__ieee754_pow+0x990>
 80097ac:	151b      	asrs	r3, r3, #20
 80097ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80097b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80097b6:	fa4a f303 	asr.w	r3, sl, r3
 80097ba:	445b      	add	r3, fp
 80097bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80097c0:	4e9c      	ldr	r6, [pc, #624]	; (8009a34 <__ieee754_pow+0xa04>)
 80097c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80097c6:	4116      	asrs	r6, r2
 80097c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80097cc:	2000      	movs	r0, #0
 80097ce:	ea23 0106 	bic.w	r1, r3, r6
 80097d2:	f1c2 0214 	rsb	r2, r2, #20
 80097d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80097da:	fa4a fa02 	asr.w	sl, sl, r2
 80097de:	f1bb 0f00 	cmp.w	fp, #0
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	bfb8      	it	lt
 80097ec:	f1ca 0a00 	rsblt	sl, sl, #0
 80097f0:	f7f6 fd6a 	bl	80002c8 <__aeabi_dsub>
 80097f4:	e9cd 0100 	strd	r0, r1, [sp]
 80097f8:	4642      	mov	r2, r8
 80097fa:	464b      	mov	r3, r9
 80097fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009800:	f7f6 fd64 	bl	80002cc <__adddf3>
 8009804:	2000      	movs	r0, #0
 8009806:	a378      	add	r3, pc, #480	; (adr r3, 80099e8 <__ieee754_pow+0x9b8>)
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	4604      	mov	r4, r0
 800980e:	460d      	mov	r5, r1
 8009810:	f7f6 ff12 	bl	8000638 <__aeabi_dmul>
 8009814:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009818:	4606      	mov	r6, r0
 800981a:	460f      	mov	r7, r1
 800981c:	4620      	mov	r0, r4
 800981e:	4629      	mov	r1, r5
 8009820:	f7f6 fd52 	bl	80002c8 <__aeabi_dsub>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4640      	mov	r0, r8
 800982a:	4649      	mov	r1, r9
 800982c:	f7f6 fd4c 	bl	80002c8 <__aeabi_dsub>
 8009830:	a36f      	add	r3, pc, #444	; (adr r3, 80099f0 <__ieee754_pow+0x9c0>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 feff 	bl	8000638 <__aeabi_dmul>
 800983a:	a36f      	add	r3, pc, #444	; (adr r3, 80099f8 <__ieee754_pow+0x9c8>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	4680      	mov	r8, r0
 8009842:	4689      	mov	r9, r1
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fef6 	bl	8000638 <__aeabi_dmul>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4640      	mov	r0, r8
 8009852:	4649      	mov	r1, r9
 8009854:	f7f6 fd3a 	bl	80002cc <__adddf3>
 8009858:	4604      	mov	r4, r0
 800985a:	460d      	mov	r5, r1
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4630      	mov	r0, r6
 8009862:	4639      	mov	r1, r7
 8009864:	f7f6 fd32 	bl	80002cc <__adddf3>
 8009868:	4632      	mov	r2, r6
 800986a:	463b      	mov	r3, r7
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	f7f6 fd2a 	bl	80002c8 <__aeabi_dsub>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4620      	mov	r0, r4
 800987a:	4629      	mov	r1, r5
 800987c:	f7f6 fd24 	bl	80002c8 <__aeabi_dsub>
 8009880:	4642      	mov	r2, r8
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	464b      	mov	r3, r9
 8009888:	4640      	mov	r0, r8
 800988a:	4649      	mov	r1, r9
 800988c:	f7f6 fed4 	bl	8000638 <__aeabi_dmul>
 8009890:	a35b      	add	r3, pc, #364	; (adr r3, 8009a00 <__ieee754_pow+0x9d0>)
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	4604      	mov	r4, r0
 8009898:	460d      	mov	r5, r1
 800989a:	f7f6 fecd 	bl	8000638 <__aeabi_dmul>
 800989e:	a35a      	add	r3, pc, #360	; (adr r3, 8009a08 <__ieee754_pow+0x9d8>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f7f6 fd10 	bl	80002c8 <__aeabi_dsub>
 80098a8:	4622      	mov	r2, r4
 80098aa:	462b      	mov	r3, r5
 80098ac:	f7f6 fec4 	bl	8000638 <__aeabi_dmul>
 80098b0:	a357      	add	r3, pc, #348	; (adr r3, 8009a10 <__ieee754_pow+0x9e0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7f6 fd09 	bl	80002cc <__adddf3>
 80098ba:	4622      	mov	r2, r4
 80098bc:	462b      	mov	r3, r5
 80098be:	f7f6 febb 	bl	8000638 <__aeabi_dmul>
 80098c2:	a355      	add	r3, pc, #340	; (adr r3, 8009a18 <__ieee754_pow+0x9e8>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fcfe 	bl	80002c8 <__aeabi_dsub>
 80098cc:	4622      	mov	r2, r4
 80098ce:	462b      	mov	r3, r5
 80098d0:	f7f6 feb2 	bl	8000638 <__aeabi_dmul>
 80098d4:	a352      	add	r3, pc, #328	; (adr r3, 8009a20 <__ieee754_pow+0x9f0>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f7f6 fcf7 	bl	80002cc <__adddf3>
 80098de:	4622      	mov	r2, r4
 80098e0:	462b      	mov	r3, r5
 80098e2:	f7f6 fea9 	bl	8000638 <__aeabi_dmul>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f6 fceb 	bl	80002c8 <__aeabi_dsub>
 80098f2:	4604      	mov	r4, r0
 80098f4:	460d      	mov	r5, r1
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f6 fe9b 	bl	8000638 <__aeabi_dmul>
 8009902:	2200      	movs	r2, #0
 8009904:	e9cd 0100 	strd	r0, r1, [sp]
 8009908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fcda 	bl	80002c8 <__aeabi_dsub>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800991c:	f7f6 ffb6 	bl	800088c <__aeabi_ddiv>
 8009920:	4632      	mov	r2, r6
 8009922:	4604      	mov	r4, r0
 8009924:	460d      	mov	r5, r1
 8009926:	463b      	mov	r3, r7
 8009928:	4640      	mov	r0, r8
 800992a:	4649      	mov	r1, r9
 800992c:	f7f6 fe84 	bl	8000638 <__aeabi_dmul>
 8009930:	4632      	mov	r2, r6
 8009932:	463b      	mov	r3, r7
 8009934:	f7f6 fcca 	bl	80002cc <__adddf3>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	f7f6 fcc2 	bl	80002c8 <__aeabi_dsub>
 8009944:	4642      	mov	r2, r8
 8009946:	464b      	mov	r3, r9
 8009948:	f7f6 fcbe 	bl	80002c8 <__aeabi_dsub>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	2000      	movs	r0, #0
 8009952:	4939      	ldr	r1, [pc, #228]	; (8009a38 <__ieee754_pow+0xa08>)
 8009954:	f7f6 fcb8 	bl	80002c8 <__aeabi_dsub>
 8009958:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800995c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	da2f      	bge.n	80099c6 <__ieee754_pow+0x996>
 8009966:	4650      	mov	r0, sl
 8009968:	ec43 2b10 	vmov	d0, r2, r3
 800996c:	f000 f9c0 	bl	8009cf0 <scalbn>
 8009970:	ec51 0b10 	vmov	r0, r1, d0
 8009974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009978:	f7ff bbf1 	b.w	800915e <__ieee754_pow+0x12e>
 800997c:	4b2f      	ldr	r3, [pc, #188]	; (8009a3c <__ieee754_pow+0xa0c>)
 800997e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009982:	429e      	cmp	r6, r3
 8009984:	f77f af0c 	ble.w	80097a0 <__ieee754_pow+0x770>
 8009988:	4b2d      	ldr	r3, [pc, #180]	; (8009a40 <__ieee754_pow+0xa10>)
 800998a:	440b      	add	r3, r1
 800998c:	4303      	orrs	r3, r0
 800998e:	d00b      	beq.n	80099a8 <__ieee754_pow+0x978>
 8009990:	a325      	add	r3, pc, #148	; (adr r3, 8009a28 <__ieee754_pow+0x9f8>)
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800999a:	f7f6 fe4d 	bl	8000638 <__aeabi_dmul>
 800999e:	a322      	add	r3, pc, #136	; (adr r3, 8009a28 <__ieee754_pow+0x9f8>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7ff bbdb 	b.w	800915e <__ieee754_pow+0x12e>
 80099a8:	4622      	mov	r2, r4
 80099aa:	462b      	mov	r3, r5
 80099ac:	f7f6 fc8c 	bl	80002c8 <__aeabi_dsub>
 80099b0:	4642      	mov	r2, r8
 80099b2:	464b      	mov	r3, r9
 80099b4:	f7f7 f8c6 	bl	8000b44 <__aeabi_dcmpge>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	f43f aef1 	beq.w	80097a0 <__ieee754_pow+0x770>
 80099be:	e7e7      	b.n	8009990 <__ieee754_pow+0x960>
 80099c0:	f04f 0a00 	mov.w	sl, #0
 80099c4:	e718      	b.n	80097f8 <__ieee754_pow+0x7c8>
 80099c6:	4621      	mov	r1, r4
 80099c8:	e7d4      	b.n	8009974 <__ieee754_pow+0x944>
 80099ca:	2000      	movs	r0, #0
 80099cc:	491a      	ldr	r1, [pc, #104]	; (8009a38 <__ieee754_pow+0xa08>)
 80099ce:	f7ff bb8f 	b.w	80090f0 <__ieee754_pow+0xc0>
 80099d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099d6:	f7ff bb8b 	b.w	80090f0 <__ieee754_pow+0xc0>
 80099da:	4630      	mov	r0, r6
 80099dc:	4639      	mov	r1, r7
 80099de:	f7ff bb87 	b.w	80090f0 <__ieee754_pow+0xc0>
 80099e2:	4693      	mov	fp, r2
 80099e4:	f7ff bb98 	b.w	8009118 <__ieee754_pow+0xe8>
 80099e8:	00000000 	.word	0x00000000
 80099ec:	3fe62e43 	.word	0x3fe62e43
 80099f0:	fefa39ef 	.word	0xfefa39ef
 80099f4:	3fe62e42 	.word	0x3fe62e42
 80099f8:	0ca86c39 	.word	0x0ca86c39
 80099fc:	be205c61 	.word	0xbe205c61
 8009a00:	72bea4d0 	.word	0x72bea4d0
 8009a04:	3e663769 	.word	0x3e663769
 8009a08:	c5d26bf1 	.word	0xc5d26bf1
 8009a0c:	3ebbbd41 	.word	0x3ebbbd41
 8009a10:	af25de2c 	.word	0xaf25de2c
 8009a14:	3f11566a 	.word	0x3f11566a
 8009a18:	16bebd93 	.word	0x16bebd93
 8009a1c:	3f66c16c 	.word	0x3f66c16c
 8009a20:	5555553e 	.word	0x5555553e
 8009a24:	3fc55555 	.word	0x3fc55555
 8009a28:	c2f8f359 	.word	0xc2f8f359
 8009a2c:	01a56e1f 	.word	0x01a56e1f
 8009a30:	3fe00000 	.word	0x3fe00000
 8009a34:	000fffff 	.word	0x000fffff
 8009a38:	3ff00000 	.word	0x3ff00000
 8009a3c:	4090cbff 	.word	0x4090cbff
 8009a40:	3f6f3400 	.word	0x3f6f3400
 8009a44:	652b82fe 	.word	0x652b82fe
 8009a48:	3c971547 	.word	0x3c971547

08009a4c <__ieee754_sqrt>:
 8009a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a50:	4955      	ldr	r1, [pc, #340]	; (8009ba8 <__ieee754_sqrt+0x15c>)
 8009a52:	ec55 4b10 	vmov	r4, r5, d0
 8009a56:	43a9      	bics	r1, r5
 8009a58:	462b      	mov	r3, r5
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	d112      	bne.n	8009a84 <__ieee754_sqrt+0x38>
 8009a5e:	ee10 2a10 	vmov	r2, s0
 8009a62:	ee10 0a10 	vmov	r0, s0
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7f6 fde6 	bl	8000638 <__aeabi_dmul>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4620      	mov	r0, r4
 8009a72:	4629      	mov	r1, r5
 8009a74:	f7f6 fc2a 	bl	80002cc <__adddf3>
 8009a78:	4604      	mov	r4, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	ec45 4b10 	vmov	d0, r4, r5
 8009a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	ee10 0a10 	vmov	r0, s0
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	dc0f      	bgt.n	8009aae <__ieee754_sqrt+0x62>
 8009a8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a92:	4330      	orrs	r0, r6
 8009a94:	d0f2      	beq.n	8009a7c <__ieee754_sqrt+0x30>
 8009a96:	b155      	cbz	r5, 8009aae <__ieee754_sqrt+0x62>
 8009a98:	ee10 2a10 	vmov	r2, s0
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fc12 	bl	80002c8 <__aeabi_dsub>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	f7f6 fef0 	bl	800088c <__aeabi_ddiv>
 8009aac:	e7e4      	b.n	8009a78 <__ieee754_sqrt+0x2c>
 8009aae:	151b      	asrs	r3, r3, #20
 8009ab0:	d073      	beq.n	8009b9a <__ieee754_sqrt+0x14e>
 8009ab2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ab6:	07dd      	lsls	r5, r3, #31
 8009ab8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009abc:	bf48      	it	mi
 8009abe:	0fc8      	lsrmi	r0, r1, #31
 8009ac0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009ac4:	bf44      	itt	mi
 8009ac6:	0049      	lslmi	r1, r1, #1
 8009ac8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009acc:	2500      	movs	r5, #0
 8009ace:	1058      	asrs	r0, r3, #1
 8009ad0:	0fcb      	lsrs	r3, r1, #31
 8009ad2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009ad6:	0049      	lsls	r1, r1, #1
 8009ad8:	2316      	movs	r3, #22
 8009ada:	462c      	mov	r4, r5
 8009adc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009ae0:	19a7      	adds	r7, r4, r6
 8009ae2:	4297      	cmp	r7, r2
 8009ae4:	bfde      	ittt	le
 8009ae6:	19bc      	addle	r4, r7, r6
 8009ae8:	1bd2      	suble	r2, r2, r7
 8009aea:	19ad      	addle	r5, r5, r6
 8009aec:	0fcf      	lsrs	r7, r1, #31
 8009aee:	3b01      	subs	r3, #1
 8009af0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009af4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009af8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009afc:	d1f0      	bne.n	8009ae0 <__ieee754_sqrt+0x94>
 8009afe:	f04f 0c20 	mov.w	ip, #32
 8009b02:	469e      	mov	lr, r3
 8009b04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009b08:	42a2      	cmp	r2, r4
 8009b0a:	eb06 070e 	add.w	r7, r6, lr
 8009b0e:	dc02      	bgt.n	8009b16 <__ieee754_sqrt+0xca>
 8009b10:	d112      	bne.n	8009b38 <__ieee754_sqrt+0xec>
 8009b12:	428f      	cmp	r7, r1
 8009b14:	d810      	bhi.n	8009b38 <__ieee754_sqrt+0xec>
 8009b16:	2f00      	cmp	r7, #0
 8009b18:	eb07 0e06 	add.w	lr, r7, r6
 8009b1c:	da42      	bge.n	8009ba4 <__ieee754_sqrt+0x158>
 8009b1e:	f1be 0f00 	cmp.w	lr, #0
 8009b22:	db3f      	blt.n	8009ba4 <__ieee754_sqrt+0x158>
 8009b24:	f104 0801 	add.w	r8, r4, #1
 8009b28:	1b12      	subs	r2, r2, r4
 8009b2a:	428f      	cmp	r7, r1
 8009b2c:	bf88      	it	hi
 8009b2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009b32:	1bc9      	subs	r1, r1, r7
 8009b34:	4433      	add	r3, r6
 8009b36:	4644      	mov	r4, r8
 8009b38:	0052      	lsls	r2, r2, #1
 8009b3a:	f1bc 0c01 	subs.w	ip, ip, #1
 8009b3e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009b42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b4a:	d1dd      	bne.n	8009b08 <__ieee754_sqrt+0xbc>
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	d006      	beq.n	8009b5e <__ieee754_sqrt+0x112>
 8009b50:	1c5c      	adds	r4, r3, #1
 8009b52:	bf13      	iteet	ne
 8009b54:	3301      	addne	r3, #1
 8009b56:	3501      	addeq	r5, #1
 8009b58:	4663      	moveq	r3, ip
 8009b5a:	f023 0301 	bicne.w	r3, r3, #1
 8009b5e:	106a      	asrs	r2, r5, #1
 8009b60:	085b      	lsrs	r3, r3, #1
 8009b62:	07e9      	lsls	r1, r5, #31
 8009b64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009b68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009b6c:	bf48      	it	mi
 8009b6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009b72:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009b76:	461c      	mov	r4, r3
 8009b78:	e780      	b.n	8009a7c <__ieee754_sqrt+0x30>
 8009b7a:	0aca      	lsrs	r2, r1, #11
 8009b7c:	3815      	subs	r0, #21
 8009b7e:	0549      	lsls	r1, r1, #21
 8009b80:	2a00      	cmp	r2, #0
 8009b82:	d0fa      	beq.n	8009b7a <__ieee754_sqrt+0x12e>
 8009b84:	02d6      	lsls	r6, r2, #11
 8009b86:	d50a      	bpl.n	8009b9e <__ieee754_sqrt+0x152>
 8009b88:	f1c3 0420 	rsb	r4, r3, #32
 8009b8c:	fa21 f404 	lsr.w	r4, r1, r4
 8009b90:	1e5d      	subs	r5, r3, #1
 8009b92:	4099      	lsls	r1, r3
 8009b94:	4322      	orrs	r2, r4
 8009b96:	1b43      	subs	r3, r0, r5
 8009b98:	e78b      	b.n	8009ab2 <__ieee754_sqrt+0x66>
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	e7f0      	b.n	8009b80 <__ieee754_sqrt+0x134>
 8009b9e:	0052      	lsls	r2, r2, #1
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	e7ef      	b.n	8009b84 <__ieee754_sqrt+0x138>
 8009ba4:	46a0      	mov	r8, r4
 8009ba6:	e7bf      	b.n	8009b28 <__ieee754_sqrt+0xdc>
 8009ba8:	7ff00000 	.word	0x7ff00000

08009bac <fabs>:
 8009bac:	ec51 0b10 	vmov	r0, r1, d0
 8009bb0:	ee10 2a10 	vmov	r2, s0
 8009bb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bb8:	ec43 2b10 	vmov	d0, r2, r3
 8009bbc:	4770      	bx	lr

08009bbe <finite>:
 8009bbe:	ee10 3a90 	vmov	r3, s1
 8009bc2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009bc6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009bca:	0fc0      	lsrs	r0, r0, #31
 8009bcc:	4770      	bx	lr

08009bce <matherr>:
 8009bce:	2000      	movs	r0, #0
 8009bd0:	4770      	bx	lr
 8009bd2:	0000      	movs	r0, r0
 8009bd4:	0000      	movs	r0, r0
	...

08009bd8 <nan>:
 8009bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009be0 <nan+0x8>
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	00000000 	.word	0x00000000
 8009be4:	7ff80000 	.word	0x7ff80000

08009be8 <rint>:
 8009be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bea:	ec51 0b10 	vmov	r0, r1, d0
 8009bee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009bf2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009bf6:	2e13      	cmp	r6, #19
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	ee10 4a10 	vmov	r4, s0
 8009bfe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009c02:	dc56      	bgt.n	8009cb2 <rint+0xca>
 8009c04:	2e00      	cmp	r6, #0
 8009c06:	da2b      	bge.n	8009c60 <rint+0x78>
 8009c08:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009c0c:	4302      	orrs	r2, r0
 8009c0e:	d023      	beq.n	8009c58 <rint+0x70>
 8009c10:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009c14:	4302      	orrs	r2, r0
 8009c16:	4254      	negs	r4, r2
 8009c18:	4314      	orrs	r4, r2
 8009c1a:	0c4b      	lsrs	r3, r1, #17
 8009c1c:	0b24      	lsrs	r4, r4, #12
 8009c1e:	045b      	lsls	r3, r3, #17
 8009c20:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009c24:	ea44 0103 	orr.w	r1, r4, r3
 8009c28:	460b      	mov	r3, r1
 8009c2a:	492f      	ldr	r1, [pc, #188]	; (8009ce8 <rint+0x100>)
 8009c2c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009c30:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009c34:	4602      	mov	r2, r0
 8009c36:	4639      	mov	r1, r7
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7f6 fb47 	bl	80002cc <__adddf3>
 8009c3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009c42:	463b      	mov	r3, r7
 8009c44:	4632      	mov	r2, r6
 8009c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c4a:	f7f6 fb3d 	bl	80002c8 <__aeabi_dsub>
 8009c4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c52:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009c56:	4639      	mov	r1, r7
 8009c58:	ec41 0b10 	vmov	d0, r0, r1
 8009c5c:	b003      	add	sp, #12
 8009c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c60:	4a22      	ldr	r2, [pc, #136]	; (8009cec <rint+0x104>)
 8009c62:	4132      	asrs	r2, r6
 8009c64:	ea01 0702 	and.w	r7, r1, r2
 8009c68:	4307      	orrs	r7, r0
 8009c6a:	d0f5      	beq.n	8009c58 <rint+0x70>
 8009c6c:	0852      	lsrs	r2, r2, #1
 8009c6e:	4011      	ands	r1, r2
 8009c70:	430c      	orrs	r4, r1
 8009c72:	d00b      	beq.n	8009c8c <rint+0xa4>
 8009c74:	ea23 0202 	bic.w	r2, r3, r2
 8009c78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c7c:	2e13      	cmp	r6, #19
 8009c7e:	fa43 f306 	asr.w	r3, r3, r6
 8009c82:	bf0c      	ite	eq
 8009c84:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009c88:	2400      	movne	r4, #0
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	4916      	ldr	r1, [pc, #88]	; (8009ce8 <rint+0x100>)
 8009c8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009c92:	4622      	mov	r2, r4
 8009c94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f6 fb16 	bl	80002cc <__adddf3>
 8009ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cac:	f7f6 fb0c 	bl	80002c8 <__aeabi_dsub>
 8009cb0:	e7d2      	b.n	8009c58 <rint+0x70>
 8009cb2:	2e33      	cmp	r6, #51	; 0x33
 8009cb4:	dd07      	ble.n	8009cc6 <rint+0xde>
 8009cb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009cba:	d1cd      	bne.n	8009c58 <rint+0x70>
 8009cbc:	ee10 2a10 	vmov	r2, s0
 8009cc0:	f7f6 fb04 	bl	80002cc <__adddf3>
 8009cc4:	e7c8      	b.n	8009c58 <rint+0x70>
 8009cc6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009cca:	f04f 32ff 	mov.w	r2, #4294967295
 8009cce:	40f2      	lsrs	r2, r6
 8009cd0:	4210      	tst	r0, r2
 8009cd2:	d0c1      	beq.n	8009c58 <rint+0x70>
 8009cd4:	0852      	lsrs	r2, r2, #1
 8009cd6:	4210      	tst	r0, r2
 8009cd8:	bf1f      	itttt	ne
 8009cda:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009cde:	ea20 0202 	bicne.w	r2, r0, r2
 8009ce2:	4134      	asrne	r4, r6
 8009ce4:	4314      	orrne	r4, r2
 8009ce6:	e7d1      	b.n	8009c8c <rint+0xa4>
 8009ce8:	0800a650 	.word	0x0800a650
 8009cec:	000fffff 	.word	0x000fffff

08009cf0 <scalbn>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	ec55 4b10 	vmov	r4, r5, d0
 8009cf6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	b9aa      	cbnz	r2, 8009d2c <scalbn+0x3c>
 8009d00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d04:	4323      	orrs	r3, r4
 8009d06:	d03b      	beq.n	8009d80 <scalbn+0x90>
 8009d08:	4b31      	ldr	r3, [pc, #196]	; (8009dd0 <scalbn+0xe0>)
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	ee10 0a10 	vmov	r0, s0
 8009d12:	f7f6 fc91 	bl	8000638 <__aeabi_dmul>
 8009d16:	4b2f      	ldr	r3, [pc, #188]	; (8009dd4 <scalbn+0xe4>)
 8009d18:	429e      	cmp	r6, r3
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	da12      	bge.n	8009d46 <scalbn+0x56>
 8009d20:	a327      	add	r3, pc, #156	; (adr r3, 8009dc0 <scalbn+0xd0>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fc87 	bl	8000638 <__aeabi_dmul>
 8009d2a:	e009      	b.n	8009d40 <scalbn+0x50>
 8009d2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009d30:	428a      	cmp	r2, r1
 8009d32:	d10c      	bne.n	8009d4e <scalbn+0x5e>
 8009d34:	ee10 2a10 	vmov	r2, s0
 8009d38:	4620      	mov	r0, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	f7f6 fac6 	bl	80002cc <__adddf3>
 8009d40:	4604      	mov	r4, r0
 8009d42:	460d      	mov	r5, r1
 8009d44:	e01c      	b.n	8009d80 <scalbn+0x90>
 8009d46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	3a36      	subs	r2, #54	; 0x36
 8009d4e:	4432      	add	r2, r6
 8009d50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009d54:	428a      	cmp	r2, r1
 8009d56:	dd0b      	ble.n	8009d70 <scalbn+0x80>
 8009d58:	ec45 4b11 	vmov	d1, r4, r5
 8009d5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009dc8 <scalbn+0xd8>
 8009d60:	f000 f83c 	bl	8009ddc <copysign>
 8009d64:	a318      	add	r3, pc, #96	; (adr r3, 8009dc8 <scalbn+0xd8>)
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	ec51 0b10 	vmov	r0, r1, d0
 8009d6e:	e7da      	b.n	8009d26 <scalbn+0x36>
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	dd08      	ble.n	8009d86 <scalbn+0x96>
 8009d74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d80:	ec45 4b10 	vmov	d0, r4, r5
 8009d84:	bd70      	pop	{r4, r5, r6, pc}
 8009d86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009d8a:	da0d      	bge.n	8009da8 <scalbn+0xb8>
 8009d8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009d90:	429e      	cmp	r6, r3
 8009d92:	ec45 4b11 	vmov	d1, r4, r5
 8009d96:	dce1      	bgt.n	8009d5c <scalbn+0x6c>
 8009d98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009dc0 <scalbn+0xd0>
 8009d9c:	f000 f81e 	bl	8009ddc <copysign>
 8009da0:	a307      	add	r3, pc, #28	; (adr r3, 8009dc0 <scalbn+0xd0>)
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	e7e0      	b.n	8009d6a <scalbn+0x7a>
 8009da8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dac:	3236      	adds	r2, #54	; 0x36
 8009dae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009db2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009db6:	4620      	mov	r0, r4
 8009db8:	4629      	mov	r1, r5
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <scalbn+0xe8>)
 8009dbe:	e7b2      	b.n	8009d26 <scalbn+0x36>
 8009dc0:	c2f8f359 	.word	0xc2f8f359
 8009dc4:	01a56e1f 	.word	0x01a56e1f
 8009dc8:	8800759c 	.word	0x8800759c
 8009dcc:	7e37e43c 	.word	0x7e37e43c
 8009dd0:	43500000 	.word	0x43500000
 8009dd4:	ffff3cb0 	.word	0xffff3cb0
 8009dd8:	3c900000 	.word	0x3c900000

08009ddc <copysign>:
 8009ddc:	ec51 0b10 	vmov	r0, r1, d0
 8009de0:	ee11 0a90 	vmov	r0, s3
 8009de4:	ee10 2a10 	vmov	r2, s0
 8009de8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009df0:	ea41 0300 	orr.w	r3, r1, r0
 8009df4:	ec43 2b10 	vmov	d0, r2, r3
 8009df8:	4770      	bx	lr
	...

08009dfc <_init>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr

08009e08 <_fini>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr
