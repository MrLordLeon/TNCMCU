
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006788  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee0  08006ee0  000209e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ee8  08006ee8  000209e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee8  08006ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e0  20000000  08006ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004930  200009e0  080078d0  000209e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005310  080078d0  00025310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a8c  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026e2  00000000  00000000  0003249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00034b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00035aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023070  00000000  00000000  00036898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c295  00000000  00000000  00059908  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d27e7  00000000  00000000  00065b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000424c  00000000  00000000  00138400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e0 	.word	0x200009e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006940 	.word	0x08006940

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e4 	.word	0x200009e4
 800020c:	08006940 	.word	0x08006940

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b480      	push	{r7}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    //sprintf(uartData, "Selector              = %d",select_8_16);
    //HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    //sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

    if(select_8_16){
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01f      	beq.n	8000616 <conv_HEX_to_BIN+0x56>
		for(int i = 0; i < 8; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e018      	b.n	800060e <conv_HEX_to_BIN+0x4e>
			temp = hex_byte_in >> i;
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	fa42 f303 	asr.w	r3, r2, r3
 80005e4:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	bfb8      	it	lt
 80005f0:	425b      	neglt	r3, r3
 80005f2:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	2a00      	cmp	r2, #0
 80005fe:	bf14      	ite	ne
 8000600:	2201      	movne	r2, #1
 8000602:	2200      	moveq	r2, #0
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	2b07      	cmp	r3, #7
 8000612:	dde3      	ble.n	80005dc <conv_HEX_to_BIN+0x1c>
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000614:	e01e      	b.n	8000654 <conv_HEX_to_BIN+0x94>
		for(int i = 0; i < 16; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]
			*(bin_byte_out+i) = temp;
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	3301      	adds	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
}
 8000654:	bf00      	nop
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000664:	2201      	movs	r2, #1
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <init_AX25+0x2c>)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <init_AX25+0x30>)
 800066a:	f004 fedd 	bl	8005428 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <init_AX25+0x34>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <init_AX25+0x34>)
 8000676:	2200      	movs	r2, #0
 8000678:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <init_AX25+0x34>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <init_AX25+0x34>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20001d80 	.word	0x20001d80
 8000690:	200042c8 	.word	0x200042c8
 8000694:	20001d74 	.word	0x20001d74

08000698 <tx_rx>:

void tx_rx() {
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	if (changeMode) {
 800069e:	4b59      	ldr	r3, [pc, #356]	; (8000804 <tx_rx+0x16c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <tx_rx+0x18>
		changeMode = 0;
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <tx_rx+0x16c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
		toggleMode();
 80006ac:	f001 fa10 	bl	8001ad0 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 80006b0:	4b55      	ldr	r3, [pc, #340]	; (8000808 <tx_rx+0x170>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d07e      	beq.n	80007b6 <tx_rx+0x11e>
		bool packet_received = false;
 80006b8:	2300      	movs	r3, #0
 80006ba:	717b      	strb	r3, [r7, #5]
		bool packet_converted = false;
 80006bc:	2300      	movs	r3, #0
 80006be:	71fb      	strb	r3, [r7, #7]

		//Run receiving KISS
		packet_received = receiving_KISS();
 80006c0:	f001 f850 	bl	8001764 <receiving_KISS>
 80006c4:	4603      	mov	r3, r0
 80006c6:	717b      	strb	r3, [r7, #5]

		if(packet_received){
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <tx_rx+0x3e>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 80006ce:	f001 f97b 	bl	80019c8 <KISS_TO_AX25>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <tx_rx+0x48>
			output_AX25();
 80006dc:	f000 f8a2 	bl	8000824 <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 80006e0:	f000 fb5a 	bl	8000d98 <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d019      	beq.n	8000724 <tx_rx+0x8c>
			sprintf(uartData, "Error receiving KISS packet\n");
 80006f0:	4a46      	ldr	r2, [pc, #280]	; (800080c <tx_rx+0x174>)
 80006f2:	4b47      	ldr	r3, [pc, #284]	; (8000810 <tx_rx+0x178>)
 80006f4:	4615      	mov	r5, r2
 80006f6:	461c      	mov	r4, r3
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	6028      	str	r0, [r5, #0]
 80006fc:	6069      	str	r1, [r5, #4]
 80006fe:	60aa      	str	r2, [r5, #8]
 8000700:	60eb      	str	r3, [r5, #12]
 8000702:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000704:	6128      	str	r0, [r5, #16]
 8000706:	6169      	str	r1, [r5, #20]
 8000708:	61aa      	str	r2, [r5, #24]
 800070a:	7823      	ldrb	r3, [r4, #0]
 800070c:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800070e:	483f      	ldr	r0, [pc, #252]	; (800080c <tx_rx+0x174>)
 8000710:	f7ff fd7e 	bl	8000210 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	230a      	movs	r3, #10
 800071a:	493c      	ldr	r1, [pc, #240]	; (800080c <tx_rx+0x174>)
 800071c:	483d      	ldr	r0, [pc, #244]	; (8000814 <tx_rx+0x17c>)
 800071e:	f004 fdea 	bl	80052f6 <HAL_UART_Transmit>
 8000722:	e044      	b.n	80007ae <tx_rx+0x116>
		}
		//Packet was not converted properly
		else if(!packet_converted){
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d019      	beq.n	8000764 <tx_rx+0xcc>
			sprintf(uartData, "Error converting KISS packet\n");
 8000730:	4a36      	ldr	r2, [pc, #216]	; (800080c <tx_rx+0x174>)
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <tx_rx+0x180>)
 8000734:	4615      	mov	r5, r2
 8000736:	461c      	mov	r4, r3
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	6028      	str	r0, [r5, #0]
 800073c:	6069      	str	r1, [r5, #4]
 800073e:	60aa      	str	r2, [r5, #8]
 8000740:	60eb      	str	r3, [r5, #12]
 8000742:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000744:	6128      	str	r0, [r5, #16]
 8000746:	6169      	str	r1, [r5, #20]
 8000748:	61aa      	str	r2, [r5, #24]
 800074a:	8823      	ldrh	r3, [r4, #0]
 800074c:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800074e:	482f      	ldr	r0, [pc, #188]	; (800080c <tx_rx+0x174>)
 8000750:	f7ff fd5e 	bl	8000210 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	230a      	movs	r3, #10
 800075a:	492c      	ldr	r1, [pc, #176]	; (800080c <tx_rx+0x174>)
 800075c:	482d      	ldr	r0, [pc, #180]	; (8000814 <tx_rx+0x17c>)
 800075e:	f004 fdca 	bl	80052f6 <HAL_UART_Transmit>
 8000762:	e024      	b.n	80007ae <tx_rx+0x116>
		}
		//Successful transmission!
		else {
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <tx_rx+0x174>)
 8000766:	4a2d      	ldr	r2, [pc, #180]	; (800081c <tx_rx+0x184>)
 8000768:	4614      	mov	r4, r2
 800076a:	469c      	mov	ip, r3
 800076c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000770:	4665      	mov	r5, ip
 8000772:	4626      	mov	r6, r4
 8000774:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000776:	6028      	str	r0, [r5, #0]
 8000778:	6069      	str	r1, [r5, #4]
 800077a:	60aa      	str	r2, [r5, #8]
 800077c:	60eb      	str	r3, [r5, #12]
 800077e:	3410      	adds	r4, #16
 8000780:	f10c 0c10 	add.w	ip, ip, #16
 8000784:	4574      	cmp	r4, lr
 8000786:	d1f3      	bne.n	8000770 <tx_rx+0xd8>
 8000788:	4662      	mov	r2, ip
 800078a:	4623      	mov	r3, r4
 800078c:	cb03      	ldmia	r3!, {r0, r1}
 800078e:	6010      	str	r0, [r2, #0]
 8000790:	6051      	str	r1, [r2, #4]
 8000792:	8819      	ldrh	r1, [r3, #0]
 8000794:	789b      	ldrb	r3, [r3, #2]
 8000796:	8111      	strh	r1, [r2, #8]
 8000798:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <tx_rx+0x174>)
 800079c:	f7ff fd38 	bl	8000210 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	230a      	movs	r3, #10
 80007a6:	4919      	ldr	r1, [pc, #100]	; (800080c <tx_rx+0x174>)
 80007a8:	481a      	ldr	r0, [pc, #104]	; (8000814 <tx_rx+0x17c>)
 80007aa:	f004 fda4 	bl	80052f6 <HAL_UART_Transmit>
		}

		changeMode = true;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <tx_rx+0x16c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80007b4:	e022      	b.n	80007fc <tx_rx+0x164>
		bool change = receiving_AX25();
 80007b6:	f000 fd91 	bl	80012dc <receiving_AX25>
 80007ba:	4603      	mov	r3, r0
 80007bc:	71bb      	strb	r3, [r7, #6]
		if(!change){
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	f083 0301 	eor.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d018      	beq.n	80007fc <tx_rx+0x164>
			sprintf(uartData, "Changing mode due to request\n");
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <tx_rx+0x174>)
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <tx_rx+0x188>)
 80007ce:	4615      	mov	r5, r2
 80007d0:	461c      	mov	r4, r3
 80007d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d4:	6028      	str	r0, [r5, #0]
 80007d6:	6069      	str	r1, [r5, #4]
 80007d8:	60aa      	str	r2, [r5, #8]
 80007da:	60eb      	str	r3, [r5, #12]
 80007dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007de:	6128      	str	r0, [r5, #16]
 80007e0:	6169      	str	r1, [r5, #20]
 80007e2:	61aa      	str	r2, [r5, #24]
 80007e4:	8823      	ldrh	r3, [r4, #0]
 80007e6:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <tx_rx+0x174>)
 80007ea:	f7ff fd11 	bl	8000210 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	230a      	movs	r3, #10
 80007f4:	4905      	ldr	r1, [pc, #20]	; (800080c <tx_rx+0x174>)
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <tx_rx+0x17c>)
 80007f8:	f004 fd7d 	bl	80052f6 <HAL_UART_Transmit>
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	20000a01 	.word	0x20000a01
 8000808:	20004270 	.word	0x20004270
 800080c:	2000260c 	.word	0x2000260c
 8000810:	08006958 	.word	0x08006958
 8000814:	200042c8 	.word	0x200042c8
 8000818:	08006978 	.word	0x08006978
 800081c:	08006998 	.word	0x08006998
 8000820:	080069d4 	.word	0x080069d4

08000824 <output_AX25>:
		}
	}
	return true;
}

void output_AX25(){
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 800082a:	4b40      	ldr	r3, [pc, #256]	; (800092c <output_AX25+0x108>)
 800082c:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Beginning AFSK transmission\n");
 800082e:	4a40      	ldr	r2, [pc, #256]	; (8000930 <output_AX25+0x10c>)
 8000830:	4b40      	ldr	r3, [pc, #256]	; (8000934 <output_AX25+0x110>)
 8000832:	4615      	mov	r5, r2
 8000834:	461c      	mov	r4, r3
 8000836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000838:	6028      	str	r0, [r5, #0]
 800083a:	6069      	str	r1, [r5, #4]
 800083c:	60aa      	str	r2, [r5, #8]
 800083e:	60eb      	str	r3, [r5, #12]
 8000840:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000842:	6128      	str	r0, [r5, #16]
 8000844:	6169      	str	r1, [r5, #20]
 8000846:	61aa      	str	r2, [r5, #24]
 8000848:	7823      	ldrb	r3, [r4, #0]
 800084a:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800084c:	4838      	ldr	r0, [pc, #224]	; (8000930 <output_AX25+0x10c>)
 800084e:	f7ff fcdf 	bl	8000210 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	230a      	movs	r3, #10
 8000858:	4935      	ldr	r1, [pc, #212]	; (8000930 <output_AX25+0x10c>)
 800085a:	4837      	ldr	r0, [pc, #220]	; (8000938 <output_AX25+0x114>)
 800085c:	f004 fd4b 	bl	80052f6 <HAL_UART_Transmit>

	int wave_start = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
	//Init dac playing some frequency, shouldn't be read by radio
	htim2.Instance->ARR = 27;
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <output_AX25+0x118>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	221b      	movs	r2, #27
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4a33      	ldr	r2, [pc, #204]	; (8000940 <output_AX25+0x11c>)
 8000872:	441a      	add	r2, r3
 8000874:	2300      	movs	r3, #0
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800087c:	2100      	movs	r1, #0
 800087e:	4831      	ldr	r0, [pc, #196]	; (8000944 <output_AX25+0x120>)
 8000880:	f002 fbe0 	bl	8003044 <HAL_DAC_Start_DMA>
	HAL_Delay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f002 fa57 	bl	8002d38 <HAL_Delay>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 800088a:	2201      	movs	r2, #1
 800088c:	2110      	movs	r1, #16
 800088e:	482e      	ldr	r0, [pc, #184]	; (8000948 <output_AX25+0x124>)
 8000890:	f003 fb4e 	bl	8003f30 <HAL_GPIO_WritePin>
	freqSelect = false;
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <output_AX25+0x128>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
	wave_start = bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start); //start flag
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2201      	movs	r2, #1
 800089e:	2108      	movs	r1, #8
 80008a0:	482b      	ldr	r0, [pc, #172]	; (8000950 <output_AX25+0x12c>)
 80008a2:	f001 f9c7 	bl	8001c34 <bitToAudio>
 80008a6:	6038      	str	r0, [r7, #0]

	wave_start = bitToAudio(local_packet->address, address_len,1,wave_start); //lsb first
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008ae:	3310      	adds	r3, #16
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2201      	movs	r2, #1
 80008b6:	2170      	movs	r1, #112	; 0x70
 80008b8:	f001 f9bc 	bl	8001c34 <bitToAudio>
 80008bc:	6038      	str	r0, [r7, #0]
	wave_start = bitToAudio(local_packet->control,control_len,1,wave_start);	//lsb first
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008c4:	3314      	adds	r3, #20
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	2201      	movs	r2, #1
 80008cc:	2108      	movs	r1, #8
 80008ce:	f001 f9b1 	bl	8001c34 <bitToAudio>
 80008d2:	6038      	str	r0, [r7, #0]
	//wave_start = bitToAudio(local_packet->PID,PID_len,1,wave_start);			//lsb first
	//wave_start = bitToAudio(local_packet->Info,local_packet->Info_Len,1,wave_start);		//lsb first
	//bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS,0,wave_start);			//msb first

	bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start);//stop flag
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2201      	movs	r2, #1
 80008d8:	2108      	movs	r1, #8
 80008da:	481d      	ldr	r0, [pc, #116]	; (8000950 <output_AX25+0x12c>)
 80008dc:	f001 f9aa 	bl	8001c34 <bitToAudio>
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	4818      	ldr	r0, [pc, #96]	; (8000944 <output_AX25+0x120>)
 80008e4:	f002 fc5c 	bl	80031a0 <HAL_DAC_Stop_DMA>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 80008e8:	2200      	movs	r2, #0
 80008ea:	2110      	movs	r1, #16
 80008ec:	4816      	ldr	r0, [pc, #88]	; (8000948 <output_AX25+0x124>)
 80008ee:	f003 fb1f 	bl	8003f30 <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <output_AX25+0x10c>)
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <output_AX25+0x130>)
 80008f6:	4615      	mov	r5, r2
 80008f8:	461c      	mov	r4, r3
 80008fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fc:	6028      	str	r0, [r5, #0]
 80008fe:	6069      	str	r1, [r5, #4]
 8000900:	60aa      	str	r2, [r5, #8]
 8000902:	60eb      	str	r3, [r5, #12]
 8000904:	cc03      	ldmia	r4!, {r0, r1}
 8000906:	6128      	str	r0, [r5, #16]
 8000908:	6169      	str	r1, [r5, #20]
 800090a:	8823      	ldrh	r3, [r4, #0]
 800090c:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800090e:	4808      	ldr	r0, [pc, #32]	; (8000930 <output_AX25+0x10c>)
 8000910:	f7ff fc7e 	bl	8000210 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	230a      	movs	r3, #10
 800091a:	4905      	ldr	r1, [pc, #20]	; (8000930 <output_AX25+0x10c>)
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <output_AX25+0x114>)
 800091e:	f004 fcea 	bl	80052f6 <HAL_UART_Transmit>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bdb0      	pop	{r4, r5, r7, pc}
 800092a:	bf00      	nop
 800092c:	20000a18 	.word	0x20000a18
 8000930:	2000260c 	.word	0x2000260c
 8000934:	080069f4 	.word	0x080069f4
 8000938:	200042c8 	.word	0x200042c8
 800093c:	20004288 	.word	0x20004288
 8000940:	20000010 	.word	0x20000010
 8000944:	20004274 	.word	0x20004274
 8000948:	40020800 	.word	0x40020800
 800094c:	20000a02 	.word	0x20000a02
 8000950:	20000008 	.word	0x20000008
 8000954:	08006a14 	.word	0x08006a14

08000958 <print_AX25>:
void print_AX25(){
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	b08d      	sub	sp, #52	; 0x34
 800095c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800095e:	4baa      	ldr	r3, [pc, #680]	; (8000c08 <print_AX25+0x2b0>)
 8000960:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000968:	330c      	adds	r3, #12
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 800096e:	4ba7      	ldr	r3, [pc, #668]	; (8000c0c <print_AX25+0x2b4>)
 8000970:	4aa7      	ldr	r2, [pc, #668]	; (8000c10 <print_AX25+0x2b8>)
 8000972:	4614      	mov	r4, r2
 8000974:	469c      	mov	ip, r3
 8000976:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800097a:	4665      	mov	r5, ip
 800097c:	4626      	mov	r6, r4
 800097e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000980:	6028      	str	r0, [r5, #0]
 8000982:	6069      	str	r1, [r5, #4]
 8000984:	60aa      	str	r2, [r5, #8]
 8000986:	60eb      	str	r3, [r5, #12]
 8000988:	3410      	adds	r4, #16
 800098a:	f10c 0c10 	add.w	ip, ip, #16
 800098e:	4574      	cmp	r4, lr
 8000990:	d1f3      	bne.n	800097a <print_AX25+0x22>
 8000992:	4663      	mov	r3, ip
 8000994:	4622      	mov	r2, r4
 8000996:	6810      	ldr	r0, [r2, #0]
 8000998:	6018      	str	r0, [r3, #0]
 800099a:	8891      	ldrh	r1, [r2, #4]
 800099c:	7992      	ldrb	r2, [r2, #6]
 800099e:	8099      	strh	r1, [r3, #4]
 80009a0:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009a2:	489a      	ldr	r0, [pc, #616]	; (8000c0c <print_AX25+0x2b4>)
 80009a4:	f7ff fc34 	bl	8000210 <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	230a      	movs	r3, #10
 80009ae:	4997      	ldr	r1, [pc, #604]	; (8000c0c <print_AX25+0x2b4>)
 80009b0:	4898      	ldr	r0, [pc, #608]	; (8000c14 <print_AX25+0x2bc>)
 80009b2:	f004 fca0 	bl	80052f6 <HAL_UART_Transmit>

	sprintf(uartData, "AX.25 Flag      =");
 80009b6:	4a95      	ldr	r2, [pc, #596]	; (8000c0c <print_AX25+0x2b4>)
 80009b8:	4b97      	ldr	r3, [pc, #604]	; (8000c18 <print_AX25+0x2c0>)
 80009ba:	4615      	mov	r5, r2
 80009bc:	461c      	mov	r4, r3
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	6028      	str	r0, [r5, #0]
 80009c2:	6069      	str	r1, [r5, #4]
 80009c4:	60aa      	str	r2, [r5, #8]
 80009c6:	60eb      	str	r3, [r5, #12]
 80009c8:	8823      	ldrh	r3, [r4, #0]
 80009ca:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009cc:	488f      	ldr	r0, [pc, #572]	; (8000c0c <print_AX25+0x2b4>)
 80009ce:	f7ff fc1f 	bl	8000210 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	230a      	movs	r3, #10
 80009d8:	498c      	ldr	r1, [pc, #560]	; (8000c0c <print_AX25+0x2b4>)
 80009da:	488e      	ldr	r0, [pc, #568]	; (8000c14 <print_AX25+0x2bc>)
 80009dc:	f004 fc8b 	bl	80052f6 <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 80009e0:	4b8e      	ldr	r3, [pc, #568]	; (8000c1c <print_AX25+0x2c4>)
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<8;i++){
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e8:	e017      	b.n	8000a1a <print_AX25+0xc2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80009ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ec:	f1c3 0307 	rsb	r3, r3, #7
 80009f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f2:	4413      	add	r3, r2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4989      	ldr	r1, [pc, #548]	; (8000c20 <print_AX25+0x2c8>)
 80009fa:	4884      	ldr	r0, [pc, #528]	; (8000c0c <print_AX25+0x2b4>)
 80009fc:	f005 fba4 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a00:	4882      	ldr	r0, [pc, #520]	; (8000c0c <print_AX25+0x2b4>)
 8000a02:	f7ff fc05 	bl	8000210 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	497f      	ldr	r1, [pc, #508]	; (8000c0c <print_AX25+0x2b4>)
 8000a0e:	4881      	ldr	r0, [pc, #516]	; (8000c14 <print_AX25+0x2bc>)
 8000a10:	f004 fc71 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	3301      	adds	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1c:	2b07      	cmp	r3, #7
 8000a1e:	dde4      	ble.n	80009ea <print_AX25+0x92>
	}
	sprintf(uartData, "\n");
 8000a20:	4a7a      	ldr	r2, [pc, #488]	; (8000c0c <print_AX25+0x2b4>)
 8000a22:	4b80      	ldr	r3, [pc, #512]	; (8000c24 <print_AX25+0x2cc>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a28:	4878      	ldr	r0, [pc, #480]	; (8000c0c <print_AX25+0x2b4>)
 8000a2a:	f7ff fbf1 	bl	8000210 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	230a      	movs	r3, #10
 8000a34:	4975      	ldr	r1, [pc, #468]	; (8000c0c <print_AX25+0x2b4>)
 8000a36:	4877      	ldr	r0, [pc, #476]	; (8000c14 <print_AX25+0x2bc>)
 8000a38:	f004 fc5d 	bl	80052f6 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a42:	3310      	adds	r3, #16
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4c:	e042      	b.n	8000ad4 <print_AX25+0x17c>
		sprintf(uartData, "Address Field %d =",i+1);
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	3301      	adds	r3, #1
 8000a52:	461a      	mov	r2, r3
 8000a54:	4974      	ldr	r1, [pc, #464]	; (8000c28 <print_AX25+0x2d0>)
 8000a56:	486d      	ldr	r0, [pc, #436]	; (8000c0c <print_AX25+0x2b4>)
 8000a58:	f005 fb76 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a5c:	486b      	ldr	r0, [pc, #428]	; (8000c0c <print_AX25+0x2b4>)
 8000a5e:	f7ff fbd7 	bl	8000210 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	230a      	movs	r3, #10
 8000a68:	4968      	ldr	r1, [pc, #416]	; (8000c0c <print_AX25+0x2b4>)
 8000a6a:	486a      	ldr	r0, [pc, #424]	; (8000c14 <print_AX25+0x2bc>)
 8000a6c:	f004 fc43 	bl	80052f6 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	e017      	b.n	8000aa6 <print_AX25+0x14e>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	f1c3 0307 	rsb	r3, r3, #7
 8000a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4966      	ldr	r1, [pc, #408]	; (8000c20 <print_AX25+0x2c8>)
 8000a86:	4861      	ldr	r0, [pc, #388]	; (8000c0c <print_AX25+0x2b4>)
 8000a88:	f005 fb5e 	bl	8006148 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a8c:	485f      	ldr	r0, [pc, #380]	; (8000c0c <print_AX25+0x2b4>)
 8000a8e:	f7ff fbbf 	bl	8000210 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	230a      	movs	r3, #10
 8000a98:	495c      	ldr	r1, [pc, #368]	; (8000c0c <print_AX25+0x2b4>)
 8000a9a:	485e      	ldr	r0, [pc, #376]	; (8000c14 <print_AX25+0x2bc>)
 8000a9c:	f004 fc2b 	bl	80052f6 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	2b07      	cmp	r3, #7
 8000aaa:	dde4      	ble.n	8000a76 <print_AX25+0x11e>
		}
		curr_mem += 8;
 8000aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aae:	3308      	adds	r3, #8
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000ab2:	4a56      	ldr	r2, [pc, #344]	; (8000c0c <print_AX25+0x2b4>)
 8000ab4:	4b5b      	ldr	r3, [pc, #364]	; (8000c24 <print_AX25+0x2cc>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000aba:	4854      	ldr	r0, [pc, #336]	; (8000c0c <print_AX25+0x2b4>)
 8000abc:	f7ff fba8 	bl	8000210 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	4951      	ldr	r1, [pc, #324]	; (8000c0c <print_AX25+0x2b4>)
 8000ac8:	4852      	ldr	r0, [pc, #328]	; (8000c14 <print_AX25+0x2bc>)
 8000aca:	f004 fc14 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	2b0d      	cmp	r3, #13
 8000ad8:	ddb9      	ble.n	8000a4e <print_AX25+0xf6>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ae0:	3314      	adds	r3, #20
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000ae6:	4a49      	ldr	r2, [pc, #292]	; (8000c0c <print_AX25+0x2b4>)
 8000ae8:	4b50      	ldr	r3, [pc, #320]	; (8000c2c <print_AX25+0x2d4>)
 8000aea:	4615      	mov	r5, r2
 8000aec:	461c      	mov	r4, r3
 8000aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af0:	6028      	str	r0, [r5, #0]
 8000af2:	6069      	str	r1, [r5, #4]
 8000af4:	60aa      	str	r2, [r5, #8]
 8000af6:	60eb      	str	r3, [r5, #12]
 8000af8:	8823      	ldrh	r3, [r4, #0]
 8000afa:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000afc:	4843      	ldr	r0, [pc, #268]	; (8000c0c <print_AX25+0x2b4>)
 8000afe:	f7ff fb87 	bl	8000210 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	230a      	movs	r3, #10
 8000b08:	4940      	ldr	r1, [pc, #256]	; (8000c0c <print_AX25+0x2b4>)
 8000b0a:	4842      	ldr	r0, [pc, #264]	; (8000c14 <print_AX25+0x2bc>)
 8000b0c:	f004 fbf3 	bl	80052f6 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	e017      	b.n	8000b46 <print_AX25+0x1ee>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	f1c3 0307 	rsb	r3, r3, #7
 8000b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	493e      	ldr	r1, [pc, #248]	; (8000c20 <print_AX25+0x2c8>)
 8000b26:	4839      	ldr	r0, [pc, #228]	; (8000c0c <print_AX25+0x2b4>)
 8000b28:	f005 fb0e 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b2c:	4837      	ldr	r0, [pc, #220]	; (8000c0c <print_AX25+0x2b4>)
 8000b2e:	f7ff fb6f 	bl	8000210 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	230a      	movs	r3, #10
 8000b38:	4934      	ldr	r1, [pc, #208]	; (8000c0c <print_AX25+0x2b4>)
 8000b3a:	4836      	ldr	r0, [pc, #216]	; (8000c14 <print_AX25+0x2bc>)
 8000b3c:	f004 fbdb 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	3301      	adds	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	dde4      	ble.n	8000b16 <print_AX25+0x1be>
	}
	sprintf(uartData, "\n");
 8000b4c:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <print_AX25+0x2b4>)
 8000b4e:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <print_AX25+0x2cc>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b54:	482d      	ldr	r0, [pc, #180]	; (8000c0c <print_AX25+0x2b4>)
 8000b56:	f7ff fb5b 	bl	8000210 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	230a      	movs	r3, #10
 8000b60:	492a      	ldr	r1, [pc, #168]	; (8000c0c <print_AX25+0x2b4>)
 8000b62:	482c      	ldr	r0, [pc, #176]	; (8000c14 <print_AX25+0x2bc>)
 8000b64:	f004 fbc7 	bl	80052f6 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b6e:	3318      	adds	r3, #24
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8000b74:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <print_AX25+0x2b4>)
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <print_AX25+0x2d8>)
 8000b78:	4615      	mov	r5, r2
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7e:	6028      	str	r0, [r5, #0]
 8000b80:	6069      	str	r1, [r5, #4]
 8000b82:	60aa      	str	r2, [r5, #8]
 8000b84:	60eb      	str	r3, [r5, #12]
 8000b86:	8823      	ldrh	r3, [r4, #0]
 8000b88:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b8a:	4820      	ldr	r0, [pc, #128]	; (8000c0c <print_AX25+0x2b4>)
 8000b8c:	f7ff fb40 	bl	8000210 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	230a      	movs	r3, #10
 8000b96:	491d      	ldr	r1, [pc, #116]	; (8000c0c <print_AX25+0x2b4>)
 8000b98:	481e      	ldr	r0, [pc, #120]	; (8000c14 <print_AX25+0x2bc>)
 8000b9a:	f004 fbac 	bl	80052f6 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	e017      	b.n	8000bd4 <print_AX25+0x27c>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	491b      	ldr	r1, [pc, #108]	; (8000c20 <print_AX25+0x2c8>)
 8000bb4:	4815      	ldr	r0, [pc, #84]	; (8000c0c <print_AX25+0x2b4>)
 8000bb6:	f005 fac7 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <print_AX25+0x2b4>)
 8000bbc:	f7ff fb28 	bl	8000210 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	4911      	ldr	r1, [pc, #68]	; (8000c0c <print_AX25+0x2b4>)
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <print_AX25+0x2bc>)
 8000bca:	f004 fb94 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2b07      	cmp	r3, #7
 8000bd8:	dde4      	ble.n	8000ba4 <print_AX25+0x24c>
	}
	sprintf(uartData, "\n");
 8000bda:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <print_AX25+0x2b4>)
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <print_AX25+0x2cc>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000be2:	480a      	ldr	r0, [pc, #40]	; (8000c0c <print_AX25+0x2b4>)
 8000be4:	f7ff fb14 	bl	8000210 <strlen>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	230a      	movs	r3, #10
 8000bee:	4907      	ldr	r1, [pc, #28]	; (8000c0c <print_AX25+0x2b4>)
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <print_AX25+0x2bc>)
 8000bf2:	f004 fb80 	bl	80052f6 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000bfc:	331c      	adds	r3, #28
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e058      	b.n	8000cba <print_AX25+0x362>
 8000c08:	20000a18 	.word	0x20000a18
 8000c0c:	2000260c 	.word	0x2000260c
 8000c10:	08006a30 	.word	0x08006a30
 8000c14:	200042c8 	.word	0x200042c8
 8000c18:	08006a68 	.word	0x08006a68
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	08006a7c 	.word	0x08006a7c
 8000c24:	08006a84 	.word	0x08006a84
 8000c28:	08006a88 	.word	0x08006a88
 8000c2c:	08006a9c 	.word	0x08006a9c
 8000c30:	08006ab0 	.word	0x08006ab0
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4950      	ldr	r1, [pc, #320]	; (8000d7c <print_AX25+0x424>)
 8000c3c:	4850      	ldr	r0, [pc, #320]	; (8000d80 <print_AX25+0x428>)
 8000c3e:	f005 fa83 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c42:	484f      	ldr	r0, [pc, #316]	; (8000d80 <print_AX25+0x428>)
 8000c44:	f7ff fae4 	bl	8000210 <strlen>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	494c      	ldr	r1, [pc, #304]	; (8000d80 <print_AX25+0x428>)
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <print_AX25+0x42c>)
 8000c52:	f004 fb50 	bl	80052f6 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	e017      	b.n	8000c8c <print_AX25+0x334>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4947      	ldr	r1, [pc, #284]	; (8000d88 <print_AX25+0x430>)
 8000c6c:	4844      	ldr	r0, [pc, #272]	; (8000d80 <print_AX25+0x428>)
 8000c6e:	f005 fa6b 	bl	8006148 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c72:	4843      	ldr	r0, [pc, #268]	; (8000d80 <print_AX25+0x428>)
 8000c74:	f7ff facc 	bl	8000210 <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	4940      	ldr	r1, [pc, #256]	; (8000d80 <print_AX25+0x428>)
 8000c80:	4840      	ldr	r0, [pc, #256]	; (8000d84 <print_AX25+0x42c>)
 8000c82:	f004 fb38 	bl	80052f6 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	dde4      	ble.n	8000c5c <print_AX25+0x304>
		}
		curr_mem += 8;
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	3308      	adds	r3, #8
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000c98:	4a39      	ldr	r2, [pc, #228]	; (8000d80 <print_AX25+0x428>)
 8000c9a:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <print_AX25+0x434>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ca0:	4837      	ldr	r0, [pc, #220]	; (8000d80 <print_AX25+0x428>)
 8000ca2:	f7ff fab5 	bl	8000210 <strlen>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	230a      	movs	r3, #10
 8000cac:	4934      	ldr	r1, [pc, #208]	; (8000d80 <print_AX25+0x428>)
 8000cae:	4835      	ldr	r0, [pc, #212]	; (8000d84 <print_AX25+0x42c>)
 8000cb0:	f004 fb21 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	da00      	bge.n	8000cc8 <print_AX25+0x370>
 8000cc6:	3307      	adds	r3, #7
 8000cc8:	10db      	asrs	r3, r3, #3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	dbb0      	blt.n	8000c34 <print_AX25+0x2dc>
	}

	sprintf(uartData, "AX.25 Flag      =");
 8000cd2:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <print_AX25+0x428>)
 8000cd4:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <print_AX25+0x438>)
 8000cd6:	4615      	mov	r5, r2
 8000cd8:	461c      	mov	r4, r3
 8000cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cdc:	6028      	str	r0, [r5, #0]
 8000cde:	6069      	str	r1, [r5, #4]
 8000ce0:	60aa      	str	r2, [r5, #8]
 8000ce2:	60eb      	str	r3, [r5, #12]
 8000ce4:	8823      	ldrh	r3, [r4, #0]
 8000ce6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ce8:	4825      	ldr	r0, [pc, #148]	; (8000d80 <print_AX25+0x428>)
 8000cea:	f7ff fa91 	bl	8000210 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	4922      	ldr	r1, [pc, #136]	; (8000d80 <print_AX25+0x428>)
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <print_AX25+0x42c>)
 8000cf8:	f004 fafd 	bl	80052f6 <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <print_AX25+0x43c>)
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<8;i++){
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e017      	b.n	8000d36 <print_AX25+0x3de>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1c3 0307 	rsb	r3, r3, #7
 8000d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	491c      	ldr	r1, [pc, #112]	; (8000d88 <print_AX25+0x430>)
 8000d16:	481a      	ldr	r0, [pc, #104]	; (8000d80 <print_AX25+0x428>)
 8000d18:	f005 fa16 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <print_AX25+0x428>)
 8000d1e:	f7ff fa77 	bl	8000210 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	230a      	movs	r3, #10
 8000d28:	4915      	ldr	r1, [pc, #84]	; (8000d80 <print_AX25+0x428>)
 8000d2a:	4816      	ldr	r0, [pc, #88]	; (8000d84 <print_AX25+0x42c>)
 8000d2c:	f004 fae3 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b07      	cmp	r3, #7
 8000d3a:	dde4      	ble.n	8000d06 <print_AX25+0x3ae>
	}
	sprintf(uartData, "\n");
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <print_AX25+0x428>)
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <print_AX25+0x434>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d44:	480e      	ldr	r0, [pc, #56]	; (8000d80 <print_AX25+0x428>)
 8000d46:	f7ff fa63 	bl	8000210 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	230a      	movs	r3, #10
 8000d50:	490b      	ldr	r1, [pc, #44]	; (8000d80 <print_AX25+0x428>)
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <print_AX25+0x42c>)
 8000d54:	f004 facf 	bl	80052f6 <HAL_UART_Transmit>
//		}
//		curr_mem += 8;
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//	}
	sprintf(uartData, "\n");
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <print_AX25+0x428>)
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <print_AX25+0x434>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <print_AX25+0x428>)
 8000d62:	f7ff fa55 	bl	8000210 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <print_AX25+0x428>)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <print_AX25+0x42c>)
 8000d70:	f004 fac1 	bl	80052f6 <HAL_UART_Transmit>
}
 8000d74:	bf00      	nop
 8000d76:	3734      	adds	r7, #52	; 0x34
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7c:	08006ac4 	.word	0x08006ac4
 8000d80:	2000260c 	.word	0x2000260c
 8000d84:	200042c8 	.word	0x200042c8
 8000d88:	08006a7c 	.word	0x08006a7c
 8000d8c:	08006a84 	.word	0x08006a84
 8000d90:	08006a68 	.word	0x08006a68
 8000d94:	20000008 	.word	0x20000008

08000d98 <clear_AX25>:
void clear_AX25(){
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <clear_AX25+0x5c>)
 8000da0:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <clear_AX25+0x60>)
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <clear_AX25+0x64>)
 8000da6:	4615      	mov	r5, r2
 8000da8:	461c      	mov	r4, r3
 8000daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dac:	6028      	str	r0, [r5, #0]
 8000dae:	6069      	str	r1, [r5, #4]
 8000db0:	60aa      	str	r2, [r5, #8]
 8000db2:	60eb      	str	r3, [r5, #12]
 8000db4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000db6:	6128      	str	r0, [r5, #16]
 8000db8:	6169      	str	r1, [r5, #20]
 8000dba:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <clear_AX25+0x60>)
 8000dbe:	f7ff fa27 	bl	8000210 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	490b      	ldr	r1, [pc, #44]	; (8000df8 <clear_AX25+0x60>)
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <clear_AX25+0x68>)
 8000dcc:	f004 fa93 	bl	80052f6 <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f640 225f 	movw	r2, #2655	; 0xa5f
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 f9a1 	bl	8006120 <memcpy>
	local_packet->got_packet = false;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000de4:	3309      	adds	r3, #9
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bdb0      	pop	{r4, r5, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000a18 	.word	0x20000a18
 8000df8:	2000260c 	.word	0x2000260c
 8000dfc:	08006ad8 	.word	0x08006ad8
 8000e00:	200042c8 	.word	0x200042c8

08000e04 <print_KISS>:

void output_KISS() {
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}
void print_KISS(){
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b08d      	sub	sp, #52	; 0x34
 8000e08:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000e0a:	4bad      	ldr	r3, [pc, #692]	; (80010c0 <print_KISS+0x2bc>)
 8000e0c:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e14:	330c      	adds	r3, #12
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8000e1a:	4baa      	ldr	r3, [pc, #680]	; (80010c4 <print_KISS+0x2c0>)
 8000e1c:	4aaa      	ldr	r2, [pc, #680]	; (80010c8 <print_KISS+0x2c4>)
 8000e1e:	4614      	mov	r4, r2
 8000e20:	469c      	mov	ip, r3
 8000e22:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e26:	4665      	mov	r5, ip
 8000e28:	4626      	mov	r6, r4
 8000e2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e2c:	6028      	str	r0, [r5, #0]
 8000e2e:	6069      	str	r1, [r5, #4]
 8000e30:	60aa      	str	r2, [r5, #8]
 8000e32:	60eb      	str	r3, [r5, #12]
 8000e34:	3410      	adds	r4, #16
 8000e36:	f10c 0c10 	add.w	ip, ip, #16
 8000e3a:	4574      	cmp	r4, lr
 8000e3c:	d1f3      	bne.n	8000e26 <print_KISS+0x22>
 8000e3e:	4663      	mov	r3, ip
 8000e40:	4622      	mov	r2, r4
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	6018      	str	r0, [r3, #0]
 8000e46:	8891      	ldrh	r1, [r2, #4]
 8000e48:	7992      	ldrb	r2, [r2, #6]
 8000e4a:	8099      	strh	r1, [r3, #4]
 8000e4c:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e4e:	489d      	ldr	r0, [pc, #628]	; (80010c4 <print_KISS+0x2c0>)
 8000e50:	f7ff f9de 	bl	8000210 <strlen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	230a      	movs	r3, #10
 8000e5a:	499a      	ldr	r1, [pc, #616]	; (80010c4 <print_KISS+0x2c0>)
 8000e5c:	489b      	ldr	r0, [pc, #620]	; (80010cc <print_KISS+0x2c8>)
 8000e5e:	f004 fa4a 	bl	80052f6 <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address-16);//Subtract 16 to start at the flag start
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000e68:	3310      	adds	r3, #16
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3b10      	subs	r3, #16
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8000e70:	4a94      	ldr	r2, [pc, #592]	; (80010c4 <print_KISS+0x2c0>)
 8000e72:	4b97      	ldr	r3, [pc, #604]	; (80010d0 <print_KISS+0x2cc>)
 8000e74:	4615      	mov	r5, r2
 8000e76:	461c      	mov	r4, r3
 8000e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7a:	6028      	str	r0, [r5, #0]
 8000e7c:	6069      	str	r1, [r5, #4]
 8000e7e:	60aa      	str	r2, [r5, #8]
 8000e80:	60eb      	str	r3, [r5, #12]
 8000e82:	8823      	ldrh	r3, [r4, #0]
 8000e84:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e86:	488f      	ldr	r0, [pc, #572]	; (80010c4 <print_KISS+0x2c0>)
 8000e88:	f7ff f9c2 	bl	8000210 <strlen>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	230a      	movs	r3, #10
 8000e92:	498c      	ldr	r1, [pc, #560]	; (80010c4 <print_KISS+0x2c0>)
 8000e94:	488d      	ldr	r0, [pc, #564]	; (80010cc <print_KISS+0x2c8>)
 8000e96:	f004 fa2e 	bl	80052f6 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e9e:	e017      	b.n	8000ed0 <print_KISS+0xcc>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4989      	ldr	r1, [pc, #548]	; (80010d4 <print_KISS+0x2d0>)
 8000eb0:	4884      	ldr	r0, [pc, #528]	; (80010c4 <print_KISS+0x2c0>)
 8000eb2:	f005 f949 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000eb6:	4883      	ldr	r0, [pc, #524]	; (80010c4 <print_KISS+0x2c0>)
 8000eb8:	f7ff f9aa 	bl	8000210 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	4980      	ldr	r1, [pc, #512]	; (80010c4 <print_KISS+0x2c0>)
 8000ec4:	4881      	ldr	r0, [pc, #516]	; (80010cc <print_KISS+0x2c8>)
 8000ec6:	f004 fa16 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	3301      	adds	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8000ed6:	4a7b      	ldr	r2, [pc, #492]	; (80010c4 <print_KISS+0x2c0>)
 8000ed8:	4b7f      	ldr	r3, [pc, #508]	; (80010d8 <print_KISS+0x2d4>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ede:	4879      	ldr	r0, [pc, #484]	; (80010c4 <print_KISS+0x2c0>)
 8000ee0:	f7ff f996 	bl	8000210 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	230a      	movs	r3, #10
 8000eea:	4976      	ldr	r1, [pc, #472]	; (80010c4 <print_KISS+0x2c0>)
 8000eec:	4877      	ldr	r0, [pc, #476]	; (80010cc <print_KISS+0x2c8>)
 8000eee:	f004 fa02 	bl	80052f6 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ef8:	3310      	adds	r3, #16
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	e042      	b.n	8000f8a <print_KISS+0x186>
		sprintf(uartData, "Address Field %d =",i+1);
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	3301      	adds	r3, #1
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4974      	ldr	r1, [pc, #464]	; (80010dc <print_KISS+0x2d8>)
 8000f0c:	486d      	ldr	r0, [pc, #436]	; (80010c4 <print_KISS+0x2c0>)
 8000f0e:	f005 f91b 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f12:	486c      	ldr	r0, [pc, #432]	; (80010c4 <print_KISS+0x2c0>)
 8000f14:	f7ff f97c 	bl	8000210 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	4969      	ldr	r1, [pc, #420]	; (80010c4 <print_KISS+0x2c0>)
 8000f20:	486a      	ldr	r0, [pc, #424]	; (80010cc <print_KISS+0x2c8>)
 8000f22:	f004 f9e8 	bl	80052f6 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	e017      	b.n	8000f5c <print_KISS+0x158>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4966      	ldr	r1, [pc, #408]	; (80010d4 <print_KISS+0x2d0>)
 8000f3c:	4861      	ldr	r0, [pc, #388]	; (80010c4 <print_KISS+0x2c0>)
 8000f3e:	f005 f903 	bl	8006148 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f42:	4860      	ldr	r0, [pc, #384]	; (80010c4 <print_KISS+0x2c0>)
 8000f44:	f7ff f964 	bl	8000210 <strlen>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	495d      	ldr	r1, [pc, #372]	; (80010c4 <print_KISS+0x2c0>)
 8000f50:	485e      	ldr	r0, [pc, #376]	; (80010cc <print_KISS+0x2c8>)
 8000f52:	f004 f9d0 	bl	80052f6 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	dde4      	ble.n	8000f2c <print_KISS+0x128>
		}
		curr_mem += 8;
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	3308      	adds	r3, #8
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000f68:	4a56      	ldr	r2, [pc, #344]	; (80010c4 <print_KISS+0x2c0>)
 8000f6a:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <print_KISS+0x2d4>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f70:	4854      	ldr	r0, [pc, #336]	; (80010c4 <print_KISS+0x2c0>)
 8000f72:	f7ff f94d 	bl	8000210 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	4951      	ldr	r1, [pc, #324]	; (80010c4 <print_KISS+0x2c0>)
 8000f7e:	4853      	ldr	r0, [pc, #332]	; (80010cc <print_KISS+0x2c8>)
 8000f80:	f004 f9b9 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	3301      	adds	r3, #1
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	2b0d      	cmp	r3, #13
 8000f8e:	ddb9      	ble.n	8000f04 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f96:	3314      	adds	r3, #20
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000f9c:	4a49      	ldr	r2, [pc, #292]	; (80010c4 <print_KISS+0x2c0>)
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <print_KISS+0x2dc>)
 8000fa0:	4615      	mov	r5, r2
 8000fa2:	461c      	mov	r4, r3
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	6028      	str	r0, [r5, #0]
 8000fa8:	6069      	str	r1, [r5, #4]
 8000faa:	60aa      	str	r2, [r5, #8]
 8000fac:	60eb      	str	r3, [r5, #12]
 8000fae:	8823      	ldrh	r3, [r4, #0]
 8000fb0:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fb2:	4844      	ldr	r0, [pc, #272]	; (80010c4 <print_KISS+0x2c0>)
 8000fb4:	f7ff f92c 	bl	8000210 <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	4941      	ldr	r1, [pc, #260]	; (80010c4 <print_KISS+0x2c0>)
 8000fc0:	4842      	ldr	r0, [pc, #264]	; (80010cc <print_KISS+0x2c8>)
 8000fc2:	f004 f998 	bl	80052f6 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e017      	b.n	8000ffc <print_KISS+0x1f8>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	493e      	ldr	r1, [pc, #248]	; (80010d4 <print_KISS+0x2d0>)
 8000fdc:	4839      	ldr	r0, [pc, #228]	; (80010c4 <print_KISS+0x2c0>)
 8000fde:	f005 f8b3 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fe2:	4838      	ldr	r0, [pc, #224]	; (80010c4 <print_KISS+0x2c0>)
 8000fe4:	f7ff f914 	bl	8000210 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	230a      	movs	r3, #10
 8000fee:	4935      	ldr	r1, [pc, #212]	; (80010c4 <print_KISS+0x2c0>)
 8000ff0:	4836      	ldr	r0, [pc, #216]	; (80010cc <print_KISS+0x2c8>)
 8000ff2:	f004 f980 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	dde4      	ble.n	8000fcc <print_KISS+0x1c8>
	}
	sprintf(uartData, "\n");
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <print_KISS+0x2c0>)
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <print_KISS+0x2d4>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800100a:	482e      	ldr	r0, [pc, #184]	; (80010c4 <print_KISS+0x2c0>)
 800100c:	f7ff f900 	bl	8000210 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	230a      	movs	r3, #10
 8001016:	492b      	ldr	r1, [pc, #172]	; (80010c4 <print_KISS+0x2c0>)
 8001018:	482c      	ldr	r0, [pc, #176]	; (80010cc <print_KISS+0x2c8>)
 800101a:	f004 f96c 	bl	80052f6 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001024:	3318      	adds	r3, #24
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 800102a:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <print_KISS+0x2c0>)
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <print_KISS+0x2e0>)
 800102e:	4615      	mov	r5, r2
 8001030:	461c      	mov	r4, r3
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	6028      	str	r0, [r5, #0]
 8001036:	6069      	str	r1, [r5, #4]
 8001038:	60aa      	str	r2, [r5, #8]
 800103a:	60eb      	str	r3, [r5, #12]
 800103c:	8823      	ldrh	r3, [r4, #0]
 800103e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001040:	4820      	ldr	r0, [pc, #128]	; (80010c4 <print_KISS+0x2c0>)
 8001042:	f7ff f8e5 	bl	8000210 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	230a      	movs	r3, #10
 800104c:	491d      	ldr	r1, [pc, #116]	; (80010c4 <print_KISS+0x2c0>)
 800104e:	481f      	ldr	r0, [pc, #124]	; (80010cc <print_KISS+0x2c8>)
 8001050:	f004 f951 	bl	80052f6 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	e017      	b.n	800108a <print_KISS+0x286>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	f1c3 0307 	rsb	r3, r3, #7
 8001060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	491a      	ldr	r1, [pc, #104]	; (80010d4 <print_KISS+0x2d0>)
 800106a:	4816      	ldr	r0, [pc, #88]	; (80010c4 <print_KISS+0x2c0>)
 800106c:	f005 f86c 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001070:	4814      	ldr	r0, [pc, #80]	; (80010c4 <print_KISS+0x2c0>)
 8001072:	f7ff f8cd 	bl	8000210 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	230a      	movs	r3, #10
 800107c:	4911      	ldr	r1, [pc, #68]	; (80010c4 <print_KISS+0x2c0>)
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <print_KISS+0x2c8>)
 8001080:	f004 f939 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	3301      	adds	r3, #1
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b07      	cmp	r3, #7
 800108e:	dde4      	ble.n	800105a <print_KISS+0x256>
	}
	sprintf(uartData, "\n");
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <print_KISS+0x2c0>)
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <print_KISS+0x2d4>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <print_KISS+0x2c0>)
 800109a:	f7ff f8b9 	bl	8000210 <strlen>
 800109e:	4603      	mov	r3, r0
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	230a      	movs	r3, #10
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <print_KISS+0x2c0>)
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <print_KISS+0x2c8>)
 80010a8:	f004 f925 	bl	80052f6 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80010b2:	331c      	adds	r3, #28
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e057      	b.n	800116e <print_KISS+0x36a>
 80010be:	bf00      	nop
 80010c0:	20000a18 	.word	0x20000a18
 80010c4:	2000260c 	.word	0x2000260c
 80010c8:	08006af4 	.word	0x08006af4
 80010cc:	200042c8 	.word	0x200042c8
 80010d0:	08006b2c 	.word	0x08006b2c
 80010d4:	08006a7c 	.word	0x08006a7c
 80010d8:	08006a84 	.word	0x08006a84
 80010dc:	08006a88 	.word	0x08006a88
 80010e0:	08006a9c 	.word	0x08006a9c
 80010e4:	08006ab0 	.word	0x08006ab0
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	461a      	mov	r2, r3
 80010ee:	494f      	ldr	r1, [pc, #316]	; (800122c <print_KISS+0x428>)
 80010f0:	484f      	ldr	r0, [pc, #316]	; (8001230 <print_KISS+0x42c>)
 80010f2:	f005 f829 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010f6:	484e      	ldr	r0, [pc, #312]	; (8001230 <print_KISS+0x42c>)
 80010f8:	f7ff f88a 	bl	8000210 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	230a      	movs	r3, #10
 8001102:	494b      	ldr	r1, [pc, #300]	; (8001230 <print_KISS+0x42c>)
 8001104:	484b      	ldr	r0, [pc, #300]	; (8001234 <print_KISS+0x430>)
 8001106:	f004 f8f6 	bl	80052f6 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e017      	b.n	8001140 <print_KISS+0x33c>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4946      	ldr	r1, [pc, #280]	; (8001238 <print_KISS+0x434>)
 8001120:	4843      	ldr	r0, [pc, #268]	; (8001230 <print_KISS+0x42c>)
 8001122:	f005 f811 	bl	8006148 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001126:	4842      	ldr	r0, [pc, #264]	; (8001230 <print_KISS+0x42c>)
 8001128:	f7ff f872 	bl	8000210 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	230a      	movs	r3, #10
 8001132:	493f      	ldr	r1, [pc, #252]	; (8001230 <print_KISS+0x42c>)
 8001134:	483f      	ldr	r0, [pc, #252]	; (8001234 <print_KISS+0x430>)
 8001136:	f004 f8de 	bl	80052f6 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	3301      	adds	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	2b07      	cmp	r3, #7
 8001144:	dde4      	ble.n	8001110 <print_KISS+0x30c>
		}
		curr_mem += 8;
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	3308      	adds	r3, #8
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800114c:	4a38      	ldr	r2, [pc, #224]	; (8001230 <print_KISS+0x42c>)
 800114e:	4b3b      	ldr	r3, [pc, #236]	; (800123c <print_KISS+0x438>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <print_KISS+0x42c>)
 8001156:	f7ff f85b 	bl	8000210 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	230a      	movs	r3, #10
 8001160:	4933      	ldr	r1, [pc, #204]	; (8001230 <print_KISS+0x42c>)
 8001162:	4834      	ldr	r0, [pc, #208]	; (8001234 <print_KISS+0x430>)
 8001164:	f004 f8c7 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	da00      	bge.n	800117c <print_KISS+0x378>
 800117a:	3307      	adds	r3, #7
 800117c:	10db      	asrs	r3, r3, #3
 800117e:	3b01      	subs	r3, #1
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	429a      	cmp	r2, r3
 8001184:	dbb0      	blt.n	80010e8 <print_KISS+0x2e4>
	}

	//Print Stop Flag
	curr_mem = (local_packet->KISS_PACKET+(8*(local_packet->byte_cnt-1)));
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001192:	330c      	adds	r3, #12
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <print_KISS+0x42c>)
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <print_KISS+0x43c>)
 80011a2:	4615      	mov	r5, r2
 80011a4:	461c      	mov	r4, r3
 80011a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a8:	6028      	str	r0, [r5, #0]
 80011aa:	6069      	str	r1, [r5, #4]
 80011ac:	60aa      	str	r2, [r5, #8]
 80011ae:	60eb      	str	r3, [r5, #12]
 80011b0:	8823      	ldrh	r3, [r4, #0]
 80011b2:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <print_KISS+0x42c>)
 80011b6:	f7ff f82b 	bl	8000210 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	230a      	movs	r3, #10
 80011c0:	491b      	ldr	r1, [pc, #108]	; (8001230 <print_KISS+0x42c>)
 80011c2:	481c      	ldr	r0, [pc, #112]	; (8001234 <print_KISS+0x430>)
 80011c4:	f004 f897 	bl	80052f6 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e017      	b.n	80011fe <print_KISS+0x3fa>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1c3 0307 	rsb	r3, r3, #7
 80011d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4916      	ldr	r1, [pc, #88]	; (8001238 <print_KISS+0x434>)
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <print_KISS+0x42c>)
 80011e0:	f004 ffb2 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <print_KISS+0x42c>)
 80011e6:	f7ff f813 	bl	8000210 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	230a      	movs	r3, #10
 80011f0:	490f      	ldr	r1, [pc, #60]	; (8001230 <print_KISS+0x42c>)
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <print_KISS+0x430>)
 80011f4:	f004 f87f 	bl	80052f6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b07      	cmp	r3, #7
 8001202:	dde4      	ble.n	80011ce <print_KISS+0x3ca>
	}
	sprintf(uartData, "\n\n");
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <print_KISS+0x42c>)
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <print_KISS+0x440>)
 8001208:	8811      	ldrh	r1, [r2, #0]
 800120a:	7892      	ldrb	r2, [r2, #2]
 800120c:	8019      	strh	r1, [r3, #0]
 800120e:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <print_KISS+0x42c>)
 8001212:	f7fe fffd 	bl	8000210 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	b29a      	uxth	r2, r3
 800121a:	230a      	movs	r3, #10
 800121c:	4904      	ldr	r1, [pc, #16]	; (8001230 <print_KISS+0x42c>)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <print_KISS+0x430>)
 8001220:	f004 f869 	bl	80052f6 <HAL_UART_Transmit>
}
 8001224:	bf00      	nop
 8001226:	3734      	adds	r7, #52	; 0x34
 8001228:	46bd      	mov	sp, r7
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	08006ac4 	.word	0x08006ac4
 8001230:	2000260c 	.word	0x2000260c
 8001234:	200042c8 	.word	0x200042c8
 8001238:	08006a7c 	.word	0x08006a7c
 800123c:	08006a84 	.word	0x08006a84
 8001240:	08006b40 	.word	0x08006b40
 8001244:	08006b54 	.word	0x08006b54

08001248 <UART2_EXCEPTION_CALLBACK>:

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 800124c:	2201      	movs	r2, #1
 800124e:	491d      	ldr	r1, [pc, #116]	; (80012c4 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8001250:	481d      	ldr	r0, [pc, #116]	; (80012c8 <UART2_EXCEPTION_CALLBACK+0x80>)
 8001252:	f004 f8e9 	bl	8005428 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 8001258:	2200      	movs	r2, #0
 800125a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 800125e:	7b1b      	ldrb	r3, [r3, #12]
 8001260:	2bc0      	cmp	r3, #192	; 0xc0
 8001262:	d104      	bne.n	800126e <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	3301      	adds	r3, #1
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 800126c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <UART2_EXCEPTION_CALLBACK+0x88>)
 8001276:	4413      	add	r3, r2
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 800127a:	7b12      	ldrb	r2, [r2, #12]
 800127c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a11      	ldr	r2, [pc, #68]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 8001286:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	dd16      	ble.n	80012be <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <UART2_EXCEPTION_CALLBACK+0x90>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 80012b6:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x84>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

	  }
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20001d80 	.word	0x20001d80
 80012c8:	200042c8 	.word	0x200042c8
 80012cc:	20001d74 	.word	0x20001d74
 80012d0:	20001d82 	.word	0x20001d82
 80012d4:	20004270 	.word	0x20004270
 80012d8:	20000a01 	.word	0x20000a01

080012dc <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80012e2:	4a51      	ldr	r2, [pc, #324]	; (8001428 <receiving_AX25+0x14c>)
 80012e4:	4b51      	ldr	r3, [pc, #324]	; (800142c <receiving_AX25+0x150>)
 80012e6:	4615      	mov	r5, r2
 80012e8:	461c      	mov	r4, r3
 80012ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ec:	6028      	str	r0, [r5, #0]
 80012ee:	6069      	str	r1, [r5, #4]
 80012f0:	60aa      	str	r2, [r5, #8]
 80012f2:	60eb      	str	r3, [r5, #12]
 80012f4:	cc03      	ldmia	r4!, {r0, r1}
 80012f6:	6128      	str	r0, [r5, #16]
 80012f8:	6169      	str	r1, [r5, #20]
 80012fa:	7823      	ldrb	r3, [r4, #0]
 80012fc:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012fe:	484a      	ldr	r0, [pc, #296]	; (8001428 <receiving_AX25+0x14c>)
 8001300:	f7fe ff86 	bl	8000210 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	230a      	movs	r3, #10
 800130a:	4947      	ldr	r1, [pc, #284]	; (8001428 <receiving_AX25+0x14c>)
 800130c:	4848      	ldr	r0, [pc, #288]	; (8001430 <receiving_AX25+0x154>)
 800130e:	f003 fff2 	bl	80052f6 <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001312:	4b48      	ldr	r3, [pc, #288]	; (8001434 <receiving_AX25+0x158>)
 8001314:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 8001316:	f000 febb 	bl	8002090 <streamGet>
 800131a:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d13b      	bne.n	800139a <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001328:	3308      	adds	r3, #8
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 800132e:	f000 f889 	bl	8001444 <AX25_Packet_Validate>
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00b      	beq.n	8001354 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 800133c:	f000 f9aa 	bl	8001694 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fef4 	bl	8006136 <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 800134e:	f7ff ffc5 	bl	80012dc <receiving_AX25>
 8001352:	e065      	b.n	8001420 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <receiving_AX25+0x14c>)
 8001356:	4a38      	ldr	r2, [pc, #224]	; (8001438 <receiving_AX25+0x15c>)
 8001358:	4614      	mov	r4, r2
 800135a:	469c      	mov	ip, r3
 800135c:	f104 0e20 	add.w	lr, r4, #32
 8001360:	4665      	mov	r5, ip
 8001362:	4626      	mov	r6, r4
 8001364:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001366:	6028      	str	r0, [r5, #0]
 8001368:	6069      	str	r1, [r5, #4]
 800136a:	60aa      	str	r2, [r5, #8]
 800136c:	60eb      	str	r3, [r5, #12]
 800136e:	3410      	adds	r4, #16
 8001370:	f10c 0c10 	add.w	ip, ip, #16
 8001374:	4574      	cmp	r4, lr
 8001376:	d1f3      	bne.n	8001360 <receiving_AX25+0x84>
 8001378:	4662      	mov	r2, ip
 800137a:	4623      	mov	r3, r4
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001380:	4829      	ldr	r0, [pc, #164]	; (8001428 <receiving_AX25+0x14c>)
 8001382:	f7fe ff45 	bl	8000210 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	230a      	movs	r3, #10
 800138c:	4926      	ldr	r1, [pc, #152]	; (8001428 <receiving_AX25+0x14c>)
 800138e:	4828      	ldr	r0, [pc, #160]	; (8001430 <receiving_AX25+0x154>)
 8001390:	f003 ffb1 	bl	80052f6 <HAL_UART_Transmit>
			receiving_AX25();
 8001394:	f7ff ffa2 	bl	80012dc <receiving_AX25>
 8001398:	e042      	b.n	8001420 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d118      	bne.n	80013d4 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 80013a2:	4a21      	ldr	r2, [pc, #132]	; (8001428 <receiving_AX25+0x14c>)
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <receiving_AX25+0x160>)
 80013a6:	4615      	mov	r5, r2
 80013a8:	461c      	mov	r4, r3
 80013aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ac:	6028      	str	r0, [r5, #0]
 80013ae:	6069      	str	r1, [r5, #4]
 80013b0:	60aa      	str	r2, [r5, #8]
 80013b2:	60eb      	str	r3, [r5, #12]
 80013b4:	6820      	ldr	r0, [r4, #0]
 80013b6:	6128      	str	r0, [r5, #16]
 80013b8:	7923      	ldrb	r3, [r4, #4]
 80013ba:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013bc:	481a      	ldr	r0, [pc, #104]	; (8001428 <receiving_AX25+0x14c>)
 80013be:	f7fe ff27 	bl	8000210 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	230a      	movs	r3, #10
 80013c8:	4917      	ldr	r1, [pc, #92]	; (8001428 <receiving_AX25+0x14c>)
 80013ca:	4819      	ldr	r0, [pc, #100]	; (8001430 <receiving_AX25+0x154>)
 80013cc:	f003 ff93 	bl	80052f6 <HAL_UART_Transmit>

		return false;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e025      	b.n	8001420 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <receiving_AX25+0x14c>)
 80013d6:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <receiving_AX25+0x164>)
 80013d8:	4614      	mov	r4, r2
 80013da:	469c      	mov	ip, r3
 80013dc:	f104 0e20 	add.w	lr, r4, #32
 80013e0:	4665      	mov	r5, ip
 80013e2:	4626      	mov	r6, r4
 80013e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013e6:	6028      	str	r0, [r5, #0]
 80013e8:	6069      	str	r1, [r5, #4]
 80013ea:	60aa      	str	r2, [r5, #8]
 80013ec:	60eb      	str	r3, [r5, #12]
 80013ee:	3410      	adds	r4, #16
 80013f0:	f10c 0c10 	add.w	ip, ip, #16
 80013f4:	4574      	cmp	r4, lr
 80013f6:	d1f3      	bne.n	80013e0 <receiving_AX25+0x104>
 80013f8:	4663      	mov	r3, ip
 80013fa:	4622      	mov	r2, r4
 80013fc:	6810      	ldr	r0, [r2, #0]
 80013fe:	6018      	str	r0, [r3, #0]
 8001400:	8891      	ldrh	r1, [r2, #4]
 8001402:	7992      	ldrb	r2, [r2, #6]
 8001404:	8099      	strh	r1, [r3, #4]
 8001406:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <receiving_AX25+0x14c>)
 800140a:	f7fe ff01 	bl	8000210 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	230a      	movs	r3, #10
 8001414:	4904      	ldr	r1, [pc, #16]	; (8001428 <receiving_AX25+0x14c>)
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <receiving_AX25+0x154>)
 8001418:	f003 ff6d 	bl	80052f6 <HAL_UART_Transmit>
		receiving_AX25();
 800141c:	f7ff ff5e 	bl	80012dc <receiving_AX25>
	}
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	2000260c 	.word	0x2000260c
 800142c:	08006b58 	.word	0x08006b58
 8001430:	200042c8 	.word	0x200042c8
 8001434:	20000a18 	.word	0x20000a18
 8001438:	08006b74 	.word	0x08006b74
 800143c:	08006b98 	.word	0x08006b98
 8001440:	08006bb0 	.word	0x08006bb0

08001444 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <AX25_Packet_Validate+0x5c>)
 800144c:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <AX25_Packet_Validate+0x60>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b77      	cmp	r3, #119	; 0x77
 8001458:	dc0a      	bgt.n	8001470 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <AX25_Packet_Validate+0x64>)
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <AX25_Packet_Validate+0x68>)
 800145e:	4614      	mov	r4, r2
 8001460:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001462:	6020      	str	r0, [r4, #0]
 8001464:	6061      	str	r1, [r4, #4]
 8001466:	60a2      	str	r2, [r4, #8]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	7323      	strb	r3, [r4, #12]
		return false;
 800146c:	2300      	movs	r3, #0
 800146e:	e013      	b.n	8001498 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <AX25_Packet_Validate+0x60>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00a      	beq.n	8001492 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <AX25_Packet_Validate+0x64>)
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <AX25_Packet_Validate+0x68>)
 8001480:	4614      	mov	r4, r2
 8001482:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001484:	6020      	str	r0, [r4, #0]
 8001486:	6061      	str	r1, [r4, #4]
 8001488:	60a2      	str	r2, [r4, #8]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	7323      	strb	r3, [r4, #12]
		return false;
 800148e:	2300      	movs	r3, #0
 8001490:	e002      	b.n	8001498 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8001492:	f000 f80d 	bl	80014b0 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 8001496:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	20000a18 	.word	0x20000a18
 80014a4:	200009fc 	.word	0x200009fc
 80014a8:	2000260c 	.word	0x2000260c
 80014ac:	08006bd8 	.word	0x08006bd8

080014b0 <set_packet_pointer_AX25>:

void set_packet_pointer_AX25(){
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014b6:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <set_packet_pointer_AX25+0x1c0>)
 80014b8:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 80014ba:	2310      	movs	r3, #16
 80014bc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 80014c0:	4a6d      	ldr	r2, [pc, #436]	; (8001678 <set_packet_pointer_AX25+0x1c8>)
 80014c2:	4614      	mov	r4, r2
 80014c4:	469c      	mov	ip, r3
 80014c6:	f104 0e20 	add.w	lr, r4, #32
 80014ca:	4665      	mov	r5, ip
 80014cc:	4626      	mov	r6, r4
 80014ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d0:	6028      	str	r0, [r5, #0]
 80014d2:	6069      	str	r1, [r5, #4]
 80014d4:	60aa      	str	r2, [r5, #8]
 80014d6:	60eb      	str	r3, [r5, #12]
 80014d8:	3410      	adds	r4, #16
 80014da:	f10c 0c10 	add.w	ip, ip, #16
 80014de:	4574      	cmp	r4, lr
 80014e0:	d1f3      	bne.n	80014ca <set_packet_pointer_AX25+0x1a>
 80014e2:	4663      	mov	r3, ip
 80014e4:	4622      	mov	r2, r4
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014ea:	4862      	ldr	r0, [pc, #392]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 80014ec:	f7fe fe90 	bl	8000210 <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	230a      	movs	r3, #10
 80014f6:	495f      	ldr	r1, [pc, #380]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 80014f8:	4860      	ldr	r0, [pc, #384]	; (800167c <set_packet_pointer_AX25+0x1cc>)
 80014fa:	f003 fefc 	bl	80052f6 <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8001502:	4a5c      	ldr	r2, [pc, #368]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 8001504:	4b5e      	ldr	r3, [pc, #376]	; (8001680 <set_packet_pointer_AX25+0x1d0>)
 8001506:	4615      	mov	r5, r2
 8001508:	461c      	mov	r4, r3
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	6028      	str	r0, [r5, #0]
 800150e:	6069      	str	r1, [r5, #4]
 8001510:	60aa      	str	r2, [r5, #8]
 8001512:	60eb      	str	r3, [r5, #12]
 8001514:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001516:	6128      	str	r0, [r5, #16]
 8001518:	6169      	str	r1, [r5, #20]
 800151a:	61aa      	str	r2, [r5, #24]
 800151c:	7823      	ldrb	r3, [r4, #0]
 800151e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001520:	4854      	ldr	r0, [pc, #336]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 8001522:	f7fe fe75 	bl	8000210 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	230a      	movs	r3, #10
 800152c:	4951      	ldr	r1, [pc, #324]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 800152e:	4853      	ldr	r0, [pc, #332]	; (800167c <set_packet_pointer_AX25+0x1cc>)
 8001530:	f003 fee1 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800153a:	3310      	adds	r3, #16
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3370      	adds	r3, #112	; 0x70
 8001544:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3370      	adds	r3, #112	; 0x70
 800154a:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 800154c:	4a49      	ldr	r2, [pc, #292]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <set_packet_pointer_AX25+0x1d4>)
 8001550:	4615      	mov	r5, r2
 8001552:	461c      	mov	r4, r3
 8001554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001556:	6028      	str	r0, [r5, #0]
 8001558:	6069      	str	r1, [r5, #4]
 800155a:	60aa      	str	r2, [r5, #8]
 800155c:	60eb      	str	r3, [r5, #12]
 800155e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001560:	6128      	str	r0, [r5, #16]
 8001562:	6169      	str	r1, [r5, #20]
 8001564:	61aa      	str	r2, [r5, #24]
 8001566:	7823      	ldrb	r3, [r4, #0]
 8001568:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800156a:	4842      	ldr	r0, [pc, #264]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 800156c:	f7fe fe50 	bl	8000210 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	230a      	movs	r3, #10
 8001576:	493f      	ldr	r1, [pc, #252]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 8001578:	4840      	ldr	r0, [pc, #256]	; (800167c <set_packet_pointer_AX25+0x1cc>)
 800157a:	f003 febc 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001584:	3314      	adds	r3, #20
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3308      	adds	r3, #8
 800158e:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3308      	adds	r3, #8
 8001594:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 8001596:	4a37      	ldr	r2, [pc, #220]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <set_packet_pointer_AX25+0x1d8>)
 800159a:	4615      	mov	r5, r2
 800159c:	461c      	mov	r4, r3
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	6028      	str	r0, [r5, #0]
 80015a2:	6069      	str	r1, [r5, #4]
 80015a4:	60aa      	str	r2, [r5, #8]
 80015a6:	60eb      	str	r3, [r5, #12]
 80015a8:	cc03      	ldmia	r4!, {r0, r1}
 80015aa:	6128      	str	r0, [r5, #16]
 80015ac:	6169      	str	r1, [r5, #20]
 80015ae:	7823      	ldrb	r3, [r4, #0]
 80015b0:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015b2:	4830      	ldr	r0, [pc, #192]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 80015b4:	f7fe fe2c 	bl	8000210 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	230a      	movs	r3, #10
 80015be:	492d      	ldr	r1, [pc, #180]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 80015c0:	482e      	ldr	r0, [pc, #184]	; (800167c <set_packet_pointer_AX25+0x1cc>)
 80015c2:	f003 fe98 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015cc:	3318      	adds	r3, #24
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3308      	adds	r3, #8
 80015d6:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3308      	adds	r3, #8
 80015dc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <set_packet_pointer_AX25+0x1dc>)
 80015e2:	4615      	mov	r5, r2
 80015e4:	461c      	mov	r4, r3
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	6028      	str	r0, [r5, #0]
 80015ea:	6069      	str	r1, [r5, #4]
 80015ec:	60aa      	str	r2, [r5, #8]
 80015ee:	60eb      	str	r3, [r5, #12]
 80015f0:	cc03      	ldmia	r4!, {r0, r1}
 80015f2:	6128      	str	r0, [r5, #16]
 80015f4:	6169      	str	r1, [r5, #20]
 80015f6:	8823      	ldrh	r3, [r4, #0]
 80015f8:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015fa:	481e      	ldr	r0, [pc, #120]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 80015fc:	f7fe fe08 	bl	8000210 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	230a      	movs	r3, #10
 8001606:	491b      	ldr	r1, [pc, #108]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 8001608:	481c      	ldr	r0, [pc, #112]	; (800167c <set_packet_pointer_AX25+0x1cc>)
 800160a:	f003 fe74 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001614:	331c      	adds	r3, #28
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <set_packet_pointer_AX25+0x1e0>)
 800162e:	4615      	mov	r5, r2
 8001630:	461c      	mov	r4, r3
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	6028      	str	r0, [r5, #0]
 8001636:	6069      	str	r1, [r5, #4]
 8001638:	60aa      	str	r2, [r5, #8]
 800163a:	60eb      	str	r3, [r5, #12]
 800163c:	cc03      	ldmia	r4!, {r0, r1}
 800163e:	6128      	str	r0, [r5, #16]
 8001640:	6169      	str	r1, [r5, #20]
 8001642:	7823      	ldrb	r3, [r4, #0]
 8001644:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001646:	480b      	ldr	r0, [pc, #44]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 8001648:	f7fe fde2 	bl	8000210 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	230a      	movs	r3, #10
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <set_packet_pointer_AX25+0x1c4>)
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <set_packet_pointer_AX25+0x1cc>)
 8001656:	f003 fe4e 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001660:	3304      	adds	r3, #4
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166e:	bf00      	nop
 8001670:	20000a18 	.word	0x20000a18
 8001674:	2000260c 	.word	0x2000260c
 8001678:	08006be8 	.word	0x08006be8
 800167c:	200042c8 	.word	0x200042c8
 8001680:	08006c0c 	.word	0x08006c0c
 8001684:	08006c2c 	.word	0x08006c2c
 8001688:	08006c4c 	.word	0x08006c4c
 800168c:	08006c68 	.word	0x08006c68
 8001690:	08006c84 	.word	0x08006c84

08001694 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <AX25_TO_KISS+0xc4>)
 800169c:	607b      	str	r3, [r7, #4]

	set_packet_pointer_AX25();
 800169e:	f7ff ff07 	bl	80014b0 <set_packet_pointer_AX25>
	print_AX25();
 80016a2:	f7ff f959 	bl	8000958 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3308      	adds	r3, #8
 80016aa:	603b      	str	r3, [r7, #0]

	set_packet_pointer_KISS();
 80016ac:	f000 f8c2 	bl	8001834 <set_packet_pointer_KISS>

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	492a      	ldr	r1, [pc, #168]	; (800175c <AX25_TO_KISS+0xc8>)
 80016b4:	461a      	mov	r2, r3
 80016b6:	460b      	mov	r3, r1
 80016b8:	cb03      	ldmia	r3!, {r0, r1}
 80016ba:	6010      	str	r0, [r2, #0]
 80016bc:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016c4:	3310      	adds	r3, #16
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2270      	movs	r2, #112	; 0x70
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 fd27 	bl	8006120 <memcpy>
	cpy_from_ptr += address_len;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3370      	adds	r3, #112	; 0x70
 80016d6:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016de:	3314      	adds	r3, #20
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2208      	movs	r2, #8
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 fd1a 	bl	8006120 <memcpy>
	cpy_from_ptr += control_len;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3308      	adds	r3, #8
 80016f0:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016f8:	3318      	adds	r3, #24
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2208      	movs	r2, #8
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fd0d 	bl	8006120 <memcpy>
	cpy_from_ptr += PID_len;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3308      	adds	r3, #8
 800170a:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001712:	331c      	adds	r3, #28
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	f004 fcfd 	bl	8006120 <memcpy>

	memcpy(local_packet->Info+local_packet->Info_Len,KISS_FLAG,FLAG_SIZE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800172c:	331c      	adds	r3, #28
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	4413      	add	r3, r2
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <AX25_TO_KISS+0xc8>)
 800173c:	461a      	mov	r2, r3
 800173e:	460b      	mov	r3, r1
 8001740:	cb03      	ldmia	r3!, {r0, r1}
 8001742:	6010      	str	r0, [r2, #0]
 8001744:	6051      	str	r1, [r2, #4]
//	rxBit_count = (local_packet->byte_cnt*8) - 24;
//	crc_generate();

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <AX25_TO_KISS+0xcc>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_KISS();
 800174c:	f7ff fb5a 	bl	8000e04 <print_KISS>
	return true; //valid packet
 8001750:	bf00      	nop
}
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000a18 	.word	0x20000a18
 800175c:	20000000 	.word	0x20000000
 8001760:	200009fc 	.word	0x200009fc

08001764 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <receiving_KISS+0xbc>)
 800176c:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <receiving_KISS+0xc0>)
 8001770:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	7b5b      	ldrb	r3, [r3, #13]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d04d      	beq.n	8001816 <receiving_KISS+0xb2>
		sprintf(uartData, "\nGot a packet via UART of size %d bytes, printing now...\n\n",local_UART_packet->received_byte_cnt);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	461a      	mov	r2, r3
 8001780:	4929      	ldr	r1, [pc, #164]	; (8001828 <receiving_KISS+0xc4>)
 8001782:	482a      	ldr	r0, [pc, #168]	; (800182c <receiving_KISS+0xc8>)
 8001784:	f004 fce0 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001788:	4828      	ldr	r0, [pc, #160]	; (800182c <receiving_KISS+0xc8>)
 800178a:	f7fe fd41 	bl	8000210 <strlen>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	230a      	movs	r3, #10
 8001794:	4925      	ldr	r1, [pc, #148]	; (800182c <receiving_KISS+0xc8>)
 8001796:	4826      	ldr	r0, [pc, #152]	; (8001830 <receiving_KISS+0xcc>)
 8001798:	f003 fdad 	bl	80052f6 <HAL_UART_Transmit>

		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e020      	b.n	80017e4 <receiving_KISS+0x80>
			//Hex value from UART
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[i];
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4413      	add	r3, r2
 80017a8:	330e      	adds	r3, #14
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	72fb      	strb	r3, [r7, #11]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	3307      	adds	r3, #7
 80017bc:	607b      	str	r3, [r7, #4]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2201      	movs	r2, #1
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fefa 	bl	80005c0 <conv_HEX_to_BIN>

			local_UART_packet->got_packet = false;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	2200      	movs	r2, #0
 80017d0:	735a      	strb	r2, [r3, #13]
			local_packet->got_packet = true;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017d8:	3309      	adds	r3, #9
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbd9      	blt.n	80017a2 <receiving_KISS+0x3e>
		}
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017f8:	330c      	adds	r3, #12
 80017fa:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset-1)*8;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001802:	330c      	adds	r3, #12
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3b13      	subs	r3, #19
 8001808:	00da      	lsls	r2, r3, #3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001810:	601a      	str	r2, [r3, #0]
		return true;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <receiving_KISS+0xb4>
	}

	else {
		return false;
 8001816:	2300      	movs	r3, #0
	}
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20001d74 	.word	0x20001d74
 8001824:	20000a18 	.word	0x20000a18
 8001828:	08006ca0 	.word	0x08006ca0
 800182c:	2000260c 	.word	0x2000260c
 8001830:	200042c8 	.word	0x200042c8

08001834 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800183a:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <set_packet_pointer_KISS+0x174>)
 800183c:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS:\n");
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <set_packet_pointer_KISS+0x178>)
 8001840:	4a5b      	ldr	r2, [pc, #364]	; (80019b0 <set_packet_pointer_KISS+0x17c>)
 8001842:	4614      	mov	r4, r2
 8001844:	469c      	mov	ip, r3
 8001846:	f104 0e20 	add.w	lr, r4, #32
 800184a:	4665      	mov	r5, ip
 800184c:	4626      	mov	r6, r4
 800184e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001850:	6028      	str	r0, [r5, #0]
 8001852:	6069      	str	r1, [r5, #4]
 8001854:	60aa      	str	r2, [r5, #8]
 8001856:	60eb      	str	r3, [r5, #12]
 8001858:	3410      	adds	r4, #16
 800185a:	f10c 0c10 	add.w	ip, ip, #16
 800185e:	4574      	cmp	r4, lr
 8001860:	d1f3      	bne.n	800184a <set_packet_pointer_KISS+0x16>
 8001862:	4663      	mov	r3, ip
 8001864:	4622      	mov	r2, r4
 8001866:	7812      	ldrb	r2, [r2, #0]
 8001868:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800186a:	4850      	ldr	r0, [pc, #320]	; (80019ac <set_packet_pointer_KISS+0x178>)
 800186c:	f7fe fcd0 	bl	8000210 <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	230a      	movs	r3, #10
 8001876:	494d      	ldr	r1, [pc, #308]	; (80019ac <set_packet_pointer_KISS+0x178>)
 8001878:	484e      	ldr	r0, [pc, #312]	; (80019b4 <set_packet_pointer_KISS+0x180>)
 800187a:	f003 fd3c 	bl	80052f6 <HAL_UART_Transmit>

	bool *curr_mem = local_packet->KISS_PACKET+16;//+8 is to skip the flag since it does not have a pointer
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001884:	3310      	adds	r3, #16
 8001886:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for address\n");
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <set_packet_pointer_KISS+0x178>)
 800188a:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <set_packet_pointer_KISS+0x184>)
 800188c:	4615      	mov	r5, r2
 800188e:	461c      	mov	r4, r3
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	6028      	str	r0, [r5, #0]
 8001894:	6069      	str	r1, [r5, #4]
 8001896:	60aa      	str	r2, [r5, #8]
 8001898:	60eb      	str	r3, [r5, #12]
 800189a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800189c:	6128      	str	r0, [r5, #16]
 800189e:	6169      	str	r1, [r5, #20]
 80018a0:	61aa      	str	r2, [r5, #24]
 80018a2:	7823      	ldrb	r3, [r4, #0]
 80018a4:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018a6:	4841      	ldr	r0, [pc, #260]	; (80019ac <set_packet_pointer_KISS+0x178>)
 80018a8:	f7fe fcb2 	bl	8000210 <strlen>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	230a      	movs	r3, #10
 80018b2:	493e      	ldr	r1, [pc, #248]	; (80019ac <set_packet_pointer_KISS+0x178>)
 80018b4:	483f      	ldr	r0, [pc, #252]	; (80019b4 <set_packet_pointer_KISS+0x180>)
 80018b6:	f003 fd1e 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018c0:	3310      	adds	r3, #16
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3370      	adds	r3, #112	; 0x70
 80018ca:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for control\n");
 80018cc:	4a37      	ldr	r2, [pc, #220]	; (80019ac <set_packet_pointer_KISS+0x178>)
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <set_packet_pointer_KISS+0x188>)
 80018d0:	4615      	mov	r5, r2
 80018d2:	461c      	mov	r4, r3
 80018d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d6:	6028      	str	r0, [r5, #0]
 80018d8:	6069      	str	r1, [r5, #4]
 80018da:	60aa      	str	r2, [r5, #8]
 80018dc:	60eb      	str	r3, [r5, #12]
 80018de:	cc07      	ldmia	r4!, {r0, r1, r2}
 80018e0:	6128      	str	r0, [r5, #16]
 80018e2:	6169      	str	r1, [r5, #20]
 80018e4:	61aa      	str	r2, [r5, #24]
 80018e6:	7823      	ldrb	r3, [r4, #0]
 80018e8:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018ea:	4830      	ldr	r0, [pc, #192]	; (80019ac <set_packet_pointer_KISS+0x178>)
 80018ec:	f7fe fc90 	bl	8000210 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	230a      	movs	r3, #10
 80018f6:	492d      	ldr	r1, [pc, #180]	; (80019ac <set_packet_pointer_KISS+0x178>)
 80018f8:	482e      	ldr	r0, [pc, #184]	; (80019b4 <set_packet_pointer_KISS+0x180>)
 80018fa:	f003 fcfc 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001904:	3314      	adds	r3, #20
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3308      	adds	r3, #8
 800190e:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for PID\n");
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <set_packet_pointer_KISS+0x178>)
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <set_packet_pointer_KISS+0x18c>)
 8001914:	4615      	mov	r5, r2
 8001916:	461c      	mov	r4, r3
 8001918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191a:	6028      	str	r0, [r5, #0]
 800191c:	6069      	str	r1, [r5, #4]
 800191e:	60aa      	str	r2, [r5, #8]
 8001920:	60eb      	str	r3, [r5, #12]
 8001922:	cc03      	ldmia	r4!, {r0, r1}
 8001924:	6128      	str	r0, [r5, #16]
 8001926:	6169      	str	r1, [r5, #20]
 8001928:	7823      	ldrb	r3, [r4, #0]
 800192a:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800192c:	481f      	ldr	r0, [pc, #124]	; (80019ac <set_packet_pointer_KISS+0x178>)
 800192e:	f7fe fc6f 	bl	8000210 <strlen>
 8001932:	4603      	mov	r3, r0
 8001934:	b29a      	uxth	r2, r3
 8001936:	230a      	movs	r3, #10
 8001938:	491c      	ldr	r1, [pc, #112]	; (80019ac <set_packet_pointer_KISS+0x178>)
 800193a:	481e      	ldr	r0, [pc, #120]	; (80019b4 <set_packet_pointer_KISS+0x180>)
 800193c:	f003 fcdb 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001946:	3318      	adds	r3, #24
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3308      	adds	r3, #8
 8001950:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for Info\n");
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <set_packet_pointer_KISS+0x178>)
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <set_packet_pointer_KISS+0x190>)
 8001956:	4615      	mov	r5, r2
 8001958:	461c      	mov	r4, r3
 800195a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195c:	6028      	str	r0, [r5, #0]
 800195e:	6069      	str	r1, [r5, #4]
 8001960:	60aa      	str	r2, [r5, #8]
 8001962:	60eb      	str	r3, [r5, #12]
 8001964:	cc03      	ldmia	r4!, {r0, r1}
 8001966:	6128      	str	r0, [r5, #16]
 8001968:	6169      	str	r1, [r5, #20]
 800196a:	8823      	ldrh	r3, [r4, #0]
 800196c:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800196e:	480f      	ldr	r0, [pc, #60]	; (80019ac <set_packet_pointer_KISS+0x178>)
 8001970:	f7fe fc4e 	bl	8000210 <strlen>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	230a      	movs	r3, #10
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <set_packet_pointer_KISS+0x178>)
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <set_packet_pointer_KISS+0x180>)
 800197e:	f003 fcba 	bl	80052f6 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001988:	331c      	adds	r3, #28
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4413      	add	r3, r2
 800199c:	603b      	str	r3, [r7, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000a18 	.word	0x20000a18
 80019ac:	2000260c 	.word	0x2000260c
 80019b0:	08006cdc 	.word	0x08006cdc
 80019b4:	200042c8 	.word	0x200042c8
 80019b8:	08006c0c 	.word	0x08006c0c
 80019bc:	08006c2c 	.word	0x08006c2c
 80019c0:	08006c4c 	.word	0x08006c4c
 80019c4:	08006c68 	.word	0x08006c68

080019c8 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <KISS_TO_AX25+0x9c>)
 80019d0:	607b      	str	r3, [r7, #4]

	set_packet_pointer_KISS();
 80019d2:	f7ff ff2f 	bl	8001834 <set_packet_pointer_KISS>
	print_KISS();
 80019d6:	f7ff fa15 	bl	8000e04 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+16);//starting kiss packet skipping 2 bytes
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80019e0:	3310      	adds	r3, #16
 80019e2:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 80019e4:	f7ff fd64 	bl	80014b0 <set_packet_pointer_AX25>

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019ee:	3310      	adds	r3, #16
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2270      	movs	r2, #112	; 0x70
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 fb92 	bl	8006120 <memcpy>
	cpy_from_ptr += address_len;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3370      	adds	r3, #112	; 0x70
 8001a00:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a08:	3314      	adds	r3, #20
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	6839      	ldr	r1, [r7, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 fb85 	bl	8006120 <memcpy>
	cpy_from_ptr += control_len;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3308      	adds	r3, #8
 8001a1a:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a22:	3318      	adds	r3, #24
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2208      	movs	r2, #8
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fb78 	bl	8006120 <memcpy>
	cpy_from_ptr += PID_len;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	3308      	adds	r3, #8
 8001a34:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a3c:	331c      	adds	r3, #28
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6839      	ldr	r1, [r7, #0]
 8001a4c:	f004 fb68 	bl	8006120 <memcpy>
//	rxBit_count = (local_packet->byte_cnt*8) - 24;
//	crc_generate();

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <KISS_TO_AX25+0xa0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_AX25();
 8001a56:	f7fe ff7f 	bl	8000958 <print_AX25>
	return true; //valid packet
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000a18 	.word	0x20000a18
 8001a68:	200009fc 	.word	0x200009fc

08001a6c <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8001a76:	f000 f98b 	bl	8001d90 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <initProgram+0x58>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8001a80:	f000 f826 	bl	8001ad0 <toggleMode>
	toggleMode();
 8001a84:	f000 f824 	bl	8001ad0 <toggleMode>

	if (mode) {
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <initProgram+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <initProgram+0x5c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2264      	movs	r2, #100	; 0x64
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <initProgram+0x60>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aa2:	e009      	b.n	8001ab8 <initProgram+0x4c>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <initProgram+0x5c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <initProgram+0x60>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 8001ab8:	f7fe fdd2 	bl	8000660 <init_AX25>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20004270 	.word	0x20004270
 8001ac8:	20004288 	.word	0x20004288
 8001acc:	200031d0 	.word	0x200031d0

08001ad0 <toggleMode>:



void toggleMode() {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001ad4:	2006      	movs	r0, #6
 8001ad6:	f001 fa78 	bl	8002fca <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <toggleMode+0x98>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <toggleMode+0x98>)
 8001af6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <toggleMode+0x98>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	2120      	movs	r1, #32
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <toggleMode+0x9c>)
 8001b02:	f002 fa15 	bl	8003f30 <HAL_GPIO_WritePin>
	midbit = false;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <toggleMode+0xa0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8001b0c:	4819      	ldr	r0, [pc, #100]	; (8001b74 <toggleMode+0xa4>)
 8001b0e:	f002 ffa4 	bl	8004a5a <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <toggleMode+0xa4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <toggleMode+0x98>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <toggleMode+0x5e>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <toggleMode+0xa4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2c:	e013      	b.n	8001b56 <toggleMode+0x86>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <toggleMode+0xa8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <toggleMode+0xa4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8001b42:	480c      	ldr	r0, [pc, #48]	; (8001b74 <toggleMode+0xa4>)
 8001b44:	f002 ffb4 	bl	8004ab0 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	480c      	ldr	r0, [pc, #48]	; (8001b7c <toggleMode+0xac>)
 8001b4c:	f001 fb28 	bl	80031a0 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b50:	2006      	movs	r0, #6
 8001b52:	f001 fa2c 	bl	8002fae <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <toggleMode+0x9c>)
 8001b5e:	f002 f9e7 	bl	8003f30 <HAL_GPIO_WritePin>
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20004270 	.word	0x20004270
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	20000a00 	.word	0x20000a00
 8001b74:	200031d0 	.word	0x200031d0
 8001b78:	20004288 	.word	0x20004288
 8001b7c:	20004274 	.word	0x20004274

08001b80 <loadPeriodBuffer>:

void loadPeriodBuffer(int timerCnt) {
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	periodBuffer[periodSaveCount] = timerCnt;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <loadPeriodBuffer+0x40>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <loadPeriodBuffer+0x44>)
 8001b92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	periodSaveCount++;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <loadPeriodBuffer+0x40>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <loadPeriodBuffer+0x40>)
 8001ba0:	801a      	strh	r2, [r3, #0]
	if (periodSaveCount >= RX_BUFFERSIZE) {
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <loadPeriodBuffer+0x40>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001baa:	d302      	bcc.n	8001bb2 <loadPeriodBuffer+0x32>
		periodSaveCount = 0;
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <loadPeriodBuffer+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	801a      	strh	r2, [r3, #0]
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000a04 	.word	0x20000a04
 8001bc4:	20003270 	.word	0x20003270

08001bc8 <Tim3IT>:
void Tim3IT() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if (mode) {
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <Tim3IT+0x34>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <Tim3IT+0x14>
		//HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
		midbit = false;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <Tim3IT+0x38>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
		if(sampusecount>SAMP_PER_BAUD){
			loadPeriodBuffer(0);
		}
		sampusecount++;
	}
}
 8001bda:	e00c      	b.n	8001bf6 <Tim3IT+0x2e>
		if(sampusecount>SAMP_PER_BAUD){
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <Tim3IT+0x3c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d902      	bls.n	8001bea <Tim3IT+0x22>
			loadPeriodBuffer(0);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff ffcb 	bl	8001b80 <loadPeriodBuffer>
		sampusecount++;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <Tim3IT+0x3c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <Tim3IT+0x3c>)
 8001bf4:	701a      	strb	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20004270 	.word	0x20004270
 8001c00:	20000a00 	.word	0x20000a00
 8001c04:	20000a03 	.word	0x20000a03

08001c08 <FreqCounterPinEXTI>:
void FreqCounterPinEXTI() {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	loadPeriodBuffer(htim2.Instance->CNT);
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <FreqCounterPinEXTI+0x24>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ffb4 	bl	8001b80 <loadPeriodBuffer>
	htim2.Instance->CNT = 0;
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <FreqCounterPinEXTI+0x24>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
	sampusecount = 0;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <FreqCounterPinEXTI+0x28>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20004288 	.word	0x20004288
 8001c30:	20000a03 	.word	0x20000a03

08001c34 <bitToAudio>:
		sprintf(uartData, "sinArray[%d] = %d\n",i,sinArray[i]);
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}

int bitToAudio(bool *bitStream, int arraySize, bool direction,int wave_start) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	71fb      	strb	r3, [r7, #7]
	bool changeFreq;
	int waveoffset = wave_start;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < arraySize; i++) {
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e05c      	b.n	8001d08 <bitToAudio+0xd4>
		//Check if freq needs to be changed for NRZI
		if(direction){
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <bitToAudio+0x2c>
			changeFreq = bitStream[i];
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	77fb      	strb	r3, [r7, #31]
 8001c5e:	e007      	b.n	8001c70 <bitToAudio+0x3c>
		} else {
			changeFreq = bitStream[arraySize - i - 1];
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	77fb      	strb	r3, [r7, #31]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, changeFreq);
 8001c70:	7ffb      	ldrb	r3, [r7, #31]
 8001c72:	461a      	mov	r2, r3
 8001c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c78:	4829      	ldr	r0, [pc, #164]	; (8001d20 <bitToAudio+0xec>)
 8001c7a:	f002 f959 	bl	8003f30 <HAL_GPIO_WritePin>
		freqSelect = changeFreq;
 8001c7e:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <bitToAudio+0xf0>)
 8001c80:	7ffb      	ldrb	r3, [r7, #31]
 8001c82:	7013      	strb	r3, [r2, #0]
		//freqSelect = (changeFreq) ? !freqSelect : freqSelect;

		if (freqSelect) {
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <bitToAudio+0xf0>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <bitToAudio+0x68>
			htim2.Instance->ARR = 14;
 8001c8c:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <bitToAudio+0xf4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	220e      	movs	r2, #14
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * HIGHF) / (1.0 * LOWF);
 8001c94:	f240 2326 	movw	r3, #550	; 0x226
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	e006      	b.n	8001caa <bitToAudio+0x76>
		}
		else {
			htim2.Instance->ARR = 27;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <bitToAudio+0xf4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	221b      	movs	r2, #27
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * LOWF) / (1.0 * LOWF);
 8001ca4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ca8:	61bb      	str	r3, [r7, #24]
		}

		//htim2.Instance->CNT = 0;
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <bitToAudio+0xf8>)
 8001cb0:	441a      	add	r2, r3
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cba:	2100      	movs	r1, #0
 8001cbc:	481c      	ldr	r0, [pc, #112]	; (8001d30 <bitToAudio+0xfc>)
 8001cbe:	f001 f9c1 	bl	8003044 <HAL_DAC_Start_DMA>
		htim3.Instance->CNT = 0;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <bitToAudio+0x100>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8001cca:	481a      	ldr	r0, [pc, #104]	; (8001d34 <bitToAudio+0x100>)
 8001ccc:	f002 fef0 	bl	8004ab0 <HAL_TIM_Base_Start_IT>

		//Calculate ending point for wave
		wave_start = (wave_start+waveoffset+1)%FREQ_SAMP;
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <bitToAudio+0x104>)
 8001cda:	fb82 1203 	smull	r1, r2, r2, r3
 8001cde:	1151      	asrs	r1, r2, #5
 8001ce0:	17da      	asrs	r2, r3, #31
 8001ce2:	1a8a      	subs	r2, r1, r2
 8001ce4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ce8:	fb01 f202 	mul.w	r2, r1, r2
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	603b      	str	r3, [r7, #0]

		midbit = true;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <bitToAudio+0x108>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
		while (midbit){
 8001cf6:	e000      	b.n	8001cfa <bitToAudio+0xc6>
			//In the future this leaves the CPU free for scheduling or something
			__NOP();
 8001cf8:	bf00      	nop
		while (midbit){
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <bitToAudio+0x108>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1fa      	bne.n	8001cf8 <bitToAudio+0xc4>
	for (int i = 0; i < arraySize; i++) {
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	db9e      	blt.n	8001c4e <bitToAudio+0x1a>
		}

	}

	HAL_TIM_Base_Stop(&htim3);
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <bitToAudio+0x100>)
 8001d12:	f002 fea2 	bl	8004a5a <HAL_TIM_Base_Stop>
	return wave_start;
 8001d16:	683b      	ldr	r3, [r7, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020000 	.word	0x40020000
 8001d24:	20000a02 	.word	0x20000a02
 8001d28:	20004288 	.word	0x20004288
 8001d2c:	20000010 	.word	0x20000010
 8001d30:	20004274 	.word	0x20004274
 8001d34:	200031d0 	.word	0x200031d0
 8001d38:	1b4e81b5 	.word	0x1b4e81b5
 8001d3c:	20000a00 	.word	0x20000a00

08001d40 <generateBitstream>:
void generateBitstream() {
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <generateBitstream+0x4c>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <generateBitstream+0x4c>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <generateBitstream+0x4c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <generateBitstream+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <generateBitstream+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <generateBitstream+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <generateBitstream+0x4c>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <generateBitstream+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <generateBitstream+0x4c>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <generateBitstream+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	725a      	strb	r2, [r3, #9]

}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200031c4 	.word	0x200031c4

08001d90 <initOUTData>:
void initOUTData() {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8001d94:	f7ff ffd4 	bl	8001d40 <generateBitstream>
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <pertobit>:
uint8_t sampusecount = 0;
uint16_t periodSaveCount = 0;
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <pertobit+0x54>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001db4:	4293      	cmp	r3, r2
 8001db6:	dd06      	ble.n	8001dc6 <pertobit+0x2a>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f640 2259 	movw	r2, #2649	; 0xa59
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	dc01      	bgt.n	8001dc6 <pertobit+0x2a>
		return 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00d      	b.n	8001de2 <pertobit+0x46>
	if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	dd06      	ble.n	8001dde <pertobit+0x42>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f240 6271 	movw	r2, #1649	; 0x671
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	dc01      	bgt.n	8001dde <pertobit+0x42>
		return 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e001      	b.n	8001de2 <pertobit+0x46>
	else
		return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	00989680 	.word	0x00989680

08001df4 <loadBit>:
int loadBit(){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
	int currbit = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
	int nextbit = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]

	currbit = pertobit(periodBuffer[trackBit]);
 8001e02:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <loadBit+0xf4>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <loadBit+0xf8>)
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ffc4 	bl	8001d9c <pertobit>
 8001e14:	6078      	str	r0, [r7, #4]

	//Low frequency should have 1 bit per baud
	if(currbit==0){
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <loadBit+0x38>
		bitBuffer[bitSaveCount] = 0;
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <loadBit+0xfc>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <loadBit+0x100>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e2a:	e03c      	b.n	8001ea6 <loadBit+0xb2>
	}

	//High frequency should have 2 high bits per baud
	else if(currbit==1){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d131      	bne.n	8001e96 <loadBit+0xa2>
		//Gather next bit
		//ternary assign: var = (cond)?if_true:if_false;
		nextbit = (trackBit!=RX_BUFFERSIZE-1)?pertobit(periodBuffer[trackBit+1]):pertobit(periodBuffer[0]);
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <loadBit+0xf4>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00a      	beq.n	8001e54 <loadBit+0x60>
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <loadBit+0xf4>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a29      	ldr	r2, [pc, #164]	; (8001eec <loadBit+0xf8>)
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ffa6 	bl	8001d9c <pertobit>
 8001e50:	4603      	mov	r3, r0
 8001e52:	e005      	b.n	8001e60 <loadBit+0x6c>
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <loadBit+0xf8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff9f 	bl	8001d9c <pertobit>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	603b      	str	r3, [r7, #0]

		if(nextbit==1){
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10d      	bne.n	8001e84 <loadBit+0x90>
			//High frequency detected, skip next bit
			trackBit++;
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <loadBit+0xf4>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <loadBit+0xf4>)
 8001e72:	801a      	strh	r2, [r3, #0]
			bitBuffer[bitSaveCount] = 1;
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <loadBit+0xfc>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <loadBit+0x100>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e82:	e010      	b.n	8001ea6 <loadBit+0xb2>
		}
		else {
			bitBuffer[bitSaveCount] = -1;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <loadBit+0xfc>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <loadBit+0x100>)
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e94:	e007      	b.n	8001ea6 <loadBit+0xb2>
		}
	}
	//Invalid bit
	else{
		bitBuffer[bitSaveCount] = -1;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <loadBit+0xfc>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <loadBit+0x100>)
 8001e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	}

	//Increment trackBit
	trackBit++;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <loadBit+0xf4>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <loadBit+0xf4>)
 8001eb0:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <loadBit+0xf4>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d302      	bcc.n	8001ec2 <loadBit+0xce>
		trackBit = 0;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <loadBit+0xf4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	801a      	strh	r2, [r3, #0]

	//Increment bitSaveCount
	bitSaveCount++;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <loadBit+0xfc>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <loadBit+0xfc>)
 8001ecc:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <loadBit+0xfc>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d302      	bcc.n	8001ede <loadBit+0xea>
		bitSaveCount = 0;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <loadBit+0xfc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	801a      	strh	r2, [r3, #0]

	return currbit;
 8001ede:	687b      	ldr	r3, [r7, #4]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000a06 	.word	0x20000a06
 8001eec:	20003270 	.word	0x20003270
 8001ef0:	20000a08 	.word	0x20000a08
 8001ef4:	20004308 	.word	0x20004308

08001ef8 <loadOctet>:
int loadOctet(bool* bufferptr) {
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8001f00:	2301      	movs	r3, #1
 8001f02:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	e043      	b.n	8001f92 <loadOctet+0x9a>
		bit = loadBit();
 8001f0a:	f7ff ff73 	bl	8001df4 <loadBit>
 8001f0e:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4955      	ldr	r1, [pc, #340]	; (800206c <loadOctet+0x174>)
 8001f16:	4856      	ldr	r0, [pc, #344]	; (8002070 <loadOctet+0x178>)
 8001f18:	f004 f916 	bl	8006148 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f1c:	4854      	ldr	r0, [pc, #336]	; (8002070 <loadOctet+0x178>)
 8001f1e:	f7fe f977 	bl	8000210 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	230a      	movs	r3, #10
 8001f28:	4951      	ldr	r1, [pc, #324]	; (8002070 <loadOctet+0x178>)
 8001f2a:	4852      	ldr	r0, [pc, #328]	; (8002074 <loadOctet+0x17c>)
 8001f2c:	f003 f9e3 	bl	80052f6 <HAL_UART_Transmit>

        if(bit < 0){
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da11      	bge.n	8001f5a <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	494f      	ldr	r1, [pc, #316]	; (8002078 <loadOctet+0x180>)
 8001f3a:	484d      	ldr	r0, [pc, #308]	; (8002070 <loadOctet+0x178>)
 8001f3c:	f004 f904 	bl	8006148 <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <loadOctet+0x178>)
 8001f42:	f7fe f965 	bl	8000210 <strlen>
 8001f46:	4603      	mov	r3, r0
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	4948      	ldr	r1, [pc, #288]	; (8002070 <loadOctet+0x178>)
 8001f4e:	4849      	ldr	r0, [pc, #292]	; (8002074 <loadOctet+0x17c>)
 8001f50:	f003 f9d1 	bl	80052f6 <HAL_UART_Transmit>
        	return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	e083      	b.n	8002062 <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2d9      	uxtb	r1, r3
 8001f66:	f107 0208 	add.w	r2, r7, #8
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	460a      	mov	r2, r1
 8001f70:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8001f72:	f107 0208 	add.w	r2, r7, #8
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4413      	add	r3, r2
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	493f      	ldr	r1, [pc, #252]	; (800207c <loadOctet+0x184>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	440b      	add	r3, r1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <loadOctet+0x94>
        	isFlag = false;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b07      	cmp	r3, #7
 8001f96:	ddb8      	ble.n	8001f0a <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05d      	beq.n	8002060 <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 8001fa4:	4a32      	ldr	r2, [pc, #200]	; (8002070 <loadOctet+0x178>)
 8001fa6:	4b36      	ldr	r3, [pc, #216]	; (8002080 <loadOctet+0x188>)
 8001fa8:	4615      	mov	r5, r2
 8001faa:	461c      	mov	r4, r3
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	6028      	str	r0, [r5, #0]
 8001fb0:	6069      	str	r1, [r5, #4]
 8001fb2:	60aa      	str	r2, [r5, #8]
 8001fb4:	60eb      	str	r3, [r5, #12]
 8001fb6:	cc03      	ldmia	r4!, {r0, r1}
 8001fb8:	6128      	str	r0, [r5, #16]
 8001fba:	6169      	str	r1, [r5, #20]
 8001fbc:	8823      	ldrh	r3, [r4, #0]
 8001fbe:	78a2      	ldrb	r2, [r4, #2]
 8001fc0:	832b      	strh	r3, [r5, #24]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fc6:	482a      	ldr	r0, [pc, #168]	; (8002070 <loadOctet+0x178>)
 8001fc8:	f7fe f922 	bl	8000210 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	4927      	ldr	r1, [pc, #156]	; (8002070 <loadOctet+0x178>)
 8001fd4:	4827      	ldr	r0, [pc, #156]	; (8002074 <loadOctet+0x17c>)
 8001fd6:	f003 f98e 	bl	80052f6 <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e02c      	b.n	800203a <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	f107 0220 	add.w	r2, r7, #32
 8001fea:	4413      	add	r3, r2
 8001fec:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	440b      	add	r3, r1
 8001ffc:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <loadOctet+0x18c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <loadOctet+0x18c>)
 8002006:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	491b      	ldr	r1, [pc, #108]	; (8002088 <loadOctet+0x190>)
 800201a:	4815      	ldr	r0, [pc, #84]	; (8002070 <loadOctet+0x178>)
 800201c:	f004 f894 	bl	8006148 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <loadOctet+0x178>)
 8002022:	f7fe f8f5 	bl	8000210 <strlen>
 8002026:	4603      	mov	r3, r0
 8002028:	b29a      	uxth	r2, r3
 800202a:	230a      	movs	r3, #10
 800202c:	4910      	ldr	r1, [pc, #64]	; (8002070 <loadOctet+0x178>)
 800202e:	4811      	ldr	r0, [pc, #68]	; (8002074 <loadOctet+0x17c>)
 8002030:	f003 f961 	bl	80052f6 <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b07      	cmp	r3, #7
 800203e:	ddcf      	ble.n	8001fe0 <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <loadOctet+0x178>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <loadOctet+0x194>)
 8002044:	8811      	ldrh	r1, [r2, #0]
 8002046:	7892      	ldrb	r2, [r2, #2]
 8002048:	8019      	strh	r1, [r3, #0]
 800204a:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800204c:	4808      	ldr	r0, [pc, #32]	; (8002070 <loadOctet+0x178>)
 800204e:	f7fe f8df 	bl	8000210 <strlen>
 8002052:	4603      	mov	r3, r0
 8002054:	b29a      	uxth	r2, r3
 8002056:	230a      	movs	r3, #10
 8002058:	4905      	ldr	r1, [pc, #20]	; (8002070 <loadOctet+0x178>)
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <loadOctet+0x17c>)
 800205c:	f003 f94b 	bl	80052f6 <HAL_UART_Transmit>
	}
	return isFlag;
 8002060:	7ffb      	ldrb	r3, [r7, #31]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bdb0      	pop	{r4, r5, r7, pc}
 800206a:	bf00      	nop
 800206c:	08006d68 	.word	0x08006d68
 8002070:	2000260c 	.word	0x2000260c
 8002074:	200042c8 	.word	0x200042c8
 8002078:	08006d78 	.word	0x08006d78
 800207c:	20000008 	.word	0x20000008
 8002080:	08006d88 	.word	0x08006d88
 8002084:	200009fc 	.word	0x200009fc
 8002088:	08006da4 	.word	0x08006da4
 800208c:	08006dac 	.word	0x08006dac

08002090 <streamGet>:
int streamGet() {
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b090      	sub	sp, #64	; 0x40
 8002094:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <streamGet+0x228>)
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 800209a:	f240 134b 	movw	r3, #331	; 0x14b
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 80020a0:	e0fb      	b.n	800229a <streamGet+0x20a>
		gotflag = false;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 80020a8:	2300      	movs	r3, #0
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
 80020ac:	e011      	b.n	80020d2 <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	3301      	adds	r3, #1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020b8:	4413      	add	r3, r2
 80020ba:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80020c6:	440b      	add	r3, r1
 80020c8:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	3301      	adds	r3, #1
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	ddea      	ble.n	80020ae <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 80020d8:	f7ff fe8c 	bl	8001df4 <loadBit>
 80020dc:	4603      	mov	r3, r0
 80020de:	623b      	str	r3, [r7, #32]
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e4:	e019      	b.n	800211a <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020ee:	4413      	add	r3, r2
 80020f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020f4:	4971      	ldr	r1, [pc, #452]	; (80022bc <streamGet+0x22c>)
 80020f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f8:	440a      	add	r2, r1
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <streamGet+0x78>
				gotflag = false;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002106:	e00b      	b.n	8002120 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b07      	cmp	r3, #7
 800210c:	d102      	bne.n	8002114 <streamGet+0x84>
				gotflag = true;
 800210e:	2301      	movs	r3, #1
 8002110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	3301      	adds	r3, #1
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	2b07      	cmp	r3, #7
 800211e:	dde2      	ble.n	80020e6 <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8002120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80b8 	beq.w	800229a <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 800212a:	4a65      	ldr	r2, [pc, #404]	; (80022c0 <streamGet+0x230>)
 800212c:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <streamGet+0x234>)
 800212e:	4615      	mov	r5, r2
 8002130:	461c      	mov	r4, r3
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	6028      	str	r0, [r5, #0]
 8002136:	6069      	str	r1, [r5, #4]
 8002138:	60aa      	str	r2, [r5, #8]
 800213a:	60eb      	str	r3, [r5, #12]
 800213c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800213e:	6128      	str	r0, [r5, #16]
 8002140:	6169      	str	r1, [r5, #20]
 8002142:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002144:	485e      	ldr	r0, [pc, #376]	; (80022c0 <streamGet+0x230>)
 8002146:	f7fe f863 	bl	8000210 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	b29a      	uxth	r2, r3
 800214e:	230a      	movs	r3, #10
 8002150:	495b      	ldr	r1, [pc, #364]	; (80022c0 <streamGet+0x230>)
 8002152:	485d      	ldr	r0, [pc, #372]	; (80022c8 <streamGet+0x238>)
 8002154:	f003 f8cf 	bl	80052f6 <HAL_UART_Transmit>
			octet_count  = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002160:	e01a      	b.n	8002198 <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8002162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002168:	4413      	add	r3, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fec4 	bl	8001ef8 <loadOctet>
 8002170:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002176:	4955      	ldr	r1, [pc, #340]	; (80022cc <streamGet+0x23c>)
 8002178:	4851      	ldr	r0, [pc, #324]	; (80022c0 <streamGet+0x230>)
 800217a:	f003 ffe5 	bl	8006148 <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800217e:	4850      	ldr	r0, [pc, #320]	; (80022c0 <streamGet+0x230>)
 8002180:	f7fe f846 	bl	8000210 <strlen>
 8002184:	4603      	mov	r3, r0
 8002186:	b29a      	uxth	r2, r3
 8002188:	230a      	movs	r3, #10
 800218a:	494d      	ldr	r1, [pc, #308]	; (80022c0 <streamGet+0x230>)
 800218c:	484e      	ldr	r0, [pc, #312]	; (80022c8 <streamGet+0x238>)
 800218e:	f003 f8b2 	bl	80052f6 <HAL_UART_Transmit>

				octet_count+=1;
 8002192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002194:	3301      	adds	r3, #1
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <streamGet+0x116>
 800219e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbdd      	blt.n	8002162 <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 80021a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d012      	beq.n	80021d2 <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 80021ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ae:	4948      	ldr	r1, [pc, #288]	; (80022d0 <streamGet+0x240>)
 80021b0:	4843      	ldr	r0, [pc, #268]	; (80022c0 <streamGet+0x230>)
 80021b2:	f003 ffc9 	bl	8006148 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021b6:	4842      	ldr	r0, [pc, #264]	; (80022c0 <streamGet+0x230>)
 80021b8:	f7fe f82a 	bl	8000210 <strlen>
 80021bc:	4603      	mov	r3, r0
 80021be:	b29a      	uxth	r2, r3
 80021c0:	230a      	movs	r3, #10
 80021c2:	493f      	ldr	r1, [pc, #252]	; (80022c0 <streamGet+0x230>)
 80021c4:	4840      	ldr	r0, [pc, #256]	; (80022c8 <streamGet+0x238>)
 80021c6:	f003 f896 	bl	80052f6 <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021d0:	e063      	b.n	800229a <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 80021d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	429a      	cmp	r2, r3
 80021d8:	db12      	blt.n	8002200 <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 80021da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021dc:	493d      	ldr	r1, [pc, #244]	; (80022d4 <streamGet+0x244>)
 80021de:	4838      	ldr	r0, [pc, #224]	; (80022c0 <streamGet+0x230>)
 80021e0:	f003 ffb2 	bl	8006148 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021e4:	4836      	ldr	r0, [pc, #216]	; (80022c0 <streamGet+0x230>)
 80021e6:	f7fe f813 	bl	8000210 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	230a      	movs	r3, #10
 80021f0:	4933      	ldr	r1, [pc, #204]	; (80022c0 <streamGet+0x230>)
 80021f2:	4835      	ldr	r0, [pc, #212]	; (80022c8 <streamGet+0x238>)
 80021f4:	f003 f87f 	bl	80052f6 <HAL_UART_Transmit>
				gotflag = false;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021fe:	e04c      	b.n	800229a <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 8002200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12d      	bne.n	8002262 <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <streamGet+0x230>)
 8002208:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <streamGet+0x248>)
 800220a:	4615      	mov	r5, r2
 800220c:	461c      	mov	r4, r3
 800220e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002210:	6028      	str	r0, [r5, #0]
 8002212:	6069      	str	r1, [r5, #4]
 8002214:	60aa      	str	r2, [r5, #8]
 8002216:	60eb      	str	r3, [r5, #12]
 8002218:	cc03      	ldmia	r4!, {r0, r1}
 800221a:	6128      	str	r0, [r5, #16]
 800221c:	6169      	str	r1, [r5, #20]
 800221e:	8823      	ldrh	r3, [r4, #0]
 8002220:	78a2      	ldrb	r2, [r4, #2]
 8002222:	832b      	strh	r3, [r5, #24]
 8002224:	4613      	mov	r3, r2
 8002226:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002228:	4825      	ldr	r0, [pc, #148]	; (80022c0 <streamGet+0x230>)
 800222a:	f7fd fff1 	bl	8000210 <strlen>
 800222e:	4603      	mov	r3, r0
 8002230:	b29a      	uxth	r2, r3
 8002232:	230a      	movs	r3, #10
 8002234:	4922      	ldr	r1, [pc, #136]	; (80022c0 <streamGet+0x230>)
 8002236:	4824      	ldr	r0, [pc, #144]	; (80022c8 <streamGet+0x238>)
 8002238:	f003 f85d 	bl	80052f6 <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 800223c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800223e:	4927      	ldr	r1, [pc, #156]	; (80022dc <streamGet+0x24c>)
 8002240:	481f      	ldr	r0, [pc, #124]	; (80022c0 <streamGet+0x230>)
 8002242:	f003 ff81 	bl	8006148 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002246:	481e      	ldr	r0, [pc, #120]	; (80022c0 <streamGet+0x230>)
 8002248:	f7fd ffe2 	bl	8000210 <strlen>
 800224c:	4603      	mov	r3, r0
 800224e:	b29a      	uxth	r2, r3
 8002250:	230a      	movs	r3, #10
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <streamGet+0x230>)
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <streamGet+0x238>)
 8002256:	f003 f84e 	bl	80052f6 <HAL_UART_Transmit>
				gotflag = false;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002260:	e01b      	b.n	800229a <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <streamGet+0x230>)
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <streamGet+0x250>)
 8002266:	4615      	mov	r5, r2
 8002268:	461c      	mov	r4, r3
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	6028      	str	r0, [r5, #0]
 800226e:	6069      	str	r1, [r5, #4]
 8002270:	60aa      	str	r2, [r5, #8]
 8002272:	60eb      	str	r3, [r5, #12]
 8002274:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002276:	6128      	str	r0, [r5, #16]
 8002278:	6169      	str	r1, [r5, #20]
 800227a:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800227c:	4810      	ldr	r0, [pc, #64]	; (80022c0 <streamGet+0x230>)
 800227e:	f7fd ffc7 	bl	8000210 <strlen>
 8002282:	4603      	mov	r3, r0
 8002284:	b29a      	uxth	r2, r3
 8002286:	230a      	movs	r3, #10
 8002288:	490d      	ldr	r1, [pc, #52]	; (80022c0 <streamGet+0x230>)
 800228a:	480f      	ldr	r0, [pc, #60]	; (80022c8 <streamGet+0x238>)
 800228c:	f003 f833 	bl	80052f6 <HAL_UART_Transmit>
				gotflag = false;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e009      	b.n	80022ae <streamGet+0x21e>
	while(!changeMode){
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <streamGet+0x254>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f083 0301 	eor.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f47f aefc 	bne.w	80020a2 <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3740      	adds	r7, #64	; 0x40
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bdb0      	pop	{r4, r5, r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000a18 	.word	0x20000a18
 80022bc:	20000008 	.word	0x20000008
 80022c0:	2000260c 	.word	0x2000260c
 80022c4:	08006db0 	.word	0x08006db0
 80022c8:	200042c8 	.word	0x200042c8
 80022cc:	08006dcc 	.word	0x08006dcc
 80022d0:	08006de8 	.word	0x08006de8
 80022d4:	08006e0c 	.word	0x08006e0c
 80022d8:	08006e30 	.word	0x08006e30
 80022dc:	08006e4c 	.word	0x08006e4c
 80022e0:	08006e70 	.word	0x08006e70
 80022e4:	20000a01 	.word	0x20000a01

080022e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ec:	f000 fcb2 	bl	8002c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f0:	f000 f81e 	bl	8002330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f4:	f000 f9a0 	bl	8002638 <MX_GPIO_Init>
  MX_DMA_Init();
 80022f8:	f000 f97e 	bl	80025f8 <MX_DMA_Init>
  MX_DAC_Init();
 80022fc:	f000 f886 	bl	800240c <MX_DAC_Init>
  MX_TIM2_Init();
 8002300:	f000 f8ae 	bl	8002460 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002304:	f000 f8f8 	bl	80024f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002308:	f000 f944 	bl	8002594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <main+0x40>)
 800230e:	f002 fb80 	bl	8004a12 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002312:	4806      	ldr	r0, [pc, #24]	; (800232c <main+0x44>)
 8002314:	f002 fbcc 	bl	8004ab0 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8002318:	f000 fa6e 	bl	80027f8 <uart_gpio_init>

	initProgram(false);
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff fba5 	bl	8001a6c <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8002322:	f7fe f9b9 	bl	8000698 <tx_rx>
 8002326:	e7fc      	b.n	8002322 <main+0x3a>
 8002328:	20004288 	.word	0x20004288
 800232c:	200031d0 	.word	0x200031d0

08002330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b094      	sub	sp, #80	; 0x50
 8002334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	2234      	movs	r2, #52	; 0x34
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fef9 	bl	8006136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <SystemClock_Config+0xd4>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a29      	ldr	r2, [pc, #164]	; (8002404 <SystemClock_Config+0xd4>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <SystemClock_Config+0xd4>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002370:	2300      	movs	r3, #0
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <SystemClock_Config+0xd8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <SystemClock_Config+0xd8>)
 800237e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <SystemClock_Config+0xd8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002390:	2301      	movs	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002398:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239a:	2302      	movs	r3, #2
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023a4:	2304      	movs	r3, #4
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80023a8:	235a      	movs	r3, #90	; 0x5a
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023b4:	2302      	movs	r3, #2
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 f8a3 	bl	8004508 <HAL_RCC_OscConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80023c8:	f000 fa3e 	bl	8002848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023cc:	230f      	movs	r3, #15
 80023ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d0:	2302      	movs	r3, #2
 80023d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	2102      	movs	r1, #2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 fdd2 	bl	8003f94 <HAL_RCC_ClockConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80023f6:	f000 fa27 	bl	8002848 <Error_Handler>
  }
}
 80023fa:	bf00      	nop
 80023fc:	3750      	adds	r7, #80	; 0x50
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000

0800240c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002412:	463b      	mov	r3, r7
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <MX_DAC_Init+0x4c>)
 800241c:	4a0f      	ldr	r2, [pc, #60]	; (800245c <MX_DAC_Init+0x50>)
 800241e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <MX_DAC_Init+0x4c>)
 8002422:	f000 fdec 	bl	8002ffe <HAL_DAC_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800242c:	f000 fa0c 	bl	8002848 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002430:	2324      	movs	r3, #36	; 0x24
 8002432:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_DAC_Init+0x4c>)
 8002440:	f000 ff0d 	bl	800325e <HAL_DAC_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800244a:	f000 f9fd 	bl	8002848 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20004274 	.word	0x20004274
 800245c:	40007400 	.word	0x40007400

08002460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	463b      	mov	r3, r7
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <MX_TIM2_Init+0x94>)
 800247e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <MX_TIM2_Init+0x94>)
 8002486:	2208      	movs	r2, #8
 8002488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <MX_TIM2_Init+0x94>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002490:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <MX_TIM2_Init+0x94>)
 8002492:	2263      	movs	r2, #99	; 0x63
 8002494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <MX_TIM2_Init+0x94>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <MX_TIM2_Init+0x94>)
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a2:	4814      	ldr	r0, [pc, #80]	; (80024f4 <MX_TIM2_Init+0x94>)
 80024a4:	f002 fa8a 	bl	80049bc <HAL_TIM_Base_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80024ae:	f000 f9cb 	bl	8002848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4619      	mov	r1, r3
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <MX_TIM2_Init+0x94>)
 80024c0:	f002 fc22 	bl	8004d08 <HAL_TIM_ConfigClockSource>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80024ca:	f000 f9bd 	bl	8002848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024ce:	2320      	movs	r3, #32
 80024d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <MX_TIM2_Init+0x94>)
 80024dc:	f002 fe2e 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80024e6:	f000 f9af 	bl	8002848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20004288 	.word	0x20004288

080024f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250c:	463b      	mov	r3, r7
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <MX_TIM3_Init+0x94>)
 8002516:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <MX_TIM3_Init+0x98>)
 8002518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <MX_TIM3_Init+0x94>)
 800251c:	2259      	movs	r2, #89	; 0x59
 800251e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_TIM3_Init+0x94>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <MX_TIM3_Init+0x94>)
 8002528:	f240 3241 	movw	r2, #833	; 0x341
 800252c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_TIM3_Init+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_TIM3_Init+0x94>)
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800253a:	4814      	ldr	r0, [pc, #80]	; (800258c <MX_TIM3_Init+0x94>)
 800253c:	f002 fa3e 	bl	80049bc <HAL_TIM_Base_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002546:	f000 f97f 	bl	8002848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	4619      	mov	r1, r3
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <MX_TIM3_Init+0x94>)
 8002558:	f002 fbd6 	bl	8004d08 <HAL_TIM_ConfigClockSource>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002562:	f000 f971 	bl	8002848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800256e:	463b      	mov	r3, r7
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <MX_TIM3_Init+0x94>)
 8002574:	f002 fde2 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800257e:	f000 f963 	bl	8002848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200031d0 	.word	0x200031d0
 8002590:	40000400 	.word	0x40000400

08002594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <MX_USART2_UART_Init+0x60>)
 800259c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025ba:	220c      	movs	r2, #12
 80025bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <MX_USART2_UART_Init+0x5c>)
 80025cc:	f002 fe46 	bl	800525c <HAL_UART_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025d6:	f000 f937 	bl	8002848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2026      	movs	r0, #38	; 0x26
 80025e0:	f000 fcc9 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025e4:	2026      	movs	r0, #38	; 0x26
 80025e6:	f000 fce2 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200042c8 	.word	0x200042c8
 80025f4:	40004400 	.word	0x40004400

080025f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_DMA_Init+0x3c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <MX_DMA_Init+0x3c>)
 8002608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_DMA_Init+0x3c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2010      	movs	r0, #16
 8002620:	f000 fca9 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002624:	2010      	movs	r0, #16
 8002626:	f000 fcc2 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b45      	ldr	r3, [pc, #276]	; (8002768 <MX_GPIO_Init+0x130>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a44      	ldr	r2, [pc, #272]	; (8002768 <MX_GPIO_Init+0x130>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <MX_GPIO_Init+0x130>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <MX_GPIO_Init+0x130>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a3d      	ldr	r2, [pc, #244]	; (8002768 <MX_GPIO_Init+0x130>)
 8002674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <MX_GPIO_Init+0x130>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <MX_GPIO_Init+0x130>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a36      	ldr	r2, [pc, #216]	; (8002768 <MX_GPIO_Init+0x130>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b34      	ldr	r3, [pc, #208]	; (8002768 <MX_GPIO_Init+0x130>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <MX_GPIO_Init+0x130>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <MX_GPIO_Init+0x130>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <MX_GPIO_Init+0x130>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80026c4:	4829      	ldr	r0, [pc, #164]	; (800276c <MX_GPIO_Init+0x134>)
 80026c6:	f001 fc33 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2110      	movs	r1, #16
 80026ce:	4828      	ldr	r0, [pc, #160]	; (8002770 <MX_GPIO_Init+0x138>)
 80026d0:	f001 fc2e 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <MX_GPIO_Init+0x13c>)
 80026dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4821      	ldr	r0, [pc, #132]	; (8002770 <MX_GPIO_Init+0x138>)
 80026ea:	f001 fa8f 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <MX_GPIO_Init+0x140>)
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	481a      	ldr	r0, [pc, #104]	; (800276c <MX_GPIO_Init+0x134>)
 8002702:	f001 fa83 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8002706:	f44f 7348 	mov.w	r3, #800	; 0x320
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270c:	2301      	movs	r3, #1
 800270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4619      	mov	r1, r3
 800271e:	4813      	ldr	r0, [pc, #76]	; (800276c <MX_GPIO_Init+0x134>)
 8002720:	f001 fa74 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8002724:	2310      	movs	r3, #16
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	480d      	ldr	r0, [pc, #52]	; (8002770 <MX_GPIO_Init+0x138>)
 800273c:	f001 fa66 	bl	8003c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002740:	2200      	movs	r2, #0
 8002742:	2100      	movs	r1, #0
 8002744:	2006      	movs	r0, #6
 8002746:	f000 fc16 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800274a:	2006      	movs	r0, #6
 800274c:	f000 fc2f 	bl	8002fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2028      	movs	r0, #40	; 0x28
 8002756:	f000 fc0e 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800275a:	2028      	movs	r0, #40	; 0x28
 800275c:	f000 fc27 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 8002760:	bf00      	nop
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000
 8002770:	40020800 	.word	0x40020800
 8002774:	10210000 	.word	0x10210000
 8002778:	10110000 	.word	0x10110000

0800277c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d102      	bne.n	8002792 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 800278c:	f7ff fa1c 	bl	8001bc8 <Tim3IT>
	else
		__NOP();
}
 8002790:	e000      	b.n	8002794 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8002792:	bf00      	nop
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200031d0 	.word	0x200031d0

080027a0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 80027b0:	f7ff fa2a 	bl	8001c08 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	d103      	bne.n	80027c4 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_GPIO_EXTI_Callback+0x30>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 80027c2:	e000      	b.n	80027c6 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 80027c4:	bf00      	nop
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000a01 	.word	0x20000a01

080027d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_UART_RxCpltCallback+0x20>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 80027e6:	f7fe fd2f 	bl	8001248 <UART2_EXCEPTION_CALLBACK>
  }
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40004400 	.word	0x40004400

080027f8 <uart_gpio_init>:

void uart_gpio_init()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <uart_gpio_init+0x48>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <uart_gpio_init+0x48>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <uart_gpio_init+0x48>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800281a:	230c      	movs	r3, #12
 800281c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002822:	2301      	movs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800282a:	2307      	movs	r3, #7
 800282c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4804      	ldr	r0, [pc, #16]	; (8002844 <uart_gpio_init+0x4c>)
 8002834:	f001 f9ea 	bl	8003c0c <HAL_GPIO_Init>
}
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	40020000 	.word	0x40020000

08002848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_MspInit+0x4c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <HAL_MspInit+0x4c>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_MspInit+0x4c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_MspInit+0x4c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <HAL_MspInit+0x4c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_MspInit+0x4c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002896:	2007      	movs	r0, #7
 8002898:	f000 fb62 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <HAL_DAC_MspInit+0xdc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d158      	bne.n	800297c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_DAC_MspInit+0xe0>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <HAL_DAC_MspInit+0xe0>)
 80028d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_DAC_MspInit+0xe0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_DAC_MspInit+0xe0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a26      	ldr	r2, [pc, #152]	; (8002988 <HAL_DAC_MspInit+0xe0>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_DAC_MspInit+0xe0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002902:	2310      	movs	r3, #16
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002906:	2303      	movs	r3, #3
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	481d      	ldr	r0, [pc, #116]	; (800298c <HAL_DAC_MspInit+0xe4>)
 8002916:	f001 f979 	bl	8003c0c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_DAC_MspInit+0xec>)
 800291e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002922:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002926:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 800293e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002942:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800294a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 800294e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002952:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 800295c:	2200      	movs	r2, #0
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002960:	480b      	ldr	r0, [pc, #44]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002962:	f000 fd53 	bl	800340c <HAL_DMA_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 800296c:	f7ff ff6c 	bl	8002848 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a07      	ldr	r2, [pc, #28]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	4a06      	ldr	r2, [pc, #24]	; (8002990 <HAL_DAC_MspInit+0xe8>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800297c:	bf00      	nop
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40007400 	.word	0x40007400
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000
 8002990:	20003210 	.word	0x20003210
 8002994:	40026088 	.word	0x40026088

08002998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d10e      	bne.n	80029c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_TIM_Base_MspInit+0x70>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_TIM_Base_MspInit+0x70>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_TIM_Base_MspInit+0x70>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029c6:	e01a      	b.n	80029fe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_TIM_Base_MspInit+0x74>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d115      	bne.n	80029fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_TIM_Base_MspInit+0x70>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <HAL_TIM_Base_MspInit+0x70>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_TIM_Base_MspInit+0x70>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	201d      	movs	r0, #29
 80029f4:	f000 fabf 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029f8:	201d      	movs	r0, #29
 80029fa:	f000 fad8 	bl	8002fae <HAL_NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40000400 	.word	0x40000400

08002a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_UART_MspInit+0x94>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d133      	bne.n	8002a9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_UART_MspInit+0x98>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_UART_MspInit+0x98>)
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_UART_MspInit+0x98>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <HAL_UART_MspInit+0x98>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_UART_MspInit+0x98>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_UART_MspInit+0x98>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4809      	ldr	r0, [pc, #36]	; (8002aac <HAL_UART_MspInit+0x9c>)
 8002a86:	f001 f8c1 	bl	8003c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2026      	movs	r0, #38	; 0x26
 8002a90:	f000 fa71 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a94:	2026      	movs	r0, #38	; 0x26
 8002a96:	f000 fa8a 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40004400 	.word	0x40004400
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <HardFault_Handler+0x4>

08002ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <MemManage_Handler+0x4>

08002aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ace:	e7fe      	b.n	8002ace <BusFault_Handler+0x4>

08002ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <UsageFault_Handler+0x4>

08002ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b04:	f000 f8f8 	bl	8002cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f001 fa27 	bl	8003f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <DMA1_Stream5_IRQHandler+0x10>)
 8002b22:	f000 fe0b 	bl	800373c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20003210 	.word	0x20003210

08002b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <TIM3_IRQHandler+0x10>)
 8002b36:	f001 ffdf 	bl	8004af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200031d0 	.word	0x200031d0

08002b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <USART2_IRQHandler+0x10>)
 8002b4a:	f002 fcc3 	bl	80054d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200042c8 	.word	0x200042c8

08002b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b60:	f001 fa00 	bl	8003f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f003 fa98 	bl	80060cc <__errno>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20020000 	.word	0x20020000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	20000a0c 	.word	0x20000a0c
 8002bd0:	20005310 	.word	0x20005310

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <SystemInit+0x28>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <SystemInit+0x28>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <SystemInit+0x28>)
 8002bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bee:	609a      	str	r2, [r3, #8]
#endif
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c06:	e003      	b.n	8002c10 <LoopCopyDataInit>

08002c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c0e:	3104      	adds	r1, #4

08002c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c10:	480b      	ldr	r0, [pc, #44]	; (8002c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c18:	d3f6      	bcc.n	8002c08 <CopyDataInit>
  ldr  r2, =_sbss
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c1c:	e002      	b.n	8002c24 <LoopFillZerobss>

08002c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c20:	f842 3b04 	str.w	r3, [r2], #4

08002c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c28:	d3f9      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c2a:	f7ff ffd3 	bl	8002bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f003 fa53 	bl	80060d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c32:	f7ff fb59 	bl	80022e8 <main>
  bx  lr    
 8002c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c3c:	08006ef0 	.word	0x08006ef0
  ldr  r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c44:	200009e0 	.word	0x200009e0
  ldr  r2, =_sbss
 8002c48:	200009e0 	.word	0x200009e0
  ldr  r3, = _ebss
 8002c4c:	20005310 	.word	0x20005310

08002c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC_IRQHandler>
	...

08002c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_Init+0x40>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_Init+0x40>)
 8002c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_Init+0x40>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <HAL_Init+0x40>)
 8002c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_Init+0x40>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <HAL_Init+0x40>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c7c:	2003      	movs	r0, #3
 8002c7e:	f000 f96f 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f000 f808 	bl	8002c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c88:	f7ff fde6 	bl	8002858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00

08002c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_InitTick+0x54>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_InitTick+0x58>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f995 	bl	8002fe6 <HAL_SYSTICK_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00e      	b.n	8002ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d80a      	bhi.n	8002ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	f000 f94f 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd8:	4a06      	ldr	r2, [pc, #24]	; (8002cf4 <HAL_InitTick+0x5c>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000970 	.word	0x20000970
 8002cf0:	20000978 	.word	0x20000978
 8002cf4:	20000974 	.word	0x20000974

08002cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_IncTick+0x20>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_IncTick+0x24>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_IncTick+0x24>)
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000978 	.word	0x20000978
 8002d1c:	20005308 	.word	0x20005308

08002d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return uwTick;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_GetTick+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20005308 	.word	0x20005308

08002d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff ffee 	bl	8002d20 <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d005      	beq.n	8002d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_Delay+0x40>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d5e:	bf00      	nop
 8002d60:	f7ff ffde 	bl	8002d20 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d8f7      	bhi.n	8002d60 <HAL_Delay+0x28>
  {
  }
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000978 	.word	0x20000978

08002d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dae:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	60d3      	str	r3, [r2, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <__NVIC_GetPriorityGrouping+0x18>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	f003 0307 	and.w	r3, r3, #7
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	db0b      	blt.n	8002e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4907      	ldr	r1, [pc, #28]	; (8002e18 <__NVIC_EnableIRQ+0x38>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2001      	movs	r0, #1
 8002e02:	fa00 f202 	lsl.w	r2, r0, r2
 8002e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000e100 	.word	0xe000e100

08002e1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	db10      	blt.n	8002e50 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4909      	ldr	r1, [pc, #36]	; (8002e5c <__NVIC_DisableIRQ+0x40>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e42:	3320      	adds	r3, #32
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e4c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff07 	bl	8002d7c <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff1c 	bl	8002dc4 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff0f 	bl	8002de0 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff1f 	bl	8002e1c <__NVIC_DisableIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff94 	bl	8002f1c <SysTick_Config>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e014      	b.n	800303a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	791b      	ldrb	r3, [r3, #4]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff fc41 	bl	80028a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	795b      	ldrb	r3, [r3, #5]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_DAC_Start_DMA+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e08e      	b.n	8003180 <HAL_DAC_Start_DMA+0x13c>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2202      	movs	r2, #2
 800306c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12a      	bne.n	80030ca <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a43      	ldr	r2, [pc, #268]	; (8003188 <HAL_DAC_Start_DMA+0x144>)
 800307a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a42      	ldr	r2, [pc, #264]	; (800318c <HAL_DAC_Start_DMA+0x148>)
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_DAC_Start_DMA+0x14c>)
 800308a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800309a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d009      	beq.n	80030b6 <HAL_DAC_Start_DMA+0x72>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d00c      	beq.n	80030c0 <HAL_DAC_Start_DMA+0x7c>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d000      	beq.n	80030ac <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80030aa:	e039      	b.n	8003120 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	617b      	str	r3, [r7, #20]
        break;
 80030b4:	e034      	b.n	8003120 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	617b      	str	r3, [r7, #20]
        break;
 80030be:	e02f      	b.n	8003120 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3310      	adds	r3, #16
 80030c6:	617b      	str	r3, [r7, #20]
        break;
 80030c8:	e02a      	b.n	8003120 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a31      	ldr	r2, [pc, #196]	; (8003194 <HAL_DAC_Start_DMA+0x150>)
 80030d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a30      	ldr	r2, [pc, #192]	; (8003198 <HAL_DAC_Start_DMA+0x154>)
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <HAL_DAC_Start_DMA+0x158>)
 80030e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d009      	beq.n	800310c <HAL_DAC_Start_DMA+0xc8>
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d00c      	beq.n	8003116 <HAL_DAC_Start_DMA+0xd2>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d000      	beq.n	8003102 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003100:	e00e      	b.n	8003120 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	617b      	str	r3, [r7, #20]
        break;
 800310a:	e009      	b.n	8003120 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3318      	adds	r3, #24
 8003112:	617b      	str	r3, [r7, #20]
        break;
 8003114:	e004      	b.n	8003120 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	331c      	adds	r3, #28
 800311c:	617b      	str	r3, [r7, #20]
        break;
 800311e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003134:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6898      	ldr	r0, [r3, #8]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	f000 fa12 	bl	8003568 <HAL_DMA_Start_IT>
 8003144:	e00e      	b.n	8003164 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003154:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	68d8      	ldr	r0, [r3, #12]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	f000 fa02 	bl	8003568 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	2201      	movs	r2, #1
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	080032f9 	.word	0x080032f9
 800318c:	0800331b 	.word	0x0800331b
 8003190:	08003337 	.word	0x08003337
 8003194:	080033a1 	.word	0x080033a1
 8003198:	080033c3 	.word	0x080033c3
 800319c:	080033df 	.word	0x080033df

080031a0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	400a      	ands	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa14 	bl	8003618 <HAL_DMA_Abort>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e006      	b.n	8003204 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fa0c 	bl	8003618 <HAL_DMA_Abort>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2204      	movs	r2, #4
 800320e:	711a      	strb	r2, [r3, #4]
 8003210:	e002      	b.n	8003218 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	795b      	ldrb	r3, [r3, #5]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_DAC_ConfigChannel+0x20>
 800327a:	2302      	movs	r3, #2
 800327c:	e036      	b.n	80032ec <HAL_DAC_ConfigChannel+0x8e>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2202      	movs	r2, #2
 8003288:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003292:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	22c0      	movs	r2, #192	; 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43da      	mvns	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	400a      	ands	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff ff8b 	bl	8003222 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	711a      	strb	r2, [r3, #4]
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff ff84 	bl	8003236 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f043 0204 	orr.w	r2, r3, #4
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff ff7a 	bl	800324a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	711a      	strb	r2, [r3, #4]
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff ffd8 	bl	8003364 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	711a      	strb	r2, [r3, #4]
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff ffd1 	bl	8003378 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f043 0204 	orr.w	r2, r3, #4
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff ffc7 	bl	800338c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	711a      	strb	r2, [r3, #4]
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff fc82 	bl	8002d20 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e099      	b.n	800355c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003448:	e00f      	b.n	800346a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800344a:	f7ff fc69 	bl	8002d20 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b05      	cmp	r3, #5
 8003456:	d908      	bls.n	800346a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e078      	b.n	800355c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e8      	bne.n	800344a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_DMA_Init+0x158>)
 8003484:	4013      	ands	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0307 	bic.w	r3, r3, #7
 80034ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d117      	bne.n	800352e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fb01 	bl	8003b18 <DMA_CheckFifoParam>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800352a:	2301      	movs	r3, #1
 800352c:	e016      	b.n	800355c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fab8 	bl	8003aac <DMA_CalcBaseAndBitshift>
 800353c:	4603      	mov	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	f010803f 	.word	0xf010803f

08003568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_DMA_Start_IT+0x26>
 800358a:	2302      	movs	r3, #2
 800358c:	e040      	b.n	8003610 <HAL_DMA_Start_IT+0xa8>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d12f      	bne.n	8003602 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa4a 	bl	8003a50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	223f      	movs	r2, #63	; 0x3f
 80035c2:	409a      	lsls	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0216 	orr.w	r2, r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0208 	orr.w	r2, r2, #8
 80035ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e005      	b.n	800360e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003626:	f7ff fb7b 	bl	8002d20 <HAL_GetTick>
 800362a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d008      	beq.n	800364a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e052      	b.n	80036f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0216 	bic.w	r2, r2, #22
 8003658:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003668:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_DMA_Abort+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0208 	bic.w	r2, r2, #8
 8003688:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369a:	e013      	b.n	80036c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800369c:	f7ff fb40 	bl	8002d20 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d90c      	bls.n	80036c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e015      	b.n	80036f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e4      	bne.n	800369c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	223f      	movs	r2, #63	; 0x3f
 80036d8:	409a      	lsls	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d004      	beq.n	8003716 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e00c      	b.n	8003730 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2205      	movs	r2, #5
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003748:	4b92      	ldr	r3, [pc, #584]	; (8003994 <HAL_DMA_IRQHandler+0x258>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a92      	ldr	r2, [pc, #584]	; (8003998 <HAL_DMA_IRQHandler+0x25c>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0a9b      	lsrs	r3, r3, #10
 8003754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	2208      	movs	r2, #8
 8003768:	409a      	lsls	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01a      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0204 	bic.w	r2, r2, #4
 800378e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	2208      	movs	r2, #8
 8003796:	409a      	lsls	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	2201      	movs	r2, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	2201      	movs	r2, #1
 80037cc:	409a      	lsls	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f043 0202 	orr.w	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	2204      	movs	r2, #4
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d012      	beq.n	8003814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	2204      	movs	r2, #4
 8003802:	409a      	lsls	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	2210      	movs	r2, #16
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d043      	beq.n	80038ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d03c      	beq.n	80038ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	2210      	movs	r2, #16
 8003838:	409a      	lsls	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d018      	beq.n	800387e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d108      	bne.n	800386c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d024      	beq.n	80038ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
 800386a:	e01f      	b.n	80038ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
 800387c:	e016      	b.n	80038ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0208 	bic.w	r2, r2, #8
 800389a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	2220      	movs	r2, #32
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 808e 	beq.w	80039da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8086 	beq.w	80039da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	2220      	movs	r2, #32
 80038d4:	409a      	lsls	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b05      	cmp	r3, #5
 80038e4:	d136      	bne.n	8003954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0216 	bic.w	r2, r2, #22
 80038f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <HAL_DMA_IRQHandler+0x1da>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0208 	bic.w	r2, r2, #8
 8003924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	223f      	movs	r2, #63	; 0x3f
 800392c:	409a      	lsls	r2, r3
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003946:	2b00      	cmp	r3, #0
 8003948:	d07d      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
        }
        return;
 8003952:	e078      	b.n	8003a46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01c      	beq.n	800399c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	2b00      	cmp	r3, #0
 8003976:	d030      	beq.n	80039da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
 8003980:	e02b      	b.n	80039da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d027      	beq.n	80039da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
 8003992:	e022      	b.n	80039da <HAL_DMA_IRQHandler+0x29e>
 8003994:	20000970 	.word	0x20000970
 8003998:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0210 	bic.w	r2, r2, #16
 80039b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d032      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d022      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2205      	movs	r2, #5
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d307      	bcc.n	8003a22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f2      	bne.n	8003a06 <HAL_DMA_IRQHandler+0x2ca>
 8003a20:	e000      	b.n	8003a24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
 8003a44:	e000      	b.n	8003a48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a46:	bf00      	nop
    }
  }
}
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop

08003a50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d108      	bne.n	8003a90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a8e:	e007      	b.n	8003aa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	3b10      	subs	r3, #16
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <DMA_CalcBaseAndBitshift+0x64>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <DMA_CalcBaseAndBitshift+0x68>)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d909      	bls.n	8003aee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	1d1a      	adds	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	659a      	str	r2, [r3, #88]	; 0x58
 8003aec:	e007      	b.n	8003afe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	aaaaaaab 	.word	0xaaaaaaab
 8003b14:	08006ea4 	.word	0x08006ea4

08003b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11f      	bne.n	8003b72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d855      	bhi.n	8003be4 <DMA_CheckFifoParam+0xcc>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <DMA_CheckFifoParam+0x28>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b51 	.word	0x08003b51
 8003b44:	08003b63 	.word	0x08003b63
 8003b48:	08003b51 	.word	0x08003b51
 8003b4c:	08003be5 	.word	0x08003be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d045      	beq.n	8003be8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b60:	e042      	b.n	8003be8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b6a:	d13f      	bne.n	8003bec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b70:	e03c      	b.n	8003bec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	d121      	bne.n	8003bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d836      	bhi.n	8003bf0 <DMA_CheckFifoParam+0xd8>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <DMA_CheckFifoParam+0x70>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003b9f 	.word	0x08003b9f
 8003b90:	08003b99 	.word	0x08003b99
 8003b94:	08003bb1 	.word	0x08003bb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9c:	e02f      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d024      	beq.n	8003bf4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bae:	e021      	b.n	8003bf4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb8:	d11e      	bne.n	8003bf8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bbe:	e01b      	b.n	8003bf8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d902      	bls.n	8003bcc <DMA_CheckFifoParam+0xb4>
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d003      	beq.n	8003bd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bca:	e018      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e015      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      break;
 8003be2:	e00b      	b.n	8003bfc <DMA_CheckFifoParam+0xe4>
      break;
 8003be4:	bf00      	nop
 8003be6:	e00a      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      break;
 8003be8:	bf00      	nop
 8003bea:	e008      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      break;
 8003bec:	bf00      	nop
 8003bee:	e006      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e004      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      break;
 8003bf4:	bf00      	nop
 8003bf6:	e002      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      break;   
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <DMA_CheckFifoParam+0xe6>
      break;
 8003bfc:	bf00      	nop
    }
  } 
  
  return status; 
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	e165      	b.n	8003ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 8154 	bne.w	8003eee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d00b      	beq.n	8003c66 <HAL_GPIO_Init+0x5a>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d007      	beq.n	8003c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c5a:	2b11      	cmp	r3, #17
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b12      	cmp	r3, #18
 8003c64:	d130      	bne.n	8003cc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	2203      	movs	r2, #3
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 0201 	and.w	r2, r3, #1
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0xfc>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b12      	cmp	r3, #18
 8003d06:	d123      	bne.n	8003d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	220f      	movs	r2, #15
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0203 	and.w	r2, r3, #3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80ae 	beq.w	8003eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b5c      	ldr	r3, [pc, #368]	; (8003f08 <HAL_GPIO_Init+0x2fc>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	4a5b      	ldr	r2, [pc, #364]	; (8003f08 <HAL_GPIO_Init+0x2fc>)
 8003d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da0:	6453      	str	r3, [r2, #68]	; 0x44
 8003da2:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_GPIO_Init+0x2fc>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dae:	4a57      	ldr	r2, [pc, #348]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4e      	ldr	r2, [pc, #312]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d025      	beq.n	8003e26 <HAL_GPIO_Init+0x21a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4d      	ldr	r2, [pc, #308]	; (8003f14 <HAL_GPIO_Init+0x308>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01f      	beq.n	8003e22 <HAL_GPIO_Init+0x216>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4c      	ldr	r2, [pc, #304]	; (8003f18 <HAL_GPIO_Init+0x30c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_Init+0x212>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4b      	ldr	r2, [pc, #300]	; (8003f1c <HAL_GPIO_Init+0x310>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_Init+0x20e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4a      	ldr	r2, [pc, #296]	; (8003f20 <HAL_GPIO_Init+0x314>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x20a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a49      	ldr	r2, [pc, #292]	; (8003f24 <HAL_GPIO_Init+0x318>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x206>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <HAL_GPIO_Init+0x31c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x202>
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	e00c      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e0e:	2307      	movs	r3, #7
 8003e10:	e00a      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e12:	2305      	movs	r3, #5
 8003e14:	e008      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e006      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e004      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e26:	2300      	movs	r3, #0
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	f002 0203 	and.w	r2, r2, #3
 8003e2e:	0092      	lsls	r2, r2, #2
 8003e30:	4093      	lsls	r3, r2
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e38:	4934      	ldr	r1, [pc, #208]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e6a:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e70:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e94:	4a25      	ldr	r2, [pc, #148]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ec4:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ee8:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b0f      	cmp	r3, #15
 8003ef8:	f67f ae96 	bls.w	8003c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003efc:	bf00      	nop
 8003efe:	3724      	adds	r7, #36	; 0x24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40020400 	.word	0x40020400
 8003f18:	40020800 	.word	0x40020800
 8003f1c:	40020c00 	.word	0x40020c00
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40021400 	.word	0x40021400
 8003f28:	40021800 	.word	0x40021800
 8003f2c:	40013c00 	.word	0x40013c00

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f4c:	e003      	b.n	8003f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	619a      	str	r2, [r3, #24]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d006      	beq.n	8003f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fc0c 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40013c00 	.word	0x40013c00

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0cc      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90c      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d044      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d119      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d003      	beq.n	8004052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404e:	2b03      	cmp	r3, #3
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e067      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4934      	ldr	r1, [pc, #208]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004084:	f7fe fe4c 	bl	8002d20 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408c:	f7fe fe48 	bl	8002d20 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e04f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 020c 	and.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1eb      	bne.n	800408c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d20c      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f855 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 800411e:	4601      	mov	r1, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	5cd3      	ldrb	r3, [r2, r3]
 800412e:	fa21 f303 	lsr.w	r3, r1, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fdac 	bl	8002c98 <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	08006e8c 	.word	0x08006e8c
 8004158:	20000970 	.word	0x20000970
 800415c:	20000974 	.word	0x20000974

08004160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <HAL_RCC_GetHCLKFreq+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000970 	.word	0x20000970

08004178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800417c:	f7ff fff0 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 8004180:	4601      	mov	r1, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0a9b      	lsrs	r3, r3, #10
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4a03      	ldr	r2, [pc, #12]	; (800419c <HAL_RCC_GetPCLK1Freq+0x24>)
 800418e:	5cd3      	ldrb	r3, [r2, r3]
 8004190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	08006e9c 	.word	0x08006e9c

080041a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a4:	f7ff ffdc 	bl	8004160 <HAL_RCC_GetHCLKFreq>
 80041a8:	4601      	mov	r1, r0
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	0b5b      	lsrs	r3, r3, #13
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4a03      	ldr	r2, [pc, #12]	; (80041c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b6:	5cd3      	ldrb	r3, [r2, r3]
 80041b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40023800 	.word	0x40023800
 80041c4:	08006e9c 	.word	0x08006e9c

080041c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e2:	4bc6      	ldr	r3, [pc, #792]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	f200 817e 	bhi.w	80044ec <HAL_RCC_GetSysClockFreq+0x324>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <HAL_RCC_GetSysClockFreq+0x30>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	0800422d 	.word	0x0800422d
 80041fc:	080044ed 	.word	0x080044ed
 8004200:	080044ed 	.word	0x080044ed
 8004204:	080044ed 	.word	0x080044ed
 8004208:	08004233 	.word	0x08004233
 800420c:	080044ed 	.word	0x080044ed
 8004210:	080044ed 	.word	0x080044ed
 8004214:	080044ed 	.word	0x080044ed
 8004218:	08004239 	.word	0x08004239
 800421c:	080044ed 	.word	0x080044ed
 8004220:	080044ed 	.word	0x080044ed
 8004224:	080044ed 	.word	0x080044ed
 8004228:	08004395 	.word	0x08004395
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4bb4      	ldr	r3, [pc, #720]	; (8004500 <HAL_RCC_GetSysClockFreq+0x338>)
 800422e:	613b      	str	r3, [r7, #16]
       break;
 8004230:	e15f      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004232:	4bb4      	ldr	r3, [pc, #720]	; (8004504 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004234:	613b      	str	r3, [r7, #16]
      break;
 8004236:	e15c      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4bb0      	ldr	r3, [pc, #704]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004242:	4bae      	ldr	r3, [pc, #696]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d04a      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	4bab      	ldr	r3, [pc, #684]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	f04f 0400 	mov.w	r4, #0
 8004258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	ea03 0501 	and.w	r5, r3, r1
 8004264:	ea04 0602 	and.w	r6, r4, r2
 8004268:	4629      	mov	r1, r5
 800426a:	4632      	mov	r2, r6
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	0154      	lsls	r4, r2, #5
 8004276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800427a:	014b      	lsls	r3, r1, #5
 800427c:	4619      	mov	r1, r3
 800427e:	4622      	mov	r2, r4
 8004280:	1b49      	subs	r1, r1, r5
 8004282:	eb62 0206 	sbc.w	r2, r2, r6
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	f04f 0400 	mov.w	r4, #0
 800428e:	0194      	lsls	r4, r2, #6
 8004290:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004294:	018b      	lsls	r3, r1, #6
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	eb64 0402 	sbc.w	r4, r4, r2
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	00e2      	lsls	r2, r4, #3
 80042a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042aa:	00d9      	lsls	r1, r3, #3
 80042ac:	460b      	mov	r3, r1
 80042ae:	4614      	mov	r4, r2
 80042b0:	195b      	adds	r3, r3, r5
 80042b2:	eb44 0406 	adc.w	r4, r4, r6
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	0262      	lsls	r2, r4, #9
 80042c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042c4:	0259      	lsls	r1, r3, #9
 80042c6:	460b      	mov	r3, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	4621      	mov	r1, r4
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	f7fb fff2 	bl	80002c0 <__aeabi_uldivmod>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e049      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e4:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	099b      	lsrs	r3, r3, #6
 80042ea:	f04f 0400 	mov.w	r4, #0
 80042ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	ea03 0501 	and.w	r5, r3, r1
 80042fa:	ea04 0602 	and.w	r6, r4, r2
 80042fe:	4629      	mov	r1, r5
 8004300:	4632      	mov	r2, r6
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	0154      	lsls	r4, r2, #5
 800430c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004310:	014b      	lsls	r3, r1, #5
 8004312:	4619      	mov	r1, r3
 8004314:	4622      	mov	r2, r4
 8004316:	1b49      	subs	r1, r1, r5
 8004318:	eb62 0206 	sbc.w	r2, r2, r6
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	f04f 0400 	mov.w	r4, #0
 8004324:	0194      	lsls	r4, r2, #6
 8004326:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	1a5b      	subs	r3, r3, r1
 800432e:	eb64 0402 	sbc.w	r4, r4, r2
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	00e2      	lsls	r2, r4, #3
 800433c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004340:	00d9      	lsls	r1, r3, #3
 8004342:	460b      	mov	r3, r1
 8004344:	4614      	mov	r4, r2
 8004346:	195b      	adds	r3, r3, r5
 8004348:	eb44 0406 	adc.w	r4, r4, r6
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	02a2      	lsls	r2, r4, #10
 8004356:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800435a:	0299      	lsls	r1, r3, #10
 800435c:	460b      	mov	r3, r1
 800435e:	4614      	mov	r4, r2
 8004360:	4618      	mov	r0, r3
 8004362:	4621      	mov	r1, r4
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f04f 0400 	mov.w	r4, #0
 800436a:	461a      	mov	r2, r3
 800436c:	4623      	mov	r3, r4
 800436e:	f7fb ffa7 	bl	80002c0 <__aeabi_uldivmod>
 8004372:	4603      	mov	r3, r0
 8004374:	460c      	mov	r4, r1
 8004376:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004378:	4b60      	ldr	r3, [pc, #384]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	613b      	str	r3, [r7, #16]
      break;
 8004392:	e0ae      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439e:	4b57      	ldr	r3, [pc, #348]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04a      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043aa:	4b54      	ldr	r3, [pc, #336]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	099b      	lsrs	r3, r3, #6
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	ea03 0501 	and.w	r5, r3, r1
 80043c0:	ea04 0602 	and.w	r6, r4, r2
 80043c4:	4629      	mov	r1, r5
 80043c6:	4632      	mov	r2, r6
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	f04f 0400 	mov.w	r4, #0
 80043d0:	0154      	lsls	r4, r2, #5
 80043d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043d6:	014b      	lsls	r3, r1, #5
 80043d8:	4619      	mov	r1, r3
 80043da:	4622      	mov	r2, r4
 80043dc:	1b49      	subs	r1, r1, r5
 80043de:	eb62 0206 	sbc.w	r2, r2, r6
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	f04f 0400 	mov.w	r4, #0
 80043ea:	0194      	lsls	r4, r2, #6
 80043ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043f0:	018b      	lsls	r3, r1, #6
 80043f2:	1a5b      	subs	r3, r3, r1
 80043f4:	eb64 0402 	sbc.w	r4, r4, r2
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	00e2      	lsls	r2, r4, #3
 8004402:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004406:	00d9      	lsls	r1, r3, #3
 8004408:	460b      	mov	r3, r1
 800440a:	4614      	mov	r4, r2
 800440c:	195b      	adds	r3, r3, r5
 800440e:	eb44 0406 	adc.w	r4, r4, r6
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	0262      	lsls	r2, r4, #9
 800441c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004420:	0259      	lsls	r1, r3, #9
 8004422:	460b      	mov	r3, r1
 8004424:	4614      	mov	r4, r2
 8004426:	4618      	mov	r0, r3
 8004428:	4621      	mov	r1, r4
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f04f 0400 	mov.w	r4, #0
 8004430:	461a      	mov	r2, r3
 8004432:	4623      	mov	r3, r4
 8004434:	f7fb ff44 	bl	80002c0 <__aeabi_uldivmod>
 8004438:	4603      	mov	r3, r0
 800443a:	460c      	mov	r4, r1
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e049      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004440:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	f04f 0400 	mov.w	r4, #0
 800444a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	ea03 0501 	and.w	r5, r3, r1
 8004456:	ea04 0602 	and.w	r6, r4, r2
 800445a:	4629      	mov	r1, r5
 800445c:	4632      	mov	r2, r6
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	f04f 0400 	mov.w	r4, #0
 8004466:	0154      	lsls	r4, r2, #5
 8004468:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800446c:	014b      	lsls	r3, r1, #5
 800446e:	4619      	mov	r1, r3
 8004470:	4622      	mov	r2, r4
 8004472:	1b49      	subs	r1, r1, r5
 8004474:	eb62 0206 	sbc.w	r2, r2, r6
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	f04f 0400 	mov.w	r4, #0
 8004480:	0194      	lsls	r4, r2, #6
 8004482:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004486:	018b      	lsls	r3, r1, #6
 8004488:	1a5b      	subs	r3, r3, r1
 800448a:	eb64 0402 	sbc.w	r4, r4, r2
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	00e2      	lsls	r2, r4, #3
 8004498:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800449c:	00d9      	lsls	r1, r3, #3
 800449e:	460b      	mov	r3, r1
 80044a0:	4614      	mov	r4, r2
 80044a2:	195b      	adds	r3, r3, r5
 80044a4:	eb44 0406 	adc.w	r4, r4, r6
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	02a2      	lsls	r2, r4, #10
 80044b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044b6:	0299      	lsls	r1, r3, #10
 80044b8:	460b      	mov	r3, r1
 80044ba:	4614      	mov	r4, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	4621      	mov	r1, r4
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f04f 0400 	mov.w	r4, #0
 80044c6:	461a      	mov	r2, r3
 80044c8:	4623      	mov	r3, r4
 80044ca:	f7fb fef9 	bl	80002c0 <__aeabi_uldivmod>
 80044ce:	4603      	mov	r3, r0
 80044d0:	460c      	mov	r4, r1
 80044d2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_GetSysClockFreq+0x334>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	0f1b      	lsrs	r3, r3, #28
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	613b      	str	r3, [r7, #16]
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <HAL_RCC_GetSysClockFreq+0x338>)
 80044ee:	613b      	str	r3, [r7, #16]
      break;
 80044f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f2:	693b      	ldr	r3, [r7, #16]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	00f42400 	.word	0x00f42400
 8004504:	007a1200 	.word	0x007a1200

08004508 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8083 	beq.w	8004628 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004522:	4b95      	ldr	r3, [pc, #596]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d019      	beq.n	8004562 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800452e:	4b92      	ldr	r3, [pc, #584]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004536:	2b08      	cmp	r3, #8
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800453a:	4b8f      	ldr	r3, [pc, #572]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004546:	d00c      	beq.n	8004562 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004548:	4b8b      	ldr	r3, [pc, #556]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d112      	bne.n	800457a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004554:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004560:	d10b      	bne.n	800457a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004562:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d05b      	beq.n	8004626 <HAL_RCC_OscConfig+0x11e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d157      	bne.n	8004626 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e216      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x8a>
 8004584:	4b7c      	ldr	r3, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a7b      	ldr	r2, [pc, #492]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	e01d      	b.n	80045ce <HAL_RCC_OscConfig+0xc6>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800459a:	d10c      	bne.n	80045b6 <HAL_RCC_OscConfig+0xae>
 800459c:	4b76      	ldr	r3, [pc, #472]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a75      	ldr	r2, [pc, #468]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b73      	ldr	r3, [pc, #460]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a72      	ldr	r2, [pc, #456]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e00b      	b.n	80045ce <HAL_RCC_OscConfig+0xc6>
 80045b6:	4b70      	ldr	r3, [pc, #448]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6f      	ldr	r2, [pc, #444]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6c      	ldr	r2, [pc, #432]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d013      	beq.n	80045fe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fe fba3 	bl	8002d20 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045de:	f7fe fb9f 	bl	8002d20 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e1db      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0xd6>
 80045fc:	e014      	b.n	8004628 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fe fb8f 	bl	8002d20 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004606:	f7fe fb8b 	bl	8002d20 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b64      	cmp	r3, #100	; 0x64
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e1c7      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004618:	4b57      	ldr	r3, [pc, #348]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f0      	bne.n	8004606 <HAL_RCC_OscConfig+0xfe>
 8004624:	e000      	b.n	8004628 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004626:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d06f      	beq.n	8004714 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004634:	4b50      	ldr	r3, [pc, #320]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004640:	4b4d      	ldr	r3, [pc, #308]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004648:	2b08      	cmp	r3, #8
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800464c:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00b      	beq.n	8004670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004658:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d11c      	bne.n	800469e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004664:	4b44      	ldr	r3, [pc, #272]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d116      	bne.n	800469e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004670:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_OscConfig+0x180>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e18f      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4938      	ldr	r1, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469c:	e03a      	b.n	8004714 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a6:	4b35      	ldr	r3, [pc, #212]	; (800477c <HAL_RCC_OscConfig+0x274>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fe fb38 	bl	8002d20 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b4:	f7fe fb34 	bl	8002d20 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e170      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c6:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4925      	ldr	r1, [pc, #148]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
 80046e6:	e015      	b.n	8004714 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e8:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCC_OscConfig+0x274>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fe fb17 	bl	8002d20 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fe fb13 	bl	8002d20 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e14f      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d037      	beq.n	8004790 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d016      	beq.n	8004756 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <HAL_RCC_OscConfig+0x278>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe faf7 	bl	8002d20 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004736:	f7fe faf3 	bl	8002d20 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e12f      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_OscConfig+0x270>)
 800474a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x22e>
 8004754:	e01c      	b.n	8004790 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_RCC_OscConfig+0x278>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe fae0 	bl	8002d20 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004762:	e00f      	b.n	8004784 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004764:	f7fe fadc 	bl	8002d20 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d908      	bls.n	8004784 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e118      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	42470000 	.word	0x42470000
 8004780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e9      	bne.n	8004764 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8097 	beq.w	80048cc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a2:	4b83      	ldr	r3, [pc, #524]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	4b7f      	ldr	r3, [pc, #508]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a7e      	ldr	r2, [pc, #504]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b7c      	ldr	r3, [pc, #496]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	4b79      	ldr	r3, [pc, #484]	; (80049b4 <HAL_RCC_OscConfig+0x4ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d118      	bne.n	800480c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047da:	4b76      	ldr	r3, [pc, #472]	; (80049b4 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a75      	ldr	r2, [pc, #468]	; (80049b4 <HAL_RCC_OscConfig+0x4ac>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e6:	f7fe fa9b 	bl	8002d20 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ee:	f7fe fa97 	bl	8002d20 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0d3      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	4b6c      	ldr	r3, [pc, #432]	; (80049b4 <HAL_RCC_OscConfig+0x4ac>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x31a>
 8004814:	4b66      	ldr	r3, [pc, #408]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	4a65      	ldr	r2, [pc, #404]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6713      	str	r3, [r2, #112]	; 0x70
 8004820:	e01c      	b.n	800485c <HAL_RCC_OscConfig+0x354>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0x33c>
 800482a:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a60      	ldr	r2, [pc, #384]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	4b5e      	ldr	r3, [pc, #376]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a5d      	ldr	r2, [pc, #372]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	e00b      	b.n	800485c <HAL_RCC_OscConfig+0x354>
 8004844:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4a59      	ldr	r2, [pc, #356]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	6713      	str	r3, [r2, #112]	; 0x70
 8004850:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a56      	ldr	r2, [pc, #344]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004856:	f023 0304 	bic.w	r3, r3, #4
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d015      	beq.n	8004890 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fe fa5c 	bl	8002d20 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fe fa58 	bl	8002d20 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e092      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ee      	beq.n	800486c <HAL_RCC_OscConfig+0x364>
 800488e:	e014      	b.n	80048ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe fa46 	bl	8002d20 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fe fa42 	bl	8002d20 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e07c      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ae:	4b40      	ldr	r3, [pc, #256]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ee      	bne.n	8004898 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80048c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d068      	beq.n	80049a6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048d4:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d060      	beq.n	80049a2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d145      	bne.n	8004974 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e8:	4b33      	ldr	r3, [pc, #204]	; (80049b8 <HAL_RCC_OscConfig+0x4b0>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fe fa17 	bl	8002d20 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fe fa13 	bl	8002d20 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e04f      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004908:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	019b      	lsls	r3, r3, #6
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	3b01      	subs	r3, #1
 800492e:	041b      	lsls	r3, r3, #16
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	061b      	lsls	r3, r3, #24
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	071b      	lsls	r3, r3, #28
 8004940:	491b      	ldr	r1, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <HAL_RCC_OscConfig+0x4b0>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe f9e8 	bl	8002d20 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004954:	f7fe f9e4 	bl	8002d20 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e020      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x44c>
 8004972:	e018      	b.n	80049a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <HAL_RCC_OscConfig+0x4b0>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fe f9d1 	bl	8002d20 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004982:	f7fe f9cd 	bl	8002d20 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e009      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_OscConfig+0x4a8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x47a>
 80049a0:	e001      	b.n	80049a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40007000 	.word	0x40007000
 80049b8:	42470060 	.word	0x42470060

080049bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e01d      	b.n	8004a0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd ffd8 	bl	8002998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 fa64 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <HAL_TIM_Base_Stop+0x40>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	f240 4344 	movw	r3, #1092	; 0x444
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <HAL_TIM_Base_Stop+0x40>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d007      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d122      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0202 	mvn.w	r2, #2
 8004b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9a5 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f997 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9a8 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0204 	mvn.w	r2, #4
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f97b 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f96d 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f97e 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d122      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d11b      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0208 	mvn.w	r2, #8
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f951 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f943 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f954 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d122      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d11b      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0210 	mvn.w	r2, #16
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2208      	movs	r2, #8
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f927 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f919 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f92a 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0201 	mvn.w	r2, #1
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd fd80 	bl	800277c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fad0 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8ef 	bl	8004eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0220 	mvn.w	r2, #32
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa9a 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_ConfigClockSource+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0a6      	b.n	8004e6e <HAL_TIM_ConfigClockSource+0x166>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d067      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0x120>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d80b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x6c>
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d073      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x140>
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d802      	bhi.n	8004d6a <HAL_TIM_ConfigClockSource+0x62>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d06f      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004d68:	e078      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d06c      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x140>
 8004d6e:	2b30      	cmp	r3, #48	; 0x30
 8004d70:	d06a      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004d72:	e073      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d74:	2b70      	cmp	r3, #112	; 0x70
 8004d76:	d00d      	beq.n	8004d94 <HAL_TIM_ConfigClockSource+0x8c>
 8004d78:	2b70      	cmp	r3, #112	; 0x70
 8004d7a:	d804      	bhi.n	8004d86 <HAL_TIM_ConfigClockSource+0x7e>
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d033      	beq.n	8004de8 <HAL_TIM_ConfigClockSource+0xe0>
 8004d80:	2b60      	cmp	r3, #96	; 0x60
 8004d82:	d041      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004d84:	e06a      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d066      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x152>
 8004d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d90:	d017      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004d92:	e063      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6899      	ldr	r1, [r3, #8]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f000 f9aa 	bl	80050fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004db6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]
      break;
 8004dc0:	e04c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6899      	ldr	r1, [r3, #8]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f000 f993 	bl	80050fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de4:	609a      	str	r2, [r3, #8]
      break;
 8004de6:	e039      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	461a      	mov	r2, r3
 8004df6:	f000 f907 	bl	8005008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2150      	movs	r1, #80	; 0x50
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f960 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e06:	e029      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	461a      	mov	r2, r3
 8004e16:	f000 f926 	bl	8005066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2160      	movs	r1, #96	; 0x60
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f950 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e26:	e019      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	461a      	mov	r2, r3
 8004e36:	f000 f8e7 	bl	8005008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2140      	movs	r1, #64	; 0x40
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f940 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e46:	e009      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f000 f937 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e58:	e000      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a40      	ldr	r2, [pc, #256]	; (8004fdc <TIM_Base_SetConfig+0x114>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d00f      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a3d      	ldr	r2, [pc, #244]	; (8004fe0 <TIM_Base_SetConfig+0x118>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3c      	ldr	r2, [pc, #240]	; (8004fe4 <TIM_Base_SetConfig+0x11c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a3b      	ldr	r2, [pc, #236]	; (8004fe8 <TIM_Base_SetConfig+0x120>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3a      	ldr	r2, [pc, #232]	; (8004fec <TIM_Base_SetConfig+0x124>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d108      	bne.n	8004f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <TIM_Base_SetConfig+0x114>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d027      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2c      	ldr	r2, [pc, #176]	; (8004fe0 <TIM_Base_SetConfig+0x118>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d023      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <TIM_Base_SetConfig+0x11c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <TIM_Base_SetConfig+0x120>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a29      	ldr	r2, [pc, #164]	; (8004fec <TIM_Base_SetConfig+0x124>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d017      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <TIM_Base_SetConfig+0x128>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <TIM_Base_SetConfig+0x12c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <TIM_Base_SetConfig+0x130>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <TIM_Base_SetConfig+0x134>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a24      	ldr	r2, [pc, #144]	; (8005000 <TIM_Base_SetConfig+0x138>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a23      	ldr	r2, [pc, #140]	; (8005004 <TIM_Base_SetConfig+0x13c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <TIM_Base_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0xf8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a0c      	ldr	r2, [pc, #48]	; (8004fec <TIM_Base_SetConfig+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d103      	bne.n	8004fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	615a      	str	r2, [r3, #20]
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800
 8004ffc:	40001800 	.word	0x40001800
 8005000:	40001c00 	.word	0x40001c00
 8005004:	40002000 	.word	0x40002000

08005008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 030a 	bic.w	r3, r3, #10
 8005044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b087      	sub	sp, #28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0210 	bic.w	r2, r3, #16
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	031b      	lsls	r3, r3, #12
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f043 0307 	orr.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	431a      	orrs	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e05a      	b.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a21      	ldr	r2, [pc, #132]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a0:	d01d      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a17      	ldr	r2, [pc, #92]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a15      	ldr	r2, [pc, #84]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10c      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40010400 	.word	0x40010400
 800522c:	40014000 	.word	0x40014000
 8005230:	40001800 	.word	0x40001800

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e03f      	b.n	80052ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fd fbc4 	bl	8002a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800529e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fb97 	bl	80059d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b088      	sub	sp, #32
 80052fa:	af02      	add	r7, sp, #8
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b20      	cmp	r3, #32
 8005314:	f040 8083 	bne.w	800541e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_UART_Transmit+0x2e>
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e07b      	b.n	8005420 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_UART_Transmit+0x40>
 8005332:	2302      	movs	r3, #2
 8005334:	e074      	b.n	8005420 <HAL_UART_Transmit+0x12a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2221      	movs	r2, #33	; 0x21
 8005348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800534c:	f7fd fce8 	bl	8002d20 <HAL_GetTick>
 8005350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005366:	e042      	b.n	80053ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537e:	d122      	bne.n	80053c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2200      	movs	r2, #0
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f9b6 	bl	80056fc <UART_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e042      	b.n	8005420 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	3302      	adds	r3, #2
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	e017      	b.n	80053ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	e013      	b.n	80053ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2200      	movs	r2, #0
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f993 	bl	80056fc <UART_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e01f      	b.n	8005420 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	60ba      	str	r2, [r7, #8]
 80053e6:	781a      	ldrb	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1b7      	bne.n	8005368 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2200      	movs	r2, #0
 8005400:	2140      	movs	r1, #64	; 0x40
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f97a 	bl	80056fc <UART_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e006      	b.n	8005420 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	d140      	bne.n	80054c4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_UART_Receive_IT+0x26>
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e039      	b.n	80054c6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_UART_Receive_IT+0x38>
 800545c:	2302      	movs	r3, #2
 800545e:	e032      	b.n	80054c6 <HAL_UART_Receive_IT+0x9e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	88fa      	ldrh	r2, [r7, #6]
 8005472:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2222      	movs	r2, #34	; 0x22
 8005484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800549e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0220 	orr.w	r2, r2, #32
 80054be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_UART_IRQHandler+0x52>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9d6 	bl	80058d0 <UART_Receive_IT>
      return;
 8005524:	e0d1      	b.n	80056ca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80b0 	beq.w	800568e <HAL_UART_IRQHandler+0x1ba>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <HAL_UART_IRQHandler+0x70>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a5 	beq.w	800568e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_UART_IRQHandler+0x90>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	f043 0201 	orr.w	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_UART_IRQHandler+0xb0>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	f043 0202 	orr.w	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_UART_IRQHandler+0xd0>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	f043 0204 	orr.w	r2, r3, #4
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00f      	beq.n	80055ce <HAL_UART_IRQHandler+0xfa>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <HAL_UART_IRQHandler+0xee>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	f043 0208 	orr.w	r2, r3, #8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d078      	beq.n	80056c8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <HAL_UART_IRQHandler+0x11c>
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f970 	bl	80058d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	bf0c      	ite	eq
 80055fe:	2301      	moveq	r3, #1
 8005600:	2300      	movne	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <HAL_UART_IRQHandler+0x144>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d031      	beq.n	800567c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8b9 	bl	8005790 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d123      	bne.n	8005674 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d013      	beq.n	800566c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <HAL_UART_IRQHandler+0x1fc>)
 800564a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe f851 	bl	80036f8 <HAL_DMA_Abort_IT>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d016      	beq.n	800568a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005666:	4610      	mov	r0, r2
 8005668:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566a:	e00e      	b.n	800568a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f83b 	bl	80056e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005672:	e00a      	b.n	800568a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f837 	bl	80056e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567a:	e006      	b.n	800568a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f833 	bl	80056e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005688:	e01e      	b.n	80056c8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568a:	bf00      	nop
    return;
 800568c:	e01c      	b.n	80056c8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_UART_IRQHandler+0x1d6>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8a6 	bl	80057f4 <UART_Transmit_IT>
    return;
 80056a8:	e00f      	b.n	80056ca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_UART_IRQHandler+0x1f6>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f8ee 	bl	80058a0 <UART_EndTransmit_IT>
    return;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <HAL_UART_IRQHandler+0x1f6>
    return;
 80056c8:	bf00      	nop
  }
}
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	080057cd 	.word	0x080057cd

080056d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570c:	e02c      	b.n	8005768 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d028      	beq.n	8005768 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <UART_WaitOnFlagUntilTimeout+0x30>
 800571c:	f7fd fb00 	bl	8002d20 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	429a      	cmp	r2, r3
 800572a:	d21d      	bcs.n	8005768 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800573a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e00f      	b.n	8005788 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	429a      	cmp	r2, r3
 8005784:	d0c3      	beq.n	800570e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff ff7e 	bl	80056e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b21      	cmp	r3, #33	; 0x21
 8005806:	d144      	bne.n	8005892 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005810:	d11a      	bne.n	8005848 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005826:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	1c9a      	adds	r2, r3, #2
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]
 800583a:	e00e      	b.n	800585a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]
 8005846:	e008      	b.n	800585a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6211      	str	r1, [r2, #32]
 8005852:	781a      	ldrb	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29b      	uxth	r3, r3
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4619      	mov	r1, r3
 8005868:	84d1      	strh	r1, [r2, #38]	; 0x26
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10f      	bne.n	800588e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800587c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800588c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e000      	b.n	8005894 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005892:	2302      	movs	r3, #2
  }
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ff07 	bl	80056d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b22      	cmp	r3, #34	; 0x22
 80058e2:	d171      	bne.n	80059c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d123      	bne.n	8005936 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10e      	bne.n	800591a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	1c9a      	adds	r2, r3, #2
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28
 8005918:	e029      	b.n	800596e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	b29b      	uxth	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	629a      	str	r2, [r3, #40]	; 0x28
 8005934:	e01b      	b.n	800596e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6858      	ldr	r0, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6291      	str	r1, [r2, #40]	; 0x28
 800594e:	b2c2      	uxtb	r2, r0
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	e00c      	b.n	800596e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	1c58      	adds	r0, r3, #1
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	6288      	str	r0, [r1, #40]	; 0x28
 8005966:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4619      	mov	r1, r3
 800597c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800597e:	2b00      	cmp	r3, #0
 8005980:	d120      	bne.n	80059c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0220 	bic.w	r2, r2, #32
 8005990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fc ff0a 	bl	80027d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e002      	b.n	80059ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a16:	f023 030c 	bic.w	r3, r3, #12
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a42:	f040 818b 	bne.w	8005d5c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4ac1      	ldr	r2, [pc, #772]	; (8005d50 <UART_SetConfig+0x37c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d005      	beq.n	8005a5c <UART_SetConfig+0x88>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4abf      	ldr	r2, [pc, #764]	; (8005d54 <UART_SetConfig+0x380>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	f040 80bd 	bne.w	8005bd6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a5c:	f7fe fba0 	bl	80041a0 <HAL_RCC_GetPCLK2Freq>
 8005a60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	461d      	mov	r5, r3
 8005a66:	f04f 0600 	mov.w	r6, #0
 8005a6a:	46a8      	mov	r8, r5
 8005a6c:	46b1      	mov	r9, r6
 8005a6e:	eb18 0308 	adds.w	r3, r8, r8
 8005a72:	eb49 0409 	adc.w	r4, r9, r9
 8005a76:	4698      	mov	r8, r3
 8005a78:	46a1      	mov	r9, r4
 8005a7a:	eb18 0805 	adds.w	r8, r8, r5
 8005a7e:	eb49 0906 	adc.w	r9, r9, r6
 8005a82:	f04f 0100 	mov.w	r1, #0
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a96:	4688      	mov	r8, r1
 8005a98:	4691      	mov	r9, r2
 8005a9a:	eb18 0005 	adds.w	r0, r8, r5
 8005a9e:	eb49 0106 	adc.w	r1, r9, r6
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	f04f 0600 	mov.w	r6, #0
 8005aac:	196b      	adds	r3, r5, r5
 8005aae:	eb46 0406 	adc.w	r4, r6, r6
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	f7fa fc03 	bl	80002c0 <__aeabi_uldivmod>
 8005aba:	4603      	mov	r3, r0
 8005abc:	460c      	mov	r4, r1
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4ba5      	ldr	r3, [pc, #660]	; (8005d58 <UART_SetConfig+0x384>)
 8005ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	461d      	mov	r5, r3
 8005ad0:	f04f 0600 	mov.w	r6, #0
 8005ad4:	46a9      	mov	r9, r5
 8005ad6:	46b2      	mov	sl, r6
 8005ad8:	eb19 0309 	adds.w	r3, r9, r9
 8005adc:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae0:	4699      	mov	r9, r3
 8005ae2:	46a2      	mov	sl, r4
 8005ae4:	eb19 0905 	adds.w	r9, r9, r5
 8005ae8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005afc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b00:	4689      	mov	r9, r1
 8005b02:	4692      	mov	sl, r2
 8005b04:	eb19 0005 	adds.w	r0, r9, r5
 8005b08:	eb4a 0106 	adc.w	r1, sl, r6
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	461d      	mov	r5, r3
 8005b12:	f04f 0600 	mov.w	r6, #0
 8005b16:	196b      	adds	r3, r5, r5
 8005b18:	eb46 0406 	adc.w	r4, r6, r6
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4623      	mov	r3, r4
 8005b20:	f7fa fbce 	bl	80002c0 <__aeabi_uldivmod>
 8005b24:	4603      	mov	r3, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b8b      	ldr	r3, [pc, #556]	; (8005d58 <UART_SetConfig+0x384>)
 8005b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	2164      	movs	r1, #100	; 0x64
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	3332      	adds	r3, #50	; 0x32
 8005b3e:	4a86      	ldr	r2, [pc, #536]	; (8005d58 <UART_SetConfig+0x384>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b4c:	4498      	add	r8, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	461d      	mov	r5, r3
 8005b52:	f04f 0600 	mov.w	r6, #0
 8005b56:	46a9      	mov	r9, r5
 8005b58:	46b2      	mov	sl, r6
 8005b5a:	eb19 0309 	adds.w	r3, r9, r9
 8005b5e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b62:	4699      	mov	r9, r3
 8005b64:	46a2      	mov	sl, r4
 8005b66:	eb19 0905 	adds.w	r9, r9, r5
 8005b6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b6e:	f04f 0100 	mov.w	r1, #0
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b82:	4689      	mov	r9, r1
 8005b84:	4692      	mov	sl, r2
 8005b86:	eb19 0005 	adds.w	r0, r9, r5
 8005b8a:	eb4a 0106 	adc.w	r1, sl, r6
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	461d      	mov	r5, r3
 8005b94:	f04f 0600 	mov.w	r6, #0
 8005b98:	196b      	adds	r3, r5, r5
 8005b9a:	eb46 0406 	adc.w	r4, r6, r6
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	f7fa fb8d 	bl	80002c0 <__aeabi_uldivmod>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	461a      	mov	r2, r3
 8005bac:	4b6a      	ldr	r3, [pc, #424]	; (8005d58 <UART_SetConfig+0x384>)
 8005bae:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	2164      	movs	r1, #100	; 0x64
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	3332      	adds	r3, #50	; 0x32
 8005bc0:	4a65      	ldr	r2, [pc, #404]	; (8005d58 <UART_SetConfig+0x384>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	f003 0207 	and.w	r2, r3, #7
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4442      	add	r2, r8
 8005bd2:	609a      	str	r2, [r3, #8]
 8005bd4:	e26f      	b.n	80060b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bd6:	f7fe facf 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8005bda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	461d      	mov	r5, r3
 8005be0:	f04f 0600 	mov.w	r6, #0
 8005be4:	46a8      	mov	r8, r5
 8005be6:	46b1      	mov	r9, r6
 8005be8:	eb18 0308 	adds.w	r3, r8, r8
 8005bec:	eb49 0409 	adc.w	r4, r9, r9
 8005bf0:	4698      	mov	r8, r3
 8005bf2:	46a1      	mov	r9, r4
 8005bf4:	eb18 0805 	adds.w	r8, r8, r5
 8005bf8:	eb49 0906 	adc.w	r9, r9, r6
 8005bfc:	f04f 0100 	mov.w	r1, #0
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c10:	4688      	mov	r8, r1
 8005c12:	4691      	mov	r9, r2
 8005c14:	eb18 0005 	adds.w	r0, r8, r5
 8005c18:	eb49 0106 	adc.w	r1, r9, r6
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	461d      	mov	r5, r3
 8005c22:	f04f 0600 	mov.w	r6, #0
 8005c26:	196b      	adds	r3, r5, r5
 8005c28:	eb46 0406 	adc.w	r4, r6, r6
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4623      	mov	r3, r4
 8005c30:	f7fa fb46 	bl	80002c0 <__aeabi_uldivmod>
 8005c34:	4603      	mov	r3, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4b47      	ldr	r3, [pc, #284]	; (8005d58 <UART_SetConfig+0x384>)
 8005c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	461d      	mov	r5, r3
 8005c4a:	f04f 0600 	mov.w	r6, #0
 8005c4e:	46a9      	mov	r9, r5
 8005c50:	46b2      	mov	sl, r6
 8005c52:	eb19 0309 	adds.w	r3, r9, r9
 8005c56:	eb4a 040a 	adc.w	r4, sl, sl
 8005c5a:	4699      	mov	r9, r3
 8005c5c:	46a2      	mov	sl, r4
 8005c5e:	eb19 0905 	adds.w	r9, r9, r5
 8005c62:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c66:	f04f 0100 	mov.w	r1, #0
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c7a:	4689      	mov	r9, r1
 8005c7c:	4692      	mov	sl, r2
 8005c7e:	eb19 0005 	adds.w	r0, r9, r5
 8005c82:	eb4a 0106 	adc.w	r1, sl, r6
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	461d      	mov	r5, r3
 8005c8c:	f04f 0600 	mov.w	r6, #0
 8005c90:	196b      	adds	r3, r5, r5
 8005c92:	eb46 0406 	adc.w	r4, r6, r6
 8005c96:	461a      	mov	r2, r3
 8005c98:	4623      	mov	r3, r4
 8005c9a:	f7fa fb11 	bl	80002c0 <__aeabi_uldivmod>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4b2c      	ldr	r3, [pc, #176]	; (8005d58 <UART_SetConfig+0x384>)
 8005ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2164      	movs	r1, #100	; 0x64
 8005cae:	fb01 f303 	mul.w	r3, r1, r3
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	3332      	adds	r3, #50	; 0x32
 8005cb8:	4a27      	ldr	r2, [pc, #156]	; (8005d58 <UART_SetConfig+0x384>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cc6:	4498      	add	r8, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	461d      	mov	r5, r3
 8005ccc:	f04f 0600 	mov.w	r6, #0
 8005cd0:	46a9      	mov	r9, r5
 8005cd2:	46b2      	mov	sl, r6
 8005cd4:	eb19 0309 	adds.w	r3, r9, r9
 8005cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8005cdc:	4699      	mov	r9, r3
 8005cde:	46a2      	mov	sl, r4
 8005ce0:	eb19 0905 	adds.w	r9, r9, r5
 8005ce4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	4692      	mov	sl, r2
 8005d00:	eb19 0005 	adds.w	r0, r9, r5
 8005d04:	eb4a 0106 	adc.w	r1, sl, r6
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	461d      	mov	r5, r3
 8005d0e:	f04f 0600 	mov.w	r6, #0
 8005d12:	196b      	adds	r3, r5, r5
 8005d14:	eb46 0406 	adc.w	r4, r6, r6
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	f7fa fad0 	bl	80002c0 <__aeabi_uldivmod>
 8005d20:	4603      	mov	r3, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	461a      	mov	r2, r3
 8005d26:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <UART_SetConfig+0x384>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	; 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <UART_SetConfig+0x384>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 0207 	and.w	r2, r3, #7
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4442      	add	r2, r8
 8005d4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d4e:	e1b2      	b.n	80060b6 <UART_SetConfig+0x6e2>
 8005d50:	40011000 	.word	0x40011000
 8005d54:	40011400 	.word	0x40011400
 8005d58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4ad7      	ldr	r2, [pc, #860]	; (80060c0 <UART_SetConfig+0x6ec>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d005      	beq.n	8005d72 <UART_SetConfig+0x39e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4ad6      	ldr	r2, [pc, #856]	; (80060c4 <UART_SetConfig+0x6f0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	f040 80d1 	bne.w	8005f14 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d72:	f7fe fa15 	bl	80041a0 <HAL_RCC_GetPCLK2Freq>
 8005d76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	469a      	mov	sl, r3
 8005d7c:	f04f 0b00 	mov.w	fp, #0
 8005d80:	46d0      	mov	r8, sl
 8005d82:	46d9      	mov	r9, fp
 8005d84:	eb18 0308 	adds.w	r3, r8, r8
 8005d88:	eb49 0409 	adc.w	r4, r9, r9
 8005d8c:	4698      	mov	r8, r3
 8005d8e:	46a1      	mov	r9, r4
 8005d90:	eb18 080a 	adds.w	r8, r8, sl
 8005d94:	eb49 090b 	adc.w	r9, r9, fp
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005da4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005da8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dac:	4688      	mov	r8, r1
 8005dae:	4691      	mov	r9, r2
 8005db0:	eb1a 0508 	adds.w	r5, sl, r8
 8005db4:	eb4b 0609 	adc.w	r6, fp, r9
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	f04f 0400 	mov.w	r4, #0
 8005dca:	0094      	lsls	r4, r2, #2
 8005dcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dd0:	008b      	lsls	r3, r1, #2
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	4631      	mov	r1, r6
 8005dda:	f7fa fa71 	bl	80002c0 <__aeabi_uldivmod>
 8005dde:	4603      	mov	r3, r0
 8005de0:	460c      	mov	r4, r1
 8005de2:	461a      	mov	r2, r3
 8005de4:	4bb8      	ldr	r3, [pc, #736]	; (80060c8 <UART_SetConfig+0x6f4>)
 8005de6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	469b      	mov	fp, r3
 8005df4:	f04f 0c00 	mov.w	ip, #0
 8005df8:	46d9      	mov	r9, fp
 8005dfa:	46e2      	mov	sl, ip
 8005dfc:	eb19 0309 	adds.w	r3, r9, r9
 8005e00:	eb4a 040a 	adc.w	r4, sl, sl
 8005e04:	4699      	mov	r9, r3
 8005e06:	46a2      	mov	sl, r4
 8005e08:	eb19 090b 	adds.w	r9, r9, fp
 8005e0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e10:	f04f 0100 	mov.w	r1, #0
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e24:	4689      	mov	r9, r1
 8005e26:	4692      	mov	sl, r2
 8005e28:	eb1b 0509 	adds.w	r5, fp, r9
 8005e2c:	eb4c 060a 	adc.w	r6, ip, sl
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	4619      	mov	r1, r3
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	f04f 0400 	mov.w	r4, #0
 8005e42:	0094      	lsls	r4, r2, #2
 8005e44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e48:	008b      	lsls	r3, r1, #2
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	4631      	mov	r1, r6
 8005e52:	f7fa fa35 	bl	80002c0 <__aeabi_uldivmod>
 8005e56:	4603      	mov	r3, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4b9a      	ldr	r3, [pc, #616]	; (80060c8 <UART_SetConfig+0x6f4>)
 8005e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2164      	movs	r1, #100	; 0x64
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	3332      	adds	r3, #50	; 0x32
 8005e70:	4a95      	ldr	r2, [pc, #596]	; (80060c8 <UART_SetConfig+0x6f4>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e7c:	4498      	add	r8, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	469b      	mov	fp, r3
 8005e82:	f04f 0c00 	mov.w	ip, #0
 8005e86:	46d9      	mov	r9, fp
 8005e88:	46e2      	mov	sl, ip
 8005e8a:	eb19 0309 	adds.w	r3, r9, r9
 8005e8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e92:	4699      	mov	r9, r3
 8005e94:	46a2      	mov	sl, r4
 8005e96:	eb19 090b 	adds.w	r9, r9, fp
 8005e9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e9e:	f04f 0100 	mov.w	r1, #0
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eb2:	4689      	mov	r9, r1
 8005eb4:	4692      	mov	sl, r2
 8005eb6:	eb1b 0509 	adds.w	r5, fp, r9
 8005eba:	eb4c 060a 	adc.w	r6, ip, sl
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	f04f 0400 	mov.w	r4, #0
 8005ed0:	0094      	lsls	r4, r2, #2
 8005ed2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ed6:	008b      	lsls	r3, r1, #2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4623      	mov	r3, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	4631      	mov	r1, r6
 8005ee0:	f7fa f9ee 	bl	80002c0 <__aeabi_uldivmod>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b77      	ldr	r3, [pc, #476]	; (80060c8 <UART_SetConfig+0x6f4>)
 8005eec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	2164      	movs	r1, #100	; 0x64
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	3332      	adds	r3, #50	; 0x32
 8005efe:	4a72      	ldr	r2, [pc, #456]	; (80060c8 <UART_SetConfig+0x6f4>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4442      	add	r2, r8
 8005f10:	609a      	str	r2, [r3, #8]
 8005f12:	e0d0      	b.n	80060b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fe f930 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8005f18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	469a      	mov	sl, r3
 8005f1e:	f04f 0b00 	mov.w	fp, #0
 8005f22:	46d0      	mov	r8, sl
 8005f24:	46d9      	mov	r9, fp
 8005f26:	eb18 0308 	adds.w	r3, r8, r8
 8005f2a:	eb49 0409 	adc.w	r4, r9, r9
 8005f2e:	4698      	mov	r8, r3
 8005f30:	46a1      	mov	r9, r4
 8005f32:	eb18 080a 	adds.w	r8, r8, sl
 8005f36:	eb49 090b 	adc.w	r9, r9, fp
 8005f3a:	f04f 0100 	mov.w	r1, #0
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f4e:	4688      	mov	r8, r1
 8005f50:	4691      	mov	r9, r2
 8005f52:	eb1a 0508 	adds.w	r5, sl, r8
 8005f56:	eb4b 0609 	adc.w	r6, fp, r9
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	f04f 0400 	mov.w	r4, #0
 8005f6c:	0094      	lsls	r4, r2, #2
 8005f6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f72:	008b      	lsls	r3, r1, #2
 8005f74:	461a      	mov	r2, r3
 8005f76:	4623      	mov	r3, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	f7fa f9a0 	bl	80002c0 <__aeabi_uldivmod>
 8005f80:	4603      	mov	r3, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b50      	ldr	r3, [pc, #320]	; (80060c8 <UART_SetConfig+0x6f4>)
 8005f88:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	469b      	mov	fp, r3
 8005f96:	f04f 0c00 	mov.w	ip, #0
 8005f9a:	46d9      	mov	r9, fp
 8005f9c:	46e2      	mov	sl, ip
 8005f9e:	eb19 0309 	adds.w	r3, r9, r9
 8005fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	46a2      	mov	sl, r4
 8005faa:	eb19 090b 	adds.w	r9, r9, fp
 8005fae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fc6:	4689      	mov	r9, r1
 8005fc8:	4692      	mov	sl, r2
 8005fca:	eb1b 0509 	adds.w	r5, fp, r9
 8005fce:	eb4c 060a 	adc.w	r6, ip, sl
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	f04f 0400 	mov.w	r4, #0
 8005fe4:	0094      	lsls	r4, r2, #2
 8005fe6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fea:	008b      	lsls	r3, r1, #2
 8005fec:	461a      	mov	r2, r3
 8005fee:	4623      	mov	r3, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	f7fa f964 	bl	80002c0 <__aeabi_uldivmod>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4b32      	ldr	r3, [pc, #200]	; (80060c8 <UART_SetConfig+0x6f4>)
 8006000:	fba3 1302 	umull	r1, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2164      	movs	r1, #100	; 0x64
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	3332      	adds	r3, #50	; 0x32
 8006012:	4a2d      	ldr	r2, [pc, #180]	; (80060c8 <UART_SetConfig+0x6f4>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800601e:	4498      	add	r8, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	469b      	mov	fp, r3
 8006024:	f04f 0c00 	mov.w	ip, #0
 8006028:	46d9      	mov	r9, fp
 800602a:	46e2      	mov	sl, ip
 800602c:	eb19 0309 	adds.w	r3, r9, r9
 8006030:	eb4a 040a 	adc.w	r4, sl, sl
 8006034:	4699      	mov	r9, r3
 8006036:	46a2      	mov	sl, r4
 8006038:	eb19 090b 	adds.w	r9, r9, fp
 800603c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006040:	f04f 0100 	mov.w	r1, #0
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800604c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006050:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006054:	4689      	mov	r9, r1
 8006056:	4692      	mov	sl, r2
 8006058:	eb1b 0509 	adds.w	r5, fp, r9
 800605c:	eb4c 060a 	adc.w	r6, ip, sl
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4619      	mov	r1, r3
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	f04f 0400 	mov.w	r4, #0
 8006072:	0094      	lsls	r4, r2, #2
 8006074:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006078:	008b      	lsls	r3, r1, #2
 800607a:	461a      	mov	r2, r3
 800607c:	4623      	mov	r3, r4
 800607e:	4628      	mov	r0, r5
 8006080:	4631      	mov	r1, r6
 8006082:	f7fa f91d 	bl	80002c0 <__aeabi_uldivmod>
 8006086:	4603      	mov	r3, r0
 8006088:	460c      	mov	r4, r1
 800608a:	461a      	mov	r2, r3
 800608c:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <UART_SetConfig+0x6f4>)
 800608e:	fba3 1302 	umull	r1, r3, r3, r2
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	2164      	movs	r1, #100	; 0x64
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	3332      	adds	r3, #50	; 0x32
 80060a0:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <UART_SetConfig+0x6f4>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4442      	add	r2, r8
 80060b2:	609a      	str	r2, [r3, #8]
}
 80060b4:	e7ff      	b.n	80060b6 <UART_SetConfig+0x6e2>
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c0:	40011000 	.word	0x40011000
 80060c4:	40011400 	.word	0x40011400
 80060c8:	51eb851f 	.word	0x51eb851f

080060cc <__errno>:
 80060cc:	4b01      	ldr	r3, [pc, #4]	; (80060d4 <__errno+0x8>)
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000097c 	.word	0x2000097c

080060d8 <__libc_init_array>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	4e0d      	ldr	r6, [pc, #52]	; (8006110 <__libc_init_array+0x38>)
 80060dc:	4c0d      	ldr	r4, [pc, #52]	; (8006114 <__libc_init_array+0x3c>)
 80060de:	1ba4      	subs	r4, r4, r6
 80060e0:	10a4      	asrs	r4, r4, #2
 80060e2:	2500      	movs	r5, #0
 80060e4:	42a5      	cmp	r5, r4
 80060e6:	d109      	bne.n	80060fc <__libc_init_array+0x24>
 80060e8:	4e0b      	ldr	r6, [pc, #44]	; (8006118 <__libc_init_array+0x40>)
 80060ea:	4c0c      	ldr	r4, [pc, #48]	; (800611c <__libc_init_array+0x44>)
 80060ec:	f000 fc28 	bl	8006940 <_init>
 80060f0:	1ba4      	subs	r4, r4, r6
 80060f2:	10a4      	asrs	r4, r4, #2
 80060f4:	2500      	movs	r5, #0
 80060f6:	42a5      	cmp	r5, r4
 80060f8:	d105      	bne.n	8006106 <__libc_init_array+0x2e>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006100:	4798      	blx	r3
 8006102:	3501      	adds	r5, #1
 8006104:	e7ee      	b.n	80060e4 <__libc_init_array+0xc>
 8006106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800610a:	4798      	blx	r3
 800610c:	3501      	adds	r5, #1
 800610e:	e7f2      	b.n	80060f6 <__libc_init_array+0x1e>
 8006110:	08006ee8 	.word	0x08006ee8
 8006114:	08006ee8 	.word	0x08006ee8
 8006118:	08006ee8 	.word	0x08006ee8
 800611c:	08006eec 	.word	0x08006eec

08006120 <memcpy>:
 8006120:	b510      	push	{r4, lr}
 8006122:	1e43      	subs	r3, r0, #1
 8006124:	440a      	add	r2, r1
 8006126:	4291      	cmp	r1, r2
 8006128:	d100      	bne.n	800612c <memcpy+0xc>
 800612a:	bd10      	pop	{r4, pc}
 800612c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006134:	e7f7      	b.n	8006126 <memcpy+0x6>

08006136 <memset>:
 8006136:	4402      	add	r2, r0
 8006138:	4603      	mov	r3, r0
 800613a:	4293      	cmp	r3, r2
 800613c:	d100      	bne.n	8006140 <memset+0xa>
 800613e:	4770      	bx	lr
 8006140:	f803 1b01 	strb.w	r1, [r3], #1
 8006144:	e7f9      	b.n	800613a <memset+0x4>
	...

08006148 <siprintf>:
 8006148:	b40e      	push	{r1, r2, r3}
 800614a:	b500      	push	{lr}
 800614c:	b09c      	sub	sp, #112	; 0x70
 800614e:	ab1d      	add	r3, sp, #116	; 0x74
 8006150:	9002      	str	r0, [sp, #8]
 8006152:	9006      	str	r0, [sp, #24]
 8006154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006158:	4809      	ldr	r0, [pc, #36]	; (8006180 <siprintf+0x38>)
 800615a:	9107      	str	r1, [sp, #28]
 800615c:	9104      	str	r1, [sp, #16]
 800615e:	4909      	ldr	r1, [pc, #36]	; (8006184 <siprintf+0x3c>)
 8006160:	f853 2b04 	ldr.w	r2, [r3], #4
 8006164:	9105      	str	r1, [sp, #20]
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	a902      	add	r1, sp, #8
 800616c:	f000 f866 	bl	800623c <_svfiprintf_r>
 8006170:	9b02      	ldr	r3, [sp, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	b01c      	add	sp, #112	; 0x70
 8006178:	f85d eb04 	ldr.w	lr, [sp], #4
 800617c:	b003      	add	sp, #12
 800617e:	4770      	bx	lr
 8006180:	2000097c 	.word	0x2000097c
 8006184:	ffff0208 	.word	0xffff0208

08006188 <__ssputs_r>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	688e      	ldr	r6, [r1, #8]
 800618e:	429e      	cmp	r6, r3
 8006190:	4682      	mov	sl, r0
 8006192:	460c      	mov	r4, r1
 8006194:	4690      	mov	r8, r2
 8006196:	4699      	mov	r9, r3
 8006198:	d837      	bhi.n	800620a <__ssputs_r+0x82>
 800619a:	898a      	ldrh	r2, [r1, #12]
 800619c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061a0:	d031      	beq.n	8006206 <__ssputs_r+0x7e>
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	6909      	ldr	r1, [r1, #16]
 80061a6:	1a6f      	subs	r7, r5, r1
 80061a8:	6965      	ldr	r5, [r4, #20]
 80061aa:	2302      	movs	r3, #2
 80061ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80061b4:	f109 0301 	add.w	r3, r9, #1
 80061b8:	443b      	add	r3, r7
 80061ba:	429d      	cmp	r5, r3
 80061bc:	bf38      	it	cc
 80061be:	461d      	movcc	r5, r3
 80061c0:	0553      	lsls	r3, r2, #21
 80061c2:	d530      	bpl.n	8006226 <__ssputs_r+0x9e>
 80061c4:	4629      	mov	r1, r5
 80061c6:	f000 fb21 	bl	800680c <_malloc_r>
 80061ca:	4606      	mov	r6, r0
 80061cc:	b950      	cbnz	r0, 80061e4 <__ssputs_r+0x5c>
 80061ce:	230c      	movs	r3, #12
 80061d0:	f8ca 3000 	str.w	r3, [sl]
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e4:	463a      	mov	r2, r7
 80061e6:	6921      	ldr	r1, [r4, #16]
 80061e8:	f7ff ff9a 	bl	8006120 <memcpy>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	6126      	str	r6, [r4, #16]
 80061fa:	6165      	str	r5, [r4, #20]
 80061fc:	443e      	add	r6, r7
 80061fe:	1bed      	subs	r5, r5, r7
 8006200:	6026      	str	r6, [r4, #0]
 8006202:	60a5      	str	r5, [r4, #8]
 8006204:	464e      	mov	r6, r9
 8006206:	454e      	cmp	r6, r9
 8006208:	d900      	bls.n	800620c <__ssputs_r+0x84>
 800620a:	464e      	mov	r6, r9
 800620c:	4632      	mov	r2, r6
 800620e:	4641      	mov	r1, r8
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	f000 fa93 	bl	800673c <memmove>
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	1b9b      	subs	r3, r3, r6
 800621a:	60a3      	str	r3, [r4, #8]
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	441e      	add	r6, r3
 8006220:	6026      	str	r6, [r4, #0]
 8006222:	2000      	movs	r0, #0
 8006224:	e7dc      	b.n	80061e0 <__ssputs_r+0x58>
 8006226:	462a      	mov	r2, r5
 8006228:	f000 fb4a 	bl	80068c0 <_realloc_r>
 800622c:	4606      	mov	r6, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	d1e2      	bne.n	80061f8 <__ssputs_r+0x70>
 8006232:	6921      	ldr	r1, [r4, #16]
 8006234:	4650      	mov	r0, sl
 8006236:	f000 fa9b 	bl	8006770 <_free_r>
 800623a:	e7c8      	b.n	80061ce <__ssputs_r+0x46>

0800623c <_svfiprintf_r>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	461d      	mov	r5, r3
 8006242:	898b      	ldrh	r3, [r1, #12]
 8006244:	061f      	lsls	r7, r3, #24
 8006246:	b09d      	sub	sp, #116	; 0x74
 8006248:	4680      	mov	r8, r0
 800624a:	460c      	mov	r4, r1
 800624c:	4616      	mov	r6, r2
 800624e:	d50f      	bpl.n	8006270 <_svfiprintf_r+0x34>
 8006250:	690b      	ldr	r3, [r1, #16]
 8006252:	b96b      	cbnz	r3, 8006270 <_svfiprintf_r+0x34>
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	f000 fad9 	bl	800680c <_malloc_r>
 800625a:	6020      	str	r0, [r4, #0]
 800625c:	6120      	str	r0, [r4, #16]
 800625e:	b928      	cbnz	r0, 800626c <_svfiprintf_r+0x30>
 8006260:	230c      	movs	r3, #12
 8006262:	f8c8 3000 	str.w	r3, [r8]
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
 800626a:	e0c8      	b.n	80063fe <_svfiprintf_r+0x1c2>
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	6163      	str	r3, [r4, #20]
 8006270:	2300      	movs	r3, #0
 8006272:	9309      	str	r3, [sp, #36]	; 0x24
 8006274:	2320      	movs	r3, #32
 8006276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800627a:	2330      	movs	r3, #48	; 0x30
 800627c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006280:	9503      	str	r5, [sp, #12]
 8006282:	f04f 0b01 	mov.w	fp, #1
 8006286:	4637      	mov	r7, r6
 8006288:	463d      	mov	r5, r7
 800628a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800628e:	b10b      	cbz	r3, 8006294 <_svfiprintf_r+0x58>
 8006290:	2b25      	cmp	r3, #37	; 0x25
 8006292:	d13e      	bne.n	8006312 <_svfiprintf_r+0xd6>
 8006294:	ebb7 0a06 	subs.w	sl, r7, r6
 8006298:	d00b      	beq.n	80062b2 <_svfiprintf_r+0x76>
 800629a:	4653      	mov	r3, sl
 800629c:	4632      	mov	r2, r6
 800629e:	4621      	mov	r1, r4
 80062a0:	4640      	mov	r0, r8
 80062a2:	f7ff ff71 	bl	8006188 <__ssputs_r>
 80062a6:	3001      	adds	r0, #1
 80062a8:	f000 80a4 	beq.w	80063f4 <_svfiprintf_r+0x1b8>
 80062ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ae:	4453      	add	r3, sl
 80062b0:	9309      	str	r3, [sp, #36]	; 0x24
 80062b2:	783b      	ldrb	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 809d 	beq.w	80063f4 <_svfiprintf_r+0x1b8>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f04f 32ff 	mov.w	r2, #4294967295
 80062c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	9307      	str	r3, [sp, #28]
 80062c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062cc:	931a      	str	r3, [sp, #104]	; 0x68
 80062ce:	462f      	mov	r7, r5
 80062d0:	2205      	movs	r2, #5
 80062d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80062d6:	4850      	ldr	r0, [pc, #320]	; (8006418 <_svfiprintf_r+0x1dc>)
 80062d8:	f7f9 ffa2 	bl	8000220 <memchr>
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	b9d0      	cbnz	r0, 8006316 <_svfiprintf_r+0xda>
 80062e0:	06d9      	lsls	r1, r3, #27
 80062e2:	bf44      	itt	mi
 80062e4:	2220      	movmi	r2, #32
 80062e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062ea:	071a      	lsls	r2, r3, #28
 80062ec:	bf44      	itt	mi
 80062ee:	222b      	movmi	r2, #43	; 0x2b
 80062f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062f4:	782a      	ldrb	r2, [r5, #0]
 80062f6:	2a2a      	cmp	r2, #42	; 0x2a
 80062f8:	d015      	beq.n	8006326 <_svfiprintf_r+0xea>
 80062fa:	9a07      	ldr	r2, [sp, #28]
 80062fc:	462f      	mov	r7, r5
 80062fe:	2000      	movs	r0, #0
 8006300:	250a      	movs	r5, #10
 8006302:	4639      	mov	r1, r7
 8006304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006308:	3b30      	subs	r3, #48	; 0x30
 800630a:	2b09      	cmp	r3, #9
 800630c:	d94d      	bls.n	80063aa <_svfiprintf_r+0x16e>
 800630e:	b1b8      	cbz	r0, 8006340 <_svfiprintf_r+0x104>
 8006310:	e00f      	b.n	8006332 <_svfiprintf_r+0xf6>
 8006312:	462f      	mov	r7, r5
 8006314:	e7b8      	b.n	8006288 <_svfiprintf_r+0x4c>
 8006316:	4a40      	ldr	r2, [pc, #256]	; (8006418 <_svfiprintf_r+0x1dc>)
 8006318:	1a80      	subs	r0, r0, r2
 800631a:	fa0b f000 	lsl.w	r0, fp, r0
 800631e:	4318      	orrs	r0, r3
 8006320:	9004      	str	r0, [sp, #16]
 8006322:	463d      	mov	r5, r7
 8006324:	e7d3      	b.n	80062ce <_svfiprintf_r+0x92>
 8006326:	9a03      	ldr	r2, [sp, #12]
 8006328:	1d11      	adds	r1, r2, #4
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	9103      	str	r1, [sp, #12]
 800632e:	2a00      	cmp	r2, #0
 8006330:	db01      	blt.n	8006336 <_svfiprintf_r+0xfa>
 8006332:	9207      	str	r2, [sp, #28]
 8006334:	e004      	b.n	8006340 <_svfiprintf_r+0x104>
 8006336:	4252      	negs	r2, r2
 8006338:	f043 0302 	orr.w	r3, r3, #2
 800633c:	9207      	str	r2, [sp, #28]
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	783b      	ldrb	r3, [r7, #0]
 8006342:	2b2e      	cmp	r3, #46	; 0x2e
 8006344:	d10c      	bne.n	8006360 <_svfiprintf_r+0x124>
 8006346:	787b      	ldrb	r3, [r7, #1]
 8006348:	2b2a      	cmp	r3, #42	; 0x2a
 800634a:	d133      	bne.n	80063b4 <_svfiprintf_r+0x178>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	1d1a      	adds	r2, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	9203      	str	r2, [sp, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	bfb8      	it	lt
 8006358:	f04f 33ff 	movlt.w	r3, #4294967295
 800635c:	3702      	adds	r7, #2
 800635e:	9305      	str	r3, [sp, #20]
 8006360:	4d2e      	ldr	r5, [pc, #184]	; (800641c <_svfiprintf_r+0x1e0>)
 8006362:	7839      	ldrb	r1, [r7, #0]
 8006364:	2203      	movs	r2, #3
 8006366:	4628      	mov	r0, r5
 8006368:	f7f9 ff5a 	bl	8000220 <memchr>
 800636c:	b138      	cbz	r0, 800637e <_svfiprintf_r+0x142>
 800636e:	2340      	movs	r3, #64	; 0x40
 8006370:	1b40      	subs	r0, r0, r5
 8006372:	fa03 f000 	lsl.w	r0, r3, r0
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	4303      	orrs	r3, r0
 800637a:	3701      	adds	r7, #1
 800637c:	9304      	str	r3, [sp, #16]
 800637e:	7839      	ldrb	r1, [r7, #0]
 8006380:	4827      	ldr	r0, [pc, #156]	; (8006420 <_svfiprintf_r+0x1e4>)
 8006382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006386:	2206      	movs	r2, #6
 8006388:	1c7e      	adds	r6, r7, #1
 800638a:	f7f9 ff49 	bl	8000220 <memchr>
 800638e:	2800      	cmp	r0, #0
 8006390:	d038      	beq.n	8006404 <_svfiprintf_r+0x1c8>
 8006392:	4b24      	ldr	r3, [pc, #144]	; (8006424 <_svfiprintf_r+0x1e8>)
 8006394:	bb13      	cbnz	r3, 80063dc <_svfiprintf_r+0x1a0>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	3307      	adds	r3, #7
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	3308      	adds	r3, #8
 80063a0:	9303      	str	r3, [sp, #12]
 80063a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a4:	444b      	add	r3, r9
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
 80063a8:	e76d      	b.n	8006286 <_svfiprintf_r+0x4a>
 80063aa:	fb05 3202 	mla	r2, r5, r2, r3
 80063ae:	2001      	movs	r0, #1
 80063b0:	460f      	mov	r7, r1
 80063b2:	e7a6      	b.n	8006302 <_svfiprintf_r+0xc6>
 80063b4:	2300      	movs	r3, #0
 80063b6:	3701      	adds	r7, #1
 80063b8:	9305      	str	r3, [sp, #20]
 80063ba:	4619      	mov	r1, r3
 80063bc:	250a      	movs	r5, #10
 80063be:	4638      	mov	r0, r7
 80063c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c4:	3a30      	subs	r2, #48	; 0x30
 80063c6:	2a09      	cmp	r2, #9
 80063c8:	d903      	bls.n	80063d2 <_svfiprintf_r+0x196>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0c8      	beq.n	8006360 <_svfiprintf_r+0x124>
 80063ce:	9105      	str	r1, [sp, #20]
 80063d0:	e7c6      	b.n	8006360 <_svfiprintf_r+0x124>
 80063d2:	fb05 2101 	mla	r1, r5, r1, r2
 80063d6:	2301      	movs	r3, #1
 80063d8:	4607      	mov	r7, r0
 80063da:	e7f0      	b.n	80063be <_svfiprintf_r+0x182>
 80063dc:	ab03      	add	r3, sp, #12
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	4622      	mov	r2, r4
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <_svfiprintf_r+0x1ec>)
 80063e4:	a904      	add	r1, sp, #16
 80063e6:	4640      	mov	r0, r8
 80063e8:	f3af 8000 	nop.w
 80063ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063f0:	4681      	mov	r9, r0
 80063f2:	d1d6      	bne.n	80063a2 <_svfiprintf_r+0x166>
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	065b      	lsls	r3, r3, #25
 80063f8:	f53f af35 	bmi.w	8006266 <_svfiprintf_r+0x2a>
 80063fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063fe:	b01d      	add	sp, #116	; 0x74
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	ab03      	add	r3, sp, #12
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4622      	mov	r2, r4
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <_svfiprintf_r+0x1ec>)
 800640c:	a904      	add	r1, sp, #16
 800640e:	4640      	mov	r0, r8
 8006410:	f000 f882 	bl	8006518 <_printf_i>
 8006414:	e7ea      	b.n	80063ec <_svfiprintf_r+0x1b0>
 8006416:	bf00      	nop
 8006418:	08006eac 	.word	0x08006eac
 800641c:	08006eb2 	.word	0x08006eb2
 8006420:	08006eb6 	.word	0x08006eb6
 8006424:	00000000 	.word	0x00000000
 8006428:	08006189 	.word	0x08006189

0800642c <_printf_common>:
 800642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	4691      	mov	r9, r2
 8006432:	461f      	mov	r7, r3
 8006434:	688a      	ldr	r2, [r1, #8]
 8006436:	690b      	ldr	r3, [r1, #16]
 8006438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800643c:	4293      	cmp	r3, r2
 800643e:	bfb8      	it	lt
 8006440:	4613      	movlt	r3, r2
 8006442:	f8c9 3000 	str.w	r3, [r9]
 8006446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800644a:	4606      	mov	r6, r0
 800644c:	460c      	mov	r4, r1
 800644e:	b112      	cbz	r2, 8006456 <_printf_common+0x2a>
 8006450:	3301      	adds	r3, #1
 8006452:	f8c9 3000 	str.w	r3, [r9]
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	0699      	lsls	r1, r3, #26
 800645a:	bf42      	ittt	mi
 800645c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006460:	3302      	addmi	r3, #2
 8006462:	f8c9 3000 	strmi.w	r3, [r9]
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	f015 0506 	ands.w	r5, r5, #6
 800646c:	d107      	bne.n	800647e <_printf_common+0x52>
 800646e:	f104 0a19 	add.w	sl, r4, #25
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	f8d9 2000 	ldr.w	r2, [r9]
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	42ab      	cmp	r3, r5
 800647c:	dc28      	bgt.n	80064d0 <_printf_common+0xa4>
 800647e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	3300      	adds	r3, #0
 8006486:	bf18      	it	ne
 8006488:	2301      	movne	r3, #1
 800648a:	0692      	lsls	r2, r2, #26
 800648c:	d42d      	bmi.n	80064ea <_printf_common+0xbe>
 800648e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006492:	4639      	mov	r1, r7
 8006494:	4630      	mov	r0, r6
 8006496:	47c0      	blx	r8
 8006498:	3001      	adds	r0, #1
 800649a:	d020      	beq.n	80064de <_printf_common+0xb2>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	68e5      	ldr	r5, [r4, #12]
 80064a0:	f8d9 2000 	ldr.w	r2, [r9]
 80064a4:	f003 0306 	and.w	r3, r3, #6
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	bf08      	it	eq
 80064ac:	1aad      	subeq	r5, r5, r2
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	bf0c      	ite	eq
 80064b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b8:	2500      	movne	r5, #0
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bfc4      	itt	gt
 80064be:	1a9b      	subgt	r3, r3, r2
 80064c0:	18ed      	addgt	r5, r5, r3
 80064c2:	f04f 0900 	mov.w	r9, #0
 80064c6:	341a      	adds	r4, #26
 80064c8:	454d      	cmp	r5, r9
 80064ca:	d11a      	bne.n	8006502 <_printf_common+0xd6>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e008      	b.n	80064e2 <_printf_common+0xb6>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4652      	mov	r2, sl
 80064d4:	4639      	mov	r1, r7
 80064d6:	4630      	mov	r0, r6
 80064d8:	47c0      	blx	r8
 80064da:	3001      	adds	r0, #1
 80064dc:	d103      	bne.n	80064e6 <_printf_common+0xba>
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e6:	3501      	adds	r5, #1
 80064e8:	e7c3      	b.n	8006472 <_printf_common+0x46>
 80064ea:	18e1      	adds	r1, r4, r3
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	2030      	movs	r0, #48	; 0x30
 80064f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064f4:	4422      	add	r2, r4
 80064f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064fe:	3302      	adds	r3, #2
 8006500:	e7c5      	b.n	800648e <_printf_common+0x62>
 8006502:	2301      	movs	r3, #1
 8006504:	4622      	mov	r2, r4
 8006506:	4639      	mov	r1, r7
 8006508:	4630      	mov	r0, r6
 800650a:	47c0      	blx	r8
 800650c:	3001      	adds	r0, #1
 800650e:	d0e6      	beq.n	80064de <_printf_common+0xb2>
 8006510:	f109 0901 	add.w	r9, r9, #1
 8006514:	e7d8      	b.n	80064c8 <_printf_common+0x9c>
	...

08006518 <_printf_i>:
 8006518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800651c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006520:	460c      	mov	r4, r1
 8006522:	7e09      	ldrb	r1, [r1, #24]
 8006524:	b085      	sub	sp, #20
 8006526:	296e      	cmp	r1, #110	; 0x6e
 8006528:	4617      	mov	r7, r2
 800652a:	4606      	mov	r6, r0
 800652c:	4698      	mov	r8, r3
 800652e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006530:	f000 80b3 	beq.w	800669a <_printf_i+0x182>
 8006534:	d822      	bhi.n	800657c <_printf_i+0x64>
 8006536:	2963      	cmp	r1, #99	; 0x63
 8006538:	d036      	beq.n	80065a8 <_printf_i+0x90>
 800653a:	d80a      	bhi.n	8006552 <_printf_i+0x3a>
 800653c:	2900      	cmp	r1, #0
 800653e:	f000 80b9 	beq.w	80066b4 <_printf_i+0x19c>
 8006542:	2958      	cmp	r1, #88	; 0x58
 8006544:	f000 8083 	beq.w	800664e <_printf_i+0x136>
 8006548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800654c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006550:	e032      	b.n	80065b8 <_printf_i+0xa0>
 8006552:	2964      	cmp	r1, #100	; 0x64
 8006554:	d001      	beq.n	800655a <_printf_i+0x42>
 8006556:	2969      	cmp	r1, #105	; 0x69
 8006558:	d1f6      	bne.n	8006548 <_printf_i+0x30>
 800655a:	6820      	ldr	r0, [r4, #0]
 800655c:	6813      	ldr	r3, [r2, #0]
 800655e:	0605      	lsls	r5, r0, #24
 8006560:	f103 0104 	add.w	r1, r3, #4
 8006564:	d52a      	bpl.n	80065bc <_printf_i+0xa4>
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6011      	str	r1, [r2, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	da03      	bge.n	8006576 <_printf_i+0x5e>
 800656e:	222d      	movs	r2, #45	; 0x2d
 8006570:	425b      	negs	r3, r3
 8006572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006576:	486f      	ldr	r0, [pc, #444]	; (8006734 <_printf_i+0x21c>)
 8006578:	220a      	movs	r2, #10
 800657a:	e039      	b.n	80065f0 <_printf_i+0xd8>
 800657c:	2973      	cmp	r1, #115	; 0x73
 800657e:	f000 809d 	beq.w	80066bc <_printf_i+0x1a4>
 8006582:	d808      	bhi.n	8006596 <_printf_i+0x7e>
 8006584:	296f      	cmp	r1, #111	; 0x6f
 8006586:	d020      	beq.n	80065ca <_printf_i+0xb2>
 8006588:	2970      	cmp	r1, #112	; 0x70
 800658a:	d1dd      	bne.n	8006548 <_printf_i+0x30>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	f043 0320 	orr.w	r3, r3, #32
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	e003      	b.n	800659e <_printf_i+0x86>
 8006596:	2975      	cmp	r1, #117	; 0x75
 8006598:	d017      	beq.n	80065ca <_printf_i+0xb2>
 800659a:	2978      	cmp	r1, #120	; 0x78
 800659c:	d1d4      	bne.n	8006548 <_printf_i+0x30>
 800659e:	2378      	movs	r3, #120	; 0x78
 80065a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065a4:	4864      	ldr	r0, [pc, #400]	; (8006738 <_printf_i+0x220>)
 80065a6:	e055      	b.n	8006654 <_printf_i+0x13c>
 80065a8:	6813      	ldr	r3, [r2, #0]
 80065aa:	1d19      	adds	r1, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6011      	str	r1, [r2, #0]
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b8:	2301      	movs	r3, #1
 80065ba:	e08c      	b.n	80066d6 <_printf_i+0x1be>
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6011      	str	r1, [r2, #0]
 80065c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065c4:	bf18      	it	ne
 80065c6:	b21b      	sxthne	r3, r3
 80065c8:	e7cf      	b.n	800656a <_printf_i+0x52>
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	6825      	ldr	r5, [r4, #0]
 80065ce:	1d18      	adds	r0, r3, #4
 80065d0:	6010      	str	r0, [r2, #0]
 80065d2:	0628      	lsls	r0, r5, #24
 80065d4:	d501      	bpl.n	80065da <_printf_i+0xc2>
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	e002      	b.n	80065e0 <_printf_i+0xc8>
 80065da:	0668      	lsls	r0, r5, #25
 80065dc:	d5fb      	bpl.n	80065d6 <_printf_i+0xbe>
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	4854      	ldr	r0, [pc, #336]	; (8006734 <_printf_i+0x21c>)
 80065e2:	296f      	cmp	r1, #111	; 0x6f
 80065e4:	bf14      	ite	ne
 80065e6:	220a      	movne	r2, #10
 80065e8:	2208      	moveq	r2, #8
 80065ea:	2100      	movs	r1, #0
 80065ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065f0:	6865      	ldr	r5, [r4, #4]
 80065f2:	60a5      	str	r5, [r4, #8]
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	f2c0 8095 	blt.w	8006724 <_printf_i+0x20c>
 80065fa:	6821      	ldr	r1, [r4, #0]
 80065fc:	f021 0104 	bic.w	r1, r1, #4
 8006600:	6021      	str	r1, [r4, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d13d      	bne.n	8006682 <_printf_i+0x16a>
 8006606:	2d00      	cmp	r5, #0
 8006608:	f040 808e 	bne.w	8006728 <_printf_i+0x210>
 800660c:	4665      	mov	r5, ip
 800660e:	2a08      	cmp	r2, #8
 8006610:	d10b      	bne.n	800662a <_printf_i+0x112>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	07db      	lsls	r3, r3, #31
 8006616:	d508      	bpl.n	800662a <_printf_i+0x112>
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	6862      	ldr	r2, [r4, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	bfde      	ittt	le
 8006620:	2330      	movle	r3, #48	; 0x30
 8006622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800662a:	ebac 0305 	sub.w	r3, ip, r5
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	f8cd 8000 	str.w	r8, [sp]
 8006634:	463b      	mov	r3, r7
 8006636:	aa03      	add	r2, sp, #12
 8006638:	4621      	mov	r1, r4
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff fef6 	bl	800642c <_printf_common>
 8006640:	3001      	adds	r0, #1
 8006642:	d14d      	bne.n	80066e0 <_printf_i+0x1c8>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	b005      	add	sp, #20
 800664a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800664e:	4839      	ldr	r0, [pc, #228]	; (8006734 <_printf_i+0x21c>)
 8006650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006654:	6813      	ldr	r3, [r2, #0]
 8006656:	6821      	ldr	r1, [r4, #0]
 8006658:	1d1d      	adds	r5, r3, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6015      	str	r5, [r2, #0]
 800665e:	060a      	lsls	r2, r1, #24
 8006660:	d50b      	bpl.n	800667a <_printf_i+0x162>
 8006662:	07ca      	lsls	r2, r1, #31
 8006664:	bf44      	itt	mi
 8006666:	f041 0120 	orrmi.w	r1, r1, #32
 800666a:	6021      	strmi	r1, [r4, #0]
 800666c:	b91b      	cbnz	r3, 8006676 <_printf_i+0x15e>
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	f022 0220 	bic.w	r2, r2, #32
 8006674:	6022      	str	r2, [r4, #0]
 8006676:	2210      	movs	r2, #16
 8006678:	e7b7      	b.n	80065ea <_printf_i+0xd2>
 800667a:	064d      	lsls	r5, r1, #25
 800667c:	bf48      	it	mi
 800667e:	b29b      	uxthmi	r3, r3
 8006680:	e7ef      	b.n	8006662 <_printf_i+0x14a>
 8006682:	4665      	mov	r5, ip
 8006684:	fbb3 f1f2 	udiv	r1, r3, r2
 8006688:	fb02 3311 	mls	r3, r2, r1, r3
 800668c:	5cc3      	ldrb	r3, [r0, r3]
 800668e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006692:	460b      	mov	r3, r1
 8006694:	2900      	cmp	r1, #0
 8006696:	d1f5      	bne.n	8006684 <_printf_i+0x16c>
 8006698:	e7b9      	b.n	800660e <_printf_i+0xf6>
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	6825      	ldr	r5, [r4, #0]
 800669e:	6961      	ldr	r1, [r4, #20]
 80066a0:	1d18      	adds	r0, r3, #4
 80066a2:	6010      	str	r0, [r2, #0]
 80066a4:	0628      	lsls	r0, r5, #24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	d501      	bpl.n	80066ae <_printf_i+0x196>
 80066aa:	6019      	str	r1, [r3, #0]
 80066ac:	e002      	b.n	80066b4 <_printf_i+0x19c>
 80066ae:	066a      	lsls	r2, r5, #25
 80066b0:	d5fb      	bpl.n	80066aa <_printf_i+0x192>
 80066b2:	8019      	strh	r1, [r3, #0]
 80066b4:	2300      	movs	r3, #0
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	4665      	mov	r5, ip
 80066ba:	e7b9      	b.n	8006630 <_printf_i+0x118>
 80066bc:	6813      	ldr	r3, [r2, #0]
 80066be:	1d19      	adds	r1, r3, #4
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	681d      	ldr	r5, [r3, #0]
 80066c4:	6862      	ldr	r2, [r4, #4]
 80066c6:	2100      	movs	r1, #0
 80066c8:	4628      	mov	r0, r5
 80066ca:	f7f9 fda9 	bl	8000220 <memchr>
 80066ce:	b108      	cbz	r0, 80066d4 <_printf_i+0x1bc>
 80066d0:	1b40      	subs	r0, r0, r5
 80066d2:	6060      	str	r0, [r4, #4]
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	6123      	str	r3, [r4, #16]
 80066d8:	2300      	movs	r3, #0
 80066da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066de:	e7a7      	b.n	8006630 <_printf_i+0x118>
 80066e0:	6923      	ldr	r3, [r4, #16]
 80066e2:	462a      	mov	r2, r5
 80066e4:	4639      	mov	r1, r7
 80066e6:	4630      	mov	r0, r6
 80066e8:	47c0      	blx	r8
 80066ea:	3001      	adds	r0, #1
 80066ec:	d0aa      	beq.n	8006644 <_printf_i+0x12c>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	079b      	lsls	r3, r3, #30
 80066f2:	d413      	bmi.n	800671c <_printf_i+0x204>
 80066f4:	68e0      	ldr	r0, [r4, #12]
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	4298      	cmp	r0, r3
 80066fa:	bfb8      	it	lt
 80066fc:	4618      	movlt	r0, r3
 80066fe:	e7a3      	b.n	8006648 <_printf_i+0x130>
 8006700:	2301      	movs	r3, #1
 8006702:	464a      	mov	r2, r9
 8006704:	4639      	mov	r1, r7
 8006706:	4630      	mov	r0, r6
 8006708:	47c0      	blx	r8
 800670a:	3001      	adds	r0, #1
 800670c:	d09a      	beq.n	8006644 <_printf_i+0x12c>
 800670e:	3501      	adds	r5, #1
 8006710:	68e3      	ldr	r3, [r4, #12]
 8006712:	9a03      	ldr	r2, [sp, #12]
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	42ab      	cmp	r3, r5
 8006718:	dcf2      	bgt.n	8006700 <_printf_i+0x1e8>
 800671a:	e7eb      	b.n	80066f4 <_printf_i+0x1dc>
 800671c:	2500      	movs	r5, #0
 800671e:	f104 0919 	add.w	r9, r4, #25
 8006722:	e7f5      	b.n	8006710 <_printf_i+0x1f8>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ac      	bne.n	8006682 <_printf_i+0x16a>
 8006728:	7803      	ldrb	r3, [r0, #0]
 800672a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800672e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006732:	e76c      	b.n	800660e <_printf_i+0xf6>
 8006734:	08006ebd 	.word	0x08006ebd
 8006738:	08006ece 	.word	0x08006ece

0800673c <memmove>:
 800673c:	4288      	cmp	r0, r1
 800673e:	b510      	push	{r4, lr}
 8006740:	eb01 0302 	add.w	r3, r1, r2
 8006744:	d807      	bhi.n	8006756 <memmove+0x1a>
 8006746:	1e42      	subs	r2, r0, #1
 8006748:	4299      	cmp	r1, r3
 800674a:	d00a      	beq.n	8006762 <memmove+0x26>
 800674c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006750:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006754:	e7f8      	b.n	8006748 <memmove+0xc>
 8006756:	4283      	cmp	r3, r0
 8006758:	d9f5      	bls.n	8006746 <memmove+0xa>
 800675a:	1881      	adds	r1, r0, r2
 800675c:	1ad2      	subs	r2, r2, r3
 800675e:	42d3      	cmn	r3, r2
 8006760:	d100      	bne.n	8006764 <memmove+0x28>
 8006762:	bd10      	pop	{r4, pc}
 8006764:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006768:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800676c:	e7f7      	b.n	800675e <memmove+0x22>
	...

08006770 <_free_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4605      	mov	r5, r0
 8006774:	2900      	cmp	r1, #0
 8006776:	d045      	beq.n	8006804 <_free_r+0x94>
 8006778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800677c:	1f0c      	subs	r4, r1, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	bfb8      	it	lt
 8006782:	18e4      	addlt	r4, r4, r3
 8006784:	f000 f8d2 	bl	800692c <__malloc_lock>
 8006788:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <_free_r+0x98>)
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	4610      	mov	r0, r2
 800678e:	b933      	cbnz	r3, 800679e <_free_r+0x2e>
 8006790:	6063      	str	r3, [r4, #4]
 8006792:	6014      	str	r4, [r2, #0]
 8006794:	4628      	mov	r0, r5
 8006796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800679a:	f000 b8c8 	b.w	800692e <__malloc_unlock>
 800679e:	42a3      	cmp	r3, r4
 80067a0:	d90c      	bls.n	80067bc <_free_r+0x4c>
 80067a2:	6821      	ldr	r1, [r4, #0]
 80067a4:	1862      	adds	r2, r4, r1
 80067a6:	4293      	cmp	r3, r2
 80067a8:	bf04      	itt	eq
 80067aa:	681a      	ldreq	r2, [r3, #0]
 80067ac:	685b      	ldreq	r3, [r3, #4]
 80067ae:	6063      	str	r3, [r4, #4]
 80067b0:	bf04      	itt	eq
 80067b2:	1852      	addeq	r2, r2, r1
 80067b4:	6022      	streq	r2, [r4, #0]
 80067b6:	6004      	str	r4, [r0, #0]
 80067b8:	e7ec      	b.n	8006794 <_free_r+0x24>
 80067ba:	4613      	mov	r3, r2
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	b10a      	cbz	r2, 80067c4 <_free_r+0x54>
 80067c0:	42a2      	cmp	r2, r4
 80067c2:	d9fa      	bls.n	80067ba <_free_r+0x4a>
 80067c4:	6819      	ldr	r1, [r3, #0]
 80067c6:	1858      	adds	r0, r3, r1
 80067c8:	42a0      	cmp	r0, r4
 80067ca:	d10b      	bne.n	80067e4 <_free_r+0x74>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	4401      	add	r1, r0
 80067d0:	1858      	adds	r0, r3, r1
 80067d2:	4282      	cmp	r2, r0
 80067d4:	6019      	str	r1, [r3, #0]
 80067d6:	d1dd      	bne.n	8006794 <_free_r+0x24>
 80067d8:	6810      	ldr	r0, [r2, #0]
 80067da:	6852      	ldr	r2, [r2, #4]
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	4401      	add	r1, r0
 80067e0:	6019      	str	r1, [r3, #0]
 80067e2:	e7d7      	b.n	8006794 <_free_r+0x24>
 80067e4:	d902      	bls.n	80067ec <_free_r+0x7c>
 80067e6:	230c      	movs	r3, #12
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	e7d3      	b.n	8006794 <_free_r+0x24>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	1821      	adds	r1, r4, r0
 80067f0:	428a      	cmp	r2, r1
 80067f2:	bf04      	itt	eq
 80067f4:	6811      	ldreq	r1, [r2, #0]
 80067f6:	6852      	ldreq	r2, [r2, #4]
 80067f8:	6062      	str	r2, [r4, #4]
 80067fa:	bf04      	itt	eq
 80067fc:	1809      	addeq	r1, r1, r0
 80067fe:	6021      	streq	r1, [r4, #0]
 8006800:	605c      	str	r4, [r3, #4]
 8006802:	e7c7      	b.n	8006794 <_free_r+0x24>
 8006804:	bd38      	pop	{r3, r4, r5, pc}
 8006806:	bf00      	nop
 8006808:	20000a10 	.word	0x20000a10

0800680c <_malloc_r>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	1ccd      	adds	r5, r1, #3
 8006810:	f025 0503 	bic.w	r5, r5, #3
 8006814:	3508      	adds	r5, #8
 8006816:	2d0c      	cmp	r5, #12
 8006818:	bf38      	it	cc
 800681a:	250c      	movcc	r5, #12
 800681c:	2d00      	cmp	r5, #0
 800681e:	4606      	mov	r6, r0
 8006820:	db01      	blt.n	8006826 <_malloc_r+0x1a>
 8006822:	42a9      	cmp	r1, r5
 8006824:	d903      	bls.n	800682e <_malloc_r+0x22>
 8006826:	230c      	movs	r3, #12
 8006828:	6033      	str	r3, [r6, #0]
 800682a:	2000      	movs	r0, #0
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	f000 f87d 	bl	800692c <__malloc_lock>
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <_malloc_r+0xac>)
 8006834:	6814      	ldr	r4, [r2, #0]
 8006836:	4621      	mov	r1, r4
 8006838:	b991      	cbnz	r1, 8006860 <_malloc_r+0x54>
 800683a:	4c20      	ldr	r4, [pc, #128]	; (80068bc <_malloc_r+0xb0>)
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	b91b      	cbnz	r3, 8006848 <_malloc_r+0x3c>
 8006840:	4630      	mov	r0, r6
 8006842:	f000 f863 	bl	800690c <_sbrk_r>
 8006846:	6020      	str	r0, [r4, #0]
 8006848:	4629      	mov	r1, r5
 800684a:	4630      	mov	r0, r6
 800684c:	f000 f85e 	bl	800690c <_sbrk_r>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d124      	bne.n	800689e <_malloc_r+0x92>
 8006854:	230c      	movs	r3, #12
 8006856:	6033      	str	r3, [r6, #0]
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f868 	bl	800692e <__malloc_unlock>
 800685e:	e7e4      	b.n	800682a <_malloc_r+0x1e>
 8006860:	680b      	ldr	r3, [r1, #0]
 8006862:	1b5b      	subs	r3, r3, r5
 8006864:	d418      	bmi.n	8006898 <_malloc_r+0x8c>
 8006866:	2b0b      	cmp	r3, #11
 8006868:	d90f      	bls.n	800688a <_malloc_r+0x7e>
 800686a:	600b      	str	r3, [r1, #0]
 800686c:	50cd      	str	r5, [r1, r3]
 800686e:	18cc      	adds	r4, r1, r3
 8006870:	4630      	mov	r0, r6
 8006872:	f000 f85c 	bl	800692e <__malloc_unlock>
 8006876:	f104 000b 	add.w	r0, r4, #11
 800687a:	1d23      	adds	r3, r4, #4
 800687c:	f020 0007 	bic.w	r0, r0, #7
 8006880:	1ac3      	subs	r3, r0, r3
 8006882:	d0d3      	beq.n	800682c <_malloc_r+0x20>
 8006884:	425a      	negs	r2, r3
 8006886:	50e2      	str	r2, [r4, r3]
 8006888:	e7d0      	b.n	800682c <_malloc_r+0x20>
 800688a:	428c      	cmp	r4, r1
 800688c:	684b      	ldr	r3, [r1, #4]
 800688e:	bf16      	itet	ne
 8006890:	6063      	strne	r3, [r4, #4]
 8006892:	6013      	streq	r3, [r2, #0]
 8006894:	460c      	movne	r4, r1
 8006896:	e7eb      	b.n	8006870 <_malloc_r+0x64>
 8006898:	460c      	mov	r4, r1
 800689a:	6849      	ldr	r1, [r1, #4]
 800689c:	e7cc      	b.n	8006838 <_malloc_r+0x2c>
 800689e:	1cc4      	adds	r4, r0, #3
 80068a0:	f024 0403 	bic.w	r4, r4, #3
 80068a4:	42a0      	cmp	r0, r4
 80068a6:	d005      	beq.n	80068b4 <_malloc_r+0xa8>
 80068a8:	1a21      	subs	r1, r4, r0
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 f82e 	bl	800690c <_sbrk_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d0cf      	beq.n	8006854 <_malloc_r+0x48>
 80068b4:	6025      	str	r5, [r4, #0]
 80068b6:	e7db      	b.n	8006870 <_malloc_r+0x64>
 80068b8:	20000a10 	.word	0x20000a10
 80068bc:	20000a14 	.word	0x20000a14

080068c0 <_realloc_r>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	4607      	mov	r7, r0
 80068c4:	4614      	mov	r4, r2
 80068c6:	460e      	mov	r6, r1
 80068c8:	b921      	cbnz	r1, 80068d4 <_realloc_r+0x14>
 80068ca:	4611      	mov	r1, r2
 80068cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068d0:	f7ff bf9c 	b.w	800680c <_malloc_r>
 80068d4:	b922      	cbnz	r2, 80068e0 <_realloc_r+0x20>
 80068d6:	f7ff ff4b 	bl	8006770 <_free_r>
 80068da:	4625      	mov	r5, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e0:	f000 f826 	bl	8006930 <_malloc_usable_size_r>
 80068e4:	42a0      	cmp	r0, r4
 80068e6:	d20f      	bcs.n	8006908 <_realloc_r+0x48>
 80068e8:	4621      	mov	r1, r4
 80068ea:	4638      	mov	r0, r7
 80068ec:	f7ff ff8e 	bl	800680c <_malloc_r>
 80068f0:	4605      	mov	r5, r0
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0f2      	beq.n	80068dc <_realloc_r+0x1c>
 80068f6:	4631      	mov	r1, r6
 80068f8:	4622      	mov	r2, r4
 80068fa:	f7ff fc11 	bl	8006120 <memcpy>
 80068fe:	4631      	mov	r1, r6
 8006900:	4638      	mov	r0, r7
 8006902:	f7ff ff35 	bl	8006770 <_free_r>
 8006906:	e7e9      	b.n	80068dc <_realloc_r+0x1c>
 8006908:	4635      	mov	r5, r6
 800690a:	e7e7      	b.n	80068dc <_realloc_r+0x1c>

0800690c <_sbrk_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4c06      	ldr	r4, [pc, #24]	; (8006928 <_sbrk_r+0x1c>)
 8006910:	2300      	movs	r3, #0
 8006912:	4605      	mov	r5, r0
 8006914:	4608      	mov	r0, r1
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	f7fc f926 	bl	8002b68 <_sbrk>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_sbrk_r+0x1a>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	b103      	cbz	r3, 8006926 <_sbrk_r+0x1a>
 8006924:	602b      	str	r3, [r5, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	2000530c 	.word	0x2000530c

0800692c <__malloc_lock>:
 800692c:	4770      	bx	lr

0800692e <__malloc_unlock>:
 800692e:	4770      	bx	lr

08006930 <_malloc_usable_size_r>:
 8006930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006934:	1f18      	subs	r0, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	bfbc      	itt	lt
 800693a:	580b      	ldrlt	r3, [r1, r0]
 800693c:	18c0      	addlt	r0, r0, r3
 800693e:	4770      	bx	lr

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
