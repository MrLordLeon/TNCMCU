
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007874  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08007a48  08007a48  00017a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e48  08007e48  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e48  08007e48  00017e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e50  08007e50  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d18  2000007c  08007ed4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d94  08007ed4  00024d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ced  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024eb  00000000  00000000  00030d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  00034108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e83  00000000  00000000  00034e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b88a  00000000  00000000  00057d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d25be  00000000  00000000  00063595  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135b53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004528  00000000  00000000  00135bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a2c 	.word	0x08007a2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007a2c 	.word	0x08007a2c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <test_ax25>:
		}
		HAL_Delay(1000);
	}
}

void test_ax25(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
	//Create a local packet reference pointer
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000f2e:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <test_ax25+0x138>)
 8000f30:	607b      	str	r3, [r7, #4]

	//Setting AX25
	set_packet_pointer_AX25();
 8000f32:	f000 fad9 	bl	80014e8 <set_packet_pointer_AX25>

	//Get pointer for array
	bool *curr_mem = &local_packet->AX25_PACKET;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	61fb      	str	r3, [r7, #28]
	local_packet->control[0] = 0;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8000f40:	331c      	adds	r3, #28
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]

	//Assign values to address field
	for(int i = 0;i<address_len;i++){
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	e012      	b.n	8000f74 <test_ax25+0x4c>
		*(curr_mem) = i%2;
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	bfb8      	it	lt
 8000f58:	425b      	neglt	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	701a      	strb	r2, [r3, #0]
		curr_mem++;
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]
	for(int i = 0;i<address_len;i++){
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b6f      	cmp	r3, #111	; 0x6f
 8000f78:	dde9      	ble.n	8000f4e <test_ax25+0x26>
	}

	//Assign values to control field
	for(int i = 0;i<control_len;i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e012      	b.n	8000fa6 <test_ax25+0x7e>
		*(curr_mem) = i%2;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	bfb8      	it	lt
 8000f8a:	425b      	neglt	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	701a      	strb	r2, [r3, #0]
		curr_mem++;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
	for(int i = 0;i<control_len;i++){
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	dde9      	ble.n	8000f80 <test_ax25+0x58>
	}

	//Assign values to PID field
	for(int i = 0;i<PID_len;i++){
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e012      	b.n	8000fd8 <test_ax25+0xb0>
		*(curr_mem) = i%2;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	bfb8      	it	lt
 8000fbc:	425b      	neglt	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	701a      	strb	r2, [r3, #0]
		curr_mem++;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
	for(int i = 0;i<PID_len;i++){
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	dde9      	ble.n	8000fb2 <test_ax25+0x8a>
	}

	//Assign values to Info field
	for(int i = 0;i<MAX_INFO;i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e012      	b.n	800100a <test_ax25+0xe2>
		*(curr_mem) = i%2;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	bfb8      	it	lt
 8000fee:	425b      	neglt	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	701a      	strb	r2, [r3, #0]
		curr_mem++;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
	for(int i = 0;i<MAX_INFO;i++){
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001010:	dbe8      	blt.n	8000fe4 <test_ax25+0xbc>
	}

	//Assign values to FCS field
	for(int i = 0;i<FCS_len;i++){
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	e012      	b.n	800103e <test_ax25+0x116>
		*(curr_mem) = i%2;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	bfb8      	it	lt
 8001022:	425b      	neglt	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2da      	uxtb	r2, r3
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	701a      	strb	r2, [r3, #0]
		curr_mem++;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
	for(int i = 0;i<FCS_len;i++){
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3301      	adds	r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	dde9      	ble.n	8001018 <test_ax25+0xf0>
	}

	rxBit_count = address_len + control_len + PID_len + MAX_INFO +FCS_len;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <test_ax25+0x13c>)
 8001046:	f44f 6209 	mov.w	r2, #2192	; 0x890
 800104a:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f001 fb99 	bl	8002784 <HAL_Delay>
	receiving_AX25();
 8001052:	f000 f865 	bl	8001120 <receiving_AX25>
}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000b0 	.word	0x200000b0
 8001064:	20000098 	.word	0x20000098

08001068 <generate_address>:

void generate_address(){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
	for(int i = 0; i < address_len/2;i++){
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	e00f      	b.n	8001094 <generate_address+0x2c>
		local_address[i] = (i%2) ? true : false;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	bf14      	ite	ne
 800107e:	2301      	movne	r3, #1
 8001080:	2300      	moveq	r3, #0
 8001082:	b2d9      	uxtb	r1, r3
 8001084:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <generate_address+0x40>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	460a      	mov	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < address_len/2;i++){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b37      	cmp	r3, #55	; 0x37
 8001098:	ddec      	ble.n	8001074 <generate_address+0xc>
	}
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20001c58 	.word	0x20001c58

080010ac <compare_address>:

bool compare_address(bool *addr){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	generate_address();
 80010b4:	f7ff ffd8 	bl	8001068 <generate_address>
	for(int i = 0;i < address_len/2;i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e00e      	b.n	80010dc <compare_address+0x30>
		if(addr[i] != local_address[i]){
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	4909      	ldr	r1, [pc, #36]	; (80010ec <compare_address+0x40>)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	440b      	add	r3, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d001      	beq.n	80010d6 <compare_address+0x2a>
			return false;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e006      	b.n	80010e4 <compare_address+0x38>
	for(int i = 0;i < address_len/2;i++){
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b37      	cmp	r3, #55	; 0x37
 80010e0:	dded      	ble.n	80010be <compare_address+0x12>
		}
	}
	return true;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20001c58 	.word	0x20001c58

080010f0 <transmitting_KISS>:
	bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS,1);			//msb first

	bitToAudio(AX25TBYTE, FLAG_SIZE,1);//stop flag
}

void transmitting_KISS(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	//do stuff to send kiss... LOOKING AT YOU KALEB
	// IT IS HERE

	struct PACKET_STRUCT* local_packet = &global_packet;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <transmitting_KISS+0x28>)
 80010f8:	607b      	str	r3, [r7, #4]

	HAL_UART_Transmit(&huart2, local_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f503 5197 	add.w	r1, r3, #4832	; 0x12e0
 8001100:	310f      	adds	r1, #15
 8001102:	230a      	movs	r3, #10
 8001104:	f44f 6209 	mov.w	r2, #2192	; 0x890
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <transmitting_KISS+0x2c>)
 800110a:	f003 fc1c 	bl	8004946 <HAL_UART_Transmit>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b0 	.word	0x200000b0
 800111c:	20003d4c 	.word	0x20003d4c

08001120 <receiving_AX25>:

//AX.25 to KISS data flow
//****************************************************************************************************************
void receiving_AX25(){
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8001126:	4aa0      	ldr	r2, [pc, #640]	; (80013a8 <receiving_AX25+0x288>)
 8001128:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <receiving_AX25+0x28c>)
 800112a:	4615      	mov	r5, r2
 800112c:	461c      	mov	r4, r3
 800112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001130:	6028      	str	r0, [r5, #0]
 8001132:	6069      	str	r1, [r5, #4]
 8001134:	60aa      	str	r2, [r5, #8]
 8001136:	60eb      	str	r3, [r5, #12]
 8001138:	cc03      	ldmia	r4!, {r0, r1}
 800113a:	6128      	str	r0, [r5, #16]
 800113c:	6169      	str	r1, [r5, #20]
 800113e:	7823      	ldrb	r3, [r4, #0]
 8001140:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001142:	4899      	ldr	r0, [pc, #612]	; (80013a8 <receiving_AX25+0x288>)
 8001144:	f7ff f864 	bl	8000210 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	230a      	movs	r3, #10
 800114e:	4996      	ldr	r1, [pc, #600]	; (80013a8 <receiving_AX25+0x288>)
 8001150:	4897      	ldr	r0, [pc, #604]	; (80013b0 <receiving_AX25+0x290>)
 8001152:	f003 fbf8 	bl	8004946 <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001156:	4b97      	ldr	r3, [pc, #604]	; (80013b4 <receiving_AX25+0x294>)
 8001158:	60fb      	str	r3, [r7, #12]

	int packet_status;
	//packet_status = streamGet();

	packet_status = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
	sprintf(uartData, "Defaulting packet_status to 1 \n");
 800115e:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <receiving_AX25+0x288>)
 8001160:	4b95      	ldr	r3, [pc, #596]	; (80013b8 <receiving_AX25+0x298>)
 8001162:	4614      	mov	r4, r2
 8001164:	461d      	mov	r5, r3
 8001166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001168:	6020      	str	r0, [r4, #0]
 800116a:	6061      	str	r1, [r4, #4]
 800116c:	60a2      	str	r2, [r4, #8]
 800116e:	60e3      	str	r3, [r4, #12]
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	6120      	str	r0, [r4, #16]
 8001174:	6161      	str	r1, [r4, #20]
 8001176:	61a2      	str	r2, [r4, #24]
 8001178:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800117a:	488b      	ldr	r0, [pc, #556]	; (80013a8 <receiving_AX25+0x288>)
 800117c:	f7ff f848 	bl	8000210 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	230a      	movs	r3, #10
 8001186:	4988      	ldr	r1, [pc, #544]	; (80013a8 <receiving_AX25+0x288>)
 8001188:	4889      	ldr	r0, [pc, #548]	; (80013b0 <receiving_AX25+0x290>)
 800118a:	f003 fbdc 	bl	8004946 <HAL_UART_Transmit>

	//Valid packet received
	if(packet_status == 1){
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	f040 80c1 	bne.w	8001318 <receiving_AX25+0x1f8>
		sprintf(uartData, "Removing bit stuffed zeros\n");
 8001196:	4a84      	ldr	r2, [pc, #528]	; (80013a8 <receiving_AX25+0x288>)
 8001198:	4b88      	ldr	r3, [pc, #544]	; (80013bc <receiving_AX25+0x29c>)
 800119a:	4615      	mov	r5, r2
 800119c:	461c      	mov	r4, r3
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	6028      	str	r0, [r5, #0]
 80011a2:	6069      	str	r1, [r5, #4]
 80011a4:	60aa      	str	r2, [r5, #8]
 80011a6:	60eb      	str	r3, [r5, #12]
 80011a8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80011aa:	6128      	str	r0, [r5, #16]
 80011ac:	6169      	str	r1, [r5, #20]
 80011ae:	61aa      	str	r2, [r5, #24]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011b0:	487d      	ldr	r0, [pc, #500]	; (80013a8 <receiving_AX25+0x288>)
 80011b2:	f7ff f82d 	bl	8000210 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	230a      	movs	r3, #10
 80011bc:	497a      	ldr	r1, [pc, #488]	; (80013a8 <receiving_AX25+0x288>)
 80011be:	487c      	ldr	r0, [pc, #496]	; (80013b0 <receiving_AX25+0x290>)
 80011c0:	f003 fbc1 	bl	8004946 <HAL_UART_Transmit>
		//Remove the bit stuffed zeros from received packet and reset packet type
		remove_bit_stuffing();
 80011c4:	f000 f91a 	bl	80013fc <remove_bit_stuffing>
		local_packet->i_frame_packet = false;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80011ce:	3310      	adds	r3, #16
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 80011d4:	f000 f950 	bl	8001478 <AX25_Packet_Validate>
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]

		AX25_IsValid = 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
		sprintf(uartData, "Defaulting AX25_IsValid to 1 \n");
 80011e0:	4a71      	ldr	r2, [pc, #452]	; (80013a8 <receiving_AX25+0x288>)
 80011e2:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <receiving_AX25+0x2a0>)
 80011e4:	4615      	mov	r5, r2
 80011e6:	461c      	mov	r4, r3
 80011e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ea:	6028      	str	r0, [r5, #0]
 80011ec:	6069      	str	r1, [r5, #4]
 80011ee:	60aa      	str	r2, [r5, #8]
 80011f0:	60eb      	str	r3, [r5, #12]
 80011f2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80011f4:	6128      	str	r0, [r5, #16]
 80011f6:	6169      	str	r1, [r5, #20]
 80011f8:	61aa      	str	r2, [r5, #24]
 80011fa:	8823      	ldrh	r3, [r4, #0]
 80011fc:	78a2      	ldrb	r2, [r4, #2]
 80011fe:	83ab      	strh	r3, [r5, #28]
 8001200:	4613      	mov	r3, r2
 8001202:	77ab      	strb	r3, [r5, #30]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001204:	4868      	ldr	r0, [pc, #416]	; (80013a8 <receiving_AX25+0x288>)
 8001206:	f7ff f803 	bl	8000210 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29a      	uxth	r2, r3
 800120e:	230a      	movs	r3, #10
 8001210:	4965      	ldr	r1, [pc, #404]	; (80013a8 <receiving_AX25+0x288>)
 8001212:	4867      	ldr	r0, [pc, #412]	; (80013b0 <receiving_AX25+0x290>)
 8001214:	f003 fb97 	bl	8004946 <HAL_UART_Transmit>

		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	461a      	mov	r2, r3
 800121c:	4969      	ldr	r1, [pc, #420]	; (80013c4 <receiving_AX25+0x2a4>)
 800121e:	4862      	ldr	r0, [pc, #392]	; (80013a8 <receiving_AX25+0x288>)
 8001220:	f004 f82e 	bl	8005280 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001224:	4860      	ldr	r0, [pc, #384]	; (80013a8 <receiving_AX25+0x288>)
 8001226:	f7fe fff3 	bl	8000210 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	230a      	movs	r3, #10
 8001230:	495d      	ldr	r1, [pc, #372]	; (80013a8 <receiving_AX25+0x288>)
 8001232:	485f      	ldr	r0, [pc, #380]	; (80013b0 <receiving_AX25+0x290>)
 8001234:	f003 fb87 	bl	8004946 <HAL_UART_Transmit>

		if(AX25_IsValid){
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d049      	beq.n	80012d2 <receiving_AX25+0x1b2>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 800123e:	f000 f9d3 	bl	80015e8 <AX25_TO_KISS>
			sprintf(uartData, "AX.25 frame was converted to KISS frame\n");
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <receiving_AX25+0x288>)
 8001244:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <receiving_AX25+0x2a8>)
 8001246:	4614      	mov	r4, r2
 8001248:	469c      	mov	ip, r3
 800124a:	f104 0e20 	add.w	lr, r4, #32
 800124e:	4665      	mov	r5, ip
 8001250:	4626      	mov	r6, r4
 8001252:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001254:	6028      	str	r0, [r5, #0]
 8001256:	6069      	str	r1, [r5, #4]
 8001258:	60aa      	str	r2, [r5, #8]
 800125a:	60eb      	str	r3, [r5, #12]
 800125c:	3410      	adds	r4, #16
 800125e:	f10c 0c10 	add.w	ip, ip, #16
 8001262:	4574      	cmp	r4, lr
 8001264:	d1f3      	bne.n	800124e <receiving_AX25+0x12e>
 8001266:	4662      	mov	r2, ip
 8001268:	4623      	mov	r3, r4
 800126a:	cb03      	ldmia	r3!, {r0, r1}
 800126c:	6010      	str	r0, [r2, #0]
 800126e:	6051      	str	r1, [r2, #4]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	7213      	strb	r3, [r2, #8]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001274:	484c      	ldr	r0, [pc, #304]	; (80013a8 <receiving_AX25+0x288>)
 8001276:	f7fe ffcb 	bl	8000210 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	230a      	movs	r3, #10
 8001280:	4949      	ldr	r1, [pc, #292]	; (80013a8 <receiving_AX25+0x288>)
 8001282:	484b      	ldr	r0, [pc, #300]	; (80013b0 <receiving_AX25+0x290>)
 8001284:	f003 fb5f 	bl	8004946 <HAL_UART_Transmit>

			//Transmit KISS Packet that has been generated
			transmitting_KISS();
 8001288:	f7ff ff32 	bl	80010f0 <transmitting_KISS>
			sprintf(uartData, "KISS packeted sent via UART\n");
 800128c:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <receiving_AX25+0x288>)
 800128e:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <receiving_AX25+0x2ac>)
 8001290:	4615      	mov	r5, r2
 8001292:	461c      	mov	r4, r3
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	6028      	str	r0, [r5, #0]
 8001298:	6069      	str	r1, [r5, #4]
 800129a:	60aa      	str	r2, [r5, #8]
 800129c:	60eb      	str	r3, [r5, #12]
 800129e:	cc07      	ldmia	r4!, {r0, r1, r2}
 80012a0:	6128      	str	r0, [r5, #16]
 80012a2:	6169      	str	r1, [r5, #20]
 80012a4:	61aa      	str	r2, [r5, #24]
 80012a6:	7823      	ldrb	r3, [r4, #0]
 80012a8:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012aa:	483f      	ldr	r0, [pc, #252]	; (80013a8 <receiving_AX25+0x288>)
 80012ac:	f7fe ffb0 	bl	8000210 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	230a      	movs	r3, #10
 80012b6:	493c      	ldr	r1, [pc, #240]	; (80013a8 <receiving_AX25+0x288>)
 80012b8:	483d      	ldr	r0, [pc, #244]	; (80013b0 <receiving_AX25+0x290>)
 80012ba:	f003 fb44 	bl	8004946 <HAL_UART_Transmit>

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f640 225f 	movw	r2, #2655	; 0xa5f
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 ffd1 	bl	800526e <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 80012cc:	f7ff ff28 	bl	8001120 <receiving_AX25>
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		receiving_AX25();
	}
}
 80012d0:	e066      	b.n	80013a0 <receiving_AX25+0x280>
			sprintf(uartData, "Packet was not valid, restarting\n");
 80012d2:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <receiving_AX25+0x288>)
 80012d4:	4a3e      	ldr	r2, [pc, #248]	; (80013d0 <receiving_AX25+0x2b0>)
 80012d6:	4614      	mov	r4, r2
 80012d8:	469c      	mov	ip, r3
 80012da:	f104 0e20 	add.w	lr, r4, #32
 80012de:	4665      	mov	r5, ip
 80012e0:	4626      	mov	r6, r4
 80012e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012e4:	6028      	str	r0, [r5, #0]
 80012e6:	6069      	str	r1, [r5, #4]
 80012e8:	60aa      	str	r2, [r5, #8]
 80012ea:	60eb      	str	r3, [r5, #12]
 80012ec:	3410      	adds	r4, #16
 80012ee:	f10c 0c10 	add.w	ip, ip, #16
 80012f2:	4574      	cmp	r4, lr
 80012f4:	d1f3      	bne.n	80012de <receiving_AX25+0x1be>
 80012f6:	4662      	mov	r2, ip
 80012f8:	4623      	mov	r3, r4
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012fe:	482a      	ldr	r0, [pc, #168]	; (80013a8 <receiving_AX25+0x288>)
 8001300:	f7fe ff86 	bl	8000210 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	230a      	movs	r3, #10
 800130a:	4927      	ldr	r1, [pc, #156]	; (80013a8 <receiving_AX25+0x288>)
 800130c:	4828      	ldr	r0, [pc, #160]	; (80013b0 <receiving_AX25+0x290>)
 800130e:	f003 fb1a 	bl	8004946 <HAL_UART_Transmit>
			receiving_AX25();
 8001312:	f7ff ff05 	bl	8001120 <receiving_AX25>
}
 8001316:	e043      	b.n	80013a0 <receiving_AX25+0x280>
	else if(packet_status == -1){
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d119      	bne.n	8001354 <receiving_AX25+0x234>
		sprintf(uartData, "Need to change mode\n");
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <receiving_AX25+0x288>)
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <receiving_AX25+0x2b4>)
 8001324:	4615      	mov	r5, r2
 8001326:	461c      	mov	r4, r3
 8001328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132a:	6028      	str	r0, [r5, #0]
 800132c:	6069      	str	r1, [r5, #4]
 800132e:	60aa      	str	r2, [r5, #8]
 8001330:	60eb      	str	r3, [r5, #12]
 8001332:	6820      	ldr	r0, [r4, #0]
 8001334:	6128      	str	r0, [r5, #16]
 8001336:	7923      	ldrb	r3, [r4, #4]
 8001338:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800133a:	481b      	ldr	r0, [pc, #108]	; (80013a8 <receiving_AX25+0x288>)
 800133c:	f7fe ff68 	bl	8000210 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	230a      	movs	r3, #10
 8001346:	4918      	ldr	r1, [pc, #96]	; (80013a8 <receiving_AX25+0x288>)
 8001348:	4819      	ldr	r0, [pc, #100]	; (80013b0 <receiving_AX25+0x290>)
 800134a:	f003 fafc 	bl	8004946 <HAL_UART_Transmit>
		toggleMode();
 800134e:	f000 fbbd 	bl	8001acc <toggleMode>
}
 8001352:	e025      	b.n	80013a0 <receiving_AX25+0x280>
		sprintf(uartData, "Packet status was unknown, restarting\n");
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <receiving_AX25+0x288>)
 8001356:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <receiving_AX25+0x2b8>)
 8001358:	4614      	mov	r4, r2
 800135a:	469c      	mov	ip, r3
 800135c:	f104 0e20 	add.w	lr, r4, #32
 8001360:	4665      	mov	r5, ip
 8001362:	4626      	mov	r6, r4
 8001364:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001366:	6028      	str	r0, [r5, #0]
 8001368:	6069      	str	r1, [r5, #4]
 800136a:	60aa      	str	r2, [r5, #8]
 800136c:	60eb      	str	r3, [r5, #12]
 800136e:	3410      	adds	r4, #16
 8001370:	f10c 0c10 	add.w	ip, ip, #16
 8001374:	4574      	cmp	r4, lr
 8001376:	d1f3      	bne.n	8001360 <receiving_AX25+0x240>
 8001378:	4663      	mov	r3, ip
 800137a:	4622      	mov	r2, r4
 800137c:	6810      	ldr	r0, [r2, #0]
 800137e:	6018      	str	r0, [r3, #0]
 8001380:	8891      	ldrh	r1, [r2, #4]
 8001382:	7992      	ldrb	r2, [r2, #6]
 8001384:	8099      	strh	r1, [r3, #4]
 8001386:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <receiving_AX25+0x288>)
 800138a:	f7fe ff41 	bl	8000210 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29a      	uxth	r2, r3
 8001392:	230a      	movs	r3, #10
 8001394:	4904      	ldr	r1, [pc, #16]	; (80013a8 <receiving_AX25+0x288>)
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <receiving_AX25+0x290>)
 8001398:	f003 fad5 	bl	8004946 <HAL_UART_Transmit>
		receiving_AX25();
 800139c:	f7ff fec0 	bl	8001120 <receiving_AX25>
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a8:	20001f28 	.word	0x20001f28
 80013ac:	08007a68 	.word	0x08007a68
 80013b0:	20003d4c 	.word	0x20003d4c
 80013b4:	200000b0 	.word	0x200000b0
 80013b8:	08007a84 	.word	0x08007a84
 80013bc:	08007aa4 	.word	0x08007aa4
 80013c0:	08007ac0 	.word	0x08007ac0
 80013c4:	08007ae0 	.word	0x08007ae0
 80013c8:	08007b08 	.word	0x08007b08
 80013cc:	08007b34 	.word	0x08007b34
 80013d0:	08007b54 	.word	0x08007b54
 80013d4:	08007b78 	.word	0x08007b78
 80013d8:	08007b90 	.word	0x08007b90

080013dc <slide_bits>:

void slide_bits(bool* array,int bits_left){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	memcpy(array,array+1,bits_left*bool_size);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f003 ff32 	bl	8005258 <memcpy>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <remove_bit_stuffing>:

void remove_bit_stuffing(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <remove_bit_stuffing+0x74>)
 8001404:	607b      	str	r3, [r7, #4]

	int one_count = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
	bool curr;
	for(int i = 0;i < rxBit_count;i++){
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	e025      	b.n	800145c <remove_bit_stuffing+0x60>
		curr = local_packet->AX25_PACKET[i]; //iterate through all data received before seperating into subfields
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	70fb      	strb	r3, [r7, #3]
		if(curr){ //current bit is a 1
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <remove_bit_stuffing+0x2c>
			one_count++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e016      	b.n	8001456 <remove_bit_stuffing+0x5a>
		}
		else{
			if(one_count >= 5){
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b04      	cmp	r3, #4
 800142c:	dd11      	ble.n	8001452 <remove_bit_stuffing+0x56>
				slide_bits(&local_packet->AX25_PACKET[i],rxBit_count-i);
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	18d0      	adds	r0, r2, r3
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <remove_bit_stuffing+0x78>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff ffcd 	bl	80013dc <slide_bits>
				i--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
				rxBit_count--;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <remove_bit_stuffing+0x78>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <remove_bit_stuffing+0x78>)
 8001450:	6013      	str	r3, [r2, #0]
			}
			one_count = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
	for(int i = 0;i < rxBit_count;i++){
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <remove_bit_stuffing+0x78>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	429a      	cmp	r2, r3
 8001464:	dbd4      	blt.n	8001410 <remove_bit_stuffing+0x14>
		}
	}
	//transmit kiss
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000b0 	.word	0x200000b0
 8001474:	20000098 	.word	0x20000098

08001478 <AX25_Packet_Validate>:

bool AX25_Packet_Validate(){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <AX25_Packet_Validate+0x60>)
 8001480:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <AX25_Packet_Validate+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b77      	cmp	r3, #119	; 0x77
 800148c:	dc0a      	bgt.n	80014a4 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <AX25_Packet_Validate+0x68>)
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <AX25_Packet_Validate+0x6c>)
 8001492:	4614      	mov	r4, r2
 8001494:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001496:	6020      	str	r0, [r4, #0]
 8001498:	6061      	str	r1, [r4, #4]
 800149a:	60a2      	str	r2, [r4, #8]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	7323      	strb	r3, [r4, #12]
		return false;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e015      	b.n	80014d0 <AX25_Packet_Validate+0x58>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <AX25_Packet_Validate+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00a      	beq.n	80014c6 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <AX25_Packet_Validate+0x68>)
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <AX25_Packet_Validate+0x6c>)
 80014b4:	4614      	mov	r4, r2
 80014b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014b8:	6020      	str	r0, [r4, #0]
 80014ba:	6061      	str	r1, [r4, #4]
 80014bc:	60a2      	str	r2, [r4, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	7323      	strb	r3, [r4, #12]
		return false;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e004      	b.n	80014d0 <AX25_Packet_Validate+0x58>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 80014c6:	f000 f80f 	bl	80014e8 <set_packet_pointer_AX25>
		return crc_check();
 80014ca:	f000 fa6d 	bl	80019a8 <crc_check>
 80014ce:	4603      	mov	r3, r0
//			return false;
//		}
	}

//	return true; //valid packet
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	200000b0 	.word	0x200000b0
 80014dc:	20000098 	.word	0x20000098
 80014e0:	20001f28 	.word	0x20001f28
 80014e4:	08007bb8 	.word	0x08007bb8

080014e8 <set_packet_pointer_AX25>:
void set_packet_pointer_AX25(){
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014ee:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <set_packet_pointer_AX25+0xf0>)
 80014f0:	607b      	str	r3, [r7, #4]
	bool *curr_mem = &local_packet->AX25_PACKET; //keep track of what address to copy from
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]
	//this is assuming that the packet has all the subfields full
	int not_info = FCS_len; //number of bits in packet that aren't part of info field
 80014f6:	2310      	movs	r3, #16
 80014f8:	60bb      	str	r3, [r7, #8]
	sprintf(uartData,"Good Packet!");
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <set_packet_pointer_AX25+0xf4>)
 80014fc:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <set_packet_pointer_AX25+0xf8>)
 80014fe:	4614      	mov	r4, r2
 8001500:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001502:	6020      	str	r0, [r4, #0]
 8001504:	6061      	str	r1, [r4, #4]
 8001506:	60a2      	str	r2, [r4, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	7323      	strb	r3, [r4, #12]

	local_packet->address = curr_mem;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8001512:	3318      	adds	r3, #24
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	601a      	str	r2, [r3, #0]
	if(!compare_address(local_packet->address)){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 800151e:	3318      	adds	r3, #24
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fdc2 	bl	80010ac <compare_address>
 8001528:	4603      	mov	r3, r0
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d14c      	bne.n	80015ce <set_packet_pointer_AX25+0xe6>
		return false; //discard
	}
	curr_mem += address_len;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3370      	adds	r3, #112	; 0x70
 8001538:	60fb      	str	r3, [r7, #12]
	not_info += address_len;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3370      	adds	r3, #112	; 0x70
 800153e:	60bb      	str	r3, [r7, #8]

	local_packet->control = curr_mem;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8001546:	331c      	adds	r3, #28
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3308      	adds	r3, #8
 8001550:	60fb      	str	r3, [r7, #12]
	not_info += control_len;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3308      	adds	r3, #8
 8001556:	60bb      	str	r3, [r7, #8]

	if(local_packet->control[0] == 0){ // 0 == I frame, 01 == S frame, 11 == U Frame
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 800155e:	331c      	adds	r3, #28
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <set_packet_pointer_AX25+0xa8>
		local_packet->i_frame_packet = true;//Signal flag is of type i-frame
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001574:	3310      	adds	r3, #16
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
		local_packet->PID = curr_mem;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	601a      	str	r2, [r3, #0]
		curr_mem += PID_len;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3308      	adds	r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
		not_info += PID_len;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3308      	adds	r3, #8
 800158e:	60bb      	str	r3, [r7, #8]
	}


	local_packet->Info_Len = rxBit_count - not_info;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <set_packet_pointer_AX25+0xfc>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800159e:	3308      	adds	r3, #8
 80015a0:	601a      	str	r2, [r3, #0]
	local_packet->Info = curr_mem;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80015a8:	3304      	adds	r3, #4
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80015b4:	3308      	adds	r3, #8
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

	local_packet->FCS = curr_mem;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80015c6:	330c      	adds	r3, #12
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e000      	b.n	80015d0 <set_packet_pointer_AX25+0xe8>
		return false; //discard
 80015ce:	bf00      	nop
}
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000b0 	.word	0x200000b0
 80015dc:	20001f28 	.word	0x20001f28
 80015e0:	08007bc8 	.word	0x08007bc8
 80015e4:	20000098 	.word	0x20000098

080015e8 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <AX25_TO_KISS+0xd0>)
 80015f0:	603b      	str	r3, [r7, #0]

	bool *curr_mem = &local_packet->KISS_PACKET;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80015f8:	607b      	str	r3, [r7, #4]
	/*
	 * 	NEED TO SET global_packet PACKET POINTERS IN HERE AS WELL
	 * 	DAVID WAS FEELING LAZY AND DID NOT DO IT
	 */

	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE*bool_size);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	492f      	ldr	r1, [pc, #188]	; (80016bc <AX25_TO_KISS+0xd4>)
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	cb03      	ldmia	r3!, {r0, r1}
 8001604:	6010      	str	r0, [r2, #0]
 8001606:	6051      	str	r1, [r2, #4]
	curr_mem += FLAG_SIZE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3308      	adds	r3, #8
 800160c:	607b      	str	r3, [r7, #4]
	memcpy(curr_mem,local_packet->address,address_len*bool_size);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8001614:	3318      	adds	r3, #24
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2270      	movs	r2, #112	; 0x70
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f003 fe1b 	bl	8005258 <memcpy>
	curr_mem += address_len;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3370      	adds	r3, #112	; 0x70
 8001626:	607b      	str	r3, [r7, #4]
	memcpy(curr_mem,local_packet->control,control_len*bool_size);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 800162e:	331c      	adds	r3, #28
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2208      	movs	r2, #8
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f003 fe0e 	bl	8005258 <memcpy>
	curr_mem += control_len;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3308      	adds	r3, #8
 8001640:	607b      	str	r3, [r7, #4]

	if(local_packet->control[0] == 0){ //information type packet only
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8001648:	331c      	adds	r3, #28
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00b      	beq.n	8001670 <AX25_TO_KISS+0x88>
		memcpy(curr_mem,local_packet->PID,PID_len*bool_size);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2208      	movs	r2, #8
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f003 fdf7 	bl	8005258 <memcpy>
		curr_mem += PID_len;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3308      	adds	r3, #8
 800166e:	607b      	str	r3, [r7, #4]
	}

	memcpy(curr_mem,local_packet->Info,local_packet->Info_Len*bool_size);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001676:	3304      	adds	r3, #4
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001680:	3308      	adds	r3, #8
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f003 fde6 	bl	8005258 <memcpy>
	curr_mem += local_packet->Info_Len;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001692:	3308      	adds	r3, #8
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	607b      	str	r3, [r7, #4]
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE*bool_size);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <AX25_TO_KISS+0xd4>)
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	cb03      	ldmia	r3!, {r0, r1}
 80016a8:	6010      	str	r0, [r2, #0]
 80016aa:	6051      	str	r1, [r2, #4]

	KISS_TO_HEX();
 80016ac:	f000 f808 	bl	80016c0 <KISS_TO_HEX>


}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200000b0 	.word	0x200000b0
 80016bc:	20000000 	.word	0x20000000

080016c0 <KISS_TO_HEX>:
        temp = byte >> i;
        local_packet->KISS_PACKET[i + index] = temp%2;
    }
}

void KISS_TO_HEX(){
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <KISS_TO_HEX+0xd0>)
 80016c8:	60fb      	str	r3, [r7, #12]

	bool temp[8];
    for(int i = 0; i < KISS_SIZE; i=i+8){
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e050      	b.n	8001772 <KISS_TO_HEX+0xb2>
        memcpy(temp, &(local_packet->KISS_PACKET[i]),8*bool_size);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	1dda      	adds	r2, r3, #7
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	6810      	ldr	r0, [r2, #0]
 80016e0:	6851      	ldr	r1, [r2, #4]
 80016e2:	c303      	stmia	r3!, {r0, r1}
        for(int j = 0; j < 8; j++){
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	e03d      	b.n	8001766 <KISS_TO_HEX+0xa6>
        	local_packet->HEX_KISS_PACKET[i] += (temp[j])? pow(2,8-j-1) : 0;
 80016ea:	1d3a      	adds	r2, r7, #4
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d010      	beq.n	8001718 <KISS_TO_HEX+0x58>
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f1c3 0307 	rsb	r3, r3, #7
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff31 	bl	8000564 <__aeabi_i2d>
 8001702:	4603      	mov	r3, r0
 8001704:	460c      	mov	r4, r1
 8001706:	ec44 3b11 	vmov	d1, r3, r4
 800170a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001788 <KISS_TO_HEX+0xc8>
 800170e:	f004 f9fb 	bl	8005b08 <pow>
 8001712:	ec55 4b10 	vmov	r4, r5, d0
 8001716:	e003      	b.n	8001720 <KISS_TO_HEX+0x60>
 8001718:	f04f 0400 	mov.w	r4, #0
 800171c:	f04f 0500 	mov.w	r5, #0
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4413      	add	r3, r2
 8001726:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800172a:	330f      	adds	r3, #15
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff18 	bl	8000564 <__aeabi_i2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4620      	mov	r0, r4
 800173a:	4629      	mov	r1, r5
 800173c:	f7fe fdc6 	bl	80002cc <__adddf3>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	4618      	mov	r0, r3
 8001746:	4621      	mov	r1, r4
 8001748:	f7ff fa4e 	bl	8000be8 <__aeabi_d2uiz>
 800174c:	4603      	mov	r3, r0
 800174e:	b2d9      	uxtb	r1, r3
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4413      	add	r3, r2
 8001756:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800175a:	330f      	adds	r3, #15
 800175c:	460a      	mov	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 8; j++){
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	3301      	adds	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b07      	cmp	r3, #7
 800176a:	ddbe      	ble.n	80016ea <KISS_TO_HEX+0x2a>
    for(int i = 0; i < KISS_SIZE; i=i+8){
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3308      	adds	r3, #8
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8001778:	dbaa      	blt.n	80016d0 <KISS_TO_HEX+0x10>
        }
    }
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bdb0      	pop	{r4, r5, r7, pc}
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	40000000 	.word	0x40000000
 8001790:	200000b0 	.word	0x200000b0

08001794 <hex_to_bin>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//store bits in FCS field
void hex_to_bin(){
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <hex_to_bin+0x70>)
 800179c:	60bb      	str	r3, [r7, #8]

    int temp;
    for(int i = 0; i < FCS_len; i++){ //stores in bits into fcs subfield
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e01f      	b.n	80017e4 <hex_to_bin+0x50>
        temp = local_packet->crc >> i;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80017aa:	331c      	adds	r3, #28
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	fa42 f303 	asr.w	r3, r2, r3
 80017b4:	607b      	str	r3, [r7, #4]
        local_packet->FCS[i] = temp%2;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	bfb8      	it	lt
 80017c0:	425b      	neglt	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80017ca:	330c      	adds	r3, #12
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	440b      	add	r3, r1
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2201      	movne	r2, #1
 80017d8:	2200      	moveq	r2, #0
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < FCS_len; i++){ //stores in bits into fcs subfield
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	dddc      	ble.n	80017a4 <hex_to_bin+0x10>
    //sprintf(uartData,"FCS = %x\n",local_packet->crc);
    //HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    //sprintf(uartData,"\nExecution time = %d\n",time);
    //HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

    local_packet->crc = 0xFFFF; //reinitialize
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80017f0:	331c      	adds	r3, #28
 80017f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	200000b0 	.word	0x200000b0

08001808 <crc_calc>:

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <crc_calc+0x98>)
 8001816:	61fb      	str	r3, [r7, #28]
	int out_bit;
    int poly = 0x8408;             			//reverse order of 0x1021
 8001818:	f248 4308 	movw	r3, #33800	; 0x8408
 800181c:	61bb      	str	r3, [r7, #24]

    out_bit = in_bit ^ (*crc_ptr_in%2); 		//xor lsb of current crc with input bit
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	bfb8      	it	lt
 800182a:	425b      	neglt	r3, r3
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4053      	eors	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	105a      	asrs	r2, r3, #1
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d102      	bne.n	8001848 <crc_calc+0x40>
 8001842:	f248 4308 	movw	r3, #33800	; 0x8408
 8001846:	e000      	b.n	800184a <crc_calc+0x42>
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
	*crc_ptr_in ^= poly;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	405a      	eors	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]

    //End condition
	if(*crc_count_ptr_in >= rxBit_count){
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <crc_calc+0x9c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	db13      	blt.n	8001896 <crc_calc+0x8e>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8001876:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	6013      	str	r3, [r2, #0]
    	if(local_packet->check_crc == false){
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 8001884:	3304      	adds	r3, #4
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <crc_calc+0x8e>
    		hex_to_bin();
 8001892:	f7ff ff7f 	bl	8001794 <hex_to_bin>
    	}
    }
}
 8001896:	bf00      	nop
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000b0 	.word	0x200000b0
 80018a4:	20000098 	.word	0x20000098

080018a8 <crc_generate>:

void crc_generate(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80018ae:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <crc_generate+0xf8>)
 80018b0:	60fb      	str	r3, [r7, #12]
	int * crc_ptr = &local_packet->crc;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80018b8:	331c      	adds	r3, #28
 80018ba:	60bb      	str	r3, [r7, #8]
	int * crc_count_ptr = &local_packet->crc_count;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 80018c2:	607b      	str	r3, [r7, #4]

	*crc_ptr = 0xFFFF;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ca:	601a      	str	r2, [r3, #0]
	*crc_count_ptr = 0;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	//Calculate CRC for info
	for(int i = local_packet->Info_Len-1; i >= 0;i--){
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80018d8:	3308      	adds	r3, #8
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	e00f      	b.n	8001902 <crc_generate+0x5a>
		//Call crc_calc per bit
		crc_calc((int)local_packet->Info[i],crc_ptr,crc_count_ptr);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80018e8:	3304      	adds	r3, #4
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff86 	bl	8001808 <crc_calc>
	for(int i = local_packet->Info_Len-1; i >= 0;i--){
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	3b01      	subs	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b00      	cmp	r3, #0
 8001906:	daec      	bge.n	80018e2 <crc_generate+0x3a>
	}

	//Calculate CRC for PID (if packet is of type i-frame)
	if(local_packet->i_frame_packet){
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800190e:	3310      	adds	r3, #16
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d014      	beq.n	8001940 <crc_generate+0x98>
		for(int i = PID_len-1; i >= 0; i--){
 8001916:	2307      	movs	r3, #7
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e00e      	b.n	800193a <crc_generate+0x92>
			//Call crc_calc per bit
			crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff6a 	bl	8001808 <crc_calc>
		for(int i = PID_len-1; i >= 0; i--){
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	3b01      	subs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	daed      	bge.n	800191c <crc_generate+0x74>
		}
	}

	//Calculate CRC for control
	for(int i = control_len-1; i >= 0;i--){
 8001940:	2307      	movs	r3, #7
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00f      	b.n	8001966 <crc_generate+0xbe>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 800194c:	331c      	adds	r3, #28
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff54 	bl	8001808 <crc_calc>
	for(int i = control_len-1; i >= 0;i--){
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3b01      	subs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	daec      	bge.n	8001946 <crc_generate+0x9e>
	}

		//Calculate CRC for address
	for(int i = address_len-1; i >= 0;i--){
 800196c:	236f      	movs	r3, #111	; 0x6f
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	e00f      	b.n	8001992 <crc_generate+0xea>
		//Call crc_calc per bit
		crc_calc((int)local_packet->address[i],crc_ptr,crc_count_ptr);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8001978:	3318      	adds	r3, #24
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff3e 	bl	8001808 <crc_calc>
	for(int i = address_len-1; i >= 0;i--){
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3b01      	subs	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	daec      	bge.n	8001972 <crc_generate+0xca>
	}
}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200000b0 	.word	0x200000b0
 80019a4:	00000000 	.word	0x00000000

080019a8 <crc_check>:

bool crc_check(){
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <crc_check+0xc0>)
 80019b0:	607b      	str	r3, [r7, #4]
	local_packet->check_crc = true;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 80019b8:	3304      	adds	r3, #4
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
	int fcs_val = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
	bool valid_crc = false;
 80019c2:	2300      	movs	r3, #0
 80019c4:	70fb      	strb	r3, [r7, #3]

	//FOR FCS ONLY, highest index == LSB
	//FOR FCS ONLY, lowest index  == MSB
	for(int i = FCS_len-1; i >= 0;i--){
 80019c6:	230f      	movs	r3, #15
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e032      	b.n	8001a32 <crc_check+0x8a>
		//Convert FCS to decimal value (DOES NOT INCLUDE DECIMAL VALUES)
		fcs_val += (local_packet->FCS[i]) ? pow(2,FCS_len-1-i) :0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80019d2:	330c      	adds	r3, #12
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d010      	beq.n	8001a02 <crc_check+0x5a>
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f1c3 030f 	rsb	r3, r3, #15
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdbc 	bl	8000564 <__aeabi_i2d>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	ec44 3b11 	vmov	d1, r3, r4
 80019f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001a60 <crc_check+0xb8>
 80019f8:	f004 f886 	bl	8005b08 <pow>
 80019fc:	ec55 4b10 	vmov	r4, r5, d0
 8001a00:	e003      	b.n	8001a0a <crc_check+0x62>
 8001a02:	f04f 0400 	mov.w	r4, #0
 8001a06:	f04f 0500 	mov.w	r5, #0
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7fe fdaa 	bl	8000564 <__aeabi_i2d>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fc58 	bl	80002cc <__adddf3>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	4618      	mov	r0, r3
 8001a22:	4621      	mov	r1, r4
 8001a24:	f7ff f8b8 	bl	8000b98 <__aeabi_d2iz>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]
	for(int i = FCS_len-1; i >= 0;i--){
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dac9      	bge.n	80019cc <crc_check+0x24>
	}

	//generate crc
	crc_generate();
 8001a38:	f7ff ff36 	bl	80018a8 <crc_generate>

	//compare crc
	valid_crc = (local_packet->crc==fcs_val) ? true : false;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8001a42:	331c      	adds	r3, #28
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	70fb      	strb	r3, [r7, #3]
	return valid_crc;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5c:	f3af 8000 	nop.w
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40000000 	.word	0x40000000
 8001a68:	200000b0 	.word	0x200000b0

08001a6c <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8001a76:	f000 f997 	bl	8001da8 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <initProgram+0x54>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8001a80:	f000 f824 	bl	8001acc <toggleMode>
	toggleMode();
 8001a84:	f000 f822 	bl	8001acc <toggleMode>

	if (mode) {
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <initProgram+0x54>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <initProgram+0x58>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2264      	movs	r2, #100	; 0x64
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <initProgram+0x5c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f240 323f 	movw	r2, #831	; 0x33f
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
	}
}
 8001aa2:	e009      	b.n	8001ab8 <initProgram+0x4c>
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <initProgram+0x58>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <initProgram+0x5c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20003cf4 	.word	0x20003cf4
 8001ac4:	20003d0c 	.word	0x20003d0c
 8001ac8:	20002c54 	.word	0x20002c54

08001acc <toggleMode>:



void toggleMode() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001ad0:	2006      	movs	r0, #6
 8001ad2:	f000 ffa0 	bl	8002a16 <HAL_NVIC_DisableIRQ>

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4824      	ldr	r0, [pc, #144]	; (8001b6c <toggleMode+0xa0>)
 8001ada:	f000 ffd8 	bl	8002a8e <HAL_DAC_Stop_DMA>

	//Toggle mode
	mode = !mode;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <toggleMode+0xa4>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf14      	ite	ne
 8001ae6:	2301      	movne	r3, #1
 8001ae8:	2300      	moveq	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f083 0301 	eor.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <toggleMode+0xa4>)
 8001afa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <toggleMode+0xa4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	2120      	movs	r1, #32
 8001b04:	481b      	ldr	r0, [pc, #108]	; (8001b74 <toggleMode+0xa8>)
 8001b06:	f001 fd3b 	bl	8003580 <HAL_GPIO_WritePin>
	midbit = false;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <toggleMode+0xac>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8001b10:	481a      	ldr	r0, [pc, #104]	; (8001b7c <toggleMode+0xb0>)
 8001b12:	f002 faca 	bl	80040aa <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <toggleMode+0xb0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <toggleMode+0xa4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <toggleMode+0x6e>
		//Set Timer periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <toggleMode+0xb4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2264      	movs	r2, #100	; 0x64
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <toggleMode+0xb0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f240 323f 	movw	r2, #831	; 0x33f
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b38:	e00f      	b.n	8001b5a <toggleMode+0x8e>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <toggleMode+0xb4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <toggleMode+0xb0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <toggleMode+0xb0>)
 8001b50:	f002 fad6 	bl	8004100 <HAL_TIM_Base_Start_IT>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b54:	2006      	movs	r0, #6
 8001b56:	f000 ff50 	bl	80029fa <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <toggleMode+0xa8>)
 8001b62:	f001 fd0d 	bl	8003580 <HAL_GPIO_WritePin>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20003cf8 	.word	0x20003cf8
 8001b70:	20003cf4 	.word	0x20003cf4
 8001b74:	40020000 	.word	0x40020000
 8001b78:	2000009c 	.word	0x2000009c
 8001b7c:	20002c54 	.word	0x20002c54
 8001b80:	20003d0c 	.word	0x20003d0c

08001b84 <loadPeriodBuffer>:

void loadPeriodBuffer(int timerCnt) {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	periodBuffer[periodSaveCount] = timerCnt;
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <loadPeriodBuffer+0x40>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <loadPeriodBuffer+0x44>)
 8001b96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	periodSaveCount++;
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <loadPeriodBuffer+0x40>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <loadPeriodBuffer+0x40>)
 8001ba4:	801a      	strh	r2, [r3, #0]
	if (periodSaveCount >= RX_BUFFERSIZE) {
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <loadPeriodBuffer+0x40>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d302      	bcc.n	8001bb6 <loadPeriodBuffer+0x32>
		periodSaveCount = 0;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <loadPeriodBuffer+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
	}
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200000a0 	.word	0x200000a0
 8001bc8:	20002cf4 	.word	0x20002cf4

08001bcc <Tim3IT>:
void Tim3IT() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	if (mode) {
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <Tim3IT+0x3c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <Tim3IT+0x1c>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <Tim3IT+0x40>)
 8001bdc:	f000 ff57 	bl	8002a8e <HAL_DAC_Stop_DMA>
		midbit = false;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <Tim3IT+0x44>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
		if(sampusecount>SAMP_PER_BAUD){
			loadPeriodBuffer(0);
		}
		sampusecount++;
	}
}
 8001be6:	e00c      	b.n	8001c02 <Tim3IT+0x36>
		if(sampusecount>SAMP_PER_BAUD){
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <Tim3IT+0x48>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d902      	bls.n	8001bf6 <Tim3IT+0x2a>
			loadPeriodBuffer(0);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff ffc7 	bl	8001b84 <loadPeriodBuffer>
		sampusecount++;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <Tim3IT+0x48>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <Tim3IT+0x48>)
 8001c00:	701a      	strb	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20003cf4 	.word	0x20003cf4
 8001c0c:	20003cf8 	.word	0x20003cf8
 8001c10:	2000009c 	.word	0x2000009c
 8001c14:	2000009e 	.word	0x2000009e

08001c18 <FreqCounterPinEXTI>:
void FreqCounterPinEXTI() {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	loadPeriodBuffer(htim2.Instance->CNT);
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <FreqCounterPinEXTI+0x24>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ffae 	bl	8001b84 <loadPeriodBuffer>
	htim2.Instance->CNT = 0;
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <FreqCounterPinEXTI+0x24>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
	sampusecount = 0;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <FreqCounterPinEXTI+0x28>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20003d0c 	.word	0x20003d0c
 8001c40:	2000009e 	.word	0x2000009e
 8001c44:	00000000 	.word	0x00000000

08001c48 <edit_sineval>:
bool bitStream[10];

uint32_t lowFrequency[2 * LOWF_SAMP];
uint32_t highFrequency[2 * HIGHF_SAMP];

void edit_sineval(uint32_t *sinArray, int arraySize, int waves, float shiftPercent) {
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	ed87 0a00 	vstr	s0, [r7]
	double ampl 		= OUT_AMPL / 2;						//Amplitude of wave
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	4c3c      	ldr	r4, [pc, #240]	; (8001d50 <edit_sineval+0x108>)
 8001c5e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double phaseShift 	= shiftPercent * 2 * PI;	//Desired phase shift
 8001c62:	edd7 7a00 	vldr	s15, [r7]
 8001c66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c6a:	ee17 0a90 	vmov	r0, s15
 8001c6e:	f7fe fc8b 	bl	8000588 <__aeabi_f2d>
 8001c72:	a333      	add	r3, pc, #204	; (adr r3, 8001d40 <edit_sineval+0xf8>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fcde 	bl	8000638 <__aeabi_dmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double w 			= 2 * PI  * waves / arraySize;
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe fc6d 	bl	8000564 <__aeabi_i2d>
 8001c8a:	a32f      	add	r3, pc, #188	; (adr r3, 8001d48 <edit_sineval+0x100>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe fcd2 	bl	8000638 <__aeabi_dmul>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4625      	mov	r5, r4
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	68b8      	ldr	r0, [r7, #8]
 8001c9e:	f7fe fc61 	bl	8000564 <__aeabi_i2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fdef 	bl	800088c <__aeabi_ddiv>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	e9c7 3404 	strd	r3, r4, [r7, #16]

	for (int i = 0; i < arraySize; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cba:	e036      	b.n	8001d2a <edit_sineval+0xe2>
		//formula in DAC Document
		sinArray[i] = (sin((i * w) + phaseShift) + 1) * ampl;
 8001cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cbe:	f7fe fc51 	bl	8000564 <__aeabi_i2d>
 8001cc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cc6:	f7fe fcb7 	bl	8000638 <__aeabi_dmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460c      	mov	r4, r1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd6:	f7fe faf9 	bl	80002cc <__adddf3>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	ec44 3b17 	vmov	d7, r3, r4
 8001ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce6:	eef0 0a67 	vmov.f32	s1, s15
 8001cea:	f003 fec5 	bl	8005a78 <sin>
 8001cee:	ec51 0b10 	vmov	r0, r1, d0
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <edit_sineval+0x10c>)
 8001cf8:	f7fe fae8 	bl	80002cc <__adddf3>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4618      	mov	r0, r3
 8001d02:	4621      	mov	r1, r4
 8001d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d08:	f7fe fc96 	bl	8000638 <__aeabi_dmul>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	18d4      	adds	r4, r2, r3
 8001d1c:	f7fe ff64 	bl	8000be8 <__aeabi_d2uiz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < arraySize; i++) {
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	3301      	adds	r3, #1
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	dbc4      	blt.n	8001cbc <edit_sineval+0x74>
	}
}
 8001d32:	bf00      	nop
 8001d34:	3730      	adds	r7, #48	; 0x30
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	4d12d84a 	.word	0x4d12d84a
 8001d44:	400921fb 	.word	0x400921fb
 8001d48:	4d12d84a 	.word	0x4d12d84a
 8001d4c:	401921fb 	.word	0x401921fb
 8001d50:	40a00000 	.word	0x40a00000
 8001d54:	3ff00000 	.word	0x3ff00000

08001d58 <generateBitstream>:
				__NOP();		//Just wait for timer3 IT to go off.
		}
		HAL_TIM_Base_Stop(&htim3);
	}
}
void generateBitstream() {
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <generateBitstream+0x4c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <generateBitstream+0x4c>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <generateBitstream+0x4c>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <generateBitstream+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <generateBitstream+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <generateBitstream+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <generateBitstream+0x4c>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <generateBitstream+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <generateBitstream+0x4c>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <generateBitstream+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	725a      	strb	r2, [r3, #9]

}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20002ae0 	.word	0x20002ae0

08001da8 <initOUTData>:
void initOUTData() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
 8001dac:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001dd0 <initOUTData+0x28>
 8001db0:	2202      	movs	r2, #2
 8001db2:	21a6      	movs	r1, #166	; 0xa6
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <initOUTData+0x2c>)
 8001db6:	f7ff ff47 	bl	8001c48 <edit_sineval>
	edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
 8001dba:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001dd8 <initOUTData+0x30>
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	215a      	movs	r1, #90	; 0x5a
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <initOUTData+0x34>)
 8001dc4:	f7ff ff40 	bl	8001c48 <edit_sineval>
	generateBitstream();
 8001dc8:	f7ff ffc6 	bl	8001d58 <generateBitstream>
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	3f7eb852 	.word	0x3f7eb852
 8001dd4:	20001c90 	.word	0x20001c90
 8001dd8:	3f7d70a4 	.word	0x3f7d70a4
 8001ddc:	20002aec 	.word	0x20002aec

08001de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de4:	f000 fc5c 	bl	80026a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de8:	f000 f81c 	bl	8001e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dec:	f000 f996 	bl	800211c <MX_GPIO_Init>
  MX_DMA_Init();
 8001df0:	f000 f974 	bl	80020dc <MX_DMA_Init>
  MX_DAC_Init();
 8001df4:	f000 f884 	bl	8001f00 <MX_DAC_Init>
  MX_TIM2_Init();
 8001df8:	f000 f8ac 	bl	8001f54 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001dfc:	f000 f944 	bl	8002088 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001e00:	f000 f8f4 	bl	8001fec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <main+0x3c>)
 8001e06:	f002 f92c 	bl	8004062 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <main+0x40>)
 8001e0c:	f002 f978 	bl	8004100 <HAL_TIM_Base_Start_IT>

	initProgram(false);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fe2b 	bl	8001a6c <initProgram>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//tx_rx();
		test_ax25();
 8001e16:	f7ff f887 	bl	8000f28 <test_ax25>
 8001e1a:	e7fc      	b.n	8001e16 <main+0x36>
 8001e1c:	20003d0c 	.word	0x20003d0c
 8001e20:	20002c54 	.word	0x20002c54

08001e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	; 0x50
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	2234      	movs	r2, #52	; 0x34
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fa1b 	bl	800526e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <SystemClock_Config+0xd4>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <SystemClock_Config+0xd4>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	; 0x40
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <SystemClock_Config+0xd4>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e64:	2300      	movs	r3, #0
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <SystemClock_Config+0xd8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e70:	4a22      	ldr	r2, [pc, #136]	; (8001efc <SystemClock_Config+0xd8>)
 8001e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <SystemClock_Config+0xd8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001e9c:	235a      	movs	r3, #90	; 0x5a
 8001e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 fe51 	bl	8003b58 <HAL_RCC_OscConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ebc:	f000 f9fc 	bl	80022b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 fb80 	bl	80035e4 <HAL_RCC_ClockConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001eea:	f000 f9e5 	bl	80022b8 <Error_Handler>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3750      	adds	r7, #80	; 0x50
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000

08001f00 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_DAC_Init+0x4c>)
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <MX_DAC_Init+0x50>)
 8001f12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <MX_DAC_Init+0x4c>)
 8001f16:	f000 fd98 	bl	8002a4a <HAL_DAC_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f20:	f000 f9ca 	bl	80022b8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001f24:	2324      	movs	r3, #36	; 0x24
 8001f26:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <MX_DAC_Init+0x4c>)
 8001f34:	f000 fdec 	bl	8002b10 <HAL_DAC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f3e:	f000 f9bb 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20003cf8 	.word	0x20003cf8
 8001f50:	40007400 	.word	0x40007400

08001f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001f86:	2263      	movs	r2, #99	; 0x63
 8001f88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f96:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001f98:	f002 f838 	bl	800400c <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001fa2:	f000 f989 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001fb4:	f002 f9d0 	bl	8004358 <HAL_TIM_ConfigClockSource>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001fbe:	f000 f97b 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <MX_TIM2_Init+0x94>)
 8001fd0:	f002 fbdc 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001fda:	f000 f96d 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20003d0c 	.word	0x20003d0c

08001fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_TIM3_Init+0x94>)
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <MX_TIM3_Init+0x98>)
 800200c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_TIM3_Init+0x94>)
 8002010:	2259      	movs	r2, #89	; 0x59
 8002012:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_TIM3_Init+0x94>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <MX_TIM3_Init+0x94>)
 800201c:	f240 3241 	movw	r2, #833	; 0x341
 8002020:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_TIM3_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <MX_TIM3_Init+0x94>)
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800202e:	4814      	ldr	r0, [pc, #80]	; (8002080 <MX_TIM3_Init+0x94>)
 8002030:	f001 ffec 	bl	800400c <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800203a:	f000 f93d 	bl	80022b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	4619      	mov	r1, r3
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_TIM3_Init+0x94>)
 800204c:	f002 f984 	bl	8004358 <HAL_TIM_ConfigClockSource>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002056:	f000 f92f 	bl	80022b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002062:	463b      	mov	r3, r7
 8002064:	4619      	mov	r1, r3
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <MX_TIM3_Init+0x94>)
 8002068:	f002 fb90 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002072:	f000 f921 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20002c54 	.word	0x20002c54
 8002084:	40000400 	.word	0x40000400

08002088 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 800208e:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <MX_USART2_UART_Init+0x50>)
 8002090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 8002094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_USART2_UART_Init+0x4c>)
 80020c0:	f002 fbf4 	bl	80048ac <HAL_UART_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ca:	f000 f8f5 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20003d4c 	.word	0x20003d4c
 80020d8:	40004400 	.word	0x40004400

080020dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_DMA_Init+0x3c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <MX_DMA_Init+0x3c>)
 80020ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_DMA_Init+0x3c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2010      	movs	r0, #16
 8002104:	f000 fc5d 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002108:	2010      	movs	r0, #16
 800210a:	f000 fc76 	bl	80029fa <HAL_NVIC_EnableIRQ>

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <MX_GPIO_Init+0x130>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a44      	ldr	r2, [pc, #272]	; (800224c <MX_GPIO_Init+0x130>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b42      	ldr	r3, [pc, #264]	; (800224c <MX_GPIO_Init+0x130>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b3e      	ldr	r3, [pc, #248]	; (800224c <MX_GPIO_Init+0x130>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a3d      	ldr	r2, [pc, #244]	; (800224c <MX_GPIO_Init+0x130>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <MX_GPIO_Init+0x130>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <MX_GPIO_Init+0x130>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a36      	ldr	r2, [pc, #216]	; (800224c <MX_GPIO_Init+0x130>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b34      	ldr	r3, [pc, #208]	; (800224c <MX_GPIO_Init+0x130>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <MX_GPIO_Init+0x130>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <MX_GPIO_Init+0x130>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <MX_GPIO_Init+0x130>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80021a8:	4829      	ldr	r0, [pc, #164]	; (8002250 <MX_GPIO_Init+0x134>)
 80021aa:	f001 f9e9 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2110      	movs	r1, #16
 80021b2:	4828      	ldr	r0, [pc, #160]	; (8002254 <MX_GPIO_Init+0x138>)
 80021b4:	f001 f9e4 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <MX_GPIO_Init+0x13c>)
 80021c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4821      	ldr	r0, [pc, #132]	; (8002254 <MX_GPIO_Init+0x138>)
 80021ce:	f001 f845 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d2:	2301      	movs	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <MX_GPIO_Init+0x140>)
 80021d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	481a      	ldr	r0, [pc, #104]	; (8002250 <MX_GPIO_Init+0x134>)
 80021e6:	f001 f839 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80021ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80021ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4813      	ldr	r0, [pc, #76]	; (8002250 <MX_GPIO_Init+0x134>)
 8002204:	f001 f82a 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8002208:	2310      	movs	r3, #16
 800220a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220c:	2301      	movs	r3, #1
 800220e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_GPIO_Init+0x138>)
 8002220:	f001 f81c 	bl	800325c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2006      	movs	r0, #6
 800222a:	f000 fbca 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800222e:	2006      	movs	r0, #6
 8002230:	f000 fbe3 	bl	80029fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2028      	movs	r0, #40	; 0x28
 800223a:	f000 fbc2 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800223e:	2028      	movs	r0, #40	; 0x28
 8002240:	f000 fbdb 	bl	80029fa <HAL_NVIC_EnableIRQ>

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020800 	.word	0x40020800
 8002258:	10210000 	.word	0x10210000
 800225c:	10110000 	.word	0x10110000

08002260 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8002270:	f7ff fcac 	bl	8001bcc <Tim3IT>
	else
		__NOP();
}
 8002274:	e000      	b.n	8002278 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8002276:	bf00      	nop
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20002c54 	.word	0x20002c54

08002284 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8002294:	f7ff fcc0 	bl	8001c18 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229e:	d103      	bne.n	80022a8 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x30>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 80022a6:	e000      	b.n	80022aa <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 80022a8:	bf00      	nop
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000009d 	.word	0x2000009d

080022b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_MspInit+0x4c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <HAL_MspInit+0x4c>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_MspInit+0x4c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_MspInit+0x4c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_MspInit+0x4c>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002306:	2007      	movs	r0, #7
 8002308:	f000 fb50 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <HAL_DAC_MspInit+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d158      	bne.n	80023ec <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_DAC_MspInit+0xe0>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a2d      	ldr	r2, [pc, #180]	; (80023f8 <HAL_DAC_MspInit+0xe0>)
 8002344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_DAC_MspInit+0xe0>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_DAC_MspInit+0xe0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <HAL_DAC_MspInit+0xe0>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_DAC_MspInit+0xe0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002372:	2310      	movs	r3, #16
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002376:	2303      	movs	r3, #3
 8002378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	481d      	ldr	r0, [pc, #116]	; (80023fc <HAL_DAC_MspInit+0xe4>)
 8002386:	f000 ff69 	bl	800325c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_DAC_MspInit+0xec>)
 800238e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 8002392:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002396:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023aa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80023d0:	480b      	ldr	r0, [pc, #44]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023d2:	f000 fbeb 	bl	8002bac <HAL_DMA_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80023dc:	f7ff ff6c 	bl	80022b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_DAC_MspInit+0xe8>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40007400 	.word	0x40007400
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000
 8002400:	20002c94 	.word	0x20002c94
 8002404:	40026088 	.word	0x40026088

08002408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_TIM_Base_MspInit+0x70>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <HAL_TIM_Base_MspInit+0x70>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_TIM_Base_MspInit+0x70>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002436:	e01a      	b.n	800246e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_TIM_Base_MspInit+0x74>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d115      	bne.n	800246e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_TIM_Base_MspInit+0x70>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_TIM_Base_MspInit+0x70>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_TIM_Base_MspInit+0x70>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	201d      	movs	r0, #29
 8002464:	f000 faad 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002468:	201d      	movs	r0, #29
 800246a:	f000 fac6 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40000400 	.word	0x40000400

08002480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_UART_MspInit+0x84>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12b      	bne.n	80024fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_UART_MspInit+0x88>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_UART_MspInit+0x88>)
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_UART_MspInit+0x88>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_UART_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_UART_MspInit+0x88>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_UART_MspInit+0x88>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024da:	230c      	movs	r3, #12
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ea:	2307      	movs	r3, #7
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <HAL_UART_MspInit+0x8c>)
 80024f6:	f000 feb1 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	; 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40004400 	.word	0x40004400
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000

08002510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <MemManage_Handler+0x4>

0800252a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <UsageFault_Handler+0x4>

08002536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002564:	f000 f8ee 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002570:	2001      	movs	r0, #1
 8002572:	f001 f81f 	bl	80035b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA1_Stream5_IRQHandler+0x10>)
 8002582:	f000 fc31 	bl	8002de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20002c94 	.word	0x20002c94

08002590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <TIM3_IRQHandler+0x10>)
 8002596:	f001 fdd7 	bl	8004148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20002c54 	.word	0x20002c54

080025a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025ac:	f001 f802 	bl	80035b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <_sbrk+0x5c>)
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <_sbrk+0x60>)
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <_sbrk+0x64>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <_sbrk+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d207      	bcs.n	80025f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e4:	f002 fe0e 	bl	8005204 <__errno>
 80025e8:	4602      	mov	r2, r0
 80025ea:	230c      	movs	r3, #12
 80025ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	e009      	b.n	8002608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <_sbrk+0x64>)
 8002604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002606:	68fb      	ldr	r3, [r7, #12]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20020000 	.word	0x20020000
 8002614:	00000400 	.word	0x00000400
 8002618:	200000a4 	.word	0x200000a4
 800261c:	20004d98 	.word	0x20004d98

08002620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <SystemInit+0x28>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <SystemInit+0x28>)
 800262c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SystemInit+0x28>)
 8002636:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800263a:	609a      	str	r2, [r3, #8]
#endif
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800264c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002684 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002650:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002652:	e003      	b.n	800265c <LoopCopyDataInit>

08002654 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002656:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002658:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800265a:	3104      	adds	r1, #4

0800265c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002660:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002662:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002664:	d3f6      	bcc.n	8002654 <CopyDataInit>
  ldr  r2, =_sbss
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002668:	e002      	b.n	8002670 <LoopFillZerobss>

0800266a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800266a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800266c:	f842 3b04 	str.w	r3, [r2], #4

08002670 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002672:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002674:	d3f9      	bcc.n	800266a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002676:	f7ff ffd3 	bl	8002620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267a:	f002 fdc9 	bl	8005210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267e:	f7ff fbaf 	bl	8001de0 <main>
  bx  lr    
 8002682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002684:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002688:	08007e58 	.word	0x08007e58
  ldr  r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002690:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002694:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002698:	20004d94 	.word	0x20004d94

0800269c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC_IRQHandler>
	...

080026a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <HAL_Init+0x40>)
 80026aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_Init+0x40>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_Init+0x40>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_Init+0x40>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c8:	2003      	movs	r0, #3
 80026ca:	f000 f96f 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 f808 	bl	80026e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d4:	f7ff fdf8 	bl	80022c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00

080026e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_InitTick+0x54>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_InitTick+0x58>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f995 	bl	8002a32 <HAL_SYSTICK_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e00e      	b.n	8002730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0f      	cmp	r3, #15
 8002716:	d80a      	bhi.n	800272e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002718:	2200      	movs	r2, #0
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f000 f94f 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_InitTick+0x5c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000008 	.word	0x20000008
 800273c:	20000010 	.word	0x20000010
 8002740:	2000000c 	.word	0x2000000c

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000010 	.word	0x20000010
 8002768:	20004d8c 	.word	0x20004d8c

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20004d8c 	.word	0x20004d8c

08002784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff ffee 	bl	800276c <HAL_GetTick>
 8002790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d005      	beq.n	80027aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_Delay+0x40>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027aa:	bf00      	nop
 80027ac:	f7ff ffde 	bl	800276c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d8f7      	bhi.n	80027ac <HAL_Delay+0x28>
  {
  }
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000010 	.word	0x20000010

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db0b      	blt.n	8002856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <__NVIC_EnableIRQ+0x38>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000e100 	.word	0xe000e100

08002868 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db10      	blt.n	800289c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4909      	ldr	r1, [pc, #36]	; (80028a8 <__NVIC_DisableIRQ+0x40>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	3320      	adds	r3, #32
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002898:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff07 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff1c 	bl	8002810 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff0f 	bl	800282c <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff1f 	bl	8002868 <__NVIC_DisableIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ff94 	bl	8002968 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e014      	b.n	8002a86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	791b      	ldrb	r3, [r3, #4]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fc53 	bl	8002318 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6819      	ldr	r1, [r3, #0]
 8002aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43da      	mvns	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	400a      	ands	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f915 	bl	8002d08 <HAL_DMA_Abort>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e006      	b.n	8002af2 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f90d 	bl	8002d08 <HAL_DMA_Abort>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2204      	movs	r2, #4
 8002afc:	711a      	strb	r2, [r3, #4]
 8002afe:	e002      	b.n	8002b06 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_DAC_ConfigChannel+0x20>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e036      	b.n	8002b9e <HAL_DAC_ConfigChannel+0x8e>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002b44:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4013      	ands	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	22c0      	movs	r2, #192	; 0xc0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff fdd8 	bl	800276c <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e099      	b.n	8002cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be8:	e00f      	b.n	8002c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bea:	f7ff fdbf 	bl	800276c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d908      	bls.n	8002c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e078      	b.n	8002cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e8      	bne.n	8002bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_DMA_Init+0x158>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d107      	bne.n	8002c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f023 0307 	bic.w	r3, r3, #7
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d117      	bne.n	8002cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa59 	bl	8003168 <DMA_CheckFifoParam>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e016      	b.n	8002cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa10 	bl	80030fc <DMA_CalcBaseAndBitshift>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	223f      	movs	r2, #63	; 0x3f
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	f010803f 	.word	0xf010803f

08002d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d16:	f7ff fd29 	bl	800276c <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d008      	beq.n	8002d3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e052      	b.n	8002de0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0216 	bic.w	r2, r2, #22
 8002d48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_DMA_Abort+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8a:	e013      	b.n	8002db4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d8c:	f7ff fcee 	bl	800276c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d90c      	bls.n	8002db4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e015      	b.n	8002de0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e4      	bne.n	8002d8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	223f      	movs	r2, #63	; 0x3f
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002df4:	4b92      	ldr	r3, [pc, #584]	; (8003040 <HAL_DMA_IRQHandler+0x258>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a92      	ldr	r2, [pc, #584]	; (8003044 <HAL_DMA_IRQHandler+0x25c>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a9b      	lsrs	r3, r3, #10
 8002e00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	2208      	movs	r2, #8
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01a      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0204 	bic.w	r2, r2, #4
 8002e3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	2208      	movs	r2, #8
 8002e42:	409a      	lsls	r2, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d012      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	2201      	movs	r2, #1
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f043 0202 	orr.w	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2204      	movs	r2, #4
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2204      	movs	r2, #4
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d043      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d03c      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d108      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d024      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
 8002f16:	e01f      	b.n	8002f58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
 8002f28:	e016      	b.n	8002f58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0208 	bic.w	r2, r2, #8
 8002f46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 808e 	beq.w	8003086 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8086 	beq.w	8003086 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	2220      	movs	r2, #32
 8002f80:	409a      	lsls	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d136      	bne.n	8003000 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0216 	bic.w	r2, r2, #22
 8002fa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_DMA_IRQHandler+0x1da>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0208 	bic.w	r2, r2, #8
 8002fd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	223f      	movs	r2, #63	; 0x3f
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07d      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
        }
        return;
 8002ffe:	e078      	b.n	80030f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01c      	beq.n	8003048 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d108      	bne.n	800302e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	2b00      	cmp	r3, #0
 8003022:	d030      	beq.n	8003086 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e02b      	b.n	8003086 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d027      	beq.n	8003086 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
 800303e:	e022      	b.n	8003086 <HAL_DMA_IRQHandler+0x29e>
 8003040:	20000008 	.word	0x20000008
 8003044:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0210 	bic.w	r2, r2, #16
 8003064:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	2b00      	cmp	r3, #0
 800308c:	d032      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d022      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2205      	movs	r2, #5
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3301      	adds	r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d307      	bcc.n	80030ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f2      	bne.n	80030b2 <HAL_DMA_IRQHandler+0x2ca>
 80030cc:	e000      	b.n	80030d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e000      	b.n	80030f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80030f2:	bf00      	nop
    }
  }
}
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop

080030fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3b10      	subs	r3, #16
 800310c:	4a14      	ldr	r2, [pc, #80]	; (8003160 <DMA_CalcBaseAndBitshift+0x64>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003116:	4a13      	ldr	r2, [pc, #76]	; (8003164 <DMA_CalcBaseAndBitshift+0x68>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d909      	bls.n	800313e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	1d1a      	adds	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	659a      	str	r2, [r3, #88]	; 0x58
 800313c:	e007      	b.n	800314e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	aaaaaaab 	.word	0xaaaaaaab
 8003164:	08007bf0 	.word	0x08007bf0

08003168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11f      	bne.n	80031c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d855      	bhi.n	8003234 <DMA_CheckFifoParam+0xcc>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <DMA_CheckFifoParam+0x28>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031b3 	.word	0x080031b3
 8003198:	080031a1 	.word	0x080031a1
 800319c:	08003235 	.word	0x08003235
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d045      	beq.n	8003238 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b0:	e042      	b.n	8003238 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ba:	d13f      	bne.n	800323c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c0:	e03c      	b.n	800323c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ca:	d121      	bne.n	8003210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d836      	bhi.n	8003240 <DMA_CheckFifoParam+0xd8>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <DMA_CheckFifoParam+0x70>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031ef 	.word	0x080031ef
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	08003201 	.word	0x08003201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e02f      	b.n	800324e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d024      	beq.n	8003244 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e021      	b.n	8003244 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003208:	d11e      	bne.n	8003248 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800320e:	e01b      	b.n	8003248 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d902      	bls.n	800321c <DMA_CheckFifoParam+0xb4>
 8003216:	2b03      	cmp	r3, #3
 8003218:	d003      	beq.n	8003222 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800321a:	e018      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e015      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00e      	beq.n	800324c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      break;
 8003232:	e00b      	b.n	800324c <DMA_CheckFifoParam+0xe4>
      break;
 8003234:	bf00      	nop
 8003236:	e00a      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 8003238:	bf00      	nop
 800323a:	e008      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 800323c:	bf00      	nop
 800323e:	e006      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 8003240:	bf00      	nop
 8003242:	e004      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 8003244:	bf00      	nop
 8003246:	e002      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;   
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 800324c:	bf00      	nop
    }
  } 
  
  return status; 
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	e165      	b.n	8003544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003278:	2201      	movs	r2, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	f040 8154 	bne.w	800353e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d00b      	beq.n	80032b6 <HAL_GPIO_Init+0x5a>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d007      	beq.n	80032b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032aa:	2b11      	cmp	r3, #17
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b12      	cmp	r3, #18
 80032b4:	d130      	bne.n	8003318 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ec:	2201      	movs	r2, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 0201 	and.w	r2, r3, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0xfc>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b12      	cmp	r3, #18
 8003356:	d123      	bne.n	80033a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	08da      	lsrs	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3208      	adds	r2, #8
 8003360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	220f      	movs	r2, #15
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	08da      	lsrs	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3208      	adds	r2, #8
 800339a:	69b9      	ldr	r1, [r7, #24]
 800339c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0203 	and.w	r2, r3, #3
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80ae 	beq.w	800353e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b5c      	ldr	r3, [pc, #368]	; (8003558 <HAL_GPIO_Init+0x2fc>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a5b      	ldr	r2, [pc, #364]	; (8003558 <HAL_GPIO_Init+0x2fc>)
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_GPIO_Init+0x2fc>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fe:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_GPIO_Init+0x300>)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_GPIO_Init+0x304>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d025      	beq.n	8003476 <HAL_GPIO_Init+0x21a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4d      	ldr	r2, [pc, #308]	; (8003564 <HAL_GPIO_Init+0x308>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01f      	beq.n	8003472 <HAL_GPIO_Init+0x216>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4c      	ldr	r2, [pc, #304]	; (8003568 <HAL_GPIO_Init+0x30c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_Init+0x212>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4b      	ldr	r2, [pc, #300]	; (800356c <HAL_GPIO_Init+0x310>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0x20e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_GPIO_Init+0x314>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_Init+0x20a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_GPIO_Init+0x318>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x206>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a48      	ldr	r2, [pc, #288]	; (8003578 <HAL_GPIO_Init+0x31c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_Init+0x202>
 800345a:	2306      	movs	r3, #6
 800345c:	e00c      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 800345e:	2307      	movs	r3, #7
 8003460:	e00a      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003462:	2305      	movs	r3, #5
 8003464:	e008      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003466:	2304      	movs	r3, #4
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 800346a:	2303      	movs	r3, #3
 800346c:	e004      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 800346e:	2302      	movs	r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003476:	2300      	movs	r3, #0
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f002 0203 	and.w	r2, r2, #3
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	4093      	lsls	r3, r2
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003488:	4934      	ldr	r1, [pc, #208]	; (800355c <HAL_GPIO_Init+0x300>)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <HAL_GPIO_Init+0x320>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ba:	4a30      	ldr	r2, [pc, #192]	; (800357c <HAL_GPIO_Init+0x320>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_GPIO_Init+0x320>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e4:	4a25      	ldr	r2, [pc, #148]	; (800357c <HAL_GPIO_Init+0x320>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_GPIO_Init+0x320>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350e:	4a1b      	ldr	r2, [pc, #108]	; (800357c <HAL_GPIO_Init+0x320>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_GPIO_Init+0x320>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003538:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_GPIO_Init+0x320>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	f67f ae96 	bls.w	8003278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800354c:	bf00      	nop
 800354e:	3724      	adds	r7, #36	; 0x24
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40021400 	.word	0x40021400
 8003578:	40021800 	.word	0x40021800
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fe56 	bl	8002284 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0cc      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d90c      	bls.n	8003620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0b8      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800365a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	494d      	ldr	r1, [pc, #308]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d044      	beq.n	8003704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d119      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e07f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e067      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036c2:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f023 0203 	bic.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4934      	ldr	r1, [pc, #208]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d4:	f7ff f84a 	bl	800276c <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036dc:	f7ff f846 	bl	800276c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e04f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 020c 	and.w	r2, r3, #12
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	429a      	cmp	r2, r3
 8003702:	d1eb      	bne.n	80036dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d20c      	bcs.n	800372c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e032      	b.n	8003792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4916      	ldr	r1, [pc, #88]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	490e      	ldr	r1, [pc, #56]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800376a:	f000 f855 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 800376e:	4601      	mov	r1, r0
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x1c0>)
 800377c:	5cd3      	ldrb	r3, [r2, r3]
 800377e:	fa21 f303 	lsr.w	r3, r1, r3
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1c8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe ffaa 	bl	80026e4 <HAL_InitTick>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023c00 	.word	0x40023c00
 80037a0:	40023800 	.word	0x40023800
 80037a4:	08007bd8 	.word	0x08007bd8
 80037a8:	20000008 	.word	0x20000008
 80037ac:	2000000c 	.word	0x2000000c

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000008 	.word	0x20000008

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037cc:	f7ff fff0 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037d0:	4601      	mov	r1, r0
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0a9b      	lsrs	r3, r3, #10
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4a03      	ldr	r2, [pc, #12]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800
 80037ec:	08007be8 	.word	0x08007be8

080037f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f4:	f7ff ffdc 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037f8:	4601      	mov	r1, r0
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	0b5b      	lsrs	r3, r3, #13
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	4a03      	ldr	r2, [pc, #12]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	08007be8 	.word	0x08007be8

08003818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003832:	4bc6      	ldr	r3, [pc, #792]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b0c      	cmp	r3, #12
 800383c:	f200 817e 	bhi.w	8003b3c <HAL_RCC_GetSysClockFreq+0x324>
 8003840:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <HAL_RCC_GetSysClockFreq+0x30>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	0800387d 	.word	0x0800387d
 800384c:	08003b3d 	.word	0x08003b3d
 8003850:	08003b3d 	.word	0x08003b3d
 8003854:	08003b3d 	.word	0x08003b3d
 8003858:	08003883 	.word	0x08003883
 800385c:	08003b3d 	.word	0x08003b3d
 8003860:	08003b3d 	.word	0x08003b3d
 8003864:	08003b3d 	.word	0x08003b3d
 8003868:	08003889 	.word	0x08003889
 800386c:	08003b3d 	.word	0x08003b3d
 8003870:	08003b3d 	.word	0x08003b3d
 8003874:	08003b3d 	.word	0x08003b3d
 8003878:	080039e5 	.word	0x080039e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4bb4      	ldr	r3, [pc, #720]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x338>)
 800387e:	613b      	str	r3, [r7, #16]
       break;
 8003880:	e15f      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003882:	4bb4      	ldr	r3, [pc, #720]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003884:	613b      	str	r3, [r7, #16]
      break;
 8003886:	e15c      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003888:	4bb0      	ldr	r3, [pc, #704]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003890:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003892:	4bae      	ldr	r3, [pc, #696]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d04a      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4bab      	ldr	r3, [pc, #684]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	f04f 0400 	mov.w	r4, #0
 80038a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	ea03 0501 	and.w	r5, r3, r1
 80038b4:	ea04 0602 	and.w	r6, r4, r2
 80038b8:	4629      	mov	r1, r5
 80038ba:	4632      	mov	r2, r6
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	f04f 0400 	mov.w	r4, #0
 80038c4:	0154      	lsls	r4, r2, #5
 80038c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038ca:	014b      	lsls	r3, r1, #5
 80038cc:	4619      	mov	r1, r3
 80038ce:	4622      	mov	r2, r4
 80038d0:	1b49      	subs	r1, r1, r5
 80038d2:	eb62 0206 	sbc.w	r2, r2, r6
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	0194      	lsls	r4, r2, #6
 80038e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038e4:	018b      	lsls	r3, r1, #6
 80038e6:	1a5b      	subs	r3, r3, r1
 80038e8:	eb64 0402 	sbc.w	r4, r4, r2
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	00e2      	lsls	r2, r4, #3
 80038f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038fa:	00d9      	lsls	r1, r3, #3
 80038fc:	460b      	mov	r3, r1
 80038fe:	4614      	mov	r4, r2
 8003900:	195b      	adds	r3, r3, r5
 8003902:	eb44 0406 	adc.w	r4, r4, r6
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	0262      	lsls	r2, r4, #9
 8003910:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003914:	0259      	lsls	r1, r3, #9
 8003916:	460b      	mov	r3, r1
 8003918:	4614      	mov	r4, r2
 800391a:	4618      	mov	r0, r3
 800391c:	4621      	mov	r1, r4
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f04f 0400 	mov.w	r4, #0
 8003924:	461a      	mov	r2, r3
 8003926:	4623      	mov	r3, r4
 8003928:	f7fd f97e 	bl	8000c28 <__aeabi_uldivmod>
 800392c:	4603      	mov	r3, r0
 800392e:	460c      	mov	r4, r1
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e049      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003934:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	f04f 0400 	mov.w	r4, #0
 800393e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	ea03 0501 	and.w	r5, r3, r1
 800394a:	ea04 0602 	and.w	r6, r4, r2
 800394e:	4629      	mov	r1, r5
 8003950:	4632      	mov	r2, r6
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	f04f 0400 	mov.w	r4, #0
 800395a:	0154      	lsls	r4, r2, #5
 800395c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003960:	014b      	lsls	r3, r1, #5
 8003962:	4619      	mov	r1, r3
 8003964:	4622      	mov	r2, r4
 8003966:	1b49      	subs	r1, r1, r5
 8003968:	eb62 0206 	sbc.w	r2, r2, r6
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f04f 0400 	mov.w	r4, #0
 8003974:	0194      	lsls	r4, r2, #6
 8003976:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800397a:	018b      	lsls	r3, r1, #6
 800397c:	1a5b      	subs	r3, r3, r1
 800397e:	eb64 0402 	sbc.w	r4, r4, r2
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	00e2      	lsls	r2, r4, #3
 800398c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003990:	00d9      	lsls	r1, r3, #3
 8003992:	460b      	mov	r3, r1
 8003994:	4614      	mov	r4, r2
 8003996:	195b      	adds	r3, r3, r5
 8003998:	eb44 0406 	adc.w	r4, r4, r6
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	02a2      	lsls	r2, r4, #10
 80039a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039aa:	0299      	lsls	r1, r3, #10
 80039ac:	460b      	mov	r3, r1
 80039ae:	4614      	mov	r4, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	4621      	mov	r1, r4
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f04f 0400 	mov.w	r4, #0
 80039ba:	461a      	mov	r2, r3
 80039bc:	4623      	mov	r3, r4
 80039be:	f7fd f933 	bl	8000c28 <__aeabi_uldivmod>
 80039c2:	4603      	mov	r3, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c8:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	3301      	adds	r3, #1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	613b      	str	r3, [r7, #16]
      break;
 80039e2:	e0ae      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ee:	4b57      	ldr	r3, [pc, #348]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d04a      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fa:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	ea03 0501 	and.w	r5, r3, r1
 8003a10:	ea04 0602 	and.w	r6, r4, r2
 8003a14:	4629      	mov	r1, r5
 8003a16:	4632      	mov	r2, r6
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	0154      	lsls	r4, r2, #5
 8003a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a26:	014b      	lsls	r3, r1, #5
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	1b49      	subs	r1, r1, r5
 8003a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	f04f 0400 	mov.w	r4, #0
 8003a3a:	0194      	lsls	r4, r2, #6
 8003a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a40:	018b      	lsls	r3, r1, #6
 8003a42:	1a5b      	subs	r3, r3, r1
 8003a44:	eb64 0402 	sbc.w	r4, r4, r2
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	00e2      	lsls	r2, r4, #3
 8003a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a56:	00d9      	lsls	r1, r3, #3
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	195b      	adds	r3, r3, r5
 8003a5e:	eb44 0406 	adc.w	r4, r4, r6
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	0262      	lsls	r2, r4, #9
 8003a6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a70:	0259      	lsls	r1, r3, #9
 8003a72:	460b      	mov	r3, r1
 8003a74:	4614      	mov	r4, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	4621      	mov	r1, r4
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f04f 0400 	mov.w	r4, #0
 8003a80:	461a      	mov	r2, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	f7fd f8d0 	bl	8000c28 <__aeabi_uldivmod>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e049      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a90:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	ea03 0501 	and.w	r5, r3, r1
 8003aa6:	ea04 0602 	and.w	r6, r4, r2
 8003aaa:	4629      	mov	r1, r5
 8003aac:	4632      	mov	r2, r6
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	f04f 0400 	mov.w	r4, #0
 8003ab6:	0154      	lsls	r4, r2, #5
 8003ab8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003abc:	014b      	lsls	r3, r1, #5
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	1b49      	subs	r1, r1, r5
 8003ac4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	0194      	lsls	r4, r2, #6
 8003ad2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ad6:	018b      	lsls	r3, r1, #6
 8003ad8:	1a5b      	subs	r3, r3, r1
 8003ada:	eb64 0402 	sbc.w	r4, r4, r2
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	00e2      	lsls	r2, r4, #3
 8003ae8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003aec:	00d9      	lsls	r1, r3, #3
 8003aee:	460b      	mov	r3, r1
 8003af0:	4614      	mov	r4, r2
 8003af2:	195b      	adds	r3, r3, r5
 8003af4:	eb44 0406 	adc.w	r4, r4, r6
 8003af8:	f04f 0100 	mov.w	r1, #0
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	02a2      	lsls	r2, r4, #10
 8003b02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b06:	0299      	lsls	r1, r3, #10
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4614      	mov	r4, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	4621      	mov	r1, r4
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f04f 0400 	mov.w	r4, #0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4623      	mov	r3, r4
 8003b1a:	f7fd f885 	bl	8000c28 <__aeabi_uldivmod>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	460c      	mov	r4, r1
 8003b22:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x334>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	0f1b      	lsrs	r3, r3, #28
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	613b      	str	r3, [r7, #16]
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x338>)
 8003b3e:	613b      	str	r3, [r7, #16]
      break;
 8003b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b42:	693b      	ldr	r3, [r7, #16]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	007a1200 	.word	0x007a1200

08003b58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8083 	beq.w	8003c78 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b72:	4b95      	ldr	r3, [pc, #596]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d019      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b7e:	4b92      	ldr	r3, [pc, #584]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d106      	bne.n	8003b98 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8a:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b96:	d00c      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b98:	4b8b      	ldr	r3, [pc, #556]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	d112      	bne.n	8003bca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba4:	4b88      	ldr	r3, [pc, #544]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb0:	d10b      	bne.n	8003bca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb2:	4b85      	ldr	r3, [pc, #532]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d05b      	beq.n	8003c76 <HAL_RCC_OscConfig+0x11e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d157      	bne.n	8003c76 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e216      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x8a>
 8003bd4:	4b7c      	ldr	r3, [pc, #496]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7b      	ldr	r2, [pc, #492]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e01d      	b.n	8003c1e <HAL_RCC_OscConfig+0xc6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0xae>
 8003bec:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a75      	ldr	r2, [pc, #468]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a72      	ldr	r2, [pc, #456]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0xc6>
 8003c06:	4b70      	ldr	r3, [pc, #448]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6f      	ldr	r2, [pc, #444]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6c      	ldr	r2, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fe fda1 	bl	800276c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2e:	f7fe fd9d 	bl	800276c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e1db      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c40:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0xd6>
 8003c4c:	e014      	b.n	8003c78 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fd8d 	bl	800276c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c56:	f7fe fd89 	bl	800276c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b64      	cmp	r3, #100	; 0x64
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1c7      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c68:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0xfe>
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d06f      	beq.n	8003d64 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c84:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d017      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c90:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d11c      	bne.n	8003cee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb4:	4b44      	ldr	r3, [pc, #272]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d116      	bne.n	8003cee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc0:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x180>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e18f      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4938      	ldr	r1, [pc, #224]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cec:	e03a      	b.n	8003d64 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf6:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fe fd36 	bl	800276c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d04:	f7fe fd32 	bl	800276c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e170      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d16:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4925      	ldr	r1, [pc, #148]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
 8003d36:	e015      	b.n	8003d64 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fe fd15 	bl	800276c <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fe fd11 	bl	800276c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e14f      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d037      	beq.n	8003de0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_RCC_OscConfig+0x278>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fcf5 	bl	800276c <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fe fcf1 	bl	800276c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e12f      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x22e>
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_RCC_OscConfig+0x278>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fe fcde 	bl	800276c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db2:	e00f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fe fcda 	bl	800276c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d908      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e118      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	42470000 	.word	0x42470000
 8003dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b8a      	ldr	r3, [pc, #552]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e9      	bne.n	8003db4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8097 	beq.w	8003f1c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b83      	ldr	r3, [pc, #524]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b7f      	ldr	r3, [pc, #508]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a7e      	ldr	r2, [pc, #504]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b7c      	ldr	r3, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b79      	ldr	r3, [pc, #484]	; (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b76      	ldr	r3, [pc, #472]	; (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a75      	ldr	r2, [pc, #468]	; (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fe fc99 	bl	800276c <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fe fc95 	bl	800276c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0d3      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b6c      	ldr	r3, [pc, #432]	; (8004004 <HAL_RCC_OscConfig+0x4ac>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x31a>
 8003e64:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a65      	ldr	r2, [pc, #404]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e70:	e01c      	b.n	8003eac <HAL_RCC_OscConfig+0x354>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x33c>
 8003e7a:	4b61      	ldr	r3, [pc, #388]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a60      	ldr	r2, [pc, #384]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	4b5e      	ldr	r3, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a5d      	ldr	r2, [pc, #372]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0x354>
 8003e94:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a59      	ldr	r2, [pc, #356]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	4b57      	ldr	r3, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a56      	ldr	r2, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fe fc5a 	bl	800276c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fc56 	bl	800276c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e092      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ee      	beq.n	8003ebc <HAL_RCC_OscConfig+0x364>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe fc44 	bl	800276c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fe fc40 	bl	800276c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e07c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efe:	4b40      	ldr	r3, [pc, #256]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ee      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f10:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d068      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 030c 	and.w	r3, r3, #12
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d060      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d145      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f38:	4b33      	ldr	r3, [pc, #204]	; (8004008 <HAL_RCC_OscConfig+0x4b0>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fe fc15 	bl	800276c <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f46:	f7fe fc11 	bl	800276c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e04f      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f0      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	019b      	lsls	r3, r3, #6
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	071b      	lsls	r3, r3, #28
 8003f90:	491b      	ldr	r1, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <HAL_RCC_OscConfig+0x4b0>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fbe6 	bl	800276c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe fbe2 	bl	800276c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e020      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x44c>
 8003fc2:	e018      	b.n	8003ff6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x4b0>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe fbcf 	bl	800276c <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe fbcb 	bl	800276c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e009      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_OscConfig+0x4a8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x47a>
 8003ff0:	e001      	b.n	8003ff6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000
 8004008:	42470060 	.word	0x42470060

0800400c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e01d      	b.n	800405a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fe f9e8 	bl	8002408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 fa64 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d007      	beq.n	8004094 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <HAL_TIM_Base_Stop+0x40>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a1a      	ldr	r2, [r3, #32]
 80040d0:	f240 4344 	movw	r3, #1092	; 0x444
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_Base_Stop+0x40>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b06      	cmp	r3, #6
 8004128:	d007      	beq.n	800413a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0202 	mvn.w	r2, #2
 8004174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9a5 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f997 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f9a8 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0204 	mvn.w	r2, #4
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f97b 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f96d 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f97e 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b08      	cmp	r3, #8
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0208 	mvn.w	r2, #8
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f951 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f943 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f954 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2208      	movs	r2, #8
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f927 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f919 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f92a 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0201 	mvn.w	r2, #1
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd ffca 	bl	8002260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b80      	cmp	r3, #128	; 0x80
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fad0 	bl	8004898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8ef 	bl	8004502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b20      	cmp	r3, #32
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0220 	mvn.w	r2, #32
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa9a 	bl	8004884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIM_ConfigClockSource+0x18>
 800436c:	2302      	movs	r3, #2
 800436e:	e0a6      	b.n	80044be <HAL_TIM_ConfigClockSource+0x166>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004396:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d067      	beq.n	8004478 <HAL_TIM_ConfigClockSource+0x120>
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d80b      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x6c>
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d073      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d802      	bhi.n	80043ba <HAL_TIM_ConfigClockSource+0x62>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d06f      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043b8:	e078      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d06c      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d06a      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043c2:	e073      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043c4:	2b70      	cmp	r3, #112	; 0x70
 80043c6:	d00d      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x8c>
 80043c8:	2b70      	cmp	r3, #112	; 0x70
 80043ca:	d804      	bhi.n	80043d6 <HAL_TIM_ConfigClockSource+0x7e>
 80043cc:	2b50      	cmp	r3, #80	; 0x50
 80043ce:	d033      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0xe0>
 80043d0:	2b60      	cmp	r3, #96	; 0x60
 80043d2:	d041      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043d4:	e06a      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d066      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x152>
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e0:	d017      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043e2:	e063      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6899      	ldr	r1, [r3, #8]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f000 f9aa 	bl	800474c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004406:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
      break;
 8004410:	e04c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f000 f993 	bl	800474c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004434:	609a      	str	r2, [r3, #8]
      break;
 8004436:	e039      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	461a      	mov	r2, r3
 8004446:	f000 f907 	bl	8004658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2150      	movs	r1, #80	; 0x50
 8004450:	4618      	mov	r0, r3
 8004452:	f000 f960 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004456:	e029      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	461a      	mov	r2, r3
 8004466:	f000 f926 	bl	80046b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2160      	movs	r1, #96	; 0x60
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f950 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004476:	e019      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	461a      	mov	r2, r3
 8004486:	f000 f8e7 	bl	8004658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2140      	movs	r1, #64	; 0x40
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f940 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004496:	e009      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 f937 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 80044a8:	e000      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a40      	ldr	r2, [pc, #256]	; (800462c <TIM_Base_SetConfig+0x114>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	d00f      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3d      	ldr	r2, [pc, #244]	; (8004630 <TIM_Base_SetConfig+0x118>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3c      	ldr	r2, [pc, #240]	; (8004634 <TIM_Base_SetConfig+0x11c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3b      	ldr	r2, [pc, #236]	; (8004638 <TIM_Base_SetConfig+0x120>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3a      	ldr	r2, [pc, #232]	; (800463c <TIM_Base_SetConfig+0x124>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2f      	ldr	r2, [pc, #188]	; (800462c <TIM_Base_SetConfig+0x114>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d02b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d027      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <TIM_Base_SetConfig+0x118>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d023      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <TIM_Base_SetConfig+0x11c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <TIM_Base_SetConfig+0x120>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a29      	ldr	r2, [pc, #164]	; (800463c <TIM_Base_SetConfig+0x124>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d017      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a28      	ldr	r2, [pc, #160]	; (8004640 <TIM_Base_SetConfig+0x128>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a27      	ldr	r2, [pc, #156]	; (8004644 <TIM_Base_SetConfig+0x12c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a26      	ldr	r2, [pc, #152]	; (8004648 <TIM_Base_SetConfig+0x130>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a25      	ldr	r2, [pc, #148]	; (800464c <TIM_Base_SetConfig+0x134>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a24      	ldr	r2, [pc, #144]	; (8004650 <TIM_Base_SetConfig+0x138>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <TIM_Base_SetConfig+0x13c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <TIM_Base_SetConfig+0x114>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <TIM_Base_SetConfig+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010000 	.word	0x40010000
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40010400 	.word	0x40010400
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800
 800464c:	40001800 	.word	0x40001800
 8004650:	40001c00 	.word	0x40001c00
 8004654:	40002000 	.word	0x40002000

08004658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f023 030a 	bic.w	r3, r3, #10
 8004694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b087      	sub	sp, #28
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0210 	bic.w	r2, r3, #16
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	031b      	lsls	r3, r3, #12
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	f043 0307 	orr.w	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	021a      	lsls	r2, r3, #8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	431a      	orrs	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4313      	orrs	r3, r2
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e05a      	b.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a21      	ldr	r2, [pc, #132]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d022      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d01d      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1d      	ldr	r2, [pc, #116]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d018      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d10c      	bne.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4313      	orrs	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40010400 	.word	0x40010400
 800487c:	40014000 	.word	0x40014000
 8004880:	40001800 	.word	0x40001800

08004884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_Init>:
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Init+0x12>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e03f      	b.n	800493e <HAL_UART_Init+0x92>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_UART_Init+0x2c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd fdd4 	bl	8002480 <HAL_UART_MspInit>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f90b 	bl	8004b0c <UART_SetConfig>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004904:	611a      	str	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004914:	615a      	str	r2, [r3, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800493c:	2300      	movs	r3, #0
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_UART_Transmit>:
 8004946:	b580      	push	{r7, lr}
 8004948:	b088      	sub	sp, #32
 800494a:	af02      	add	r7, sp, #8
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b20      	cmp	r3, #32
 8004964:	f040 8083 	bne.w	8004a6e <HAL_UART_Transmit+0x128>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_UART_Transmit+0x2e>
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Transmit+0x32>
 8004974:	2301      	movs	r3, #1
 8004976:	e07b      	b.n	8004a70 <HAL_UART_Transmit+0x12a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_UART_Transmit+0x40>
 8004982:	2302      	movs	r3, #2
 8004984:	e074      	b.n	8004a70 <HAL_UART_Transmit+0x12a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2221      	movs	r2, #33	; 0x21
 8004998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800499c:	f7fd fee6 	bl	800276c <HAL_GetTick>
 80049a0:	6178      	str	r0, [r7, #20]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	88fa      	ldrh	r2, [r7, #6]
 80049a6:	849a      	strh	r2, [r3, #36]	; 0x24
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	84da      	strh	r2, [r3, #38]	; 0x26
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80049b6:	e042      	b.n	8004a3e <HAL_UART_Transmit+0xf8>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	84da      	strh	r2, [r3, #38]	; 0x26
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d122      	bne.n	8004a16 <HAL_UART_Transmit+0xd0>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f84c 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_UART_Transmit+0xa4>
 80049e6:	2303      	movs	r3, #3
 80049e8:	e042      	b.n	8004a70 <HAL_UART_Transmit+0x12a>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_UART_Transmit+0xc8>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	3302      	adds	r3, #2
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	e017      	b.n	8004a3e <HAL_UART_Transmit+0xf8>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	e013      	b.n	8004a3e <HAL_UART_Transmit+0xf8>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f829 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_UART_Transmit+0xea>
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e01f      	b.n	8004a70 <HAL_UART_Transmit+0x12a>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	60ba      	str	r2, [r7, #8]
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1b7      	bne.n	80049b8 <HAL_UART_Transmit+0x72>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f810 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_UART_Transmit+0x11c>
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e006      	b.n	8004a70 <HAL_UART_Transmit+0x12a>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_UART_Transmit+0x12a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_WaitOnFlagUntilTimeout>:
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71fb      	strb	r3, [r7, #7]
 8004a88:	e02c      	b.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d028      	beq.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a98:	f7fd fe68 	bl	800276c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d21d      	bcs.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ab6:	60da      	str	r2, [r3, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	615a      	str	r2, [r3, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e00f      	b.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x8c>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d0c3      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x12>
 8004b02:	2300      	movs	r3, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_SetConfig>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	611a      	str	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b4e:	f023 030c 	bic.w	r3, r3, #12
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	60d3      	str	r3, [r2, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	615a      	str	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7a:	f040 818b 	bne.w	8004e94 <UART_SetConfig+0x388>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4ac1      	ldr	r2, [pc, #772]	; (8004e88 <UART_SetConfig+0x37c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d005      	beq.n	8004b94 <UART_SetConfig+0x88>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4abf      	ldr	r2, [pc, #764]	; (8004e8c <UART_SetConfig+0x380>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	f040 80bd 	bne.w	8004d0e <UART_SetConfig+0x202>
 8004b94:	f7fe fe2c 	bl	80037f0 <HAL_RCC_GetPCLK2Freq>
 8004b98:	60b8      	str	r0, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	461d      	mov	r5, r3
 8004b9e:	f04f 0600 	mov.w	r6, #0
 8004ba2:	46a8      	mov	r8, r5
 8004ba4:	46b1      	mov	r9, r6
 8004ba6:	eb18 0308 	adds.w	r3, r8, r8
 8004baa:	eb49 0409 	adc.w	r4, r9, r9
 8004bae:	4698      	mov	r8, r3
 8004bb0:	46a1      	mov	r9, r4
 8004bb2:	eb18 0805 	adds.w	r8, r8, r5
 8004bb6:	eb49 0906 	adc.w	r9, r9, r6
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bce:	4688      	mov	r8, r1
 8004bd0:	4691      	mov	r9, r2
 8004bd2:	eb18 0005 	adds.w	r0, r8, r5
 8004bd6:	eb49 0106 	adc.w	r1, r9, r6
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	461d      	mov	r5, r3
 8004be0:	f04f 0600 	mov.w	r6, #0
 8004be4:	196b      	adds	r3, r5, r5
 8004be6:	eb46 0406 	adc.w	r4, r6, r6
 8004bea:	461a      	mov	r2, r3
 8004bec:	4623      	mov	r3, r4
 8004bee:	f7fc f81b 	bl	8000c28 <__aeabi_uldivmod>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4ba5      	ldr	r3, [pc, #660]	; (8004e90 <UART_SetConfig+0x384>)
 8004bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	461d      	mov	r5, r3
 8004c08:	f04f 0600 	mov.w	r6, #0
 8004c0c:	46a9      	mov	r9, r5
 8004c0e:	46b2      	mov	sl, r6
 8004c10:	eb19 0309 	adds.w	r3, r9, r9
 8004c14:	eb4a 040a 	adc.w	r4, sl, sl
 8004c18:	4699      	mov	r9, r3
 8004c1a:	46a2      	mov	sl, r4
 8004c1c:	eb19 0905 	adds.w	r9, r9, r5
 8004c20:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c38:	4689      	mov	r9, r1
 8004c3a:	4692      	mov	sl, r2
 8004c3c:	eb19 0005 	adds.w	r0, r9, r5
 8004c40:	eb4a 0106 	adc.w	r1, sl, r6
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	461d      	mov	r5, r3
 8004c4a:	f04f 0600 	mov.w	r6, #0
 8004c4e:	196b      	adds	r3, r5, r5
 8004c50:	eb46 0406 	adc.w	r4, r6, r6
 8004c54:	461a      	mov	r2, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	f7fb ffe6 	bl	8000c28 <__aeabi_uldivmod>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	461a      	mov	r2, r3
 8004c62:	4b8b      	ldr	r3, [pc, #556]	; (8004e90 <UART_SetConfig+0x384>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a86      	ldr	r2, [pc, #536]	; (8004e90 <UART_SetConfig+0x384>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c84:	4498      	add	r8, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	461d      	mov	r5, r3
 8004c8a:	f04f 0600 	mov.w	r6, #0
 8004c8e:	46a9      	mov	r9, r5
 8004c90:	46b2      	mov	sl, r6
 8004c92:	eb19 0309 	adds.w	r3, r9, r9
 8004c96:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	46a2      	mov	sl, r4
 8004c9e:	eb19 0905 	adds.w	r9, r9, r5
 8004ca2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cba:	4689      	mov	r9, r1
 8004cbc:	4692      	mov	sl, r2
 8004cbe:	eb19 0005 	adds.w	r0, r9, r5
 8004cc2:	eb4a 0106 	adc.w	r1, sl, r6
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	461d      	mov	r5, r3
 8004ccc:	f04f 0600 	mov.w	r6, #0
 8004cd0:	196b      	adds	r3, r5, r5
 8004cd2:	eb46 0406 	adc.w	r4, r6, r6
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4623      	mov	r3, r4
 8004cda:	f7fb ffa5 	bl	8000c28 <__aeabi_uldivmod>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4b6a      	ldr	r3, [pc, #424]	; (8004e90 <UART_SetConfig+0x384>)
 8004ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2164      	movs	r1, #100	; 0x64
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	3332      	adds	r3, #50	; 0x32
 8004cf8:	4a65      	ldr	r2, [pc, #404]	; (8004e90 <UART_SetConfig+0x384>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	f003 0207 	and.w	r2, r3, #7
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4442      	add	r2, r8
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	e26f      	b.n	80051ee <UART_SetConfig+0x6e2>
 8004d0e:	f7fe fd5b 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8004d12:	60b8      	str	r0, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	461d      	mov	r5, r3
 8004d18:	f04f 0600 	mov.w	r6, #0
 8004d1c:	46a8      	mov	r8, r5
 8004d1e:	46b1      	mov	r9, r6
 8004d20:	eb18 0308 	adds.w	r3, r8, r8
 8004d24:	eb49 0409 	adc.w	r4, r9, r9
 8004d28:	4698      	mov	r8, r3
 8004d2a:	46a1      	mov	r9, r4
 8004d2c:	eb18 0805 	adds.w	r8, r8, r5
 8004d30:	eb49 0906 	adc.w	r9, r9, r6
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d48:	4688      	mov	r8, r1
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	eb18 0005 	adds.w	r0, r8, r5
 8004d50:	eb49 0106 	adc.w	r1, r9, r6
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	461d      	mov	r5, r3
 8004d5a:	f04f 0600 	mov.w	r6, #0
 8004d5e:	196b      	adds	r3, r5, r5
 8004d60:	eb46 0406 	adc.w	r4, r6, r6
 8004d64:	461a      	mov	r2, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	f7fb ff5e 	bl	8000c28 <__aeabi_uldivmod>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <UART_SetConfig+0x384>)
 8004d74:	fba3 2302 	umull	r2, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	461d      	mov	r5, r3
 8004d82:	f04f 0600 	mov.w	r6, #0
 8004d86:	46a9      	mov	r9, r5
 8004d88:	46b2      	mov	sl, r6
 8004d8a:	eb19 0309 	adds.w	r3, r9, r9
 8004d8e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d92:	4699      	mov	r9, r3
 8004d94:	46a2      	mov	sl, r4
 8004d96:	eb19 0905 	adds.w	r9, r9, r5
 8004d9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d9e:	f04f 0100 	mov.w	r1, #0
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004daa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004db2:	4689      	mov	r9, r1
 8004db4:	4692      	mov	sl, r2
 8004db6:	eb19 0005 	adds.w	r0, r9, r5
 8004dba:	eb4a 0106 	adc.w	r1, sl, r6
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	461d      	mov	r5, r3
 8004dc4:	f04f 0600 	mov.w	r6, #0
 8004dc8:	196b      	adds	r3, r5, r5
 8004dca:	eb46 0406 	adc.w	r4, r6, r6
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	f7fb ff29 	bl	8000c28 <__aeabi_uldivmod>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	460c      	mov	r4, r1
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b2c      	ldr	r3, [pc, #176]	; (8004e90 <UART_SetConfig+0x384>)
 8004dde:	fba3 1302 	umull	r1, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2164      	movs	r1, #100	; 0x64
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	3332      	adds	r3, #50	; 0x32
 8004df0:	4a27      	ldr	r2, [pc, #156]	; (8004e90 <UART_SetConfig+0x384>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dfe:	4498      	add	r8, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	461d      	mov	r5, r3
 8004e04:	f04f 0600 	mov.w	r6, #0
 8004e08:	46a9      	mov	r9, r5
 8004e0a:	46b2      	mov	sl, r6
 8004e0c:	eb19 0309 	adds.w	r3, r9, r9
 8004e10:	eb4a 040a 	adc.w	r4, sl, sl
 8004e14:	4699      	mov	r9, r3
 8004e16:	46a2      	mov	sl, r4
 8004e18:	eb19 0905 	adds.w	r9, r9, r5
 8004e1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e34:	4689      	mov	r9, r1
 8004e36:	4692      	mov	sl, r2
 8004e38:	eb19 0005 	adds.w	r0, r9, r5
 8004e3c:	eb4a 0106 	adc.w	r1, sl, r6
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	461d      	mov	r5, r3
 8004e46:	f04f 0600 	mov.w	r6, #0
 8004e4a:	196b      	adds	r3, r5, r5
 8004e4c:	eb46 0406 	adc.w	r4, r6, r6
 8004e50:	461a      	mov	r2, r3
 8004e52:	4623      	mov	r3, r4
 8004e54:	f7fb fee8 	bl	8000c28 <__aeabi_uldivmod>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <UART_SetConfig+0x384>)
 8004e60:	fba3 1302 	umull	r1, r3, r3, r2
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	2164      	movs	r1, #100	; 0x64
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	3332      	adds	r3, #50	; 0x32
 8004e72:	4a07      	ldr	r2, [pc, #28]	; (8004e90 <UART_SetConfig+0x384>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	f003 0207 	and.w	r2, r3, #7
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4442      	add	r2, r8
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	e1b2      	b.n	80051ee <UART_SetConfig+0x6e2>
 8004e88:	40011000 	.word	0x40011000
 8004e8c:	40011400 	.word	0x40011400
 8004e90:	51eb851f 	.word	0x51eb851f
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4ad7      	ldr	r2, [pc, #860]	; (80051f8 <UART_SetConfig+0x6ec>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d005      	beq.n	8004eaa <UART_SetConfig+0x39e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4ad6      	ldr	r2, [pc, #856]	; (80051fc <UART_SetConfig+0x6f0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	f040 80d1 	bne.w	800504c <UART_SetConfig+0x540>
 8004eaa:	f7fe fca1 	bl	80037f0 <HAL_RCC_GetPCLK2Freq>
 8004eae:	60b8      	str	r0, [r7, #8]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	469a      	mov	sl, r3
 8004eb4:	f04f 0b00 	mov.w	fp, #0
 8004eb8:	46d0      	mov	r8, sl
 8004eba:	46d9      	mov	r9, fp
 8004ebc:	eb18 0308 	adds.w	r3, r8, r8
 8004ec0:	eb49 0409 	adc.w	r4, r9, r9
 8004ec4:	4698      	mov	r8, r3
 8004ec6:	46a1      	mov	r9, r4
 8004ec8:	eb18 080a 	adds.w	r8, r8, sl
 8004ecc:	eb49 090b 	adc.w	r9, r9, fp
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004edc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ee0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ee4:	4688      	mov	r8, r1
 8004ee6:	4691      	mov	r9, r2
 8004ee8:	eb1a 0508 	adds.w	r5, sl, r8
 8004eec:	eb4b 0609 	adc.w	r6, fp, r9
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	f04f 0400 	mov.w	r4, #0
 8004f02:	0094      	lsls	r4, r2, #2
 8004f04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f08:	008b      	lsls	r3, r1, #2
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	4628      	mov	r0, r5
 8004f10:	4631      	mov	r1, r6
 8004f12:	f7fb fe89 	bl	8000c28 <__aeabi_uldivmod>
 8004f16:	4603      	mov	r3, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4bb8      	ldr	r3, [pc, #736]	; (8005200 <UART_SetConfig+0x6f4>)
 8004f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	469b      	mov	fp, r3
 8004f2c:	f04f 0c00 	mov.w	ip, #0
 8004f30:	46d9      	mov	r9, fp
 8004f32:	46e2      	mov	sl, ip
 8004f34:	eb19 0309 	adds.w	r3, r9, r9
 8004f38:	eb4a 040a 	adc.w	r4, sl, sl
 8004f3c:	4699      	mov	r9, r3
 8004f3e:	46a2      	mov	sl, r4
 8004f40:	eb19 090b 	adds.w	r9, r9, fp
 8004f44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f5c:	4689      	mov	r9, r1
 8004f5e:	4692      	mov	sl, r2
 8004f60:	eb1b 0509 	adds.w	r5, fp, r9
 8004f64:	eb4c 060a 	adc.w	r6, ip, sl
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	f04f 0400 	mov.w	r4, #0
 8004f7a:	0094      	lsls	r4, r2, #2
 8004f7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f80:	008b      	lsls	r3, r1, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	4623      	mov	r3, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	4631      	mov	r1, r6
 8004f8a:	f7fb fe4d 	bl	8000c28 <__aeabi_uldivmod>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b9a      	ldr	r3, [pc, #616]	; (8005200 <UART_SetConfig+0x6f4>)
 8004f96:	fba3 1302 	umull	r1, r3, r3, r2
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2164      	movs	r1, #100	; 0x64
 8004f9e:	fb01 f303 	mul.w	r3, r1, r3
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	3332      	adds	r3, #50	; 0x32
 8004fa8:	4a95      	ldr	r2, [pc, #596]	; (8005200 <UART_SetConfig+0x6f4>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	4498      	add	r8, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	469b      	mov	fp, r3
 8004fba:	f04f 0c00 	mov.w	ip, #0
 8004fbe:	46d9      	mov	r9, fp
 8004fc0:	46e2      	mov	sl, ip
 8004fc2:	eb19 0309 	adds.w	r3, r9, r9
 8004fc6:	eb4a 040a 	adc.w	r4, sl, sl
 8004fca:	4699      	mov	r9, r3
 8004fcc:	46a2      	mov	sl, r4
 8004fce:	eb19 090b 	adds.w	r9, r9, fp
 8004fd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fe6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fea:	4689      	mov	r9, r1
 8004fec:	4692      	mov	sl, r2
 8004fee:	eb1b 0509 	adds.w	r5, fp, r9
 8004ff2:	eb4c 060a 	adc.w	r6, ip, sl
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	f04f 0400 	mov.w	r4, #0
 8005008:	0094      	lsls	r4, r2, #2
 800500a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800500e:	008b      	lsls	r3, r1, #2
 8005010:	461a      	mov	r2, r3
 8005012:	4623      	mov	r3, r4
 8005014:	4628      	mov	r0, r5
 8005016:	4631      	mov	r1, r6
 8005018:	f7fb fe06 	bl	8000c28 <__aeabi_uldivmod>
 800501c:	4603      	mov	r3, r0
 800501e:	460c      	mov	r4, r1
 8005020:	461a      	mov	r2, r3
 8005022:	4b77      	ldr	r3, [pc, #476]	; (8005200 <UART_SetConfig+0x6f4>)
 8005024:	fba3 1302 	umull	r1, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	2164      	movs	r1, #100	; 0x64
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	3332      	adds	r3, #50	; 0x32
 8005036:	4a72      	ldr	r2, [pc, #456]	; (8005200 <UART_SetConfig+0x6f4>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4442      	add	r2, r8
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	e0d0      	b.n	80051ee <UART_SetConfig+0x6e2>
 800504c:	f7fe fbbc 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8005050:	60b8      	str	r0, [r7, #8]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	469a      	mov	sl, r3
 8005056:	f04f 0b00 	mov.w	fp, #0
 800505a:	46d0      	mov	r8, sl
 800505c:	46d9      	mov	r9, fp
 800505e:	eb18 0308 	adds.w	r3, r8, r8
 8005062:	eb49 0409 	adc.w	r4, r9, r9
 8005066:	4698      	mov	r8, r3
 8005068:	46a1      	mov	r9, r4
 800506a:	eb18 080a 	adds.w	r8, r8, sl
 800506e:	eb49 090b 	adc.w	r9, r9, fp
 8005072:	f04f 0100 	mov.w	r1, #0
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800507e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005082:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005086:	4688      	mov	r8, r1
 8005088:	4691      	mov	r9, r2
 800508a:	eb1a 0508 	adds.w	r5, sl, r8
 800508e:	eb4b 0609 	adc.w	r6, fp, r9
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4619      	mov	r1, r3
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	f04f 0400 	mov.w	r4, #0
 80050a4:	0094      	lsls	r4, r2, #2
 80050a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050aa:	008b      	lsls	r3, r1, #2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4623      	mov	r3, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	4631      	mov	r1, r6
 80050b4:	f7fb fdb8 	bl	8000c28 <__aeabi_uldivmod>
 80050b8:	4603      	mov	r3, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	461a      	mov	r2, r3
 80050be:	4b50      	ldr	r3, [pc, #320]	; (8005200 <UART_SetConfig+0x6f4>)
 80050c0:	fba3 2302 	umull	r2, r3, r3, r2
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	469b      	mov	fp, r3
 80050ce:	f04f 0c00 	mov.w	ip, #0
 80050d2:	46d9      	mov	r9, fp
 80050d4:	46e2      	mov	sl, ip
 80050d6:	eb19 0309 	adds.w	r3, r9, r9
 80050da:	eb4a 040a 	adc.w	r4, sl, sl
 80050de:	4699      	mov	r9, r3
 80050e0:	46a2      	mov	sl, r4
 80050e2:	eb19 090b 	adds.w	r9, r9, fp
 80050e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050fe:	4689      	mov	r9, r1
 8005100:	4692      	mov	sl, r2
 8005102:	eb1b 0509 	adds.w	r5, fp, r9
 8005106:	eb4c 060a 	adc.w	r6, ip, sl
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4619      	mov	r1, r3
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	f04f 0400 	mov.w	r4, #0
 800511c:	0094      	lsls	r4, r2, #2
 800511e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005122:	008b      	lsls	r3, r1, #2
 8005124:	461a      	mov	r2, r3
 8005126:	4623      	mov	r3, r4
 8005128:	4628      	mov	r0, r5
 800512a:	4631      	mov	r1, r6
 800512c:	f7fb fd7c 	bl	8000c28 <__aeabi_uldivmod>
 8005130:	4603      	mov	r3, r0
 8005132:	460c      	mov	r4, r1
 8005134:	461a      	mov	r2, r3
 8005136:	4b32      	ldr	r3, [pc, #200]	; (8005200 <UART_SetConfig+0x6f4>)
 8005138:	fba3 1302 	umull	r1, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	2164      	movs	r1, #100	; 0x64
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	3332      	adds	r3, #50	; 0x32
 800514a:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <UART_SetConfig+0x6f4>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005156:	4498      	add	r8, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	469b      	mov	fp, r3
 800515c:	f04f 0c00 	mov.w	ip, #0
 8005160:	46d9      	mov	r9, fp
 8005162:	46e2      	mov	sl, ip
 8005164:	eb19 0309 	adds.w	r3, r9, r9
 8005168:	eb4a 040a 	adc.w	r4, sl, sl
 800516c:	4699      	mov	r9, r3
 800516e:	46a2      	mov	sl, r4
 8005170:	eb19 090b 	adds.w	r9, r9, fp
 8005174:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005178:	f04f 0100 	mov.w	r1, #0
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005184:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005188:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800518c:	4689      	mov	r9, r1
 800518e:	4692      	mov	sl, r2
 8005190:	eb1b 0509 	adds.w	r5, fp, r9
 8005194:	eb4c 060a 	adc.w	r6, ip, sl
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4619      	mov	r1, r3
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	f04f 0400 	mov.w	r4, #0
 80051aa:	0094      	lsls	r4, r2, #2
 80051ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051b0:	008b      	lsls	r3, r1, #2
 80051b2:	461a      	mov	r2, r3
 80051b4:	4623      	mov	r3, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	4631      	mov	r1, r6
 80051ba:	f7fb fd35 	bl	8000c28 <__aeabi_uldivmod>
 80051be:	4603      	mov	r3, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <UART_SetConfig+0x6f4>)
 80051c6:	fba3 1302 	umull	r1, r3, r3, r2
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2164      	movs	r1, #100	; 0x64
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	3332      	adds	r3, #50	; 0x32
 80051d8:	4a09      	ldr	r2, [pc, #36]	; (8005200 <UART_SetConfig+0x6f4>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f003 020f 	and.w	r2, r3, #15
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4442      	add	r2, r8
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	e7ff      	b.n	80051ee <UART_SetConfig+0x6e2>
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f8:	40011000 	.word	0x40011000
 80051fc:	40011400 	.word	0x40011400
 8005200:	51eb851f 	.word	0x51eb851f

08005204 <__errno>:
 8005204:	4b01      	ldr	r3, [pc, #4]	; (800520c <__errno+0x8>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000014 	.word	0x20000014

08005210 <__libc_init_array>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4e0d      	ldr	r6, [pc, #52]	; (8005248 <__libc_init_array+0x38>)
 8005214:	4c0d      	ldr	r4, [pc, #52]	; (800524c <__libc_init_array+0x3c>)
 8005216:	1ba4      	subs	r4, r4, r6
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	2500      	movs	r5, #0
 800521c:	42a5      	cmp	r5, r4
 800521e:	d109      	bne.n	8005234 <__libc_init_array+0x24>
 8005220:	4e0b      	ldr	r6, [pc, #44]	; (8005250 <__libc_init_array+0x40>)
 8005222:	4c0c      	ldr	r4, [pc, #48]	; (8005254 <__libc_init_array+0x44>)
 8005224:	f002 fc02 	bl	8007a2c <_init>
 8005228:	1ba4      	subs	r4, r4, r6
 800522a:	10a4      	asrs	r4, r4, #2
 800522c:	2500      	movs	r5, #0
 800522e:	42a5      	cmp	r5, r4
 8005230:	d105      	bne.n	800523e <__libc_init_array+0x2e>
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005238:	4798      	blx	r3
 800523a:	3501      	adds	r5, #1
 800523c:	e7ee      	b.n	800521c <__libc_init_array+0xc>
 800523e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005242:	4798      	blx	r3
 8005244:	3501      	adds	r5, #1
 8005246:	e7f2      	b.n	800522e <__libc_init_array+0x1e>
 8005248:	08007e50 	.word	0x08007e50
 800524c:	08007e50 	.word	0x08007e50
 8005250:	08007e50 	.word	0x08007e50
 8005254:	08007e54 	.word	0x08007e54

08005258 <memcpy>:
 8005258:	b510      	push	{r4, lr}
 800525a:	1e43      	subs	r3, r0, #1
 800525c:	440a      	add	r2, r1
 800525e:	4291      	cmp	r1, r2
 8005260:	d100      	bne.n	8005264 <memcpy+0xc>
 8005262:	bd10      	pop	{r4, pc}
 8005264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800526c:	e7f7      	b.n	800525e <memcpy+0x6>

0800526e <memset>:
 800526e:	4402      	add	r2, r0
 8005270:	4603      	mov	r3, r0
 8005272:	4293      	cmp	r3, r2
 8005274:	d100      	bne.n	8005278 <memset+0xa>
 8005276:	4770      	bx	lr
 8005278:	f803 1b01 	strb.w	r1, [r3], #1
 800527c:	e7f9      	b.n	8005272 <memset+0x4>
	...

08005280 <siprintf>:
 8005280:	b40e      	push	{r1, r2, r3}
 8005282:	b500      	push	{lr}
 8005284:	b09c      	sub	sp, #112	; 0x70
 8005286:	ab1d      	add	r3, sp, #116	; 0x74
 8005288:	9002      	str	r0, [sp, #8]
 800528a:	9006      	str	r0, [sp, #24]
 800528c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005290:	4809      	ldr	r0, [pc, #36]	; (80052b8 <siprintf+0x38>)
 8005292:	9107      	str	r1, [sp, #28]
 8005294:	9104      	str	r1, [sp, #16]
 8005296:	4909      	ldr	r1, [pc, #36]	; (80052bc <siprintf+0x3c>)
 8005298:	f853 2b04 	ldr.w	r2, [r3], #4
 800529c:	9105      	str	r1, [sp, #20]
 800529e:	6800      	ldr	r0, [r0, #0]
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	a902      	add	r1, sp, #8
 80052a4:	f000 f866 	bl	8005374 <_svfiprintf_r>
 80052a8:	9b02      	ldr	r3, [sp, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	b01c      	add	sp, #112	; 0x70
 80052b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052b4:	b003      	add	sp, #12
 80052b6:	4770      	bx	lr
 80052b8:	20000014 	.word	0x20000014
 80052bc:	ffff0208 	.word	0xffff0208

080052c0 <__ssputs_r>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	688e      	ldr	r6, [r1, #8]
 80052c6:	429e      	cmp	r6, r3
 80052c8:	4682      	mov	sl, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	4690      	mov	r8, r2
 80052ce:	4699      	mov	r9, r3
 80052d0:	d837      	bhi.n	8005342 <__ssputs_r+0x82>
 80052d2:	898a      	ldrh	r2, [r1, #12]
 80052d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052d8:	d031      	beq.n	800533e <__ssputs_r+0x7e>
 80052da:	6825      	ldr	r5, [r4, #0]
 80052dc:	6909      	ldr	r1, [r1, #16]
 80052de:	1a6f      	subs	r7, r5, r1
 80052e0:	6965      	ldr	r5, [r4, #20]
 80052e2:	2302      	movs	r3, #2
 80052e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80052ec:	f109 0301 	add.w	r3, r9, #1
 80052f0:	443b      	add	r3, r7
 80052f2:	429d      	cmp	r5, r3
 80052f4:	bf38      	it	cc
 80052f6:	461d      	movcc	r5, r3
 80052f8:	0553      	lsls	r3, r2, #21
 80052fa:	d530      	bpl.n	800535e <__ssputs_r+0x9e>
 80052fc:	4629      	mov	r1, r5
 80052fe:	f000 fb21 	bl	8005944 <_malloc_r>
 8005302:	4606      	mov	r6, r0
 8005304:	b950      	cbnz	r0, 800531c <__ssputs_r+0x5c>
 8005306:	230c      	movs	r3, #12
 8005308:	f8ca 3000 	str.w	r3, [sl]
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531c:	463a      	mov	r2, r7
 800531e:	6921      	ldr	r1, [r4, #16]
 8005320:	f7ff ff9a 	bl	8005258 <memcpy>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	6126      	str	r6, [r4, #16]
 8005332:	6165      	str	r5, [r4, #20]
 8005334:	443e      	add	r6, r7
 8005336:	1bed      	subs	r5, r5, r7
 8005338:	6026      	str	r6, [r4, #0]
 800533a:	60a5      	str	r5, [r4, #8]
 800533c:	464e      	mov	r6, r9
 800533e:	454e      	cmp	r6, r9
 8005340:	d900      	bls.n	8005344 <__ssputs_r+0x84>
 8005342:	464e      	mov	r6, r9
 8005344:	4632      	mov	r2, r6
 8005346:	4641      	mov	r1, r8
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	f000 fa93 	bl	8005874 <memmove>
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	1b9b      	subs	r3, r3, r6
 8005352:	60a3      	str	r3, [r4, #8]
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	441e      	add	r6, r3
 8005358:	6026      	str	r6, [r4, #0]
 800535a:	2000      	movs	r0, #0
 800535c:	e7dc      	b.n	8005318 <__ssputs_r+0x58>
 800535e:	462a      	mov	r2, r5
 8005360:	f000 fb4a 	bl	80059f8 <_realloc_r>
 8005364:	4606      	mov	r6, r0
 8005366:	2800      	cmp	r0, #0
 8005368:	d1e2      	bne.n	8005330 <__ssputs_r+0x70>
 800536a:	6921      	ldr	r1, [r4, #16]
 800536c:	4650      	mov	r0, sl
 800536e:	f000 fa9b 	bl	80058a8 <_free_r>
 8005372:	e7c8      	b.n	8005306 <__ssputs_r+0x46>

08005374 <_svfiprintf_r>:
 8005374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	461d      	mov	r5, r3
 800537a:	898b      	ldrh	r3, [r1, #12]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	b09d      	sub	sp, #116	; 0x74
 8005380:	4680      	mov	r8, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4616      	mov	r6, r2
 8005386:	d50f      	bpl.n	80053a8 <_svfiprintf_r+0x34>
 8005388:	690b      	ldr	r3, [r1, #16]
 800538a:	b96b      	cbnz	r3, 80053a8 <_svfiprintf_r+0x34>
 800538c:	2140      	movs	r1, #64	; 0x40
 800538e:	f000 fad9 	bl	8005944 <_malloc_r>
 8005392:	6020      	str	r0, [r4, #0]
 8005394:	6120      	str	r0, [r4, #16]
 8005396:	b928      	cbnz	r0, 80053a4 <_svfiprintf_r+0x30>
 8005398:	230c      	movs	r3, #12
 800539a:	f8c8 3000 	str.w	r3, [r8]
 800539e:	f04f 30ff 	mov.w	r0, #4294967295
 80053a2:	e0c8      	b.n	8005536 <_svfiprintf_r+0x1c2>
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	6163      	str	r3, [r4, #20]
 80053a8:	2300      	movs	r3, #0
 80053aa:	9309      	str	r3, [sp, #36]	; 0x24
 80053ac:	2320      	movs	r3, #32
 80053ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053b2:	2330      	movs	r3, #48	; 0x30
 80053b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053b8:	9503      	str	r5, [sp, #12]
 80053ba:	f04f 0b01 	mov.w	fp, #1
 80053be:	4637      	mov	r7, r6
 80053c0:	463d      	mov	r5, r7
 80053c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053c6:	b10b      	cbz	r3, 80053cc <_svfiprintf_r+0x58>
 80053c8:	2b25      	cmp	r3, #37	; 0x25
 80053ca:	d13e      	bne.n	800544a <_svfiprintf_r+0xd6>
 80053cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80053d0:	d00b      	beq.n	80053ea <_svfiprintf_r+0x76>
 80053d2:	4653      	mov	r3, sl
 80053d4:	4632      	mov	r2, r6
 80053d6:	4621      	mov	r1, r4
 80053d8:	4640      	mov	r0, r8
 80053da:	f7ff ff71 	bl	80052c0 <__ssputs_r>
 80053de:	3001      	adds	r0, #1
 80053e0:	f000 80a4 	beq.w	800552c <_svfiprintf_r+0x1b8>
 80053e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e6:	4453      	add	r3, sl
 80053e8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ea:	783b      	ldrb	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 809d 	beq.w	800552c <_svfiprintf_r+0x1b8>
 80053f2:	2300      	movs	r3, #0
 80053f4:	f04f 32ff 	mov.w	r2, #4294967295
 80053f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053fc:	9304      	str	r3, [sp, #16]
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005404:	931a      	str	r3, [sp, #104]	; 0x68
 8005406:	462f      	mov	r7, r5
 8005408:	2205      	movs	r2, #5
 800540a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800540e:	4850      	ldr	r0, [pc, #320]	; (8005550 <_svfiprintf_r+0x1dc>)
 8005410:	f7fa ff06 	bl	8000220 <memchr>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	b9d0      	cbnz	r0, 800544e <_svfiprintf_r+0xda>
 8005418:	06d9      	lsls	r1, r3, #27
 800541a:	bf44      	itt	mi
 800541c:	2220      	movmi	r2, #32
 800541e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005422:	071a      	lsls	r2, r3, #28
 8005424:	bf44      	itt	mi
 8005426:	222b      	movmi	r2, #43	; 0x2b
 8005428:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800542c:	782a      	ldrb	r2, [r5, #0]
 800542e:	2a2a      	cmp	r2, #42	; 0x2a
 8005430:	d015      	beq.n	800545e <_svfiprintf_r+0xea>
 8005432:	9a07      	ldr	r2, [sp, #28]
 8005434:	462f      	mov	r7, r5
 8005436:	2000      	movs	r0, #0
 8005438:	250a      	movs	r5, #10
 800543a:	4639      	mov	r1, r7
 800543c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005440:	3b30      	subs	r3, #48	; 0x30
 8005442:	2b09      	cmp	r3, #9
 8005444:	d94d      	bls.n	80054e2 <_svfiprintf_r+0x16e>
 8005446:	b1b8      	cbz	r0, 8005478 <_svfiprintf_r+0x104>
 8005448:	e00f      	b.n	800546a <_svfiprintf_r+0xf6>
 800544a:	462f      	mov	r7, r5
 800544c:	e7b8      	b.n	80053c0 <_svfiprintf_r+0x4c>
 800544e:	4a40      	ldr	r2, [pc, #256]	; (8005550 <_svfiprintf_r+0x1dc>)
 8005450:	1a80      	subs	r0, r0, r2
 8005452:	fa0b f000 	lsl.w	r0, fp, r0
 8005456:	4318      	orrs	r0, r3
 8005458:	9004      	str	r0, [sp, #16]
 800545a:	463d      	mov	r5, r7
 800545c:	e7d3      	b.n	8005406 <_svfiprintf_r+0x92>
 800545e:	9a03      	ldr	r2, [sp, #12]
 8005460:	1d11      	adds	r1, r2, #4
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	9103      	str	r1, [sp, #12]
 8005466:	2a00      	cmp	r2, #0
 8005468:	db01      	blt.n	800546e <_svfiprintf_r+0xfa>
 800546a:	9207      	str	r2, [sp, #28]
 800546c:	e004      	b.n	8005478 <_svfiprintf_r+0x104>
 800546e:	4252      	negs	r2, r2
 8005470:	f043 0302 	orr.w	r3, r3, #2
 8005474:	9207      	str	r2, [sp, #28]
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	783b      	ldrb	r3, [r7, #0]
 800547a:	2b2e      	cmp	r3, #46	; 0x2e
 800547c:	d10c      	bne.n	8005498 <_svfiprintf_r+0x124>
 800547e:	787b      	ldrb	r3, [r7, #1]
 8005480:	2b2a      	cmp	r3, #42	; 0x2a
 8005482:	d133      	bne.n	80054ec <_svfiprintf_r+0x178>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9203      	str	r2, [sp, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	bfb8      	it	lt
 8005490:	f04f 33ff 	movlt.w	r3, #4294967295
 8005494:	3702      	adds	r7, #2
 8005496:	9305      	str	r3, [sp, #20]
 8005498:	4d2e      	ldr	r5, [pc, #184]	; (8005554 <_svfiprintf_r+0x1e0>)
 800549a:	7839      	ldrb	r1, [r7, #0]
 800549c:	2203      	movs	r2, #3
 800549e:	4628      	mov	r0, r5
 80054a0:	f7fa febe 	bl	8000220 <memchr>
 80054a4:	b138      	cbz	r0, 80054b6 <_svfiprintf_r+0x142>
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	1b40      	subs	r0, r0, r5
 80054aa:	fa03 f000 	lsl.w	r0, r3, r0
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	4303      	orrs	r3, r0
 80054b2:	3701      	adds	r7, #1
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	7839      	ldrb	r1, [r7, #0]
 80054b8:	4827      	ldr	r0, [pc, #156]	; (8005558 <_svfiprintf_r+0x1e4>)
 80054ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054be:	2206      	movs	r2, #6
 80054c0:	1c7e      	adds	r6, r7, #1
 80054c2:	f7fa fead 	bl	8000220 <memchr>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d038      	beq.n	800553c <_svfiprintf_r+0x1c8>
 80054ca:	4b24      	ldr	r3, [pc, #144]	; (800555c <_svfiprintf_r+0x1e8>)
 80054cc:	bb13      	cbnz	r3, 8005514 <_svfiprintf_r+0x1a0>
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	3307      	adds	r3, #7
 80054d2:	f023 0307 	bic.w	r3, r3, #7
 80054d6:	3308      	adds	r3, #8
 80054d8:	9303      	str	r3, [sp, #12]
 80054da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054dc:	444b      	add	r3, r9
 80054de:	9309      	str	r3, [sp, #36]	; 0x24
 80054e0:	e76d      	b.n	80053be <_svfiprintf_r+0x4a>
 80054e2:	fb05 3202 	mla	r2, r5, r2, r3
 80054e6:	2001      	movs	r0, #1
 80054e8:	460f      	mov	r7, r1
 80054ea:	e7a6      	b.n	800543a <_svfiprintf_r+0xc6>
 80054ec:	2300      	movs	r3, #0
 80054ee:	3701      	adds	r7, #1
 80054f0:	9305      	str	r3, [sp, #20]
 80054f2:	4619      	mov	r1, r3
 80054f4:	250a      	movs	r5, #10
 80054f6:	4638      	mov	r0, r7
 80054f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054fc:	3a30      	subs	r2, #48	; 0x30
 80054fe:	2a09      	cmp	r2, #9
 8005500:	d903      	bls.n	800550a <_svfiprintf_r+0x196>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0c8      	beq.n	8005498 <_svfiprintf_r+0x124>
 8005506:	9105      	str	r1, [sp, #20]
 8005508:	e7c6      	b.n	8005498 <_svfiprintf_r+0x124>
 800550a:	fb05 2101 	mla	r1, r5, r1, r2
 800550e:	2301      	movs	r3, #1
 8005510:	4607      	mov	r7, r0
 8005512:	e7f0      	b.n	80054f6 <_svfiprintf_r+0x182>
 8005514:	ab03      	add	r3, sp, #12
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	4622      	mov	r2, r4
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <_svfiprintf_r+0x1ec>)
 800551c:	a904      	add	r1, sp, #16
 800551e:	4640      	mov	r0, r8
 8005520:	f3af 8000 	nop.w
 8005524:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005528:	4681      	mov	r9, r0
 800552a:	d1d6      	bne.n	80054da <_svfiprintf_r+0x166>
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	065b      	lsls	r3, r3, #25
 8005530:	f53f af35 	bmi.w	800539e <_svfiprintf_r+0x2a>
 8005534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005536:	b01d      	add	sp, #116	; 0x74
 8005538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553c:	ab03      	add	r3, sp, #12
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	4622      	mov	r2, r4
 8005542:	4b07      	ldr	r3, [pc, #28]	; (8005560 <_svfiprintf_r+0x1ec>)
 8005544:	a904      	add	r1, sp, #16
 8005546:	4640      	mov	r0, r8
 8005548:	f000 f882 	bl	8005650 <_printf_i>
 800554c:	e7ea      	b.n	8005524 <_svfiprintf_r+0x1b0>
 800554e:	bf00      	nop
 8005550:	08007bf8 	.word	0x08007bf8
 8005554:	08007bfe 	.word	0x08007bfe
 8005558:	08007c02 	.word	0x08007c02
 800555c:	00000000 	.word	0x00000000
 8005560:	080052c1 	.word	0x080052c1

08005564 <_printf_common>:
 8005564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005568:	4691      	mov	r9, r2
 800556a:	461f      	mov	r7, r3
 800556c:	688a      	ldr	r2, [r1, #8]
 800556e:	690b      	ldr	r3, [r1, #16]
 8005570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005574:	4293      	cmp	r3, r2
 8005576:	bfb8      	it	lt
 8005578:	4613      	movlt	r3, r2
 800557a:	f8c9 3000 	str.w	r3, [r9]
 800557e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005582:	4606      	mov	r6, r0
 8005584:	460c      	mov	r4, r1
 8005586:	b112      	cbz	r2, 800558e <_printf_common+0x2a>
 8005588:	3301      	adds	r3, #1
 800558a:	f8c9 3000 	str.w	r3, [r9]
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	0699      	lsls	r1, r3, #26
 8005592:	bf42      	ittt	mi
 8005594:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005598:	3302      	addmi	r3, #2
 800559a:	f8c9 3000 	strmi.w	r3, [r9]
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	f015 0506 	ands.w	r5, r5, #6
 80055a4:	d107      	bne.n	80055b6 <_printf_common+0x52>
 80055a6:	f104 0a19 	add.w	sl, r4, #25
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	f8d9 2000 	ldr.w	r2, [r9]
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	42ab      	cmp	r3, r5
 80055b4:	dc28      	bgt.n	8005608 <_printf_common+0xa4>
 80055b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	3300      	adds	r3, #0
 80055be:	bf18      	it	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	0692      	lsls	r2, r2, #26
 80055c4:	d42d      	bmi.n	8005622 <_printf_common+0xbe>
 80055c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ca:	4639      	mov	r1, r7
 80055cc:	4630      	mov	r0, r6
 80055ce:	47c0      	blx	r8
 80055d0:	3001      	adds	r0, #1
 80055d2:	d020      	beq.n	8005616 <_printf_common+0xb2>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	68e5      	ldr	r5, [r4, #12]
 80055d8:	f8d9 2000 	ldr.w	r2, [r9]
 80055dc:	f003 0306 	and.w	r3, r3, #6
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	bf08      	it	eq
 80055e4:	1aad      	subeq	r5, r5, r2
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	6922      	ldr	r2, [r4, #16]
 80055ea:	bf0c      	ite	eq
 80055ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f0:	2500      	movne	r5, #0
 80055f2:	4293      	cmp	r3, r2
 80055f4:	bfc4      	itt	gt
 80055f6:	1a9b      	subgt	r3, r3, r2
 80055f8:	18ed      	addgt	r5, r5, r3
 80055fa:	f04f 0900 	mov.w	r9, #0
 80055fe:	341a      	adds	r4, #26
 8005600:	454d      	cmp	r5, r9
 8005602:	d11a      	bne.n	800563a <_printf_common+0xd6>
 8005604:	2000      	movs	r0, #0
 8005606:	e008      	b.n	800561a <_printf_common+0xb6>
 8005608:	2301      	movs	r3, #1
 800560a:	4652      	mov	r2, sl
 800560c:	4639      	mov	r1, r7
 800560e:	4630      	mov	r0, r6
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d103      	bne.n	800561e <_printf_common+0xba>
 8005616:	f04f 30ff 	mov.w	r0, #4294967295
 800561a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561e:	3501      	adds	r5, #1
 8005620:	e7c3      	b.n	80055aa <_printf_common+0x46>
 8005622:	18e1      	adds	r1, r4, r3
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	2030      	movs	r0, #48	; 0x30
 8005628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800562c:	4422      	add	r2, r4
 800562e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005636:	3302      	adds	r3, #2
 8005638:	e7c5      	b.n	80055c6 <_printf_common+0x62>
 800563a:	2301      	movs	r3, #1
 800563c:	4622      	mov	r2, r4
 800563e:	4639      	mov	r1, r7
 8005640:	4630      	mov	r0, r6
 8005642:	47c0      	blx	r8
 8005644:	3001      	adds	r0, #1
 8005646:	d0e6      	beq.n	8005616 <_printf_common+0xb2>
 8005648:	f109 0901 	add.w	r9, r9, #1
 800564c:	e7d8      	b.n	8005600 <_printf_common+0x9c>
	...

08005650 <_printf_i>:
 8005650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005654:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005658:	460c      	mov	r4, r1
 800565a:	7e09      	ldrb	r1, [r1, #24]
 800565c:	b085      	sub	sp, #20
 800565e:	296e      	cmp	r1, #110	; 0x6e
 8005660:	4617      	mov	r7, r2
 8005662:	4606      	mov	r6, r0
 8005664:	4698      	mov	r8, r3
 8005666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005668:	f000 80b3 	beq.w	80057d2 <_printf_i+0x182>
 800566c:	d822      	bhi.n	80056b4 <_printf_i+0x64>
 800566e:	2963      	cmp	r1, #99	; 0x63
 8005670:	d036      	beq.n	80056e0 <_printf_i+0x90>
 8005672:	d80a      	bhi.n	800568a <_printf_i+0x3a>
 8005674:	2900      	cmp	r1, #0
 8005676:	f000 80b9 	beq.w	80057ec <_printf_i+0x19c>
 800567a:	2958      	cmp	r1, #88	; 0x58
 800567c:	f000 8083 	beq.w	8005786 <_printf_i+0x136>
 8005680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005684:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005688:	e032      	b.n	80056f0 <_printf_i+0xa0>
 800568a:	2964      	cmp	r1, #100	; 0x64
 800568c:	d001      	beq.n	8005692 <_printf_i+0x42>
 800568e:	2969      	cmp	r1, #105	; 0x69
 8005690:	d1f6      	bne.n	8005680 <_printf_i+0x30>
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	6813      	ldr	r3, [r2, #0]
 8005696:	0605      	lsls	r5, r0, #24
 8005698:	f103 0104 	add.w	r1, r3, #4
 800569c:	d52a      	bpl.n	80056f4 <_printf_i+0xa4>
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da03      	bge.n	80056ae <_printf_i+0x5e>
 80056a6:	222d      	movs	r2, #45	; 0x2d
 80056a8:	425b      	negs	r3, r3
 80056aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056ae:	486f      	ldr	r0, [pc, #444]	; (800586c <_printf_i+0x21c>)
 80056b0:	220a      	movs	r2, #10
 80056b2:	e039      	b.n	8005728 <_printf_i+0xd8>
 80056b4:	2973      	cmp	r1, #115	; 0x73
 80056b6:	f000 809d 	beq.w	80057f4 <_printf_i+0x1a4>
 80056ba:	d808      	bhi.n	80056ce <_printf_i+0x7e>
 80056bc:	296f      	cmp	r1, #111	; 0x6f
 80056be:	d020      	beq.n	8005702 <_printf_i+0xb2>
 80056c0:	2970      	cmp	r1, #112	; 0x70
 80056c2:	d1dd      	bne.n	8005680 <_printf_i+0x30>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	f043 0320 	orr.w	r3, r3, #32
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	e003      	b.n	80056d6 <_printf_i+0x86>
 80056ce:	2975      	cmp	r1, #117	; 0x75
 80056d0:	d017      	beq.n	8005702 <_printf_i+0xb2>
 80056d2:	2978      	cmp	r1, #120	; 0x78
 80056d4:	d1d4      	bne.n	8005680 <_printf_i+0x30>
 80056d6:	2378      	movs	r3, #120	; 0x78
 80056d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056dc:	4864      	ldr	r0, [pc, #400]	; (8005870 <_printf_i+0x220>)
 80056de:	e055      	b.n	800578c <_printf_i+0x13c>
 80056e0:	6813      	ldr	r3, [r2, #0]
 80056e2:	1d19      	adds	r1, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6011      	str	r1, [r2, #0]
 80056e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056f0:	2301      	movs	r3, #1
 80056f2:	e08c      	b.n	800580e <_printf_i+0x1be>
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6011      	str	r1, [r2, #0]
 80056f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056fc:	bf18      	it	ne
 80056fe:	b21b      	sxthne	r3, r3
 8005700:	e7cf      	b.n	80056a2 <_printf_i+0x52>
 8005702:	6813      	ldr	r3, [r2, #0]
 8005704:	6825      	ldr	r5, [r4, #0]
 8005706:	1d18      	adds	r0, r3, #4
 8005708:	6010      	str	r0, [r2, #0]
 800570a:	0628      	lsls	r0, r5, #24
 800570c:	d501      	bpl.n	8005712 <_printf_i+0xc2>
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	e002      	b.n	8005718 <_printf_i+0xc8>
 8005712:	0668      	lsls	r0, r5, #25
 8005714:	d5fb      	bpl.n	800570e <_printf_i+0xbe>
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	4854      	ldr	r0, [pc, #336]	; (800586c <_printf_i+0x21c>)
 800571a:	296f      	cmp	r1, #111	; 0x6f
 800571c:	bf14      	ite	ne
 800571e:	220a      	movne	r2, #10
 8005720:	2208      	moveq	r2, #8
 8005722:	2100      	movs	r1, #0
 8005724:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005728:	6865      	ldr	r5, [r4, #4]
 800572a:	60a5      	str	r5, [r4, #8]
 800572c:	2d00      	cmp	r5, #0
 800572e:	f2c0 8095 	blt.w	800585c <_printf_i+0x20c>
 8005732:	6821      	ldr	r1, [r4, #0]
 8005734:	f021 0104 	bic.w	r1, r1, #4
 8005738:	6021      	str	r1, [r4, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d13d      	bne.n	80057ba <_printf_i+0x16a>
 800573e:	2d00      	cmp	r5, #0
 8005740:	f040 808e 	bne.w	8005860 <_printf_i+0x210>
 8005744:	4665      	mov	r5, ip
 8005746:	2a08      	cmp	r2, #8
 8005748:	d10b      	bne.n	8005762 <_printf_i+0x112>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	07db      	lsls	r3, r3, #31
 800574e:	d508      	bpl.n	8005762 <_printf_i+0x112>
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	6862      	ldr	r2, [r4, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	bfde      	ittt	le
 8005758:	2330      	movle	r3, #48	; 0x30
 800575a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800575e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005762:	ebac 0305 	sub.w	r3, ip, r5
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	f8cd 8000 	str.w	r8, [sp]
 800576c:	463b      	mov	r3, r7
 800576e:	aa03      	add	r2, sp, #12
 8005770:	4621      	mov	r1, r4
 8005772:	4630      	mov	r0, r6
 8005774:	f7ff fef6 	bl	8005564 <_printf_common>
 8005778:	3001      	adds	r0, #1
 800577a:	d14d      	bne.n	8005818 <_printf_i+0x1c8>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	b005      	add	sp, #20
 8005782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005786:	4839      	ldr	r0, [pc, #228]	; (800586c <_printf_i+0x21c>)
 8005788:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800578c:	6813      	ldr	r3, [r2, #0]
 800578e:	6821      	ldr	r1, [r4, #0]
 8005790:	1d1d      	adds	r5, r3, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6015      	str	r5, [r2, #0]
 8005796:	060a      	lsls	r2, r1, #24
 8005798:	d50b      	bpl.n	80057b2 <_printf_i+0x162>
 800579a:	07ca      	lsls	r2, r1, #31
 800579c:	bf44      	itt	mi
 800579e:	f041 0120 	orrmi.w	r1, r1, #32
 80057a2:	6021      	strmi	r1, [r4, #0]
 80057a4:	b91b      	cbnz	r3, 80057ae <_printf_i+0x15e>
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	f022 0220 	bic.w	r2, r2, #32
 80057ac:	6022      	str	r2, [r4, #0]
 80057ae:	2210      	movs	r2, #16
 80057b0:	e7b7      	b.n	8005722 <_printf_i+0xd2>
 80057b2:	064d      	lsls	r5, r1, #25
 80057b4:	bf48      	it	mi
 80057b6:	b29b      	uxthmi	r3, r3
 80057b8:	e7ef      	b.n	800579a <_printf_i+0x14a>
 80057ba:	4665      	mov	r5, ip
 80057bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80057c0:	fb02 3311 	mls	r3, r2, r1, r3
 80057c4:	5cc3      	ldrb	r3, [r0, r3]
 80057c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80057ca:	460b      	mov	r3, r1
 80057cc:	2900      	cmp	r1, #0
 80057ce:	d1f5      	bne.n	80057bc <_printf_i+0x16c>
 80057d0:	e7b9      	b.n	8005746 <_printf_i+0xf6>
 80057d2:	6813      	ldr	r3, [r2, #0]
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	6961      	ldr	r1, [r4, #20]
 80057d8:	1d18      	adds	r0, r3, #4
 80057da:	6010      	str	r0, [r2, #0]
 80057dc:	0628      	lsls	r0, r5, #24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	d501      	bpl.n	80057e6 <_printf_i+0x196>
 80057e2:	6019      	str	r1, [r3, #0]
 80057e4:	e002      	b.n	80057ec <_printf_i+0x19c>
 80057e6:	066a      	lsls	r2, r5, #25
 80057e8:	d5fb      	bpl.n	80057e2 <_printf_i+0x192>
 80057ea:	8019      	strh	r1, [r3, #0]
 80057ec:	2300      	movs	r3, #0
 80057ee:	6123      	str	r3, [r4, #16]
 80057f0:	4665      	mov	r5, ip
 80057f2:	e7b9      	b.n	8005768 <_printf_i+0x118>
 80057f4:	6813      	ldr	r3, [r2, #0]
 80057f6:	1d19      	adds	r1, r3, #4
 80057f8:	6011      	str	r1, [r2, #0]
 80057fa:	681d      	ldr	r5, [r3, #0]
 80057fc:	6862      	ldr	r2, [r4, #4]
 80057fe:	2100      	movs	r1, #0
 8005800:	4628      	mov	r0, r5
 8005802:	f7fa fd0d 	bl	8000220 <memchr>
 8005806:	b108      	cbz	r0, 800580c <_printf_i+0x1bc>
 8005808:	1b40      	subs	r0, r0, r5
 800580a:	6060      	str	r0, [r4, #4]
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	2300      	movs	r3, #0
 8005812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005816:	e7a7      	b.n	8005768 <_printf_i+0x118>
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	462a      	mov	r2, r5
 800581c:	4639      	mov	r1, r7
 800581e:	4630      	mov	r0, r6
 8005820:	47c0      	blx	r8
 8005822:	3001      	adds	r0, #1
 8005824:	d0aa      	beq.n	800577c <_printf_i+0x12c>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	079b      	lsls	r3, r3, #30
 800582a:	d413      	bmi.n	8005854 <_printf_i+0x204>
 800582c:	68e0      	ldr	r0, [r4, #12]
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	4298      	cmp	r0, r3
 8005832:	bfb8      	it	lt
 8005834:	4618      	movlt	r0, r3
 8005836:	e7a3      	b.n	8005780 <_printf_i+0x130>
 8005838:	2301      	movs	r3, #1
 800583a:	464a      	mov	r2, r9
 800583c:	4639      	mov	r1, r7
 800583e:	4630      	mov	r0, r6
 8005840:	47c0      	blx	r8
 8005842:	3001      	adds	r0, #1
 8005844:	d09a      	beq.n	800577c <_printf_i+0x12c>
 8005846:	3501      	adds	r5, #1
 8005848:	68e3      	ldr	r3, [r4, #12]
 800584a:	9a03      	ldr	r2, [sp, #12]
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	42ab      	cmp	r3, r5
 8005850:	dcf2      	bgt.n	8005838 <_printf_i+0x1e8>
 8005852:	e7eb      	b.n	800582c <_printf_i+0x1dc>
 8005854:	2500      	movs	r5, #0
 8005856:	f104 0919 	add.w	r9, r4, #25
 800585a:	e7f5      	b.n	8005848 <_printf_i+0x1f8>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ac      	bne.n	80057ba <_printf_i+0x16a>
 8005860:	7803      	ldrb	r3, [r0, #0]
 8005862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005866:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800586a:	e76c      	b.n	8005746 <_printf_i+0xf6>
 800586c:	08007c09 	.word	0x08007c09
 8005870:	08007c1a 	.word	0x08007c1a

08005874 <memmove>:
 8005874:	4288      	cmp	r0, r1
 8005876:	b510      	push	{r4, lr}
 8005878:	eb01 0302 	add.w	r3, r1, r2
 800587c:	d807      	bhi.n	800588e <memmove+0x1a>
 800587e:	1e42      	subs	r2, r0, #1
 8005880:	4299      	cmp	r1, r3
 8005882:	d00a      	beq.n	800589a <memmove+0x26>
 8005884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005888:	f802 4f01 	strb.w	r4, [r2, #1]!
 800588c:	e7f8      	b.n	8005880 <memmove+0xc>
 800588e:	4283      	cmp	r3, r0
 8005890:	d9f5      	bls.n	800587e <memmove+0xa>
 8005892:	1881      	adds	r1, r0, r2
 8005894:	1ad2      	subs	r2, r2, r3
 8005896:	42d3      	cmn	r3, r2
 8005898:	d100      	bne.n	800589c <memmove+0x28>
 800589a:	bd10      	pop	{r4, pc}
 800589c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80058a4:	e7f7      	b.n	8005896 <memmove+0x22>
	...

080058a8 <_free_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4605      	mov	r5, r0
 80058ac:	2900      	cmp	r1, #0
 80058ae:	d045      	beq.n	800593c <_free_r+0x94>
 80058b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b4:	1f0c      	subs	r4, r1, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bfb8      	it	lt
 80058ba:	18e4      	addlt	r4, r4, r3
 80058bc:	f000 f8d2 	bl	8005a64 <__malloc_lock>
 80058c0:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <_free_r+0x98>)
 80058c2:	6813      	ldr	r3, [r2, #0]
 80058c4:	4610      	mov	r0, r2
 80058c6:	b933      	cbnz	r3, 80058d6 <_free_r+0x2e>
 80058c8:	6063      	str	r3, [r4, #4]
 80058ca:	6014      	str	r4, [r2, #0]
 80058cc:	4628      	mov	r0, r5
 80058ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058d2:	f000 b8c8 	b.w	8005a66 <__malloc_unlock>
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	d90c      	bls.n	80058f4 <_free_r+0x4c>
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	1862      	adds	r2, r4, r1
 80058de:	4293      	cmp	r3, r2
 80058e0:	bf04      	itt	eq
 80058e2:	681a      	ldreq	r2, [r3, #0]
 80058e4:	685b      	ldreq	r3, [r3, #4]
 80058e6:	6063      	str	r3, [r4, #4]
 80058e8:	bf04      	itt	eq
 80058ea:	1852      	addeq	r2, r2, r1
 80058ec:	6022      	streq	r2, [r4, #0]
 80058ee:	6004      	str	r4, [r0, #0]
 80058f0:	e7ec      	b.n	80058cc <_free_r+0x24>
 80058f2:	4613      	mov	r3, r2
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	b10a      	cbz	r2, 80058fc <_free_r+0x54>
 80058f8:	42a2      	cmp	r2, r4
 80058fa:	d9fa      	bls.n	80058f2 <_free_r+0x4a>
 80058fc:	6819      	ldr	r1, [r3, #0]
 80058fe:	1858      	adds	r0, r3, r1
 8005900:	42a0      	cmp	r0, r4
 8005902:	d10b      	bne.n	800591c <_free_r+0x74>
 8005904:	6820      	ldr	r0, [r4, #0]
 8005906:	4401      	add	r1, r0
 8005908:	1858      	adds	r0, r3, r1
 800590a:	4282      	cmp	r2, r0
 800590c:	6019      	str	r1, [r3, #0]
 800590e:	d1dd      	bne.n	80058cc <_free_r+0x24>
 8005910:	6810      	ldr	r0, [r2, #0]
 8005912:	6852      	ldr	r2, [r2, #4]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	4401      	add	r1, r0
 8005918:	6019      	str	r1, [r3, #0]
 800591a:	e7d7      	b.n	80058cc <_free_r+0x24>
 800591c:	d902      	bls.n	8005924 <_free_r+0x7c>
 800591e:	230c      	movs	r3, #12
 8005920:	602b      	str	r3, [r5, #0]
 8005922:	e7d3      	b.n	80058cc <_free_r+0x24>
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	1821      	adds	r1, r4, r0
 8005928:	428a      	cmp	r2, r1
 800592a:	bf04      	itt	eq
 800592c:	6811      	ldreq	r1, [r2, #0]
 800592e:	6852      	ldreq	r2, [r2, #4]
 8005930:	6062      	str	r2, [r4, #4]
 8005932:	bf04      	itt	eq
 8005934:	1809      	addeq	r1, r1, r0
 8005936:	6021      	streq	r1, [r4, #0]
 8005938:	605c      	str	r4, [r3, #4]
 800593a:	e7c7      	b.n	80058cc <_free_r+0x24>
 800593c:	bd38      	pop	{r3, r4, r5, pc}
 800593e:	bf00      	nop
 8005940:	200000a8 	.word	0x200000a8

08005944 <_malloc_r>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	1ccd      	adds	r5, r1, #3
 8005948:	f025 0503 	bic.w	r5, r5, #3
 800594c:	3508      	adds	r5, #8
 800594e:	2d0c      	cmp	r5, #12
 8005950:	bf38      	it	cc
 8005952:	250c      	movcc	r5, #12
 8005954:	2d00      	cmp	r5, #0
 8005956:	4606      	mov	r6, r0
 8005958:	db01      	blt.n	800595e <_malloc_r+0x1a>
 800595a:	42a9      	cmp	r1, r5
 800595c:	d903      	bls.n	8005966 <_malloc_r+0x22>
 800595e:	230c      	movs	r3, #12
 8005960:	6033      	str	r3, [r6, #0]
 8005962:	2000      	movs	r0, #0
 8005964:	bd70      	pop	{r4, r5, r6, pc}
 8005966:	f000 f87d 	bl	8005a64 <__malloc_lock>
 800596a:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <_malloc_r+0xac>)
 800596c:	6814      	ldr	r4, [r2, #0]
 800596e:	4621      	mov	r1, r4
 8005970:	b991      	cbnz	r1, 8005998 <_malloc_r+0x54>
 8005972:	4c20      	ldr	r4, [pc, #128]	; (80059f4 <_malloc_r+0xb0>)
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	b91b      	cbnz	r3, 8005980 <_malloc_r+0x3c>
 8005978:	4630      	mov	r0, r6
 800597a:	f000 f863 	bl	8005a44 <_sbrk_r>
 800597e:	6020      	str	r0, [r4, #0]
 8005980:	4629      	mov	r1, r5
 8005982:	4630      	mov	r0, r6
 8005984:	f000 f85e 	bl	8005a44 <_sbrk_r>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d124      	bne.n	80059d6 <_malloc_r+0x92>
 800598c:	230c      	movs	r3, #12
 800598e:	6033      	str	r3, [r6, #0]
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f868 	bl	8005a66 <__malloc_unlock>
 8005996:	e7e4      	b.n	8005962 <_malloc_r+0x1e>
 8005998:	680b      	ldr	r3, [r1, #0]
 800599a:	1b5b      	subs	r3, r3, r5
 800599c:	d418      	bmi.n	80059d0 <_malloc_r+0x8c>
 800599e:	2b0b      	cmp	r3, #11
 80059a0:	d90f      	bls.n	80059c2 <_malloc_r+0x7e>
 80059a2:	600b      	str	r3, [r1, #0]
 80059a4:	50cd      	str	r5, [r1, r3]
 80059a6:	18cc      	adds	r4, r1, r3
 80059a8:	4630      	mov	r0, r6
 80059aa:	f000 f85c 	bl	8005a66 <__malloc_unlock>
 80059ae:	f104 000b 	add.w	r0, r4, #11
 80059b2:	1d23      	adds	r3, r4, #4
 80059b4:	f020 0007 	bic.w	r0, r0, #7
 80059b8:	1ac3      	subs	r3, r0, r3
 80059ba:	d0d3      	beq.n	8005964 <_malloc_r+0x20>
 80059bc:	425a      	negs	r2, r3
 80059be:	50e2      	str	r2, [r4, r3]
 80059c0:	e7d0      	b.n	8005964 <_malloc_r+0x20>
 80059c2:	428c      	cmp	r4, r1
 80059c4:	684b      	ldr	r3, [r1, #4]
 80059c6:	bf16      	itet	ne
 80059c8:	6063      	strne	r3, [r4, #4]
 80059ca:	6013      	streq	r3, [r2, #0]
 80059cc:	460c      	movne	r4, r1
 80059ce:	e7eb      	b.n	80059a8 <_malloc_r+0x64>
 80059d0:	460c      	mov	r4, r1
 80059d2:	6849      	ldr	r1, [r1, #4]
 80059d4:	e7cc      	b.n	8005970 <_malloc_r+0x2c>
 80059d6:	1cc4      	adds	r4, r0, #3
 80059d8:	f024 0403 	bic.w	r4, r4, #3
 80059dc:	42a0      	cmp	r0, r4
 80059de:	d005      	beq.n	80059ec <_malloc_r+0xa8>
 80059e0:	1a21      	subs	r1, r4, r0
 80059e2:	4630      	mov	r0, r6
 80059e4:	f000 f82e 	bl	8005a44 <_sbrk_r>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d0cf      	beq.n	800598c <_malloc_r+0x48>
 80059ec:	6025      	str	r5, [r4, #0]
 80059ee:	e7db      	b.n	80059a8 <_malloc_r+0x64>
 80059f0:	200000a8 	.word	0x200000a8
 80059f4:	200000ac 	.word	0x200000ac

080059f8 <_realloc_r>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	4607      	mov	r7, r0
 80059fc:	4614      	mov	r4, r2
 80059fe:	460e      	mov	r6, r1
 8005a00:	b921      	cbnz	r1, 8005a0c <_realloc_r+0x14>
 8005a02:	4611      	mov	r1, r2
 8005a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a08:	f7ff bf9c 	b.w	8005944 <_malloc_r>
 8005a0c:	b922      	cbnz	r2, 8005a18 <_realloc_r+0x20>
 8005a0e:	f7ff ff4b 	bl	80058a8 <_free_r>
 8005a12:	4625      	mov	r5, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a18:	f000 f826 	bl	8005a68 <_malloc_usable_size_r>
 8005a1c:	42a0      	cmp	r0, r4
 8005a1e:	d20f      	bcs.n	8005a40 <_realloc_r+0x48>
 8005a20:	4621      	mov	r1, r4
 8005a22:	4638      	mov	r0, r7
 8005a24:	f7ff ff8e 	bl	8005944 <_malloc_r>
 8005a28:	4605      	mov	r5, r0
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d0f2      	beq.n	8005a14 <_realloc_r+0x1c>
 8005a2e:	4631      	mov	r1, r6
 8005a30:	4622      	mov	r2, r4
 8005a32:	f7ff fc11 	bl	8005258 <memcpy>
 8005a36:	4631      	mov	r1, r6
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ff35 	bl	80058a8 <_free_r>
 8005a3e:	e7e9      	b.n	8005a14 <_realloc_r+0x1c>
 8005a40:	4635      	mov	r5, r6
 8005a42:	e7e7      	b.n	8005a14 <_realloc_r+0x1c>

08005a44 <_sbrk_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4c06      	ldr	r4, [pc, #24]	; (8005a60 <_sbrk_r+0x1c>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	f7fc fdb0 	bl	80025b4 <_sbrk>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_sbrk_r+0x1a>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_sbrk_r+0x1a>
 8005a5c:	602b      	str	r3, [r5, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20004d90 	.word	0x20004d90

08005a64 <__malloc_lock>:
 8005a64:	4770      	bx	lr

08005a66 <__malloc_unlock>:
 8005a66:	4770      	bx	lr

08005a68 <_malloc_usable_size_r>:
 8005a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a6c:	1f18      	subs	r0, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfbc      	itt	lt
 8005a72:	580b      	ldrlt	r3, [r1, r0]
 8005a74:	18c0      	addlt	r0, r0, r3
 8005a76:	4770      	bx	lr

08005a78 <sin>:
 8005a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a7a:	ec51 0b10 	vmov	r0, r1, d0
 8005a7e:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <sin+0x88>)
 8005a80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a84:	4293      	cmp	r3, r2
 8005a86:	dc07      	bgt.n	8005a98 <sin+0x20>
 8005a88:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005af8 <sin+0x80>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f001 fd67 	bl	8007560 <__kernel_sin>
 8005a92:	ec51 0b10 	vmov	r0, r1, d0
 8005a96:	e007      	b.n	8005aa8 <sin+0x30>
 8005a98:	4a1a      	ldr	r2, [pc, #104]	; (8005b04 <sin+0x8c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	dd09      	ble.n	8005ab2 <sin+0x3a>
 8005a9e:	ee10 2a10 	vmov	r2, s0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	f7fa fc10 	bl	80002c8 <__aeabi_dsub>
 8005aa8:	ec41 0b10 	vmov	d0, r0, r1
 8005aac:	b005      	add	sp, #20
 8005aae:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ab2:	4668      	mov	r0, sp
 8005ab4:	f000 fea8 	bl	8006808 <__ieee754_rem_pio2>
 8005ab8:	f000 0003 	and.w	r0, r0, #3
 8005abc:	2801      	cmp	r0, #1
 8005abe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ac2:	ed9d 0b00 	vldr	d0, [sp]
 8005ac6:	d004      	beq.n	8005ad2 <sin+0x5a>
 8005ac8:	2802      	cmp	r0, #2
 8005aca:	d005      	beq.n	8005ad8 <sin+0x60>
 8005acc:	b970      	cbnz	r0, 8005aec <sin+0x74>
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e7dd      	b.n	8005a8e <sin+0x16>
 8005ad2:	f001 f93d 	bl	8006d50 <__kernel_cos>
 8005ad6:	e7dc      	b.n	8005a92 <sin+0x1a>
 8005ad8:	2001      	movs	r0, #1
 8005ada:	f001 fd41 	bl	8007560 <__kernel_sin>
 8005ade:	ec53 2b10 	vmov	r2, r3, d0
 8005ae2:	ee10 0a10 	vmov	r0, s0
 8005ae6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005aea:	e7dd      	b.n	8005aa8 <sin+0x30>
 8005aec:	f001 f930 	bl	8006d50 <__kernel_cos>
 8005af0:	e7f5      	b.n	8005ade <sin+0x66>
 8005af2:	bf00      	nop
 8005af4:	f3af 8000 	nop.w
	...
 8005b00:	3fe921fb 	.word	0x3fe921fb
 8005b04:	7fefffff 	.word	0x7fefffff

08005b08 <pow>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	ed2d 8b04 	vpush	{d8-d9}
 8005b10:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8005de4 <pow+0x2dc>
 8005b14:	b08d      	sub	sp, #52	; 0x34
 8005b16:	ec57 6b10 	vmov	r6, r7, d0
 8005b1a:	ec55 4b11 	vmov	r4, r5, d1
 8005b1e:	f000 f963 	bl	8005de8 <__ieee754_pow>
 8005b22:	f999 3000 	ldrsb.w	r3, [r9]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	eeb0 8a40 	vmov.f32	s16, s0
 8005b2e:	eef0 8a60 	vmov.f32	s17, s1
 8005b32:	46c8      	mov	r8, r9
 8005b34:	d05f      	beq.n	8005bf6 <pow+0xee>
 8005b36:	4622      	mov	r2, r4
 8005b38:	462b      	mov	r3, r5
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f7fb f815 	bl	8000b6c <__aeabi_dcmpun>
 8005b42:	4683      	mov	fp, r0
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d156      	bne.n	8005bf6 <pow+0xee>
 8005b48:	4632      	mov	r2, r6
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	4639      	mov	r1, r7
 8005b50:	f7fb f80c 	bl	8000b6c <__aeabi_dcmpun>
 8005b54:	9001      	str	r0, [sp, #4]
 8005b56:	b1e8      	cbz	r0, 8005b94 <pow+0x8c>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4629      	mov	r1, r5
 8005b60:	f7fa ffd2 	bl	8000b08 <__aeabi_dcmpeq>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d046      	beq.n	8005bf6 <pow+0xee>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	9302      	str	r3, [sp, #8]
 8005b6c:	4b96      	ldr	r3, [pc, #600]	; (8005dc8 <pow+0x2c0>)
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <pow+0x2c4>)
 8005b72:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005b76:	2200      	movs	r2, #0
 8005b78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b7c:	9b00      	ldr	r3, [sp, #0]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005b84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005b88:	d033      	beq.n	8005bf2 <pow+0xea>
 8005b8a:	a802      	add	r0, sp, #8
 8005b8c:	f001 fe38 	bl	8007800 <matherr>
 8005b90:	bb48      	cbnz	r0, 8005be6 <pow+0xde>
 8005b92:	e05d      	b.n	8005c50 <pow+0x148>
 8005b94:	f04f 0a00 	mov.w	sl, #0
 8005b98:	f04f 0b00 	mov.w	fp, #0
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	465b      	mov	r3, fp
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	f7fa ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 8005ba8:	ec4b ab19 	vmov	d9, sl, fp
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d054      	beq.n	8005c5a <pow+0x152>
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f7fa ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	b318      	cbz	r0, 8005c08 <pow+0x100>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	9302      	str	r3, [sp, #8]
 8005bc4:	4b80      	ldr	r3, [pc, #512]	; (8005dc8 <pow+0x2c0>)
 8005bc6:	9303      	str	r3, [sp, #12]
 8005bc8:	9b01      	ldr	r3, [sp, #4]
 8005bca:	930a      	str	r3, [sp, #40]	; 0x28
 8005bcc:	9b00      	ldr	r3, [sp, #0]
 8005bce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005bd2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005bd6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0d5      	beq.n	8005b8a <pow+0x82>
 8005bde:	4b7b      	ldr	r3, [pc, #492]	; (8005dcc <pow+0x2c4>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be8:	b11b      	cbz	r3, 8005bf2 <pow+0xea>
 8005bea:	f7ff fb0b 	bl	8005204 <__errno>
 8005bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf0:	6003      	str	r3, [r0, #0]
 8005bf2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8005bf6:	eeb0 0a48 	vmov.f32	s0, s16
 8005bfa:	eef0 0a68 	vmov.f32	s1, s17
 8005bfe:	b00d      	add	sp, #52	; 0x34
 8005c00:	ecbd 8b04 	vpop	{d8-d9}
 8005c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c08:	ec45 4b10 	vmov	d0, r4, r5
 8005c0c:	f001 fd6b 	bl	80076e6 <finite>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d0f0      	beq.n	8005bf6 <pow+0xee>
 8005c14:	4652      	mov	r2, sl
 8005c16:	465b      	mov	r3, fp
 8005c18:	4620      	mov	r0, r4
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f7fa ff7e 	bl	8000b1c <__aeabi_dcmplt>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d0e8      	beq.n	8005bf6 <pow+0xee>
 8005c24:	2301      	movs	r3, #1
 8005c26:	9302      	str	r3, [sp, #8]
 8005c28:	4b67      	ldr	r3, [pc, #412]	; (8005dc8 <pow+0x2c0>)
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	f999 3000 	ldrsb.w	r3, [r9]
 8005c30:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005c34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005c38:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005c3c:	b913      	cbnz	r3, 8005c44 <pow+0x13c>
 8005c3e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005c42:	e7a2      	b.n	8005b8a <pow+0x82>
 8005c44:	4962      	ldr	r1, [pc, #392]	; (8005dd0 <pow+0x2c8>)
 8005c46:	2000      	movs	r0, #0
 8005c48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d19c      	bne.n	8005b8a <pow+0x82>
 8005c50:	f7ff fad8 	bl	8005204 <__errno>
 8005c54:	2321      	movs	r3, #33	; 0x21
 8005c56:	6003      	str	r3, [r0, #0]
 8005c58:	e7c5      	b.n	8005be6 <pow+0xde>
 8005c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c5e:	eef0 0a68 	vmov.f32	s1, s17
 8005c62:	f001 fd40 	bl	80076e6 <finite>
 8005c66:	9000      	str	r0, [sp, #0]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f040 8081 	bne.w	8005d70 <pow+0x268>
 8005c6e:	ec47 6b10 	vmov	d0, r6, r7
 8005c72:	f001 fd38 	bl	80076e6 <finite>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d07a      	beq.n	8005d70 <pow+0x268>
 8005c7a:	ec45 4b10 	vmov	d0, r4, r5
 8005c7e:	f001 fd32 	bl	80076e6 <finite>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d074      	beq.n	8005d70 <pow+0x268>
 8005c86:	ec53 2b18 	vmov	r2, r3, d8
 8005c8a:	ee18 0a10 	vmov	r0, s16
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f7fa ff6c 	bl	8000b6c <__aeabi_dcmpun>
 8005c94:	f999 9000 	ldrsb.w	r9, [r9]
 8005c98:	4b4b      	ldr	r3, [pc, #300]	; (8005dc8 <pow+0x2c0>)
 8005c9a:	b1b0      	cbz	r0, 8005cca <pow+0x1c2>
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005caa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005cae:	f1b9 0f00 	cmp.w	r9, #0
 8005cb2:	d0c4      	beq.n	8005c3e <pow+0x136>
 8005cb4:	4652      	mov	r2, sl
 8005cb6:	465b      	mov	r3, fp
 8005cb8:	4650      	mov	r0, sl
 8005cba:	4659      	mov	r1, fp
 8005cbc:	f7fa fde6 	bl	800088c <__aeabi_ddiv>
 8005cc0:	f1b9 0f02 	cmp.w	r9, #2
 8005cc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005cc8:	e7c1      	b.n	8005c4e <pow+0x146>
 8005cca:	2203      	movs	r2, #3
 8005ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cd0:	900a      	str	r0, [sp, #40]	; 0x28
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	; (8005dd4 <pow+0x2cc>)
 8005cda:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005cde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ce2:	f7fa fca9 	bl	8000638 <__aeabi_dmul>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	460d      	mov	r5, r1
 8005cea:	f1b9 0f00 	cmp.w	r9, #0
 8005cee:	d124      	bne.n	8005d3a <pow+0x232>
 8005cf0:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <pow+0x2d0>)
 8005cf2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005cf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	465b      	mov	r3, fp
 8005d00:	4639      	mov	r1, r7
 8005d02:	f7fa ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d056      	beq.n	8005db8 <pow+0x2b0>
 8005d0a:	ec45 4b10 	vmov	d0, r4, r5
 8005d0e:	f001 fd83 	bl	8007818 <rint>
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	ec51 0b10 	vmov	r0, r1, d0
 8005d1a:	f7fa fef5 	bl	8000b08 <__aeabi_dcmpeq>
 8005d1e:	b920      	cbnz	r0, 8005d2a <pow+0x222>
 8005d20:	4b2e      	ldr	r3, [pc, #184]	; (8005ddc <pow+0x2d4>)
 8005d22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005d26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d2a:	f998 3000 	ldrsb.w	r3, [r8]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d142      	bne.n	8005db8 <pow+0x2b0>
 8005d32:	f7ff fa67 	bl	8005204 <__errno>
 8005d36:	2322      	movs	r3, #34	; 0x22
 8005d38:	e78d      	b.n	8005c56 <pow+0x14e>
 8005d3a:	4b29      	ldr	r3, [pc, #164]	; (8005de0 <pow+0x2d8>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d42:	4630      	mov	r0, r6
 8005d44:	4652      	mov	r2, sl
 8005d46:	465b      	mov	r3, fp
 8005d48:	4639      	mov	r1, r7
 8005d4a:	f7fa fee7 	bl	8000b1c <__aeabi_dcmplt>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d0eb      	beq.n	8005d2a <pow+0x222>
 8005d52:	ec45 4b10 	vmov	d0, r4, r5
 8005d56:	f001 fd5f 	bl	8007818 <rint>
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	ec51 0b10 	vmov	r0, r1, d0
 8005d62:	f7fa fed1 	bl	8000b08 <__aeabi_dcmpeq>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1df      	bne.n	8005d2a <pow+0x222>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4b18      	ldr	r3, [pc, #96]	; (8005dd0 <pow+0x2c8>)
 8005d6e:	e7da      	b.n	8005d26 <pow+0x21e>
 8005d70:	2200      	movs	r2, #0
 8005d72:	2300      	movs	r3, #0
 8005d74:	ec51 0b18 	vmov	r0, r1, d8
 8005d78:	f7fa fec6 	bl	8000b08 <__aeabi_dcmpeq>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	f43f af3a 	beq.w	8005bf6 <pow+0xee>
 8005d82:	ec47 6b10 	vmov	d0, r6, r7
 8005d86:	f001 fcae 	bl	80076e6 <finite>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f43f af33 	beq.w	8005bf6 <pow+0xee>
 8005d90:	ec45 4b10 	vmov	d0, r4, r5
 8005d94:	f001 fca7 	bl	80076e6 <finite>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f43f af2c 	beq.w	8005bf6 <pow+0xee>
 8005d9e:	2304      	movs	r3, #4
 8005da0:	9302      	str	r3, [sp, #8]
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <pow+0x2c0>)
 8005da4:	9303      	str	r3, [sp, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	930a      	str	r3, [sp, #40]	; 0x28
 8005daa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005dae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005db2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8005db6:	e7b8      	b.n	8005d2a <pow+0x222>
 8005db8:	a802      	add	r0, sp, #8
 8005dba:	f001 fd21 	bl	8007800 <matherr>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f47f af11 	bne.w	8005be6 <pow+0xde>
 8005dc4:	e7b5      	b.n	8005d32 <pow+0x22a>
 8005dc6:	bf00      	nop
 8005dc8:	08007c2b 	.word	0x08007c2b
 8005dcc:	3ff00000 	.word	0x3ff00000
 8005dd0:	fff00000 	.word	0xfff00000
 8005dd4:	3fe00000 	.word	0x3fe00000
 8005dd8:	47efffff 	.word	0x47efffff
 8005ddc:	c7efffff 	.word	0xc7efffff
 8005de0:	7ff00000 	.word	0x7ff00000
 8005de4:	20000078 	.word	0x20000078

08005de8 <__ieee754_pow>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	b091      	sub	sp, #68	; 0x44
 8005dee:	ed8d 1b00 	vstr	d1, [sp]
 8005df2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005df6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005dfa:	ea58 0302 	orrs.w	r3, r8, r2
 8005dfe:	ec57 6b10 	vmov	r6, r7, d0
 8005e02:	f000 84be 	beq.w	8006782 <__ieee754_pow+0x99a>
 8005e06:	4b7a      	ldr	r3, [pc, #488]	; (8005ff0 <__ieee754_pow+0x208>)
 8005e08:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005e0c:	429c      	cmp	r4, r3
 8005e0e:	463d      	mov	r5, r7
 8005e10:	ee10 aa10 	vmov	sl, s0
 8005e14:	dc09      	bgt.n	8005e2a <__ieee754_pow+0x42>
 8005e16:	d103      	bne.n	8005e20 <__ieee754_pow+0x38>
 8005e18:	b93e      	cbnz	r6, 8005e2a <__ieee754_pow+0x42>
 8005e1a:	45a0      	cmp	r8, r4
 8005e1c:	dc0d      	bgt.n	8005e3a <__ieee754_pow+0x52>
 8005e1e:	e001      	b.n	8005e24 <__ieee754_pow+0x3c>
 8005e20:	4598      	cmp	r8, r3
 8005e22:	dc02      	bgt.n	8005e2a <__ieee754_pow+0x42>
 8005e24:	4598      	cmp	r8, r3
 8005e26:	d10e      	bne.n	8005e46 <__ieee754_pow+0x5e>
 8005e28:	b16a      	cbz	r2, 8005e46 <__ieee754_pow+0x5e>
 8005e2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e32:	ea54 030a 	orrs.w	r3, r4, sl
 8005e36:	f000 84a4 	beq.w	8006782 <__ieee754_pow+0x99a>
 8005e3a:	486e      	ldr	r0, [pc, #440]	; (8005ff4 <__ieee754_pow+0x20c>)
 8005e3c:	b011      	add	sp, #68	; 0x44
 8005e3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e42:	f001 bce1 	b.w	8007808 <nan>
 8005e46:	2d00      	cmp	r5, #0
 8005e48:	da53      	bge.n	8005ef2 <__ieee754_pow+0x10a>
 8005e4a:	4b6b      	ldr	r3, [pc, #428]	; (8005ff8 <__ieee754_pow+0x210>)
 8005e4c:	4598      	cmp	r8, r3
 8005e4e:	dc4d      	bgt.n	8005eec <__ieee754_pow+0x104>
 8005e50:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005e54:	4598      	cmp	r8, r3
 8005e56:	dd4c      	ble.n	8005ef2 <__ieee754_pow+0x10a>
 8005e58:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005e5c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e60:	2b14      	cmp	r3, #20
 8005e62:	dd26      	ble.n	8005eb2 <__ieee754_pow+0xca>
 8005e64:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005e68:	fa22 f103 	lsr.w	r1, r2, r3
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d13e      	bne.n	8005ef2 <__ieee754_pow+0x10a>
 8005e74:	f001 0101 	and.w	r1, r1, #1
 8005e78:	f1c1 0b02 	rsb	fp, r1, #2
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	d15b      	bne.n	8005f38 <__ieee754_pow+0x150>
 8005e80:	4b5b      	ldr	r3, [pc, #364]	; (8005ff0 <__ieee754_pow+0x208>)
 8005e82:	4598      	cmp	r8, r3
 8005e84:	d124      	bne.n	8005ed0 <__ieee754_pow+0xe8>
 8005e86:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005e8a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005e8e:	ea53 030a 	orrs.w	r3, r3, sl
 8005e92:	f000 8476 	beq.w	8006782 <__ieee754_pow+0x99a>
 8005e96:	4b59      	ldr	r3, [pc, #356]	; (8005ffc <__ieee754_pow+0x214>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	dd2d      	ble.n	8005ef8 <__ieee754_pow+0x110>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	f280 8473 	bge.w	800678a <__ieee754_pow+0x9a2>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	ec41 0b10 	vmov	d0, r0, r1
 8005eac:	b011      	add	sp, #68	; 0x44
 8005eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	d13e      	bne.n	8005f34 <__ieee754_pow+0x14c>
 8005eb6:	f1c3 0314 	rsb	r3, r3, #20
 8005eba:	fa48 f103 	asr.w	r1, r8, r3
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	4543      	cmp	r3, r8
 8005ec4:	f040 8469 	bne.w	800679a <__ieee754_pow+0x9b2>
 8005ec8:	f001 0101 	and.w	r1, r1, #1
 8005ecc:	f1c1 0b02 	rsb	fp, r1, #2
 8005ed0:	4b4b      	ldr	r3, [pc, #300]	; (8006000 <__ieee754_pow+0x218>)
 8005ed2:	4598      	cmp	r8, r3
 8005ed4:	d118      	bne.n	8005f08 <__ieee754_pow+0x120>
 8005ed6:	f1b9 0f00 	cmp.w	r9, #0
 8005eda:	f280 845a 	bge.w	8006792 <__ieee754_pow+0x9aa>
 8005ede:	4948      	ldr	r1, [pc, #288]	; (8006000 <__ieee754_pow+0x218>)
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f7fa fcd1 	bl	800088c <__aeabi_ddiv>
 8005eea:	e7dd      	b.n	8005ea8 <__ieee754_pow+0xc0>
 8005eec:	f04f 0b02 	mov.w	fp, #2
 8005ef0:	e7c4      	b.n	8005e7c <__ieee754_pow+0x94>
 8005ef2:	f04f 0b00 	mov.w	fp, #0
 8005ef6:	e7c1      	b.n	8005e7c <__ieee754_pow+0x94>
 8005ef8:	f1b9 0f00 	cmp.w	r9, #0
 8005efc:	dad2      	bge.n	8005ea4 <__ieee754_pow+0xbc>
 8005efe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005f02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005f06:	e7cf      	b.n	8005ea8 <__ieee754_pow+0xc0>
 8005f08:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005f0c:	d106      	bne.n	8005f1c <__ieee754_pow+0x134>
 8005f0e:	4632      	mov	r2, r6
 8005f10:	463b      	mov	r3, r7
 8005f12:	4610      	mov	r0, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7fa fb8f 	bl	8000638 <__aeabi_dmul>
 8005f1a:	e7c5      	b.n	8005ea8 <__ieee754_pow+0xc0>
 8005f1c:	4b39      	ldr	r3, [pc, #228]	; (8006004 <__ieee754_pow+0x21c>)
 8005f1e:	4599      	cmp	r9, r3
 8005f20:	d10a      	bne.n	8005f38 <__ieee754_pow+0x150>
 8005f22:	2d00      	cmp	r5, #0
 8005f24:	db08      	blt.n	8005f38 <__ieee754_pow+0x150>
 8005f26:	ec47 6b10 	vmov	d0, r6, r7
 8005f2a:	b011      	add	sp, #68	; 0x44
 8005f2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	f000 be5c 	b.w	8006bec <__ieee754_sqrt>
 8005f34:	f04f 0b00 	mov.w	fp, #0
 8005f38:	ec47 6b10 	vmov	d0, r6, r7
 8005f3c:	f001 fbca 	bl	80076d4 <fabs>
 8005f40:	ec51 0b10 	vmov	r0, r1, d0
 8005f44:	f1ba 0f00 	cmp.w	sl, #0
 8005f48:	d127      	bne.n	8005f9a <__ieee754_pow+0x1b2>
 8005f4a:	b124      	cbz	r4, 8005f56 <__ieee754_pow+0x16e>
 8005f4c:	4b2c      	ldr	r3, [pc, #176]	; (8006000 <__ieee754_pow+0x218>)
 8005f4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d121      	bne.n	8005f9a <__ieee754_pow+0x1b2>
 8005f56:	f1b9 0f00 	cmp.w	r9, #0
 8005f5a:	da05      	bge.n	8005f68 <__ieee754_pow+0x180>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	2000      	movs	r0, #0
 8005f62:	4927      	ldr	r1, [pc, #156]	; (8006000 <__ieee754_pow+0x218>)
 8005f64:	f7fa fc92 	bl	800088c <__aeabi_ddiv>
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	da9d      	bge.n	8005ea8 <__ieee754_pow+0xc0>
 8005f6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005f70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f74:	ea54 030b 	orrs.w	r3, r4, fp
 8005f78:	d108      	bne.n	8005f8c <__ieee754_pow+0x1a4>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	f7fa f9a1 	bl	80002c8 <__aeabi_dsub>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	e7ac      	b.n	8005ee6 <__ieee754_pow+0xfe>
 8005f8c:	f1bb 0f01 	cmp.w	fp, #1
 8005f90:	d18a      	bne.n	8005ea8 <__ieee754_pow+0xc0>
 8005f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f96:	4619      	mov	r1, r3
 8005f98:	e786      	b.n	8005ea8 <__ieee754_pow+0xc0>
 8005f9a:	0fed      	lsrs	r5, r5, #31
 8005f9c:	1e6b      	subs	r3, r5, #1
 8005f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005fa0:	ea5b 0303 	orrs.w	r3, fp, r3
 8005fa4:	d102      	bne.n	8005fac <__ieee754_pow+0x1c4>
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	463b      	mov	r3, r7
 8005faa:	e7e8      	b.n	8005f7e <__ieee754_pow+0x196>
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <__ieee754_pow+0x220>)
 8005fae:	4598      	cmp	r8, r3
 8005fb0:	f340 80fe 	ble.w	80061b0 <__ieee754_pow+0x3c8>
 8005fb4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005fb8:	4598      	cmp	r8, r3
 8005fba:	dd0a      	ble.n	8005fd2 <__ieee754_pow+0x1ea>
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <__ieee754_pow+0x214>)
 8005fbe:	429c      	cmp	r4, r3
 8005fc0:	dc0d      	bgt.n	8005fde <__ieee754_pow+0x1f6>
 8005fc2:	f1b9 0f00 	cmp.w	r9, #0
 8005fc6:	f6bf af6d 	bge.w	8005ea4 <__ieee754_pow+0xbc>
 8005fca:	a307      	add	r3, pc, #28	; (adr r3, 8005fe8 <__ieee754_pow+0x200>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	e79f      	b.n	8005f12 <__ieee754_pow+0x12a>
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	; (800600c <__ieee754_pow+0x224>)
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	ddf4      	ble.n	8005fc2 <__ieee754_pow+0x1da>
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <__ieee754_pow+0x218>)
 8005fda:	429c      	cmp	r4, r3
 8005fdc:	dd18      	ble.n	8006010 <__ieee754_pow+0x228>
 8005fde:	f1b9 0f00 	cmp.w	r9, #0
 8005fe2:	dcf2      	bgt.n	8005fca <__ieee754_pow+0x1e2>
 8005fe4:	e75e      	b.n	8005ea4 <__ieee754_pow+0xbc>
 8005fe6:	bf00      	nop
 8005fe8:	8800759c 	.word	0x8800759c
 8005fec:	7e37e43c 	.word	0x7e37e43c
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	08007bfd 	.word	0x08007bfd
 8005ff8:	433fffff 	.word	0x433fffff
 8005ffc:	3fefffff 	.word	0x3fefffff
 8006000:	3ff00000 	.word	0x3ff00000
 8006004:	3fe00000 	.word	0x3fe00000
 8006008:	41e00000 	.word	0x41e00000
 800600c:	3feffffe 	.word	0x3feffffe
 8006010:	2200      	movs	r2, #0
 8006012:	4b63      	ldr	r3, [pc, #396]	; (80061a0 <__ieee754_pow+0x3b8>)
 8006014:	f7fa f958 	bl	80002c8 <__aeabi_dsub>
 8006018:	a355      	add	r3, pc, #340	; (adr r3, 8006170 <__ieee754_pow+0x388>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
 8006022:	f7fa fb09 	bl	8000638 <__aeabi_dmul>
 8006026:	a354      	add	r3, pc, #336	; (adr r3, 8006178 <__ieee754_pow+0x390>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	4606      	mov	r6, r0
 800602e:	460f      	mov	r7, r1
 8006030:	4620      	mov	r0, r4
 8006032:	4629      	mov	r1, r5
 8006034:	f7fa fb00 	bl	8000638 <__aeabi_dmul>
 8006038:	2200      	movs	r2, #0
 800603a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800603e:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <__ieee754_pow+0x3bc>)
 8006040:	4620      	mov	r0, r4
 8006042:	4629      	mov	r1, r5
 8006044:	f7fa faf8 	bl	8000638 <__aeabi_dmul>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	a14c      	add	r1, pc, #304	; (adr r1, 8006180 <__ieee754_pow+0x398>)
 800604e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006052:	f7fa f939 	bl	80002c8 <__aeabi_dsub>
 8006056:	4622      	mov	r2, r4
 8006058:	462b      	mov	r3, r5
 800605a:	f7fa faed 	bl	8000638 <__aeabi_dmul>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	2000      	movs	r0, #0
 8006064:	4950      	ldr	r1, [pc, #320]	; (80061a8 <__ieee754_pow+0x3c0>)
 8006066:	f7fa f92f 	bl	80002c8 <__aeabi_dsub>
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	4680      	mov	r8, r0
 8006070:	4689      	mov	r9, r1
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fadf 	bl	8000638 <__aeabi_dmul>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa fad9 	bl	8000638 <__aeabi_dmul>
 8006086:	a340      	add	r3, pc, #256	; (adr r3, 8006188 <__ieee754_pow+0x3a0>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f7fa fad4 	bl	8000638 <__aeabi_dmul>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006098:	f7fa f916 	bl	80002c8 <__aeabi_dsub>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4604      	mov	r4, r0
 80060a2:	460d      	mov	r5, r1
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f7fa f910 	bl	80002cc <__adddf3>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060b2:	4632      	mov	r2, r6
 80060b4:	463b      	mov	r3, r7
 80060b6:	f7fa f907 	bl	80002c8 <__aeabi_dsub>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4620      	mov	r0, r4
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7fa f901 	bl	80002c8 <__aeabi_dsub>
 80060c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060c8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80060cc:	4313      	orrs	r3, r2
 80060ce:	4606      	mov	r6, r0
 80060d0:	460f      	mov	r7, r1
 80060d2:	f040 81eb 	bne.w	80064ac <__ieee754_pow+0x6c4>
 80060d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006190 <__ieee754_pow+0x3a8>
 80060da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80060de:	2400      	movs	r4, #0
 80060e0:	4622      	mov	r2, r4
 80060e2:	462b      	mov	r3, r5
 80060e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060ec:	f7fa f8ec 	bl	80002c8 <__aeabi_dsub>
 80060f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f4:	f7fa faa0 	bl	8000638 <__aeabi_dmul>
 80060f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa fa98 	bl	8000638 <__aeabi_dmul>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4640      	mov	r0, r8
 800610e:	4649      	mov	r1, r9
 8006110:	f7fa f8dc 	bl	80002cc <__adddf3>
 8006114:	4622      	mov	r2, r4
 8006116:	462b      	mov	r3, r5
 8006118:	4680      	mov	r8, r0
 800611a:	4689      	mov	r9, r1
 800611c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006120:	f7fa fa8a 	bl	8000638 <__aeabi_dmul>
 8006124:	460b      	mov	r3, r1
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	4602      	mov	r2, r0
 800612c:	4649      	mov	r1, r9
 800612e:	4640      	mov	r0, r8
 8006130:	e9cd 4500 	strd	r4, r5, [sp]
 8006134:	f7fa f8ca 	bl	80002cc <__adddf3>
 8006138:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <__ieee754_pow+0x3c4>)
 800613a:	4299      	cmp	r1, r3
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	468b      	mov	fp, r1
 8006142:	f340 82f7 	ble.w	8006734 <__ieee754_pow+0x94c>
 8006146:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800614a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800614e:	4303      	orrs	r3, r0
 8006150:	f000 81ea 	beq.w	8006528 <__ieee754_pow+0x740>
 8006154:	a310      	add	r3, pc, #64	; (adr r3, 8006198 <__ieee754_pow+0x3b0>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800615e:	f7fa fa6b 	bl	8000638 <__aeabi_dmul>
 8006162:	a30d      	add	r3, pc, #52	; (adr r3, 8006198 <__ieee754_pow+0x3b0>)
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	e6d5      	b.n	8005f16 <__ieee754_pow+0x12e>
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w
 8006170:	60000000 	.word	0x60000000
 8006174:	3ff71547 	.word	0x3ff71547
 8006178:	f85ddf44 	.word	0xf85ddf44
 800617c:	3e54ae0b 	.word	0x3e54ae0b
 8006180:	55555555 	.word	0x55555555
 8006184:	3fd55555 	.word	0x3fd55555
 8006188:	652b82fe 	.word	0x652b82fe
 800618c:	3ff71547 	.word	0x3ff71547
 8006190:	00000000 	.word	0x00000000
 8006194:	bff00000 	.word	0xbff00000
 8006198:	8800759c 	.word	0x8800759c
 800619c:	7e37e43c 	.word	0x7e37e43c
 80061a0:	3ff00000 	.word	0x3ff00000
 80061a4:	3fd00000 	.word	0x3fd00000
 80061a8:	3fe00000 	.word	0x3fe00000
 80061ac:	408fffff 	.word	0x408fffff
 80061b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	da05      	bge.n	80061c6 <__ieee754_pow+0x3de>
 80061ba:	4bd3      	ldr	r3, [pc, #844]	; (8006508 <__ieee754_pow+0x720>)
 80061bc:	f7fa fa3c 	bl	8000638 <__aeabi_dmul>
 80061c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80061c4:	460c      	mov	r4, r1
 80061c6:	1523      	asrs	r3, r4, #20
 80061c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80061cc:	4413      	add	r3, r2
 80061ce:	9309      	str	r3, [sp, #36]	; 0x24
 80061d0:	4bce      	ldr	r3, [pc, #824]	; (800650c <__ieee754_pow+0x724>)
 80061d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80061d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80061da:	429c      	cmp	r4, r3
 80061dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80061e0:	dd08      	ble.n	80061f4 <__ieee754_pow+0x40c>
 80061e2:	4bcb      	ldr	r3, [pc, #812]	; (8006510 <__ieee754_pow+0x728>)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	f340 815e 	ble.w	80064a6 <__ieee754_pow+0x6be>
 80061ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	9309      	str	r3, [sp, #36]	; 0x24
 80061f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80061f4:	f04f 0a00 	mov.w	sl, #0
 80061f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80061fc:	930c      	str	r3, [sp, #48]	; 0x30
 80061fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006200:	4bc4      	ldr	r3, [pc, #784]	; (8006514 <__ieee754_pow+0x72c>)
 8006202:	4413      	add	r3, r2
 8006204:	ed93 7b00 	vldr	d7, [r3]
 8006208:	4629      	mov	r1, r5
 800620a:	ec53 2b17 	vmov	r2, r3, d7
 800620e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006212:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006216:	f7fa f857 	bl	80002c8 <__aeabi_dsub>
 800621a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006226:	f7fa f851 	bl	80002cc <__adddf3>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	2000      	movs	r0, #0
 8006230:	49b9      	ldr	r1, [pc, #740]	; (8006518 <__ieee754_pow+0x730>)
 8006232:	f7fa fb2b 	bl	800088c <__aeabi_ddiv>
 8006236:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	f7fa f9f9 	bl	8000638 <__aeabi_dmul>
 8006246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800624a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800624e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006252:	2300      	movs	r3, #0
 8006254:	9302      	str	r3, [sp, #8]
 8006256:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800625a:	106d      	asrs	r5, r5, #1
 800625c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006260:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006264:	2200      	movs	r2, #0
 8006266:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	4614      	mov	r4, r2
 8006270:	461d      	mov	r5, r3
 8006272:	f7fa f9e1 	bl	8000638 <__aeabi_dmul>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7fa f823 	bl	80002c8 <__aeabi_dsub>
 8006282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006286:	4606      	mov	r6, r0
 8006288:	460f      	mov	r7, r1
 800628a:	4620      	mov	r0, r4
 800628c:	4629      	mov	r1, r5
 800628e:	f7fa f81b 	bl	80002c8 <__aeabi_dsub>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800629a:	f7fa f815 	bl	80002c8 <__aeabi_dsub>
 800629e:	4642      	mov	r2, r8
 80062a0:	464b      	mov	r3, r9
 80062a2:	f7fa f9c9 	bl	8000638 <__aeabi_dmul>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4630      	mov	r0, r6
 80062ac:	4639      	mov	r1, r7
 80062ae:	f7fa f80b 	bl	80002c8 <__aeabi_dsub>
 80062b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80062b6:	f7fa f9bf 	bl	8000638 <__aeabi_dmul>
 80062ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	f7fa f9b7 	bl	8000638 <__aeabi_dmul>
 80062ca:	a37b      	add	r3, pc, #492	; (adr r3, 80064b8 <__ieee754_pow+0x6d0>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	4604      	mov	r4, r0
 80062d2:	460d      	mov	r5, r1
 80062d4:	f7fa f9b0 	bl	8000638 <__aeabi_dmul>
 80062d8:	a379      	add	r3, pc, #484	; (adr r3, 80064c0 <__ieee754_pow+0x6d8>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7f9 fff5 	bl	80002cc <__adddf3>
 80062e2:	4622      	mov	r2, r4
 80062e4:	462b      	mov	r3, r5
 80062e6:	f7fa f9a7 	bl	8000638 <__aeabi_dmul>
 80062ea:	a377      	add	r3, pc, #476	; (adr r3, 80064c8 <__ieee754_pow+0x6e0>)
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f7f9 ffec 	bl	80002cc <__adddf3>
 80062f4:	4622      	mov	r2, r4
 80062f6:	462b      	mov	r3, r5
 80062f8:	f7fa f99e 	bl	8000638 <__aeabi_dmul>
 80062fc:	a374      	add	r3, pc, #464	; (adr r3, 80064d0 <__ieee754_pow+0x6e8>)
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f7f9 ffe3 	bl	80002cc <__adddf3>
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	f7fa f995 	bl	8000638 <__aeabi_dmul>
 800630e:	a372      	add	r3, pc, #456	; (adr r3, 80064d8 <__ieee754_pow+0x6f0>)
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f7f9 ffda 	bl	80002cc <__adddf3>
 8006318:	4622      	mov	r2, r4
 800631a:	462b      	mov	r3, r5
 800631c:	f7fa f98c 	bl	8000638 <__aeabi_dmul>
 8006320:	a36f      	add	r3, pc, #444	; (adr r3, 80064e0 <__ieee754_pow+0x6f8>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f7f9 ffd1 	bl	80002cc <__adddf3>
 800632a:	4622      	mov	r2, r4
 800632c:	4606      	mov	r6, r0
 800632e:	460f      	mov	r7, r1
 8006330:	462b      	mov	r3, r5
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f7fa f97f 	bl	8000638 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa f979 	bl	8000638 <__aeabi_dmul>
 8006346:	4642      	mov	r2, r8
 8006348:	4604      	mov	r4, r0
 800634a:	460d      	mov	r5, r1
 800634c:	464b      	mov	r3, r9
 800634e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006352:	f7f9 ffbb 	bl	80002cc <__adddf3>
 8006356:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800635a:	f7fa f96d 	bl	8000638 <__aeabi_dmul>
 800635e:	4622      	mov	r2, r4
 8006360:	462b      	mov	r3, r5
 8006362:	f7f9 ffb3 	bl	80002cc <__adddf3>
 8006366:	4642      	mov	r2, r8
 8006368:	4606      	mov	r6, r0
 800636a:	460f      	mov	r7, r1
 800636c:	464b      	mov	r3, r9
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7fa f961 	bl	8000638 <__aeabi_dmul>
 8006376:	2200      	movs	r2, #0
 8006378:	4b68      	ldr	r3, [pc, #416]	; (800651c <__ieee754_pow+0x734>)
 800637a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800637e:	f7f9 ffa5 	bl	80002cc <__adddf3>
 8006382:	4632      	mov	r2, r6
 8006384:	463b      	mov	r3, r7
 8006386:	f7f9 ffa1 	bl	80002cc <__adddf3>
 800638a:	9802      	ldr	r0, [sp, #8]
 800638c:	460d      	mov	r5, r1
 800638e:	4604      	mov	r4, r0
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4640      	mov	r0, r8
 8006396:	4649      	mov	r1, r9
 8006398:	f7fa f94e 	bl	8000638 <__aeabi_dmul>
 800639c:	2200      	movs	r2, #0
 800639e:	4680      	mov	r8, r0
 80063a0:	4689      	mov	r9, r1
 80063a2:	4b5e      	ldr	r3, [pc, #376]	; (800651c <__ieee754_pow+0x734>)
 80063a4:	4620      	mov	r0, r4
 80063a6:	4629      	mov	r1, r5
 80063a8:	f7f9 ff8e 	bl	80002c8 <__aeabi_dsub>
 80063ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063b0:	f7f9 ff8a 	bl	80002c8 <__aeabi_dsub>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4630      	mov	r0, r6
 80063ba:	4639      	mov	r1, r7
 80063bc:	f7f9 ff84 	bl	80002c8 <__aeabi_dsub>
 80063c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c4:	f7fa f938 	bl	8000638 <__aeabi_dmul>
 80063c8:	4622      	mov	r2, r4
 80063ca:	4606      	mov	r6, r0
 80063cc:	460f      	mov	r7, r1
 80063ce:	462b      	mov	r3, r5
 80063d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d4:	f7fa f930 	bl	8000638 <__aeabi_dmul>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4630      	mov	r0, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	f7f9 ff74 	bl	80002cc <__adddf3>
 80063e4:	4606      	mov	r6, r0
 80063e6:	460f      	mov	r7, r1
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4640      	mov	r0, r8
 80063ee:	4649      	mov	r1, r9
 80063f0:	f7f9 ff6c 	bl	80002cc <__adddf3>
 80063f4:	9802      	ldr	r0, [sp, #8]
 80063f6:	a33c      	add	r3, pc, #240	; (adr r3, 80064e8 <__ieee754_pow+0x700>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	4604      	mov	r4, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	f7fa f91a 	bl	8000638 <__aeabi_dmul>
 8006404:	4642      	mov	r2, r8
 8006406:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800640a:	464b      	mov	r3, r9
 800640c:	4620      	mov	r0, r4
 800640e:	4629      	mov	r1, r5
 8006410:	f7f9 ff5a 	bl	80002c8 <__aeabi_dsub>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4630      	mov	r0, r6
 800641a:	4639      	mov	r1, r7
 800641c:	f7f9 ff54 	bl	80002c8 <__aeabi_dsub>
 8006420:	a333      	add	r3, pc, #204	; (adr r3, 80064f0 <__ieee754_pow+0x708>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7fa f907 	bl	8000638 <__aeabi_dmul>
 800642a:	a333      	add	r3, pc, #204	; (adr r3, 80064f8 <__ieee754_pow+0x710>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	4606      	mov	r6, r0
 8006432:	460f      	mov	r7, r1
 8006434:	4620      	mov	r0, r4
 8006436:	4629      	mov	r1, r5
 8006438:	f7fa f8fe 	bl	8000638 <__aeabi_dmul>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7f9 ff42 	bl	80002cc <__adddf3>
 8006448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800644a:	4b35      	ldr	r3, [pc, #212]	; (8006520 <__ieee754_pow+0x738>)
 800644c:	4413      	add	r3, r2
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f7f9 ff3b 	bl	80002cc <__adddf3>
 8006456:	4604      	mov	r4, r0
 8006458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800645a:	460d      	mov	r5, r1
 800645c:	f7fa f882 	bl	8000564 <__aeabi_i2d>
 8006460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006462:	4b30      	ldr	r3, [pc, #192]	; (8006524 <__ieee754_pow+0x73c>)
 8006464:	4413      	add	r3, r2
 8006466:	e9d3 8900 	ldrd	r8, r9, [r3]
 800646a:	4606      	mov	r6, r0
 800646c:	460f      	mov	r7, r1
 800646e:	4622      	mov	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006476:	f7f9 ff29 	bl	80002cc <__adddf3>
 800647a:	4642      	mov	r2, r8
 800647c:	464b      	mov	r3, r9
 800647e:	f7f9 ff25 	bl	80002cc <__adddf3>
 8006482:	4632      	mov	r2, r6
 8006484:	463b      	mov	r3, r7
 8006486:	f7f9 ff21 	bl	80002cc <__adddf3>
 800648a:	9802      	ldr	r0, [sp, #8]
 800648c:	4632      	mov	r2, r6
 800648e:	463b      	mov	r3, r7
 8006490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006494:	f7f9 ff18 	bl	80002c8 <__aeabi_dsub>
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	f7f9 ff14 	bl	80002c8 <__aeabi_dsub>
 80064a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a4:	e607      	b.n	80060b6 <__ieee754_pow+0x2ce>
 80064a6:	f04f 0a01 	mov.w	sl, #1
 80064aa:	e6a5      	b.n	80061f8 <__ieee754_pow+0x410>
 80064ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006500 <__ieee754_pow+0x718>
 80064b0:	e613      	b.n	80060da <__ieee754_pow+0x2f2>
 80064b2:	bf00      	nop
 80064b4:	f3af 8000 	nop.w
 80064b8:	4a454eef 	.word	0x4a454eef
 80064bc:	3fca7e28 	.word	0x3fca7e28
 80064c0:	93c9db65 	.word	0x93c9db65
 80064c4:	3fcd864a 	.word	0x3fcd864a
 80064c8:	a91d4101 	.word	0xa91d4101
 80064cc:	3fd17460 	.word	0x3fd17460
 80064d0:	518f264d 	.word	0x518f264d
 80064d4:	3fd55555 	.word	0x3fd55555
 80064d8:	db6fabff 	.word	0xdb6fabff
 80064dc:	3fdb6db6 	.word	0x3fdb6db6
 80064e0:	33333303 	.word	0x33333303
 80064e4:	3fe33333 	.word	0x3fe33333
 80064e8:	e0000000 	.word	0xe0000000
 80064ec:	3feec709 	.word	0x3feec709
 80064f0:	dc3a03fd 	.word	0xdc3a03fd
 80064f4:	3feec709 	.word	0x3feec709
 80064f8:	145b01f5 	.word	0x145b01f5
 80064fc:	be3e2fe0 	.word	0xbe3e2fe0
 8006500:	00000000 	.word	0x00000000
 8006504:	3ff00000 	.word	0x3ff00000
 8006508:	43400000 	.word	0x43400000
 800650c:	0003988e 	.word	0x0003988e
 8006510:	000bb679 	.word	0x000bb679
 8006514:	08007c30 	.word	0x08007c30
 8006518:	3ff00000 	.word	0x3ff00000
 800651c:	40080000 	.word	0x40080000
 8006520:	08007c50 	.word	0x08007c50
 8006524:	08007c40 	.word	0x08007c40
 8006528:	a3b4      	add	r3, pc, #720	; (adr r3, 80067fc <__ieee754_pow+0xa14>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	4640      	mov	r0, r8
 8006530:	4649      	mov	r1, r9
 8006532:	f7f9 fecb 	bl	80002cc <__adddf3>
 8006536:	4622      	mov	r2, r4
 8006538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800653c:	462b      	mov	r3, r5
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7f9 fec1 	bl	80002c8 <__aeabi_dsub>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800654e:	f7fa fb03 	bl	8000b58 <__aeabi_dcmpgt>
 8006552:	2800      	cmp	r0, #0
 8006554:	f47f adfe 	bne.w	8006154 <__ieee754_pow+0x36c>
 8006558:	4aa3      	ldr	r2, [pc, #652]	; (80067e8 <__ieee754_pow+0xa00>)
 800655a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800655e:	4293      	cmp	r3, r2
 8006560:	f340 810a 	ble.w	8006778 <__ieee754_pow+0x990>
 8006564:	151b      	asrs	r3, r3, #20
 8006566:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800656a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800656e:	fa4a f303 	asr.w	r3, sl, r3
 8006572:	445b      	add	r3, fp
 8006574:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006578:	4e9c      	ldr	r6, [pc, #624]	; (80067ec <__ieee754_pow+0xa04>)
 800657a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800657e:	4116      	asrs	r6, r2
 8006580:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006584:	2000      	movs	r0, #0
 8006586:	ea23 0106 	bic.w	r1, r3, r6
 800658a:	f1c2 0214 	rsb	r2, r2, #20
 800658e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006592:	fa4a fa02 	asr.w	sl, sl, r2
 8006596:	f1bb 0f00 	cmp.w	fp, #0
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	bfb8      	it	lt
 80065a4:	f1ca 0a00 	rsblt	sl, sl, #0
 80065a8:	f7f9 fe8e 	bl	80002c8 <__aeabi_dsub>
 80065ac:	e9cd 0100 	strd	r0, r1, [sp]
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065b8:	f7f9 fe88 	bl	80002cc <__adddf3>
 80065bc:	2000      	movs	r0, #0
 80065be:	a378      	add	r3, pc, #480	; (adr r3, 80067a0 <__ieee754_pow+0x9b8>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	f7fa f836 	bl	8000638 <__aeabi_dmul>
 80065cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065d0:	4606      	mov	r6, r0
 80065d2:	460f      	mov	r7, r1
 80065d4:	4620      	mov	r0, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	f7f9 fe76 	bl	80002c8 <__aeabi_dsub>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4640      	mov	r0, r8
 80065e2:	4649      	mov	r1, r9
 80065e4:	f7f9 fe70 	bl	80002c8 <__aeabi_dsub>
 80065e8:	a36f      	add	r3, pc, #444	; (adr r3, 80067a8 <__ieee754_pow+0x9c0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f823 	bl	8000638 <__aeabi_dmul>
 80065f2:	a36f      	add	r3, pc, #444	; (adr r3, 80067b0 <__ieee754_pow+0x9c8>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	4680      	mov	r8, r0
 80065fa:	4689      	mov	r9, r1
 80065fc:	4620      	mov	r0, r4
 80065fe:	4629      	mov	r1, r5
 8006600:	f7fa f81a 	bl	8000638 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4640      	mov	r0, r8
 800660a:	4649      	mov	r1, r9
 800660c:	f7f9 fe5e 	bl	80002cc <__adddf3>
 8006610:	4604      	mov	r4, r0
 8006612:	460d      	mov	r5, r1
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7f9 fe56 	bl	80002cc <__adddf3>
 8006620:	4632      	mov	r2, r6
 8006622:	463b      	mov	r3, r7
 8006624:	4680      	mov	r8, r0
 8006626:	4689      	mov	r9, r1
 8006628:	f7f9 fe4e 	bl	80002c8 <__aeabi_dsub>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4620      	mov	r0, r4
 8006632:	4629      	mov	r1, r5
 8006634:	f7f9 fe48 	bl	80002c8 <__aeabi_dsub>
 8006638:	4642      	mov	r2, r8
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	464b      	mov	r3, r9
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7f9 fff8 	bl	8000638 <__aeabi_dmul>
 8006648:	a35b      	add	r3, pc, #364	; (adr r3, 80067b8 <__ieee754_pow+0x9d0>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	4604      	mov	r4, r0
 8006650:	460d      	mov	r5, r1
 8006652:	f7f9 fff1 	bl	8000638 <__aeabi_dmul>
 8006656:	a35a      	add	r3, pc, #360	; (adr r3, 80067c0 <__ieee754_pow+0x9d8>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	f7f9 fe34 	bl	80002c8 <__aeabi_dsub>
 8006660:	4622      	mov	r2, r4
 8006662:	462b      	mov	r3, r5
 8006664:	f7f9 ffe8 	bl	8000638 <__aeabi_dmul>
 8006668:	a357      	add	r3, pc, #348	; (adr r3, 80067c8 <__ieee754_pow+0x9e0>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f7f9 fe2d 	bl	80002cc <__adddf3>
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	f7f9 ffdf 	bl	8000638 <__aeabi_dmul>
 800667a:	a355      	add	r3, pc, #340	; (adr r3, 80067d0 <__ieee754_pow+0x9e8>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 fe22 	bl	80002c8 <__aeabi_dsub>
 8006684:	4622      	mov	r2, r4
 8006686:	462b      	mov	r3, r5
 8006688:	f7f9 ffd6 	bl	8000638 <__aeabi_dmul>
 800668c:	a352      	add	r3, pc, #328	; (adr r3, 80067d8 <__ieee754_pow+0x9f0>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 fe1b 	bl	80002cc <__adddf3>
 8006696:	4622      	mov	r2, r4
 8006698:	462b      	mov	r3, r5
 800669a:	f7f9 ffcd 	bl	8000638 <__aeabi_dmul>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	f7f9 fe0f 	bl	80002c8 <__aeabi_dsub>
 80066aa:	4604      	mov	r4, r0
 80066ac:	460d      	mov	r5, r1
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4640      	mov	r0, r8
 80066b4:	4649      	mov	r1, r9
 80066b6:	f7f9 ffbf 	bl	8000638 <__aeabi_dmul>
 80066ba:	2200      	movs	r2, #0
 80066bc:	e9cd 0100 	strd	r0, r1, [sp]
 80066c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7f9 fdfe 	bl	80002c8 <__aeabi_dsub>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066d4:	f7fa f8da 	bl	800088c <__aeabi_ddiv>
 80066d8:	4632      	mov	r2, r6
 80066da:	4604      	mov	r4, r0
 80066dc:	460d      	mov	r5, r1
 80066de:	463b      	mov	r3, r7
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7f9 ffa8 	bl	8000638 <__aeabi_dmul>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	f7f9 fdee 	bl	80002cc <__adddf3>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4620      	mov	r0, r4
 80066f6:	4629      	mov	r1, r5
 80066f8:	f7f9 fde6 	bl	80002c8 <__aeabi_dsub>
 80066fc:	4642      	mov	r2, r8
 80066fe:	464b      	mov	r3, r9
 8006700:	f7f9 fde2 	bl	80002c8 <__aeabi_dsub>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	2000      	movs	r0, #0
 800670a:	4939      	ldr	r1, [pc, #228]	; (80067f0 <__ieee754_pow+0xa08>)
 800670c:	f7f9 fddc 	bl	80002c8 <__aeabi_dsub>
 8006710:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006714:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	da2f      	bge.n	800677e <__ieee754_pow+0x996>
 800671e:	4650      	mov	r0, sl
 8006720:	ec43 2b10 	vmov	d0, r2, r3
 8006724:	f001 f8fc 	bl	8007920 <scalbn>
 8006728:	ec51 0b10 	vmov	r0, r1, d0
 800672c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006730:	f7ff bbf1 	b.w	8005f16 <__ieee754_pow+0x12e>
 8006734:	4b2f      	ldr	r3, [pc, #188]	; (80067f4 <__ieee754_pow+0xa0c>)
 8006736:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800673a:	429e      	cmp	r6, r3
 800673c:	f77f af0c 	ble.w	8006558 <__ieee754_pow+0x770>
 8006740:	4b2d      	ldr	r3, [pc, #180]	; (80067f8 <__ieee754_pow+0xa10>)
 8006742:	440b      	add	r3, r1
 8006744:	4303      	orrs	r3, r0
 8006746:	d00b      	beq.n	8006760 <__ieee754_pow+0x978>
 8006748:	a325      	add	r3, pc, #148	; (adr r3, 80067e0 <__ieee754_pow+0x9f8>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006752:	f7f9 ff71 	bl	8000638 <__aeabi_dmul>
 8006756:	a322      	add	r3, pc, #136	; (adr r3, 80067e0 <__ieee754_pow+0x9f8>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7ff bbdb 	b.w	8005f16 <__ieee754_pow+0x12e>
 8006760:	4622      	mov	r2, r4
 8006762:	462b      	mov	r3, r5
 8006764:	f7f9 fdb0 	bl	80002c8 <__aeabi_dsub>
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	f7fa f9ea 	bl	8000b44 <__aeabi_dcmpge>
 8006770:	2800      	cmp	r0, #0
 8006772:	f43f aef1 	beq.w	8006558 <__ieee754_pow+0x770>
 8006776:	e7e7      	b.n	8006748 <__ieee754_pow+0x960>
 8006778:	f04f 0a00 	mov.w	sl, #0
 800677c:	e718      	b.n	80065b0 <__ieee754_pow+0x7c8>
 800677e:	4621      	mov	r1, r4
 8006780:	e7d4      	b.n	800672c <__ieee754_pow+0x944>
 8006782:	2000      	movs	r0, #0
 8006784:	491a      	ldr	r1, [pc, #104]	; (80067f0 <__ieee754_pow+0xa08>)
 8006786:	f7ff bb8f 	b.w	8005ea8 <__ieee754_pow+0xc0>
 800678a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800678e:	f7ff bb8b 	b.w	8005ea8 <__ieee754_pow+0xc0>
 8006792:	4630      	mov	r0, r6
 8006794:	4639      	mov	r1, r7
 8006796:	f7ff bb87 	b.w	8005ea8 <__ieee754_pow+0xc0>
 800679a:	4693      	mov	fp, r2
 800679c:	f7ff bb98 	b.w	8005ed0 <__ieee754_pow+0xe8>
 80067a0:	00000000 	.word	0x00000000
 80067a4:	3fe62e43 	.word	0x3fe62e43
 80067a8:	fefa39ef 	.word	0xfefa39ef
 80067ac:	3fe62e42 	.word	0x3fe62e42
 80067b0:	0ca86c39 	.word	0x0ca86c39
 80067b4:	be205c61 	.word	0xbe205c61
 80067b8:	72bea4d0 	.word	0x72bea4d0
 80067bc:	3e663769 	.word	0x3e663769
 80067c0:	c5d26bf1 	.word	0xc5d26bf1
 80067c4:	3ebbbd41 	.word	0x3ebbbd41
 80067c8:	af25de2c 	.word	0xaf25de2c
 80067cc:	3f11566a 	.word	0x3f11566a
 80067d0:	16bebd93 	.word	0x16bebd93
 80067d4:	3f66c16c 	.word	0x3f66c16c
 80067d8:	5555553e 	.word	0x5555553e
 80067dc:	3fc55555 	.word	0x3fc55555
 80067e0:	c2f8f359 	.word	0xc2f8f359
 80067e4:	01a56e1f 	.word	0x01a56e1f
 80067e8:	3fe00000 	.word	0x3fe00000
 80067ec:	000fffff 	.word	0x000fffff
 80067f0:	3ff00000 	.word	0x3ff00000
 80067f4:	4090cbff 	.word	0x4090cbff
 80067f8:	3f6f3400 	.word	0x3f6f3400
 80067fc:	652b82fe 	.word	0x652b82fe
 8006800:	3c971547 	.word	0x3c971547
 8006804:	00000000 	.word	0x00000000

08006808 <__ieee754_rem_pio2>:
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	ec57 6b10 	vmov	r6, r7, d0
 8006810:	4bc3      	ldr	r3, [pc, #780]	; (8006b20 <__ieee754_rem_pio2+0x318>)
 8006812:	b08d      	sub	sp, #52	; 0x34
 8006814:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006818:	4598      	cmp	r8, r3
 800681a:	4604      	mov	r4, r0
 800681c:	9704      	str	r7, [sp, #16]
 800681e:	dc07      	bgt.n	8006830 <__ieee754_rem_pio2+0x28>
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	ed84 0b00 	vstr	d0, [r4]
 8006828:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800682c:	2500      	movs	r5, #0
 800682e:	e027      	b.n	8006880 <__ieee754_rem_pio2+0x78>
 8006830:	4bbc      	ldr	r3, [pc, #752]	; (8006b24 <__ieee754_rem_pio2+0x31c>)
 8006832:	4598      	cmp	r8, r3
 8006834:	dc75      	bgt.n	8006922 <__ieee754_rem_pio2+0x11a>
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	4dbb      	ldr	r5, [pc, #748]	; (8006b28 <__ieee754_rem_pio2+0x320>)
 800683a:	2b00      	cmp	r3, #0
 800683c:	ee10 0a10 	vmov	r0, s0
 8006840:	a3a9      	add	r3, pc, #676	; (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2e0>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	4639      	mov	r1, r7
 8006848:	dd36      	ble.n	80068b8 <__ieee754_rem_pio2+0xb0>
 800684a:	f7f9 fd3d 	bl	80002c8 <__aeabi_dsub>
 800684e:	45a8      	cmp	r8, r5
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	d018      	beq.n	8006888 <__ieee754_rem_pio2+0x80>
 8006856:	a3a6      	add	r3, pc, #664	; (adr r3, 8006af0 <__ieee754_rem_pio2+0x2e8>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fd34 	bl	80002c8 <__aeabi_dsub>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	e9c4 2300 	strd	r2, r3, [r4]
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	f7f9 fd2c 	bl	80002c8 <__aeabi_dsub>
 8006870:	a39f      	add	r3, pc, #636	; (adr r3, 8006af0 <__ieee754_rem_pio2+0x2e8>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fd27 	bl	80002c8 <__aeabi_dsub>
 800687a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800687e:	2501      	movs	r5, #1
 8006880:	4628      	mov	r0, r5
 8006882:	b00d      	add	sp, #52	; 0x34
 8006884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006888:	a39b      	add	r3, pc, #620	; (adr r3, 8006af8 <__ieee754_rem_pio2+0x2f0>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 fd1b 	bl	80002c8 <__aeabi_dsub>
 8006892:	a39b      	add	r3, pc, #620	; (adr r3, 8006b00 <__ieee754_rem_pio2+0x2f8>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	4606      	mov	r6, r0
 800689a:	460f      	mov	r7, r1
 800689c:	f7f9 fd14 	bl	80002c8 <__aeabi_dsub>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	e9c4 2300 	strd	r2, r3, [r4]
 80068a8:	4630      	mov	r0, r6
 80068aa:	4639      	mov	r1, r7
 80068ac:	f7f9 fd0c 	bl	80002c8 <__aeabi_dsub>
 80068b0:	a393      	add	r3, pc, #588	; (adr r3, 8006b00 <__ieee754_rem_pio2+0x2f8>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	e7de      	b.n	8006876 <__ieee754_rem_pio2+0x6e>
 80068b8:	f7f9 fd08 	bl	80002cc <__adddf3>
 80068bc:	45a8      	cmp	r8, r5
 80068be:	4606      	mov	r6, r0
 80068c0:	460f      	mov	r7, r1
 80068c2:	d016      	beq.n	80068f2 <__ieee754_rem_pio2+0xea>
 80068c4:	a38a      	add	r3, pc, #552	; (adr r3, 8006af0 <__ieee754_rem_pio2+0x2e8>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fcff 	bl	80002cc <__adddf3>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	e9c4 2300 	strd	r2, r3, [r4]
 80068d6:	4630      	mov	r0, r6
 80068d8:	4639      	mov	r1, r7
 80068da:	f7f9 fcf5 	bl	80002c8 <__aeabi_dsub>
 80068de:	a384      	add	r3, pc, #528	; (adr r3, 8006af0 <__ieee754_rem_pio2+0x2e8>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 fcf2 	bl	80002cc <__adddf3>
 80068e8:	f04f 35ff 	mov.w	r5, #4294967295
 80068ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068f0:	e7c6      	b.n	8006880 <__ieee754_rem_pio2+0x78>
 80068f2:	a381      	add	r3, pc, #516	; (adr r3, 8006af8 <__ieee754_rem_pio2+0x2f0>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fce8 	bl	80002cc <__adddf3>
 80068fc:	a380      	add	r3, pc, #512	; (adr r3, 8006b00 <__ieee754_rem_pio2+0x2f8>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	4606      	mov	r6, r0
 8006904:	460f      	mov	r7, r1
 8006906:	f7f9 fce1 	bl	80002cc <__adddf3>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	e9c4 2300 	strd	r2, r3, [r4]
 8006912:	4630      	mov	r0, r6
 8006914:	4639      	mov	r1, r7
 8006916:	f7f9 fcd7 	bl	80002c8 <__aeabi_dsub>
 800691a:	a379      	add	r3, pc, #484	; (adr r3, 8006b00 <__ieee754_rem_pio2+0x2f8>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	e7e0      	b.n	80068e4 <__ieee754_rem_pio2+0xdc>
 8006922:	4b82      	ldr	r3, [pc, #520]	; (8006b2c <__ieee754_rem_pio2+0x324>)
 8006924:	4598      	cmp	r8, r3
 8006926:	f300 80d0 	bgt.w	8006aca <__ieee754_rem_pio2+0x2c2>
 800692a:	f000 fed3 	bl	80076d4 <fabs>
 800692e:	ec57 6b10 	vmov	r6, r7, d0
 8006932:	ee10 0a10 	vmov	r0, s0
 8006936:	a374      	add	r3, pc, #464	; (adr r3, 8006b08 <__ieee754_rem_pio2+0x300>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	4639      	mov	r1, r7
 800693e:	f7f9 fe7b 	bl	8000638 <__aeabi_dmul>
 8006942:	2200      	movs	r2, #0
 8006944:	4b7a      	ldr	r3, [pc, #488]	; (8006b30 <__ieee754_rem_pio2+0x328>)
 8006946:	f7f9 fcc1 	bl	80002cc <__adddf3>
 800694a:	f7fa f925 	bl	8000b98 <__aeabi_d2iz>
 800694e:	4605      	mov	r5, r0
 8006950:	f7f9 fe08 	bl	8000564 <__aeabi_i2d>
 8006954:	a364      	add	r3, pc, #400	; (adr r3, 8006ae8 <__ieee754_rem_pio2+0x2e0>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800695e:	f7f9 fe6b 	bl	8000638 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	f7f9 fcad 	bl	80002c8 <__aeabi_dsub>
 800696e:	a360      	add	r3, pc, #384	; (adr r3, 8006af0 <__ieee754_rem_pio2+0x2e8>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	4682      	mov	sl, r0
 8006976:	468b      	mov	fp, r1
 8006978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800697c:	f7f9 fe5c 	bl	8000638 <__aeabi_dmul>
 8006980:	2d1f      	cmp	r5, #31
 8006982:	4606      	mov	r6, r0
 8006984:	460f      	mov	r7, r1
 8006986:	dc0c      	bgt.n	80069a2 <__ieee754_rem_pio2+0x19a>
 8006988:	1e6a      	subs	r2, r5, #1
 800698a:	4b6a      	ldr	r3, [pc, #424]	; (8006b34 <__ieee754_rem_pio2+0x32c>)
 800698c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006990:	4543      	cmp	r3, r8
 8006992:	d006      	beq.n	80069a2 <__ieee754_rem_pio2+0x19a>
 8006994:	4632      	mov	r2, r6
 8006996:	463b      	mov	r3, r7
 8006998:	4650      	mov	r0, sl
 800699a:	4659      	mov	r1, fp
 800699c:	f7f9 fc94 	bl	80002c8 <__aeabi_dsub>
 80069a0:	e00e      	b.n	80069c0 <__ieee754_rem_pio2+0x1b8>
 80069a2:	4632      	mov	r2, r6
 80069a4:	463b      	mov	r3, r7
 80069a6:	4650      	mov	r0, sl
 80069a8:	4659      	mov	r1, fp
 80069aa:	f7f9 fc8d 	bl	80002c8 <__aeabi_dsub>
 80069ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	9a05      	ldr	r2, [sp, #20]
 80069b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b10      	cmp	r3, #16
 80069be:	dc02      	bgt.n	80069c6 <__ieee754_rem_pio2+0x1be>
 80069c0:	e9c4 0100 	strd	r0, r1, [r4]
 80069c4:	e039      	b.n	8006a3a <__ieee754_rem_pio2+0x232>
 80069c6:	a34c      	add	r3, pc, #304	; (adr r3, 8006af8 <__ieee754_rem_pio2+0x2f0>)
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d0:	f7f9 fe32 	bl	8000638 <__aeabi_dmul>
 80069d4:	4606      	mov	r6, r0
 80069d6:	460f      	mov	r7, r1
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4650      	mov	r0, sl
 80069de:	4659      	mov	r1, fp
 80069e0:	f7f9 fc72 	bl	80002c8 <__aeabi_dsub>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4680      	mov	r8, r0
 80069ea:	4689      	mov	r9, r1
 80069ec:	4650      	mov	r0, sl
 80069ee:	4659      	mov	r1, fp
 80069f0:	f7f9 fc6a 	bl	80002c8 <__aeabi_dsub>
 80069f4:	4632      	mov	r2, r6
 80069f6:	463b      	mov	r3, r7
 80069f8:	f7f9 fc66 	bl	80002c8 <__aeabi_dsub>
 80069fc:	a340      	add	r3, pc, #256	; (adr r3, 8006b00 <__ieee754_rem_pio2+0x2f8>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0a:	f7f9 fe15 	bl	8000638 <__aeabi_dmul>
 8006a0e:	4632      	mov	r2, r6
 8006a10:	463b      	mov	r3, r7
 8006a12:	f7f9 fc59 	bl	80002c8 <__aeabi_dsub>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460f      	mov	r7, r1
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7f9 fc51 	bl	80002c8 <__aeabi_dsub>
 8006a26:	9a05      	ldr	r2, [sp, #20]
 8006a28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b31      	cmp	r3, #49	; 0x31
 8006a30:	dc20      	bgt.n	8006a74 <__ieee754_rem_pio2+0x26c>
 8006a32:	e9c4 0100 	strd	r0, r1, [r4]
 8006a36:	46c2      	mov	sl, r8
 8006a38:	46cb      	mov	fp, r9
 8006a3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006a3e:	4650      	mov	r0, sl
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	4659      	mov	r1, fp
 8006a46:	f7f9 fc3f 	bl	80002c8 <__aeabi_dsub>
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	f7f9 fc3b 	bl	80002c8 <__aeabi_dsub>
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a5a:	f6bf af11 	bge.w	8006880 <__ieee754_rem_pio2+0x78>
 8006a5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a62:	6063      	str	r3, [r4, #4]
 8006a64:	f8c4 8000 	str.w	r8, [r4]
 8006a68:	60a0      	str	r0, [r4, #8]
 8006a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a6e:	60e3      	str	r3, [r4, #12]
 8006a70:	426d      	negs	r5, r5
 8006a72:	e705      	b.n	8006880 <__ieee754_rem_pio2+0x78>
 8006a74:	a326      	add	r3, pc, #152	; (adr r3, 8006b10 <__ieee754_rem_pio2+0x308>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7e:	f7f9 fddb 	bl	8000638 <__aeabi_dmul>
 8006a82:	4606      	mov	r6, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fc1b 	bl	80002c8 <__aeabi_dsub>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4682      	mov	sl, r0
 8006a98:	468b      	mov	fp, r1
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7f9 fc13 	bl	80002c8 <__aeabi_dsub>
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	f7f9 fc0f 	bl	80002c8 <__aeabi_dsub>
 8006aaa:	a31b      	add	r3, pc, #108	; (adr r3, 8006b18 <__ieee754_rem_pio2+0x310>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab8:	f7f9 fdbe 	bl	8000638 <__aeabi_dmul>
 8006abc:	4632      	mov	r2, r6
 8006abe:	463b      	mov	r3, r7
 8006ac0:	f7f9 fc02 	bl	80002c8 <__aeabi_dsub>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	460f      	mov	r7, r1
 8006ac8:	e764      	b.n	8006994 <__ieee754_rem_pio2+0x18c>
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <__ieee754_rem_pio2+0x330>)
 8006acc:	4598      	cmp	r8, r3
 8006ace:	dd35      	ble.n	8006b3c <__ieee754_rem_pio2+0x334>
 8006ad0:	ee10 2a10 	vmov	r2, s0
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	f7f9 fbf5 	bl	80002c8 <__aeabi_dsub>
 8006ade:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ae2:	e9c4 0100 	strd	r0, r1, [r4]
 8006ae6:	e6a1      	b.n	800682c <__ieee754_rem_pio2+0x24>
 8006ae8:	54400000 	.word	0x54400000
 8006aec:	3ff921fb 	.word	0x3ff921fb
 8006af0:	1a626331 	.word	0x1a626331
 8006af4:	3dd0b461 	.word	0x3dd0b461
 8006af8:	1a600000 	.word	0x1a600000
 8006afc:	3dd0b461 	.word	0x3dd0b461
 8006b00:	2e037073 	.word	0x2e037073
 8006b04:	3ba3198a 	.word	0x3ba3198a
 8006b08:	6dc9c883 	.word	0x6dc9c883
 8006b0c:	3fe45f30 	.word	0x3fe45f30
 8006b10:	2e000000 	.word	0x2e000000
 8006b14:	3ba3198a 	.word	0x3ba3198a
 8006b18:	252049c1 	.word	0x252049c1
 8006b1c:	397b839a 	.word	0x397b839a
 8006b20:	3fe921fb 	.word	0x3fe921fb
 8006b24:	4002d97b 	.word	0x4002d97b
 8006b28:	3ff921fb 	.word	0x3ff921fb
 8006b2c:	413921fb 	.word	0x413921fb
 8006b30:	3fe00000 	.word	0x3fe00000
 8006b34:	08007c60 	.word	0x08007c60
 8006b38:	7fefffff 	.word	0x7fefffff
 8006b3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006b40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006b44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006b48:	4630      	mov	r0, r6
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	f7fa f824 	bl	8000b98 <__aeabi_d2iz>
 8006b50:	f7f9 fd08 	bl	8000564 <__aeabi_i2d>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b60:	f7f9 fbb2 	bl	80002c8 <__aeabi_dsub>
 8006b64:	2200      	movs	r2, #0
 8006b66:	4b1f      	ldr	r3, [pc, #124]	; (8006be4 <__ieee754_rem_pio2+0x3dc>)
 8006b68:	f7f9 fd66 	bl	8000638 <__aeabi_dmul>
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	4606      	mov	r6, r0
 8006b70:	f7fa f812 	bl	8000b98 <__aeabi_d2iz>
 8006b74:	f7f9 fcf6 	bl	8000564 <__aeabi_i2d>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	4639      	mov	r1, r7
 8006b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b84:	f7f9 fba0 	bl	80002c8 <__aeabi_dsub>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <__ieee754_rem_pio2+0x3dc>)
 8006b8c:	f7f9 fd54 	bl	8000638 <__aeabi_dmul>
 8006b90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006b98:	f04f 0803 	mov.w	r8, #3
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	2700      	movs	r7, #0
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006ba8:	f108 3aff 	add.w	sl, r8, #4294967295
 8006bac:	f7f9 ffac 	bl	8000b08 <__aeabi_dcmpeq>
 8006bb0:	b9b0      	cbnz	r0, 8006be0 <__ieee754_rem_pio2+0x3d8>
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <__ieee754_rem_pio2+0x3e0>)
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4643      	mov	r3, r8
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	a806      	add	r0, sp, #24
 8006bc2:	f000 f98d 	bl	8006ee0 <__kernel_rem_pio2>
 8006bc6:	9b04      	ldr	r3, [sp, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	4605      	mov	r5, r0
 8006bcc:	f6bf ae58 	bge.w	8006880 <__ieee754_rem_pio2+0x78>
 8006bd0:	6863      	ldr	r3, [r4, #4]
 8006bd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	68e3      	ldr	r3, [r4, #12]
 8006bda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bde:	e746      	b.n	8006a6e <__ieee754_rem_pio2+0x266>
 8006be0:	46d0      	mov	r8, sl
 8006be2:	e7dd      	b.n	8006ba0 <__ieee754_rem_pio2+0x398>
 8006be4:	41700000 	.word	0x41700000
 8006be8:	08007ce0 	.word	0x08007ce0

08006bec <__ieee754_sqrt>:
 8006bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf0:	4955      	ldr	r1, [pc, #340]	; (8006d48 <__ieee754_sqrt+0x15c>)
 8006bf2:	ec55 4b10 	vmov	r4, r5, d0
 8006bf6:	43a9      	bics	r1, r5
 8006bf8:	462b      	mov	r3, r5
 8006bfa:	462a      	mov	r2, r5
 8006bfc:	d112      	bne.n	8006c24 <__ieee754_sqrt+0x38>
 8006bfe:	ee10 2a10 	vmov	r2, s0
 8006c02:	ee10 0a10 	vmov	r0, s0
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7f9 fd16 	bl	8000638 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4620      	mov	r0, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	f7f9 fb5a 	bl	80002cc <__adddf3>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	ec45 4b10 	vmov	d0, r4, r5
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	ee10 0a10 	vmov	r0, s0
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	dc0f      	bgt.n	8006c4e <__ieee754_sqrt+0x62>
 8006c2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006c32:	4330      	orrs	r0, r6
 8006c34:	d0f2      	beq.n	8006c1c <__ieee754_sqrt+0x30>
 8006c36:	b155      	cbz	r5, 8006c4e <__ieee754_sqrt+0x62>
 8006c38:	ee10 2a10 	vmov	r2, s0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fb42 	bl	80002c8 <__aeabi_dsub>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	f7f9 fe20 	bl	800088c <__aeabi_ddiv>
 8006c4c:	e7e4      	b.n	8006c18 <__ieee754_sqrt+0x2c>
 8006c4e:	151b      	asrs	r3, r3, #20
 8006c50:	d073      	beq.n	8006d3a <__ieee754_sqrt+0x14e>
 8006c52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c56:	07dd      	lsls	r5, r3, #31
 8006c58:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006c5c:	bf48      	it	mi
 8006c5e:	0fc8      	lsrmi	r0, r1, #31
 8006c60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c64:	bf44      	itt	mi
 8006c66:	0049      	lslmi	r1, r1, #1
 8006c68:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	1058      	asrs	r0, r3, #1
 8006c70:	0fcb      	lsrs	r3, r1, #31
 8006c72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006c76:	0049      	lsls	r1, r1, #1
 8006c78:	2316      	movs	r3, #22
 8006c7a:	462c      	mov	r4, r5
 8006c7c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006c80:	19a7      	adds	r7, r4, r6
 8006c82:	4297      	cmp	r7, r2
 8006c84:	bfde      	ittt	le
 8006c86:	19bc      	addle	r4, r7, r6
 8006c88:	1bd2      	suble	r2, r2, r7
 8006c8a:	19ad      	addle	r5, r5, r6
 8006c8c:	0fcf      	lsrs	r7, r1, #31
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006c94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006c9c:	d1f0      	bne.n	8006c80 <__ieee754_sqrt+0x94>
 8006c9e:	f04f 0c20 	mov.w	ip, #32
 8006ca2:	469e      	mov	lr, r3
 8006ca4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006ca8:	42a2      	cmp	r2, r4
 8006caa:	eb06 070e 	add.w	r7, r6, lr
 8006cae:	dc02      	bgt.n	8006cb6 <__ieee754_sqrt+0xca>
 8006cb0:	d112      	bne.n	8006cd8 <__ieee754_sqrt+0xec>
 8006cb2:	428f      	cmp	r7, r1
 8006cb4:	d810      	bhi.n	8006cd8 <__ieee754_sqrt+0xec>
 8006cb6:	2f00      	cmp	r7, #0
 8006cb8:	eb07 0e06 	add.w	lr, r7, r6
 8006cbc:	da42      	bge.n	8006d44 <__ieee754_sqrt+0x158>
 8006cbe:	f1be 0f00 	cmp.w	lr, #0
 8006cc2:	db3f      	blt.n	8006d44 <__ieee754_sqrt+0x158>
 8006cc4:	f104 0801 	add.w	r8, r4, #1
 8006cc8:	1b12      	subs	r2, r2, r4
 8006cca:	428f      	cmp	r7, r1
 8006ccc:	bf88      	it	hi
 8006cce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006cd2:	1bc9      	subs	r1, r1, r7
 8006cd4:	4433      	add	r3, r6
 8006cd6:	4644      	mov	r4, r8
 8006cd8:	0052      	lsls	r2, r2, #1
 8006cda:	f1bc 0c01 	subs.w	ip, ip, #1
 8006cde:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006ce2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ce6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006cea:	d1dd      	bne.n	8006ca8 <__ieee754_sqrt+0xbc>
 8006cec:	430a      	orrs	r2, r1
 8006cee:	d006      	beq.n	8006cfe <__ieee754_sqrt+0x112>
 8006cf0:	1c5c      	adds	r4, r3, #1
 8006cf2:	bf13      	iteet	ne
 8006cf4:	3301      	addne	r3, #1
 8006cf6:	3501      	addeq	r5, #1
 8006cf8:	4663      	moveq	r3, ip
 8006cfa:	f023 0301 	bicne.w	r3, r3, #1
 8006cfe:	106a      	asrs	r2, r5, #1
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	07e9      	lsls	r1, r5, #31
 8006d04:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006d08:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006d0c:	bf48      	it	mi
 8006d0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006d12:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006d16:	461c      	mov	r4, r3
 8006d18:	e780      	b.n	8006c1c <__ieee754_sqrt+0x30>
 8006d1a:	0aca      	lsrs	r2, r1, #11
 8006d1c:	3815      	subs	r0, #21
 8006d1e:	0549      	lsls	r1, r1, #21
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d0fa      	beq.n	8006d1a <__ieee754_sqrt+0x12e>
 8006d24:	02d6      	lsls	r6, r2, #11
 8006d26:	d50a      	bpl.n	8006d3e <__ieee754_sqrt+0x152>
 8006d28:	f1c3 0420 	rsb	r4, r3, #32
 8006d2c:	fa21 f404 	lsr.w	r4, r1, r4
 8006d30:	1e5d      	subs	r5, r3, #1
 8006d32:	4099      	lsls	r1, r3
 8006d34:	4322      	orrs	r2, r4
 8006d36:	1b43      	subs	r3, r0, r5
 8006d38:	e78b      	b.n	8006c52 <__ieee754_sqrt+0x66>
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	e7f0      	b.n	8006d20 <__ieee754_sqrt+0x134>
 8006d3e:	0052      	lsls	r2, r2, #1
 8006d40:	3301      	adds	r3, #1
 8006d42:	e7ef      	b.n	8006d24 <__ieee754_sqrt+0x138>
 8006d44:	46a0      	mov	r8, r4
 8006d46:	e7bf      	b.n	8006cc8 <__ieee754_sqrt+0xdc>
 8006d48:	7ff00000 	.word	0x7ff00000
 8006d4c:	00000000 	.word	0x00000000

08006d50 <__kernel_cos>:
 8006d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	ec59 8b10 	vmov	r8, r9, d0
 8006d58:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006d5c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006d60:	ed2d 8b02 	vpush	{d8}
 8006d64:	eeb0 8a41 	vmov.f32	s16, s2
 8006d68:	eef0 8a61 	vmov.f32	s17, s3
 8006d6c:	da07      	bge.n	8006d7e <__kernel_cos+0x2e>
 8006d6e:	ee10 0a10 	vmov	r0, s0
 8006d72:	4649      	mov	r1, r9
 8006d74:	f7f9 ff10 	bl	8000b98 <__aeabi_d2iz>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f000 8089 	beq.w	8006e90 <__kernel_cos+0x140>
 8006d7e:	4642      	mov	r2, r8
 8006d80:	464b      	mov	r3, r9
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 fc57 	bl	8000638 <__aeabi_dmul>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4b4e      	ldr	r3, [pc, #312]	; (8006ec8 <__kernel_cos+0x178>)
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	f7f9 fc51 	bl	8000638 <__aeabi_dmul>
 8006d96:	a340      	add	r3, pc, #256	; (adr r3, 8006e98 <__kernel_cos+0x148>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	468b      	mov	fp, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fc48 	bl	8000638 <__aeabi_dmul>
 8006da8:	a33d      	add	r3, pc, #244	; (adr r3, 8006ea0 <__kernel_cos+0x150>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fa8d 	bl	80002cc <__adddf3>
 8006db2:	4622      	mov	r2, r4
 8006db4:	462b      	mov	r3, r5
 8006db6:	f7f9 fc3f 	bl	8000638 <__aeabi_dmul>
 8006dba:	a33b      	add	r3, pc, #236	; (adr r3, 8006ea8 <__kernel_cos+0x158>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fa82 	bl	80002c8 <__aeabi_dsub>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	462b      	mov	r3, r5
 8006dc8:	f7f9 fc36 	bl	8000638 <__aeabi_dmul>
 8006dcc:	a338      	add	r3, pc, #224	; (adr r3, 8006eb0 <__kernel_cos+0x160>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fa7b 	bl	80002cc <__adddf3>
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	f7f9 fc2d 	bl	8000638 <__aeabi_dmul>
 8006dde:	a336      	add	r3, pc, #216	; (adr r3, 8006eb8 <__kernel_cos+0x168>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fa70 	bl	80002c8 <__aeabi_dsub>
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	f7f9 fc24 	bl	8000638 <__aeabi_dmul>
 8006df0:	a333      	add	r3, pc, #204	; (adr r3, 8006ec0 <__kernel_cos+0x170>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fa69 	bl	80002cc <__adddf3>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	f7f9 fc1b 	bl	8000638 <__aeabi_dmul>
 8006e02:	4622      	mov	r2, r4
 8006e04:	462b      	mov	r3, r5
 8006e06:	f7f9 fc17 	bl	8000638 <__aeabi_dmul>
 8006e0a:	ec53 2b18 	vmov	r2, r3, d8
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460d      	mov	r5, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fc0f 	bl	8000638 <__aeabi_dmul>
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7f9 fa51 	bl	80002c8 <__aeabi_dsub>
 8006e26:	4b29      	ldr	r3, [pc, #164]	; (8006ecc <__kernel_cos+0x17c>)
 8006e28:	429e      	cmp	r6, r3
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	4689      	mov	r9, r1
 8006e2e:	dc11      	bgt.n	8006e54 <__kernel_cos+0x104>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4650      	mov	r0, sl
 8006e36:	4659      	mov	r1, fp
 8006e38:	f7f9 fa46 	bl	80002c8 <__aeabi_dsub>
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4924      	ldr	r1, [pc, #144]	; (8006ed0 <__kernel_cos+0x180>)
 8006e40:	4602      	mov	r2, r0
 8006e42:	2000      	movs	r0, #0
 8006e44:	f7f9 fa40 	bl	80002c8 <__aeabi_dsub>
 8006e48:	ecbd 8b02 	vpop	{d8}
 8006e4c:	ec41 0b10 	vmov	d0, r0, r1
 8006e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	4b1f      	ldr	r3, [pc, #124]	; (8006ed4 <__kernel_cos+0x184>)
 8006e56:	491e      	ldr	r1, [pc, #120]	; (8006ed0 <__kernel_cos+0x180>)
 8006e58:	429e      	cmp	r6, r3
 8006e5a:	bfcc      	ite	gt
 8006e5c:	4d1e      	ldrgt	r5, [pc, #120]	; (8006ed8 <__kernel_cos+0x188>)
 8006e5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006e62:	2400      	movs	r4, #0
 8006e64:	4622      	mov	r2, r4
 8006e66:	462b      	mov	r3, r5
 8006e68:	2000      	movs	r0, #0
 8006e6a:	f7f9 fa2d 	bl	80002c8 <__aeabi_dsub>
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4606      	mov	r6, r0
 8006e72:	460f      	mov	r7, r1
 8006e74:	462b      	mov	r3, r5
 8006e76:	4650      	mov	r0, sl
 8006e78:	4659      	mov	r1, fp
 8006e7a:	f7f9 fa25 	bl	80002c8 <__aeabi_dsub>
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	f7f9 fa21 	bl	80002c8 <__aeabi_dsub>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	e7d9      	b.n	8006e44 <__kernel_cos+0xf4>
 8006e90:	2000      	movs	r0, #0
 8006e92:	490f      	ldr	r1, [pc, #60]	; (8006ed0 <__kernel_cos+0x180>)
 8006e94:	e7d8      	b.n	8006e48 <__kernel_cos+0xf8>
 8006e96:	bf00      	nop
 8006e98:	be8838d4 	.word	0xbe8838d4
 8006e9c:	bda8fae9 	.word	0xbda8fae9
 8006ea0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ea4:	3e21ee9e 	.word	0x3e21ee9e
 8006ea8:	809c52ad 	.word	0x809c52ad
 8006eac:	3e927e4f 	.word	0x3e927e4f
 8006eb0:	19cb1590 	.word	0x19cb1590
 8006eb4:	3efa01a0 	.word	0x3efa01a0
 8006eb8:	16c15177 	.word	0x16c15177
 8006ebc:	3f56c16c 	.word	0x3f56c16c
 8006ec0:	5555554c 	.word	0x5555554c
 8006ec4:	3fa55555 	.word	0x3fa55555
 8006ec8:	3fe00000 	.word	0x3fe00000
 8006ecc:	3fd33332 	.word	0x3fd33332
 8006ed0:	3ff00000 	.word	0x3ff00000
 8006ed4:	3fe90000 	.word	0x3fe90000
 8006ed8:	3fd20000 	.word	0x3fd20000
 8006edc:	00000000 	.word	0x00000000

08006ee0 <__kernel_rem_pio2>:
 8006ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	ed2d 8b02 	vpush	{d8}
 8006ee8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006eec:	1ed4      	subs	r4, r2, #3
 8006eee:	9308      	str	r3, [sp, #32]
 8006ef0:	9101      	str	r1, [sp, #4]
 8006ef2:	4bc5      	ldr	r3, [pc, #788]	; (8007208 <__kernel_rem_pio2+0x328>)
 8006ef4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006ef6:	9009      	str	r0, [sp, #36]	; 0x24
 8006ef8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	9b08      	ldr	r3, [sp, #32]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	9307      	str	r3, [sp, #28]
 8006f04:	2318      	movs	r3, #24
 8006f06:	fb94 f4f3 	sdiv	r4, r4, r3
 8006f0a:	f06f 0317 	mvn.w	r3, #23
 8006f0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006f12:	fb04 3303 	mla	r3, r4, r3, r3
 8006f16:	eb03 0a02 	add.w	sl, r3, r2
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	9a07      	ldr	r2, [sp, #28]
 8006f1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80071f8 <__kernel_rem_pio2+0x318>
 8006f22:	eb03 0802 	add.w	r8, r3, r2
 8006f26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006f28:	1aa7      	subs	r7, r4, r2
 8006f2a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006f2e:	ae22      	add	r6, sp, #136	; 0x88
 8006f30:	2500      	movs	r5, #0
 8006f32:	4545      	cmp	r5, r8
 8006f34:	dd13      	ble.n	8006f5e <__kernel_rem_pio2+0x7e>
 8006f36:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80071f8 <__kernel_rem_pio2+0x318>
 8006f3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006f3e:	2600      	movs	r6, #0
 8006f40:	9b04      	ldr	r3, [sp, #16]
 8006f42:	429e      	cmp	r6, r3
 8006f44:	dc32      	bgt.n	8006fac <__kernel_rem_pio2+0xcc>
 8006f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f48:	9302      	str	r3, [sp, #8]
 8006f4a:	9b08      	ldr	r3, [sp, #32]
 8006f4c:	199d      	adds	r5, r3, r6
 8006f4e:	ab22      	add	r3, sp, #136	; 0x88
 8006f50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	ec59 8b18 	vmov	r8, r9, d8
 8006f5a:	2700      	movs	r7, #0
 8006f5c:	e01f      	b.n	8006f9e <__kernel_rem_pio2+0xbe>
 8006f5e:	42ef      	cmn	r7, r5
 8006f60:	d407      	bmi.n	8006f72 <__kernel_rem_pio2+0x92>
 8006f62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006f66:	f7f9 fafd 	bl	8000564 <__aeabi_i2d>
 8006f6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006f6e:	3501      	adds	r5, #1
 8006f70:	e7df      	b.n	8006f32 <__kernel_rem_pio2+0x52>
 8006f72:	ec51 0b18 	vmov	r0, r1, d8
 8006f76:	e7f8      	b.n	8006f6a <__kernel_rem_pio2+0x8a>
 8006f78:	9906      	ldr	r1, [sp, #24]
 8006f7a:	9d02      	ldr	r5, [sp, #8]
 8006f7c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006f80:	9106      	str	r1, [sp, #24]
 8006f82:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006f86:	9502      	str	r5, [sp, #8]
 8006f88:	f7f9 fb56 	bl	8000638 <__aeabi_dmul>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4640      	mov	r0, r8
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7f9 f99a 	bl	80002cc <__adddf3>
 8006f98:	3701      	adds	r7, #1
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	4689      	mov	r9, r1
 8006f9e:	9b07      	ldr	r3, [sp, #28]
 8006fa0:	429f      	cmp	r7, r3
 8006fa2:	dde9      	ble.n	8006f78 <__kernel_rem_pio2+0x98>
 8006fa4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006fa8:	3601      	adds	r6, #1
 8006faa:	e7c9      	b.n	8006f40 <__kernel_rem_pio2+0x60>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	aa0e      	add	r2, sp, #56	; 0x38
 8006fb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fb4:	930c      	str	r3, [sp, #48]	; 0x30
 8006fb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006fb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006fbc:	9c04      	ldr	r4, [sp, #16]
 8006fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fc0:	ab9a      	add	r3, sp, #616	; 0x268
 8006fc2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006fc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006fd2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006fd6:	ab9a      	add	r3, sp, #616	; 0x268
 8006fd8:	445b      	add	r3, fp
 8006fda:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006fde:	2500      	movs	r5, #0
 8006fe0:	1b63      	subs	r3, r4, r5
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dc78      	bgt.n	80070d8 <__kernel_rem_pio2+0x1f8>
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	ec49 8b10 	vmov	d0, r8, r9
 8006fec:	f000 fc98 	bl	8007920 <scalbn>
 8006ff0:	ec57 6b10 	vmov	r6, r7, d0
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006ffa:	ee10 0a10 	vmov	r0, s0
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7f9 fb1a 	bl	8000638 <__aeabi_dmul>
 8007004:	ec41 0b10 	vmov	d0, r0, r1
 8007008:	f000 fb76 	bl	80076f8 <floor>
 800700c:	2200      	movs	r2, #0
 800700e:	ec51 0b10 	vmov	r0, r1, d0
 8007012:	4b7e      	ldr	r3, [pc, #504]	; (800720c <__kernel_rem_pio2+0x32c>)
 8007014:	f7f9 fb10 	bl	8000638 <__aeabi_dmul>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4630      	mov	r0, r6
 800701e:	4639      	mov	r1, r7
 8007020:	f7f9 f952 	bl	80002c8 <__aeabi_dsub>
 8007024:	460f      	mov	r7, r1
 8007026:	4606      	mov	r6, r0
 8007028:	f7f9 fdb6 	bl	8000b98 <__aeabi_d2iz>
 800702c:	9006      	str	r0, [sp, #24]
 800702e:	f7f9 fa99 	bl	8000564 <__aeabi_i2d>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	f7f9 f945 	bl	80002c8 <__aeabi_dsub>
 800703e:	f1ba 0f00 	cmp.w	sl, #0
 8007042:	4606      	mov	r6, r0
 8007044:	460f      	mov	r7, r1
 8007046:	dd6c      	ble.n	8007122 <__kernel_rem_pio2+0x242>
 8007048:	1e62      	subs	r2, r4, #1
 800704a:	ab0e      	add	r3, sp, #56	; 0x38
 800704c:	f1ca 0118 	rsb	r1, sl, #24
 8007050:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007054:	9d06      	ldr	r5, [sp, #24]
 8007056:	fa40 f301 	asr.w	r3, r0, r1
 800705a:	441d      	add	r5, r3
 800705c:	408b      	lsls	r3, r1
 800705e:	1ac0      	subs	r0, r0, r3
 8007060:	ab0e      	add	r3, sp, #56	; 0x38
 8007062:	9506      	str	r5, [sp, #24]
 8007064:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007068:	f1ca 0317 	rsb	r3, sl, #23
 800706c:	fa40 f303 	asr.w	r3, r0, r3
 8007070:	9302      	str	r3, [sp, #8]
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	dd62      	ble.n	800713e <__kernel_rem_pio2+0x25e>
 8007078:	9b06      	ldr	r3, [sp, #24]
 800707a:	2200      	movs	r2, #0
 800707c:	3301      	adds	r3, #1
 800707e:	9306      	str	r3, [sp, #24]
 8007080:	4615      	mov	r5, r2
 8007082:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007086:	4294      	cmp	r4, r2
 8007088:	f300 8095 	bgt.w	80071b6 <__kernel_rem_pio2+0x2d6>
 800708c:	f1ba 0f00 	cmp.w	sl, #0
 8007090:	dd07      	ble.n	80070a2 <__kernel_rem_pio2+0x1c2>
 8007092:	f1ba 0f01 	cmp.w	sl, #1
 8007096:	f000 80a2 	beq.w	80071de <__kernel_rem_pio2+0x2fe>
 800709a:	f1ba 0f02 	cmp.w	sl, #2
 800709e:	f000 80c1 	beq.w	8007224 <__kernel_rem_pio2+0x344>
 80070a2:	9b02      	ldr	r3, [sp, #8]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d14a      	bne.n	800713e <__kernel_rem_pio2+0x25e>
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	2000      	movs	r0, #0
 80070ae:	4958      	ldr	r1, [pc, #352]	; (8007210 <__kernel_rem_pio2+0x330>)
 80070b0:	f7f9 f90a 	bl	80002c8 <__aeabi_dsub>
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	d040      	beq.n	800713e <__kernel_rem_pio2+0x25e>
 80070bc:	4650      	mov	r0, sl
 80070be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007200 <__kernel_rem_pio2+0x320>
 80070c2:	f000 fc2d 	bl	8007920 <scalbn>
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	ec53 2b10 	vmov	r2, r3, d0
 80070ce:	f7f9 f8fb 	bl	80002c8 <__aeabi_dsub>
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	e032      	b.n	800713e <__kernel_rem_pio2+0x25e>
 80070d8:	2200      	movs	r2, #0
 80070da:	4b4e      	ldr	r3, [pc, #312]	; (8007214 <__kernel_rem_pio2+0x334>)
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 faaa 	bl	8000638 <__aeabi_dmul>
 80070e4:	f7f9 fd58 	bl	8000b98 <__aeabi_d2iz>
 80070e8:	f7f9 fa3c 	bl	8000564 <__aeabi_i2d>
 80070ec:	2200      	movs	r2, #0
 80070ee:	4b4a      	ldr	r3, [pc, #296]	; (8007218 <__kernel_rem_pio2+0x338>)
 80070f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f4:	f7f9 faa0 	bl	8000638 <__aeabi_dmul>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4640      	mov	r0, r8
 80070fe:	4649      	mov	r1, r9
 8007100:	f7f9 f8e2 	bl	80002c8 <__aeabi_dsub>
 8007104:	f7f9 fd48 	bl	8000b98 <__aeabi_d2iz>
 8007108:	ab0e      	add	r3, sp, #56	; 0x38
 800710a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800710e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007116:	f7f9 f8d9 	bl	80002cc <__adddf3>
 800711a:	3501      	adds	r5, #1
 800711c:	4680      	mov	r8, r0
 800711e:	4689      	mov	r9, r1
 8007120:	e75e      	b.n	8006fe0 <__kernel_rem_pio2+0x100>
 8007122:	d105      	bne.n	8007130 <__kernel_rem_pio2+0x250>
 8007124:	1e63      	subs	r3, r4, #1
 8007126:	aa0e      	add	r2, sp, #56	; 0x38
 8007128:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800712c:	15c3      	asrs	r3, r0, #23
 800712e:	e79f      	b.n	8007070 <__kernel_rem_pio2+0x190>
 8007130:	2200      	movs	r2, #0
 8007132:	4b3a      	ldr	r3, [pc, #232]	; (800721c <__kernel_rem_pio2+0x33c>)
 8007134:	f7f9 fd06 	bl	8000b44 <__aeabi_dcmpge>
 8007138:	2800      	cmp	r0, #0
 800713a:	d139      	bne.n	80071b0 <__kernel_rem_pio2+0x2d0>
 800713c:	9002      	str	r0, [sp, #8]
 800713e:	2200      	movs	r2, #0
 8007140:	2300      	movs	r3, #0
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 fcdf 	bl	8000b08 <__aeabi_dcmpeq>
 800714a:	2800      	cmp	r0, #0
 800714c:	f000 80c7 	beq.w	80072de <__kernel_rem_pio2+0x3fe>
 8007150:	1e65      	subs	r5, r4, #1
 8007152:	462b      	mov	r3, r5
 8007154:	2200      	movs	r2, #0
 8007156:	9904      	ldr	r1, [sp, #16]
 8007158:	428b      	cmp	r3, r1
 800715a:	da6a      	bge.n	8007232 <__kernel_rem_pio2+0x352>
 800715c:	2a00      	cmp	r2, #0
 800715e:	f000 8088 	beq.w	8007272 <__kernel_rem_pio2+0x392>
 8007162:	ab0e      	add	r3, sp, #56	; 0x38
 8007164:	f1aa 0a18 	sub.w	sl, sl, #24
 8007168:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80b4 	beq.w	80072da <__kernel_rem_pio2+0x3fa>
 8007172:	4650      	mov	r0, sl
 8007174:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007200 <__kernel_rem_pio2+0x320>
 8007178:	f000 fbd2 	bl	8007920 <scalbn>
 800717c:	00ec      	lsls	r4, r5, #3
 800717e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007180:	191e      	adds	r6, r3, r4
 8007182:	ec59 8b10 	vmov	r8, r9, d0
 8007186:	f106 0a08 	add.w	sl, r6, #8
 800718a:	462f      	mov	r7, r5
 800718c:	2f00      	cmp	r7, #0
 800718e:	f280 80df 	bge.w	8007350 <__kernel_rem_pio2+0x470>
 8007192:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80071f8 <__kernel_rem_pio2+0x318>
 8007196:	f04f 0a00 	mov.w	sl, #0
 800719a:	eba5 030a 	sub.w	r3, r5, sl
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f2c0 810a 	blt.w	80073b8 <__kernel_rem_pio2+0x4d8>
 80071a4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007220 <__kernel_rem_pio2+0x340>
 80071a8:	ec59 8b18 	vmov	r8, r9, d8
 80071ac:	2700      	movs	r7, #0
 80071ae:	e0f5      	b.n	800739c <__kernel_rem_pio2+0x4bc>
 80071b0:	2302      	movs	r3, #2
 80071b2:	9302      	str	r3, [sp, #8]
 80071b4:	e760      	b.n	8007078 <__kernel_rem_pio2+0x198>
 80071b6:	ab0e      	add	r3, sp, #56	; 0x38
 80071b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071bc:	b94d      	cbnz	r5, 80071d2 <__kernel_rem_pio2+0x2f2>
 80071be:	b12b      	cbz	r3, 80071cc <__kernel_rem_pio2+0x2ec>
 80071c0:	a80e      	add	r0, sp, #56	; 0x38
 80071c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80071c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80071ca:	2301      	movs	r3, #1
 80071cc:	3201      	adds	r2, #1
 80071ce:	461d      	mov	r5, r3
 80071d0:	e759      	b.n	8007086 <__kernel_rem_pio2+0x1a6>
 80071d2:	a80e      	add	r0, sp, #56	; 0x38
 80071d4:	1acb      	subs	r3, r1, r3
 80071d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80071da:	462b      	mov	r3, r5
 80071dc:	e7f6      	b.n	80071cc <__kernel_rem_pio2+0x2ec>
 80071de:	1e62      	subs	r2, r4, #1
 80071e0:	ab0e      	add	r3, sp, #56	; 0x38
 80071e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80071ea:	a90e      	add	r1, sp, #56	; 0x38
 80071ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80071f0:	e757      	b.n	80070a2 <__kernel_rem_pio2+0x1c2>
 80071f2:	bf00      	nop
 80071f4:	f3af 8000 	nop.w
	...
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	08007e28 	.word	0x08007e28
 800720c:	40200000 	.word	0x40200000
 8007210:	3ff00000 	.word	0x3ff00000
 8007214:	3e700000 	.word	0x3e700000
 8007218:	41700000 	.word	0x41700000
 800721c:	3fe00000 	.word	0x3fe00000
 8007220:	08007de8 	.word	0x08007de8
 8007224:	1e62      	subs	r2, r4, #1
 8007226:	ab0e      	add	r3, sp, #56	; 0x38
 8007228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007230:	e7db      	b.n	80071ea <__kernel_rem_pio2+0x30a>
 8007232:	a90e      	add	r1, sp, #56	; 0x38
 8007234:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007238:	3b01      	subs	r3, #1
 800723a:	430a      	orrs	r2, r1
 800723c:	e78b      	b.n	8007156 <__kernel_rem_pio2+0x276>
 800723e:	3301      	adds	r3, #1
 8007240:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007244:	2900      	cmp	r1, #0
 8007246:	d0fa      	beq.n	800723e <__kernel_rem_pio2+0x35e>
 8007248:	9a08      	ldr	r2, [sp, #32]
 800724a:	4422      	add	r2, r4
 800724c:	00d2      	lsls	r2, r2, #3
 800724e:	a922      	add	r1, sp, #136	; 0x88
 8007250:	18e3      	adds	r3, r4, r3
 8007252:	9206      	str	r2, [sp, #24]
 8007254:	440a      	add	r2, r1
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	f10b 0108 	add.w	r1, fp, #8
 800725c:	f102 0308 	add.w	r3, r2, #8
 8007260:	1c66      	adds	r6, r4, #1
 8007262:	910a      	str	r1, [sp, #40]	; 0x28
 8007264:	2500      	movs	r5, #0
 8007266:	930d      	str	r3, [sp, #52]	; 0x34
 8007268:	9b02      	ldr	r3, [sp, #8]
 800726a:	42b3      	cmp	r3, r6
 800726c:	da04      	bge.n	8007278 <__kernel_rem_pio2+0x398>
 800726e:	461c      	mov	r4, r3
 8007270:	e6a6      	b.n	8006fc0 <__kernel_rem_pio2+0xe0>
 8007272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007274:	2301      	movs	r3, #1
 8007276:	e7e3      	b.n	8007240 <__kernel_rem_pio2+0x360>
 8007278:	9b06      	ldr	r3, [sp, #24]
 800727a:	18ef      	adds	r7, r5, r3
 800727c:	ab22      	add	r3, sp, #136	; 0x88
 800727e:	441f      	add	r7, r3
 8007280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007282:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007286:	f7f9 f96d 	bl	8000564 <__aeabi_i2d>
 800728a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728c:	461c      	mov	r4, r3
 800728e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007290:	e9c7 0100 	strd	r0, r1, [r7]
 8007294:	eb03 0b05 	add.w	fp, r3, r5
 8007298:	2700      	movs	r7, #0
 800729a:	f04f 0800 	mov.w	r8, #0
 800729e:	f04f 0900 	mov.w	r9, #0
 80072a2:	9b07      	ldr	r3, [sp, #28]
 80072a4:	429f      	cmp	r7, r3
 80072a6:	dd08      	ble.n	80072ba <__kernel_rem_pio2+0x3da>
 80072a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072aa:	aa72      	add	r2, sp, #456	; 0x1c8
 80072ac:	18eb      	adds	r3, r5, r3
 80072ae:	4413      	add	r3, r2
 80072b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80072b4:	3601      	adds	r6, #1
 80072b6:	3508      	adds	r5, #8
 80072b8:	e7d6      	b.n	8007268 <__kernel_rem_pio2+0x388>
 80072ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80072be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80072c2:	f7f9 f9b9 	bl	8000638 <__aeabi_dmul>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	f7f8 fffd 	bl	80002cc <__adddf3>
 80072d2:	3701      	adds	r7, #1
 80072d4:	4680      	mov	r8, r0
 80072d6:	4689      	mov	r9, r1
 80072d8:	e7e3      	b.n	80072a2 <__kernel_rem_pio2+0x3c2>
 80072da:	3d01      	subs	r5, #1
 80072dc:	e741      	b.n	8007162 <__kernel_rem_pio2+0x282>
 80072de:	f1ca 0000 	rsb	r0, sl, #0
 80072e2:	ec47 6b10 	vmov	d0, r6, r7
 80072e6:	f000 fb1b 	bl	8007920 <scalbn>
 80072ea:	ec57 6b10 	vmov	r6, r7, d0
 80072ee:	2200      	movs	r2, #0
 80072f0:	4b99      	ldr	r3, [pc, #612]	; (8007558 <__kernel_rem_pio2+0x678>)
 80072f2:	ee10 0a10 	vmov	r0, s0
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f9 fc24 	bl	8000b44 <__aeabi_dcmpge>
 80072fc:	b1f8      	cbz	r0, 800733e <__kernel_rem_pio2+0x45e>
 80072fe:	2200      	movs	r2, #0
 8007300:	4b96      	ldr	r3, [pc, #600]	; (800755c <__kernel_rem_pio2+0x67c>)
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f9 f997 	bl	8000638 <__aeabi_dmul>
 800730a:	f7f9 fc45 	bl	8000b98 <__aeabi_d2iz>
 800730e:	4680      	mov	r8, r0
 8007310:	f7f9 f928 	bl	8000564 <__aeabi_i2d>
 8007314:	2200      	movs	r2, #0
 8007316:	4b90      	ldr	r3, [pc, #576]	; (8007558 <__kernel_rem_pio2+0x678>)
 8007318:	f7f9 f98e 	bl	8000638 <__aeabi_dmul>
 800731c:	460b      	mov	r3, r1
 800731e:	4602      	mov	r2, r0
 8007320:	4639      	mov	r1, r7
 8007322:	4630      	mov	r0, r6
 8007324:	f7f8 ffd0 	bl	80002c8 <__aeabi_dsub>
 8007328:	f7f9 fc36 	bl	8000b98 <__aeabi_d2iz>
 800732c:	1c65      	adds	r5, r4, #1
 800732e:	ab0e      	add	r3, sp, #56	; 0x38
 8007330:	f10a 0a18 	add.w	sl, sl, #24
 8007334:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007338:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800733c:	e719      	b.n	8007172 <__kernel_rem_pio2+0x292>
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f9 fc29 	bl	8000b98 <__aeabi_d2iz>
 8007346:	ab0e      	add	r3, sp, #56	; 0x38
 8007348:	4625      	mov	r5, r4
 800734a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800734e:	e710      	b.n	8007172 <__kernel_rem_pio2+0x292>
 8007350:	ab0e      	add	r3, sp, #56	; 0x38
 8007352:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007356:	f7f9 f905 	bl	8000564 <__aeabi_i2d>
 800735a:	4642      	mov	r2, r8
 800735c:	464b      	mov	r3, r9
 800735e:	f7f9 f96b 	bl	8000638 <__aeabi_dmul>
 8007362:	2200      	movs	r2, #0
 8007364:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007368:	4b7c      	ldr	r3, [pc, #496]	; (800755c <__kernel_rem_pio2+0x67c>)
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	f7f9 f963 	bl	8000638 <__aeabi_dmul>
 8007372:	3f01      	subs	r7, #1
 8007374:	4680      	mov	r8, r0
 8007376:	4689      	mov	r9, r1
 8007378:	e708      	b.n	800718c <__kernel_rem_pio2+0x2ac>
 800737a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007386:	f7f9 f957 	bl	8000638 <__aeabi_dmul>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4640      	mov	r0, r8
 8007390:	4649      	mov	r1, r9
 8007392:	f7f8 ff9b 	bl	80002cc <__adddf3>
 8007396:	3701      	adds	r7, #1
 8007398:	4680      	mov	r8, r0
 800739a:	4689      	mov	r9, r1
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	429f      	cmp	r7, r3
 80073a0:	dc01      	bgt.n	80073a6 <__kernel_rem_pio2+0x4c6>
 80073a2:	45ba      	cmp	sl, r7
 80073a4:	dae9      	bge.n	800737a <__kernel_rem_pio2+0x49a>
 80073a6:	ab4a      	add	r3, sp, #296	; 0x128
 80073a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073ac:	e9c3 8900 	strd	r8, r9, [r3]
 80073b0:	f10a 0a01 	add.w	sl, sl, #1
 80073b4:	3e08      	subs	r6, #8
 80073b6:	e6f0      	b.n	800719a <__kernel_rem_pio2+0x2ba>
 80073b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d85b      	bhi.n	8007476 <__kernel_rem_pio2+0x596>
 80073be:	e8df f003 	tbb	[pc, r3]
 80073c2:	264a      	.short	0x264a
 80073c4:	0226      	.short	0x0226
 80073c6:	ab9a      	add	r3, sp, #616	; 0x268
 80073c8:	441c      	add	r4, r3
 80073ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80073ce:	46a2      	mov	sl, r4
 80073d0:	46ab      	mov	fp, r5
 80073d2:	f1bb 0f00 	cmp.w	fp, #0
 80073d6:	dc6c      	bgt.n	80074b2 <__kernel_rem_pio2+0x5d2>
 80073d8:	46a2      	mov	sl, r4
 80073da:	46ab      	mov	fp, r5
 80073dc:	f1bb 0f01 	cmp.w	fp, #1
 80073e0:	f300 8086 	bgt.w	80074f0 <__kernel_rem_pio2+0x610>
 80073e4:	2000      	movs	r0, #0
 80073e6:	2100      	movs	r1, #0
 80073e8:	2d01      	cmp	r5, #1
 80073ea:	f300 80a0 	bgt.w	800752e <__kernel_rem_pio2+0x64e>
 80073ee:	9b02      	ldr	r3, [sp, #8]
 80073f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80073f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 809e 	bne.w	800753a <__kernel_rem_pio2+0x65a>
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	e9c3 7800 	strd	r7, r8, [r3]
 8007404:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007408:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800740c:	e033      	b.n	8007476 <__kernel_rem_pio2+0x596>
 800740e:	3408      	adds	r4, #8
 8007410:	ab4a      	add	r3, sp, #296	; 0x128
 8007412:	441c      	add	r4, r3
 8007414:	462e      	mov	r6, r5
 8007416:	2000      	movs	r0, #0
 8007418:	2100      	movs	r1, #0
 800741a:	2e00      	cmp	r6, #0
 800741c:	da3a      	bge.n	8007494 <__kernel_rem_pio2+0x5b4>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d03d      	beq.n	80074a0 <__kernel_rem_pio2+0x5c0>
 8007424:	4602      	mov	r2, r0
 8007426:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800742a:	9c01      	ldr	r4, [sp, #4]
 800742c:	e9c4 2300 	strd	r2, r3, [r4]
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007438:	f7f8 ff46 	bl	80002c8 <__aeabi_dsub>
 800743c:	ae4c      	add	r6, sp, #304	; 0x130
 800743e:	2401      	movs	r4, #1
 8007440:	42a5      	cmp	r5, r4
 8007442:	da30      	bge.n	80074a6 <__kernel_rem_pio2+0x5c6>
 8007444:	9b02      	ldr	r3, [sp, #8]
 8007446:	b113      	cbz	r3, 800744e <__kernel_rem_pio2+0x56e>
 8007448:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800744c:	4619      	mov	r1, r3
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007454:	e00f      	b.n	8007476 <__kernel_rem_pio2+0x596>
 8007456:	ab9a      	add	r3, sp, #616	; 0x268
 8007458:	441c      	add	r4, r3
 800745a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800745e:	2000      	movs	r0, #0
 8007460:	2100      	movs	r1, #0
 8007462:	2d00      	cmp	r5, #0
 8007464:	da10      	bge.n	8007488 <__kernel_rem_pio2+0x5a8>
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	b113      	cbz	r3, 8007470 <__kernel_rem_pio2+0x590>
 800746a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800746e:	4619      	mov	r1, r3
 8007470:	9b01      	ldr	r3, [sp, #4]
 8007472:	e9c3 0100 	strd	r0, r1, [r3]
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	f003 0007 	and.w	r0, r3, #7
 800747c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007480:	ecbd 8b02 	vpop	{d8}
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800748c:	f7f8 ff1e 	bl	80002cc <__adddf3>
 8007490:	3d01      	subs	r5, #1
 8007492:	e7e6      	b.n	8007462 <__kernel_rem_pio2+0x582>
 8007494:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007498:	f7f8 ff18 	bl	80002cc <__adddf3>
 800749c:	3e01      	subs	r6, #1
 800749e:	e7bc      	b.n	800741a <__kernel_rem_pio2+0x53a>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	e7c1      	b.n	800742a <__kernel_rem_pio2+0x54a>
 80074a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80074aa:	f7f8 ff0f 	bl	80002cc <__adddf3>
 80074ae:	3401      	adds	r4, #1
 80074b0:	e7c6      	b.n	8007440 <__kernel_rem_pio2+0x560>
 80074b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80074b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80074ba:	4640      	mov	r0, r8
 80074bc:	ec53 2b17 	vmov	r2, r3, d7
 80074c0:	4649      	mov	r1, r9
 80074c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074c6:	f7f8 ff01 	bl	80002cc <__adddf3>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4606      	mov	r6, r0
 80074d0:	460f      	mov	r7, r1
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	f7f8 fef7 	bl	80002c8 <__aeabi_dsub>
 80074da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074de:	f7f8 fef5 	bl	80002cc <__adddf3>
 80074e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074e6:	e9ca 0100 	strd	r0, r1, [sl]
 80074ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80074ee:	e770      	b.n	80073d2 <__kernel_rem_pio2+0x4f2>
 80074f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80074f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80074f8:	4630      	mov	r0, r6
 80074fa:	ec53 2b17 	vmov	r2, r3, d7
 80074fe:	4639      	mov	r1, r7
 8007500:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007504:	f7f8 fee2 	bl	80002cc <__adddf3>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4680      	mov	r8, r0
 800750e:	4689      	mov	r9, r1
 8007510:	4630      	mov	r0, r6
 8007512:	4639      	mov	r1, r7
 8007514:	f7f8 fed8 	bl	80002c8 <__aeabi_dsub>
 8007518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800751c:	f7f8 fed6 	bl	80002cc <__adddf3>
 8007520:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007524:	e9ca 0100 	strd	r0, r1, [sl]
 8007528:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800752c:	e756      	b.n	80073dc <__kernel_rem_pio2+0x4fc>
 800752e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007532:	f7f8 fecb 	bl	80002cc <__adddf3>
 8007536:	3d01      	subs	r5, #1
 8007538:	e756      	b.n	80073e8 <__kernel_rem_pio2+0x508>
 800753a:	9b01      	ldr	r3, [sp, #4]
 800753c:	9a01      	ldr	r2, [sp, #4]
 800753e:	601f      	str	r7, [r3, #0]
 8007540:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007544:	605c      	str	r4, [r3, #4]
 8007546:	609d      	str	r5, [r3, #8]
 8007548:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800754c:	60d3      	str	r3, [r2, #12]
 800754e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007552:	6110      	str	r0, [r2, #16]
 8007554:	6153      	str	r3, [r2, #20]
 8007556:	e78e      	b.n	8007476 <__kernel_rem_pio2+0x596>
 8007558:	41700000 	.word	0x41700000
 800755c:	3e700000 	.word	0x3e700000

08007560 <__kernel_sin>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	ec55 4b10 	vmov	r4, r5, d0
 8007568:	b085      	sub	sp, #20
 800756a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800756e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007572:	ed8d 1b00 	vstr	d1, [sp]
 8007576:	9002      	str	r0, [sp, #8]
 8007578:	da06      	bge.n	8007588 <__kernel_sin+0x28>
 800757a:	ee10 0a10 	vmov	r0, s0
 800757e:	4629      	mov	r1, r5
 8007580:	f7f9 fb0a 	bl	8000b98 <__aeabi_d2iz>
 8007584:	2800      	cmp	r0, #0
 8007586:	d051      	beq.n	800762c <__kernel_sin+0xcc>
 8007588:	4622      	mov	r2, r4
 800758a:	462b      	mov	r3, r5
 800758c:	4620      	mov	r0, r4
 800758e:	4629      	mov	r1, r5
 8007590:	f7f9 f852 	bl	8000638 <__aeabi_dmul>
 8007594:	4682      	mov	sl, r0
 8007596:	468b      	mov	fp, r1
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f9 f84a 	bl	8000638 <__aeabi_dmul>
 80075a4:	a341      	add	r3, pc, #260	; (adr r3, 80076ac <__kernel_sin+0x14c>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	4680      	mov	r8, r0
 80075ac:	4689      	mov	r9, r1
 80075ae:	4650      	mov	r0, sl
 80075b0:	4659      	mov	r1, fp
 80075b2:	f7f9 f841 	bl	8000638 <__aeabi_dmul>
 80075b6:	a33f      	add	r3, pc, #252	; (adr r3, 80076b4 <__kernel_sin+0x154>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 fe84 	bl	80002c8 <__aeabi_dsub>
 80075c0:	4652      	mov	r2, sl
 80075c2:	465b      	mov	r3, fp
 80075c4:	f7f9 f838 	bl	8000638 <__aeabi_dmul>
 80075c8:	a33c      	add	r3, pc, #240	; (adr r3, 80076bc <__kernel_sin+0x15c>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f8 fe7d 	bl	80002cc <__adddf3>
 80075d2:	4652      	mov	r2, sl
 80075d4:	465b      	mov	r3, fp
 80075d6:	f7f9 f82f 	bl	8000638 <__aeabi_dmul>
 80075da:	a33a      	add	r3, pc, #232	; (adr r3, 80076c4 <__kernel_sin+0x164>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f8 fe72 	bl	80002c8 <__aeabi_dsub>
 80075e4:	4652      	mov	r2, sl
 80075e6:	465b      	mov	r3, fp
 80075e8:	f7f9 f826 	bl	8000638 <__aeabi_dmul>
 80075ec:	a337      	add	r3, pc, #220	; (adr r3, 80076cc <__kernel_sin+0x16c>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fe6b 	bl	80002cc <__adddf3>
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	4606      	mov	r6, r0
 80075fa:	460f      	mov	r7, r1
 80075fc:	b9db      	cbnz	r3, 8007636 <__kernel_sin+0xd6>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4650      	mov	r0, sl
 8007604:	4659      	mov	r1, fp
 8007606:	f7f9 f817 	bl	8000638 <__aeabi_dmul>
 800760a:	a325      	add	r3, pc, #148	; (adr r3, 80076a0 <__kernel_sin+0x140>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fe5a 	bl	80002c8 <__aeabi_dsub>
 8007614:	4642      	mov	r2, r8
 8007616:	464b      	mov	r3, r9
 8007618:	f7f9 f80e 	bl	8000638 <__aeabi_dmul>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4620      	mov	r0, r4
 8007622:	4629      	mov	r1, r5
 8007624:	f7f8 fe52 	bl	80002cc <__adddf3>
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	ec45 4b10 	vmov	d0, r4, r5
 8007630:	b005      	add	sp, #20
 8007632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007636:	2200      	movs	r2, #0
 8007638:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <__kernel_sin+0x148>)
 800763a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800763e:	f7f8 fffb 	bl	8000638 <__aeabi_dmul>
 8007642:	4632      	mov	r2, r6
 8007644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007648:	463b      	mov	r3, r7
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	f7f8 fff3 	bl	8000638 <__aeabi_dmul>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800765a:	f7f8 fe35 	bl	80002c8 <__aeabi_dsub>
 800765e:	4652      	mov	r2, sl
 8007660:	465b      	mov	r3, fp
 8007662:	f7f8 ffe9 	bl	8000638 <__aeabi_dmul>
 8007666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766a:	f7f8 fe2d 	bl	80002c8 <__aeabi_dsub>
 800766e:	a30c      	add	r3, pc, #48	; (adr r3, 80076a0 <__kernel_sin+0x140>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	4606      	mov	r6, r0
 8007676:	460f      	mov	r7, r1
 8007678:	4640      	mov	r0, r8
 800767a:	4649      	mov	r1, r9
 800767c:	f7f8 ffdc 	bl	8000638 <__aeabi_dmul>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4630      	mov	r0, r6
 8007686:	4639      	mov	r1, r7
 8007688:	f7f8 fe20 	bl	80002cc <__adddf3>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4620      	mov	r0, r4
 8007692:	4629      	mov	r1, r5
 8007694:	f7f8 fe18 	bl	80002c8 <__aeabi_dsub>
 8007698:	e7c6      	b.n	8007628 <__kernel_sin+0xc8>
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w
 80076a0:	55555549 	.word	0x55555549
 80076a4:	3fc55555 	.word	0x3fc55555
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	5acfd57c 	.word	0x5acfd57c
 80076b0:	3de5d93a 	.word	0x3de5d93a
 80076b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80076b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80076bc:	57b1fe7d 	.word	0x57b1fe7d
 80076c0:	3ec71de3 	.word	0x3ec71de3
 80076c4:	19c161d5 	.word	0x19c161d5
 80076c8:	3f2a01a0 	.word	0x3f2a01a0
 80076cc:	1110f8a6 	.word	0x1110f8a6
 80076d0:	3f811111 	.word	0x3f811111

080076d4 <fabs>:
 80076d4:	ec51 0b10 	vmov	r0, r1, d0
 80076d8:	ee10 2a10 	vmov	r2, s0
 80076dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076e0:	ec43 2b10 	vmov	d0, r2, r3
 80076e4:	4770      	bx	lr

080076e6 <finite>:
 80076e6:	ee10 3a90 	vmov	r3, s1
 80076ea:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80076ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80076f2:	0fc0      	lsrs	r0, r0, #31
 80076f4:	4770      	bx	lr
	...

080076f8 <floor>:
 80076f8:	ec51 0b10 	vmov	r0, r1, d0
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007704:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007708:	2e13      	cmp	r6, #19
 800770a:	460c      	mov	r4, r1
 800770c:	ee10 5a10 	vmov	r5, s0
 8007710:	4680      	mov	r8, r0
 8007712:	dc34      	bgt.n	800777e <floor+0x86>
 8007714:	2e00      	cmp	r6, #0
 8007716:	da16      	bge.n	8007746 <floor+0x4e>
 8007718:	a335      	add	r3, pc, #212	; (adr r3, 80077f0 <floor+0xf8>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f7f8 fdd5 	bl	80002cc <__adddf3>
 8007722:	2200      	movs	r2, #0
 8007724:	2300      	movs	r3, #0
 8007726:	f7f9 fa17 	bl	8000b58 <__aeabi_dcmpgt>
 800772a:	b148      	cbz	r0, 8007740 <floor+0x48>
 800772c:	2c00      	cmp	r4, #0
 800772e:	da59      	bge.n	80077e4 <floor+0xec>
 8007730:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007734:	4a30      	ldr	r2, [pc, #192]	; (80077f8 <floor+0x100>)
 8007736:	432b      	orrs	r3, r5
 8007738:	2500      	movs	r5, #0
 800773a:	42ab      	cmp	r3, r5
 800773c:	bf18      	it	ne
 800773e:	4614      	movne	r4, r2
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	e025      	b.n	8007792 <floor+0x9a>
 8007746:	4f2d      	ldr	r7, [pc, #180]	; (80077fc <floor+0x104>)
 8007748:	4137      	asrs	r7, r6
 800774a:	ea01 0307 	and.w	r3, r1, r7
 800774e:	4303      	orrs	r3, r0
 8007750:	d01f      	beq.n	8007792 <floor+0x9a>
 8007752:	a327      	add	r3, pc, #156	; (adr r3, 80077f0 <floor+0xf8>)
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f7f8 fdb8 	bl	80002cc <__adddf3>
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	f7f9 f9fa 	bl	8000b58 <__aeabi_dcmpgt>
 8007764:	2800      	cmp	r0, #0
 8007766:	d0eb      	beq.n	8007740 <floor+0x48>
 8007768:	2c00      	cmp	r4, #0
 800776a:	bfbe      	ittt	lt
 800776c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007770:	fa43 f606 	asrlt.w	r6, r3, r6
 8007774:	19a4      	addlt	r4, r4, r6
 8007776:	ea24 0407 	bic.w	r4, r4, r7
 800777a:	2500      	movs	r5, #0
 800777c:	e7e0      	b.n	8007740 <floor+0x48>
 800777e:	2e33      	cmp	r6, #51	; 0x33
 8007780:	dd0b      	ble.n	800779a <floor+0xa2>
 8007782:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007786:	d104      	bne.n	8007792 <floor+0x9a>
 8007788:	ee10 2a10 	vmov	r2, s0
 800778c:	460b      	mov	r3, r1
 800778e:	f7f8 fd9d 	bl	80002cc <__adddf3>
 8007792:	ec41 0b10 	vmov	d0, r0, r1
 8007796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800779a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	fa23 f707 	lsr.w	r7, r3, r7
 80077a6:	4207      	tst	r7, r0
 80077a8:	d0f3      	beq.n	8007792 <floor+0x9a>
 80077aa:	a311      	add	r3, pc, #68	; (adr r3, 80077f0 <floor+0xf8>)
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f7f8 fd8c 	bl	80002cc <__adddf3>
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	f7f9 f9ce 	bl	8000b58 <__aeabi_dcmpgt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d0bf      	beq.n	8007740 <floor+0x48>
 80077c0:	2c00      	cmp	r4, #0
 80077c2:	da02      	bge.n	80077ca <floor+0xd2>
 80077c4:	2e14      	cmp	r6, #20
 80077c6:	d103      	bne.n	80077d0 <floor+0xd8>
 80077c8:	3401      	adds	r4, #1
 80077ca:	ea25 0507 	bic.w	r5, r5, r7
 80077ce:	e7b7      	b.n	8007740 <floor+0x48>
 80077d0:	2301      	movs	r3, #1
 80077d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80077d6:	fa03 f606 	lsl.w	r6, r3, r6
 80077da:	4435      	add	r5, r6
 80077dc:	4545      	cmp	r5, r8
 80077de:	bf38      	it	cc
 80077e0:	18e4      	addcc	r4, r4, r3
 80077e2:	e7f2      	b.n	80077ca <floor+0xd2>
 80077e4:	2500      	movs	r5, #0
 80077e6:	462c      	mov	r4, r5
 80077e8:	e7aa      	b.n	8007740 <floor+0x48>
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w
 80077f0:	8800759c 	.word	0x8800759c
 80077f4:	7e37e43c 	.word	0x7e37e43c
 80077f8:	bff00000 	.word	0xbff00000
 80077fc:	000fffff 	.word	0x000fffff

08007800 <matherr>:
 8007800:	2000      	movs	r0, #0
 8007802:	4770      	bx	lr
 8007804:	0000      	movs	r0, r0
	...

08007808 <nan>:
 8007808:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007810 <nan+0x8>
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	00000000 	.word	0x00000000
 8007814:	7ff80000 	.word	0x7ff80000

08007818 <rint>:
 8007818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800781a:	ec51 0b10 	vmov	r0, r1, d0
 800781e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007822:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007826:	2e13      	cmp	r6, #19
 8007828:	460b      	mov	r3, r1
 800782a:	ee10 4a10 	vmov	r4, s0
 800782e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007832:	dc56      	bgt.n	80078e2 <rint+0xca>
 8007834:	2e00      	cmp	r6, #0
 8007836:	da2b      	bge.n	8007890 <rint+0x78>
 8007838:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800783c:	4302      	orrs	r2, r0
 800783e:	d023      	beq.n	8007888 <rint+0x70>
 8007840:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007844:	4302      	orrs	r2, r0
 8007846:	4254      	negs	r4, r2
 8007848:	4314      	orrs	r4, r2
 800784a:	0c4b      	lsrs	r3, r1, #17
 800784c:	0b24      	lsrs	r4, r4, #12
 800784e:	045b      	lsls	r3, r3, #17
 8007850:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007854:	ea44 0103 	orr.w	r1, r4, r3
 8007858:	460b      	mov	r3, r1
 800785a:	492f      	ldr	r1, [pc, #188]	; (8007918 <rint+0x100>)
 800785c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007860:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007864:	4602      	mov	r2, r0
 8007866:	4639      	mov	r1, r7
 8007868:	4630      	mov	r0, r6
 800786a:	f7f8 fd2f 	bl	80002cc <__adddf3>
 800786e:	e9cd 0100 	strd	r0, r1, [sp]
 8007872:	463b      	mov	r3, r7
 8007874:	4632      	mov	r2, r6
 8007876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800787a:	f7f8 fd25 	bl	80002c8 <__aeabi_dsub>
 800787e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007882:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007886:	4639      	mov	r1, r7
 8007888:	ec41 0b10 	vmov	d0, r0, r1
 800788c:	b003      	add	sp, #12
 800788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007890:	4a22      	ldr	r2, [pc, #136]	; (800791c <rint+0x104>)
 8007892:	4132      	asrs	r2, r6
 8007894:	ea01 0702 	and.w	r7, r1, r2
 8007898:	4307      	orrs	r7, r0
 800789a:	d0f5      	beq.n	8007888 <rint+0x70>
 800789c:	0852      	lsrs	r2, r2, #1
 800789e:	4011      	ands	r1, r2
 80078a0:	430c      	orrs	r4, r1
 80078a2:	d00b      	beq.n	80078bc <rint+0xa4>
 80078a4:	ea23 0202 	bic.w	r2, r3, r2
 80078a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078ac:	2e13      	cmp	r6, #19
 80078ae:	fa43 f306 	asr.w	r3, r3, r6
 80078b2:	bf0c      	ite	eq
 80078b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80078b8:	2400      	movne	r4, #0
 80078ba:	4313      	orrs	r3, r2
 80078bc:	4916      	ldr	r1, [pc, #88]	; (8007918 <rint+0x100>)
 80078be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80078c2:	4622      	mov	r2, r4
 80078c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80078c8:	4620      	mov	r0, r4
 80078ca:	4629      	mov	r1, r5
 80078cc:	f7f8 fcfe 	bl	80002cc <__adddf3>
 80078d0:	e9cd 0100 	strd	r0, r1, [sp]
 80078d4:	4622      	mov	r2, r4
 80078d6:	462b      	mov	r3, r5
 80078d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078dc:	f7f8 fcf4 	bl	80002c8 <__aeabi_dsub>
 80078e0:	e7d2      	b.n	8007888 <rint+0x70>
 80078e2:	2e33      	cmp	r6, #51	; 0x33
 80078e4:	dd07      	ble.n	80078f6 <rint+0xde>
 80078e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80078ea:	d1cd      	bne.n	8007888 <rint+0x70>
 80078ec:	ee10 2a10 	vmov	r2, s0
 80078f0:	f7f8 fcec 	bl	80002cc <__adddf3>
 80078f4:	e7c8      	b.n	8007888 <rint+0x70>
 80078f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80078fa:	f04f 32ff 	mov.w	r2, #4294967295
 80078fe:	40f2      	lsrs	r2, r6
 8007900:	4210      	tst	r0, r2
 8007902:	d0c1      	beq.n	8007888 <rint+0x70>
 8007904:	0852      	lsrs	r2, r2, #1
 8007906:	4210      	tst	r0, r2
 8007908:	bf1f      	itttt	ne
 800790a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800790e:	ea20 0202 	bicne.w	r2, r0, r2
 8007912:	4134      	asrne	r4, r6
 8007914:	4314      	orrne	r4, r2
 8007916:	e7d1      	b.n	80078bc <rint+0xa4>
 8007918:	08007e38 	.word	0x08007e38
 800791c:	000fffff 	.word	0x000fffff

08007920 <scalbn>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	ec55 4b10 	vmov	r4, r5, d0
 8007926:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800792a:	4606      	mov	r6, r0
 800792c:	462b      	mov	r3, r5
 800792e:	b9aa      	cbnz	r2, 800795c <scalbn+0x3c>
 8007930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007934:	4323      	orrs	r3, r4
 8007936:	d03b      	beq.n	80079b0 <scalbn+0x90>
 8007938:	4b31      	ldr	r3, [pc, #196]	; (8007a00 <scalbn+0xe0>)
 800793a:	4629      	mov	r1, r5
 800793c:	2200      	movs	r2, #0
 800793e:	ee10 0a10 	vmov	r0, s0
 8007942:	f7f8 fe79 	bl	8000638 <__aeabi_dmul>
 8007946:	4b2f      	ldr	r3, [pc, #188]	; (8007a04 <scalbn+0xe4>)
 8007948:	429e      	cmp	r6, r3
 800794a:	4604      	mov	r4, r0
 800794c:	460d      	mov	r5, r1
 800794e:	da12      	bge.n	8007976 <scalbn+0x56>
 8007950:	a327      	add	r3, pc, #156	; (adr r3, 80079f0 <scalbn+0xd0>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fe6f 	bl	8000638 <__aeabi_dmul>
 800795a:	e009      	b.n	8007970 <scalbn+0x50>
 800795c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007960:	428a      	cmp	r2, r1
 8007962:	d10c      	bne.n	800797e <scalbn+0x5e>
 8007964:	ee10 2a10 	vmov	r2, s0
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fcae 	bl	80002cc <__adddf3>
 8007970:	4604      	mov	r4, r0
 8007972:	460d      	mov	r5, r1
 8007974:	e01c      	b.n	80079b0 <scalbn+0x90>
 8007976:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800797a:	460b      	mov	r3, r1
 800797c:	3a36      	subs	r2, #54	; 0x36
 800797e:	4432      	add	r2, r6
 8007980:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007984:	428a      	cmp	r2, r1
 8007986:	dd0b      	ble.n	80079a0 <scalbn+0x80>
 8007988:	ec45 4b11 	vmov	d1, r4, r5
 800798c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80079f8 <scalbn+0xd8>
 8007990:	f000 f83c 	bl	8007a0c <copysign>
 8007994:	a318      	add	r3, pc, #96	; (adr r3, 80079f8 <scalbn+0xd8>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	ec51 0b10 	vmov	r0, r1, d0
 800799e:	e7da      	b.n	8007956 <scalbn+0x36>
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	dd08      	ble.n	80079b6 <scalbn+0x96>
 80079a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079b0:	ec45 4b10 	vmov	d0, r4, r5
 80079b4:	bd70      	pop	{r4, r5, r6, pc}
 80079b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80079ba:	da0d      	bge.n	80079d8 <scalbn+0xb8>
 80079bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079c0:	429e      	cmp	r6, r3
 80079c2:	ec45 4b11 	vmov	d1, r4, r5
 80079c6:	dce1      	bgt.n	800798c <scalbn+0x6c>
 80079c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80079f0 <scalbn+0xd0>
 80079cc:	f000 f81e 	bl	8007a0c <copysign>
 80079d0:	a307      	add	r3, pc, #28	; (adr r3, 80079f0 <scalbn+0xd0>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	e7e0      	b.n	800799a <scalbn+0x7a>
 80079d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079dc:	3236      	adds	r2, #54	; 0x36
 80079de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	2200      	movs	r2, #0
 80079ec:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <scalbn+0xe8>)
 80079ee:	e7b2      	b.n	8007956 <scalbn+0x36>
 80079f0:	c2f8f359 	.word	0xc2f8f359
 80079f4:	01a56e1f 	.word	0x01a56e1f
 80079f8:	8800759c 	.word	0x8800759c
 80079fc:	7e37e43c 	.word	0x7e37e43c
 8007a00:	43500000 	.word	0x43500000
 8007a04:	ffff3cb0 	.word	0xffff3cb0
 8007a08:	3c900000 	.word	0x3c900000

08007a0c <copysign>:
 8007a0c:	ec51 0b10 	vmov	r0, r1, d0
 8007a10:	ee11 0a90 	vmov	r0, s3
 8007a14:	ee10 2a10 	vmov	r2, s0
 8007a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007a1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007a20:	ea41 0300 	orr.w	r3, r1, r0
 8007a24:	ec43 2b10 	vmov	d0, r2, r3
 8007a28:	4770      	bx	lr
	...

08007a2c <_init>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr

08007a38 <_fini>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr
