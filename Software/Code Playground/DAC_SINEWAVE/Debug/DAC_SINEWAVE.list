
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd4  08006dd4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ddc  08006ddc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003430  20000084  08006e68  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034b4  08006e68  000234b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014397  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a31  00000000  00000000  0003444b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00037d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002376e  00000000  00000000  00038b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cff8  00000000  00000000  0005c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2a29  00000000  00000000  0006929e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bcc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004140  00000000  00000000  0013bd44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080066b0 	.word	0x080066b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	080066b0 	.word	0x080066b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <clear_AX25>:
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		output_AX25();
	}
}

void clear_AX25(){
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <clear_AX25+0x5c>)
 80005c8:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <clear_AX25+0x60>)
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <clear_AX25+0x64>)
 80005ce:	4615      	mov	r5, r2
 80005d0:	461c      	mov	r4, r3
 80005d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d4:	6028      	str	r0, [r5, #0]
 80005d6:	6069      	str	r1, [r5, #4]
 80005d8:	60aa      	str	r2, [r5, #8]
 80005da:	60eb      	str	r3, [r5, #12]
 80005dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80005de:	6128      	str	r0, [r5, #16]
 80005e0:	6169      	str	r1, [r5, #20]
 80005e2:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <clear_AX25+0x60>)
 80005e6:	f7ff fe13 	bl	8000210 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	230a      	movs	r3, #10
 80005f0:	490b      	ldr	r1, [pc, #44]	; (8000620 <clear_AX25+0x60>)
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <clear_AX25+0x68>)
 80005f4:	f004 fd39 	bl	800506a <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f640 225f 	movw	r2, #2655	; 0xa5f
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f005 fc47 	bl	8005e94 <memcpy>
	local_packet->got_packet = false;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800060c:	3309      	adds	r3, #9
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}
 800061a:	bf00      	nop
 800061c:	200000e0 	.word	0x200000e0
 8000620:	20001ce4 	.word	0x20001ce4
 8000624:	08006874 	.word	0x08006874
 8000628:	200029e0 	.word	0x200029e0

0800062c <output_KISS>:

void output_KISS() {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <receiving_AX25>:

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8000642:	4a16      	ldr	r2, [pc, #88]	; (800069c <receiving_AX25+0x60>)
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <receiving_AX25+0x64>)
 8000646:	4615      	mov	r5, r2
 8000648:	461c      	mov	r4, r3
 800064a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800064c:	6028      	str	r0, [r5, #0]
 800064e:	6069      	str	r1, [r5, #4]
 8000650:	60aa      	str	r2, [r5, #8]
 8000652:	60eb      	str	r3, [r5, #12]
 8000654:	cc03      	ldmia	r4!, {r0, r1}
 8000656:	6128      	str	r0, [r5, #16]
 8000658:	6169      	str	r1, [r5, #20]
 800065a:	7823      	ldrb	r3, [r4, #0]
 800065c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <receiving_AX25+0x60>)
 8000660:	f7ff fdd6 	bl	8000210 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	230a      	movs	r3, #10
 800066a:	490c      	ldr	r1, [pc, #48]	; (800069c <receiving_AX25+0x60>)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <receiving_AX25+0x68>)
 800066e:	f004 fcfc 	bl	800506a <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <receiving_AX25+0x6c>)
 8000674:	607b      	str	r3, [r7, #4]

//	local_packet->i_frame_packet = false;
	//Validate packet
	bool AX25_IsValid = AX25_Packet_Validate();
 8000676:	f000 f8ad 	bl	80007d4 <AX25_Packet_Validate>
 800067a:	4603      	mov	r3, r0
 800067c:	70fb      	strb	r3, [r7, #3]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	if(AX25_IsValid){
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <receiving_AX25+0x54>
		//Put data into KISS format and buffer
		AX25_TO_KISS();
 8000684:	f000 fa10 	bl	8000aa8 <AX25_TO_KISS>

		//Transmit KISS Packet that has been generated
		output_KISS();
 8000688:	f7ff ffd0 	bl	800062c <output_KISS>

		//Clear AX.25 buffer
		clear_AX25();
 800068c:	f7ff ff98 	bl	80005c0 <clear_AX25>
	}
}
 8000690:	bf00      	nop
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bdb0      	pop	{r4, r5, r7, pc}
 800069a:	bf00      	nop
 800069c:	20001ce4 	.word	0x20001ce4
 80006a0:	08006890 	.word	0x08006890
 80006a4:	200029e0 	.word	0x200029e0
 80006a8:	200000e0 	.word	0x200000e0

080006ac <slide_bits>:

void slide_bits(bool* array,int bits_left){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	memmove(array,array+1,bits_left*bool_size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f005 fbf3 	bl	8005eaa <memmove>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <remove_bit_stuffing>:

void remove_bit_stuffing(){
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <remove_bit_stuffing+0xf0>)
 80006d4:	607b      	str	r3, [r7, #4]
//	sprintf(uartData, "Removing bit stuffed zeros\n");
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	int ones_count = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
	bool curr;
	for(int i = 0;i < rxBit_count;i++){
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	e065      	b.n	80007ac <remove_bit_stuffing+0xe0>
		curr = local_packet->AX25_PACKET[i]; //iterate through all data received before seperating into subfields
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	70fb      	strb	r3, [r7, #3]
		if(curr){ //current bit is a 1
 80006ea:	78fb      	ldrb	r3, [r7, #3]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d028      	beq.n	8000742 <remove_bit_stuffing+0x76>
			ones_count++;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
			if(ones_count > 5){
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b05      	cmp	r3, #5
 80006fa:	dd54      	ble.n	80007a6 <remove_bit_stuffing+0xda>
				sprintf(uartData, "ERROR: SHOULD HAVE BEEN A ZERO AFTER FIFTH CONTIGIOUS ONE!\n");
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <remove_bit_stuffing+0xf4>)
 80006fe:	4a31      	ldr	r2, [pc, #196]	; (80007c4 <remove_bit_stuffing+0xf8>)
 8000700:	4614      	mov	r4, r2
 8000702:	469c      	mov	ip, r3
 8000704:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000708:	4665      	mov	r5, ip
 800070a:	4626      	mov	r6, r4
 800070c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800070e:	6028      	str	r0, [r5, #0]
 8000710:	6069      	str	r1, [r5, #4]
 8000712:	60aa      	str	r2, [r5, #8]
 8000714:	60eb      	str	r3, [r5, #12]
 8000716:	3410      	adds	r4, #16
 8000718:	f10c 0c10 	add.w	ip, ip, #16
 800071c:	4574      	cmp	r4, lr
 800071e:	d1f3      	bne.n	8000708 <remove_bit_stuffing+0x3c>
 8000720:	4665      	mov	r5, ip
 8000722:	4623      	mov	r3, r4
 8000724:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000726:	6028      	str	r0, [r5, #0]
 8000728:	6069      	str	r1, [r5, #4]
 800072a:	60aa      	str	r2, [r5, #8]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800072c:	4824      	ldr	r0, [pc, #144]	; (80007c0 <remove_bit_stuffing+0xf4>)
 800072e:	f7ff fd6f 	bl	8000210 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	230a      	movs	r3, #10
 8000738:	4921      	ldr	r1, [pc, #132]	; (80007c0 <remove_bit_stuffing+0xf4>)
 800073a:	4823      	ldr	r0, [pc, #140]	; (80007c8 <remove_bit_stuffing+0xfc>)
 800073c:	f004 fc95 	bl	800506a <HAL_UART_Transmit>
				return;
 8000740:	e039      	b.n	80007b6 <remove_bit_stuffing+0xea>
			}
		}
		else{
			if(ones_count >= 5){
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b04      	cmp	r3, #4
 8000746:	dd2c      	ble.n	80007a2 <remove_bit_stuffing+0xd6>
				slide_bits(&local_packet->AX25_PACKET[i],rxBit_count-i);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	18d0      	adds	r0, r2, r3
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <remove_bit_stuffing+0x100>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4619      	mov	r1, r3
 8000758:	f7ff ffa8 	bl	80006ac <slide_bits>
				i--;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3b01      	subs	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
				rxBit_count--;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <remove_bit_stuffing+0x100>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	4a18      	ldr	r2, [pc, #96]	; (80007cc <remove_bit_stuffing+0x100>)
 800076a:	6013      	str	r3, [r2, #0]
				sprintf(uartData, "REMOVED BIT STUFFED ZERO!\n");
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <remove_bit_stuffing+0xf4>)
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <remove_bit_stuffing+0x104>)
 8000770:	4615      	mov	r5, r2
 8000772:	461c      	mov	r4, r3
 8000774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000776:	6028      	str	r0, [r5, #0]
 8000778:	6069      	str	r1, [r5, #4]
 800077a:	60aa      	str	r2, [r5, #8]
 800077c:	60eb      	str	r3, [r5, #12]
 800077e:	cc03      	ldmia	r4!, {r0, r1}
 8000780:	6128      	str	r0, [r5, #16]
 8000782:	6169      	str	r1, [r5, #20]
 8000784:	8823      	ldrh	r3, [r4, #0]
 8000786:	78a2      	ldrb	r2, [r4, #2]
 8000788:	832b      	strh	r3, [r5, #24]
 800078a:	4613      	mov	r3, r2
 800078c:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <remove_bit_stuffing+0xf4>)
 8000790:	f7ff fd3e 	bl	8000210 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b29a      	uxth	r2, r3
 8000798:	230a      	movs	r3, #10
 800079a:	4909      	ldr	r1, [pc, #36]	; (80007c0 <remove_bit_stuffing+0xf4>)
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <remove_bit_stuffing+0xfc>)
 800079e:	f004 fc64 	bl	800506a <HAL_UART_Transmit>
			}
			ones_count = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
	for(int i = 0;i < rxBit_count;i++){
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <remove_bit_stuffing+0x100>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	db94      	blt.n	80006e0 <remove_bit_stuffing+0x14>
		}
	}
	//transmit kiss
}
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007bc:	200000e0 	.word	0x200000e0
 80007c0:	20001ce4 	.word	0x20001ce4
 80007c4:	080068ac 	.word	0x080068ac
 80007c8:	200029e0 	.word	0x200029e0
 80007cc:	200000a0 	.word	0x200000a0
 80007d0:	080068e8 	.word	0x080068e8

080007d4 <AX25_Packet_Validate>:

bool AX25_Packet_Validate(){
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <AX25_Packet_Validate+0xd4>)
 80007dc:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]

	sprintf(uartData,"Received packet bit count: %d\n",rxBit_count);
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <AX25_Packet_Validate+0xd8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4931      	ldr	r1, [pc, #196]	; (80008b0 <AX25_Packet_Validate+0xdc>)
 80007ea:	4832      	ldr	r0, [pc, #200]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 80007ec:	f005 fb7e 	bl	8005eec <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007f0:	4830      	ldr	r0, [pc, #192]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 80007f2:	f7ff fd0d 	bl	8000210 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	230a      	movs	r3, #10
 80007fc:	492d      	ldr	r1, [pc, #180]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 80007fe:	482e      	ldr	r0, [pc, #184]	; (80008b8 <AX25_Packet_Validate+0xe4>)
 8000800:	f004 fc33 	bl	800506a <HAL_UART_Transmit>

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <AX25_Packet_Validate+0xd8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b77      	cmp	r3, #119	; 0x77
 800080a:	dc1d      	bgt.n	8000848 <AX25_Packet_Validate+0x74>
		sprintf(uartData,"Trash Packet, not enough bits\n");
 800080c:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <AX25_Packet_Validate+0xe8>)
 8000810:	4615      	mov	r5, r2
 8000812:	461c      	mov	r4, r3
 8000814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000816:	6028      	str	r0, [r5, #0]
 8000818:	6069      	str	r1, [r5, #4]
 800081a:	60aa      	str	r2, [r5, #8]
 800081c:	60eb      	str	r3, [r5, #12]
 800081e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000820:	6128      	str	r0, [r5, #16]
 8000822:	6169      	str	r1, [r5, #20]
 8000824:	61aa      	str	r2, [r5, #24]
 8000826:	8823      	ldrh	r3, [r4, #0]
 8000828:	78a2      	ldrb	r2, [r4, #2]
 800082a:	83ab      	strh	r3, [r5, #28]
 800082c:	4613      	mov	r3, r2
 800082e:	77ab      	strb	r3, [r5, #30]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000830:	4820      	ldr	r0, [pc, #128]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 8000832:	f7ff fced 	bl	8000210 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	230a      	movs	r3, #10
 800083c:	491d      	ldr	r1, [pc, #116]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 800083e:	481e      	ldr	r0, [pc, #120]	; (80008b8 <AX25_Packet_Validate+0xe4>)
 8000840:	f004 fc13 	bl	800506a <HAL_UART_Transmit>
		return false;
 8000844:	2300      	movs	r3, #0
 8000846:	e02a      	b.n	800089e <AX25_Packet_Validate+0xca>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <AX25_Packet_Validate+0xd8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0307 	and.w	r3, r3, #7
 8000850:	2b00      	cmp	r3, #0
 8000852:	d021      	beq.n	8000898 <AX25_Packet_Validate+0xc4>
		sprintf(uartData,"Trash Packet, not octet aligned\n");
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <AX25_Packet_Validate+0xec>)
 8000858:	4614      	mov	r4, r2
 800085a:	469c      	mov	ip, r3
 800085c:	f104 0e20 	add.w	lr, r4, #32
 8000860:	4665      	mov	r5, ip
 8000862:	4626      	mov	r6, r4
 8000864:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000866:	6028      	str	r0, [r5, #0]
 8000868:	6069      	str	r1, [r5, #4]
 800086a:	60aa      	str	r2, [r5, #8]
 800086c:	60eb      	str	r3, [r5, #12]
 800086e:	3410      	adds	r4, #16
 8000870:	f10c 0c10 	add.w	ip, ip, #16
 8000874:	4574      	cmp	r4, lr
 8000876:	d1f3      	bne.n	8000860 <AX25_Packet_Validate+0x8c>
 8000878:	4663      	mov	r3, ip
 800087a:	4622      	mov	r2, r4
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 8000882:	f7ff fcc5 	bl	8000210 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	230a      	movs	r3, #10
 800088c:	4909      	ldr	r1, [pc, #36]	; (80008b4 <AX25_Packet_Validate+0xe0>)
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <AX25_Packet_Validate+0xe4>)
 8000890:	f004 fbeb 	bl	800506a <HAL_UART_Transmit>
		return false;
 8000894:	2300      	movs	r3, #0
 8000896:	e002      	b.n	800089e <AX25_Packet_Validate+0xca>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8000898:	f000 f814 	bl	80008c4 <set_packet_pointer_AX25>
//		return crc_check();
		return true;
 800089c:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000e0 	.word	0x200000e0
 80008ac:	200000a0 	.word	0x200000a0
 80008b0:	08006904 	.word	0x08006904
 80008b4:	20001ce4 	.word	0x20001ce4
 80008b8:	200029e0 	.word	0x200029e0
 80008bc:	08006924 	.word	0x08006924
 80008c0:	08006944 	.word	0x08006944

080008c4 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80008ca:	4b6e      	ldr	r3, [pc, #440]	; (8000a84 <set_packet_pointer_AX25+0x1c0>)
 80008cc:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 80008ce:	2310      	movs	r3, #16
 80008d0:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 80008d2:	4b6d      	ldr	r3, [pc, #436]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 80008d4:	4a6d      	ldr	r2, [pc, #436]	; (8000a8c <set_packet_pointer_AX25+0x1c8>)
 80008d6:	4614      	mov	r4, r2
 80008d8:	469c      	mov	ip, r3
 80008da:	f104 0e20 	add.w	lr, r4, #32
 80008de:	4665      	mov	r5, ip
 80008e0:	4626      	mov	r6, r4
 80008e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008e4:	6028      	str	r0, [r5, #0]
 80008e6:	6069      	str	r1, [r5, #4]
 80008e8:	60aa      	str	r2, [r5, #8]
 80008ea:	60eb      	str	r3, [r5, #12]
 80008ec:	3410      	adds	r4, #16
 80008ee:	f10c 0c10 	add.w	ip, ip, #16
 80008f2:	4574      	cmp	r4, lr
 80008f4:	d1f3      	bne.n	80008de <set_packet_pointer_AX25+0x1a>
 80008f6:	4663      	mov	r3, ip
 80008f8:	4622      	mov	r2, r4
 80008fa:	7812      	ldrb	r2, [r2, #0]
 80008fc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008fe:	4862      	ldr	r0, [pc, #392]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000900:	f7ff fc86 	bl	8000210 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	230a      	movs	r3, #10
 800090a:	495f      	ldr	r1, [pc, #380]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 800090c:	4860      	ldr	r0, [pc, #384]	; (8000a90 <set_packet_pointer_AX25+0x1cc>)
 800090e:	f004 fbac 	bl	800506a <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8000916:	4a5c      	ldr	r2, [pc, #368]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000918:	4b5e      	ldr	r3, [pc, #376]	; (8000a94 <set_packet_pointer_AX25+0x1d0>)
 800091a:	4615      	mov	r5, r2
 800091c:	461c      	mov	r4, r3
 800091e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000920:	6028      	str	r0, [r5, #0]
 8000922:	6069      	str	r1, [r5, #4]
 8000924:	60aa      	str	r2, [r5, #8]
 8000926:	60eb      	str	r3, [r5, #12]
 8000928:	cc07      	ldmia	r4!, {r0, r1, r2}
 800092a:	6128      	str	r0, [r5, #16]
 800092c:	6169      	str	r1, [r5, #20]
 800092e:	61aa      	str	r2, [r5, #24]
 8000930:	7823      	ldrb	r3, [r4, #0]
 8000932:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000934:	4854      	ldr	r0, [pc, #336]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000936:	f7ff fc6b 	bl	8000210 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	230a      	movs	r3, #10
 8000940:	4951      	ldr	r1, [pc, #324]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000942:	4853      	ldr	r0, [pc, #332]	; (8000a90 <set_packet_pointer_AX25+0x1cc>)
 8000944:	f004 fb91 	bl	800506a <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800094e:	3310      	adds	r3, #16
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3370      	adds	r3, #112	; 0x70
 8000958:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	3370      	adds	r3, #112	; 0x70
 800095e:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8000960:	4a49      	ldr	r2, [pc, #292]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000962:	4b4d      	ldr	r3, [pc, #308]	; (8000a98 <set_packet_pointer_AX25+0x1d4>)
 8000964:	4615      	mov	r5, r2
 8000966:	461c      	mov	r4, r3
 8000968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096a:	6028      	str	r0, [r5, #0]
 800096c:	6069      	str	r1, [r5, #4]
 800096e:	60aa      	str	r2, [r5, #8]
 8000970:	60eb      	str	r3, [r5, #12]
 8000972:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000974:	6128      	str	r0, [r5, #16]
 8000976:	6169      	str	r1, [r5, #20]
 8000978:	61aa      	str	r2, [r5, #24]
 800097a:	7823      	ldrb	r3, [r4, #0]
 800097c:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800097e:	4842      	ldr	r0, [pc, #264]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000980:	f7ff fc46 	bl	8000210 <strlen>
 8000984:	4603      	mov	r3, r0
 8000986:	b29a      	uxth	r2, r3
 8000988:	230a      	movs	r3, #10
 800098a:	493f      	ldr	r1, [pc, #252]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 800098c:	4840      	ldr	r0, [pc, #256]	; (8000a90 <set_packet_pointer_AX25+0x1cc>)
 800098e:	f004 fb6c 	bl	800506a <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000998:	3314      	adds	r3, #20
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3308      	adds	r3, #8
 80009a2:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	3308      	adds	r3, #8
 80009a8:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 80009aa:	4a37      	ldr	r2, [pc, #220]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <set_packet_pointer_AX25+0x1d8>)
 80009ae:	4615      	mov	r5, r2
 80009b0:	461c      	mov	r4, r3
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	cc03      	ldmia	r4!, {r0, r1}
 80009be:	6128      	str	r0, [r5, #16]
 80009c0:	6169      	str	r1, [r5, #20]
 80009c2:	7823      	ldrb	r3, [r4, #0]
 80009c4:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009c6:	4830      	ldr	r0, [pc, #192]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 80009c8:	f7ff fc22 	bl	8000210 <strlen>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	230a      	movs	r3, #10
 80009d2:	492d      	ldr	r1, [pc, #180]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 80009d4:	482e      	ldr	r0, [pc, #184]	; (8000a90 <set_packet_pointer_AX25+0x1cc>)
 80009d6:	f004 fb48 	bl	800506a <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80009e0:	3318      	adds	r3, #24
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3308      	adds	r3, #8
 80009ea:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	3308      	adds	r3, #8
 80009f0:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 80009f2:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <set_packet_pointer_AX25+0x1dc>)
 80009f6:	4615      	mov	r5, r2
 80009f8:	461c      	mov	r4, r3
 80009fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009fc:	6028      	str	r0, [r5, #0]
 80009fe:	6069      	str	r1, [r5, #4]
 8000a00:	60aa      	str	r2, [r5, #8]
 8000a02:	60eb      	str	r3, [r5, #12]
 8000a04:	cc03      	ldmia	r4!, {r0, r1}
 8000a06:	6128      	str	r0, [r5, #16]
 8000a08:	6169      	str	r1, [r5, #20]
 8000a0a:	8823      	ldrh	r3, [r4, #0]
 8000a0c:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a0e:	481e      	ldr	r0, [pc, #120]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000a10:	f7ff fbfe 	bl	8000210 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	230a      	movs	r3, #10
 8000a1a:	491b      	ldr	r1, [pc, #108]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000a1c:	481c      	ldr	r0, [pc, #112]	; (8000a90 <set_packet_pointer_AX25+0x1cc>)
 8000a1e:	f004 fb24 	bl	800506a <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a28:	331c      	adds	r3, #28
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <set_packet_pointer_AX25+0x1e0>)
 8000a42:	4615      	mov	r5, r2
 8000a44:	461c      	mov	r4, r3
 8000a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a48:	6028      	str	r0, [r5, #0]
 8000a4a:	6069      	str	r1, [r5, #4]
 8000a4c:	60aa      	str	r2, [r5, #8]
 8000a4e:	60eb      	str	r3, [r5, #12]
 8000a50:	cc03      	ldmia	r4!, {r0, r1}
 8000a52:	6128      	str	r0, [r5, #16]
 8000a54:	6169      	str	r1, [r5, #20]
 8000a56:	7823      	ldrb	r3, [r4, #0]
 8000a58:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000a5c:	f7ff fbd8 	bl	8000210 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	230a      	movs	r3, #10
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <set_packet_pointer_AX25+0x1c4>)
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <set_packet_pointer_AX25+0x1cc>)
 8000a6a:	f004 fafe 	bl	800506a <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000a74:	3304      	adds	r3, #4
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000e0 	.word	0x200000e0
 8000a88:	20001ce4 	.word	0x20001ce4
 8000a8c:	08006968 	.word	0x08006968
 8000a90:	200029e0 	.word	0x200029e0
 8000a94:	0800698c 	.word	0x0800698c
 8000a98:	080069ac 	.word	0x080069ac
 8000a9c:	080069cc 	.word	0x080069cc
 8000aa0:	080069e8 	.word	0x080069e8
 8000aa4:	08006a04 	.word	0x08006a04

08000aa8 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000aae:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <AX25_TO_KISS+0x10c>)
 8000ab0:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 8000ab2:	f7ff ff07 	bl	80008c4 <set_packet_pointer_AX25>
	print_AX25();
 8000ab6:	f000 f965 	bl	8000d84 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3308      	adds	r3, #8
 8000abe:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	493d      	ldr	r1, [pc, #244]	; (8000bb8 <AX25_TO_KISS+0x110>)
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	cb03      	ldmia	r3!, {r0, r1}
 8000aca:	6010      	str	r0, [r2, #0]
 8000acc:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3308      	adds	r3, #8
 8000ad2:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	e014      	b.n	8000b04 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ae0:	3310      	adds	r3, #16
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8000aec:	4413      	add	r3, r2
 8000aee:	2208      	movs	r2, #8
 8000af0:	4619      	mov	r1, r3
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f005 f9ce 	bl	8005e94 <memcpy>
		cpy_from_ptr += 8;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3308      	adds	r3, #8
 8000afc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b0d      	cmp	r3, #13
 8000b08:	dde7      	ble.n	8000ada <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b10:	3314      	adds	r3, #20
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2208      	movs	r2, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f005 f9bb 	bl	8005e94 <memcpy>
	cpy_from_ptr += control_len;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3308      	adds	r3, #8
 8000b22:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	4924      	ldr	r1, [pc, #144]	; (8000bb8 <AX25_TO_KISS+0x110>)
 8000b28:	461a      	mov	r2, r3
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	cb03      	ldmia	r3!, {r0, r1}
 8000b2e:	6010      	str	r0, [r2, #0]
 8000b30:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	e019      	b.n	8000b6c <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b3e:	331c      	adds	r3, #28
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	3b08      	subs	r3, #8
 8000b54:	4413      	add	r3, r2
 8000b56:	2208      	movs	r2, #8
 8000b58:	4619      	mov	r1, r3
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f005 f99a 	bl	8005e94 <memcpy>
		cpy_from_ptr += 8;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3308      	adds	r3, #8
 8000b64:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <AX25_TO_KISS+0xd2>
 8000b78:	3307      	adds	r3, #7
 8000b7a:	10db      	asrs	r3, r3, #3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	dbd9      	blt.n	8000b38 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <AX25_TO_KISS+0x110>)
 8000b88:	461a      	mov	r2, r3
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	cb03      	ldmia	r3!, {r0, r1}
 8000b8e:	6010      	str	r0, [r2, #0]
 8000b90:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b98:	3314      	adds	r3, #20
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	68f9      	ldr	r1, [r7, #12]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 f977 	bl	8005e94 <memcpy>
	cpy_from_ptr += control_len;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	60fb      	str	r3, [r7, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000e0 	.word	0x200000e0
 8000bb8:	20000000 	.word	0x20000000

08000bbc <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]

	//Set hardware properly
	mode = modeStart;
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <initProgram+0x24>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8000bcc:	f000 f80a 	bl	8000be4 <toggleMode>
	toggleMode();
 8000bd0:	f000 f808 	bl	8000be4 <toggleMode>

	init_UART();
 8000bd4:	f000 fc5c 	bl	8001490 <init_UART>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20002988 	.word	0x20002988

08000be4 <toggleMode>:

void toggleMode() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

	//Toggle mode
	mode = !mode;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <toggleMode+0xc0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bf14      	ite	ne
 8000bf0:	2301      	movne	r3, #1
 8000bf2:	2300      	moveq	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f083 0301 	eor.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <toggleMode+0xc0>)
 8000c04:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <toggleMode+0xc0>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <toggleMode+0xc4>)
 8000c10:	f002 f9dc 	bl	8002fcc <HAL_GPIO_WritePin>

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000c14:	2100      	movs	r1, #0
 8000c16:	4825      	ldr	r0, [pc, #148]	; (8000cac <toggleMode+0xc8>)
 8000c18:	f001 fc3d 	bl	8002496 <HAL_DAC_Stop_DMA>
	midbit = false;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <toggleMode+0xcc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]

	//Stop Timers the Correct Way
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000c22:	2100      	movs	r1, #0
 8000c24:	4823      	ldr	r0, [pc, #140]	; (8000cb4 <toggleMode+0xd0>)
 8000c26:	f003 f84d 	bl	8003cc4 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim3);
 8000c2a:	4823      	ldr	r0, [pc, #140]	; (8000cb8 <toggleMode+0xd4>)
 8000c2c:	f002 ff65 	bl	8003afa <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8000c30:	2100      	movs	r1, #0
 8000c32:	4822      	ldr	r0, [pc, #136]	; (8000cbc <toggleMode+0xd8>)
 8000c34:	f003 f97e 	bl	8003f34 <HAL_TIM_IC_Stop_IT>

	//Zero Timers
	htim2.Instance->CNT = 0;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <toggleMode+0xd0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <toggleMode+0xd4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
	htim5.Instance->CNT = 0;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <toggleMode+0xd8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24

	//Transmission Mode
	if (mode) {
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <toggleMode+0xc0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00d      	beq.n	8000c74 <toggleMode+0x90>

		//Set Timer Auto Reload Settings
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX_LOW;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <toggleMode+0xd0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	226c      	movs	r2, #108	; 0x6c
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <toggleMode+0xd4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <toggleMode+0xd8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c

//		//Start Timers the Correct Way
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
	}
}
 8000c72:	e014      	b.n	8000c9e <toggleMode+0xba>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX_LOW;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <toggleMode+0xd0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	226c      	movs	r2, #108	; 0x6c
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <toggleMode+0xd4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <toggleMode+0xd8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <toggleMode+0xd0>)
 8000c92:	f002 ff93 	bl	8003bbc <HAL_TIM_OC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000c96:	2100      	movs	r1, #0
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <toggleMode+0xd8>)
 8000c9a:	f003 f8e3 	bl	8003e64 <HAL_TIM_IC_Start_IT>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20002988 	.word	0x20002988
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	2000298c 	.word	0x2000298c
 8000cb0:	200000a4 	.word	0x200000a4
 8000cb4:	200029a0 	.word	0x200029a0
 8000cb8:	200028e8 	.word	0x200028e8
 8000cbc:	200028a8 	.word	0x200028a8

08000cc0 <loadBitBuffer>:

bool bufffull = false;
int loadBitBuffer(bool bit_val) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	if(canWrite){
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <loadBitBuffer+0x6c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01e      	beq.n	8000d10 <loadBitBuffer+0x50>
		bitBuffer[bitSaveCount] = bit_val;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <loadBitBuffer+0x70>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <loadBitBuffer+0x74>)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	5453      	strb	r3, [r2, r1]
		bitSaveCount++;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <loadBitBuffer+0x70>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <loadBitBuffer+0x70>)
 8000ce8:	801a      	strh	r2, [r3, #0]
		if (bitSaveCount >= RX_BUFFERSIZE) {
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <loadBitBuffer+0x70>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	f640 225e 	movw	r2, #2654	; 0xa5e
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d902      	bls.n	8000cfc <loadBitBuffer+0x3c>
			bitSaveCount = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <loadBitBuffer+0x70>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(bitSaveCount == bitReadCount){
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <loadBitBuffer+0x70>)
 8000cfe:	881a      	ldrh	r2, [r3, #0]
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <loadBitBuffer+0x78>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d106      	bne.n	8000d16 <loadBitBuffer+0x56>
			canWrite = false;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <loadBitBuffer+0x6c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e002      	b.n	8000d16 <loadBitBuffer+0x56>
		}
	} else {
		bufffull = true;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <loadBitBuffer+0x7c>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <loadBitBuffer+0x80>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
	return bitSaveCount;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <loadBitBuffer+0x70>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20000010 	.word	0x20000010
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	20002a20 	.word	0x20002a20
 8000d38:	200000aa 	.word	0x200000aa
 8000d3c:	200000a6 	.word	0x200000a6
 8000d40:	200000a7 	.word	0x200000a7

08000d44 <resetBitBuffer>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void resetBitBuffer(){
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	bitReadCount = 0;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <resetBitBuffer+0x2c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	801a      	strh	r2, [r3, #0]
	bitSaveCount = 0;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <resetBitBuffer+0x30>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	801a      	strh	r2, [r3, #0]

	canRead  = false;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <resetBitBuffer+0x34>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	canWrite = true;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <resetBitBuffer+0x38>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]

	bufffull = false;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <resetBitBuffer+0x3c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	200000aa 	.word	0x200000aa
 8000d74:	200000a8 	.word	0x200000a8
 8000d78:	200000a7 	.word	0x200000a7
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	200000a6 	.word	0x200000a6

08000d84 <print_AX25>:
#include "debug.h"
#include "AX.25.h"
#include "FreqIO.h"
//Printing Packets
//****************************************************************************************************************
void print_AX25(){
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d86:	b08b      	sub	sp, #44	; 0x2c
 8000d88:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000d8a:	4b90      	ldr	r3, [pc, #576]	; (8000fcc <print_AX25+0x248>)
 8000d8c:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d94:	330c      	adds	r3, #12
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8000d9a:	4b8d      	ldr	r3, [pc, #564]	; (8000fd0 <print_AX25+0x24c>)
 8000d9c:	4a8d      	ldr	r2, [pc, #564]	; (8000fd4 <print_AX25+0x250>)
 8000d9e:	4614      	mov	r4, r2
 8000da0:	469c      	mov	ip, r3
 8000da2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000da6:	4665      	mov	r5, ip
 8000da8:	4626      	mov	r6, r4
 8000daa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dac:	6028      	str	r0, [r5, #0]
 8000dae:	6069      	str	r1, [r5, #4]
 8000db0:	60aa      	str	r2, [r5, #8]
 8000db2:	60eb      	str	r3, [r5, #12]
 8000db4:	3410      	adds	r4, #16
 8000db6:	f10c 0c10 	add.w	ip, ip, #16
 8000dba:	4574      	cmp	r4, lr
 8000dbc:	d1f3      	bne.n	8000da6 <print_AX25+0x22>
 8000dbe:	4663      	mov	r3, ip
 8000dc0:	4622      	mov	r2, r4
 8000dc2:	6810      	ldr	r0, [r2, #0]
 8000dc4:	6018      	str	r0, [r3, #0]
 8000dc6:	8891      	ldrh	r1, [r2, #4]
 8000dc8:	7992      	ldrb	r2, [r2, #6]
 8000dca:	8099      	strh	r1, [r3, #4]
 8000dcc:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dce:	4880      	ldr	r0, [pc, #512]	; (8000fd0 <print_AX25+0x24c>)
 8000dd0:	f7ff fa1e 	bl	8000210 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	230a      	movs	r3, #10
 8000dda:	497d      	ldr	r1, [pc, #500]	; (8000fd0 <print_AX25+0x24c>)
 8000ddc:	487e      	ldr	r0, [pc, #504]	; (8000fd8 <print_AX25+0x254>)
 8000dde:	f004 f944 	bl	800506a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->AX25_PACKET) + address_len - 1;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	336f      	adds	r3, #111	; 0x6f
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<address_len/8;i++){
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	e041      	b.n	8000e72 <print_AX25+0xee>
		sprintf(uartData, "Address Field %d =",i+1);
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	3301      	adds	r3, #1
 8000df2:	461a      	mov	r2, r3
 8000df4:	4979      	ldr	r1, [pc, #484]	; (8000fdc <print_AX25+0x258>)
 8000df6:	4876      	ldr	r0, [pc, #472]	; (8000fd0 <print_AX25+0x24c>)
 8000df8:	f005 f878 	bl	8005eec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dfc:	4874      	ldr	r0, [pc, #464]	; (8000fd0 <print_AX25+0x24c>)
 8000dfe:	f7ff fa07 	bl	8000210 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	230a      	movs	r3, #10
 8000e08:	4971      	ldr	r1, [pc, #452]	; (8000fd0 <print_AX25+0x24c>)
 8000e0a:	4873      	ldr	r0, [pc, #460]	; (8000fd8 <print_AX25+0x254>)
 8000e0c:	f004 f92d 	bl	800506a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	e016      	b.n	8000e44 <print_AX25+0xc0>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	425b      	negs	r3, r3
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	496f      	ldr	r1, [pc, #444]	; (8000fe0 <print_AX25+0x25c>)
 8000e24:	486a      	ldr	r0, [pc, #424]	; (8000fd0 <print_AX25+0x24c>)
 8000e26:	f005 f861 	bl	8005eec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e2a:	4869      	ldr	r0, [pc, #420]	; (8000fd0 <print_AX25+0x24c>)
 8000e2c:	f7ff f9f0 	bl	8000210 <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	230a      	movs	r3, #10
 8000e36:	4966      	ldr	r1, [pc, #408]	; (8000fd0 <print_AX25+0x24c>)
 8000e38:	4867      	ldr	r0, [pc, #412]	; (8000fd8 <print_AX25+0x254>)
 8000e3a:	f004 f916 	bl	800506a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3301      	adds	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	dde5      	ble.n	8000e16 <print_AX25+0x92>
		}
		curr_mem -= 8;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3b08      	subs	r3, #8
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 8000e50:	4a5f      	ldr	r2, [pc, #380]	; (8000fd0 <print_AX25+0x24c>)
 8000e52:	4b64      	ldr	r3, [pc, #400]	; (8000fe4 <print_AX25+0x260>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e58:	485d      	ldr	r0, [pc, #372]	; (8000fd0 <print_AX25+0x24c>)
 8000e5a:	f7ff f9d9 	bl	8000210 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	230a      	movs	r3, #10
 8000e64:	495a      	ldr	r1, [pc, #360]	; (8000fd0 <print_AX25+0x24c>)
 8000e66:	485c      	ldr	r0, [pc, #368]	; (8000fd8 <print_AX25+0x254>)
 8000e68:	f004 f8ff 	bl	800506a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	623b      	str	r3, [r7, #32]
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	2b0d      	cmp	r3, #13
 8000e76:	ddba      	ble.n	8000dee <print_AX25+0x6a>
	}

	//Print Control Field
	curr_mem += address_len;//Subtract 8 to start at the flag start
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	3370      	adds	r3, #112	; 0x70
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "Control Field   =");
 8000e7e:	4a54      	ldr	r2, [pc, #336]	; (8000fd0 <print_AX25+0x24c>)
 8000e80:	4b59      	ldr	r3, [pc, #356]	; (8000fe8 <print_AX25+0x264>)
 8000e82:	4615      	mov	r5, r2
 8000e84:	461c      	mov	r4, r3
 8000e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e88:	6028      	str	r0, [r5, #0]
 8000e8a:	6069      	str	r1, [r5, #4]
 8000e8c:	60aa      	str	r2, [r5, #8]
 8000e8e:	60eb      	str	r3, [r5, #12]
 8000e90:	8823      	ldrh	r3, [r4, #0]
 8000e92:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e94:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <print_AX25+0x24c>)
 8000e96:	f7ff f9bb 	bl	8000210 <strlen>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	494b      	ldr	r1, [pc, #300]	; (8000fd0 <print_AX25+0x24c>)
 8000ea2:	484d      	ldr	r0, [pc, #308]	; (8000fd8 <print_AX25+0x254>)
 8000ea4:	f004 f8e1 	bl	800506a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e017      	b.n	8000ede <print_AX25+0x15a>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	f1c3 0307 	rsb	r3, r3, #7
 8000eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4948      	ldr	r1, [pc, #288]	; (8000fe0 <print_AX25+0x25c>)
 8000ebe:	4844      	ldr	r0, [pc, #272]	; (8000fd0 <print_AX25+0x24c>)
 8000ec0:	f005 f814 	bl	8005eec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ec4:	4842      	ldr	r0, [pc, #264]	; (8000fd0 <print_AX25+0x24c>)
 8000ec6:	f7ff f9a3 	bl	8000210 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	230a      	movs	r3, #10
 8000ed0:	493f      	ldr	r1, [pc, #252]	; (8000fd0 <print_AX25+0x24c>)
 8000ed2:	4841      	ldr	r0, [pc, #260]	; (8000fd8 <print_AX25+0x254>)
 8000ed4:	f004 f8c9 	bl	800506a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	3301      	adds	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	dde4      	ble.n	8000eae <print_AX25+0x12a>
	}
	sprintf(uartData, "\n");
 8000ee4:	4a3a      	ldr	r2, [pc, #232]	; (8000fd0 <print_AX25+0x24c>)
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <print_AX25+0x260>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000eec:	4838      	ldr	r0, [pc, #224]	; (8000fd0 <print_AX25+0x24c>)
 8000eee:	f7ff f98f 	bl	8000210 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <print_AX25+0x24c>)
 8000efa:	4837      	ldr	r0, [pc, #220]	; (8000fd8 <print_AX25+0x254>)
 8000efc:	f004 f8b5 	bl	800506a <HAL_UART_Transmit>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3308      	adds	r3, #8
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "PID Field       =");
 8000f06:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <print_AX25+0x24c>)
 8000f08:	4b38      	ldr	r3, [pc, #224]	; (8000fec <print_AX25+0x268>)
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	461c      	mov	r4, r3
 8000f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f10:	6028      	str	r0, [r5, #0]
 8000f12:	6069      	str	r1, [r5, #4]
 8000f14:	60aa      	str	r2, [r5, #8]
 8000f16:	60eb      	str	r3, [r5, #12]
 8000f18:	8823      	ldrh	r3, [r4, #0]
 8000f1a:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f1c:	482c      	ldr	r0, [pc, #176]	; (8000fd0 <print_AX25+0x24c>)
 8000f1e:	f7ff f977 	bl	8000210 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	230a      	movs	r3, #10
 8000f28:	4929      	ldr	r1, [pc, #164]	; (8000fd0 <print_AX25+0x24c>)
 8000f2a:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <print_AX25+0x254>)
 8000f2c:	f004 f89d 	bl	800506a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e017      	b.n	8000f66 <print_AX25+0x1e2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f1c3 0307 	rsb	r3, r3, #7
 8000f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4926      	ldr	r1, [pc, #152]	; (8000fe0 <print_AX25+0x25c>)
 8000f46:	4822      	ldr	r0, [pc, #136]	; (8000fd0 <print_AX25+0x24c>)
 8000f48:	f004 ffd0 	bl	8005eec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f4c:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <print_AX25+0x24c>)
 8000f4e:	f7ff f95f 	bl	8000210 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	230a      	movs	r3, #10
 8000f58:	491d      	ldr	r1, [pc, #116]	; (8000fd0 <print_AX25+0x24c>)
 8000f5a:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <print_AX25+0x254>)
 8000f5c:	f004 f885 	bl	800506a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	dde4      	ble.n	8000f36 <print_AX25+0x1b2>
	}
	sprintf(uartData, "\n");
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <print_AX25+0x24c>)
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <print_AX25+0x260>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <print_AX25+0x24c>)
 8000f76:	f7ff f94b 	bl	8000210 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	230a      	movs	r3, #10
 8000f80:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <print_AX25+0x24c>)
 8000f82:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <print_AX25+0x254>)
 8000f84:	f004 f871 	bl	800506a <HAL_UART_Transmit>
	curr_mem += PID_len;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24

	//Print Info Field
	curr_mem += local_packet->Info_Len - 1;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9a:	4413      	add	r3, r2
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	e055      	b.n	8001050 <print_AX25+0x2cc>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4911      	ldr	r1, [pc, #68]	; (8000ff0 <print_AX25+0x26c>)
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <print_AX25+0x24c>)
 8000fae:	f004 ff9d 	bl	8005eec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <print_AX25+0x24c>)
 8000fb4:	f7ff f92c 	bl	8000210 <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <print_AX25+0x24c>)
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <print_AX25+0x254>)
 8000fc2:	f004 f852 	bl	800506a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e02a      	b.n	8001022 <print_AX25+0x29e>
 8000fcc:	200000e0 	.word	0x200000e0
 8000fd0:	20001ce4 	.word	0x20001ce4
 8000fd4:	08006b60 	.word	0x08006b60
 8000fd8:	200029e0 	.word	0x200029e0
 8000fdc:	08006b98 	.word	0x08006b98
 8000fe0:	08006bac 	.word	0x08006bac
 8000fe4:	08006bb4 	.word	0x08006bb4
 8000fe8:	08006bb8 	.word	0x08006bb8
 8000fec:	08006bcc 	.word	0x08006bcc
 8000ff0:	08006be0 	.word	0x08006be0
			sprintf(uartData, " %d ",*(curr_mem-j));
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	493e      	ldr	r1, [pc, #248]	; (80010fc <print_AX25+0x378>)
 8001002:	483f      	ldr	r0, [pc, #252]	; (8001100 <print_AX25+0x37c>)
 8001004:	f004 ff72 	bl	8005eec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001008:	483d      	ldr	r0, [pc, #244]	; (8001100 <print_AX25+0x37c>)
 800100a:	f7ff f901 	bl	8000210 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	b29a      	uxth	r2, r3
 8001012:	230a      	movs	r3, #10
 8001014:	493a      	ldr	r1, [pc, #232]	; (8001100 <print_AX25+0x37c>)
 8001016:	483b      	ldr	r0, [pc, #236]	; (8001104 <print_AX25+0x380>)
 8001018:	f004 f827 	bl	800506a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b07      	cmp	r3, #7
 8001026:	dde5      	ble.n	8000ff4 <print_AX25+0x270>
		}
		curr_mem -= 8;
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	3b08      	subs	r3, #8
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 800102e:	4a34      	ldr	r2, [pc, #208]	; (8001100 <print_AX25+0x37c>)
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <print_AX25+0x384>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001036:	4832      	ldr	r0, [pc, #200]	; (8001100 <print_AX25+0x37c>)
 8001038:	f7ff f8ea 	bl	8000210 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	230a      	movs	r3, #10
 8001042:	492f      	ldr	r1, [pc, #188]	; (8001100 <print_AX25+0x37c>)
 8001044:	482f      	ldr	r0, [pc, #188]	; (8001104 <print_AX25+0x380>)
 8001046:	f004 f810 	bl	800506a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	da00      	bge.n	800105e <print_AX25+0x2da>
 800105c:	3307      	adds	r3, #7
 800105e:	10db      	asrs	r3, r3, #3
 8001060:	461a      	mov	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4293      	cmp	r3, r2
 8001066:	db9d      	blt.n	8000fa4 <print_AX25+0x220>
	}
	curr_mem += local_packet->Info_Len;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	4413      	add	r3, r2
 8001076:	627b      	str	r3, [r7, #36]	; 0x24

	sprintf(uartData, "FCS Field = ")	;
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <print_AX25+0x37c>)
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <print_AX25+0x388>)
 800107c:	4614      	mov	r4, r2
 800107e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001080:	6020      	str	r0, [r4, #0]
 8001082:	6061      	str	r1, [r4, #4]
 8001084:	60a2      	str	r2, [r4, #8]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	7323      	strb	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800108a:	481d      	ldr	r0, [pc, #116]	; (8001100 <print_AX25+0x37c>)
 800108c:	f7ff f8c0 	bl	8000210 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	b29a      	uxth	r2, r3
 8001094:	230a      	movs	r3, #10
 8001096:	491a      	ldr	r1, [pc, #104]	; (8001100 <print_AX25+0x37c>)
 8001098:	481a      	ldr	r0, [pc, #104]	; (8001104 <print_AX25+0x380>)
 800109a:	f003 ffe6 	bl	800506a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len;i++){
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	e015      	b.n	80010d0 <print_AX25+0x34c>
		sprintf(uartData, " %d ",curr_mem[i])	;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4913      	ldr	r1, [pc, #76]	; (80010fc <print_AX25+0x378>)
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <print_AX25+0x37c>)
 80010b2:	f004 ff1b 	bl	8005eec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <print_AX25+0x37c>)
 80010b8:	f7ff f8aa 	bl	8000210 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	230a      	movs	r3, #10
 80010c2:	490f      	ldr	r1, [pc, #60]	; (8001100 <print_AX25+0x37c>)
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <print_AX25+0x380>)
 80010c6:	f003 ffd0 	bl	800506a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len;i++){
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	dde6      	ble.n	80010a4 <print_AX25+0x320>
	}
	sprintf(uartData, "\n");
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <print_AX25+0x37c>)
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <print_AX25+0x384>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <print_AX25+0x37c>)
 80010e0:	f7ff f896 	bl	8000210 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	230a      	movs	r3, #10
 80010ea:	4905      	ldr	r1, [pc, #20]	; (8001100 <print_AX25+0x37c>)
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <print_AX25+0x380>)
 80010ee:	f003 ffbc 	bl	800506a <HAL_UART_Transmit>
}
 80010f2:	bf00      	nop
 80010f4:	372c      	adds	r7, #44	; 0x2c
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08006bac 	.word	0x08006bac
 8001100:	20001ce4 	.word	0x20001ce4
 8001104:	200029e0 	.word	0x200029e0
 8001108:	08006bb4 	.word	0x08006bb4
 800110c:	08006bf4 	.word	0x08006bf4

08001110 <Tim2_OC_Callback>:
int byteArray[8];
bool got_flag_start = false;
bool got_flag_end = false;

//Timer 2 Output Compare Callback
void Tim2_OC_Callback(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
	static int save_cnt;
	static int flag_cnt;
	bool isFlag = false;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]

	freq_pin_state_last = hold_state;
 800111a:	4b75      	ldr	r3, [pc, #468]	; (80012f0 <Tim2_OC_Callback+0x1e0>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <Tim2_OC_Callback+0x1e4>)
 8001120:	701a      	strb	r2, [r3, #0]

	//Check if this is valid data
	if(clk_sync){
 8001122:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <Tim2_OC_Callback+0x1e8>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 80be 	beq.w	80012a8 <Tim2_OC_Callback+0x198>
		NRZI = (freq_pin_state_curr==freq_pin_state_last) ? 1 : 0;
 800112c:	4b73      	ldr	r3, [pc, #460]	; (80012fc <Tim2_OC_Callback+0x1ec>)
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <Tim2_OC_Callback+0x1e4>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b70      	ldr	r3, [pc, #448]	; (8001300 <Tim2_OC_Callback+0x1f0>)
 8001140:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA,D0_Pin,NRZI);
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <Tim2_OC_Callback+0x1f0>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114c:	486d      	ldr	r0, [pc, #436]	; (8001304 <Tim2_OC_Callback+0x1f4>)
 800114e:	f001 ff3d 	bl	8002fcc <HAL_GPIO_WritePin>

		//Shift byte array for next comparison
//		memmove(&byteArray[1],&byteArray[0],7*sizeof(int));
		for(int i = 7;i>0;i--){
 8001152:	2307      	movs	r3, #7
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	e00b      	b.n	8001170 <Tim2_OC_Callback+0x60>
			byteArray[i] = byteArray[i-1];
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	3b01      	subs	r3, #1
 800115c:	4a6a      	ldr	r2, [pc, #424]	; (8001308 <Tim2_OC_Callback+0x1f8>)
 800115e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001162:	4969      	ldr	r1, [pc, #420]	; (8001308 <Tim2_OC_Callback+0x1f8>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 7;i>0;i--){
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	3b01      	subs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	dcf0      	bgt.n	8001158 <Tim2_OC_Callback+0x48>
		}

		byteArray[0] = NRZI;
 8001176:	4b62      	ldr	r3, [pc, #392]	; (8001300 <Tim2_OC_Callback+0x1f0>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b62      	ldr	r3, [pc, #392]	; (8001308 <Tim2_OC_Callback+0x1f8>)
 800117e:	601a      	str	r2, [r3, #0]
		//11111100
		//01111110


		//Check if this is the flag
		for (int i = 0; i < 8; i++) {
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e014      	b.n	80011b0 <Tim2_OC_Callback+0xa0>
			if(byteArray[i] != AX25TBYTE[i]){
 8001186:	4a60      	ldr	r2, [pc, #384]	; (8001308 <Tim2_OC_Callback+0x1f8>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	495f      	ldr	r1, [pc, #380]	; (800130c <Tim2_OC_Callback+0x1fc>)
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	440a      	add	r2, r1
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	4293      	cmp	r3, r2
 8001198:	d002      	beq.n	80011a0 <Tim2_OC_Callback+0x90>
				isFlag = false;
 800119a:	2300      	movs	r3, #0
 800119c:	75fb      	strb	r3, [r7, #23]
				break;
 800119e:	e00a      	b.n	80011b6 <Tim2_OC_Callback+0xa6>
			}
			//Got to end of byte array
			if(i==7){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d101      	bne.n	80011aa <Tim2_OC_Callback+0x9a>
				isFlag = true;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 8; i++) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	dde7      	ble.n	8001186 <Tim2_OC_Callback+0x76>
			}
		}
		//If this is not a flag, copy the values into the buffer pointer
		if(isFlag){
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <Tim2_OC_Callback+0xf4>
			flag_cnt++;
 80011bc:	4b54      	ldr	r3, [pc, #336]	; (8001310 <Tim2_OC_Callback+0x200>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a53      	ldr	r2, [pc, #332]	; (8001310 <Tim2_OC_Callback+0x200>)
 80011c4:	6013      	str	r3, [r2, #0]

			//If we have a start flag, this is an end flag
			if(got_flag_start){
 80011c6:	4b53      	ldr	r3, [pc, #332]	; (8001314 <Tim2_OC_Callback+0x204>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <Tim2_OC_Callback+0xcc>
				got_flag_start = false;
 80011ce:	4b51      	ldr	r3, [pc, #324]	; (8001314 <Tim2_OC_Callback+0x204>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
				got_flag_end = true;
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <Tim2_OC_Callback+0x208>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e010      	b.n	80011fe <Tim2_OC_Callback+0xee>
			}

			//Not sure how many appending flags????????
			else if(flag_cnt>=FLAG_END_COUNT){
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <Tim2_OC_Callback+0x200>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	dd0c      	ble.n	80011fe <Tim2_OC_Callback+0xee>
				//If no start flag has occurred
				if(!got_flag_start){
 80011e4:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <Tim2_OC_Callback+0x204>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f083 0301 	eor.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <Tim2_OC_Callback+0xe8>
					got_flag_start = true;
 80011f2:	4b48      	ldr	r3, [pc, #288]	; (8001314 <Tim2_OC_Callback+0x204>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
				}

				//Reset flag count
				flag_cnt = 0;
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <Tim2_OC_Callback+0x200>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
			}

			//Reset flag var
			isFlag = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
 8001202:	e011      	b.n	8001228 <Tim2_OC_Callback+0x118>
		}

		else if(got_flag_start){
 8001204:	4b43      	ldr	r3, [pc, #268]	; (8001314 <Tim2_OC_Callback+0x204>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00d      	beq.n	8001228 <Tim2_OC_Callback+0x118>
			HAL_GPIO_TogglePin(GPIOB,D2_Pin);
 800120c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001210:	4842      	ldr	r0, [pc, #264]	; (800131c <Tim2_OC_Callback+0x20c>)
 8001212:	f001 fef4 	bl	8002ffe <HAL_GPIO_TogglePin>
			//Load the processed bit into the buffer
			save_cnt = loadBitBuffer(NRZI)+1;
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <Tim2_OC_Callback+0x1f0>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd50 	bl	8000cc0 <loadBitBuffer>
 8001220:	4603      	mov	r3, r0
 8001222:	3301      	adds	r3, #1
 8001224:	4a3e      	ldr	r2, [pc, #248]	; (8001320 <Tim2_OC_Callback+0x210>)
 8001226:	6013      	str	r3, [r2, #0]
		}

		//Found ending flag, now need to process bit buffer
		if(got_flag_end){
 8001228:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <Tim2_OC_Callback+0x208>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d02d      	beq.n	800128c <Tim2_OC_Callback+0x17c>
			got_flag_end = false;
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <Tim2_OC_Callback+0x208>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB,D3_Pin);
 8001236:	2110      	movs	r1, #16
 8001238:	4838      	ldr	r0, [pc, #224]	; (800131c <Tim2_OC_Callback+0x20c>)
 800123a:	f001 fee0 	bl	8002ffe <HAL_GPIO_TogglePin>

			//Disable Interrupts for data processing
			HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800123e:	2100      	movs	r1, #0
 8001240:	4838      	ldr	r0, [pc, #224]	; (8001324 <Tim2_OC_Callback+0x214>)
 8001242:	f002 fd3f 	bl	8003cc4 <HAL_TIM_OC_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001246:	2100      	movs	r1, #0
 8001248:	4837      	ldr	r0, [pc, #220]	; (8001328 <Tim2_OC_Callback+0x218>)
 800124a:	f002 fe73 	bl	8003f34 <HAL_TIM_IC_Stop_IT>

			//Buffer will be filled with ending flags, dont want this in ax.25 buffer
			save_cnt -= FLAG_SIZE;
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <Tim2_OC_Callback+0x210>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3b08      	subs	r3, #8
 8001254:	4a32      	ldr	r2, [pc, #200]	; (8001320 <Tim2_OC_Callback+0x210>)
 8001256:	6013      	str	r3, [r2, #0]
			rxBit_count = save_cnt;
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <Tim2_OC_Callback+0x210>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a33      	ldr	r2, [pc, #204]	; (800132c <Tim2_OC_Callback+0x21c>)
 800125e:	6013      	str	r3, [r2, #0]
			memcpy(global_packet.AX25_PACKET,bitBuffer,save_cnt);
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <Tim2_OC_Callback+0x210>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4932      	ldr	r1, [pc, #200]	; (8001330 <Tim2_OC_Callback+0x220>)
 8001268:	4832      	ldr	r0, [pc, #200]	; (8001334 <Tim2_OC_Callback+0x224>)
 800126a:	f004 fe13 	bl	8005e94 <memcpy>
//			}
//
//			sprintf(uartData, "Done printing AX.25 buffer\n");
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			remove_bit_stuffing();
 800126e:	f7ff fa2d 	bl	80006cc <remove_bit_stuffing>


			//Receive data
			receiving_AX25();
 8001272:	f7ff f9e3 	bl	800063c <receiving_AX25>

			save_cnt = 0;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <Tim2_OC_Callback+0x210>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

			//Enable Interrupts since data processing is complete
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	4829      	ldr	r0, [pc, #164]	; (8001324 <Tim2_OC_Callback+0x214>)
 8001280:	f002 fc9c 	bl	8003bbc <HAL_TIM_OC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <Tim2_OC_Callback+0x218>)
 8001288:	f002 fdec 	bl	8003e64 <HAL_TIM_IC_Start_IT>
		}

		//Prepare OC for next sample
		uint32_t this_capture = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <Tim2_OC_Callback+0x214>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001292:	60bb      	str	r3, [r7, #8]
		uint32_t next_sampl = this_capture + bit_sample_period;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800129a:	3335      	adds	r3, #53	; 0x35
 800129c:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,next_sampl); // if we have not received a transition to the input capture module, we want to refresh the output compare module with the last known bit period
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <Tim2_OC_Callback+0x214>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
 80012a6:	e00d      	b.n	80012c4 <Tim2_OC_Callback+0x1b4>
	}

	//Clock not syncd
	else
	{
		HAL_GPIO_TogglePin(GPIOA,D1_Pin);
 80012a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ac:	4815      	ldr	r0, [pc, #84]	; (8001304 <Tim2_OC_Callback+0x1f4>)
 80012ae:	f001 fea6 	bl	8002ffe <HAL_GPIO_TogglePin>
		got_flag_start = false;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <Tim2_OC_Callback+0x204>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		got_flag_end = false;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <Tim2_OC_Callback+0x208>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
		flag_cnt = 0;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <Tim2_OC_Callback+0x200>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
	}

	//Inc number of bits since last clock sync
	captured_bits_count++;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <Tim2_OC_Callback+0x228>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <Tim2_OC_Callback+0x228>)
 80012ce:	701a      	strb	r2, [r3, #0]
	if(captured_bits_count >= samp_per_bit * no_clk_max_cnt){
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <Tim2_OC_Callback+0x228>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b3f      	cmp	r3, #63	; 0x3f
 80012d6:	d902      	bls.n	80012de <Tim2_OC_Callback+0x1ce>
		clk_sync = false;	//Clock is no longer sync
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <Tim2_OC_Callback+0x1e8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
	}
	hold_state = freq_pin_state_curr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <Tim2_OC_Callback+0x1ec>)
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <Tim2_OC_Callback+0x1e0>)
 80012e4:	701a      	strb	r2, [r3, #0]

	return;
 80012e6:	bf00      	nop
}
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20003480 	.word	0x20003480
 80012f4:	200000bf 	.word	0x200000bf
 80012f8:	200000ad 	.word	0x200000ad
 80012fc:	200000be 	.word	0x200000be
 8001300:	20003488 	.word	0x20003488
 8001304:	40020000 	.word	0x40020000
 8001308:	2000348c 	.word	0x2000348c
 800130c:	20000008 	.word	0x20000008
 8001310:	200000c4 	.word	0x200000c4
 8001314:	200000c0 	.word	0x200000c0
 8001318:	200000c1 	.word	0x200000c1
 800131c:	40020400 	.word	0x40020400
 8001320:	200000c8 	.word	0x200000c8
 8001324:	200029a0 	.word	0x200029a0
 8001328:	200028a8 	.word	0x200028a8
 800132c:	200000a0 	.word	0x200000a0
 8001330:	20002a20 	.word	0x20002a20
 8001334:	200000e0 	.word	0x200000e0
 8001338:	200000ac 	.word	0x200000ac

0800133c <Tim3_IT_Callback>:
void Tim3_IT_Callback() {
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	if (mode) {
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <Tim3_IT_Callback+0x1c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <Tim3_IT_Callback+0x12>
		midbit = false;
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <Tim3_IT_Callback+0x20>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
	}
	//Timer 3 does nothing in RX
	else {}
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20002988 	.word	0x20002988
 800135c:	200000a4 	.word	0x200000a4

08001360 <Tim5_IC_Callback>:
//Timer 5 Input Capture Callback
void Tim5_IC_Callback(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint32_t this_capture = 0;		// simply stores either the rising or falling capture, based on which state we are in (avoids duplicate code)
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]

	//Grap pin state for OC timer
	freq_pin_state_curr = signal_edge;
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <Tim5_IC_Callback+0x104>)
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <Tim5_IC_Callback+0x108>)
 8001370:	701a      	strb	r2, [r3, #0]

	//Rising Edge
	if (signal_edge)
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <Tim5_IC_Callback+0x104>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d01f      	beq.n	80013ba <Tim5_IC_Callback+0x5a>
	{
		rising_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1); //Time-stamp interrupt
 800137a:	2100      	movs	r1, #0
 800137c:	483b      	ldr	r0, [pc, #236]	; (800146c <Tim5_IC_Callback+0x10c>)
 800137e:	f003 f905 	bl	800458c <HAL_TIM_ReadCapturedValue>
 8001382:	4602      	mov	r2, r0
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <Tim5_IC_Callback+0x110>)
 8001386:	601a      	str	r2, [r3, #0]
		signal_edge = FALLING_EDGE;		// look for falling edge on next capture
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <Tim5_IC_Callback+0x104>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
		rise_captured = true;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <Tim5_IC_Callback+0x114>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <Tim5_IC_Callback+0x114>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d02d      	beq.n	80013f8 <Tim5_IC_Callback+0x98>
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <Tim5_IC_Callback+0x118>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d029      	beq.n	80013f8 <Tim5_IC_Callback+0x98>
		{
			capture_difference = rising_capture - falling_capture;		// calculate difference
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <Tim5_IC_Callback+0x110>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <Tim5_IC_Callback+0x11c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	4a34      	ldr	r2, [pc, #208]	; (8001480 <Tim5_IC_Callback+0x120>)
 80013b0:	6013      	str	r3, [r2, #0]
			this_capture = rising_capture;		// set current sample to rising edge
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <Tim5_IC_Callback+0x110>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	e01e      	b.n	80013f8 <Tim5_IC_Callback+0x98>
	}

	//Falling edge
	else
	{
		falling_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);		//Time-stamp interrupt
 80013ba:	2100      	movs	r1, #0
 80013bc:	482b      	ldr	r0, [pc, #172]	; (800146c <Tim5_IC_Callback+0x10c>)
 80013be:	f003 f8e5 	bl	800458c <HAL_TIM_ReadCapturedValue>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <Tim5_IC_Callback+0x11c>)
 80013c6:	601a      	str	r2, [r3, #0]
		fall_captured = true;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <Tim5_IC_Callback+0x118>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
		signal_edge = RISING_EDGE;		// look for rising edge on next capture
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <Tim5_IC_Callback+0x104>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <Tim5_IC_Callback+0x114>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00d      	beq.n	80013f8 <Tim5_IC_Callback+0x98>
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <Tim5_IC_Callback+0x118>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <Tim5_IC_Callback+0x98>
		{
			capture_difference = falling_capture - rising_capture;		// calculate difference
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <Tim5_IC_Callback+0x11c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <Tim5_IC_Callback+0x110>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <Tim5_IC_Callback+0x120>)
 80013f0:	6013      	str	r3, [r2, #0]
			this_capture = falling_capture;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <Tim5_IC_Callback+0x11c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	607b      	str	r3, [r7, #4]
		}
	}

	//Have now captured the transition period
	//Can use this to align sampling clock
	if (rise_captured && fall_captured)
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <Tim5_IC_Callback+0x114>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d02d      	beq.n	800145c <Tim5_IC_Callback+0xfc>
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <Tim5_IC_Callback+0x118>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d029      	beq.n	800145c <Tim5_IC_Callback+0xfc>
	{
		//Check if the transition was a valid transition period to use
		if(SYMBOL_PERIOD-SYMBOL_MARGIN < capture_difference && capture_difference < SYMBOL_PERIOD+SYMBOL_MARGIN){
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <Tim5_IC_Callback+0x120>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001410:	4293      	cmp	r3, r2
 8001412:	d923      	bls.n	800145c <Tim5_IC_Callback+0xfc>
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <Tim5_IC_Callback+0x120>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f648 7239 	movw	r2, #36665	; 0x8f39
 800141c:	4293      	cmp	r3, r2
 800141e:	d81d      	bhi.n	800145c <Tim5_IC_Callback+0xfc>

			//Predict clock
			uint32_t next_sampl;

			//If clk was not sync, start sample one period later
			if(!clk_sync){
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <Tim5_IC_Callback+0x124>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f083 0301 	eor.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <Tim5_IC_Callback+0xde>
				resetBitBuffer();
 800142e:	f7ff fc89 	bl	8000d44 <resetBitBuffer>
				next_sampl = this_capture + SYMBOL_PERIOD;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001438:	3335      	adds	r3, #53	; 0x35
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	e004      	b.n	8001448 <Tim5_IC_Callback+0xe8>
			}
			//If clk was sync, sample at normal interval
			else {
				next_sampl = this_capture + bit_sample_period;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001444:	3335      	adds	r3, #53	; 0x35
 8001446:	603b      	str	r3, [r7, #0]
			}
			//Prepare OC timer int
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_sampl);
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <Tim5_IC_Callback+0x128>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
			//Reset roll-over value
			captured_bits_count = 0;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <Tim5_IC_Callback+0x12c>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]

			//Have now synced with clock
			clk_sync = true;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <Tim5_IC_Callback+0x124>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000011 	.word	0x20000011
 8001468:	200000be 	.word	0x200000be
 800146c:	200028a8 	.word	0x200028a8
 8001470:	200000b0 	.word	0x200000b0
 8001474:	200000bc 	.word	0x200000bc
 8001478:	200000bd 	.word	0x200000bd
 800147c:	200000b4 	.word	0x200000b4
 8001480:	200000b8 	.word	0x200000b8
 8001484:	200000ad 	.word	0x200000ad
 8001488:	200029a0 	.word	0x200029a0
 800148c:	200000ac 	.word	0x200000ac

08001490 <init_UART>:

void init_UART(){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8001494:	2201      	movs	r2, #1
 8001496:	4909      	ldr	r1, [pc, #36]	; (80014bc <init_UART+0x2c>)
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <init_UART+0x30>)
 800149a:	f003 fe7f 	bl	800519c <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <init_UART+0x34>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <init_UART+0x34>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <init_UART+0x34>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <init_UART+0x34>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20001458 	.word	0x20001458
 80014c0:	200029e0 	.word	0x200029e0
 80014c4:	2000144c 	.word	0x2000144c

080014c8 <UART2_Exception_Callback>:
void UART2_Exception_Callback(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 80014cc:	2201      	movs	r2, #1
 80014ce:	491d      	ldr	r1, [pc, #116]	; (8001544 <UART2_Exception_Callback+0x7c>)
 80014d0:	481d      	ldr	r0, [pc, #116]	; (8001548 <UART2_Exception_Callback+0x80>)
 80014d2:	f003 fe63 	bl	800519c <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <UART2_Exception_Callback+0x84>)
 80014d8:	2200      	movs	r2, #0
 80014da:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <UART2_Exception_Callback+0x84>)
 80014de:	7b1b      	ldrb	r3, [r3, #12]
 80014e0:	2bc0      	cmp	r3, #192	; 0xc0
 80014e2:	d104      	bne.n	80014ee <UART2_Exception_Callback+0x26>
		  UART_packet.flags++;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <UART2_Exception_Callback+0x84>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <UART2_Exception_Callback+0x84>)
 80014ec:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <UART2_Exception_Callback+0x84>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <UART2_Exception_Callback+0x88>)
 80014f6:	4413      	add	r3, r2
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <UART2_Exception_Callback+0x84>)
 80014fa:	7b12      	ldrb	r2, [r2, #12]
 80014fc:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <UART2_Exception_Callback+0x84>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <UART2_Exception_Callback+0x84>)
 8001506:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <UART2_Exception_Callback+0x84>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	dd16      	ble.n	800153e <UART2_Exception_Callback+0x76>
		  if(!mode){
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <UART2_Exception_Callback+0x8c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <UART2_Exception_Callback+0x5c>
			  changeMode = true;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <UART2_Exception_Callback+0x90>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <UART2_Exception_Callback+0x84>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <UART2_Exception_Callback+0x84>)
 800152c:	2201      	movs	r2, #1
 800152e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <UART2_Exception_Callback+0x84>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <UART2_Exception_Callback+0x84>)
 8001536:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <UART2_Exception_Callback+0x84>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

	  }
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001458 	.word	0x20001458
 8001548:	200029e0 	.word	0x200029e0
 800154c:	2000144c 	.word	0x2000144c
 8001550:	2000145a 	.word	0x2000145a
 8001554:	20002988 	.word	0x20002988
 8001558:	200000a5 	.word	0x200000a5

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f000 fdf4 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f814 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f000 fa2e 	bl	80019c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f000 fa0c 	bl	8001988 <MX_DMA_Init>
  MX_DAC_Init();
 8001570:	f000 f87a 	bl	8001668 <MX_DAC_Init>
  MX_TIM2_Init();
 8001574:	f000 f8a2 	bl	80016bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001578:	f000 f916 	bl	80017a8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800157c:	f000 f9d2 	bl	8001924 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001580:	f000 f960 	bl	8001844 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	uart_gpio_init();
 8001584:	f000 fb22 	bl	8001bcc <uart_gpio_init>
	initProgram(false);
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fb17 	bl	8000bbc <initProgram>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800158e:	e7fe      	b.n	800158e <main+0x32>

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2234      	movs	r2, #52	; 0x34
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fc9c 	bl	8005edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <SystemClock_Config+0xd0>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a28      	ldr	r2, [pc, #160]	; (8001660 <SystemClock_Config+0xd0>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <SystemClock_Config+0xd0>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <SystemClock_Config+0xd4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <SystemClock_Config+0xd4>)
 80015de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <SystemClock_Config+0xd4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f0:	2302      	movs	r3, #2
 80015f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f8:	2310      	movs	r3, #16
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fc:	2302      	movs	r3, #2
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001600:	2300      	movs	r3, #0
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001604:	2308      	movs	r3, #8
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001608:	2350      	movs	r3, #80	; 0x50
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160c:	2302      	movs	r3, #2
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001610:	2302      	movs	r3, #2
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001614:	2302      	movs	r3, #2
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4618      	mov	r0, r3
 800161e:	f001 ffe7 	bl	80035f0 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001628:	f000 faf8 	bl	8001c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	2102      	movs	r1, #2
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fd17 	bl	800307c <HAL_RCC_ClockConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001654:	f000 fae2 	bl	8001c1c <Error_Handler>
  }
}
 8001658:	bf00      	nop
 800165a:	3750      	adds	r7, #80	; 0x50
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_DAC_Init+0x4c>)
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <MX_DAC_Init+0x50>)
 800167a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <MX_DAC_Init+0x4c>)
 800167e:	f000 fee8 	bl	8002452 <HAL_DAC_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001688:	f000 fac8 	bl	8001c1c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800168c:	2324      	movs	r3, #36	; 0x24
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_DAC_Init+0x4c>)
 800169c:	f000 ff3c 	bl	8002518 <HAL_DAC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016a6:	f000 fab9 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000298c 	.word	0x2000298c
 80016b8:	40007400 	.word	0x40007400

080016bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	; 0x38
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <MX_TIM2_Init+0xe8>)
 80016ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <MX_TIM2_Init+0xe8>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <MX_TIM2_Init+0xe8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001702:	f04f 32ff 	mov.w	r2, #4294967295
 8001706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <MX_TIM2_Init+0xe8>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001714:	4823      	ldr	r0, [pc, #140]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001716:	f002 f9c5 	bl	8003aa4 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001720:	f000 fa7c 	bl	8001c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	4619      	mov	r1, r3
 8001730:	481c      	ldr	r0, [pc, #112]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001732:	f002 fe73 	bl	800441c <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800173c:	f000 fa6e 	bl	8001c1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001740:	4818      	ldr	r0, [pc, #96]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001742:	f002 fa05 	bl	8003b50 <HAL_TIM_OC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800174c:	f000 fa66 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4619      	mov	r1, r3
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001760:	f003 fba6 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800176a:	f000 fa57 	bl	8001c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001786:	f002 fd4d 	bl	8004224 <HAL_TIM_OC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001790:	f000 fa44 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001794:	4803      	ldr	r0, [pc, #12]	; (80017a4 <MX_TIM2_Init+0xe8>)
 8001796:	f000 fb73 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 800179a:	bf00      	nop
 800179c:	3738      	adds	r7, #56	; 0x38
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200029a0 	.word	0x200029a0

080017a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_TIM3_Init+0x94>)
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <MX_TIM3_Init+0x98>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_TIM3_Init+0x94>)
 80017cc:	224f      	movs	r2, #79	; 0x4f
 80017ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_TIM3_Init+0x94>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 828;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_TIM3_Init+0x94>)
 80017d8:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80017dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_TIM3_Init+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_TIM3_Init+0x94>)
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ea:	4814      	ldr	r0, [pc, #80]	; (800183c <MX_TIM3_Init+0x94>)
 80017ec:	f002 f95a 	bl	8003aa4 <HAL_TIM_Base_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80017f6:	f000 fa11 	bl	8001c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	4619      	mov	r1, r3
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_TIM3_Init+0x94>)
 8001808:	f002 fe08 	bl	800441c <HAL_TIM_ConfigClockSource>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001812:	f000 fa03 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_TIM3_Init+0x94>)
 8001824:	f003 fb44 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800182e:	f000 f9f5 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200028e8 	.word	0x200028e8
 8001840:	40000400 	.word	0x40000400

08001844 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0318 	add.w	r3, r7, #24
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <MX_TIM5_Init+0xd8>)
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <MX_TIM5_Init+0xdc>)
 8001872:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2-1;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <MX_TIM5_Init+0xd8>)
 8001876:	2201      	movs	r2, #1
 8001878:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <MX_TIM5_Init+0xd8>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <MX_TIM5_Init+0xd8>)
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <MX_TIM5_Init+0xd8>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <MX_TIM5_Init+0xd8>)
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001894:	4821      	ldr	r0, [pc, #132]	; (800191c <MX_TIM5_Init+0xd8>)
 8001896:	f002 f905 	bl	8003aa4 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80018a0:	f000 f9bc 	bl	8001c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	4619      	mov	r1, r3
 80018b0:	481a      	ldr	r0, [pc, #104]	; (800191c <MX_TIM5_Init+0xd8>)
 80018b2:	f002 fdb3 	bl	800441c <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80018bc:	f000 f9ae 	bl	8001c1c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80018c0:	4816      	ldr	r0, [pc, #88]	; (800191c <MX_TIM5_Init+0xd8>)
 80018c2:	f002 fa99 	bl	8003df8 <HAL_TIM_IC_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018cc:	f000 f9a6 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	480f      	ldr	r0, [pc, #60]	; (800191c <MX_TIM5_Init+0xd8>)
 80018e0:	f003 fae6 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80018ea:	f000 f997 	bl	8001c1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80018ee:	230a      	movs	r3, #10
 80018f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018f2:	2301      	movs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_TIM5_Init+0xd8>)
 8001906:	f002 fced 	bl	80042e4 <HAL_TIM_IC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001910:	f000 f984 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200028a8 	.word	0x200028a8
 8001920:	40000c00 	.word	0x40000c00

08001924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <MX_USART2_UART_Init+0x60>)
 800192c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <MX_USART2_UART_Init+0x5c>)
 800195c:	f003 fb38 	bl	8004fd0 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001966:	f000 f959 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2026      	movs	r0, #38	; 0x26
 8001970:	f000 fd39 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001974:	2026      	movs	r0, #38	; 0x26
 8001976:	f000 fd52 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200029e0 	.word	0x200029e0
 8001984:	40004400 	.word	0x40004400

08001988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_DMA_Init+0x3c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <MX_DMA_Init+0x3c>)
 8001998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_DMA_Init+0x3c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2010      	movs	r0, #16
 80019b0:	f000 fd19 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019b4:	2010      	movs	r0, #16
 80019b6:	f000 fd32 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <MX_GPIO_Init+0x134>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a45      	ldr	r2, [pc, #276]	; (8001afc <MX_GPIO_Init+0x134>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <MX_GPIO_Init+0x134>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a37      	ldr	r2, [pc, #220]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a30      	ldr	r2, [pc, #192]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <MX_GPIO_Init+0x134>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D1_Pin|D0_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001a54:	482a      	ldr	r0, [pc, #168]	; (8001b00 <MX_GPIO_Init+0x138>)
 8001a56:	f001 fab9 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4829      	ldr	r0, [pc, #164]	; (8001b04 <MX_GPIO_Init+0x13c>)
 8001a60:	f001 fab4 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001a6a:	4827      	ldr	r0, [pc, #156]	; (8001b08 <MX_GPIO_Init+0x140>)
 8001a6c:	f001 faae 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <MX_GPIO_Init+0x144>)
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <MX_GPIO_Init+0x13c>)
 8001a86:	f001 f90f 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D1_Pin D0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D1_Pin|D0_Pin;
 8001a8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4817      	ldr	r0, [pc, #92]	; (8001b00 <MX_GPIO_Init+0x138>)
 8001aa4:	f001 f900 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <MX_GPIO_Init+0x13c>)
 8001ac0:	f001 f8f2 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin;
 8001ac4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	480a      	ldr	r0, [pc, #40]	; (8001b08 <MX_GPIO_Init+0x140>)
 8001ade:	f001 f8e3 	bl	8002ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2028      	movs	r0, #40	; 0x28
 8001ae8:	f000 fc7d 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aec:	2028      	movs	r0, #40	; 0x28
 8001aee:	f000 fc96 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	10210000 	.word	0x10210000

08001b10 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

OC_count = 0;
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b20:	d10b      	bne.n	8001b3a <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7f1b      	ldrb	r3, [r3, #28]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_TIM_OC_DelayElapsedCallback+0x2a>
	{
		OC_count++;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8001b32:	6013      	str	r3, [r2, #0]
		Tim2_OC_Callback();
 8001b34:	f7ff faec 	bl	8001110 <Tim2_OC_Callback>
	}
	return;
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
}
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200000cc 	.word	0x200000cc

08001b48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d102      	bne.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3_IT_Callback();
 8001b58:	f7ff fbf0 	bl	800133c <Tim3_IT_Callback>
	else
		__NOP();

	return;
 8001b5c:	e001      	b.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x1a>
		__NOP();
 8001b5e:	bf00      	nop
	return;
 8001b60:	bf00      	nop
}
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200028e8 	.word	0x200028e8

08001b6c <HAL_TIM_IC_CaptureCallback>:

int IC_count =0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	//Make sure this is the right timer and channel
	if (htim->Instance == TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x34>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10b      	bne.n	8001b96 <HAL_TIM_IC_CaptureCallback+0x2a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7f1b      	ldrb	r3, [r3, #28]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_TIM_IC_CaptureCallback+0x2a>
	{
		IC_count++;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001b8e:	6013      	str	r3, [r2, #0]
		Tim5_IC_Callback();
 8001b90:	f7ff fbe6 	bl	8001360 <Tim5_IC_Callback>
	}

	return;
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
}
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40000c00 	.word	0x40000c00
 8001ba4:	200000d0 	.word	0x200000d0

08001ba8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_UART_RxCpltCallback+0x20>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_Exception_Callback();
 8001bba:	f7ff fc85 	bl	80014c8 <UART2_Exception_Callback>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40004400 	.word	0x40004400

08001bcc <uart_gpio_init>:

void uart_gpio_init()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <uart_gpio_init+0x48>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <uart_gpio_init+0x48>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <uart_gpio_init+0x48>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <uart_gpio_init+0x4c>)
 8001c08:	f001 f84e 	bl	8002ca8 <HAL_GPIO_Init>
}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	f000 fbb0 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_DAC_MspInit+0xdc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d158      	bne.n	8001d50 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_DAC_MspInit+0xe0>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <HAL_DAC_MspInit+0xe0>)
 8001ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_DAC_MspInit+0xe0>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_DAC_MspInit+0xe0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_DAC_MspInit+0xe0>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_DAC_MspInit+0xe0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	481d      	ldr	r0, [pc, #116]	; (8001d60 <HAL_DAC_MspInit+0xe4>)
 8001cea:	f000 ffdd 	bl	8002ca8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_DAC_MspInit+0xec>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001cf6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001cfa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d16:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d26:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d36:	f000 fc3d 	bl	80025b4 <HAL_DMA_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001d40:	f7ff ff6c 	bl	8001c1c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_DAC_MspInit+0xe8>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40007400 	.word	0x40007400
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	20002928 	.word	0x20002928
 8001d68:	40026088 	.word	0x40026088

08001d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d116      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	201c      	movs	r0, #28
 8001db0:	f000 fb19 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db4:	201c      	movs	r0, #28
 8001db6:	f000 fb32 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001dba:	e054      	b.n	8001e66 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <HAL_TIM_Base_MspInit+0x108>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d116      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	201d      	movs	r0, #29
 8001de8:	f000 fafd 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dec:	201d      	movs	r0, #29
 8001dee:	f000 fb16 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001df2:	e038      	b.n	8001e66 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_TIM_Base_MspInit+0x10c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d133      	bne.n	8001e66 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_TIM_Base_MspInit+0x104>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e46:	2302      	movs	r3, #2
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <HAL_TIM_Base_MspInit+0x110>)
 8001e52:	f000 ff29 	bl	8002ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2032      	movs	r0, #50	; 0x32
 8001e5c:	f000 fac3 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e60:	2032      	movs	r0, #50	; 0x32
 8001e62:	f000 fadc 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	; 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000c00 	.word	0x40000c00
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d11e      	bne.n	8001ee0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_TIM_MspPostInit+0x68>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_TIM_MspPostInit+0x68>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_TIM_MspPostInit+0x68>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4804      	ldr	r0, [pc, #16]	; (8001eec <HAL_TIM_MspPostInit+0x6c>)
 8001edc:	f000 fee4 	bl	8002ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <HAL_UART_MspInit+0x94>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d133      	bne.n	8001f7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f66:	f000 fe9f 	bl	8002ca8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2026      	movs	r0, #38	; 0x26
 8001f70:	f000 fa39 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f74:	2026      	movs	r0, #38	; 0x26
 8001f76:	f000 fa52 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40004400 	.word	0x40004400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 f904 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA1_Stream5_IRQHandler+0x10>)
 8001ff2:	f000 fc1f 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20002928 	.word	0x20002928

08002000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <TIM2_IRQHandler+0x10>)
 8002006:	f002 f805 	bl	8004014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200029a0 	.word	0x200029a0

08002014 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <TIM3_IRQHandler+0x10>)
 800201a:	f001 fffb 	bl	8004014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200028e8 	.word	0x200028e8

08002028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <USART2_IRQHandler+0x10>)
 800202e:	f003 f90b 	bl	8005248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200029e0 	.word	0x200029e0

0800203c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002040:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002044:	f000 fff6 	bl	8003034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <TIM5_IRQHandler+0x10>)
 8002052:	f001 ffdf 	bl	8004014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200028a8 	.word	0x200028a8

08002060 <_sbrk>:
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
 8002090:	f003 fed6 	bl	8005e40 <__errno>
 8002094:	4602      	mov	r2, r0
 8002096:	230c      	movs	r3, #12
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20020000 	.word	0x20020000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	200000d4 	.word	0x200000d4
 80020c8:	200034b8 	.word	0x200034b8

080020cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <SystemInit+0x28>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <SystemInit+0x28>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SystemInit+0x28>)
 80020e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e6:	609a      	str	r2, [r3, #8]
#endif
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002130 <LoopFillZerobss+0x14>
 80020fc:	2100      	movs	r1, #0
 80020fe:	e003      	b.n	8002108 <LoopCopyDataInit>

08002100 <CopyDataInit>:
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <LoopFillZerobss+0x18>)
 8002102:	585b      	ldr	r3, [r3, r1]
 8002104:	5043      	str	r3, [r0, r1]
 8002106:	3104      	adds	r1, #4

08002108 <LoopCopyDataInit>:
 8002108:	480b      	ldr	r0, [pc, #44]	; (8002138 <LoopFillZerobss+0x1c>)
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <LoopFillZerobss+0x20>)
 800210c:	1842      	adds	r2, r0, r1
 800210e:	429a      	cmp	r2, r3
 8002110:	d3f6      	bcc.n	8002100 <CopyDataInit>
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <LoopFillZerobss+0x24>)
 8002114:	e002      	b.n	800211c <LoopFillZerobss>

08002116 <FillZerobss>:
 8002116:	2300      	movs	r3, #0
 8002118:	f842 3b04 	str.w	r3, [r2], #4

0800211c <LoopFillZerobss>:
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <LoopFillZerobss+0x28>)
 800211e:	429a      	cmp	r2, r3
 8002120:	d3f9      	bcc.n	8002116 <FillZerobss>
 8002122:	f7ff ffd3 	bl	80020cc <SystemInit>
 8002126:	f003 fe91 	bl	8005e4c <__libc_init_array>
 800212a:	f7ff fa17 	bl	800155c <main>
 800212e:	4770      	bx	lr
 8002130:	20020000 	.word	0x20020000
 8002134:	08006de4 	.word	0x08006de4
 8002138:	20000000 	.word	0x20000000
 800213c:	20000084 	.word	0x20000084
 8002140:	20000084 	.word	0x20000084
 8002144:	200034b4 	.word	0x200034b4

08002148 <ADC_IRQHandler>:
 8002148:	e7fe      	b.n	8002148 <ADC_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_Init+0x40>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_Init+0x40>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_Init+0x40>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f92b 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	2000      	movs	r0, #0
 800217c:	f000 f808 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fd54 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_InitTick+0x54>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f943 	bl	800243a <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00e      	b.n	80021dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d80a      	bhi.n	80021da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f000 f90b 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d0:	4a06      	ldr	r2, [pc, #24]	; (80021ec <HAL_InitTick+0x5c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000014 	.word	0x20000014
 80021e8:	2000001c 	.word	0x2000001c
 80021ec:	20000018 	.word	0x20000018

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000001c 	.word	0x2000001c
 8002214:	200034ac 	.word	0x200034ac

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	200034ac 	.word	0x200034ac

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e014      	b.n	800248e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fc01 	bl	8001c7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43da      	mvns	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	400a      	ands	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f915 	bl	8002710 <HAL_DMA_Abort>
 80024e6:	4603      	mov	r3, r0
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e006      	b.n	80024fa <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f90d 	bl	8002710 <HAL_DMA_Abort>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2204      	movs	r2, #4
 8002504:	711a      	strb	r2, [r3, #4]
 8002506:	e002      	b.n	800250e <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	795b      	ldrb	r3, [r3, #5]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_DAC_ConfigChannel+0x20>
 8002534:	2302      	movs	r3, #2
 8002536:	e036      	b.n	80025a6 <HAL_DAC_ConfigChannel+0x8e>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2202      	movs	r2, #2
 8002542:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800254c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4013      	ands	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	22c0      	movs	r2, #192	; 0xc0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fe2a 	bl	8002218 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e099      	b.n	8002704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f0:	e00f      	b.n	8002612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f2:	f7ff fe11 	bl	8002218 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d908      	bls.n	8002612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e078      	b.n	8002704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e8      	bne.n	80025f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_DMA_Init+0x158>)
 800262c:	4013      	ands	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800263e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2b04      	cmp	r3, #4
 800266a:	d107      	bne.n	800267c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4313      	orrs	r3, r2
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0307 	bic.w	r3, r3, #7
 8002692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d117      	bne.n	80026d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fa7b 	bl	8002bb4 <DMA_CheckFifoParam>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026d2:	2301      	movs	r3, #1
 80026d4:	e016      	b.n	8002704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa32 	bl	8002b48 <DMA_CalcBaseAndBitshift>
 80026e4:	4603      	mov	r3, r0
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	223f      	movs	r2, #63	; 0x3f
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	f010803f 	.word	0xf010803f

08002710 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800271e:	f7ff fd7b 	bl	8002218 <HAL_GetTick>
 8002722:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d008      	beq.n	8002742 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e052      	b.n	80027e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0216 	bic.w	r2, r2, #22
 8002750:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002760:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <HAL_DMA_Abort+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0208 	bic.w	r2, r2, #8
 8002780:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002792:	e013      	b.n	80027bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002794:	f7ff fd40 	bl	8002218 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d90c      	bls.n	80027bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2203      	movs	r2, #3
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e015      	b.n	80027e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e4      	bne.n	8002794 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	223f      	movs	r2, #63	; 0x3f
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e00c      	b.n	8002828 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2205      	movs	r2, #5
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002840:	4b92      	ldr	r3, [pc, #584]	; (8002a8c <HAL_DMA_IRQHandler+0x258>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a92      	ldr	r2, [pc, #584]	; (8002a90 <HAL_DMA_IRQHandler+0x25c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0a9b      	lsrs	r3, r3, #10
 800284c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2208      	movs	r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0204 	bic.w	r2, r2, #4
 8002886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2208      	movs	r2, #8
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	2201      	movs	r2, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	2204      	movs	r2, #4
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	2204      	movs	r2, #4
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	f043 0204 	orr.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	2210      	movs	r2, #16
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d043      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d03c      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	2210      	movs	r2, #16
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d018      	beq.n	8002976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d108      	bne.n	8002964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
 8002962:	e01f      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e016      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0208 	bic.w	r2, r2, #8
 8002992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2220      	movs	r2, #32
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 808e 	beq.w	8002ad2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8086 	beq.w	8002ad2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2220      	movs	r2, #32
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d136      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0216 	bic.w	r2, r2, #22
 80029ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x1da>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0208 	bic.w	r2, r2, #8
 8002a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	223f      	movs	r2, #63	; 0x3f
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d07d      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
        }
        return;
 8002a4a:	e078      	b.n	8002b3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01c      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d108      	bne.n	8002a7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d030      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e02b      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d027      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
 8002a8a:	e022      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x29e>
 8002a8c:	20000014 	.word	0x20000014
 8002a90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0210 	bic.w	r2, r2, #16
 8002ab0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d032      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d022      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2205      	movs	r2, #5
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d307      	bcc.n	8002b1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f2      	bne.n	8002afe <HAL_DMA_IRQHandler+0x2ca>
 8002b18:	e000      	b.n	8002b1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b1a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e000      	b.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b3e:	bf00      	nop
    }
  }
}
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop

08002b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b10      	subs	r3, #16
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <DMA_CalcBaseAndBitshift+0x64>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d909      	bls.n	8002b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	; 0x58
 8002b88:	e007      	b.n	8002b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	aaaaaaab 	.word	0xaaaaaaab
 8002bb0:	08006d98 	.word	0x08006d98

08002bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d855      	bhi.n	8002c80 <DMA_CheckFifoParam+0xcc>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <DMA_CheckFifoParam+0x28>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c81 	.word	0x08002c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d045      	beq.n	8002c84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e042      	b.n	8002c84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c06:	d13f      	bne.n	8002c88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e03c      	b.n	8002c88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c16:	d121      	bne.n	8002c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d836      	bhi.n	8002c8c <DMA_CheckFifoParam+0xd8>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <DMA_CheckFifoParam+0x70>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c3b 	.word	0x08002c3b
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002c4d 	.word	0x08002c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e02f      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e021      	b.n	8002c90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c54:	d11e      	bne.n	8002c94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c5a:	e01b      	b.n	8002c94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <DMA_CheckFifoParam+0xb4>
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d003      	beq.n	8002c6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c66:	e018      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e015      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7e:	e00b      	b.n	8002c98 <DMA_CheckFifoParam+0xe4>
      break;
 8002c80:	bf00      	nop
 8002c82:	e00a      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c84:	bf00      	nop
 8002c86:	e008      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e006      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e004      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c90:	bf00      	nop
 8002c92:	e002      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;   
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c98:	bf00      	nop
    }
  } 
  
  return status; 
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e165      	b.n	8002f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 8154 	bne.w	8002f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d00b      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf6:	2b11      	cmp	r3, #17
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d130      	bne.n	8002d64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 0201 	and.w	r2, r3, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0xfc>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80ae 	beq.w	8002f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b5c      	ldr	r3, [pc, #368]	; (8002fa4 <HAL_GPIO_Init+0x2fc>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_GPIO_Init+0x2fc>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3e:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_GPIO_Init+0x2fc>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a57      	ldr	r2, [pc, #348]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <HAL_GPIO_Init+0x304>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d025      	beq.n	8002ec2 <HAL_GPIO_Init+0x21a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4d      	ldr	r2, [pc, #308]	; (8002fb0 <HAL_GPIO_Init+0x308>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <HAL_GPIO_Init+0x216>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4c      	ldr	r2, [pc, #304]	; (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x212>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_GPIO_Init+0x310>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_GPIO_Init+0x314>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x20a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <HAL_GPIO_Init+0x318>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x206>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a48      	ldr	r2, [pc, #288]	; (8002fc4 <HAL_GPIO_Init+0x31c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x202>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4934      	ldr	r1, [pc, #208]	; (8002fa8 <HAL_GPIO_Init+0x300>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee2:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f06:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f30:	4a25      	ldr	r2, [pc, #148]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f84:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <HAL_GPIO_Init+0x320>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae96 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	3724      	adds	r7, #36	; 0x24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40021400 	.word	0x40021400
 8002fc4:	40021800 	.word	0x40021800
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	401a      	ands	r2, r3
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	429a      	cmp	r2, r3
 8003016:	d104      	bne.n	8003022 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	041a      	lsls	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003020:	e002      	b.n	8003028 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f806 	bl	8003064 <HAL_GPIO_EXTI_Callback>
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0cc      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b68      	ldr	r3, [pc, #416]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d90c      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b65      	ldr	r3, [pc, #404]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d044      	beq.n	800319c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d119      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d003      	beq.n	800313a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e067      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4934      	ldr	r1, [pc, #208]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7ff f854 	bl	8002218 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7ff f850 	bl	8002218 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e04f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d20c      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f855 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 8003206:	4601      	mov	r1, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	fa21 f303 	lsr.w	r3, r1, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ffb4 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00
 8003238:	40023800 	.word	0x40023800
 800323c:	08006d80 	.word	0x08006d80
 8003240:	20000014 	.word	0x20000014
 8003244:	20000018 	.word	0x20000018

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_RCC_GetHCLKFreq+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000014 	.word	0x20000014

08003260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003264:	f7ff fff0 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003268:	4601      	mov	r1, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0a9b      	lsrs	r3, r3, #10
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4a03      	ldr	r2, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	08006d90 	.word	0x08006d90

08003288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800328c:	f7ff ffdc 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003290:	4601      	mov	r1, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0b5b      	lsrs	r3, r3, #13
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4a03      	ldr	r2, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08006d90 	.word	0x08006d90

080032b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ca:	4bc6      	ldr	r3, [pc, #792]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	f200 817e 	bhi.w	80035d4 <HAL_RCC_GetSysClockFreq+0x324>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003315 	.word	0x08003315
 80032e4:	080035d5 	.word	0x080035d5
 80032e8:	080035d5 	.word	0x080035d5
 80032ec:	080035d5 	.word	0x080035d5
 80032f0:	0800331b 	.word	0x0800331b
 80032f4:	080035d5 	.word	0x080035d5
 80032f8:	080035d5 	.word	0x080035d5
 80032fc:	080035d5 	.word	0x080035d5
 8003300:	08003321 	.word	0x08003321
 8003304:	080035d5 	.word	0x080035d5
 8003308:	080035d5 	.word	0x080035d5
 800330c:	080035d5 	.word	0x080035d5
 8003310:	0800347d 	.word	0x0800347d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4bb4      	ldr	r3, [pc, #720]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x338>)
 8003316:	613b      	str	r3, [r7, #16]
       break;
 8003318:	e15f      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331a:	4bb4      	ldr	r3, [pc, #720]	; (80035ec <HAL_RCC_GetSysClockFreq+0x33c>)
 800331c:	613b      	str	r3, [r7, #16]
      break;
 800331e:	e15c      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003320:	4bb0      	ldr	r3, [pc, #704]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003328:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332a:	4bae      	ldr	r3, [pc, #696]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04a      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4bab      	ldr	r3, [pc, #684]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	f04f 0400 	mov.w	r4, #0
 8003340:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	ea03 0501 	and.w	r5, r3, r1
 800334c:	ea04 0602 	and.w	r6, r4, r2
 8003350:	4629      	mov	r1, r5
 8003352:	4632      	mov	r2, r6
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	0154      	lsls	r4, r2, #5
 800335e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003362:	014b      	lsls	r3, r1, #5
 8003364:	4619      	mov	r1, r3
 8003366:	4622      	mov	r2, r4
 8003368:	1b49      	subs	r1, r1, r5
 800336a:	eb62 0206 	sbc.w	r2, r2, r6
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	f04f 0400 	mov.w	r4, #0
 8003376:	0194      	lsls	r4, r2, #6
 8003378:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800337c:	018b      	lsls	r3, r1, #6
 800337e:	1a5b      	subs	r3, r3, r1
 8003380:	eb64 0402 	sbc.w	r4, r4, r2
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	00e2      	lsls	r2, r4, #3
 800338e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003392:	00d9      	lsls	r1, r3, #3
 8003394:	460b      	mov	r3, r1
 8003396:	4614      	mov	r4, r2
 8003398:	195b      	adds	r3, r3, r5
 800339a:	eb44 0406 	adc.w	r4, r4, r6
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	0262      	lsls	r2, r4, #9
 80033a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033ac:	0259      	lsls	r1, r3, #9
 80033ae:	460b      	mov	r3, r1
 80033b0:	4614      	mov	r4, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	4621      	mov	r1, r4
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f04f 0400 	mov.w	r4, #0
 80033bc:	461a      	mov	r2, r3
 80033be:	4623      	mov	r3, r4
 80033c0:	f7fc ff7e 	bl	80002c0 <__aeabi_uldivmod>
 80033c4:	4603      	mov	r3, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	e049      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033cc:	4b85      	ldr	r3, [pc, #532]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	f04f 0400 	mov.w	r4, #0
 80033d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	ea03 0501 	and.w	r5, r3, r1
 80033e2:	ea04 0602 	and.w	r6, r4, r2
 80033e6:	4629      	mov	r1, r5
 80033e8:	4632      	mov	r2, r6
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	0154      	lsls	r4, r2, #5
 80033f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033f8:	014b      	lsls	r3, r1, #5
 80033fa:	4619      	mov	r1, r3
 80033fc:	4622      	mov	r2, r4
 80033fe:	1b49      	subs	r1, r1, r5
 8003400:	eb62 0206 	sbc.w	r2, r2, r6
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f04f 0400 	mov.w	r4, #0
 800340c:	0194      	lsls	r4, r2, #6
 800340e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003412:	018b      	lsls	r3, r1, #6
 8003414:	1a5b      	subs	r3, r3, r1
 8003416:	eb64 0402 	sbc.w	r4, r4, r2
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003428:	00d9      	lsls	r1, r3, #3
 800342a:	460b      	mov	r3, r1
 800342c:	4614      	mov	r4, r2
 800342e:	195b      	adds	r3, r3, r5
 8003430:	eb44 0406 	adc.w	r4, r4, r6
 8003434:	f04f 0100 	mov.w	r1, #0
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	02a2      	lsls	r2, r4, #10
 800343e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003442:	0299      	lsls	r1, r3, #10
 8003444:	460b      	mov	r3, r1
 8003446:	4614      	mov	r4, r2
 8003448:	4618      	mov	r0, r3
 800344a:	4621      	mov	r1, r4
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	461a      	mov	r2, r3
 8003454:	4623      	mov	r3, r4
 8003456:	f7fc ff33 	bl	80002c0 <__aeabi_uldivmod>
 800345a:	4603      	mov	r3, r0
 800345c:	460c      	mov	r4, r1
 800345e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003460:	4b60      	ldr	r3, [pc, #384]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	3301      	adds	r3, #1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	613b      	str	r3, [r7, #16]
      break;
 800347a:	e0ae      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003486:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04a      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	ea03 0501 	and.w	r5, r3, r1
 80034a8:	ea04 0602 	and.w	r6, r4, r2
 80034ac:	4629      	mov	r1, r5
 80034ae:	4632      	mov	r2, r6
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	0154      	lsls	r4, r2, #5
 80034ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034be:	014b      	lsls	r3, r1, #5
 80034c0:	4619      	mov	r1, r3
 80034c2:	4622      	mov	r2, r4
 80034c4:	1b49      	subs	r1, r1, r5
 80034c6:	eb62 0206 	sbc.w	r2, r2, r6
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	f04f 0400 	mov.w	r4, #0
 80034d2:	0194      	lsls	r4, r2, #6
 80034d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034d8:	018b      	lsls	r3, r1, #6
 80034da:	1a5b      	subs	r3, r3, r1
 80034dc:	eb64 0402 	sbc.w	r4, r4, r2
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	00e2      	lsls	r2, r4, #3
 80034ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034ee:	00d9      	lsls	r1, r3, #3
 80034f0:	460b      	mov	r3, r1
 80034f2:	4614      	mov	r4, r2
 80034f4:	195b      	adds	r3, r3, r5
 80034f6:	eb44 0406 	adc.w	r4, r4, r6
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	0262      	lsls	r2, r4, #9
 8003504:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003508:	0259      	lsls	r1, r3, #9
 800350a:	460b      	mov	r3, r1
 800350c:	4614      	mov	r4, r2
 800350e:	4618      	mov	r0, r3
 8003510:	4621      	mov	r1, r4
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f04f 0400 	mov.w	r4, #0
 8003518:	461a      	mov	r2, r3
 800351a:	4623      	mov	r3, r4
 800351c:	f7fc fed0 	bl	80002c0 <__aeabi_uldivmod>
 8003520:	4603      	mov	r3, r0
 8003522:	460c      	mov	r4, r1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	e049      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003528:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	f04f 0400 	mov.w	r4, #0
 8003532:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	ea03 0501 	and.w	r5, r3, r1
 800353e:	ea04 0602 	and.w	r6, r4, r2
 8003542:	4629      	mov	r1, r5
 8003544:	4632      	mov	r2, r6
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	f04f 0400 	mov.w	r4, #0
 800354e:	0154      	lsls	r4, r2, #5
 8003550:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003554:	014b      	lsls	r3, r1, #5
 8003556:	4619      	mov	r1, r3
 8003558:	4622      	mov	r2, r4
 800355a:	1b49      	subs	r1, r1, r5
 800355c:	eb62 0206 	sbc.w	r2, r2, r6
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	f04f 0400 	mov.w	r4, #0
 8003568:	0194      	lsls	r4, r2, #6
 800356a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800356e:	018b      	lsls	r3, r1, #6
 8003570:	1a5b      	subs	r3, r3, r1
 8003572:	eb64 0402 	sbc.w	r4, r4, r2
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	00e2      	lsls	r2, r4, #3
 8003580:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003584:	00d9      	lsls	r1, r3, #3
 8003586:	460b      	mov	r3, r1
 8003588:	4614      	mov	r4, r2
 800358a:	195b      	adds	r3, r3, r5
 800358c:	eb44 0406 	adc.w	r4, r4, r6
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	02a2      	lsls	r2, r4, #10
 800359a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800359e:	0299      	lsls	r1, r3, #10
 80035a0:	460b      	mov	r3, r1
 80035a2:	4614      	mov	r4, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	4621      	mov	r1, r4
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f04f 0400 	mov.w	r4, #0
 80035ae:	461a      	mov	r2, r3
 80035b0:	4623      	mov	r3, r4
 80035b2:	f7fc fe85 	bl	80002c0 <__aeabi_uldivmod>
 80035b6:	4603      	mov	r3, r0
 80035b8:	460c      	mov	r4, r1
 80035ba:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0f1b      	lsrs	r3, r3, #28
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	613b      	str	r3, [r7, #16]
      break;
 80035d2:	e002      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x338>)
 80035d6:	613b      	str	r3, [r7, #16]
      break;
 80035d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035da:	693b      	ldr	r3, [r7, #16]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	00f42400 	.word	0x00f42400
 80035ec:	007a1200 	.word	0x007a1200

080035f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8083 	beq.w	8003710 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800360a:	4b95      	ldr	r3, [pc, #596]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b04      	cmp	r3, #4
 8003614:	d019      	beq.n	800364a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003616:	4b92      	ldr	r3, [pc, #584]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800361e:	2b08      	cmp	r3, #8
 8003620:	d106      	bne.n	8003630 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003622:	4b8f      	ldr	r3, [pc, #572]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362e:	d00c      	beq.n	800364a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003630:	4b8b      	ldr	r3, [pc, #556]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d112      	bne.n	8003662 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363c:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003648:	d10b      	bne.n	8003662 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364a:	4b85      	ldr	r3, [pc, #532]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d05b      	beq.n	800370e <HAL_RCC_OscConfig+0x11e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d157      	bne.n	800370e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e216      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x8a>
 800366c:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a7b      	ldr	r2, [pc, #492]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e01d      	b.n	80036b6 <HAL_RCC_OscConfig+0xc6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003682:	d10c      	bne.n	800369e <HAL_RCC_OscConfig+0xae>
 8003684:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a75      	ldr	r2, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800368a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a72      	ldr	r2, [pc, #456]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	e00b      	b.n	80036b6 <HAL_RCC_OscConfig+0xc6>
 800369e:	4b70      	ldr	r3, [pc, #448]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6f      	ldr	r2, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6c      	ldr	r2, [pc, #432]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe fdab 	bl	8002218 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c6:	f7fe fda7 	bl	8002218 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b64      	cmp	r3, #100	; 0x64
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e1db      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d8:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0xd6>
 80036e4:	e014      	b.n	8003710 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe fd97 	bl	8002218 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ee:	f7fe fd93 	bl	8002218 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b64      	cmp	r3, #100	; 0x64
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1c7      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003700:	4b57      	ldr	r3, [pc, #348]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0xfe>
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d06f      	beq.n	80037fc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b00      	cmp	r3, #0
 8003726:	d017      	beq.n	8003758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003728:	4b4d      	ldr	r3, [pc, #308]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003730:	2b08      	cmp	r3, #8
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003740:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d11c      	bne.n	8003786 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374c:	4b44      	ldr	r3, [pc, #272]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_OscConfig+0x180>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e18f      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4938      	ldr	r1, [pc, #224]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003784:	e03a      	b.n	80037fc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378e:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fd40 	bl	8002218 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379c:	f7fe fd3c 	bl	8002218 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e170      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b29      	ldr	r3, [pc, #164]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4925      	ldr	r1, [pc, #148]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
 80037ce:	e015      	b.n	80037fc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe fd1f 	bl	8002218 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037de:	f7fe fd1b 	bl	8002218 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e14f      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d037      	beq.n	8003878 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_OscConfig+0x278>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fcff 	bl	8002218 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381e:	f7fe fcfb 	bl	8002218 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e12f      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x22e>
 800383c:	e01c      	b.n	8003878 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_RCC_OscConfig+0x278>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fce8 	bl	8002218 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384a:	e00f      	b.n	800386c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384c:	f7fe fce4 	bl	8002218 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d908      	bls.n	800386c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e118      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	42470000 	.word	0x42470000
 8003868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	4b8a      	ldr	r3, [pc, #552]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e9      	bne.n	800384c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8097 	beq.w	80039b4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b7f      	ldr	r3, [pc, #508]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a7e      	ldr	r2, [pc, #504]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b7c      	ldr	r3, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b79      	ldr	r3, [pc, #484]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a75      	ldr	r2, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe fca3 	bl	8002218 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe fc9f 	bl	8002218 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0d3      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b6c      	ldr	r3, [pc, #432]	; (8003a9c <HAL_RCC_OscConfig+0x4ac>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x31a>
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
 8003908:	e01c      	b.n	8003944 <HAL_RCC_OscConfig+0x354>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x33c>
 8003912:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a60      	ldr	r2, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
 800391e:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0x354>
 800392c:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a59      	ldr	r2, [pc, #356]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
 8003938:	4b57      	ldr	r3, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a56      	ldr	r2, [pc, #344]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 800393e:	f023 0304 	bic.w	r3, r3, #4
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d015      	beq.n	8003978 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe fc64 	bl	8002218 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	e00a      	b.n	800396a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fe fc60 	bl	8002218 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e092      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ee      	beq.n	8003954 <HAL_RCC_OscConfig+0x364>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe fc4e 	bl	8002218 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe fc4a 	bl	8002218 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e07c      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ee      	bne.n	8003980 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a8:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	4a3a      	ldr	r2, [pc, #232]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d068      	beq.n	8003a8e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d060      	beq.n	8003a8a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d145      	bne.n	8003a5c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d0:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCC_OscConfig+0x4b0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fe fc1f 	bl	8002218 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039de:	f7fe fc1b 	bl	8002218 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e04f      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	019b      	lsls	r3, r3, #6
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	3b01      	subs	r3, #1
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	071b      	lsls	r3, r3, #28
 8003a28:	491b      	ldr	r1, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <HAL_RCC_OscConfig+0x4b0>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fbf0 	bl	8002218 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fbec 	bl	8002218 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e020      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x44c>
 8003a5a:	e018      	b.n	8003a8e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x4b0>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe fbd9 	bl	8002218 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fe fbd5 	bl	8002218 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e009      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x4a8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCC_OscConfig+0x47a>
 8003a88:	e001      	b.n	8003a8e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	42470060 	.word	0x42470060

08003aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e01d      	b.n	8003af2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe f94e 	bl	8001d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 fdaa 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_TIM_Base_Stop+0x40>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	f240 4344 	movw	r3, #1092	; 0x444
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d107      	bne.n	8003b3a <HAL_TIM_Base_Stop+0x40>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e01d      	b.n	8003b9e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f815 	bl	8003ba6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fd54 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d841      	bhi.n	8003c50 <HAL_TIM_OC_Start_IT+0x94>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <HAL_TIM_OC_Start_IT+0x18>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c51 	.word	0x08003c51
 8003bdc:	08003c51 	.word	0x08003c51
 8003be0:	08003c51 	.word	0x08003c51
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c51 	.word	0x08003c51
 8003bec:	08003c51 	.word	0x08003c51
 8003bf0:	08003c51 	.word	0x08003c51
 8003bf4:	08003c2d 	.word	0x08003c2d
 8003bf8:	08003c51 	.word	0x08003c51
 8003bfc:	08003c51 	.word	0x08003c51
 8003c00:	08003c51 	.word	0x08003c51
 8003c04:	08003c3f 	.word	0x08003c3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0202 	orr.w	r2, r2, #2
 8003c16:	60da      	str	r2, [r3, #12]
      break;
 8003c18:	e01b      	b.n	8003c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0204 	orr.w	r2, r2, #4
 8003c28:	60da      	str	r2, [r3, #12]
      break;
 8003c2a:	e012      	b.n	8003c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0208 	orr.w	r2, r2, #8
 8003c3a:	60da      	str	r2, [r3, #12]
      break;
 8003c3c:	e009      	b.n	8003c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0210 	orr.w	r2, r2, #16
 8003c4c:	60da      	str	r2, [r3, #12]
      break;
 8003c4e:	e000      	b.n	8003c52 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003c50:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 f902 	bl	8004e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <HAL_TIM_OC_Start_IT+0x100>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIM_OC_Start_IT+0xb8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <HAL_TIM_OC_Start_IT+0x104>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_OC_Start_IT+0xbc>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_TIM_OC_Start_IT+0xbe>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d007      	beq.n	8003cb0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d841      	bhi.n	8003d58 <HAL_TIM_OC_Stop_IT+0x94>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <HAL_TIM_OC_Stop_IT+0x18>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003d59 	.word	0x08003d59
 8003ce4:	08003d59 	.word	0x08003d59
 8003ce8:	08003d59 	.word	0x08003d59
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d59 	.word	0x08003d59
 8003cf4:	08003d59 	.word	0x08003d59
 8003cf8:	08003d59 	.word	0x08003d59
 8003cfc:	08003d35 	.word	0x08003d35
 8003d00:	08003d59 	.word	0x08003d59
 8003d04:	08003d59 	.word	0x08003d59
 8003d08:	08003d59 	.word	0x08003d59
 8003d0c:	08003d47 	.word	0x08003d47
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0202 	bic.w	r2, r2, #2
 8003d1e:	60da      	str	r2, [r3, #12]
      break;
 8003d20:	e01b      	b.n	8003d5a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0204 	bic.w	r2, r2, #4
 8003d30:	60da      	str	r2, [r3, #12]
      break;
 8003d32:	e012      	b.n	8003d5a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0208 	bic.w	r2, r2, #8
 8003d42:	60da      	str	r2, [r3, #12]
      break;
 8003d44:	e009      	b.n	8003d5a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0210 	bic.w	r2, r2, #16
 8003d54:	60da      	str	r2, [r3, #12]
      break;
 8003d56:	e000      	b.n	8003d5a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8003d58:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 f87e 	bl	8004e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a20      	ldr	r2, [pc, #128]	; (8003df0 <HAL_TIM_OC_Stop_IT+0x12c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIM_OC_Stop_IT+0xb8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_TIM_OC_Stop_IT+0x130>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIM_OC_Stop_IT+0xbc>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_TIM_OC_Stop_IT+0xbe>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d017      	beq.n	8003db6 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_TIM_OC_Stop_IT+0xf2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	f240 4344 	movw	r3, #1092	; 0x444
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <HAL_TIM_OC_Stop_IT+0xf2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <HAL_TIM_OC_Stop_IT+0x122>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	f240 4344 	movw	r3, #1092	; 0x444
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <HAL_TIM_OC_Stop_IT+0x122>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40010400 	.word	0x40010400

08003df8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e01d      	b.n	8003e46 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f815 	bl	8003e4e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f000 fc00 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	d841      	bhi.n	8003ef8 <HAL_TIM_IC_Start_IT+0x94>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <HAL_TIM_IC_Start_IT+0x18>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003ef9 	.word	0x08003ef9
 8003e84:	08003ef9 	.word	0x08003ef9
 8003e88:	08003ef9 	.word	0x08003ef9
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ef9 	.word	0x08003ef9
 8003e94:	08003ef9 	.word	0x08003ef9
 8003e98:	08003ef9 	.word	0x08003ef9
 8003e9c:	08003ed5 	.word	0x08003ed5
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003ef9 	.word	0x08003ef9
 8003ea8:	08003ef9 	.word	0x08003ef9
 8003eac:	08003ee7 	.word	0x08003ee7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0202 	orr.w	r2, r2, #2
 8003ebe:	60da      	str	r2, [r3, #12]
      break;
 8003ec0:	e01b      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0204 	orr.w	r2, r2, #4
 8003ed0:	60da      	str	r2, [r3, #12]
      break;
 8003ed2:	e012      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	60da      	str	r2, [r3, #12]
      break;
 8003ee4:	e009      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0210 	orr.w	r2, r2, #16
 8003ef4:	60da      	str	r2, [r3, #12]
      break;
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003ef8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 ffae 	bl	8004e64 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d007      	beq.n	8003f2a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d841      	bhi.n	8003fc8 <HAL_TIM_IC_Stop_IT+0x94>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_TIM_IC_Stop_IT+0x18>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003fc9 	.word	0x08003fc9
 8003f54:	08003fc9 	.word	0x08003fc9
 8003f58:	08003fc9 	.word	0x08003fc9
 8003f5c:	08003f93 	.word	0x08003f93
 8003f60:	08003fc9 	.word	0x08003fc9
 8003f64:	08003fc9 	.word	0x08003fc9
 8003f68:	08003fc9 	.word	0x08003fc9
 8003f6c:	08003fa5 	.word	0x08003fa5
 8003f70:	08003fc9 	.word	0x08003fc9
 8003f74:	08003fc9 	.word	0x08003fc9
 8003f78:	08003fc9 	.word	0x08003fc9
 8003f7c:	08003fb7 	.word	0x08003fb7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0202 	bic.w	r2, r2, #2
 8003f8e:	60da      	str	r2, [r3, #12]
      break;
 8003f90:	e01b      	b.n	8003fca <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0204 	bic.w	r2, r2, #4
 8003fa0:	60da      	str	r2, [r3, #12]
      break;
 8003fa2:	e012      	b.n	8003fca <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0208 	bic.w	r2, r2, #8
 8003fb2:	60da      	str	r2, [r3, #12]
      break;
 8003fb4:	e009      	b.n	8003fca <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0210 	bic.w	r2, r2, #16
 8003fc4:	60da      	str	r2, [r3, #12]
      break;
 8003fc6:	e000      	b.n	8003fca <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8003fc8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 ff46 	bl	8004e64 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <HAL_TIM_IC_Stop_IT+0xd4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	f240 4344 	movw	r3, #1092	; 0x444
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IC_Stop_IT+0xd4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop

08004014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0202 	mvn.w	r2, #2
 8004040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd fd88 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd fd56 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fad5 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0204 	mvn.w	r2, #4
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fd5e 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd fd2c 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 faab 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0208 	mvn.w	r2, #8
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fd fd34 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fd02 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa81 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0210 	mvn.w	r2, #16
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2208      	movs	r2, #8
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fd0a 	bl	8001b6c <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fcd8 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fa57 	bl	8004614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0201 	mvn.w	r2, #1
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd fcd8 	bl	8001b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fefc 	bl	8004fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa1c 	bl	8004628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b20      	cmp	r3, #32
 800420a:	d107      	bne.n	800421c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0220 	mvn.w	r2, #32
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fec6 	bl	8004fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_TIM_OC_ConfigChannel+0x1a>
 800423a:	2302      	movs	r3, #2
 800423c:	e04e      	b.n	80042dc <HAL_TIM_OC_ConfigChannel+0xb8>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d839      	bhi.n	80042c8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <HAL_TIM_OC_ConfigChannel+0x38>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004291 	.word	0x08004291
 8004260:	080042c9 	.word	0x080042c9
 8004264:	080042c9 	.word	0x080042c9
 8004268:	080042c9 	.word	0x080042c9
 800426c:	0800429f 	.word	0x0800429f
 8004270:	080042c9 	.word	0x080042c9
 8004274:	080042c9 	.word	0x080042c9
 8004278:	080042c9 	.word	0x080042c9
 800427c:	080042ad 	.word	0x080042ad
 8004280:	080042c9 	.word	0x080042c9
 8004284:	080042c9 	.word	0x080042c9
 8004288:	080042c9 	.word	0x080042c9
 800428c:	080042bb 	.word	0x080042bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fa70 	bl	800477c <TIM_OC1_SetConfig>
      break;
 800429c:	e015      	b.n	80042ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fad9 	bl	800485c <TIM_OC2_SetConfig>
      break;
 80042aa:	e00e      	b.n	80042ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fb48 	bl	8004948 <TIM_OC3_SetConfig>
      break;
 80042b8:	e007      	b.n	80042ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fbb5 	bl	8004a30 <TIM_OC4_SetConfig>
      break;
 80042c6:	e000      	b.n	80042ca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80042c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_IC_ConfigChannel+0x1a>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e08a      	b.n	8004414 <HAL_TIM_IC_ConfigChannel+0x130>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2202      	movs	r2, #2
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f000 fbda 	bl	8004adc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 020c 	bic.w	r2, r2, #12
 8004336:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	619a      	str	r2, [r3, #24]
 800434a:	e05a      	b.n	8004402 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d11c      	bne.n	800438c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6819      	ldr	r1, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f000 fc5e 	bl	8004c22 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004374:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6999      	ldr	r1, [r3, #24]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	619a      	str	r2, [r3, #24]
 800438a:	e03a      	b.n	8004402 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b08      	cmp	r3, #8
 8004390:	d11b      	bne.n	80043ca <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f000 fcab 	bl	8004cfc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 020c 	bic.w	r2, r2, #12
 80043b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69d9      	ldr	r1, [r3, #28]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	61da      	str	r2, [r3, #28]
 80043c8:	e01b      	b.n	8004402 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f000 fccb 	bl	8004d74 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIM_ConfigClockSource+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e0a6      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x166>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d067      	beq.n	800453c <HAL_TIM_ConfigClockSource+0x120>
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	d80b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x6c>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d073      	beq.n	800455c <HAL_TIM_ConfigClockSource+0x140>
 8004474:	2b10      	cmp	r3, #16
 8004476:	d802      	bhi.n	800447e <HAL_TIM_ConfigClockSource+0x62>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d06f      	beq.n	800455c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800447c:	e078      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800447e:	2b20      	cmp	r3, #32
 8004480:	d06c      	beq.n	800455c <HAL_TIM_ConfigClockSource+0x140>
 8004482:	2b30      	cmp	r3, #48	; 0x30
 8004484:	d06a      	beq.n	800455c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004486:	e073      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004488:	2b70      	cmp	r3, #112	; 0x70
 800448a:	d00d      	beq.n	80044a8 <HAL_TIM_ConfigClockSource+0x8c>
 800448c:	2b70      	cmp	r3, #112	; 0x70
 800448e:	d804      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x7e>
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d033      	beq.n	80044fc <HAL_TIM_ConfigClockSource+0xe0>
 8004494:	2b60      	cmp	r3, #96	; 0x60
 8004496:	d041      	beq.n	800451c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004498:	e06a      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449e:	d066      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x152>
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d017      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044a6:	e063      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f000 fcb4 	bl	8004e24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	609a      	str	r2, [r3, #8]
      break;
 80044d4:	e04c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f000 fc9d 	bl	8004e24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f8:	609a      	str	r2, [r3, #8]
      break;
 80044fa:	e039      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6859      	ldr	r1, [r3, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	461a      	mov	r2, r3
 800450a:	f000 fb5b 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2150      	movs	r1, #80	; 0x50
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fc6a 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 800451a:	e029      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	461a      	mov	r2, r3
 800452a:	f000 fbb7 	bl	8004c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2160      	movs	r1, #96	; 0x60
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fc5a 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 800453a:	e019      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	461a      	mov	r2, r3
 800454a:	f000 fb3b 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2140      	movs	r1, #64	; 0x40
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fc4a 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 800455a:	e009      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f000 fc41 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 800456c:	e000      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800456e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d831      	bhi.n	8004604 <HAL_TIM_ReadCapturedValue+0x78>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	08004605 	.word	0x08004605
 80045b0:	08004605 	.word	0x08004605
 80045b4:	08004605 	.word	0x08004605
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	08004605 	.word	0x08004605
 80045c0:	08004605 	.word	0x08004605
 80045c4:	08004605 	.word	0x08004605
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	08004605 	.word	0x08004605
 80045d0:	08004605 	.word	0x08004605
 80045d4:	08004605 	.word	0x08004605
 80045d8:	080045fb 	.word	0x080045fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	60fb      	str	r3, [r7, #12]

      break;
 80045e4:	e00f      	b.n	8004606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	60fb      	str	r3, [r7, #12]

      break;
 80045ee:	e00a      	b.n	8004606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	60fb      	str	r3, [r7, #12]

      break;
 80045f8:	e005      	b.n	8004606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	60fb      	str	r3, [r7, #12]

      break;
 8004602:	e000      	b.n	8004606 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004604:	bf00      	nop
  }

  return tmpreg;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a40      	ldr	r2, [pc, #256]	; (8004750 <TIM_Base_SetConfig+0x114>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d00f      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a3d      	ldr	r2, [pc, #244]	; (8004754 <TIM_Base_SetConfig+0x118>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00b      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a3c      	ldr	r2, [pc, #240]	; (8004758 <TIM_Base_SetConfig+0x11c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a3b      	ldr	r2, [pc, #236]	; (800475c <TIM_Base_SetConfig+0x120>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3a      	ldr	r2, [pc, #232]	; (8004760 <TIM_Base_SetConfig+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d108      	bne.n	800468e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <TIM_Base_SetConfig+0x114>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02b      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d027      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <TIM_Base_SetConfig+0x118>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d023      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <TIM_Base_SetConfig+0x11c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01f      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2a      	ldr	r2, [pc, #168]	; (800475c <TIM_Base_SetConfig+0x120>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01b      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a29      	ldr	r2, [pc, #164]	; (8004760 <TIM_Base_SetConfig+0x124>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d017      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a28      	ldr	r2, [pc, #160]	; (8004764 <TIM_Base_SetConfig+0x128>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a27      	ldr	r2, [pc, #156]	; (8004768 <TIM_Base_SetConfig+0x12c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00f      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a26      	ldr	r2, [pc, #152]	; (800476c <TIM_Base_SetConfig+0x130>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00b      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a25      	ldr	r2, [pc, #148]	; (8004770 <TIM_Base_SetConfig+0x134>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d007      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a24      	ldr	r2, [pc, #144]	; (8004774 <TIM_Base_SetConfig+0x138>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a23      	ldr	r2, [pc, #140]	; (8004778 <TIM_Base_SetConfig+0x13c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <TIM_Base_SetConfig+0x114>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0xf8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <TIM_Base_SetConfig+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d103      	bne.n	800473c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	615a      	str	r2, [r3, #20]
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40010400 	.word	0x40010400
 8004764:	40014000 	.word	0x40014000
 8004768:	40014400 	.word	0x40014400
 800476c:	40014800 	.word	0x40014800
 8004770:	40001800 	.word	0x40001800
 8004774:	40001c00 	.word	0x40001c00
 8004778:	40002000 	.word	0x40002000

0800477c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f023 0201 	bic.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 0302 	bic.w	r3, r3, #2
 80047c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a20      	ldr	r2, [pc, #128]	; (8004854 <TIM_OC1_SetConfig+0xd8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_OC1_SetConfig+0x64>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1f      	ldr	r2, [pc, #124]	; (8004858 <TIM_OC1_SetConfig+0xdc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10c      	bne.n	80047fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 0308 	bic.w	r3, r3, #8
 80047e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <TIM_OC1_SetConfig+0xd8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_OC1_SetConfig+0x8e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <TIM_OC1_SetConfig+0xdc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d111      	bne.n	800482e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	621a      	str	r2, [r3, #32]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40010000 	.word	0x40010000
 8004858:	40010400 	.word	0x40010400

0800485c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0210 	bic.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0320 	bic.w	r3, r3, #32
 80048a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a22      	ldr	r2, [pc, #136]	; (8004940 <TIM_OC2_SetConfig+0xe4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC2_SetConfig+0x68>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a21      	ldr	r2, [pc, #132]	; (8004944 <TIM_OC2_SetConfig+0xe8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10d      	bne.n	80048e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <TIM_OC2_SetConfig+0xe4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC2_SetConfig+0x94>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <TIM_OC2_SetConfig+0xe8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d113      	bne.n	8004918 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40010000 	.word	0x40010000
 8004944:	40010400 	.word	0x40010400

08004948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <TIM_OC3_SetConfig+0xe0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_OC3_SetConfig+0x66>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <TIM_OC3_SetConfig+0xe4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10d      	bne.n	80049ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a16      	ldr	r2, [pc, #88]	; (8004a28 <TIM_OC3_SetConfig+0xe0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_OC3_SetConfig+0x92>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <TIM_OC3_SetConfig+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d113      	bne.n	8004a02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40010400 	.word	0x40010400

08004a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	031b      	lsls	r3, r3, #12
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <TIM_OC4_SetConfig+0xa4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_OC4_SetConfig+0x68>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <TIM_OC4_SetConfig+0xa8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d109      	bne.n	8004aac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40010400 	.word	0x40010400

08004adc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a28      	ldr	r2, [pc, #160]	; (8004ba8 <TIM_TI1_SetConfig+0xcc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01b      	beq.n	8004b42 <TIM_TI1_SetConfig+0x66>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d017      	beq.n	8004b42 <TIM_TI1_SetConfig+0x66>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <TIM_TI1_SetConfig+0xd0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <TIM_TI1_SetConfig+0x66>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <TIM_TI1_SetConfig+0xd4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_TI1_SetConfig+0x66>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <TIM_TI1_SetConfig+0xd8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_TI1_SetConfig+0x66>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <TIM_TI1_SetConfig+0xdc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_TI1_SetConfig+0x66>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <TIM_TI1_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_TI1_SetConfig+0x66>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <TIM_TI1_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <TIM_TI1_SetConfig+0x6a>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <TIM_TI1_SetConfig+0x6c>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e003      	b.n	8004b66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f023 030a 	bic.w	r3, r3, #10
 8004b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f003 030a 	and.w	r3, r3, #10
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40001800 	.word	0x40001800

08004bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 030a 	bic.w	r3, r3, #10
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b087      	sub	sp, #28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f023 0210 	bic.w	r2, r3, #16
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	031b      	lsls	r3, r3, #12
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f023 0210 	bic.w	r2, r3, #16
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	031b      	lsls	r3, r3, #12
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	621a      	str	r2, [r3, #32]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f023 0303 	bic.w	r3, r3, #3
 8004d28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	031b      	lsls	r3, r3, #12
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	031b      	lsls	r3, r3, #12
 8004dcc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f043 0307 	orr.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	021a      	lsls	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2201      	movs	r2, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	401a      	ands	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e05a      	b.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d022      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d01d      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d018      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10c      	bne.n	8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40001800 	.word	0x40001800

08004fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e03f      	b.n	8005062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc ff7a 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	; 0x24
 8005000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fb97 	bl	8005748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af02      	add	r7, sp, #8
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	f040 8083 	bne.w	8005192 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_UART_Transmit+0x2e>
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e07b      	b.n	8005194 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Transmit+0x40>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e074      	b.n	8005194 <HAL_UART_Transmit+0x12a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2221      	movs	r2, #33	; 0x21
 80050bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80050c0:	f7fd f8aa 	bl	8002218 <HAL_GetTick>
 80050c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88fa      	ldrh	r2, [r7, #6]
 80050ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80050da:	e042      	b.n	8005162 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d122      	bne.n	800513a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2180      	movs	r1, #128	; 0x80
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f9b6 	bl	8005470 <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e042      	b.n	8005194 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005120:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	3302      	adds	r3, #2
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	e017      	b.n	8005162 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	3301      	adds	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	e013      	b.n	8005162 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	2180      	movs	r1, #128	; 0x80
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f993 	bl	8005470 <UART_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e01f      	b.n	8005194 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	60ba      	str	r2, [r7, #8]
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1b7      	bne.n	80050dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2200      	movs	r2, #0
 8005174:	2140      	movs	r1, #64	; 0x40
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f97a 	bl	8005470 <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e006      	b.n	8005194 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d140      	bne.n	8005238 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_UART_Receive_IT+0x26>
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e039      	b.n	800523a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_UART_Receive_IT+0x38>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e032      	b.n	800523a <HAL_UART_Receive_IT+0x9e>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2222      	movs	r2, #34	; 0x22
 80051f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005212:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0220 	orr.w	r2, r2, #32
 8005232:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	e000      	b.n	800523a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005238:	2302      	movs	r3, #2
  }
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10d      	bne.n	800529a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x52>
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9d6 	bl	8005644 <UART_Receive_IT>
      return;
 8005298:	e0d1      	b.n	800543e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80b0 	beq.w	8005402 <HAL_UART_IRQHandler+0x1ba>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <HAL_UART_IRQHandler+0x70>
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80a5 	beq.w	8005402 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_UART_IRQHandler+0x90>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_UART_IRQHandler+0xb0>
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f0:	f043 0202 	orr.w	r2, r3, #2
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_UART_IRQHandler+0xd0>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	f043 0204 	orr.w	r2, r3, #4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00f      	beq.n	8005342 <HAL_UART_IRQHandler+0xfa>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <HAL_UART_IRQHandler+0xee>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	f043 0208 	orr.w	r2, r3, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d078      	beq.n	800543c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <HAL_UART_IRQHandler+0x11c>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f970 	bl	8005644 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <HAL_UART_IRQHandler+0x144>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d031      	beq.n	80053f0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f8b9 	bl	8005504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d123      	bne.n	80053e8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	4a21      	ldr	r2, [pc, #132]	; (8005444 <HAL_UART_IRQHandler+0x1fc>)
 80053be:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fd fa13 	bl	80027f0 <HAL_DMA_Abort_IT>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053da:	4610      	mov	r0, r2
 80053dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053de:	e00e      	b.n	80053fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f83b 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e6:	e00a      	b.n	80053fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f837 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ee:	e006      	b.n	80053fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f833 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80053fc:	e01e      	b.n	800543c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fe:	bf00      	nop
    return;
 8005400:	e01c      	b.n	800543c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_UART_IRQHandler+0x1d6>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8a6 	bl	8005568 <UART_Transmit_IT>
    return;
 800541c:	e00f      	b.n	800543e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_UART_IRQHandler+0x1f6>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8ee 	bl	8005614 <UART_EndTransmit_IT>
    return;
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <HAL_UART_IRQHandler+0x1f6>
    return;
 800543c:	bf00      	nop
  }
}
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	08005541 	.word	0x08005541

08005448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	e02c      	b.n	80054dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d028      	beq.n	80054dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005490:	f7fc fec2 	bl	8002218 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d21d      	bcs.n	80054dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e00f      	b.n	80054fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d0c3      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800551a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff ff7e 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b21      	cmp	r3, #33	; 0x21
 800557a:	d144      	bne.n	8005606 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005584:	d11a      	bne.n	80055bc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800559a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]
 80055ae:	e00e      	b.n	80055ce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	621a      	str	r2, [r3, #32]
 80055ba:	e008      	b.n	80055ce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	1c59      	adds	r1, r3, #1
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6211      	str	r1, [r2, #32]
 80055c6:	781a      	ldrb	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	4619      	mov	r1, r3
 80055dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005600:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff07 	bl	8005448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b22      	cmp	r3, #34	; 0x22
 8005656:	d171      	bne.n	800573c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d123      	bne.n	80056aa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10e      	bne.n	800568e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
 800568c:	e029      	b.n	80056e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	b29b      	uxth	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28
 80056a8:	e01b      	b.n	80056e2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6858      	ldr	r0, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6291      	str	r1, [r2, #40]	; 0x28
 80056c2:	b2c2      	uxtb	r2, r0
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e00c      	b.n	80056e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	1c58      	adds	r0, r3, #1
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	6288      	str	r0, [r1, #40]	; 0x28
 80056da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4619      	mov	r1, r3
 80056f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d120      	bne.n	8005738 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0220 	bic.w	r2, r2, #32
 8005704:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005714:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc fa3a 	bl	8001ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e002      	b.n	800573e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800578a:	f023 030c 	bic.w	r3, r3, #12
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	430b      	orrs	r3, r1
 8005796:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b6:	f040 818b 	bne.w	8005ad0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4ac1      	ldr	r2, [pc, #772]	; (8005ac4 <UART_SetConfig+0x37c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d005      	beq.n	80057d0 <UART_SetConfig+0x88>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4abf      	ldr	r2, [pc, #764]	; (8005ac8 <UART_SetConfig+0x380>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	f040 80bd 	bne.w	800594a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057d0:	f7fd fd5a 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 80057d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	461d      	mov	r5, r3
 80057da:	f04f 0600 	mov.w	r6, #0
 80057de:	46a8      	mov	r8, r5
 80057e0:	46b1      	mov	r9, r6
 80057e2:	eb18 0308 	adds.w	r3, r8, r8
 80057e6:	eb49 0409 	adc.w	r4, r9, r9
 80057ea:	4698      	mov	r8, r3
 80057ec:	46a1      	mov	r9, r4
 80057ee:	eb18 0805 	adds.w	r8, r8, r5
 80057f2:	eb49 0906 	adc.w	r9, r9, r6
 80057f6:	f04f 0100 	mov.w	r1, #0
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005802:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005806:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800580a:	4688      	mov	r8, r1
 800580c:	4691      	mov	r9, r2
 800580e:	eb18 0005 	adds.w	r0, r8, r5
 8005812:	eb49 0106 	adc.w	r1, r9, r6
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	461d      	mov	r5, r3
 800581c:	f04f 0600 	mov.w	r6, #0
 8005820:	196b      	adds	r3, r5, r5
 8005822:	eb46 0406 	adc.w	r4, r6, r6
 8005826:	461a      	mov	r2, r3
 8005828:	4623      	mov	r3, r4
 800582a:	f7fa fd49 	bl	80002c0 <__aeabi_uldivmod>
 800582e:	4603      	mov	r3, r0
 8005830:	460c      	mov	r4, r1
 8005832:	461a      	mov	r2, r3
 8005834:	4ba5      	ldr	r3, [pc, #660]	; (8005acc <UART_SetConfig+0x384>)
 8005836:	fba3 2302 	umull	r2, r3, r3, r2
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	461d      	mov	r5, r3
 8005844:	f04f 0600 	mov.w	r6, #0
 8005848:	46a9      	mov	r9, r5
 800584a:	46b2      	mov	sl, r6
 800584c:	eb19 0309 	adds.w	r3, r9, r9
 8005850:	eb4a 040a 	adc.w	r4, sl, sl
 8005854:	4699      	mov	r9, r3
 8005856:	46a2      	mov	sl, r4
 8005858:	eb19 0905 	adds.w	r9, r9, r5
 800585c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005860:	f04f 0100 	mov.w	r1, #0
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800586c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005870:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005874:	4689      	mov	r9, r1
 8005876:	4692      	mov	sl, r2
 8005878:	eb19 0005 	adds.w	r0, r9, r5
 800587c:	eb4a 0106 	adc.w	r1, sl, r6
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	461d      	mov	r5, r3
 8005886:	f04f 0600 	mov.w	r6, #0
 800588a:	196b      	adds	r3, r5, r5
 800588c:	eb46 0406 	adc.w	r4, r6, r6
 8005890:	461a      	mov	r2, r3
 8005892:	4623      	mov	r3, r4
 8005894:	f7fa fd14 	bl	80002c0 <__aeabi_uldivmod>
 8005898:	4603      	mov	r3, r0
 800589a:	460c      	mov	r4, r1
 800589c:	461a      	mov	r2, r3
 800589e:	4b8b      	ldr	r3, [pc, #556]	; (8005acc <UART_SetConfig+0x384>)
 80058a0:	fba3 1302 	umull	r1, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	2164      	movs	r1, #100	; 0x64
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3332      	adds	r3, #50	; 0x32
 80058b2:	4a86      	ldr	r2, [pc, #536]	; (8005acc <UART_SetConfig+0x384>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058c0:	4498      	add	r8, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	461d      	mov	r5, r3
 80058c6:	f04f 0600 	mov.w	r6, #0
 80058ca:	46a9      	mov	r9, r5
 80058cc:	46b2      	mov	sl, r6
 80058ce:	eb19 0309 	adds.w	r3, r9, r9
 80058d2:	eb4a 040a 	adc.w	r4, sl, sl
 80058d6:	4699      	mov	r9, r3
 80058d8:	46a2      	mov	sl, r4
 80058da:	eb19 0905 	adds.w	r9, r9, r5
 80058de:	eb4a 0a06 	adc.w	sl, sl, r6
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f6:	4689      	mov	r9, r1
 80058f8:	4692      	mov	sl, r2
 80058fa:	eb19 0005 	adds.w	r0, r9, r5
 80058fe:	eb4a 0106 	adc.w	r1, sl, r6
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	461d      	mov	r5, r3
 8005908:	f04f 0600 	mov.w	r6, #0
 800590c:	196b      	adds	r3, r5, r5
 800590e:	eb46 0406 	adc.w	r4, r6, r6
 8005912:	461a      	mov	r2, r3
 8005914:	4623      	mov	r3, r4
 8005916:	f7fa fcd3 	bl	80002c0 <__aeabi_uldivmod>
 800591a:	4603      	mov	r3, r0
 800591c:	460c      	mov	r4, r1
 800591e:	461a      	mov	r2, r3
 8005920:	4b6a      	ldr	r3, [pc, #424]	; (8005acc <UART_SetConfig+0x384>)
 8005922:	fba3 1302 	umull	r1, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2164      	movs	r1, #100	; 0x64
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	3332      	adds	r3, #50	; 0x32
 8005934:	4a65      	ldr	r2, [pc, #404]	; (8005acc <UART_SetConfig+0x384>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	f003 0207 	and.w	r2, r3, #7
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4442      	add	r2, r8
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	e26f      	b.n	8005e2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800594a:	f7fd fc89 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 800594e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	461d      	mov	r5, r3
 8005954:	f04f 0600 	mov.w	r6, #0
 8005958:	46a8      	mov	r8, r5
 800595a:	46b1      	mov	r9, r6
 800595c:	eb18 0308 	adds.w	r3, r8, r8
 8005960:	eb49 0409 	adc.w	r4, r9, r9
 8005964:	4698      	mov	r8, r3
 8005966:	46a1      	mov	r9, r4
 8005968:	eb18 0805 	adds.w	r8, r8, r5
 800596c:	eb49 0906 	adc.w	r9, r9, r6
 8005970:	f04f 0100 	mov.w	r1, #0
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800597c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005980:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005984:	4688      	mov	r8, r1
 8005986:	4691      	mov	r9, r2
 8005988:	eb18 0005 	adds.w	r0, r8, r5
 800598c:	eb49 0106 	adc.w	r1, r9, r6
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	461d      	mov	r5, r3
 8005996:	f04f 0600 	mov.w	r6, #0
 800599a:	196b      	adds	r3, r5, r5
 800599c:	eb46 0406 	adc.w	r4, r6, r6
 80059a0:	461a      	mov	r2, r3
 80059a2:	4623      	mov	r3, r4
 80059a4:	f7fa fc8c 	bl	80002c0 <__aeabi_uldivmod>
 80059a8:	4603      	mov	r3, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b47      	ldr	r3, [pc, #284]	; (8005acc <UART_SetConfig+0x384>)
 80059b0:	fba3 2302 	umull	r2, r3, r3, r2
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	461d      	mov	r5, r3
 80059be:	f04f 0600 	mov.w	r6, #0
 80059c2:	46a9      	mov	r9, r5
 80059c4:	46b2      	mov	sl, r6
 80059c6:	eb19 0309 	adds.w	r3, r9, r9
 80059ca:	eb4a 040a 	adc.w	r4, sl, sl
 80059ce:	4699      	mov	r9, r3
 80059d0:	46a2      	mov	sl, r4
 80059d2:	eb19 0905 	adds.w	r9, r9, r5
 80059d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80059da:	f04f 0100 	mov.w	r1, #0
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ee:	4689      	mov	r9, r1
 80059f0:	4692      	mov	sl, r2
 80059f2:	eb19 0005 	adds.w	r0, r9, r5
 80059f6:	eb4a 0106 	adc.w	r1, sl, r6
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	461d      	mov	r5, r3
 8005a00:	f04f 0600 	mov.w	r6, #0
 8005a04:	196b      	adds	r3, r5, r5
 8005a06:	eb46 0406 	adc.w	r4, r6, r6
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	f7fa fc57 	bl	80002c0 <__aeabi_uldivmod>
 8005a12:	4603      	mov	r3, r0
 8005a14:	460c      	mov	r4, r1
 8005a16:	461a      	mov	r2, r3
 8005a18:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <UART_SetConfig+0x384>)
 8005a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	2164      	movs	r1, #100	; 0x64
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	3332      	adds	r3, #50	; 0x32
 8005a2c:	4a27      	ldr	r2, [pc, #156]	; (8005acc <UART_SetConfig+0x384>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a3a:	4498      	add	r8, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	461d      	mov	r5, r3
 8005a40:	f04f 0600 	mov.w	r6, #0
 8005a44:	46a9      	mov	r9, r5
 8005a46:	46b2      	mov	sl, r6
 8005a48:	eb19 0309 	adds.w	r3, r9, r9
 8005a4c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a50:	4699      	mov	r9, r3
 8005a52:	46a2      	mov	sl, r4
 8005a54:	eb19 0905 	adds.w	r9, r9, r5
 8005a58:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a5c:	f04f 0100 	mov.w	r1, #0
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a70:	4689      	mov	r9, r1
 8005a72:	4692      	mov	sl, r2
 8005a74:	eb19 0005 	adds.w	r0, r9, r5
 8005a78:	eb4a 0106 	adc.w	r1, sl, r6
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	461d      	mov	r5, r3
 8005a82:	f04f 0600 	mov.w	r6, #0
 8005a86:	196b      	adds	r3, r5, r5
 8005a88:	eb46 0406 	adc.w	r4, r6, r6
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4623      	mov	r3, r4
 8005a90:	f7fa fc16 	bl	80002c0 <__aeabi_uldivmod>
 8005a94:	4603      	mov	r3, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <UART_SetConfig+0x384>)
 8005a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	2164      	movs	r1, #100	; 0x64
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	3332      	adds	r3, #50	; 0x32
 8005aae:	4a07      	ldr	r2, [pc, #28]	; (8005acc <UART_SetConfig+0x384>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 0207 	and.w	r2, r3, #7
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4442      	add	r2, r8
 8005ac0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ac2:	e1b2      	b.n	8005e2a <UART_SetConfig+0x6e2>
 8005ac4:	40011000 	.word	0x40011000
 8005ac8:	40011400 	.word	0x40011400
 8005acc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4ad7      	ldr	r2, [pc, #860]	; (8005e34 <UART_SetConfig+0x6ec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d005      	beq.n	8005ae6 <UART_SetConfig+0x39e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4ad6      	ldr	r2, [pc, #856]	; (8005e38 <UART_SetConfig+0x6f0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	f040 80d1 	bne.w	8005c88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ae6:	f7fd fbcf 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 8005aea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	469a      	mov	sl, r3
 8005af0:	f04f 0b00 	mov.w	fp, #0
 8005af4:	46d0      	mov	r8, sl
 8005af6:	46d9      	mov	r9, fp
 8005af8:	eb18 0308 	adds.w	r3, r8, r8
 8005afc:	eb49 0409 	adc.w	r4, r9, r9
 8005b00:	4698      	mov	r8, r3
 8005b02:	46a1      	mov	r9, r4
 8005b04:	eb18 080a 	adds.w	r8, r8, sl
 8005b08:	eb49 090b 	adc.w	r9, r9, fp
 8005b0c:	f04f 0100 	mov.w	r1, #0
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b20:	4688      	mov	r8, r1
 8005b22:	4691      	mov	r9, r2
 8005b24:	eb1a 0508 	adds.w	r5, sl, r8
 8005b28:	eb4b 0609 	adc.w	r6, fp, r9
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4619      	mov	r1, r3
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	f04f 0400 	mov.w	r4, #0
 8005b3e:	0094      	lsls	r4, r2, #2
 8005b40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b44:	008b      	lsls	r3, r1, #2
 8005b46:	461a      	mov	r2, r3
 8005b48:	4623      	mov	r3, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	f7fa fbb7 	bl	80002c0 <__aeabi_uldivmod>
 8005b52:	4603      	mov	r3, r0
 8005b54:	460c      	mov	r4, r1
 8005b56:	461a      	mov	r2, r3
 8005b58:	4bb8      	ldr	r3, [pc, #736]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	469b      	mov	fp, r3
 8005b68:	f04f 0c00 	mov.w	ip, #0
 8005b6c:	46d9      	mov	r9, fp
 8005b6e:	46e2      	mov	sl, ip
 8005b70:	eb19 0309 	adds.w	r3, r9, r9
 8005b74:	eb4a 040a 	adc.w	r4, sl, sl
 8005b78:	4699      	mov	r9, r3
 8005b7a:	46a2      	mov	sl, r4
 8005b7c:	eb19 090b 	adds.w	r9, r9, fp
 8005b80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b84:	f04f 0100 	mov.w	r1, #0
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b98:	4689      	mov	r9, r1
 8005b9a:	4692      	mov	sl, r2
 8005b9c:	eb1b 0509 	adds.w	r5, fp, r9
 8005ba0:	eb4c 060a 	adc.w	r6, ip, sl
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	f04f 0400 	mov.w	r4, #0
 8005bb6:	0094      	lsls	r4, r2, #2
 8005bb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	f7fa fb7b 	bl	80002c0 <__aeabi_uldivmod>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4b9a      	ldr	r3, [pc, #616]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2164      	movs	r1, #100	; 0x64
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	3332      	adds	r3, #50	; 0x32
 8005be4:	4a95      	ldr	r2, [pc, #596]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf0:	4498      	add	r8, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	469b      	mov	fp, r3
 8005bf6:	f04f 0c00 	mov.w	ip, #0
 8005bfa:	46d9      	mov	r9, fp
 8005bfc:	46e2      	mov	sl, ip
 8005bfe:	eb19 0309 	adds.w	r3, r9, r9
 8005c02:	eb4a 040a 	adc.w	r4, sl, sl
 8005c06:	4699      	mov	r9, r3
 8005c08:	46a2      	mov	sl, r4
 8005c0a:	eb19 090b 	adds.w	r9, r9, fp
 8005c0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c12:	f04f 0100 	mov.w	r1, #0
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c26:	4689      	mov	r9, r1
 8005c28:	4692      	mov	sl, r2
 8005c2a:	eb1b 0509 	adds.w	r5, fp, r9
 8005c2e:	eb4c 060a 	adc.w	r6, ip, sl
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4619      	mov	r1, r3
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	0094      	lsls	r4, r2, #2
 8005c46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c4a:	008b      	lsls	r3, r1, #2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4623      	mov	r3, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	4631      	mov	r1, r6
 8005c54:	f7fa fb34 	bl	80002c0 <__aeabi_uldivmod>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b77      	ldr	r3, [pc, #476]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005c60:	fba3 1302 	umull	r1, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	2164      	movs	r1, #100	; 0x64
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	3332      	adds	r3, #50	; 0x32
 8005c72:	4a72      	ldr	r2, [pc, #456]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f003 020f 	and.w	r2, r3, #15
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4442      	add	r2, r8
 8005c84:	609a      	str	r2, [r3, #8]
 8005c86:	e0d0      	b.n	8005e2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7fd faea 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	469a      	mov	sl, r3
 8005c92:	f04f 0b00 	mov.w	fp, #0
 8005c96:	46d0      	mov	r8, sl
 8005c98:	46d9      	mov	r9, fp
 8005c9a:	eb18 0308 	adds.w	r3, r8, r8
 8005c9e:	eb49 0409 	adc.w	r4, r9, r9
 8005ca2:	4698      	mov	r8, r3
 8005ca4:	46a1      	mov	r9, r4
 8005ca6:	eb18 080a 	adds.w	r8, r8, sl
 8005caa:	eb49 090b 	adc.w	r9, r9, fp
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cc2:	4688      	mov	r8, r1
 8005cc4:	4691      	mov	r9, r2
 8005cc6:	eb1a 0508 	adds.w	r5, sl, r8
 8005cca:	eb4b 0609 	adc.w	r6, fp, r9
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	f04f 0400 	mov.w	r4, #0
 8005ce0:	0094      	lsls	r4, r2, #2
 8005ce2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ce6:	008b      	lsls	r3, r1, #2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4623      	mov	r3, r4
 8005cec:	4628      	mov	r0, r5
 8005cee:	4631      	mov	r1, r6
 8005cf0:	f7fa fae6 	bl	80002c0 <__aeabi_uldivmod>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4b50      	ldr	r3, [pc, #320]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	469b      	mov	fp, r3
 8005d0a:	f04f 0c00 	mov.w	ip, #0
 8005d0e:	46d9      	mov	r9, fp
 8005d10:	46e2      	mov	sl, ip
 8005d12:	eb19 0309 	adds.w	r3, r9, r9
 8005d16:	eb4a 040a 	adc.w	r4, sl, sl
 8005d1a:	4699      	mov	r9, r3
 8005d1c:	46a2      	mov	sl, r4
 8005d1e:	eb19 090b 	adds.w	r9, r9, fp
 8005d22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d3a:	4689      	mov	r9, r1
 8005d3c:	4692      	mov	sl, r2
 8005d3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005d42:	eb4c 060a 	adc.w	r6, ip, sl
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	f04f 0400 	mov.w	r4, #0
 8005d58:	0094      	lsls	r4, r2, #2
 8005d5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d5e:	008b      	lsls	r3, r1, #2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	4631      	mov	r1, r6
 8005d68:	f7fa faaa 	bl	80002c0 <__aeabi_uldivmod>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	461a      	mov	r2, r3
 8005d72:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005d74:	fba3 1302 	umull	r1, r3, r3, r2
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	2164      	movs	r1, #100	; 0x64
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	3332      	adds	r3, #50	; 0x32
 8005d86:	4a2d      	ldr	r2, [pc, #180]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005d88:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d92:	4498      	add	r8, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	469b      	mov	fp, r3
 8005d98:	f04f 0c00 	mov.w	ip, #0
 8005d9c:	46d9      	mov	r9, fp
 8005d9e:	46e2      	mov	sl, ip
 8005da0:	eb19 0309 	adds.w	r3, r9, r9
 8005da4:	eb4a 040a 	adc.w	r4, sl, sl
 8005da8:	4699      	mov	r9, r3
 8005daa:	46a2      	mov	sl, r4
 8005dac:	eb19 090b 	adds.w	r9, r9, fp
 8005db0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005db4:	f04f 0100 	mov.w	r1, #0
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dc8:	4689      	mov	r9, r1
 8005dca:	4692      	mov	sl, r2
 8005dcc:	eb1b 0509 	adds.w	r5, fp, r9
 8005dd0:	eb4c 060a 	adc.w	r6, ip, sl
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	f04f 0400 	mov.w	r4, #0
 8005de6:	0094      	lsls	r4, r2, #2
 8005de8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dec:	008b      	lsls	r3, r1, #2
 8005dee:	461a      	mov	r2, r3
 8005df0:	4623      	mov	r3, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	4631      	mov	r1, r6
 8005df6:	f7fa fa63 	bl	80002c0 <__aeabi_uldivmod>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005e02:	fba3 1302 	umull	r1, r3, r3, r2
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	2164      	movs	r1, #100	; 0x64
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	3332      	adds	r3, #50	; 0x32
 8005e14:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <UART_SetConfig+0x6f4>)
 8005e16:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	f003 020f 	and.w	r2, r3, #15
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4442      	add	r2, r8
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	e7ff      	b.n	8005e2a <UART_SetConfig+0x6e2>
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e34:	40011000 	.word	0x40011000
 8005e38:	40011400 	.word	0x40011400
 8005e3c:	51eb851f 	.word	0x51eb851f

08005e40 <__errno>:
 8005e40:	4b01      	ldr	r3, [pc, #4]	; (8005e48 <__errno+0x8>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000020 	.word	0x20000020

08005e4c <__libc_init_array>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4e0d      	ldr	r6, [pc, #52]	; (8005e84 <__libc_init_array+0x38>)
 8005e50:	4c0d      	ldr	r4, [pc, #52]	; (8005e88 <__libc_init_array+0x3c>)
 8005e52:	1ba4      	subs	r4, r4, r6
 8005e54:	10a4      	asrs	r4, r4, #2
 8005e56:	2500      	movs	r5, #0
 8005e58:	42a5      	cmp	r5, r4
 8005e5a:	d109      	bne.n	8005e70 <__libc_init_array+0x24>
 8005e5c:	4e0b      	ldr	r6, [pc, #44]	; (8005e8c <__libc_init_array+0x40>)
 8005e5e:	4c0c      	ldr	r4, [pc, #48]	; (8005e90 <__libc_init_array+0x44>)
 8005e60:	f000 fc26 	bl	80066b0 <_init>
 8005e64:	1ba4      	subs	r4, r4, r6
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	2500      	movs	r5, #0
 8005e6a:	42a5      	cmp	r5, r4
 8005e6c:	d105      	bne.n	8005e7a <__libc_init_array+0x2e>
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e74:	4798      	blx	r3
 8005e76:	3501      	adds	r5, #1
 8005e78:	e7ee      	b.n	8005e58 <__libc_init_array+0xc>
 8005e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e7e:	4798      	blx	r3
 8005e80:	3501      	adds	r5, #1
 8005e82:	e7f2      	b.n	8005e6a <__libc_init_array+0x1e>
 8005e84:	08006ddc 	.word	0x08006ddc
 8005e88:	08006ddc 	.word	0x08006ddc
 8005e8c:	08006ddc 	.word	0x08006ddc
 8005e90:	08006de0 	.word	0x08006de0

08005e94 <memcpy>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	1e43      	subs	r3, r0, #1
 8005e98:	440a      	add	r2, r1
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	d100      	bne.n	8005ea0 <memcpy+0xc>
 8005e9e:	bd10      	pop	{r4, pc}
 8005ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea8:	e7f7      	b.n	8005e9a <memcpy+0x6>

08005eaa <memmove>:
 8005eaa:	4288      	cmp	r0, r1
 8005eac:	b510      	push	{r4, lr}
 8005eae:	eb01 0302 	add.w	r3, r1, r2
 8005eb2:	d807      	bhi.n	8005ec4 <memmove+0x1a>
 8005eb4:	1e42      	subs	r2, r0, #1
 8005eb6:	4299      	cmp	r1, r3
 8005eb8:	d00a      	beq.n	8005ed0 <memmove+0x26>
 8005eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ebe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ec2:	e7f8      	b.n	8005eb6 <memmove+0xc>
 8005ec4:	4283      	cmp	r3, r0
 8005ec6:	d9f5      	bls.n	8005eb4 <memmove+0xa>
 8005ec8:	1881      	adds	r1, r0, r2
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	42d3      	cmn	r3, r2
 8005ece:	d100      	bne.n	8005ed2 <memmove+0x28>
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ed6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005eda:	e7f7      	b.n	8005ecc <memmove+0x22>

08005edc <memset>:
 8005edc:	4402      	add	r2, r0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <memset+0xa>
 8005ee4:	4770      	bx	lr
 8005ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eea:	e7f9      	b.n	8005ee0 <memset+0x4>

08005eec <siprintf>:
 8005eec:	b40e      	push	{r1, r2, r3}
 8005eee:	b500      	push	{lr}
 8005ef0:	b09c      	sub	sp, #112	; 0x70
 8005ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ef4:	9002      	str	r0, [sp, #8]
 8005ef6:	9006      	str	r0, [sp, #24]
 8005ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005efc:	4809      	ldr	r0, [pc, #36]	; (8005f24 <siprintf+0x38>)
 8005efe:	9107      	str	r1, [sp, #28]
 8005f00:	9104      	str	r1, [sp, #16]
 8005f02:	4909      	ldr	r1, [pc, #36]	; (8005f28 <siprintf+0x3c>)
 8005f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f08:	9105      	str	r1, [sp, #20]
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	a902      	add	r1, sp, #8
 8005f10:	f000 f866 	bl	8005fe0 <_svfiprintf_r>
 8005f14:	9b02      	ldr	r3, [sp, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	b01c      	add	sp, #112	; 0x70
 8005f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f20:	b003      	add	sp, #12
 8005f22:	4770      	bx	lr
 8005f24:	20000020 	.word	0x20000020
 8005f28:	ffff0208 	.word	0xffff0208

08005f2c <__ssputs_r>:
 8005f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	688e      	ldr	r6, [r1, #8]
 8005f32:	429e      	cmp	r6, r3
 8005f34:	4682      	mov	sl, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	4690      	mov	r8, r2
 8005f3a:	4699      	mov	r9, r3
 8005f3c:	d837      	bhi.n	8005fae <__ssputs_r+0x82>
 8005f3e:	898a      	ldrh	r2, [r1, #12]
 8005f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f44:	d031      	beq.n	8005faa <__ssputs_r+0x7e>
 8005f46:	6825      	ldr	r5, [r4, #0]
 8005f48:	6909      	ldr	r1, [r1, #16]
 8005f4a:	1a6f      	subs	r7, r5, r1
 8005f4c:	6965      	ldr	r5, [r4, #20]
 8005f4e:	2302      	movs	r3, #2
 8005f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f54:	fb95 f5f3 	sdiv	r5, r5, r3
 8005f58:	f109 0301 	add.w	r3, r9, #1
 8005f5c:	443b      	add	r3, r7
 8005f5e:	429d      	cmp	r5, r3
 8005f60:	bf38      	it	cc
 8005f62:	461d      	movcc	r5, r3
 8005f64:	0553      	lsls	r3, r2, #21
 8005f66:	d530      	bpl.n	8005fca <__ssputs_r+0x9e>
 8005f68:	4629      	mov	r1, r5
 8005f6a:	f000 fb07 	bl	800657c <_malloc_r>
 8005f6e:	4606      	mov	r6, r0
 8005f70:	b950      	cbnz	r0, 8005f88 <__ssputs_r+0x5c>
 8005f72:	230c      	movs	r3, #12
 8005f74:	f8ca 3000 	str.w	r3, [sl]
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295
 8005f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f88:	463a      	mov	r2, r7
 8005f8a:	6921      	ldr	r1, [r4, #16]
 8005f8c:	f7ff ff82 	bl	8005e94 <memcpy>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	6126      	str	r6, [r4, #16]
 8005f9e:	6165      	str	r5, [r4, #20]
 8005fa0:	443e      	add	r6, r7
 8005fa2:	1bed      	subs	r5, r5, r7
 8005fa4:	6026      	str	r6, [r4, #0]
 8005fa6:	60a5      	str	r5, [r4, #8]
 8005fa8:	464e      	mov	r6, r9
 8005faa:	454e      	cmp	r6, r9
 8005fac:	d900      	bls.n	8005fb0 <__ssputs_r+0x84>
 8005fae:	464e      	mov	r6, r9
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	6820      	ldr	r0, [r4, #0]
 8005fb6:	f7ff ff78 	bl	8005eaa <memmove>
 8005fba:	68a3      	ldr	r3, [r4, #8]
 8005fbc:	1b9b      	subs	r3, r3, r6
 8005fbe:	60a3      	str	r3, [r4, #8]
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	441e      	add	r6, r3
 8005fc4:	6026      	str	r6, [r4, #0]
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e7dc      	b.n	8005f84 <__ssputs_r+0x58>
 8005fca:	462a      	mov	r2, r5
 8005fcc:	f000 fb30 	bl	8006630 <_realloc_r>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d1e2      	bne.n	8005f9c <__ssputs_r+0x70>
 8005fd6:	6921      	ldr	r1, [r4, #16]
 8005fd8:	4650      	mov	r0, sl
 8005fda:	f000 fa81 	bl	80064e0 <_free_r>
 8005fde:	e7c8      	b.n	8005f72 <__ssputs_r+0x46>

08005fe0 <_svfiprintf_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	461d      	mov	r5, r3
 8005fe6:	898b      	ldrh	r3, [r1, #12]
 8005fe8:	061f      	lsls	r7, r3, #24
 8005fea:	b09d      	sub	sp, #116	; 0x74
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	d50f      	bpl.n	8006014 <_svfiprintf_r+0x34>
 8005ff4:	690b      	ldr	r3, [r1, #16]
 8005ff6:	b96b      	cbnz	r3, 8006014 <_svfiprintf_r+0x34>
 8005ff8:	2140      	movs	r1, #64	; 0x40
 8005ffa:	f000 fabf 	bl	800657c <_malloc_r>
 8005ffe:	6020      	str	r0, [r4, #0]
 8006000:	6120      	str	r0, [r4, #16]
 8006002:	b928      	cbnz	r0, 8006010 <_svfiprintf_r+0x30>
 8006004:	230c      	movs	r3, #12
 8006006:	f8c8 3000 	str.w	r3, [r8]
 800600a:	f04f 30ff 	mov.w	r0, #4294967295
 800600e:	e0c8      	b.n	80061a2 <_svfiprintf_r+0x1c2>
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	6163      	str	r3, [r4, #20]
 8006014:	2300      	movs	r3, #0
 8006016:	9309      	str	r3, [sp, #36]	; 0x24
 8006018:	2320      	movs	r3, #32
 800601a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800601e:	2330      	movs	r3, #48	; 0x30
 8006020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006024:	9503      	str	r5, [sp, #12]
 8006026:	f04f 0b01 	mov.w	fp, #1
 800602a:	4637      	mov	r7, r6
 800602c:	463d      	mov	r5, r7
 800602e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006032:	b10b      	cbz	r3, 8006038 <_svfiprintf_r+0x58>
 8006034:	2b25      	cmp	r3, #37	; 0x25
 8006036:	d13e      	bne.n	80060b6 <_svfiprintf_r+0xd6>
 8006038:	ebb7 0a06 	subs.w	sl, r7, r6
 800603c:	d00b      	beq.n	8006056 <_svfiprintf_r+0x76>
 800603e:	4653      	mov	r3, sl
 8006040:	4632      	mov	r2, r6
 8006042:	4621      	mov	r1, r4
 8006044:	4640      	mov	r0, r8
 8006046:	f7ff ff71 	bl	8005f2c <__ssputs_r>
 800604a:	3001      	adds	r0, #1
 800604c:	f000 80a4 	beq.w	8006198 <_svfiprintf_r+0x1b8>
 8006050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006052:	4453      	add	r3, sl
 8006054:	9309      	str	r3, [sp, #36]	; 0x24
 8006056:	783b      	ldrb	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 809d 	beq.w	8006198 <_svfiprintf_r+0x1b8>
 800605e:	2300      	movs	r3, #0
 8006060:	f04f 32ff 	mov.w	r2, #4294967295
 8006064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006070:	931a      	str	r3, [sp, #104]	; 0x68
 8006072:	462f      	mov	r7, r5
 8006074:	2205      	movs	r2, #5
 8006076:	f817 1b01 	ldrb.w	r1, [r7], #1
 800607a:	4850      	ldr	r0, [pc, #320]	; (80061bc <_svfiprintf_r+0x1dc>)
 800607c:	f7fa f8d0 	bl	8000220 <memchr>
 8006080:	9b04      	ldr	r3, [sp, #16]
 8006082:	b9d0      	cbnz	r0, 80060ba <_svfiprintf_r+0xda>
 8006084:	06d9      	lsls	r1, r3, #27
 8006086:	bf44      	itt	mi
 8006088:	2220      	movmi	r2, #32
 800608a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800608e:	071a      	lsls	r2, r3, #28
 8006090:	bf44      	itt	mi
 8006092:	222b      	movmi	r2, #43	; 0x2b
 8006094:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006098:	782a      	ldrb	r2, [r5, #0]
 800609a:	2a2a      	cmp	r2, #42	; 0x2a
 800609c:	d015      	beq.n	80060ca <_svfiprintf_r+0xea>
 800609e:	9a07      	ldr	r2, [sp, #28]
 80060a0:	462f      	mov	r7, r5
 80060a2:	2000      	movs	r0, #0
 80060a4:	250a      	movs	r5, #10
 80060a6:	4639      	mov	r1, r7
 80060a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ac:	3b30      	subs	r3, #48	; 0x30
 80060ae:	2b09      	cmp	r3, #9
 80060b0:	d94d      	bls.n	800614e <_svfiprintf_r+0x16e>
 80060b2:	b1b8      	cbz	r0, 80060e4 <_svfiprintf_r+0x104>
 80060b4:	e00f      	b.n	80060d6 <_svfiprintf_r+0xf6>
 80060b6:	462f      	mov	r7, r5
 80060b8:	e7b8      	b.n	800602c <_svfiprintf_r+0x4c>
 80060ba:	4a40      	ldr	r2, [pc, #256]	; (80061bc <_svfiprintf_r+0x1dc>)
 80060bc:	1a80      	subs	r0, r0, r2
 80060be:	fa0b f000 	lsl.w	r0, fp, r0
 80060c2:	4318      	orrs	r0, r3
 80060c4:	9004      	str	r0, [sp, #16]
 80060c6:	463d      	mov	r5, r7
 80060c8:	e7d3      	b.n	8006072 <_svfiprintf_r+0x92>
 80060ca:	9a03      	ldr	r2, [sp, #12]
 80060cc:	1d11      	adds	r1, r2, #4
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	9103      	str	r1, [sp, #12]
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	db01      	blt.n	80060da <_svfiprintf_r+0xfa>
 80060d6:	9207      	str	r2, [sp, #28]
 80060d8:	e004      	b.n	80060e4 <_svfiprintf_r+0x104>
 80060da:	4252      	negs	r2, r2
 80060dc:	f043 0302 	orr.w	r3, r3, #2
 80060e0:	9207      	str	r2, [sp, #28]
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	783b      	ldrb	r3, [r7, #0]
 80060e6:	2b2e      	cmp	r3, #46	; 0x2e
 80060e8:	d10c      	bne.n	8006104 <_svfiprintf_r+0x124>
 80060ea:	787b      	ldrb	r3, [r7, #1]
 80060ec:	2b2a      	cmp	r3, #42	; 0x2a
 80060ee:	d133      	bne.n	8006158 <_svfiprintf_r+0x178>
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	9203      	str	r2, [sp, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bfb8      	it	lt
 80060fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006100:	3702      	adds	r7, #2
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	4d2e      	ldr	r5, [pc, #184]	; (80061c0 <_svfiprintf_r+0x1e0>)
 8006106:	7839      	ldrb	r1, [r7, #0]
 8006108:	2203      	movs	r2, #3
 800610a:	4628      	mov	r0, r5
 800610c:	f7fa f888 	bl	8000220 <memchr>
 8006110:	b138      	cbz	r0, 8006122 <_svfiprintf_r+0x142>
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	1b40      	subs	r0, r0, r5
 8006116:	fa03 f000 	lsl.w	r0, r3, r0
 800611a:	9b04      	ldr	r3, [sp, #16]
 800611c:	4303      	orrs	r3, r0
 800611e:	3701      	adds	r7, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	7839      	ldrb	r1, [r7, #0]
 8006124:	4827      	ldr	r0, [pc, #156]	; (80061c4 <_svfiprintf_r+0x1e4>)
 8006126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800612a:	2206      	movs	r2, #6
 800612c:	1c7e      	adds	r6, r7, #1
 800612e:	f7fa f877 	bl	8000220 <memchr>
 8006132:	2800      	cmp	r0, #0
 8006134:	d038      	beq.n	80061a8 <_svfiprintf_r+0x1c8>
 8006136:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <_svfiprintf_r+0x1e8>)
 8006138:	bb13      	cbnz	r3, 8006180 <_svfiprintf_r+0x1a0>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	3307      	adds	r3, #7
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	3308      	adds	r3, #8
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006148:	444b      	add	r3, r9
 800614a:	9309      	str	r3, [sp, #36]	; 0x24
 800614c:	e76d      	b.n	800602a <_svfiprintf_r+0x4a>
 800614e:	fb05 3202 	mla	r2, r5, r2, r3
 8006152:	2001      	movs	r0, #1
 8006154:	460f      	mov	r7, r1
 8006156:	e7a6      	b.n	80060a6 <_svfiprintf_r+0xc6>
 8006158:	2300      	movs	r3, #0
 800615a:	3701      	adds	r7, #1
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	4619      	mov	r1, r3
 8006160:	250a      	movs	r5, #10
 8006162:	4638      	mov	r0, r7
 8006164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006168:	3a30      	subs	r2, #48	; 0x30
 800616a:	2a09      	cmp	r2, #9
 800616c:	d903      	bls.n	8006176 <_svfiprintf_r+0x196>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0c8      	beq.n	8006104 <_svfiprintf_r+0x124>
 8006172:	9105      	str	r1, [sp, #20]
 8006174:	e7c6      	b.n	8006104 <_svfiprintf_r+0x124>
 8006176:	fb05 2101 	mla	r1, r5, r1, r2
 800617a:	2301      	movs	r3, #1
 800617c:	4607      	mov	r7, r0
 800617e:	e7f0      	b.n	8006162 <_svfiprintf_r+0x182>
 8006180:	ab03      	add	r3, sp, #12
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4622      	mov	r2, r4
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <_svfiprintf_r+0x1ec>)
 8006188:	a904      	add	r1, sp, #16
 800618a:	4640      	mov	r0, r8
 800618c:	f3af 8000 	nop.w
 8006190:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006194:	4681      	mov	r9, r0
 8006196:	d1d6      	bne.n	8006146 <_svfiprintf_r+0x166>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	065b      	lsls	r3, r3, #25
 800619c:	f53f af35 	bmi.w	800600a <_svfiprintf_r+0x2a>
 80061a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061a2:	b01d      	add	sp, #116	; 0x74
 80061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a8:	ab03      	add	r3, sp, #12
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	4622      	mov	r2, r4
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <_svfiprintf_r+0x1ec>)
 80061b0:	a904      	add	r1, sp, #16
 80061b2:	4640      	mov	r0, r8
 80061b4:	f000 f882 	bl	80062bc <_printf_i>
 80061b8:	e7ea      	b.n	8006190 <_svfiprintf_r+0x1b0>
 80061ba:	bf00      	nop
 80061bc:	08006da0 	.word	0x08006da0
 80061c0:	08006da6 	.word	0x08006da6
 80061c4:	08006daa 	.word	0x08006daa
 80061c8:	00000000 	.word	0x00000000
 80061cc:	08005f2d 	.word	0x08005f2d

080061d0 <_printf_common>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	4691      	mov	r9, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	688a      	ldr	r2, [r1, #8]
 80061da:	690b      	ldr	r3, [r1, #16]
 80061dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bfb8      	it	lt
 80061e4:	4613      	movlt	r3, r2
 80061e6:	f8c9 3000 	str.w	r3, [r9]
 80061ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ee:	4606      	mov	r6, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	b112      	cbz	r2, 80061fa <_printf_common+0x2a>
 80061f4:	3301      	adds	r3, #1
 80061f6:	f8c9 3000 	str.w	r3, [r9]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	0699      	lsls	r1, r3, #26
 80061fe:	bf42      	ittt	mi
 8006200:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006204:	3302      	addmi	r3, #2
 8006206:	f8c9 3000 	strmi.w	r3, [r9]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	f015 0506 	ands.w	r5, r5, #6
 8006210:	d107      	bne.n	8006222 <_printf_common+0x52>
 8006212:	f104 0a19 	add.w	sl, r4, #25
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	f8d9 2000 	ldr.w	r2, [r9]
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	42ab      	cmp	r3, r5
 8006220:	dc28      	bgt.n	8006274 <_printf_common+0xa4>
 8006222:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	3300      	adds	r3, #0
 800622a:	bf18      	it	ne
 800622c:	2301      	movne	r3, #1
 800622e:	0692      	lsls	r2, r2, #26
 8006230:	d42d      	bmi.n	800628e <_printf_common+0xbe>
 8006232:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006236:	4639      	mov	r1, r7
 8006238:	4630      	mov	r0, r6
 800623a:	47c0      	blx	r8
 800623c:	3001      	adds	r0, #1
 800623e:	d020      	beq.n	8006282 <_printf_common+0xb2>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	68e5      	ldr	r5, [r4, #12]
 8006244:	f8d9 2000 	ldr.w	r2, [r9]
 8006248:	f003 0306 	and.w	r3, r3, #6
 800624c:	2b04      	cmp	r3, #4
 800624e:	bf08      	it	eq
 8006250:	1aad      	subeq	r5, r5, r2
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	6922      	ldr	r2, [r4, #16]
 8006256:	bf0c      	ite	eq
 8006258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800625c:	2500      	movne	r5, #0
 800625e:	4293      	cmp	r3, r2
 8006260:	bfc4      	itt	gt
 8006262:	1a9b      	subgt	r3, r3, r2
 8006264:	18ed      	addgt	r5, r5, r3
 8006266:	f04f 0900 	mov.w	r9, #0
 800626a:	341a      	adds	r4, #26
 800626c:	454d      	cmp	r5, r9
 800626e:	d11a      	bne.n	80062a6 <_printf_common+0xd6>
 8006270:	2000      	movs	r0, #0
 8006272:	e008      	b.n	8006286 <_printf_common+0xb6>
 8006274:	2301      	movs	r3, #1
 8006276:	4652      	mov	r2, sl
 8006278:	4639      	mov	r1, r7
 800627a:	4630      	mov	r0, r6
 800627c:	47c0      	blx	r8
 800627e:	3001      	adds	r0, #1
 8006280:	d103      	bne.n	800628a <_printf_common+0xba>
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	3501      	adds	r5, #1
 800628c:	e7c3      	b.n	8006216 <_printf_common+0x46>
 800628e:	18e1      	adds	r1, r4, r3
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	2030      	movs	r0, #48	; 0x30
 8006294:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006298:	4422      	add	r2, r4
 800629a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800629e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062a2:	3302      	adds	r3, #2
 80062a4:	e7c5      	b.n	8006232 <_printf_common+0x62>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4622      	mov	r2, r4
 80062aa:	4639      	mov	r1, r7
 80062ac:	4630      	mov	r0, r6
 80062ae:	47c0      	blx	r8
 80062b0:	3001      	adds	r0, #1
 80062b2:	d0e6      	beq.n	8006282 <_printf_common+0xb2>
 80062b4:	f109 0901 	add.w	r9, r9, #1
 80062b8:	e7d8      	b.n	800626c <_printf_common+0x9c>
	...

080062bc <_printf_i>:
 80062bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062c4:	460c      	mov	r4, r1
 80062c6:	7e09      	ldrb	r1, [r1, #24]
 80062c8:	b085      	sub	sp, #20
 80062ca:	296e      	cmp	r1, #110	; 0x6e
 80062cc:	4617      	mov	r7, r2
 80062ce:	4606      	mov	r6, r0
 80062d0:	4698      	mov	r8, r3
 80062d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062d4:	f000 80b3 	beq.w	800643e <_printf_i+0x182>
 80062d8:	d822      	bhi.n	8006320 <_printf_i+0x64>
 80062da:	2963      	cmp	r1, #99	; 0x63
 80062dc:	d036      	beq.n	800634c <_printf_i+0x90>
 80062de:	d80a      	bhi.n	80062f6 <_printf_i+0x3a>
 80062e0:	2900      	cmp	r1, #0
 80062e2:	f000 80b9 	beq.w	8006458 <_printf_i+0x19c>
 80062e6:	2958      	cmp	r1, #88	; 0x58
 80062e8:	f000 8083 	beq.w	80063f2 <_printf_i+0x136>
 80062ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062f4:	e032      	b.n	800635c <_printf_i+0xa0>
 80062f6:	2964      	cmp	r1, #100	; 0x64
 80062f8:	d001      	beq.n	80062fe <_printf_i+0x42>
 80062fa:	2969      	cmp	r1, #105	; 0x69
 80062fc:	d1f6      	bne.n	80062ec <_printf_i+0x30>
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	6813      	ldr	r3, [r2, #0]
 8006302:	0605      	lsls	r5, r0, #24
 8006304:	f103 0104 	add.w	r1, r3, #4
 8006308:	d52a      	bpl.n	8006360 <_printf_i+0xa4>
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6011      	str	r1, [r2, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	da03      	bge.n	800631a <_printf_i+0x5e>
 8006312:	222d      	movs	r2, #45	; 0x2d
 8006314:	425b      	negs	r3, r3
 8006316:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800631a:	486f      	ldr	r0, [pc, #444]	; (80064d8 <_printf_i+0x21c>)
 800631c:	220a      	movs	r2, #10
 800631e:	e039      	b.n	8006394 <_printf_i+0xd8>
 8006320:	2973      	cmp	r1, #115	; 0x73
 8006322:	f000 809d 	beq.w	8006460 <_printf_i+0x1a4>
 8006326:	d808      	bhi.n	800633a <_printf_i+0x7e>
 8006328:	296f      	cmp	r1, #111	; 0x6f
 800632a:	d020      	beq.n	800636e <_printf_i+0xb2>
 800632c:	2970      	cmp	r1, #112	; 0x70
 800632e:	d1dd      	bne.n	80062ec <_printf_i+0x30>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	f043 0320 	orr.w	r3, r3, #32
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	e003      	b.n	8006342 <_printf_i+0x86>
 800633a:	2975      	cmp	r1, #117	; 0x75
 800633c:	d017      	beq.n	800636e <_printf_i+0xb2>
 800633e:	2978      	cmp	r1, #120	; 0x78
 8006340:	d1d4      	bne.n	80062ec <_printf_i+0x30>
 8006342:	2378      	movs	r3, #120	; 0x78
 8006344:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006348:	4864      	ldr	r0, [pc, #400]	; (80064dc <_printf_i+0x220>)
 800634a:	e055      	b.n	80063f8 <_printf_i+0x13c>
 800634c:	6813      	ldr	r3, [r2, #0]
 800634e:	1d19      	adds	r1, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6011      	str	r1, [r2, #0]
 8006354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635c:	2301      	movs	r3, #1
 800635e:	e08c      	b.n	800647a <_printf_i+0x1be>
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6011      	str	r1, [r2, #0]
 8006364:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006368:	bf18      	it	ne
 800636a:	b21b      	sxthne	r3, r3
 800636c:	e7cf      	b.n	800630e <_printf_i+0x52>
 800636e:	6813      	ldr	r3, [r2, #0]
 8006370:	6825      	ldr	r5, [r4, #0]
 8006372:	1d18      	adds	r0, r3, #4
 8006374:	6010      	str	r0, [r2, #0]
 8006376:	0628      	lsls	r0, r5, #24
 8006378:	d501      	bpl.n	800637e <_printf_i+0xc2>
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	e002      	b.n	8006384 <_printf_i+0xc8>
 800637e:	0668      	lsls	r0, r5, #25
 8006380:	d5fb      	bpl.n	800637a <_printf_i+0xbe>
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	4854      	ldr	r0, [pc, #336]	; (80064d8 <_printf_i+0x21c>)
 8006386:	296f      	cmp	r1, #111	; 0x6f
 8006388:	bf14      	ite	ne
 800638a:	220a      	movne	r2, #10
 800638c:	2208      	moveq	r2, #8
 800638e:	2100      	movs	r1, #0
 8006390:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006394:	6865      	ldr	r5, [r4, #4]
 8006396:	60a5      	str	r5, [r4, #8]
 8006398:	2d00      	cmp	r5, #0
 800639a:	f2c0 8095 	blt.w	80064c8 <_printf_i+0x20c>
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	f021 0104 	bic.w	r1, r1, #4
 80063a4:	6021      	str	r1, [r4, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d13d      	bne.n	8006426 <_printf_i+0x16a>
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	f040 808e 	bne.w	80064cc <_printf_i+0x210>
 80063b0:	4665      	mov	r5, ip
 80063b2:	2a08      	cmp	r2, #8
 80063b4:	d10b      	bne.n	80063ce <_printf_i+0x112>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	07db      	lsls	r3, r3, #31
 80063ba:	d508      	bpl.n	80063ce <_printf_i+0x112>
 80063bc:	6923      	ldr	r3, [r4, #16]
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	bfde      	ittt	le
 80063c4:	2330      	movle	r3, #48	; 0x30
 80063c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063ce:	ebac 0305 	sub.w	r3, ip, r5
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	f8cd 8000 	str.w	r8, [sp]
 80063d8:	463b      	mov	r3, r7
 80063da:	aa03      	add	r2, sp, #12
 80063dc:	4621      	mov	r1, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff fef6 	bl	80061d0 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d14d      	bne.n	8006484 <_printf_i+0x1c8>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b005      	add	sp, #20
 80063ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063f2:	4839      	ldr	r0, [pc, #228]	; (80064d8 <_printf_i+0x21c>)
 80063f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063f8:	6813      	ldr	r3, [r2, #0]
 80063fa:	6821      	ldr	r1, [r4, #0]
 80063fc:	1d1d      	adds	r5, r3, #4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6015      	str	r5, [r2, #0]
 8006402:	060a      	lsls	r2, r1, #24
 8006404:	d50b      	bpl.n	800641e <_printf_i+0x162>
 8006406:	07ca      	lsls	r2, r1, #31
 8006408:	bf44      	itt	mi
 800640a:	f041 0120 	orrmi.w	r1, r1, #32
 800640e:	6021      	strmi	r1, [r4, #0]
 8006410:	b91b      	cbnz	r3, 800641a <_printf_i+0x15e>
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	f022 0220 	bic.w	r2, r2, #32
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	2210      	movs	r2, #16
 800641c:	e7b7      	b.n	800638e <_printf_i+0xd2>
 800641e:	064d      	lsls	r5, r1, #25
 8006420:	bf48      	it	mi
 8006422:	b29b      	uxthmi	r3, r3
 8006424:	e7ef      	b.n	8006406 <_printf_i+0x14a>
 8006426:	4665      	mov	r5, ip
 8006428:	fbb3 f1f2 	udiv	r1, r3, r2
 800642c:	fb02 3311 	mls	r3, r2, r1, r3
 8006430:	5cc3      	ldrb	r3, [r0, r3]
 8006432:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006436:	460b      	mov	r3, r1
 8006438:	2900      	cmp	r1, #0
 800643a:	d1f5      	bne.n	8006428 <_printf_i+0x16c>
 800643c:	e7b9      	b.n	80063b2 <_printf_i+0xf6>
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	6825      	ldr	r5, [r4, #0]
 8006442:	6961      	ldr	r1, [r4, #20]
 8006444:	1d18      	adds	r0, r3, #4
 8006446:	6010      	str	r0, [r2, #0]
 8006448:	0628      	lsls	r0, r5, #24
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	d501      	bpl.n	8006452 <_printf_i+0x196>
 800644e:	6019      	str	r1, [r3, #0]
 8006450:	e002      	b.n	8006458 <_printf_i+0x19c>
 8006452:	066a      	lsls	r2, r5, #25
 8006454:	d5fb      	bpl.n	800644e <_printf_i+0x192>
 8006456:	8019      	strh	r1, [r3, #0]
 8006458:	2300      	movs	r3, #0
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	4665      	mov	r5, ip
 800645e:	e7b9      	b.n	80063d4 <_printf_i+0x118>
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	1d19      	adds	r1, r3, #4
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	681d      	ldr	r5, [r3, #0]
 8006468:	6862      	ldr	r2, [r4, #4]
 800646a:	2100      	movs	r1, #0
 800646c:	4628      	mov	r0, r5
 800646e:	f7f9 fed7 	bl	8000220 <memchr>
 8006472:	b108      	cbz	r0, 8006478 <_printf_i+0x1bc>
 8006474:	1b40      	subs	r0, r0, r5
 8006476:	6060      	str	r0, [r4, #4]
 8006478:	6863      	ldr	r3, [r4, #4]
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	2300      	movs	r3, #0
 800647e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006482:	e7a7      	b.n	80063d4 <_printf_i+0x118>
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	462a      	mov	r2, r5
 8006488:	4639      	mov	r1, r7
 800648a:	4630      	mov	r0, r6
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d0aa      	beq.n	80063e8 <_printf_i+0x12c>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	079b      	lsls	r3, r3, #30
 8006496:	d413      	bmi.n	80064c0 <_printf_i+0x204>
 8006498:	68e0      	ldr	r0, [r4, #12]
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	4298      	cmp	r0, r3
 800649e:	bfb8      	it	lt
 80064a0:	4618      	movlt	r0, r3
 80064a2:	e7a3      	b.n	80063ec <_printf_i+0x130>
 80064a4:	2301      	movs	r3, #1
 80064a6:	464a      	mov	r2, r9
 80064a8:	4639      	mov	r1, r7
 80064aa:	4630      	mov	r0, r6
 80064ac:	47c0      	blx	r8
 80064ae:	3001      	adds	r0, #1
 80064b0:	d09a      	beq.n	80063e8 <_printf_i+0x12c>
 80064b2:	3501      	adds	r5, #1
 80064b4:	68e3      	ldr	r3, [r4, #12]
 80064b6:	9a03      	ldr	r2, [sp, #12]
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	42ab      	cmp	r3, r5
 80064bc:	dcf2      	bgt.n	80064a4 <_printf_i+0x1e8>
 80064be:	e7eb      	b.n	8006498 <_printf_i+0x1dc>
 80064c0:	2500      	movs	r5, #0
 80064c2:	f104 0919 	add.w	r9, r4, #25
 80064c6:	e7f5      	b.n	80064b4 <_printf_i+0x1f8>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1ac      	bne.n	8006426 <_printf_i+0x16a>
 80064cc:	7803      	ldrb	r3, [r0, #0]
 80064ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d6:	e76c      	b.n	80063b2 <_printf_i+0xf6>
 80064d8:	08006db1 	.word	0x08006db1
 80064dc:	08006dc2 	.word	0x08006dc2

080064e0 <_free_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4605      	mov	r5, r0
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d045      	beq.n	8006574 <_free_r+0x94>
 80064e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ec:	1f0c      	subs	r4, r1, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bfb8      	it	lt
 80064f2:	18e4      	addlt	r4, r4, r3
 80064f4:	f000 f8d2 	bl	800669c <__malloc_lock>
 80064f8:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <_free_r+0x98>)
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	4610      	mov	r0, r2
 80064fe:	b933      	cbnz	r3, 800650e <_free_r+0x2e>
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	6014      	str	r4, [r2, #0]
 8006504:	4628      	mov	r0, r5
 8006506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800650a:	f000 b8c8 	b.w	800669e <__malloc_unlock>
 800650e:	42a3      	cmp	r3, r4
 8006510:	d90c      	bls.n	800652c <_free_r+0x4c>
 8006512:	6821      	ldr	r1, [r4, #0]
 8006514:	1862      	adds	r2, r4, r1
 8006516:	4293      	cmp	r3, r2
 8006518:	bf04      	itt	eq
 800651a:	681a      	ldreq	r2, [r3, #0]
 800651c:	685b      	ldreq	r3, [r3, #4]
 800651e:	6063      	str	r3, [r4, #4]
 8006520:	bf04      	itt	eq
 8006522:	1852      	addeq	r2, r2, r1
 8006524:	6022      	streq	r2, [r4, #0]
 8006526:	6004      	str	r4, [r0, #0]
 8006528:	e7ec      	b.n	8006504 <_free_r+0x24>
 800652a:	4613      	mov	r3, r2
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	b10a      	cbz	r2, 8006534 <_free_r+0x54>
 8006530:	42a2      	cmp	r2, r4
 8006532:	d9fa      	bls.n	800652a <_free_r+0x4a>
 8006534:	6819      	ldr	r1, [r3, #0]
 8006536:	1858      	adds	r0, r3, r1
 8006538:	42a0      	cmp	r0, r4
 800653a:	d10b      	bne.n	8006554 <_free_r+0x74>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	4401      	add	r1, r0
 8006540:	1858      	adds	r0, r3, r1
 8006542:	4282      	cmp	r2, r0
 8006544:	6019      	str	r1, [r3, #0]
 8006546:	d1dd      	bne.n	8006504 <_free_r+0x24>
 8006548:	6810      	ldr	r0, [r2, #0]
 800654a:	6852      	ldr	r2, [r2, #4]
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	4401      	add	r1, r0
 8006550:	6019      	str	r1, [r3, #0]
 8006552:	e7d7      	b.n	8006504 <_free_r+0x24>
 8006554:	d902      	bls.n	800655c <_free_r+0x7c>
 8006556:	230c      	movs	r3, #12
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	e7d3      	b.n	8006504 <_free_r+0x24>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428a      	cmp	r2, r1
 8006562:	bf04      	itt	eq
 8006564:	6811      	ldreq	r1, [r2, #0]
 8006566:	6852      	ldreq	r2, [r2, #4]
 8006568:	6062      	str	r2, [r4, #4]
 800656a:	bf04      	itt	eq
 800656c:	1809      	addeq	r1, r1, r0
 800656e:	6021      	streq	r1, [r4, #0]
 8006570:	605c      	str	r4, [r3, #4]
 8006572:	e7c7      	b.n	8006504 <_free_r+0x24>
 8006574:	bd38      	pop	{r3, r4, r5, pc}
 8006576:	bf00      	nop
 8006578:	200000d8 	.word	0x200000d8

0800657c <_malloc_r>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	1ccd      	adds	r5, r1, #3
 8006580:	f025 0503 	bic.w	r5, r5, #3
 8006584:	3508      	adds	r5, #8
 8006586:	2d0c      	cmp	r5, #12
 8006588:	bf38      	it	cc
 800658a:	250c      	movcc	r5, #12
 800658c:	2d00      	cmp	r5, #0
 800658e:	4606      	mov	r6, r0
 8006590:	db01      	blt.n	8006596 <_malloc_r+0x1a>
 8006592:	42a9      	cmp	r1, r5
 8006594:	d903      	bls.n	800659e <_malloc_r+0x22>
 8006596:	230c      	movs	r3, #12
 8006598:	6033      	str	r3, [r6, #0]
 800659a:	2000      	movs	r0, #0
 800659c:	bd70      	pop	{r4, r5, r6, pc}
 800659e:	f000 f87d 	bl	800669c <__malloc_lock>
 80065a2:	4a21      	ldr	r2, [pc, #132]	; (8006628 <_malloc_r+0xac>)
 80065a4:	6814      	ldr	r4, [r2, #0]
 80065a6:	4621      	mov	r1, r4
 80065a8:	b991      	cbnz	r1, 80065d0 <_malloc_r+0x54>
 80065aa:	4c20      	ldr	r4, [pc, #128]	; (800662c <_malloc_r+0xb0>)
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	b91b      	cbnz	r3, 80065b8 <_malloc_r+0x3c>
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 f863 	bl	800667c <_sbrk_r>
 80065b6:	6020      	str	r0, [r4, #0]
 80065b8:	4629      	mov	r1, r5
 80065ba:	4630      	mov	r0, r6
 80065bc:	f000 f85e 	bl	800667c <_sbrk_r>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d124      	bne.n	800660e <_malloc_r+0x92>
 80065c4:	230c      	movs	r3, #12
 80065c6:	6033      	str	r3, [r6, #0]
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 f868 	bl	800669e <__malloc_unlock>
 80065ce:	e7e4      	b.n	800659a <_malloc_r+0x1e>
 80065d0:	680b      	ldr	r3, [r1, #0]
 80065d2:	1b5b      	subs	r3, r3, r5
 80065d4:	d418      	bmi.n	8006608 <_malloc_r+0x8c>
 80065d6:	2b0b      	cmp	r3, #11
 80065d8:	d90f      	bls.n	80065fa <_malloc_r+0x7e>
 80065da:	600b      	str	r3, [r1, #0]
 80065dc:	50cd      	str	r5, [r1, r3]
 80065de:	18cc      	adds	r4, r1, r3
 80065e0:	4630      	mov	r0, r6
 80065e2:	f000 f85c 	bl	800669e <__malloc_unlock>
 80065e6:	f104 000b 	add.w	r0, r4, #11
 80065ea:	1d23      	adds	r3, r4, #4
 80065ec:	f020 0007 	bic.w	r0, r0, #7
 80065f0:	1ac3      	subs	r3, r0, r3
 80065f2:	d0d3      	beq.n	800659c <_malloc_r+0x20>
 80065f4:	425a      	negs	r2, r3
 80065f6:	50e2      	str	r2, [r4, r3]
 80065f8:	e7d0      	b.n	800659c <_malloc_r+0x20>
 80065fa:	428c      	cmp	r4, r1
 80065fc:	684b      	ldr	r3, [r1, #4]
 80065fe:	bf16      	itet	ne
 8006600:	6063      	strne	r3, [r4, #4]
 8006602:	6013      	streq	r3, [r2, #0]
 8006604:	460c      	movne	r4, r1
 8006606:	e7eb      	b.n	80065e0 <_malloc_r+0x64>
 8006608:	460c      	mov	r4, r1
 800660a:	6849      	ldr	r1, [r1, #4]
 800660c:	e7cc      	b.n	80065a8 <_malloc_r+0x2c>
 800660e:	1cc4      	adds	r4, r0, #3
 8006610:	f024 0403 	bic.w	r4, r4, #3
 8006614:	42a0      	cmp	r0, r4
 8006616:	d005      	beq.n	8006624 <_malloc_r+0xa8>
 8006618:	1a21      	subs	r1, r4, r0
 800661a:	4630      	mov	r0, r6
 800661c:	f000 f82e 	bl	800667c <_sbrk_r>
 8006620:	3001      	adds	r0, #1
 8006622:	d0cf      	beq.n	80065c4 <_malloc_r+0x48>
 8006624:	6025      	str	r5, [r4, #0]
 8006626:	e7db      	b.n	80065e0 <_malloc_r+0x64>
 8006628:	200000d8 	.word	0x200000d8
 800662c:	200000dc 	.word	0x200000dc

08006630 <_realloc_r>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	4607      	mov	r7, r0
 8006634:	4614      	mov	r4, r2
 8006636:	460e      	mov	r6, r1
 8006638:	b921      	cbnz	r1, 8006644 <_realloc_r+0x14>
 800663a:	4611      	mov	r1, r2
 800663c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006640:	f7ff bf9c 	b.w	800657c <_malloc_r>
 8006644:	b922      	cbnz	r2, 8006650 <_realloc_r+0x20>
 8006646:	f7ff ff4b 	bl	80064e0 <_free_r>
 800664a:	4625      	mov	r5, r4
 800664c:	4628      	mov	r0, r5
 800664e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006650:	f000 f826 	bl	80066a0 <_malloc_usable_size_r>
 8006654:	42a0      	cmp	r0, r4
 8006656:	d20f      	bcs.n	8006678 <_realloc_r+0x48>
 8006658:	4621      	mov	r1, r4
 800665a:	4638      	mov	r0, r7
 800665c:	f7ff ff8e 	bl	800657c <_malloc_r>
 8006660:	4605      	mov	r5, r0
 8006662:	2800      	cmp	r0, #0
 8006664:	d0f2      	beq.n	800664c <_realloc_r+0x1c>
 8006666:	4631      	mov	r1, r6
 8006668:	4622      	mov	r2, r4
 800666a:	f7ff fc13 	bl	8005e94 <memcpy>
 800666e:	4631      	mov	r1, r6
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff ff35 	bl	80064e0 <_free_r>
 8006676:	e7e9      	b.n	800664c <_realloc_r+0x1c>
 8006678:	4635      	mov	r5, r6
 800667a:	e7e7      	b.n	800664c <_realloc_r+0x1c>

0800667c <_sbrk_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4c06      	ldr	r4, [pc, #24]	; (8006698 <_sbrk_r+0x1c>)
 8006680:	2300      	movs	r3, #0
 8006682:	4605      	mov	r5, r0
 8006684:	4608      	mov	r0, r1
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	f7fb fcea 	bl	8002060 <_sbrk>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_sbrk_r+0x1a>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	b103      	cbz	r3, 8006696 <_sbrk_r+0x1a>
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	200034b0 	.word	0x200034b0

0800669c <__malloc_lock>:
 800669c:	4770      	bx	lr

0800669e <__malloc_unlock>:
 800669e:	4770      	bx	lr

080066a0 <_malloc_usable_size_r>:
 80066a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a4:	1f18      	subs	r0, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfbc      	itt	lt
 80066aa:	580b      	ldrlt	r3, [r1, r0]
 80066ac:	18c0      	addlt	r0, r0, r3
 80066ae:	4770      	bx	lr

080066b0 <_init>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	bf00      	nop
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr

080066bc <_fini>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr
