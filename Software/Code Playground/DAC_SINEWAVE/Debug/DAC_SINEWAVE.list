
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006644  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  000209e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d1c  08006d1c  000209e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e0  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004930  200009e0  08007704  000209e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005310  08007704  00025310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a8c  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026e2  00000000  00000000  0003249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00034b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00035aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023070  00000000  00000000  00036898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c297  00000000  00000000  00059908  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d27e7  00000000  00000000  00065b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138386  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  00138404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e0 	.word	0x200009e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067fc 	.word	0x080067fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e4 	.word	0x200009e4
 800020c:	080067fc 	.word	0x080067fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b480      	push	{r7}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    //sprintf(uartData, "Selector              = %d",select_8_16);
    //HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    //sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

    if(select_8_16){
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01f      	beq.n	8000616 <conv_HEX_to_BIN+0x56>
		for(int i = 0; i < 8; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e018      	b.n	800060e <conv_HEX_to_BIN+0x4e>
			temp = hex_byte_in >> i;
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	fa42 f303 	asr.w	r3, r2, r3
 80005e4:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	bfb8      	it	lt
 80005f0:	425b      	neglt	r3, r3
 80005f2:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	2a00      	cmp	r2, #0
 80005fe:	bf14      	ite	ne
 8000600:	2201      	movne	r2, #1
 8000602:	2200      	moveq	r2, #0
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	2b07      	cmp	r3, #7
 8000612:	dde3      	ble.n	80005dc <conv_HEX_to_BIN+0x1c>
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000614:	e01e      	b.n	8000654 <conv_HEX_to_BIN+0x94>
		for(int i = 0; i < 16; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]
			*(bin_byte_out+i) = temp;
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	3301      	adds	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
}
 8000654:	bf00      	nop
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000664:	2201      	movs	r2, #1
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <init_AX25+0x2c>)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <init_AX25+0x30>)
 800066a:	f004 fe3b 	bl	80052e4 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <init_AX25+0x34>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <init_AX25+0x34>)
 8000676:	2200      	movs	r2, #0
 8000678:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <init_AX25+0x34>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <init_AX25+0x34>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20001d80 	.word	0x20001d80
 8000690:	200042c8 	.word	0x200042c8
 8000694:	20001d74 	.word	0x20001d74

08000698 <tx_rx>:

void tx_rx() {
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	if (changeMode) {
 800069e:	4b59      	ldr	r3, [pc, #356]	; (8000804 <tx_rx+0x16c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <tx_rx+0x18>
		changeMode = 0;
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <tx_rx+0x16c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
		toggleMode();
 80006ac:	f001 fa14 	bl	8001ad8 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 80006b0:	4b55      	ldr	r3, [pc, #340]	; (8000808 <tx_rx+0x170>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d07e      	beq.n	80007b6 <tx_rx+0x11e>
		bool packet_received = false;
 80006b8:	2300      	movs	r3, #0
 80006ba:	717b      	strb	r3, [r7, #5]
		bool packet_converted = false;
 80006bc:	2300      	movs	r3, #0
 80006be:	71fb      	strb	r3, [r7, #7]

		//Run receiving KISS
		packet_received = receiving_KISS();
 80006c0:	f001 f854 	bl	800176c <receiving_KISS>
 80006c4:	4603      	mov	r3, r0
 80006c6:	717b      	strb	r3, [r7, #5]

		if(packet_received){
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <tx_rx+0x3e>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 80006ce:	f001 f97f 	bl	80019d0 <KISS_TO_AX25>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <tx_rx+0x48>
			output_AX25();
 80006dc:	f000 f8a2 	bl	8000824 <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 80006e0:	f000 fb5e 	bl	8000da0 <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d019      	beq.n	8000724 <tx_rx+0x8c>
			sprintf(uartData, "Error receiving KISS packet\n");
 80006f0:	4a46      	ldr	r2, [pc, #280]	; (800080c <tx_rx+0x174>)
 80006f2:	4b47      	ldr	r3, [pc, #284]	; (8000810 <tx_rx+0x178>)
 80006f4:	4615      	mov	r5, r2
 80006f6:	461c      	mov	r4, r3
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	6028      	str	r0, [r5, #0]
 80006fc:	6069      	str	r1, [r5, #4]
 80006fe:	60aa      	str	r2, [r5, #8]
 8000700:	60eb      	str	r3, [r5, #12]
 8000702:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000704:	6128      	str	r0, [r5, #16]
 8000706:	6169      	str	r1, [r5, #20]
 8000708:	61aa      	str	r2, [r5, #24]
 800070a:	7823      	ldrb	r3, [r4, #0]
 800070c:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800070e:	483f      	ldr	r0, [pc, #252]	; (800080c <tx_rx+0x174>)
 8000710:	f7ff fd7e 	bl	8000210 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	230a      	movs	r3, #10
 800071a:	493c      	ldr	r1, [pc, #240]	; (800080c <tx_rx+0x174>)
 800071c:	483d      	ldr	r0, [pc, #244]	; (8000814 <tx_rx+0x17c>)
 800071e:	f004 fd48 	bl	80051b2 <HAL_UART_Transmit>
 8000722:	e044      	b.n	80007ae <tx_rx+0x116>
		}
		//Packet was not converted properly
		else if(!packet_converted){
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d019      	beq.n	8000764 <tx_rx+0xcc>
			sprintf(uartData, "Error converting KISS packet\n");
 8000730:	4a36      	ldr	r2, [pc, #216]	; (800080c <tx_rx+0x174>)
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <tx_rx+0x180>)
 8000734:	4615      	mov	r5, r2
 8000736:	461c      	mov	r4, r3
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	6028      	str	r0, [r5, #0]
 800073c:	6069      	str	r1, [r5, #4]
 800073e:	60aa      	str	r2, [r5, #8]
 8000740:	60eb      	str	r3, [r5, #12]
 8000742:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000744:	6128      	str	r0, [r5, #16]
 8000746:	6169      	str	r1, [r5, #20]
 8000748:	61aa      	str	r2, [r5, #24]
 800074a:	8823      	ldrh	r3, [r4, #0]
 800074c:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800074e:	482f      	ldr	r0, [pc, #188]	; (800080c <tx_rx+0x174>)
 8000750:	f7ff fd5e 	bl	8000210 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	230a      	movs	r3, #10
 800075a:	492c      	ldr	r1, [pc, #176]	; (800080c <tx_rx+0x174>)
 800075c:	482d      	ldr	r0, [pc, #180]	; (8000814 <tx_rx+0x17c>)
 800075e:	f004 fd28 	bl	80051b2 <HAL_UART_Transmit>
 8000762:	e024      	b.n	80007ae <tx_rx+0x116>
		}
		//Successful transmission!
		else {
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <tx_rx+0x174>)
 8000766:	4a2d      	ldr	r2, [pc, #180]	; (800081c <tx_rx+0x184>)
 8000768:	4614      	mov	r4, r2
 800076a:	469c      	mov	ip, r3
 800076c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000770:	4665      	mov	r5, ip
 8000772:	4626      	mov	r6, r4
 8000774:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000776:	6028      	str	r0, [r5, #0]
 8000778:	6069      	str	r1, [r5, #4]
 800077a:	60aa      	str	r2, [r5, #8]
 800077c:	60eb      	str	r3, [r5, #12]
 800077e:	3410      	adds	r4, #16
 8000780:	f10c 0c10 	add.w	ip, ip, #16
 8000784:	4574      	cmp	r4, lr
 8000786:	d1f3      	bne.n	8000770 <tx_rx+0xd8>
 8000788:	4662      	mov	r2, ip
 800078a:	4623      	mov	r3, r4
 800078c:	cb03      	ldmia	r3!, {r0, r1}
 800078e:	6010      	str	r0, [r2, #0]
 8000790:	6051      	str	r1, [r2, #4]
 8000792:	8819      	ldrh	r1, [r3, #0]
 8000794:	789b      	ldrb	r3, [r3, #2]
 8000796:	8111      	strh	r1, [r2, #8]
 8000798:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <tx_rx+0x174>)
 800079c:	f7ff fd38 	bl	8000210 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	230a      	movs	r3, #10
 80007a6:	4919      	ldr	r1, [pc, #100]	; (800080c <tx_rx+0x174>)
 80007a8:	481a      	ldr	r0, [pc, #104]	; (8000814 <tx_rx+0x17c>)
 80007aa:	f004 fd02 	bl	80051b2 <HAL_UART_Transmit>
		}

		changeMode = true;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <tx_rx+0x16c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80007b4:	e022      	b.n	80007fc <tx_rx+0x164>
		bool change = receiving_AX25();
 80007b6:	f000 fd95 	bl	80012e4 <receiving_AX25>
 80007ba:	4603      	mov	r3, r0
 80007bc:	71bb      	strb	r3, [r7, #6]
		if(!change){
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	f083 0301 	eor.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d018      	beq.n	80007fc <tx_rx+0x164>
			sprintf(uartData, "Changing mode due to request\n");
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <tx_rx+0x174>)
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <tx_rx+0x188>)
 80007ce:	4615      	mov	r5, r2
 80007d0:	461c      	mov	r4, r3
 80007d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d4:	6028      	str	r0, [r5, #0]
 80007d6:	6069      	str	r1, [r5, #4]
 80007d8:	60aa      	str	r2, [r5, #8]
 80007da:	60eb      	str	r3, [r5, #12]
 80007dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007de:	6128      	str	r0, [r5, #16]
 80007e0:	6169      	str	r1, [r5, #20]
 80007e2:	61aa      	str	r2, [r5, #24]
 80007e4:	8823      	ldrh	r3, [r4, #0]
 80007e6:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <tx_rx+0x174>)
 80007ea:	f7ff fd11 	bl	8000210 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	230a      	movs	r3, #10
 80007f4:	4905      	ldr	r1, [pc, #20]	; (800080c <tx_rx+0x174>)
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <tx_rx+0x17c>)
 80007f8:	f004 fcdb 	bl	80051b2 <HAL_UART_Transmit>
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	20000a01 	.word	0x20000a01
 8000808:	20004270 	.word	0x20004270
 800080c:	2000260c 	.word	0x2000260c
 8000810:	08006814 	.word	0x08006814
 8000814:	200042c8 	.word	0x200042c8
 8000818:	08006834 	.word	0x08006834
 800081c:	08006854 	.word	0x08006854
 8000820:	08006890 	.word	0x08006890

08000824 <output_AX25>:
		}
	}
	return true;
}

void output_AX25(){
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800082a:	4b44      	ldr	r3, [pc, #272]	; (800093c <output_AX25+0x118>)
 800082c:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Beginning AFSK transmission\n");
 800082e:	4a44      	ldr	r2, [pc, #272]	; (8000940 <output_AX25+0x11c>)
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <output_AX25+0x120>)
 8000832:	4615      	mov	r5, r2
 8000834:	461c      	mov	r4, r3
 8000836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000838:	6028      	str	r0, [r5, #0]
 800083a:	6069      	str	r1, [r5, #4]
 800083c:	60aa      	str	r2, [r5, #8]
 800083e:	60eb      	str	r3, [r5, #12]
 8000840:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000842:	6128      	str	r0, [r5, #16]
 8000844:	6169      	str	r1, [r5, #20]
 8000846:	61aa      	str	r2, [r5, #24]
 8000848:	7823      	ldrb	r3, [r4, #0]
 800084a:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <output_AX25+0x11c>)
 800084e:	f7ff fcdf 	bl	8000210 <strlen>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	230a      	movs	r3, #10
 8000858:	4939      	ldr	r1, [pc, #228]	; (8000940 <output_AX25+0x11c>)
 800085a:	483b      	ldr	r0, [pc, #236]	; (8000948 <output_AX25+0x124>)
 800085c:	f004 fca9 	bl	80051b2 <HAL_UART_Transmit>

	int wave_start = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
	//Init dac playing some frequency, shouldn't be read by radio
	wave_start = bitToAudio(KISS_FLAG, FLAG_SIZE,1,wave_start);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2201      	movs	r2, #1
 8000868:	2108      	movs	r1, #8
 800086a:	4838      	ldr	r0, [pc, #224]	; (800094c <output_AX25+0x128>)
 800086c:	f001 f9ec 	bl	8001c48 <bitToAudio>
 8000870:	6038      	str	r0, [r7, #0]

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 8000872:	2201      	movs	r2, #1
 8000874:	2110      	movs	r1, #16
 8000876:	4836      	ldr	r0, [pc, #216]	; (8000950 <output_AX25+0x12c>)
 8000878:	f003 fab8 	bl	8003dec <HAL_GPIO_WritePin>
	freqSelect = false;
 800087c:	4b35      	ldr	r3, [pc, #212]	; (8000954 <output_AX25+0x130>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	wave_start = bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start); //start flag
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	2201      	movs	r2, #1
 8000886:	2108      	movs	r1, #8
 8000888:	4833      	ldr	r0, [pc, #204]	; (8000958 <output_AX25+0x134>)
 800088a:	f001 f9dd 	bl	8001c48 <bitToAudio>
 800088e:	6038      	str	r0, [r7, #0]

	wave_start = bitToAudio(local_packet->address, address_len,1,wave_start); //lsb first
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000896:	3310      	adds	r3, #16
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2201      	movs	r2, #1
 800089e:	2170      	movs	r1, #112	; 0x70
 80008a0:	f001 f9d2 	bl	8001c48 <bitToAudio>
 80008a4:	6038      	str	r0, [r7, #0]
	wave_start = bitToAudio(local_packet->control,control_len,1,wave_start);	//lsb first
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008ac:	3314      	adds	r3, #20
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2201      	movs	r2, #1
 80008b4:	2108      	movs	r1, #8
 80008b6:	f001 f9c7 	bl	8001c48 <bitToAudio>
 80008ba:	6038      	str	r0, [r7, #0]
	wave_start = bitToAudio(local_packet->PID,PID_len,1,wave_start);			//lsb first
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008c2:	3318      	adds	r3, #24
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2201      	movs	r2, #1
 80008ca:	2108      	movs	r1, #8
 80008cc:	f001 f9bc 	bl	8001c48 <bitToAudio>
 80008d0:	6038      	str	r0, [r7, #0]
	wave_start = bitToAudio(local_packet->Info,local_packet->Info_Len,1,wave_start);		//lsb first
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80008d8:	331c      	adds	r3, #28
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2201      	movs	r2, #1
 80008e8:	f001 f9ae 	bl	8001c48 <bitToAudio>
 80008ec:	6038      	str	r0, [r7, #0]
	//bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS,0,wave_start);			//msb first

	bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start);//stop flag
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2201      	movs	r2, #1
 80008f2:	2108      	movs	r1, #8
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <output_AX25+0x134>)
 80008f6:	f001 f9a7 	bl	8001c48 <bitToAudio>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <output_AX25+0x12c>)
 8000900:	f003 fa74 	bl	8003dec <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <output_AX25+0x11c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <output_AX25+0x138>)
 8000908:	4615      	mov	r5, r2
 800090a:	461c      	mov	r4, r3
 800090c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090e:	6028      	str	r0, [r5, #0]
 8000910:	6069      	str	r1, [r5, #4]
 8000912:	60aa      	str	r2, [r5, #8]
 8000914:	60eb      	str	r3, [r5, #12]
 8000916:	cc03      	ldmia	r4!, {r0, r1}
 8000918:	6128      	str	r0, [r5, #16]
 800091a:	6169      	str	r1, [r5, #20]
 800091c:	8823      	ldrh	r3, [r4, #0]
 800091e:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <output_AX25+0x11c>)
 8000922:	f7ff fc75 	bl	8000210 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	230a      	movs	r3, #10
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <output_AX25+0x11c>)
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <output_AX25+0x124>)
 8000930:	f004 fc3f 	bl	80051b2 <HAL_UART_Transmit>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bdb0      	pop	{r4, r5, r7, pc}
 800093c:	20000a18 	.word	0x20000a18
 8000940:	2000260c 	.word	0x2000260c
 8000944:	080068b0 	.word	0x080068b0
 8000948:	200042c8 	.word	0x200042c8
 800094c:	20000000 	.word	0x20000000
 8000950:	40020800 	.word	0x40020800
 8000954:	20000a02 	.word	0x20000a02
 8000958:	20000008 	.word	0x20000008
 800095c:	080068d0 	.word	0x080068d0

08000960 <print_AX25>:
void print_AX25(){
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b08d      	sub	sp, #52	; 0x34
 8000964:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000966:	4baa      	ldr	r3, [pc, #680]	; (8000c10 <print_AX25+0x2b0>)
 8000968:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000970:	330c      	adds	r3, #12
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8000976:	4ba7      	ldr	r3, [pc, #668]	; (8000c14 <print_AX25+0x2b4>)
 8000978:	4aa7      	ldr	r2, [pc, #668]	; (8000c18 <print_AX25+0x2b8>)
 800097a:	4614      	mov	r4, r2
 800097c:	469c      	mov	ip, r3
 800097e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000982:	4665      	mov	r5, ip
 8000984:	4626      	mov	r6, r4
 8000986:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000988:	6028      	str	r0, [r5, #0]
 800098a:	6069      	str	r1, [r5, #4]
 800098c:	60aa      	str	r2, [r5, #8]
 800098e:	60eb      	str	r3, [r5, #12]
 8000990:	3410      	adds	r4, #16
 8000992:	f10c 0c10 	add.w	ip, ip, #16
 8000996:	4574      	cmp	r4, lr
 8000998:	d1f3      	bne.n	8000982 <print_AX25+0x22>
 800099a:	4663      	mov	r3, ip
 800099c:	4622      	mov	r2, r4
 800099e:	6810      	ldr	r0, [r2, #0]
 80009a0:	6018      	str	r0, [r3, #0]
 80009a2:	8891      	ldrh	r1, [r2, #4]
 80009a4:	7992      	ldrb	r2, [r2, #6]
 80009a6:	8099      	strh	r1, [r3, #4]
 80009a8:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009aa:	489a      	ldr	r0, [pc, #616]	; (8000c14 <print_AX25+0x2b4>)
 80009ac:	f7ff fc30 	bl	8000210 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	230a      	movs	r3, #10
 80009b6:	4997      	ldr	r1, [pc, #604]	; (8000c14 <print_AX25+0x2b4>)
 80009b8:	4898      	ldr	r0, [pc, #608]	; (8000c1c <print_AX25+0x2bc>)
 80009ba:	f004 fbfa 	bl	80051b2 <HAL_UART_Transmit>

	sprintf(uartData, "AX.25 Flag      =");
 80009be:	4a95      	ldr	r2, [pc, #596]	; (8000c14 <print_AX25+0x2b4>)
 80009c0:	4b97      	ldr	r3, [pc, #604]	; (8000c20 <print_AX25+0x2c0>)
 80009c2:	4615      	mov	r5, r2
 80009c4:	461c      	mov	r4, r3
 80009c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c8:	6028      	str	r0, [r5, #0]
 80009ca:	6069      	str	r1, [r5, #4]
 80009cc:	60aa      	str	r2, [r5, #8]
 80009ce:	60eb      	str	r3, [r5, #12]
 80009d0:	8823      	ldrh	r3, [r4, #0]
 80009d2:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009d4:	488f      	ldr	r0, [pc, #572]	; (8000c14 <print_AX25+0x2b4>)
 80009d6:	f7ff fc1b 	bl	8000210 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	230a      	movs	r3, #10
 80009e0:	498c      	ldr	r1, [pc, #560]	; (8000c14 <print_AX25+0x2b4>)
 80009e2:	488e      	ldr	r0, [pc, #568]	; (8000c1c <print_AX25+0x2bc>)
 80009e4:	f004 fbe5 	bl	80051b2 <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 80009e8:	4b8e      	ldr	r3, [pc, #568]	; (8000c24 <print_AX25+0x2c4>)
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<8;i++){
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f0:	e017      	b.n	8000a22 <print_AX25+0xc2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	f1c3 0307 	rsb	r3, r3, #7
 80009f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4989      	ldr	r1, [pc, #548]	; (8000c28 <print_AX25+0x2c8>)
 8000a02:	4884      	ldr	r0, [pc, #528]	; (8000c14 <print_AX25+0x2b4>)
 8000a04:	f005 fafe 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a08:	4882      	ldr	r0, [pc, #520]	; (8000c14 <print_AX25+0x2b4>)
 8000a0a:	f7ff fc01 	bl	8000210 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	230a      	movs	r3, #10
 8000a14:	497f      	ldr	r1, [pc, #508]	; (8000c14 <print_AX25+0x2b4>)
 8000a16:	4881      	ldr	r0, [pc, #516]	; (8000c1c <print_AX25+0x2bc>)
 8000a18:	f004 fbcb 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	3301      	adds	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	dde4      	ble.n	80009f2 <print_AX25+0x92>
	}
	sprintf(uartData, "\n");
 8000a28:	4a7a      	ldr	r2, [pc, #488]	; (8000c14 <print_AX25+0x2b4>)
 8000a2a:	4b80      	ldr	r3, [pc, #512]	; (8000c2c <print_AX25+0x2cc>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a30:	4878      	ldr	r0, [pc, #480]	; (8000c14 <print_AX25+0x2b4>)
 8000a32:	f7ff fbed 	bl	8000210 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	4975      	ldr	r1, [pc, #468]	; (8000c14 <print_AX25+0x2b4>)
 8000a3e:	4877      	ldr	r0, [pc, #476]	; (8000c1c <print_AX25+0x2bc>)
 8000a40:	f004 fbb7 	bl	80051b2 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a4a:	3310      	adds	r3, #16
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
 8000a54:	e042      	b.n	8000adc <print_AX25+0x17c>
		sprintf(uartData, "Address Field %d =",i+1);
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	3301      	adds	r3, #1
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4974      	ldr	r1, [pc, #464]	; (8000c30 <print_AX25+0x2d0>)
 8000a5e:	486d      	ldr	r0, [pc, #436]	; (8000c14 <print_AX25+0x2b4>)
 8000a60:	f005 fad0 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a64:	486b      	ldr	r0, [pc, #428]	; (8000c14 <print_AX25+0x2b4>)
 8000a66:	f7ff fbd3 	bl	8000210 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	230a      	movs	r3, #10
 8000a70:	4968      	ldr	r1, [pc, #416]	; (8000c14 <print_AX25+0x2b4>)
 8000a72:	486a      	ldr	r0, [pc, #424]	; (8000c1c <print_AX25+0x2bc>)
 8000a74:	f004 fb9d 	bl	80051b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	e017      	b.n	8000aae <print_AX25+0x14e>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	f1c3 0307 	rsb	r3, r3, #7
 8000a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4966      	ldr	r1, [pc, #408]	; (8000c28 <print_AX25+0x2c8>)
 8000a8e:	4861      	ldr	r0, [pc, #388]	; (8000c14 <print_AX25+0x2b4>)
 8000a90:	f005 fab8 	bl	8006004 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a94:	485f      	ldr	r0, [pc, #380]	; (8000c14 <print_AX25+0x2b4>)
 8000a96:	f7ff fbbb 	bl	8000210 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	495c      	ldr	r1, [pc, #368]	; (8000c14 <print_AX25+0x2b4>)
 8000aa2:	485e      	ldr	r0, [pc, #376]	; (8000c1c <print_AX25+0x2bc>)
 8000aa4:	f004 fb85 	bl	80051b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	dde4      	ble.n	8000a7e <print_AX25+0x11e>
		}
		curr_mem += 8;
 8000ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000aba:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <print_AX25+0x2b4>)
 8000abc:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <print_AX25+0x2cc>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ac2:	4854      	ldr	r0, [pc, #336]	; (8000c14 <print_AX25+0x2b4>)
 8000ac4:	f7ff fba4 	bl	8000210 <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	230a      	movs	r3, #10
 8000ace:	4951      	ldr	r1, [pc, #324]	; (8000c14 <print_AX25+0x2b4>)
 8000ad0:	4852      	ldr	r0, [pc, #328]	; (8000c1c <print_AX25+0x2bc>)
 8000ad2:	f004 fb6e 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	3301      	adds	r3, #1
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	2b0d      	cmp	r3, #13
 8000ae0:	ddb9      	ble.n	8000a56 <print_AX25+0xf6>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ae8:	3314      	adds	r3, #20
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000aee:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <print_AX25+0x2b4>)
 8000af0:	4b50      	ldr	r3, [pc, #320]	; (8000c34 <print_AX25+0x2d4>)
 8000af2:	4615      	mov	r5, r2
 8000af4:	461c      	mov	r4, r3
 8000af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af8:	6028      	str	r0, [r5, #0]
 8000afa:	6069      	str	r1, [r5, #4]
 8000afc:	60aa      	str	r2, [r5, #8]
 8000afe:	60eb      	str	r3, [r5, #12]
 8000b00:	8823      	ldrh	r3, [r4, #0]
 8000b02:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b04:	4843      	ldr	r0, [pc, #268]	; (8000c14 <print_AX25+0x2b4>)
 8000b06:	f7ff fb83 	bl	8000210 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	230a      	movs	r3, #10
 8000b10:	4940      	ldr	r1, [pc, #256]	; (8000c14 <print_AX25+0x2b4>)
 8000b12:	4842      	ldr	r0, [pc, #264]	; (8000c1c <print_AX25+0x2bc>)
 8000b14:	f004 fb4d 	bl	80051b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	e017      	b.n	8000b4e <print_AX25+0x1ee>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	f1c3 0307 	rsb	r3, r3, #7
 8000b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	493e      	ldr	r1, [pc, #248]	; (8000c28 <print_AX25+0x2c8>)
 8000b2e:	4839      	ldr	r0, [pc, #228]	; (8000c14 <print_AX25+0x2b4>)
 8000b30:	f005 fa68 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b34:	4837      	ldr	r0, [pc, #220]	; (8000c14 <print_AX25+0x2b4>)
 8000b36:	f7ff fb6b 	bl	8000210 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	230a      	movs	r3, #10
 8000b40:	4934      	ldr	r1, [pc, #208]	; (8000c14 <print_AX25+0x2b4>)
 8000b42:	4836      	ldr	r0, [pc, #216]	; (8000c1c <print_AX25+0x2bc>)
 8000b44:	f004 fb35 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	dde4      	ble.n	8000b1e <print_AX25+0x1be>
	}
	sprintf(uartData, "\n");
 8000b54:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <print_AX25+0x2b4>)
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <print_AX25+0x2cc>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b5c:	482d      	ldr	r0, [pc, #180]	; (8000c14 <print_AX25+0x2b4>)
 8000b5e:	f7ff fb57 	bl	8000210 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	230a      	movs	r3, #10
 8000b68:	492a      	ldr	r1, [pc, #168]	; (8000c14 <print_AX25+0x2b4>)
 8000b6a:	482c      	ldr	r0, [pc, #176]	; (8000c1c <print_AX25+0x2bc>)
 8000b6c:	f004 fb21 	bl	80051b2 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b76:	3318      	adds	r3, #24
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8000b7c:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <print_AX25+0x2b4>)
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <print_AX25+0x2d8>)
 8000b80:	4615      	mov	r5, r2
 8000b82:	461c      	mov	r4, r3
 8000b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b86:	6028      	str	r0, [r5, #0]
 8000b88:	6069      	str	r1, [r5, #4]
 8000b8a:	60aa      	str	r2, [r5, #8]
 8000b8c:	60eb      	str	r3, [r5, #12]
 8000b8e:	8823      	ldrh	r3, [r4, #0]
 8000b90:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b92:	4820      	ldr	r0, [pc, #128]	; (8000c14 <print_AX25+0x2b4>)
 8000b94:	f7ff fb3c 	bl	8000210 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	491d      	ldr	r1, [pc, #116]	; (8000c14 <print_AX25+0x2b4>)
 8000ba0:	481e      	ldr	r0, [pc, #120]	; (8000c1c <print_AX25+0x2bc>)
 8000ba2:	f004 fb06 	bl	80051b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	e017      	b.n	8000bdc <print_AX25+0x27c>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	491b      	ldr	r1, [pc, #108]	; (8000c28 <print_AX25+0x2c8>)
 8000bbc:	4815      	ldr	r0, [pc, #84]	; (8000c14 <print_AX25+0x2b4>)
 8000bbe:	f005 fa21 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <print_AX25+0x2b4>)
 8000bc4:	f7ff fb24 	bl	8000210 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	230a      	movs	r3, #10
 8000bce:	4911      	ldr	r1, [pc, #68]	; (8000c14 <print_AX25+0x2b4>)
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <print_AX25+0x2bc>)
 8000bd2:	f004 faee 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	dde4      	ble.n	8000bac <print_AX25+0x24c>
	}
	sprintf(uartData, "\n");
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <print_AX25+0x2b4>)
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <print_AX25+0x2cc>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <print_AX25+0x2b4>)
 8000bec:	f7ff fb10 	bl	8000210 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	4907      	ldr	r1, [pc, #28]	; (8000c14 <print_AX25+0x2b4>)
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <print_AX25+0x2bc>)
 8000bfa:	f004 fada 	bl	80051b2 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000c04:	331c      	adds	r3, #28
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e058      	b.n	8000cc2 <print_AX25+0x362>
 8000c10:	20000a18 	.word	0x20000a18
 8000c14:	2000260c 	.word	0x2000260c
 8000c18:	080068ec 	.word	0x080068ec
 8000c1c:	200042c8 	.word	0x200042c8
 8000c20:	08006924 	.word	0x08006924
 8000c24:	20000008 	.word	0x20000008
 8000c28:	08006938 	.word	0x08006938
 8000c2c:	08006940 	.word	0x08006940
 8000c30:	08006944 	.word	0x08006944
 8000c34:	08006958 	.word	0x08006958
 8000c38:	0800696c 	.word	0x0800696c
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	4950      	ldr	r1, [pc, #320]	; (8000d84 <print_AX25+0x424>)
 8000c44:	4850      	ldr	r0, [pc, #320]	; (8000d88 <print_AX25+0x428>)
 8000c46:	f005 f9dd 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c4a:	484f      	ldr	r0, [pc, #316]	; (8000d88 <print_AX25+0x428>)
 8000c4c:	f7ff fae0 	bl	8000210 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	230a      	movs	r3, #10
 8000c56:	494c      	ldr	r1, [pc, #304]	; (8000d88 <print_AX25+0x428>)
 8000c58:	484c      	ldr	r0, [pc, #304]	; (8000d8c <print_AX25+0x42c>)
 8000c5a:	f004 faaa 	bl	80051b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	e017      	b.n	8000c94 <print_AX25+0x334>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4947      	ldr	r1, [pc, #284]	; (8000d90 <print_AX25+0x430>)
 8000c74:	4844      	ldr	r0, [pc, #272]	; (8000d88 <print_AX25+0x428>)
 8000c76:	f005 f9c5 	bl	8006004 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c7a:	4843      	ldr	r0, [pc, #268]	; (8000d88 <print_AX25+0x428>)
 8000c7c:	f7ff fac8 	bl	8000210 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	230a      	movs	r3, #10
 8000c86:	4940      	ldr	r1, [pc, #256]	; (8000d88 <print_AX25+0x428>)
 8000c88:	4840      	ldr	r0, [pc, #256]	; (8000d8c <print_AX25+0x42c>)
 8000c8a:	f004 fa92 	bl	80051b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	3301      	adds	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	dde4      	ble.n	8000c64 <print_AX25+0x304>
		}
		curr_mem += 8;
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000ca0:	4a39      	ldr	r2, [pc, #228]	; (8000d88 <print_AX25+0x428>)
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <print_AX25+0x434>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ca8:	4837      	ldr	r0, [pc, #220]	; (8000d88 <print_AX25+0x428>)
 8000caa:	f7ff fab1 	bl	8000210 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	4934      	ldr	r1, [pc, #208]	; (8000d88 <print_AX25+0x428>)
 8000cb6:	4835      	ldr	r0, [pc, #212]	; (8000d8c <print_AX25+0x42c>)
 8000cb8:	f004 fa7b 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da00      	bge.n	8000cd0 <print_AX25+0x370>
 8000cce:	3307      	adds	r3, #7
 8000cd0:	10db      	asrs	r3, r3, #3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	dbb0      	blt.n	8000c3c <print_AX25+0x2dc>
	}

	sprintf(uartData, "AX.25 Flag      =");
 8000cda:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <print_AX25+0x428>)
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <print_AX25+0x438>)
 8000cde:	4615      	mov	r5, r2
 8000ce0:	461c      	mov	r4, r3
 8000ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce4:	6028      	str	r0, [r5, #0]
 8000ce6:	6069      	str	r1, [r5, #4]
 8000ce8:	60aa      	str	r2, [r5, #8]
 8000cea:	60eb      	str	r3, [r5, #12]
 8000cec:	8823      	ldrh	r3, [r4, #0]
 8000cee:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000cf0:	4825      	ldr	r0, [pc, #148]	; (8000d88 <print_AX25+0x428>)
 8000cf2:	f7ff fa8d 	bl	8000210 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	4922      	ldr	r1, [pc, #136]	; (8000d88 <print_AX25+0x428>)
 8000cfe:	4823      	ldr	r0, [pc, #140]	; (8000d8c <print_AX25+0x42c>)
 8000d00:	f004 fa57 	bl	80051b2 <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <print_AX25+0x43c>)
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<8;i++){
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e017      	b.n	8000d3e <print_AX25+0x3de>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1c3 0307 	rsb	r3, r3, #7
 8000d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	491c      	ldr	r1, [pc, #112]	; (8000d90 <print_AX25+0x430>)
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <print_AX25+0x428>)
 8000d20:	f005 f970 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <print_AX25+0x428>)
 8000d26:	f7ff fa73 	bl	8000210 <strlen>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	230a      	movs	r3, #10
 8000d30:	4915      	ldr	r1, [pc, #84]	; (8000d88 <print_AX25+0x428>)
 8000d32:	4816      	ldr	r0, [pc, #88]	; (8000d8c <print_AX25+0x42c>)
 8000d34:	f004 fa3d 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b07      	cmp	r3, #7
 8000d42:	dde4      	ble.n	8000d0e <print_AX25+0x3ae>
	}
	sprintf(uartData, "\n");
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <print_AX25+0x428>)
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <print_AX25+0x434>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d4c:	480e      	ldr	r0, [pc, #56]	; (8000d88 <print_AX25+0x428>)
 8000d4e:	f7ff fa5f 	bl	8000210 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	230a      	movs	r3, #10
 8000d58:	490b      	ldr	r1, [pc, #44]	; (8000d88 <print_AX25+0x428>)
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <print_AX25+0x42c>)
 8000d5c:	f004 fa29 	bl	80051b2 <HAL_UART_Transmit>
//		}
//		curr_mem += 8;
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//	}
	sprintf(uartData, "\n");
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <print_AX25+0x428>)
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <print_AX25+0x434>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <print_AX25+0x428>)
 8000d6a:	f7ff fa51 	bl	8000210 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	230a      	movs	r3, #10
 8000d74:	4904      	ldr	r1, [pc, #16]	; (8000d88 <print_AX25+0x428>)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <print_AX25+0x42c>)
 8000d78:	f004 fa1b 	bl	80051b2 <HAL_UART_Transmit>
}
 8000d7c:	bf00      	nop
 8000d7e:	3734      	adds	r7, #52	; 0x34
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	08006980 	.word	0x08006980
 8000d88:	2000260c 	.word	0x2000260c
 8000d8c:	200042c8 	.word	0x200042c8
 8000d90:	08006938 	.word	0x08006938
 8000d94:	08006940 	.word	0x08006940
 8000d98:	08006924 	.word	0x08006924
 8000d9c:	20000008 	.word	0x20000008

08000da0 <clear_AX25>:
void clear_AX25(){
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <clear_AX25+0x5c>)
 8000da8:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <clear_AX25+0x60>)
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <clear_AX25+0x64>)
 8000dae:	4615      	mov	r5, r2
 8000db0:	461c      	mov	r4, r3
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	6028      	str	r0, [r5, #0]
 8000db6:	6069      	str	r1, [r5, #4]
 8000db8:	60aa      	str	r2, [r5, #8]
 8000dba:	60eb      	str	r3, [r5, #12]
 8000dbc:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000dbe:	6128      	str	r0, [r5, #16]
 8000dc0:	6169      	str	r1, [r5, #20]
 8000dc2:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <clear_AX25+0x60>)
 8000dc6:	f7ff fa23 	bl	8000210 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	230a      	movs	r3, #10
 8000dd0:	490b      	ldr	r1, [pc, #44]	; (8000e00 <clear_AX25+0x60>)
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <clear_AX25+0x68>)
 8000dd4:	f004 f9ed 	bl	80051b2 <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f640 225f 	movw	r2, #2655	; 0xa5f
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 f8fb 	bl	8005fdc <memcpy>
	local_packet->got_packet = false;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000dec:	3309      	adds	r3, #9
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000a18 	.word	0x20000a18
 8000e00:	2000260c 	.word	0x2000260c
 8000e04:	08006994 	.word	0x08006994
 8000e08:	200042c8 	.word	0x200042c8

08000e0c <print_KISS>:

void output_KISS() {
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}
void print_KISS(){
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0e:	b08d      	sub	sp, #52	; 0x34
 8000e10:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000e12:	4bad      	ldr	r3, [pc, #692]	; (80010c8 <print_KISS+0x2bc>)
 8000e14:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e1c:	330c      	adds	r3, #12
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8000e22:	4baa      	ldr	r3, [pc, #680]	; (80010cc <print_KISS+0x2c0>)
 8000e24:	4aaa      	ldr	r2, [pc, #680]	; (80010d0 <print_KISS+0x2c4>)
 8000e26:	4614      	mov	r4, r2
 8000e28:	469c      	mov	ip, r3
 8000e2a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e2e:	4665      	mov	r5, ip
 8000e30:	4626      	mov	r6, r4
 8000e32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e34:	6028      	str	r0, [r5, #0]
 8000e36:	6069      	str	r1, [r5, #4]
 8000e38:	60aa      	str	r2, [r5, #8]
 8000e3a:	60eb      	str	r3, [r5, #12]
 8000e3c:	3410      	adds	r4, #16
 8000e3e:	f10c 0c10 	add.w	ip, ip, #16
 8000e42:	4574      	cmp	r4, lr
 8000e44:	d1f3      	bne.n	8000e2e <print_KISS+0x22>
 8000e46:	4663      	mov	r3, ip
 8000e48:	4622      	mov	r2, r4
 8000e4a:	6810      	ldr	r0, [r2, #0]
 8000e4c:	6018      	str	r0, [r3, #0]
 8000e4e:	8891      	ldrh	r1, [r2, #4]
 8000e50:	7992      	ldrb	r2, [r2, #6]
 8000e52:	8099      	strh	r1, [r3, #4]
 8000e54:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e56:	489d      	ldr	r0, [pc, #628]	; (80010cc <print_KISS+0x2c0>)
 8000e58:	f7ff f9da 	bl	8000210 <strlen>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	230a      	movs	r3, #10
 8000e62:	499a      	ldr	r1, [pc, #616]	; (80010cc <print_KISS+0x2c0>)
 8000e64:	489b      	ldr	r0, [pc, #620]	; (80010d4 <print_KISS+0x2c8>)
 8000e66:	f004 f9a4 	bl	80051b2 <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address-16);//Subtract 16 to start at the flag start
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000e70:	3310      	adds	r3, #16
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3b10      	subs	r3, #16
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8000e78:	4a94      	ldr	r2, [pc, #592]	; (80010cc <print_KISS+0x2c0>)
 8000e7a:	4b97      	ldr	r3, [pc, #604]	; (80010d8 <print_KISS+0x2cc>)
 8000e7c:	4615      	mov	r5, r2
 8000e7e:	461c      	mov	r4, r3
 8000e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e82:	6028      	str	r0, [r5, #0]
 8000e84:	6069      	str	r1, [r5, #4]
 8000e86:	60aa      	str	r2, [r5, #8]
 8000e88:	60eb      	str	r3, [r5, #12]
 8000e8a:	8823      	ldrh	r3, [r4, #0]
 8000e8c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e8e:	488f      	ldr	r0, [pc, #572]	; (80010cc <print_KISS+0x2c0>)
 8000e90:	f7ff f9be 	bl	8000210 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	230a      	movs	r3, #10
 8000e9a:	498c      	ldr	r1, [pc, #560]	; (80010cc <print_KISS+0x2c0>)
 8000e9c:	488d      	ldr	r0, [pc, #564]	; (80010d4 <print_KISS+0x2c8>)
 8000e9e:	f004 f988 	bl	80051b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ea6:	e017      	b.n	8000ed8 <print_KISS+0xcc>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4989      	ldr	r1, [pc, #548]	; (80010dc <print_KISS+0x2d0>)
 8000eb8:	4884      	ldr	r0, [pc, #528]	; (80010cc <print_KISS+0x2c0>)
 8000eba:	f005 f8a3 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ebe:	4883      	ldr	r0, [pc, #524]	; (80010cc <print_KISS+0x2c0>)
 8000ec0:	f7ff f9a6 	bl	8000210 <strlen>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	230a      	movs	r3, #10
 8000eca:	4980      	ldr	r1, [pc, #512]	; (80010cc <print_KISS+0x2c0>)
 8000ecc:	4881      	ldr	r0, [pc, #516]	; (80010d4 <print_KISS+0x2c8>)
 8000ece:	f004 f970 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	dde4      	ble.n	8000ea8 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8000ede:	4a7b      	ldr	r2, [pc, #492]	; (80010cc <print_KISS+0x2c0>)
 8000ee0:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <print_KISS+0x2d4>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ee6:	4879      	ldr	r0, [pc, #484]	; (80010cc <print_KISS+0x2c0>)
 8000ee8:	f7ff f992 	bl	8000210 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	4976      	ldr	r1, [pc, #472]	; (80010cc <print_KISS+0x2c0>)
 8000ef4:	4877      	ldr	r0, [pc, #476]	; (80010d4 <print_KISS+0x2c8>)
 8000ef6:	f004 f95c 	bl	80051b2 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f00:	3310      	adds	r3, #16
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	e042      	b.n	8000f92 <print_KISS+0x186>
		sprintf(uartData, "Address Field %d =",i+1);
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	3301      	adds	r3, #1
 8000f10:	461a      	mov	r2, r3
 8000f12:	4974      	ldr	r1, [pc, #464]	; (80010e4 <print_KISS+0x2d8>)
 8000f14:	486d      	ldr	r0, [pc, #436]	; (80010cc <print_KISS+0x2c0>)
 8000f16:	f005 f875 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f1a:	486c      	ldr	r0, [pc, #432]	; (80010cc <print_KISS+0x2c0>)
 8000f1c:	f7ff f978 	bl	8000210 <strlen>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	230a      	movs	r3, #10
 8000f26:	4969      	ldr	r1, [pc, #420]	; (80010cc <print_KISS+0x2c0>)
 8000f28:	486a      	ldr	r0, [pc, #424]	; (80010d4 <print_KISS+0x2c8>)
 8000f2a:	f004 f942 	bl	80051b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
 8000f32:	e017      	b.n	8000f64 <print_KISS+0x158>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4966      	ldr	r1, [pc, #408]	; (80010dc <print_KISS+0x2d0>)
 8000f44:	4861      	ldr	r0, [pc, #388]	; (80010cc <print_KISS+0x2c0>)
 8000f46:	f005 f85d 	bl	8006004 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f4a:	4860      	ldr	r0, [pc, #384]	; (80010cc <print_KISS+0x2c0>)
 8000f4c:	f7ff f960 	bl	8000210 <strlen>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	230a      	movs	r3, #10
 8000f56:	495d      	ldr	r1, [pc, #372]	; (80010cc <print_KISS+0x2c0>)
 8000f58:	485e      	ldr	r0, [pc, #376]	; (80010d4 <print_KISS+0x2c8>)
 8000f5a:	f004 f92a 	bl	80051b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	3301      	adds	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	dde4      	ble.n	8000f34 <print_KISS+0x128>
		}
		curr_mem += 8;
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	3308      	adds	r3, #8
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000f70:	4a56      	ldr	r2, [pc, #344]	; (80010cc <print_KISS+0x2c0>)
 8000f72:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <print_KISS+0x2d4>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f78:	4854      	ldr	r0, [pc, #336]	; (80010cc <print_KISS+0x2c0>)
 8000f7a:	f7ff f949 	bl	8000210 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	230a      	movs	r3, #10
 8000f84:	4951      	ldr	r1, [pc, #324]	; (80010cc <print_KISS+0x2c0>)
 8000f86:	4853      	ldr	r0, [pc, #332]	; (80010d4 <print_KISS+0x2c8>)
 8000f88:	f004 f913 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3301      	adds	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	2b0d      	cmp	r3, #13
 8000f96:	ddb9      	ble.n	8000f0c <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f9e:	3314      	adds	r3, #20
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000fa4:	4a49      	ldr	r2, [pc, #292]	; (80010cc <print_KISS+0x2c0>)
 8000fa6:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <print_KISS+0x2dc>)
 8000fa8:	4615      	mov	r5, r2
 8000faa:	461c      	mov	r4, r3
 8000fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fae:	6028      	str	r0, [r5, #0]
 8000fb0:	6069      	str	r1, [r5, #4]
 8000fb2:	60aa      	str	r2, [r5, #8]
 8000fb4:	60eb      	str	r3, [r5, #12]
 8000fb6:	8823      	ldrh	r3, [r4, #0]
 8000fb8:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fba:	4844      	ldr	r0, [pc, #272]	; (80010cc <print_KISS+0x2c0>)
 8000fbc:	f7ff f928 	bl	8000210 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	4941      	ldr	r1, [pc, #260]	; (80010cc <print_KISS+0x2c0>)
 8000fc8:	4842      	ldr	r0, [pc, #264]	; (80010d4 <print_KISS+0x2c8>)
 8000fca:	f004 f8f2 	bl	80051b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e017      	b.n	8001004 <print_KISS+0x1f8>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	493e      	ldr	r1, [pc, #248]	; (80010dc <print_KISS+0x2d0>)
 8000fe4:	4839      	ldr	r0, [pc, #228]	; (80010cc <print_KISS+0x2c0>)
 8000fe6:	f005 f80d 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fea:	4838      	ldr	r0, [pc, #224]	; (80010cc <print_KISS+0x2c0>)
 8000fec:	f7ff f910 	bl	8000210 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	4935      	ldr	r1, [pc, #212]	; (80010cc <print_KISS+0x2c0>)
 8000ff8:	4836      	ldr	r0, [pc, #216]	; (80010d4 <print_KISS+0x2c8>)
 8000ffa:	f004 f8da 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b07      	cmp	r3, #7
 8001008:	dde4      	ble.n	8000fd4 <print_KISS+0x1c8>
	}
	sprintf(uartData, "\n");
 800100a:	4a30      	ldr	r2, [pc, #192]	; (80010cc <print_KISS+0x2c0>)
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <print_KISS+0x2d4>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001012:	482e      	ldr	r0, [pc, #184]	; (80010cc <print_KISS+0x2c0>)
 8001014:	f7ff f8fc 	bl	8000210 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	230a      	movs	r3, #10
 800101e:	492b      	ldr	r1, [pc, #172]	; (80010cc <print_KISS+0x2c0>)
 8001020:	482c      	ldr	r0, [pc, #176]	; (80010d4 <print_KISS+0x2c8>)
 8001022:	f004 f8c6 	bl	80051b2 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800102c:	3318      	adds	r3, #24
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <print_KISS+0x2c0>)
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <print_KISS+0x2e0>)
 8001036:	4615      	mov	r5, r2
 8001038:	461c      	mov	r4, r3
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	6028      	str	r0, [r5, #0]
 800103e:	6069      	str	r1, [r5, #4]
 8001040:	60aa      	str	r2, [r5, #8]
 8001042:	60eb      	str	r3, [r5, #12]
 8001044:	8823      	ldrh	r3, [r4, #0]
 8001046:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001048:	4820      	ldr	r0, [pc, #128]	; (80010cc <print_KISS+0x2c0>)
 800104a:	f7ff f8e1 	bl	8000210 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	230a      	movs	r3, #10
 8001054:	491d      	ldr	r1, [pc, #116]	; (80010cc <print_KISS+0x2c0>)
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <print_KISS+0x2c8>)
 8001058:	f004 f8ab 	bl	80051b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	e017      	b.n	8001092 <print_KISS+0x286>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	f1c3 0307 	rsb	r3, r3, #7
 8001068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	491a      	ldr	r1, [pc, #104]	; (80010dc <print_KISS+0x2d0>)
 8001072:	4816      	ldr	r0, [pc, #88]	; (80010cc <print_KISS+0x2c0>)
 8001074:	f004 ffc6 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <print_KISS+0x2c0>)
 800107a:	f7ff f8c9 	bl	8000210 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	230a      	movs	r3, #10
 8001084:	4911      	ldr	r1, [pc, #68]	; (80010cc <print_KISS+0x2c0>)
 8001086:	4813      	ldr	r0, [pc, #76]	; (80010d4 <print_KISS+0x2c8>)
 8001088:	f004 f893 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	3301      	adds	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b07      	cmp	r3, #7
 8001096:	dde4      	ble.n	8001062 <print_KISS+0x256>
	}
	sprintf(uartData, "\n");
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <print_KISS+0x2c0>)
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <print_KISS+0x2d4>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <print_KISS+0x2c0>)
 80010a2:	f7ff f8b5 	bl	8000210 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	230a      	movs	r3, #10
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <print_KISS+0x2c0>)
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <print_KISS+0x2c8>)
 80010b0:	f004 f87f 	bl	80051b2 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80010ba:	331c      	adds	r3, #28
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e057      	b.n	8001176 <print_KISS+0x36a>
 80010c6:	bf00      	nop
 80010c8:	20000a18 	.word	0x20000a18
 80010cc:	2000260c 	.word	0x2000260c
 80010d0:	080069b0 	.word	0x080069b0
 80010d4:	200042c8 	.word	0x200042c8
 80010d8:	080069e8 	.word	0x080069e8
 80010dc:	08006938 	.word	0x08006938
 80010e0:	08006940 	.word	0x08006940
 80010e4:	08006944 	.word	0x08006944
 80010e8:	08006958 	.word	0x08006958
 80010ec:	0800696c 	.word	0x0800696c
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	461a      	mov	r2, r3
 80010f6:	494f      	ldr	r1, [pc, #316]	; (8001234 <print_KISS+0x428>)
 80010f8:	484f      	ldr	r0, [pc, #316]	; (8001238 <print_KISS+0x42c>)
 80010fa:	f004 ff83 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010fe:	484e      	ldr	r0, [pc, #312]	; (8001238 <print_KISS+0x42c>)
 8001100:	f7ff f886 	bl	8000210 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	230a      	movs	r3, #10
 800110a:	494b      	ldr	r1, [pc, #300]	; (8001238 <print_KISS+0x42c>)
 800110c:	484b      	ldr	r0, [pc, #300]	; (800123c <print_KISS+0x430>)
 800110e:	f004 f850 	bl	80051b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	e017      	b.n	8001148 <print_KISS+0x33c>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4946      	ldr	r1, [pc, #280]	; (8001240 <print_KISS+0x434>)
 8001128:	4843      	ldr	r0, [pc, #268]	; (8001238 <print_KISS+0x42c>)
 800112a:	f004 ff6b 	bl	8006004 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800112e:	4842      	ldr	r0, [pc, #264]	; (8001238 <print_KISS+0x42c>)
 8001130:	f7ff f86e 	bl	8000210 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	b29a      	uxth	r2, r3
 8001138:	230a      	movs	r3, #10
 800113a:	493f      	ldr	r1, [pc, #252]	; (8001238 <print_KISS+0x42c>)
 800113c:	483f      	ldr	r0, [pc, #252]	; (800123c <print_KISS+0x430>)
 800113e:	f004 f838 	bl	80051b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	3301      	adds	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2b07      	cmp	r3, #7
 800114c:	dde4      	ble.n	8001118 <print_KISS+0x30c>
		}
		curr_mem += 8;
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	3308      	adds	r3, #8
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001154:	4a38      	ldr	r2, [pc, #224]	; (8001238 <print_KISS+0x42c>)
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <print_KISS+0x438>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800115c:	4836      	ldr	r0, [pc, #216]	; (8001238 <print_KISS+0x42c>)
 800115e:	f7ff f857 	bl	8000210 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	230a      	movs	r3, #10
 8001168:	4933      	ldr	r1, [pc, #204]	; (8001238 <print_KISS+0x42c>)
 800116a:	4834      	ldr	r0, [pc, #208]	; (800123c <print_KISS+0x430>)
 800116c:	f004 f821 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da00      	bge.n	8001184 <print_KISS+0x378>
 8001182:	3307      	adds	r3, #7
 8001184:	10db      	asrs	r3, r3, #3
 8001186:	3b01      	subs	r3, #1
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbb0      	blt.n	80010f0 <print_KISS+0x2e4>
	}

	//Print Stop Flag
	curr_mem = (local_packet->KISS_PACKET+(8*(local_packet->byte_cnt-1)));
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800119a:	330c      	adds	r3, #12
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 80011a6:	4a24      	ldr	r2, [pc, #144]	; (8001238 <print_KISS+0x42c>)
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <print_KISS+0x43c>)
 80011aa:	4615      	mov	r5, r2
 80011ac:	461c      	mov	r4, r3
 80011ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b0:	6028      	str	r0, [r5, #0]
 80011b2:	6069      	str	r1, [r5, #4]
 80011b4:	60aa      	str	r2, [r5, #8]
 80011b6:	60eb      	str	r3, [r5, #12]
 80011b8:	8823      	ldrh	r3, [r4, #0]
 80011ba:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011bc:	481e      	ldr	r0, [pc, #120]	; (8001238 <print_KISS+0x42c>)
 80011be:	f7ff f827 	bl	8000210 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	230a      	movs	r3, #10
 80011c8:	491b      	ldr	r1, [pc, #108]	; (8001238 <print_KISS+0x42c>)
 80011ca:	481c      	ldr	r0, [pc, #112]	; (800123c <print_KISS+0x430>)
 80011cc:	f003 fff1 	bl	80051b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e017      	b.n	8001206 <print_KISS+0x3fa>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1c3 0307 	rsb	r3, r3, #7
 80011dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011de:	4413      	add	r3, r2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4916      	ldr	r1, [pc, #88]	; (8001240 <print_KISS+0x434>)
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <print_KISS+0x42c>)
 80011e8:	f004 ff0c 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <print_KISS+0x42c>)
 80011ee:	f7ff f80f 	bl	8000210 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	230a      	movs	r3, #10
 80011f8:	490f      	ldr	r1, [pc, #60]	; (8001238 <print_KISS+0x42c>)
 80011fa:	4810      	ldr	r0, [pc, #64]	; (800123c <print_KISS+0x430>)
 80011fc:	f003 ffd9 	bl	80051b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b07      	cmp	r3, #7
 800120a:	dde4      	ble.n	80011d6 <print_KISS+0x3ca>
	}
	sprintf(uartData, "\n\n");
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <print_KISS+0x42c>)
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <print_KISS+0x440>)
 8001210:	8811      	ldrh	r1, [r2, #0]
 8001212:	7892      	ldrb	r2, [r2, #2]
 8001214:	8019      	strh	r1, [r3, #0]
 8001216:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <print_KISS+0x42c>)
 800121a:	f7fe fff9 	bl	8000210 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	230a      	movs	r3, #10
 8001224:	4904      	ldr	r1, [pc, #16]	; (8001238 <print_KISS+0x42c>)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <print_KISS+0x430>)
 8001228:	f003 ffc3 	bl	80051b2 <HAL_UART_Transmit>
}
 800122c:	bf00      	nop
 800122e:	3734      	adds	r7, #52	; 0x34
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001234:	08006980 	.word	0x08006980
 8001238:	2000260c 	.word	0x2000260c
 800123c:	200042c8 	.word	0x200042c8
 8001240:	08006938 	.word	0x08006938
 8001244:	08006940 	.word	0x08006940
 8001248:	080069fc 	.word	0x080069fc
 800124c:	08006a10 	.word	0x08006a10

08001250 <UART2_EXCEPTION_CALLBACK>:

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 8001254:	2201      	movs	r2, #1
 8001256:	491d      	ldr	r1, [pc, #116]	; (80012cc <UART2_EXCEPTION_CALLBACK+0x7c>)
 8001258:	481d      	ldr	r0, [pc, #116]	; (80012d0 <UART2_EXCEPTION_CALLBACK+0x80>)
 800125a:	f004 f843 	bl	80052e4 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001260:	2200      	movs	r2, #0
 8001262:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001266:	7b1b      	ldrb	r3, [r3, #12]
 8001268:	2bc0      	cmp	r3, #192	; 0xc0
 800126a:	d104      	bne.n	8001276 <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001274:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <UART2_EXCEPTION_CALLBACK+0x88>)
 800127e:	4413      	add	r3, r2
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001282:	7b12      	ldrb	r2, [r2, #12]
 8001284:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 800128e:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	dd16      	ble.n	80012c6 <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <UART2_EXCEPTION_CALLBACK+0x8c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	f083 0301 	eor.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <UART2_EXCEPTION_CALLBACK+0x90>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012be:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <UART2_EXCEPTION_CALLBACK+0x84>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

	  }
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20001d80 	.word	0x20001d80
 80012d0:	200042c8 	.word	0x200042c8
 80012d4:	20001d74 	.word	0x20001d74
 80012d8:	20001d82 	.word	0x20001d82
 80012dc:	20004270 	.word	0x20004270
 80012e0:	20000a01 	.word	0x20000a01

080012e4 <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80012ea:	4a51      	ldr	r2, [pc, #324]	; (8001430 <receiving_AX25+0x14c>)
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <receiving_AX25+0x150>)
 80012ee:	4615      	mov	r5, r2
 80012f0:	461c      	mov	r4, r3
 80012f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f4:	6028      	str	r0, [r5, #0]
 80012f6:	6069      	str	r1, [r5, #4]
 80012f8:	60aa      	str	r2, [r5, #8]
 80012fa:	60eb      	str	r3, [r5, #12]
 80012fc:	cc03      	ldmia	r4!, {r0, r1}
 80012fe:	6128      	str	r0, [r5, #16]
 8001300:	6169      	str	r1, [r5, #20]
 8001302:	7823      	ldrb	r3, [r4, #0]
 8001304:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001306:	484a      	ldr	r0, [pc, #296]	; (8001430 <receiving_AX25+0x14c>)
 8001308:	f7fe ff82 	bl	8000210 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	230a      	movs	r3, #10
 8001312:	4947      	ldr	r1, [pc, #284]	; (8001430 <receiving_AX25+0x14c>)
 8001314:	4848      	ldr	r0, [pc, #288]	; (8001438 <receiving_AX25+0x154>)
 8001316:	f003 ff4c 	bl	80051b2 <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 800131a:	4b48      	ldr	r3, [pc, #288]	; (800143c <receiving_AX25+0x158>)
 800131c:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 800131e:	f000 fe67 	bl	8001ff0 <streamGet>
 8001322:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d13b      	bne.n	80013a2 <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001330:	3308      	adds	r3, #8
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 8001336:	f000 f889 	bl	800144c <AX25_Packet_Validate>
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 8001344:	f000 f9aa 	bl	800169c <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f640 225f 	movw	r2, #2655	; 0xa5f
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fe4e 	bl	8005ff2 <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 8001356:	f7ff ffc5 	bl	80012e4 <receiving_AX25>
 800135a:	e065      	b.n	8001428 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <receiving_AX25+0x14c>)
 800135e:	4a38      	ldr	r2, [pc, #224]	; (8001440 <receiving_AX25+0x15c>)
 8001360:	4614      	mov	r4, r2
 8001362:	469c      	mov	ip, r3
 8001364:	f104 0e20 	add.w	lr, r4, #32
 8001368:	4665      	mov	r5, ip
 800136a:	4626      	mov	r6, r4
 800136c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800136e:	6028      	str	r0, [r5, #0]
 8001370:	6069      	str	r1, [r5, #4]
 8001372:	60aa      	str	r2, [r5, #8]
 8001374:	60eb      	str	r3, [r5, #12]
 8001376:	3410      	adds	r4, #16
 8001378:	f10c 0c10 	add.w	ip, ip, #16
 800137c:	4574      	cmp	r4, lr
 800137e:	d1f3      	bne.n	8001368 <receiving_AX25+0x84>
 8001380:	4662      	mov	r2, ip
 8001382:	4623      	mov	r3, r4
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001388:	4829      	ldr	r0, [pc, #164]	; (8001430 <receiving_AX25+0x14c>)
 800138a:	f7fe ff41 	bl	8000210 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29a      	uxth	r2, r3
 8001392:	230a      	movs	r3, #10
 8001394:	4926      	ldr	r1, [pc, #152]	; (8001430 <receiving_AX25+0x14c>)
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <receiving_AX25+0x154>)
 8001398:	f003 ff0b 	bl	80051b2 <HAL_UART_Transmit>
			receiving_AX25();
 800139c:	f7ff ffa2 	bl	80012e4 <receiving_AX25>
 80013a0:	e042      	b.n	8001428 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d118      	bne.n	80013dc <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <receiving_AX25+0x14c>)
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <receiving_AX25+0x160>)
 80013ae:	4615      	mov	r5, r2
 80013b0:	461c      	mov	r4, r3
 80013b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b4:	6028      	str	r0, [r5, #0]
 80013b6:	6069      	str	r1, [r5, #4]
 80013b8:	60aa      	str	r2, [r5, #8]
 80013ba:	60eb      	str	r3, [r5, #12]
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	6128      	str	r0, [r5, #16]
 80013c0:	7923      	ldrb	r3, [r4, #4]
 80013c2:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <receiving_AX25+0x14c>)
 80013c6:	f7fe ff23 	bl	8000210 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	230a      	movs	r3, #10
 80013d0:	4917      	ldr	r1, [pc, #92]	; (8001430 <receiving_AX25+0x14c>)
 80013d2:	4819      	ldr	r0, [pc, #100]	; (8001438 <receiving_AX25+0x154>)
 80013d4:	f003 feed 	bl	80051b2 <HAL_UART_Transmit>

		return false;
 80013d8:	2300      	movs	r3, #0
 80013da:	e025      	b.n	8001428 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <receiving_AX25+0x14c>)
 80013de:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <receiving_AX25+0x164>)
 80013e0:	4614      	mov	r4, r2
 80013e2:	469c      	mov	ip, r3
 80013e4:	f104 0e20 	add.w	lr, r4, #32
 80013e8:	4665      	mov	r5, ip
 80013ea:	4626      	mov	r6, r4
 80013ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013ee:	6028      	str	r0, [r5, #0]
 80013f0:	6069      	str	r1, [r5, #4]
 80013f2:	60aa      	str	r2, [r5, #8]
 80013f4:	60eb      	str	r3, [r5, #12]
 80013f6:	3410      	adds	r4, #16
 80013f8:	f10c 0c10 	add.w	ip, ip, #16
 80013fc:	4574      	cmp	r4, lr
 80013fe:	d1f3      	bne.n	80013e8 <receiving_AX25+0x104>
 8001400:	4663      	mov	r3, ip
 8001402:	4622      	mov	r2, r4
 8001404:	6810      	ldr	r0, [r2, #0]
 8001406:	6018      	str	r0, [r3, #0]
 8001408:	8891      	ldrh	r1, [r2, #4]
 800140a:	7992      	ldrb	r2, [r2, #6]
 800140c:	8099      	strh	r1, [r3, #4]
 800140e:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <receiving_AX25+0x14c>)
 8001412:	f7fe fefd 	bl	8000210 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	230a      	movs	r3, #10
 800141c:	4904      	ldr	r1, [pc, #16]	; (8001430 <receiving_AX25+0x14c>)
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <receiving_AX25+0x154>)
 8001420:	f003 fec7 	bl	80051b2 <HAL_UART_Transmit>
		receiving_AX25();
 8001424:	f7ff ff5e 	bl	80012e4 <receiving_AX25>
	}
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001430:	2000260c 	.word	0x2000260c
 8001434:	08006a14 	.word	0x08006a14
 8001438:	200042c8 	.word	0x200042c8
 800143c:	20000a18 	.word	0x20000a18
 8001440:	08006a30 	.word	0x08006a30
 8001444:	08006a54 	.word	0x08006a54
 8001448:	08006a6c 	.word	0x08006a6c

0800144c <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <AX25_Packet_Validate+0x5c>)
 8001454:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <AX25_Packet_Validate+0x60>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b77      	cmp	r3, #119	; 0x77
 8001460:	dc0a      	bgt.n	8001478 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <AX25_Packet_Validate+0x64>)
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <AX25_Packet_Validate+0x68>)
 8001466:	4614      	mov	r4, r2
 8001468:	cb07      	ldmia	r3!, {r0, r1, r2}
 800146a:	6020      	str	r0, [r4, #0]
 800146c:	6061      	str	r1, [r4, #4]
 800146e:	60a2      	str	r2, [r4, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	7323      	strb	r3, [r4, #12]
		return false;
 8001474:	2300      	movs	r3, #0
 8001476:	e013      	b.n	80014a0 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <AX25_Packet_Validate+0x60>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <AX25_Packet_Validate+0x64>)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <AX25_Packet_Validate+0x68>)
 8001488:	4614      	mov	r4, r2
 800148a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800148c:	6020      	str	r0, [r4, #0]
 800148e:	6061      	str	r1, [r4, #4]
 8001490:	60a2      	str	r2, [r4, #8]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	7323      	strb	r3, [r4, #12]
		return false;
 8001496:	2300      	movs	r3, #0
 8001498:	e002      	b.n	80014a0 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 800149a:	f000 f80d 	bl	80014b8 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 800149e:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	20000a18 	.word	0x20000a18
 80014ac:	200009fc 	.word	0x200009fc
 80014b0:	2000260c 	.word	0x2000260c
 80014b4:	08006a94 	.word	0x08006a94

080014b8 <set_packet_pointer_AX25>:

void set_packet_pointer_AX25(){
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014be:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <set_packet_pointer_AX25+0x1c0>)
 80014c0:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 80014c2:	2310      	movs	r3, #16
 80014c4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 80014c6:	4b6d      	ldr	r3, [pc, #436]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80014c8:	4a6d      	ldr	r2, [pc, #436]	; (8001680 <set_packet_pointer_AX25+0x1c8>)
 80014ca:	4614      	mov	r4, r2
 80014cc:	469c      	mov	ip, r3
 80014ce:	f104 0e20 	add.w	lr, r4, #32
 80014d2:	4665      	mov	r5, ip
 80014d4:	4626      	mov	r6, r4
 80014d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d8:	6028      	str	r0, [r5, #0]
 80014da:	6069      	str	r1, [r5, #4]
 80014dc:	60aa      	str	r2, [r5, #8]
 80014de:	60eb      	str	r3, [r5, #12]
 80014e0:	3410      	adds	r4, #16
 80014e2:	f10c 0c10 	add.w	ip, ip, #16
 80014e6:	4574      	cmp	r4, lr
 80014e8:	d1f3      	bne.n	80014d2 <set_packet_pointer_AX25+0x1a>
 80014ea:	4663      	mov	r3, ip
 80014ec:	4622      	mov	r2, r4
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014f2:	4862      	ldr	r0, [pc, #392]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80014f4:	f7fe fe8c 	bl	8000210 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	230a      	movs	r3, #10
 80014fe:	495f      	ldr	r1, [pc, #380]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001500:	4860      	ldr	r0, [pc, #384]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001502:	f003 fe56 	bl	80051b2 <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 800150a:	4a5c      	ldr	r2, [pc, #368]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <set_packet_pointer_AX25+0x1d0>)
 800150e:	4615      	mov	r5, r2
 8001510:	461c      	mov	r4, r3
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	6028      	str	r0, [r5, #0]
 8001516:	6069      	str	r1, [r5, #4]
 8001518:	60aa      	str	r2, [r5, #8]
 800151a:	60eb      	str	r3, [r5, #12]
 800151c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800151e:	6128      	str	r0, [r5, #16]
 8001520:	6169      	str	r1, [r5, #20]
 8001522:	61aa      	str	r2, [r5, #24]
 8001524:	7823      	ldrb	r3, [r4, #0]
 8001526:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001528:	4854      	ldr	r0, [pc, #336]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 800152a:	f7fe fe71 	bl	8000210 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	230a      	movs	r3, #10
 8001534:	4951      	ldr	r1, [pc, #324]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001536:	4853      	ldr	r0, [pc, #332]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001538:	f003 fe3b 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001542:	3310      	adds	r3, #16
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3370      	adds	r3, #112	; 0x70
 800154c:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3370      	adds	r3, #112	; 0x70
 8001552:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <set_packet_pointer_AX25+0x1d4>)
 8001558:	4615      	mov	r5, r2
 800155a:	461c      	mov	r4, r3
 800155c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155e:	6028      	str	r0, [r5, #0]
 8001560:	6069      	str	r1, [r5, #4]
 8001562:	60aa      	str	r2, [r5, #8]
 8001564:	60eb      	str	r3, [r5, #12]
 8001566:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001568:	6128      	str	r0, [r5, #16]
 800156a:	6169      	str	r1, [r5, #20]
 800156c:	61aa      	str	r2, [r5, #24]
 800156e:	7823      	ldrb	r3, [r4, #0]
 8001570:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001572:	4842      	ldr	r0, [pc, #264]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001574:	f7fe fe4c 	bl	8000210 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	230a      	movs	r3, #10
 800157e:	493f      	ldr	r1, [pc, #252]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001580:	4840      	ldr	r0, [pc, #256]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001582:	f003 fe16 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800158c:	3314      	adds	r3, #20
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3308      	adds	r3, #8
 8001596:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3308      	adds	r3, #8
 800159c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 800159e:	4a37      	ldr	r2, [pc, #220]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <set_packet_pointer_AX25+0x1d8>)
 80015a2:	4615      	mov	r5, r2
 80015a4:	461c      	mov	r4, r3
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	6028      	str	r0, [r5, #0]
 80015aa:	6069      	str	r1, [r5, #4]
 80015ac:	60aa      	str	r2, [r5, #8]
 80015ae:	60eb      	str	r3, [r5, #12]
 80015b0:	cc03      	ldmia	r4!, {r0, r1}
 80015b2:	6128      	str	r0, [r5, #16]
 80015b4:	6169      	str	r1, [r5, #20]
 80015b6:	7823      	ldrb	r3, [r4, #0]
 80015b8:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015ba:	4830      	ldr	r0, [pc, #192]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015bc:	f7fe fe28 	bl	8000210 <strlen>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	230a      	movs	r3, #10
 80015c6:	492d      	ldr	r1, [pc, #180]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015c8:	482e      	ldr	r0, [pc, #184]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 80015ca:	f003 fdf2 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015d4:	3318      	adds	r3, #24
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3308      	adds	r3, #8
 80015de:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3308      	adds	r3, #8
 80015e4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 80015e6:	4a25      	ldr	r2, [pc, #148]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <set_packet_pointer_AX25+0x1dc>)
 80015ea:	4615      	mov	r5, r2
 80015ec:	461c      	mov	r4, r3
 80015ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f0:	6028      	str	r0, [r5, #0]
 80015f2:	6069      	str	r1, [r5, #4]
 80015f4:	60aa      	str	r2, [r5, #8]
 80015f6:	60eb      	str	r3, [r5, #12]
 80015f8:	cc03      	ldmia	r4!, {r0, r1}
 80015fa:	6128      	str	r0, [r5, #16]
 80015fc:	6169      	str	r1, [r5, #20]
 80015fe:	8823      	ldrh	r3, [r4, #0]
 8001600:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001602:	481e      	ldr	r0, [pc, #120]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001604:	f7fe fe04 	bl	8000210 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	230a      	movs	r3, #10
 800160e:	491b      	ldr	r1, [pc, #108]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 8001612:	f003 fdce 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800161c:	331c      	adds	r3, #28
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <set_packet_pointer_AX25+0x1e0>)
 8001636:	4615      	mov	r5, r2
 8001638:	461c      	mov	r4, r3
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	6028      	str	r0, [r5, #0]
 800163e:	6069      	str	r1, [r5, #4]
 8001640:	60aa      	str	r2, [r5, #8]
 8001642:	60eb      	str	r3, [r5, #12]
 8001644:	cc03      	ldmia	r4!, {r0, r1}
 8001646:	6128      	str	r0, [r5, #16]
 8001648:	6169      	str	r1, [r5, #20]
 800164a:	7823      	ldrb	r3, [r4, #0]
 800164c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800164e:	480b      	ldr	r0, [pc, #44]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 8001650:	f7fe fdde 	bl	8000210 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	230a      	movs	r3, #10
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <set_packet_pointer_AX25+0x1c4>)
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <set_packet_pointer_AX25+0x1cc>)
 800165e:	f003 fda8 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001668:	3304      	adds	r3, #4
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000a18 	.word	0x20000a18
 800167c:	2000260c 	.word	0x2000260c
 8001680:	08006aa4 	.word	0x08006aa4
 8001684:	200042c8 	.word	0x200042c8
 8001688:	08006ac8 	.word	0x08006ac8
 800168c:	08006ae8 	.word	0x08006ae8
 8001690:	08006b08 	.word	0x08006b08
 8001694:	08006b24 	.word	0x08006b24
 8001698:	08006b40 	.word	0x08006b40

0800169c <AX25_TO_KISS>:

void AX25_TO_KISS(){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <AX25_TO_KISS+0xc4>)
 80016a4:	607b      	str	r3, [r7, #4]

	set_packet_pointer_AX25();
 80016a6:	f7ff ff07 	bl	80014b8 <set_packet_pointer_AX25>
	print_AX25();
 80016aa:	f7ff f959 	bl	8000960 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3308      	adds	r3, #8
 80016b2:	603b      	str	r3, [r7, #0]

	set_packet_pointer_KISS();
 80016b4:	f000 f8c2 	bl	800183c <set_packet_pointer_KISS>

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	492a      	ldr	r1, [pc, #168]	; (8001764 <AX25_TO_KISS+0xc8>)
 80016bc:	461a      	mov	r2, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	cb03      	ldmia	r3!, {r0, r1}
 80016c2:	6010      	str	r0, [r2, #0]
 80016c4:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016cc:	3310      	adds	r3, #16
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2270      	movs	r2, #112	; 0x70
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f004 fc81 	bl	8005fdc <memcpy>
	cpy_from_ptr += address_len;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3370      	adds	r3, #112	; 0x70
 80016de:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016e6:	3314      	adds	r3, #20
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2208      	movs	r2, #8
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fc74 	bl	8005fdc <memcpy>
	cpy_from_ptr += control_len;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3308      	adds	r3, #8
 80016f8:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001700:	3318      	adds	r3, #24
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2208      	movs	r2, #8
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f004 fc67 	bl	8005fdc <memcpy>
	cpy_from_ptr += PID_len;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3308      	adds	r3, #8
 8001712:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800171a:	331c      	adds	r3, #28
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	6839      	ldr	r1, [r7, #0]
 800172a:	f004 fc57 	bl	8005fdc <memcpy>

	memcpy(local_packet->Info+local_packet->Info_Len,KISS_FLAG,FLAG_SIZE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001734:	331c      	adds	r3, #28
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4413      	add	r3, r2
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <AX25_TO_KISS+0xc8>)
 8001744:	461a      	mov	r2, r3
 8001746:	460b      	mov	r3, r1
 8001748:	cb03      	ldmia	r3!, {r0, r1}
 800174a:	6010      	str	r0, [r2, #0]
 800174c:	6051      	str	r1, [r2, #4]
//	rxBit_count = (local_packet->byte_cnt*8) - 24;
//	crc_generate();

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <AX25_TO_KISS+0xcc>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_KISS();
 8001754:	f7ff fb5a 	bl	8000e0c <print_KISS>
	return true; //valid packet
 8001758:	bf00      	nop
}
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000a18 	.word	0x20000a18
 8001764:	20000000 	.word	0x20000000
 8001768:	200009fc 	.word	0x200009fc

0800176c <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <receiving_KISS+0xbc>)
 8001774:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <receiving_KISS+0xc0>)
 8001778:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	7b5b      	ldrb	r3, [r3, #13]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d04d      	beq.n	800181e <receiving_KISS+0xb2>
		sprintf(uartData, "\nGot a packet via UART of size %d bytes, printing now...\n\n",local_UART_packet->received_byte_cnt);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	461a      	mov	r2, r3
 8001788:	4929      	ldr	r1, [pc, #164]	; (8001830 <receiving_KISS+0xc4>)
 800178a:	482a      	ldr	r0, [pc, #168]	; (8001834 <receiving_KISS+0xc8>)
 800178c:	f004 fc3a 	bl	8006004 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001790:	4828      	ldr	r0, [pc, #160]	; (8001834 <receiving_KISS+0xc8>)
 8001792:	f7fe fd3d 	bl	8000210 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	230a      	movs	r3, #10
 800179c:	4925      	ldr	r1, [pc, #148]	; (8001834 <receiving_KISS+0xc8>)
 800179e:	4826      	ldr	r0, [pc, #152]	; (8001838 <receiving_KISS+0xcc>)
 80017a0:	f003 fd07 	bl	80051b2 <HAL_UART_Transmit>

		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e020      	b.n	80017ec <receiving_KISS+0x80>
			//Hex value from UART
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[i];
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	330e      	adds	r3, #14
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	72fb      	strb	r3, [r7, #11]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4413      	add	r3, r2
 80017c2:	3307      	adds	r3, #7
 80017c4:	607b      	str	r3, [r7, #4]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2201      	movs	r2, #1
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fef6 	bl	80005c0 <conv_HEX_to_BIN>

			local_UART_packet->got_packet = false;
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2200      	movs	r2, #0
 80017d8:	735a      	strb	r2, [r3, #13]
			local_packet->got_packet = true;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017e0:	3309      	adds	r3, #9
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbd9      	blt.n	80017aa <receiving_KISS+0x3e>
		}
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001800:	330c      	adds	r3, #12
 8001802:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset-1)*8;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800180a:	330c      	adds	r3, #12
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3b13      	subs	r3, #19
 8001810:	00da      	lsls	r2, r3, #3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001818:	601a      	str	r2, [r3, #0]
		return true;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <receiving_KISS+0xb4>
	}

	else {
		return false;
 800181e:	2300      	movs	r3, #0
	}
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20001d74 	.word	0x20001d74
 800182c:	20000a18 	.word	0x20000a18
 8001830:	08006b5c 	.word	0x08006b5c
 8001834:	2000260c 	.word	0x2000260c
 8001838:	200042c8 	.word	0x200042c8

0800183c <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001842:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <set_packet_pointer_KISS+0x174>)
 8001844:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS:\n");
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001848:	4a5b      	ldr	r2, [pc, #364]	; (80019b8 <set_packet_pointer_KISS+0x17c>)
 800184a:	4614      	mov	r4, r2
 800184c:	469c      	mov	ip, r3
 800184e:	f104 0e20 	add.w	lr, r4, #32
 8001852:	4665      	mov	r5, ip
 8001854:	4626      	mov	r6, r4
 8001856:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001858:	6028      	str	r0, [r5, #0]
 800185a:	6069      	str	r1, [r5, #4]
 800185c:	60aa      	str	r2, [r5, #8]
 800185e:	60eb      	str	r3, [r5, #12]
 8001860:	3410      	adds	r4, #16
 8001862:	f10c 0c10 	add.w	ip, ip, #16
 8001866:	4574      	cmp	r4, lr
 8001868:	d1f3      	bne.n	8001852 <set_packet_pointer_KISS+0x16>
 800186a:	4663      	mov	r3, ip
 800186c:	4622      	mov	r2, r4
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001872:	4850      	ldr	r0, [pc, #320]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001874:	f7fe fccc 	bl	8000210 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	230a      	movs	r3, #10
 800187e:	494d      	ldr	r1, [pc, #308]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001880:	484e      	ldr	r0, [pc, #312]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001882:	f003 fc96 	bl	80051b2 <HAL_UART_Transmit>

	bool *curr_mem = local_packet->KISS_PACKET+16;//+8 is to skip the flag since it does not have a pointer
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 800188c:	3310      	adds	r3, #16
 800188e:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for address\n");
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <set_packet_pointer_KISS+0x184>)
 8001894:	4615      	mov	r5, r2
 8001896:	461c      	mov	r4, r3
 8001898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189a:	6028      	str	r0, [r5, #0]
 800189c:	6069      	str	r1, [r5, #4]
 800189e:	60aa      	str	r2, [r5, #8]
 80018a0:	60eb      	str	r3, [r5, #12]
 80018a2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80018a4:	6128      	str	r0, [r5, #16]
 80018a6:	6169      	str	r1, [r5, #20]
 80018a8:	61aa      	str	r2, [r5, #24]
 80018aa:	7823      	ldrb	r3, [r4, #0]
 80018ac:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018ae:	4841      	ldr	r0, [pc, #260]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018b0:	f7fe fcae 	bl	8000210 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	230a      	movs	r3, #10
 80018ba:	493e      	ldr	r1, [pc, #248]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018bc:	483f      	ldr	r0, [pc, #252]	; (80019bc <set_packet_pointer_KISS+0x180>)
 80018be:	f003 fc78 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018c8:	3310      	adds	r3, #16
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3370      	adds	r3, #112	; 0x70
 80018d2:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for control\n");
 80018d4:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <set_packet_pointer_KISS+0x188>)
 80018d8:	4615      	mov	r5, r2
 80018da:	461c      	mov	r4, r3
 80018dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018de:	6028      	str	r0, [r5, #0]
 80018e0:	6069      	str	r1, [r5, #4]
 80018e2:	60aa      	str	r2, [r5, #8]
 80018e4:	60eb      	str	r3, [r5, #12]
 80018e6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80018e8:	6128      	str	r0, [r5, #16]
 80018ea:	6169      	str	r1, [r5, #20]
 80018ec:	61aa      	str	r2, [r5, #24]
 80018ee:	7823      	ldrb	r3, [r4, #0]
 80018f0:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018f2:	4830      	ldr	r0, [pc, #192]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 80018f4:	f7fe fc8c 	bl	8000210 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	230a      	movs	r3, #10
 80018fe:	492d      	ldr	r1, [pc, #180]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001900:	482e      	ldr	r0, [pc, #184]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001902:	f003 fc56 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800190c:	3314      	adds	r3, #20
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	3308      	adds	r3, #8
 8001916:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for PID\n");
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <set_packet_pointer_KISS+0x18c>)
 800191c:	4615      	mov	r5, r2
 800191e:	461c      	mov	r4, r3
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	6028      	str	r0, [r5, #0]
 8001924:	6069      	str	r1, [r5, #4]
 8001926:	60aa      	str	r2, [r5, #8]
 8001928:	60eb      	str	r3, [r5, #12]
 800192a:	cc03      	ldmia	r4!, {r0, r1}
 800192c:	6128      	str	r0, [r5, #16]
 800192e:	6169      	str	r1, [r5, #20]
 8001930:	7823      	ldrb	r3, [r4, #0]
 8001932:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001934:	481f      	ldr	r0, [pc, #124]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001936:	f7fe fc6b 	bl	8000210 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	230a      	movs	r3, #10
 8001940:	491c      	ldr	r1, [pc, #112]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001942:	481e      	ldr	r0, [pc, #120]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001944:	f003 fc35 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800194e:	3318      	adds	r3, #24
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3308      	adds	r3, #8
 8001958:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for Info\n");
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <set_packet_pointer_KISS+0x190>)
 800195e:	4615      	mov	r5, r2
 8001960:	461c      	mov	r4, r3
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	6028      	str	r0, [r5, #0]
 8001966:	6069      	str	r1, [r5, #4]
 8001968:	60aa      	str	r2, [r5, #8]
 800196a:	60eb      	str	r3, [r5, #12]
 800196c:	cc03      	ldmia	r4!, {r0, r1}
 800196e:	6128      	str	r0, [r5, #16]
 8001970:	6169      	str	r1, [r5, #20]
 8001972:	8823      	ldrh	r3, [r4, #0]
 8001974:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001978:	f7fe fc4a 	bl	8000210 <strlen>
 800197c:	4603      	mov	r3, r0
 800197e:	b29a      	uxth	r2, r3
 8001980:	230a      	movs	r3, #10
 8001982:	490c      	ldr	r1, [pc, #48]	; (80019b4 <set_packet_pointer_KISS+0x178>)
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <set_packet_pointer_KISS+0x180>)
 8001986:	f003 fc14 	bl	80051b2 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001990:	331c      	adds	r3, #28
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	603b      	str	r3, [r7, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000a18 	.word	0x20000a18
 80019b4:	2000260c 	.word	0x2000260c
 80019b8:	08006b98 	.word	0x08006b98
 80019bc:	200042c8 	.word	0x200042c8
 80019c0:	08006ac8 	.word	0x08006ac8
 80019c4:	08006ae8 	.word	0x08006ae8
 80019c8:	08006b08 	.word	0x08006b08
 80019cc:	08006b24 	.word	0x08006b24

080019d0 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <KISS_TO_AX25+0x9c>)
 80019d8:	607b      	str	r3, [r7, #4]

	set_packet_pointer_KISS();
 80019da:	f7ff ff2f 	bl	800183c <set_packet_pointer_KISS>
	print_KISS();
 80019de:	f7ff fa15 	bl	8000e0c <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+16);//starting kiss packet skipping 2 bytes
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80019e8:	3310      	adds	r3, #16
 80019ea:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 80019ec:	f7ff fd64 	bl	80014b8 <set_packet_pointer_AX25>

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019f6:	3310      	adds	r3, #16
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2270      	movs	r2, #112	; 0x70
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 faec 	bl	8005fdc <memcpy>
	cpy_from_ptr += address_len;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3370      	adds	r3, #112	; 0x70
 8001a08:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a10:	3314      	adds	r3, #20
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2208      	movs	r2, #8
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 fadf 	bl	8005fdc <memcpy>
	cpy_from_ptr += control_len;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3308      	adds	r3, #8
 8001a22:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a2a:	3318      	adds	r3, #24
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fad2 	bl	8005fdc <memcpy>
	cpy_from_ptr += PID_len;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a44:	331c      	adds	r3, #28
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	f004 fac2 	bl	8005fdc <memcpy>
//	rxBit_count = (local_packet->byte_cnt*8) - 24;
//	crc_generate();

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <KISS_TO_AX25+0xa0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_AX25();
 8001a5e:	f7fe ff7f 	bl	8000960 <print_AX25>
	return true; //valid packet
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000a18 	.word	0x20000a18
 8001a70:	200009fc 	.word	0x200009fc

08001a74 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8001a7e:	f000 f9a9 	bl	8001dd4 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <initProgram+0x58>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8001a88:	f000 f826 	bl	8001ad8 <toggleMode>
	toggleMode();
 8001a8c:	f000 f824 	bl	8001ad8 <toggleMode>

	if (mode) {
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <initProgram+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <initProgram+0x5c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2264      	movs	r2, #100	; 0x64
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <initProgram+0x60>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f240 323f 	movw	r2, #831	; 0x33f
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aaa:	e009      	b.n	8001ac0 <initProgram+0x4c>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <initProgram+0x5c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <initProgram+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 8001ac0:	f7fe fdce 	bl	8000660 <init_AX25>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20004270 	.word	0x20004270
 8001ad0:	20004288 	.word	0x20004288
 8001ad4:	200031d0 	.word	0x200031d0

08001ad8 <toggleMode>:



void toggleMode() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001adc:	2006      	movs	r0, #6
 8001ade:	f001 f9d2 	bl	8002e86 <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <toggleMode+0x98>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f083 0301 	eor.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <toggleMode+0x98>)
 8001afe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <toggleMode+0x98>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	2120      	movs	r1, #32
 8001b08:	481a      	ldr	r0, [pc, #104]	; (8001b74 <toggleMode+0x9c>)
 8001b0a:	f002 f96f 	bl	8003dec <HAL_GPIO_WritePin>
	midbit = false;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <toggleMode+0xa0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8001b14:	4819      	ldr	r0, [pc, #100]	; (8001b7c <toggleMode+0xa4>)
 8001b16:	f002 fefe 	bl	8004916 <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <toggleMode+0xa4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <toggleMode+0x98>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <toggleMode+0x5e>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <toggleMode+0xa4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f240 323f 	movw	r2, #831	; 0x33f
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b34:	e013      	b.n	8001b5e <toggleMode+0x86>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <toggleMode+0xa8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <toggleMode+0xa4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8001b4a:	480c      	ldr	r0, [pc, #48]	; (8001b7c <toggleMode+0xa4>)
 8001b4c:	f002 ff0e 	bl	800496c <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001b50:	2100      	movs	r1, #0
 8001b52:	480c      	ldr	r0, [pc, #48]	; (8001b84 <toggleMode+0xac>)
 8001b54:	f001 fa82 	bl	800305c <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b58:	2006      	movs	r0, #6
 8001b5a:	f001 f986 	bl	8002e6a <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <toggleMode+0x9c>)
 8001b66:	f002 f941 	bl	8003dec <HAL_GPIO_WritePin>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20004270 	.word	0x20004270
 8001b74:	40020000 	.word	0x40020000
 8001b78:	20000a00 	.word	0x20000a00
 8001b7c:	200031d0 	.word	0x200031d0
 8001b80:	20004288 	.word	0x20004288
 8001b84:	20004274 	.word	0x20004274

08001b88 <loadPeriodBuffer>:

void loadPeriodBuffer(int timerCnt) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	periodBuffer[periodSaveCount] = timerCnt;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <loadPeriodBuffer+0x44>)
 8001b9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	periodSaveCount++;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001ba8:	801a      	strh	r2, [r3, #0]
	if (periodSaveCount >= RX_BUFFERSIZE) {
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb2:	d302      	bcc.n	8001bba <loadPeriodBuffer+0x32>
		periodSaveCount = 0;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <loadPeriodBuffer+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
	}
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000a04 	.word	0x20000a04
 8001bcc:	20003270 	.word	0x20003270

08001bd0 <Tim3IT>:
void Tim3IT() {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	if (mode) {
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <Tim3IT+0x3c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <Tim3IT+0x1c>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	480c      	ldr	r0, [pc, #48]	; (8001c10 <Tim3IT+0x40>)
 8001be0:	f001 fa3c 	bl	800305c <HAL_DAC_Stop_DMA>
		midbit = false;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <Tim3IT+0x44>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
		if(sampusecount>SAMP_PER_BAUD){
			loadPeriodBuffer(0);
		}
		sampusecount++;
	}
}
 8001bea:	e00c      	b.n	8001c06 <Tim3IT+0x36>
		if(sampusecount>SAMP_PER_BAUD){
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <Tim3IT+0x48>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d902      	bls.n	8001bfa <Tim3IT+0x2a>
			loadPeriodBuffer(0);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff ffc7 	bl	8001b88 <loadPeriodBuffer>
		sampusecount++;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <Tim3IT+0x48>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <Tim3IT+0x48>)
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20004270 	.word	0x20004270
 8001c10:	20004274 	.word	0x20004274
 8001c14:	20000a00 	.word	0x20000a00
 8001c18:	20000a03 	.word	0x20000a03

08001c1c <FreqCounterPinEXTI>:
void FreqCounterPinEXTI() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	loadPeriodBuffer(htim2.Instance->CNT);
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <FreqCounterPinEXTI+0x24>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffae 	bl	8001b88 <loadPeriodBuffer>
	htim2.Instance->CNT = 0;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <FreqCounterPinEXTI+0x24>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
	sampusecount = 0;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <FreqCounterPinEXTI+0x28>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20004288 	.word	0x20004288
 8001c44:	20000a03 	.word	0x20000a03

08001c48 <bitToAudio>:
		sprintf(uartData, "sinArray[%d] = %d\n",i,sinArray[i]);
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}

int bitToAudio(bool *bitStream, int arraySize, bool direction,int wave_start) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71fb      	strb	r3, [r7, #7]
	bool changeFreq;
	int waveoffset = wave_start;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < arraySize; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e073      	b.n	8001d4a <bitToAudio+0x102>
		//Check if freq needs to be changed for NRZI
		if(direction){
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <bitToAudio+0x2c>
			changeFreq = bitStream[i];
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	77fb      	strb	r3, [r7, #31]
 8001c72:	e007      	b.n	8001c84 <bitToAudio+0x3c>
		} else {
			changeFreq = bitStream[arraySize - i - 1];
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	77fb      	strb	r3, [r7, #31]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, changeFreq);
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8c:	4835      	ldr	r0, [pc, #212]	; (8001d64 <bitToAudio+0x11c>)
 8001c8e:	f002 f8ad 	bl	8003dec <HAL_GPIO_WritePin>
		freqSelect = (changeFreq) ? !freqSelect : freqSelect;
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <bitToAudio+0x6c>
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <bitToAudio+0x120>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e006      	b.n	8001cc2 <bitToAudio+0x7a>
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <bitToAudio+0x120>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <bitToAudio+0x120>)
 8001cc4:	7013      	strb	r3, [r2, #0]

		if (freqSelect) {
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <bitToAudio+0x120>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <bitToAudio+0x96>
			htim2.Instance->ARR = 14;
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <bitToAudio+0x124>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	220e      	movs	r2, #14
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * HIGHF) / (1.0 * LOWF);
 8001cd6:	f240 2326 	movw	r3, #550	; 0x226
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	e006      	b.n	8001cec <bitToAudio+0xa4>
		}
		else {
			htim2.Instance->ARR = 27;
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <bitToAudio+0x124>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	221b      	movs	r2, #27
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * LOWF) / (1.0 * LOWF);
 8001ce6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cea:	61bb      	str	r3, [r7, #24]
		}

		//htim2.Instance->CNT = 0;
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <bitToAudio+0x128>)
 8001cf2:	441a      	add	r2, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	481d      	ldr	r0, [pc, #116]	; (8001d74 <bitToAudio+0x12c>)
 8001d00:	f001 f8fe 	bl	8002f00 <HAL_DAC_Start_DMA>
		htim3.Instance->CNT = 0;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <bitToAudio+0x130>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8001d0c:	481a      	ldr	r0, [pc, #104]	; (8001d78 <bitToAudio+0x130>)
 8001d0e:	f002 fe2d 	bl	800496c <HAL_TIM_Base_Start_IT>

		//Calculate ending point for wave
		wave_start = (wave_start+waveoffset+1)%FREQ_SAMP;
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	4413      	add	r3, r2
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <bitToAudio+0x134>)
 8001d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d20:	1151      	asrs	r1, r2, #5
 8001d22:	17da      	asrs	r2, r3, #31
 8001d24:	1a8a      	subs	r2, r1, r2
 8001d26:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d2a:	fb01 f202 	mul.w	r2, r1, r2
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	603b      	str	r3, [r7, #0]

		midbit = true;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <bitToAudio+0x138>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
		while (midbit){
 8001d38:	e000      	b.n	8001d3c <bitToAudio+0xf4>
			//In the future this leaves the CPU free for scheduling or something
			__NOP();
 8001d3a:	bf00      	nop
		while (midbit){
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <bitToAudio+0x138>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1fa      	bne.n	8001d3a <bitToAudio+0xf2>
	for (int i = 0; i < arraySize; i++) {
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	db87      	blt.n	8001c62 <bitToAudio+0x1a>
		}

	}

	HAL_TIM_Base_Stop(&htim3);
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <bitToAudio+0x130>)
 8001d54:	f002 fddf 	bl	8004916 <HAL_TIM_Base_Stop>
	return wave_start;
 8001d58:	683b      	ldr	r3, [r7, #0]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40020000 	.word	0x40020000
 8001d68:	20000a02 	.word	0x20000a02
 8001d6c:	20004288 	.word	0x20004288
 8001d70:	20000010 	.word	0x20000010
 8001d74:	20004274 	.word	0x20004274
 8001d78:	200031d0 	.word	0x200031d0
 8001d7c:	1b4e81b5 	.word	0x1b4e81b5
 8001d80:	20000a00 	.word	0x20000a00

08001d84 <generateBitstream>:
void generateBitstream() {
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <generateBitstream+0x4c>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <generateBitstream+0x4c>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <generateBitstream+0x4c>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <generateBitstream+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <generateBitstream+0x4c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <generateBitstream+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <generateBitstream+0x4c>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <generateBitstream+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <generateBitstream+0x4c>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <generateBitstream+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	725a      	strb	r2, [r3, #9]

}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200031c4 	.word	0x200031c4

08001dd4 <initOUTData>:
void initOUTData() {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8001dd8:	f7ff ffd4 	bl	8001d84 <generateBitstream>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <pertobit>:
uint8_t sampusecount = 0;
uint16_t periodSaveCount = 0;
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8001de8:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <pertobit+0x4c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001df8:	dd06      	ble.n	8001e08 <pertobit+0x28>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f640 2227 	movw	r2, #2599	; 0xa27
 8001e00:	4293      	cmp	r3, r2
 8001e02:	dc01      	bgt.n	8001e08 <pertobit+0x28>
		return 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e00b      	b.n	8001e20 <pertobit+0x40>
	if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e0e:	dd05      	ble.n	8001e1c <pertobit+0x3c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001e16:	da01      	bge.n	8001e1c <pertobit+0x3c>
		return 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e001      	b.n	8001e20 <pertobit+0x40>
	else
		return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	00989680 	.word	0x00989680

08001e30 <loadBit>:
int loadBit(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
	int currbit = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
	int nextbit = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]

	currbit = pertobit(periodBuffer[trackBit]);
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <loadBit+0xf4>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <loadBit+0xf8>)
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ffc8 	bl	8001de0 <pertobit>
 8001e50:	6078      	str	r0, [r7, #4]

	//Low frequency should have 1 bit per baud
	if(currbit==0){
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <loadBit+0x38>
		bitBuffer[bitSaveCount] = 0;
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <loadBit+0xfc>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <loadBit+0x100>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001e66:	e03c      	b.n	8001ee2 <loadBit+0xb2>
	}

	//High frequency should have 2 high bits per baud
	else if(currbit==1){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d131      	bne.n	8001ed2 <loadBit+0xa2>
		//Gather next bit
		//ternary assign: var = (cond)?if_true:if_false;
		nextbit = (trackBit!=RX_BUFFERSIZE-1)?pertobit(periodBuffer[trackBit+1]):pertobit(periodBuffer[0]);
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <loadBit+0xf4>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00a      	beq.n	8001e90 <loadBit+0x60>
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <loadBit+0xf4>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	4a29      	ldr	r2, [pc, #164]	; (8001f28 <loadBit+0xf8>)
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ffaa 	bl	8001de0 <pertobit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	e005      	b.n	8001e9c <loadBit+0x6c>
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <loadBit+0xf8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ffa3 	bl	8001de0 <pertobit>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	603b      	str	r3, [r7, #0]

		if(nextbit==1){
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10d      	bne.n	8001ec0 <loadBit+0x90>
			//High frequency detected, skip next bit
			trackBit++;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <loadBit+0xf4>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <loadBit+0xf4>)
 8001eae:	801a      	strh	r2, [r3, #0]
			bitBuffer[bitSaveCount] = 1;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <loadBit+0xfc>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <loadBit+0x100>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001ebe:	e010      	b.n	8001ee2 <loadBit+0xb2>
		}
		else {
			bitBuffer[bitSaveCount] = -1;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <loadBit+0xfc>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <loadBit+0x100>)
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001ed0:	e007      	b.n	8001ee2 <loadBit+0xb2>
		}
	}
	//Invalid bit
	else{
		bitBuffer[bitSaveCount] = -1;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <loadBit+0xfc>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <loadBit+0x100>)
 8001eda:	f04f 32ff 	mov.w	r2, #4294967295
 8001ede:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	}

	//Increment trackBit
	trackBit++;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <loadBit+0xf4>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <loadBit+0xf4>)
 8001eec:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <loadBit+0xf4>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d302      	bcc.n	8001efe <loadBit+0xce>
		trackBit = 0;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <loadBit+0xf4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	801a      	strh	r2, [r3, #0]

	//Increment bitSaveCount
	bitSaveCount++;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <loadBit+0xfc>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <loadBit+0xfc>)
 8001f08:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <loadBit+0xfc>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f12:	d302      	bcc.n	8001f1a <loadBit+0xea>
		bitSaveCount = 0;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <loadBit+0xfc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	801a      	strh	r2, [r3, #0]

	return currbit;
 8001f1a:	687b      	ldr	r3, [r7, #4]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000a06 	.word	0x20000a06
 8001f28:	20003270 	.word	0x20003270
 8001f2c:	20000a08 	.word	0x20000a08
 8001f30:	20004308 	.word	0x20004308

08001f34 <loadOctet>:
int loadOctet(bool* bufferptr) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	e024      	b.n	8001f90 <loadOctet+0x5c>
		bit = loadBit();
 8001f46:	f7ff ff73 	bl	8001e30 <loadBit>
 8001f4a:	6138      	str	r0, [r7, #16]
        if(bit < 0){
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da02      	bge.n	8001f58 <loadOctet+0x24>
        	return -1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e042      	b.n	8001fde <loadOctet+0xaa>
        }
		myPtr[i] = bit;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2d9      	uxtb	r1, r3
 8001f64:	f107 0208 	add.w	r2, r7, #8
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8001f70:	f107 0208 	add.w	r2, r7, #8
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	4413      	add	r3, r2
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	491b      	ldr	r1, [pc, #108]	; (8001fe8 <loadOctet+0xb4>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	440b      	add	r3, r1
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <loadOctet+0x56>
        	isFlag = false;
 8001f86:	2300      	movs	r3, #0
 8001f88:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b07      	cmp	r3, #7
 8001f94:	ddd7      	ble.n	8001f46 <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 8001f96:	7ffb      	ldrb	r3, [r7, #31]
 8001f98:	f083 0301 	eor.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01c      	beq.n	8001fdc <loadOctet+0xa8>
//		sprintf(uartData, "Printing octet = ");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		for(int i = 0;i<8;i++){
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e016      	b.n	8001fd6 <loadOctet+0xa2>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	f107 0220 	add.w	r2, r7, #32
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <loadOctet+0xb8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <loadOctet+0xb8>)
 8001fce:	6013      	str	r3, [r2, #0]
		for(int i = 0;i<8;i++){
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b07      	cmp	r3, #7
 8001fda:	dde5      	ble.n	8001fa8 <loadOctet+0x74>
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
//		sprintf(uartData, "\r\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
	return isFlag;
 8001fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	200009fc 	.word	0x200009fc

08001ff0 <streamGet>:
int streamGet() {
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b090      	sub	sp, #64	; 0x40
 8001ff4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001ff6:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <streamGet+0x1d0>)
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 8001ffa:	f240 134b 	movw	r3, #331	; 0x14b
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8002000:	e0cf      	b.n	80021a2 <streamGet+0x1b2>
		gotflag = false;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8002008:	2300      	movs	r3, #0
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
 800200c:	e011      	b.n	8002032 <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	3301      	adds	r3, #1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002018:	4413      	add	r3, r2
 800201a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002026:	440b      	add	r3, r1
 8002028:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	3301      	adds	r3, #1
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	2b06      	cmp	r3, #6
 8002036:	ddea      	ble.n	800200e <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8002038:	f7ff fefa 	bl	8001e30 <loadBit>
 800203c:	4603      	mov	r3, r0
 800203e:	623b      	str	r3, [r7, #32]
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002044:	e019      	b.n	800207a <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800204e:	4413      	add	r3, r2
 8002050:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002054:	495b      	ldr	r1, [pc, #364]	; (80021c4 <streamGet+0x1d4>)
 8002056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002058:	440a      	add	r2, r1
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <streamGet+0x78>
				gotflag = false;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002066:	e00b      	b.n	8002080 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8002068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206a:	2b07      	cmp	r3, #7
 800206c:	d102      	bne.n	8002074 <streamGet+0x84>
				gotflag = true;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	3301      	adds	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207c:	2b07      	cmp	r3, #7
 800207e:	dde2      	ble.n	8002046 <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8002080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 808c 	beq.w	80021a2 <streamGet+0x1b2>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 800208a:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <streamGet+0x1d8>)
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <streamGet+0x1dc>)
 800208e:	4615      	mov	r5, r2
 8002090:	461c      	mov	r4, r3
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	6028      	str	r0, [r5, #0]
 8002096:	6069      	str	r1, [r5, #4]
 8002098:	60aa      	str	r2, [r5, #8]
 800209a:	60eb      	str	r3, [r5, #12]
 800209c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800209e:	6128      	str	r0, [r5, #16]
 80020a0:	6169      	str	r1, [r5, #20]
 80020a2:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020a4:	4848      	ldr	r0, [pc, #288]	; (80021c8 <streamGet+0x1d8>)
 80020a6:	f7fe f8b3 	bl	8000210 <strlen>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	230a      	movs	r3, #10
 80020b0:	4945      	ldr	r1, [pc, #276]	; (80021c8 <streamGet+0x1d8>)
 80020b2:	4847      	ldr	r0, [pc, #284]	; (80021d0 <streamGet+0x1e0>)
 80020b4:	f003 f87d 	bl	80051b2 <HAL_UART_Transmit>
			octet_count  = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 80020c0:	e00a      	b.n	80020d8 <streamGet+0xe8>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 80020c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020c8:	4413      	add	r3, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff32 	bl	8001f34 <loadOctet>
 80020d0:	63b8      	str	r0, [r7, #56]	; 0x38
				//sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

				octet_count+=1;
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	3301      	adds	r3, #1
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 80020d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <streamGet+0xf6>
 80020de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dbed      	blt.n	80020c2 <streamGet+0xd2>
			}

			//If ax.25 buffer overflows or an octet was bad, this was a bad packet
			if((octet_count >= max_octets) || (good_octet!=1)){
 80020e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	429a      	cmp	r2, r3
 80020ec:	da02      	bge.n	80020f4 <streamGet+0x104>
 80020ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d00f      	beq.n	8002114 <streamGet+0x124>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 80020f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f6:	4937      	ldr	r1, [pc, #220]	; (80021d4 <streamGet+0x1e4>)
 80020f8:	4833      	ldr	r0, [pc, #204]	; (80021c8 <streamGet+0x1d8>)
 80020fa:	f003 ff83 	bl	8006004 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020fe:	4832      	ldr	r0, [pc, #200]	; (80021c8 <streamGet+0x1d8>)
 8002100:	f7fe f886 	bl	8000210 <strlen>
 8002104:	4603      	mov	r3, r0
 8002106:	b29a      	uxth	r2, r3
 8002108:	230a      	movs	r3, #10
 800210a:	492f      	ldr	r1, [pc, #188]	; (80021c8 <streamGet+0x1d8>)
 800210c:	4830      	ldr	r0, [pc, #192]	; (80021d0 <streamGet+0x1e0>)
 800210e:	f003 f850 	bl	80051b2 <HAL_UART_Transmit>
 8002112:	e046      	b.n	80021a2 <streamGet+0x1b2>
			}
			//
			else if(octet_count == 1){
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d12a      	bne.n	8002170 <streamGet+0x180>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 800211a:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <streamGet+0x1d8>)
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <streamGet+0x1e8>)
 800211e:	4615      	mov	r5, r2
 8002120:	461c      	mov	r4, r3
 8002122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002124:	6028      	str	r0, [r5, #0]
 8002126:	6069      	str	r1, [r5, #4]
 8002128:	60aa      	str	r2, [r5, #8]
 800212a:	60eb      	str	r3, [r5, #12]
 800212c:	cc03      	ldmia	r4!, {r0, r1}
 800212e:	6128      	str	r0, [r5, #16]
 8002130:	6169      	str	r1, [r5, #20]
 8002132:	8823      	ldrh	r3, [r4, #0]
 8002134:	78a2      	ldrb	r2, [r4, #2]
 8002136:	832b      	strh	r3, [r5, #24]
 8002138:	4613      	mov	r3, r2
 800213a:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800213c:	4822      	ldr	r0, [pc, #136]	; (80021c8 <streamGet+0x1d8>)
 800213e:	f7fe f867 	bl	8000210 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	230a      	movs	r3, #10
 8002148:	491f      	ldr	r1, [pc, #124]	; (80021c8 <streamGet+0x1d8>)
 800214a:	4821      	ldr	r0, [pc, #132]	; (80021d0 <streamGet+0x1e0>)
 800214c:	f003 f831 	bl	80051b2 <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 8002150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002152:	4922      	ldr	r1, [pc, #136]	; (80021dc <streamGet+0x1ec>)
 8002154:	481c      	ldr	r0, [pc, #112]	; (80021c8 <streamGet+0x1d8>)
 8002156:	f003 ff55 	bl	8006004 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800215a:	481b      	ldr	r0, [pc, #108]	; (80021c8 <streamGet+0x1d8>)
 800215c:	f7fe f858 	bl	8000210 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	b29a      	uxth	r2, r3
 8002164:	230a      	movs	r3, #10
 8002166:	4918      	ldr	r1, [pc, #96]	; (80021c8 <streamGet+0x1d8>)
 8002168:	4819      	ldr	r0, [pc, #100]	; (80021d0 <streamGet+0x1e0>)
 800216a:	f003 f822 	bl	80051b2 <HAL_UART_Transmit>
 800216e:	e018      	b.n	80021a2 <streamGet+0x1b2>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 8002170:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <streamGet+0x1d8>)
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <streamGet+0x1f0>)
 8002174:	4615      	mov	r5, r2
 8002176:	461c      	mov	r4, r3
 8002178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217a:	6028      	str	r0, [r5, #0]
 800217c:	6069      	str	r1, [r5, #4]
 800217e:	60aa      	str	r2, [r5, #8]
 8002180:	60eb      	str	r3, [r5, #12]
 8002182:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002184:	6128      	str	r0, [r5, #16]
 8002186:	6169      	str	r1, [r5, #20]
 8002188:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800218a:	480f      	ldr	r0, [pc, #60]	; (80021c8 <streamGet+0x1d8>)
 800218c:	f7fe f840 	bl	8000210 <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	b29a      	uxth	r2, r3
 8002194:	230a      	movs	r3, #10
 8002196:	490c      	ldr	r1, [pc, #48]	; (80021c8 <streamGet+0x1d8>)
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <streamGet+0x1e0>)
 800219a:	f003 f80a 	bl	80051b2 <HAL_UART_Transmit>

				return 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	e009      	b.n	80021b6 <streamGet+0x1c6>
	while(!changeMode){
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <streamGet+0x1f4>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	f083 0301 	eor.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f af28 	bne.w	8002002 <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3740      	adds	r7, #64	; 0x40
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bdb0      	pop	{r4, r5, r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000a18 	.word	0x20000a18
 80021c4:	20000008 	.word	0x20000008
 80021c8:	2000260c 	.word	0x2000260c
 80021cc:	08006c24 	.word	0x08006c24
 80021d0:	200042c8 	.word	0x200042c8
 80021d4:	08006c40 	.word	0x08006c40
 80021d8:	08006c64 	.word	0x08006c64
 80021dc:	08006c80 	.word	0x08006c80
 80021e0:	08006ca4 	.word	0x08006ca4
 80021e4:	20000a01 	.word	0x20000a01

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ec:	f000 fcb2 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f0:	f000 f81e 	bl	8002230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f4:	f000 f9a0 	bl	8002538 <MX_GPIO_Init>
  MX_DMA_Init();
 80021f8:	f000 f97e 	bl	80024f8 <MX_DMA_Init>
  MX_DAC_Init();
 80021fc:	f000 f886 	bl	800230c <MX_DAC_Init>
  MX_TIM2_Init();
 8002200:	f000 f8ae 	bl	8002360 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002204:	f000 f8f8 	bl	80023f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002208:	f000 f944 	bl	8002494 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800220c:	4806      	ldr	r0, [pc, #24]	; (8002228 <main+0x40>)
 800220e:	f002 fb5e 	bl	80048ce <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002212:	4806      	ldr	r0, [pc, #24]	; (800222c <main+0x44>)
 8002214:	f002 fbaa 	bl	800496c <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8002218:	f000 fa6e 	bl	80026f8 <uart_gpio_init>

	initProgram(false);
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff fc29 	bl	8001a74 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8002222:	f7fe fa39 	bl	8000698 <tx_rx>
 8002226:	e7fc      	b.n	8002222 <main+0x3a>
 8002228:	20004288 	.word	0x20004288
 800222c:	200031d0 	.word	0x200031d0

08002230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b094      	sub	sp, #80	; 0x50
 8002234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	2234      	movs	r2, #52	; 0x34
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fed7 	bl	8005ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002244:	f107 0308 	add.w	r3, r7, #8
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <SystemClock_Config+0xd4>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a29      	ldr	r2, [pc, #164]	; (8002304 <SystemClock_Config+0xd4>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <SystemClock_Config+0xd4>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002270:	2300      	movs	r3, #0
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <SystemClock_Config+0xd8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800227c:	4a22      	ldr	r2, [pc, #136]	; (8002308 <SystemClock_Config+0xd8>)
 800227e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <SystemClock_Config+0xd8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002290:	2301      	movs	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002298:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229a:	2302      	movs	r3, #2
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022a4:	2304      	movs	r3, #4
 80022a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80022a8:	235a      	movs	r3, #90	; 0x5a
 80022aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022b0:	2302      	movs	r3, #2
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022b4:	2302      	movs	r3, #2
 80022b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 f881 	bl	80043c4 <HAL_RCC_OscConfig>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80022c8:	f000 fa3e 	bl	8002748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022cc:	230f      	movs	r3, #15
 80022ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d0:	2302      	movs	r3, #2
 80022d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fdb0 	bl	8003e50 <HAL_RCC_ClockConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80022f6:	f000 fa27 	bl	8002748 <Error_Handler>
  }
}
 80022fa:	bf00      	nop
 80022fc:	3750      	adds	r7, #80	; 0x50
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000

0800230c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002312:	463b      	mov	r3, r7
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MX_DAC_Init+0x4c>)
 800231c:	4a0f      	ldr	r2, [pc, #60]	; (800235c <MX_DAC_Init+0x50>)
 800231e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <MX_DAC_Init+0x4c>)
 8002322:	f000 fdca 	bl	8002eba <HAL_DAC_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800232c:	f000 fa0c 	bl	8002748 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002330:	2324      	movs	r3, #36	; 0x24
 8002332:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <MX_DAC_Init+0x4c>)
 8002340:	f000 feeb 	bl	800311a <HAL_DAC_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800234a:	f000 f9fd 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20004274 	.word	0x20004274
 800235c:	40007400 	.word	0x40007400

08002360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002374:	463b      	mov	r3, r7
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <MX_TIM2_Init+0x94>)
 800237e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_TIM2_Init+0x94>)
 8002386:	2208      	movs	r2, #8
 8002388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <MX_TIM2_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_TIM2_Init+0x94>)
 8002392:	2263      	movs	r2, #99	; 0x63
 8002394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <MX_TIM2_Init+0x94>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <MX_TIM2_Init+0x94>)
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a2:	4814      	ldr	r0, [pc, #80]	; (80023f4 <MX_TIM2_Init+0x94>)
 80023a4:	f002 fa68 	bl	8004878 <HAL_TIM_Base_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80023ae:	f000 f9cb 	bl	8002748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	4619      	mov	r1, r3
 80023be:	480d      	ldr	r0, [pc, #52]	; (80023f4 <MX_TIM2_Init+0x94>)
 80023c0:	f002 fc00 	bl	8004bc4 <HAL_TIM_ConfigClockSource>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80023ca:	f000 f9bd 	bl	8002748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ce:	2320      	movs	r3, #32
 80023d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023d6:	463b      	mov	r3, r7
 80023d8:	4619      	mov	r1, r3
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <MX_TIM2_Init+0x94>)
 80023dc:	f002 fe0c 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80023e6:	f000 f9af 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20004288 	.word	0x20004288

080023f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_TIM3_Init+0x94>)
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <MX_TIM3_Init+0x98>)
 8002418:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <MX_TIM3_Init+0x94>)
 800241c:	2259      	movs	r2, #89	; 0x59
 800241e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <MX_TIM3_Init+0x94>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_TIM3_Init+0x94>)
 8002428:	f240 3241 	movw	r2, #833	; 0x341
 800242c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <MX_TIM3_Init+0x94>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <MX_TIM3_Init+0x94>)
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800243a:	4814      	ldr	r0, [pc, #80]	; (800248c <MX_TIM3_Init+0x94>)
 800243c:	f002 fa1c 	bl	8004878 <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002446:	f000 f97f 	bl	8002748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	4619      	mov	r1, r3
 8002456:	480d      	ldr	r0, [pc, #52]	; (800248c <MX_TIM3_Init+0x94>)
 8002458:	f002 fbb4 	bl	8004bc4 <HAL_TIM_ConfigClockSource>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002462:	f000 f971 	bl	8002748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <MX_TIM3_Init+0x94>)
 8002474:	f002 fdc0 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800247e:	f000 f963 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200031d0 	.word	0x200031d0
 8002490:	40000400 	.word	0x40000400

08002494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 800249a:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <MX_USART2_UART_Init+0x60>)
 800249c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024ba:	220c      	movs	r2, #12
 80024bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <MX_USART2_UART_Init+0x5c>)
 80024cc:	f002 fe24 	bl	8005118 <HAL_UART_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024d6:	f000 f937 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2026      	movs	r0, #38	; 0x26
 80024e0:	f000 fca7 	bl	8002e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024e4:	2026      	movs	r0, #38	; 0x26
 80024e6:	f000 fcc0 	bl	8002e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200042c8 	.word	0x200042c8
 80024f4:	40004400 	.word	0x40004400

080024f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_DMA_Init+0x3c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <MX_DMA_Init+0x3c>)
 8002508:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_DMA_Init+0x3c>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2010      	movs	r0, #16
 8002520:	f000 fc87 	bl	8002e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002524:	2010      	movs	r0, #16
 8002526:	f000 fca0 	bl	8002e6a <HAL_NVIC_EnableIRQ>

}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800

08002538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b45      	ldr	r3, [pc, #276]	; (8002668 <MX_GPIO_Init+0x130>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a44      	ldr	r2, [pc, #272]	; (8002668 <MX_GPIO_Init+0x130>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b42      	ldr	r3, [pc, #264]	; (8002668 <MX_GPIO_Init+0x130>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <MX_GPIO_Init+0x130>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a3d      	ldr	r2, [pc, #244]	; (8002668 <MX_GPIO_Init+0x130>)
 8002574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <MX_GPIO_Init+0x130>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <MX_GPIO_Init+0x130>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a36      	ldr	r2, [pc, #216]	; (8002668 <MX_GPIO_Init+0x130>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <MX_GPIO_Init+0x130>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <MX_GPIO_Init+0x130>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <MX_GPIO_Init+0x130>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <MX_GPIO_Init+0x130>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80025c4:	4829      	ldr	r0, [pc, #164]	; (800266c <MX_GPIO_Init+0x134>)
 80025c6:	f001 fc11 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2110      	movs	r1, #16
 80025ce:	4828      	ldr	r0, [pc, #160]	; (8002670 <MX_GPIO_Init+0x138>)
 80025d0:	f001 fc0c 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <MX_GPIO_Init+0x13c>)
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	4821      	ldr	r0, [pc, #132]	; (8002670 <MX_GPIO_Init+0x138>)
 80025ea:	f001 fa6d 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ee:	2301      	movs	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <MX_GPIO_Init+0x140>)
 80025f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	481a      	ldr	r0, [pc, #104]	; (800266c <MX_GPIO_Init+0x134>)
 8002602:	f001 fa61 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8002606:	f44f 7348 	mov.w	r3, #800	; 0x320
 800260a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4813      	ldr	r0, [pc, #76]	; (800266c <MX_GPIO_Init+0x134>)
 8002620:	f001 fa52 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8002624:	2310      	movs	r3, #16
 8002626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	480d      	ldr	r0, [pc, #52]	; (8002670 <MX_GPIO_Init+0x138>)
 800263c:	f001 fa44 	bl	8003ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2006      	movs	r0, #6
 8002646:	f000 fbf4 	bl	8002e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800264a:	2006      	movs	r0, #6
 800264c:	f000 fc0d 	bl	8002e6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	2028      	movs	r0, #40	; 0x28
 8002656:	f000 fbec 	bl	8002e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800265a:	2028      	movs	r0, #40	; 0x28
 800265c:	f000 fc05 	bl	8002e6a <HAL_NVIC_EnableIRQ>

}
 8002660:	bf00      	nop
 8002662:	3728      	adds	r7, #40	; 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020800 	.word	0x40020800
 8002674:	10210000 	.word	0x10210000
 8002678:	10110000 	.word	0x10110000

0800267c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 800268c:	f7ff faa0 	bl	8001bd0 <Tim3IT>
	else
		__NOP();
}
 8002690:	e000      	b.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8002692:	bf00      	nop
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200031d0 	.word	0x200031d0

080026a0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 80026b0:	f7ff fab4 	bl	8001c1c <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ba:	d103      	bne.n	80026c4 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_GPIO_EXTI_Callback+0x30>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 80026c2:	e000      	b.n	80026c6 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 80026c4:	bf00      	nop
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000a01 	.word	0x20000a01

080026d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_UART_RxCpltCallback+0x20>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 80026e6:	f7fe fdb3 	bl	8001250 <UART2_EXCEPTION_CALLBACK>
  }
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40004400 	.word	0x40004400

080026f8 <uart_gpio_init>:

void uart_gpio_init()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <uart_gpio_init+0x48>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <uart_gpio_init+0x48>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <uart_gpio_init+0x48>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800271a:	230c      	movs	r3, #12
 800271c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002722:	2301      	movs	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800272a:	2307      	movs	r3, #7
 800272c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4804      	ldr	r0, [pc, #16]	; (8002744 <uart_gpio_init+0x4c>)
 8002734:	f001 f9c8 	bl	8003ac8 <HAL_GPIO_Init>
}
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000

08002748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_MspInit+0x4c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_MspInit+0x4c>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_MspInit+0x4c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_MspInit+0x4c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_MspInit+0x4c>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_MspInit+0x4c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002796:	2007      	movs	r0, #7
 8002798:	f000 fb40 	bl	8002e1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2f      	ldr	r2, [pc, #188]	; (8002884 <HAL_DAC_MspInit+0xdc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d158      	bne.n	800287c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_DAC_MspInit+0xe0>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <HAL_DAC_MspInit+0xe0>)
 80027d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_DAC_MspInit+0xe0>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_DAC_MspInit+0xe0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a26      	ldr	r2, [pc, #152]	; (8002888 <HAL_DAC_MspInit+0xe0>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b24      	ldr	r3, [pc, #144]	; (8002888 <HAL_DAC_MspInit+0xe0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002802:	2310      	movs	r3, #16
 8002804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002806:	2303      	movs	r3, #3
 8002808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	481d      	ldr	r0, [pc, #116]	; (800288c <HAL_DAC_MspInit+0xe4>)
 8002816:	f001 f957 	bl	8003ac8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_DAC_MspInit+0xec>)
 800281e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002822:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002826:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 800283e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002842:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800284a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 800284e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002852:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002860:	480b      	ldr	r0, [pc, #44]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002862:	f000 fd31 	bl	80032c8 <HAL_DMA_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 800286c:	f7ff ff6c 	bl	8002748 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_DAC_MspInit+0xe8>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800287c:	bf00      	nop
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40007400 	.word	0x40007400
 8002888:	40023800 	.word	0x40023800
 800288c:	40020000 	.word	0x40020000
 8002890:	20003210 	.word	0x20003210
 8002894:	40026088 	.word	0x40026088

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_TIM_Base_MspInit+0x70>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <HAL_TIM_Base_MspInit+0x70>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_TIM_Base_MspInit+0x70>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028c6:	e01a      	b.n	80028fe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_TIM_Base_MspInit+0x74>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d115      	bne.n	80028fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <HAL_TIM_Base_MspInit+0x70>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_TIM_Base_MspInit+0x70>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_TIM_Base_MspInit+0x70>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	201d      	movs	r0, #29
 80028f4:	f000 fa9d 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028f8:	201d      	movs	r0, #29
 80028fa:	f000 fab6 	bl	8002e6a <HAL_NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40000400 	.word	0x40000400

08002910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_UART_MspInit+0x94>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d133      	bne.n	800299a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_UART_MspInit+0x98>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_UART_MspInit+0x98>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_UART_MspInit+0x98>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_UART_MspInit+0x98>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_UART_MspInit+0x98>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_UART_MspInit+0x98>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800296a:	230c      	movs	r3, #12
 800296c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800297a:	2307      	movs	r3, #7
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4619      	mov	r1, r3
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <HAL_UART_MspInit+0x9c>)
 8002986:	f001 f89f 	bl	8003ac8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	2026      	movs	r0, #38	; 0x26
 8002990:	f000 fa4f 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002994:	2026      	movs	r0, #38	; 0x26
 8002996:	f000 fa68 	bl	8002e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3728      	adds	r7, #40	; 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40004400 	.word	0x40004400
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000

080029b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <MemManage_Handler+0x4>

080029ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <BusFault_Handler+0x4>

080029d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <UsageFault_Handler+0x4>

080029d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a04:	f000 f8f8 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a10:	2001      	movs	r0, #1
 8002a12:	f001 fa05 	bl	8003e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <DMA1_Stream5_IRQHandler+0x10>)
 8002a22:	f000 fde9 	bl	80035f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20003210 	.word	0x20003210

08002a30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <TIM3_IRQHandler+0x10>)
 8002a36:	f001 ffbd 	bl	80049b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200031d0 	.word	0x200031d0

08002a44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <USART2_IRQHandler+0x10>)
 8002a4a:	f002 fca1 	bl	8005390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200042c8 	.word	0x200042c8

08002a58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a60:	f001 f9de 	bl	8003e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <_sbrk+0x5c>)
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <_sbrk+0x60>)
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <_sbrk+0x64>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <_sbrk+0x68>)
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d207      	bcs.n	8002aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a98:	f003 fa76 	bl	8005f88 <__errno>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	e009      	b.n	8002abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <_sbrk+0x64>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <_sbrk+0x64>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <_sbrk+0x64>)
 8002ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aba:	68fb      	ldr	r3, [r7, #12]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20020000 	.word	0x20020000
 8002ac8:	00000400 	.word	0x00000400
 8002acc:	20000a0c 	.word	0x20000a0c
 8002ad0:	20005310 	.word	0x20005310

08002ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <SystemInit+0x28>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <SystemInit+0x28>)
 8002ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <SystemInit+0x28>)
 8002aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aee:	609a      	str	r2, [r3, #8]
#endif
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b06:	e003      	b.n	8002b10 <LoopCopyDataInit>

08002b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b0e:	3104      	adds	r1, #4

08002b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b10:	480b      	ldr	r0, [pc, #44]	; (8002b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b18:	d3f6      	bcc.n	8002b08 <CopyDataInit>
  ldr  r2, =_sbss
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b1c:	e002      	b.n	8002b24 <LoopFillZerobss>

08002b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b20:	f842 3b04 	str.w	r3, [r2], #4

08002b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b28:	d3f9      	bcc.n	8002b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b2a:	f7ff ffd3 	bl	8002ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2e:	f003 fa31 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b32:	f7ff fb59 	bl	80021e8 <main>
  bx  lr    
 8002b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b3c:	08006d24 	.word	0x08006d24
  ldr  r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b44:	200009e0 	.word	0x200009e0
  ldr  r2, =_sbss
 8002b48:	200009e0 	.word	0x200009e0
  ldr  r3, = _ebss
 8002b4c:	20005310 	.word	0x20005310

08002b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <ADC_IRQHandler>
	...

08002b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_Init+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_Init+0x40>)
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_Init+0x40>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_Init+0x40>)
 8002b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_Init+0x40>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <HAL_Init+0x40>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 f94d 	bl	8002e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f000 f808 	bl	8002b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b88:	f7ff fde6 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00

08002b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_InitTick+0x54>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_InitTick+0x58>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f973 	bl	8002ea2 <HAL_SYSTICK_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d80a      	bhi.n	8002be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f000 f92d 	bl	8002e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_InitTick+0x5c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000970 	.word	0x20000970
 8002bf0:	20000978 	.word	0x20000978
 8002bf4:	20000974 	.word	0x20000974

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000978 	.word	0x20000978
 8002c1c:	20005308 	.word	0x20005308

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20005308 	.word	0x20005308

08002c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	60d3      	str	r3, [r2, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <__NVIC_GetPriorityGrouping+0x18>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0307 	and.w	r3, r3, #7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db0b      	blt.n	8002cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4907      	ldr	r1, [pc, #28]	; (8002cd4 <__NVIC_EnableIRQ+0x38>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db10      	blt.n	8002d0c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4909      	ldr	r1, [pc, #36]	; (8002d18 <__NVIC_DisableIRQ+0x40>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfe:	3320      	adds	r3, #32
 8002d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db0a      	blt.n	8002d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	490c      	ldr	r1, [pc, #48]	; (8002d68 <__NVIC_SetPriority+0x4c>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d44:	e00a      	b.n	8002d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <__NVIC_SetPriority+0x50>)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3b04      	subs	r3, #4
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	440b      	add	r3, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f1c3 0307 	rsb	r3, r3, #7
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	bf28      	it	cs
 8002d8e:	2304      	movcs	r3, #4
 8002d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d902      	bls.n	8002da0 <NVIC_EncodePriority+0x30>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3b03      	subs	r3, #3
 8002d9e:	e000      	b.n	8002da2 <NVIC_EncodePriority+0x32>
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	401a      	ands	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	43d9      	mvns	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	4313      	orrs	r3, r2
         );
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d301      	bcc.n	8002dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00f      	b.n	8002e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <SysTick_Config+0x40>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df6:	210f      	movs	r1, #15
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f7ff ff8e 	bl	8002d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SysTick_Config+0x40>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SysTick_Config+0x40>)
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000e010 	.word	0xe000e010

08002e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff07 	bl	8002c38 <__NVIC_SetPriorityGrouping>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e44:	f7ff ff1c 	bl	8002c80 <__NVIC_GetPriorityGrouping>
 8002e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f7ff ff8e 	bl	8002d70 <NVIC_EncodePriority>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff5d 	bl	8002d1c <__NVIC_SetPriority>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff0f 	bl	8002c9c <__NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff1f 	bl	8002cd8 <__NVIC_DisableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff94 	bl	8002dd8 <SysTick_Config>
 8002eb0:	4603      	mov	r3, r0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e014      	b.n	8002ef6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff fc63 	bl	80027a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	795b      	ldrb	r3, [r3, #5]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_DAC_Start_DMA+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e08e      	b.n	800303c <HAL_DAC_Start_DMA+0x13c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2202      	movs	r2, #2
 8002f28:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d12a      	bne.n	8002f86 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_DAC_Start_DMA+0x144>)
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <HAL_DAC_Start_DMA+0x148>)
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a41      	ldr	r2, [pc, #260]	; (800304c <HAL_DAC_Start_DMA+0x14c>)
 8002f46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f56:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d009      	beq.n	8002f72 <HAL_DAC_Start_DMA+0x72>
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d00c      	beq.n	8002f7c <HAL_DAC_Start_DMA+0x7c>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d000      	beq.n	8002f68 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002f66:	e039      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	617b      	str	r3, [r7, #20]
        break;
 8002f70:	e034      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	617b      	str	r3, [r7, #20]
        break;
 8002f7a:	e02f      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3310      	adds	r3, #16
 8002f82:	617b      	str	r3, [r7, #20]
        break;
 8002f84:	e02a      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a31      	ldr	r2, [pc, #196]	; (8003050 <HAL_DAC_Start_DMA+0x150>)
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_DAC_Start_DMA+0x154>)
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_DAC_Start_DMA+0x158>)
 8002f9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d009      	beq.n	8002fc8 <HAL_DAC_Start_DMA+0xc8>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_DAC_Start_DMA+0xd2>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d000      	beq.n	8002fbe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002fbc:	e00e      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	617b      	str	r3, [r7, #20]
        break;
 8002fc6:	e009      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	617b      	str	r3, [r7, #20]
        break;
 8002fd0:	e004      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	617b      	str	r3, [r7, #20]
        break;
 8002fda:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6898      	ldr	r0, [r3, #8]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	f000 fa12 	bl	8003424 <HAL_DMA_Start_IT>
 8003000:	e00e      	b.n	8003020 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003010:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68d8      	ldr	r0, [r3, #12]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	f000 fa02 	bl	8003424 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	080031b5 	.word	0x080031b5
 8003048:	080031d7 	.word	0x080031d7
 800304c:	080031f3 	.word	0x080031f3
 8003050:	0800325d 	.word	0x0800325d
 8003054:	0800327f 	.word	0x0800327f
 8003058:	0800329b 	.word	0x0800329b

0800305c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	400a      	ands	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	400a      	ands	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa14 	bl	80034d4 <HAL_DMA_Abort>
 80030ac:	4603      	mov	r3, r0
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e006      	b.n	80030c0 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fa0c 	bl	80034d4 <HAL_DMA_Abort>
 80030bc:	4603      	mov	r3, r0
 80030be:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2204      	movs	r2, #4
 80030ca:	711a      	strb	r2, [r3, #4]
 80030cc:	e002      	b.n	80030d4 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800311a:	b480      	push	{r7}
 800311c:	b087      	sub	sp, #28
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	795b      	ldrb	r3, [r3, #5]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_DAC_ConfigChannel+0x20>
 8003136:	2302      	movs	r3, #2
 8003138:	e036      	b.n	80031a8 <HAL_DAC_ConfigChannel+0x8e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2202      	movs	r2, #2
 8003144:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800314e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	22c0      	movs	r2, #192	; 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43da      	mvns	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	400a      	ands	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff ff8b 	bl	80030de <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	711a      	strb	r2, [r3, #4]
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff84 	bl	80030f2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f043 0204 	orr.w	r2, r3, #4
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff ff7a 	bl	8003106 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	711a      	strb	r2, [r3, #4]
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff ffd8 	bl	8003220 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	711a      	strb	r2, [r3, #4]
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff ffd1 	bl	8003234 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ffc7 	bl	8003248 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	711a      	strb	r2, [r3, #4]
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff fca4 	bl	8002c20 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e099      	b.n	8003418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003304:	e00f      	b.n	8003326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003306:	f7ff fc8b 	bl	8002c20 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b05      	cmp	r3, #5
 8003312:	d908      	bls.n	8003326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e078      	b.n	8003418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e8      	bne.n	8003306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_DMA_Init+0x158>)
 8003340:	4013      	ands	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	4313      	orrs	r3, r2
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d117      	bne.n	80033ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fb01 	bl	80039d4 <DMA_CheckFifoParam>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033e6:	2301      	movs	r3, #1
 80033e8:	e016      	b.n	8003418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fab8 	bl	8003968 <DMA_CalcBaseAndBitshift>
 80033f8:	4603      	mov	r3, r0
 80033fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	223f      	movs	r2, #63	; 0x3f
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	f010803f 	.word	0xf010803f

08003424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_DMA_Start_IT+0x26>
 8003446:	2302      	movs	r3, #2
 8003448:	e040      	b.n	80034cc <HAL_DMA_Start_IT+0xa8>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d12f      	bne.n	80034be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa4a 	bl	800390c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0216 	orr.w	r2, r2, #22
 8003492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e005      	b.n	80034ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034e2:	f7ff fb9d 	bl	8002c20 <HAL_GetTick>
 80034e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d008      	beq.n	8003506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e052      	b.n	80035ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0216 	bic.w	r2, r2, #22
 8003514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_DMA_Abort+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0208 	bic.w	r2, r2, #8
 8003544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003556:	e013      	b.n	8003580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003558:	f7ff fb62 	bl	8002c20 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b05      	cmp	r3, #5
 8003564:	d90c      	bls.n	8003580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2203      	movs	r2, #3
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e015      	b.n	80035ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e4      	bne.n	8003558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	223f      	movs	r2, #63	; 0x3f
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00c      	b.n	80035ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2205      	movs	r2, #5
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003604:	4b92      	ldr	r3, [pc, #584]	; (8003850 <HAL_DMA_IRQHandler+0x258>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a92      	ldr	r2, [pc, #584]	; (8003854 <HAL_DMA_IRQHandler+0x25c>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0a9b      	lsrs	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	2208      	movs	r2, #8
 8003624:	409a      	lsls	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01a      	beq.n	8003664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	2208      	movs	r2, #8
 8003652:	409a      	lsls	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	2201      	movs	r2, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2201      	movs	r2, #1
 8003688:	409a      	lsls	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f043 0202 	orr.w	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	2204      	movs	r2, #4
 80036a0:	409a      	lsls	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2204      	movs	r2, #4
 80036be:	409a      	lsls	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2210      	movs	r2, #16
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d043      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d03c      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	2210      	movs	r2, #16
 80036f4:	409a      	lsls	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d018      	beq.n	800373a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d024      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
 8003726:	e01f      	b.n	8003768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e016      	b.n	8003768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0208 	bic.w	r2, r2, #8
 8003756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	2220      	movs	r2, #32
 800376e:	409a      	lsls	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 808e 	beq.w	8003896 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8086 	beq.w	8003896 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	2220      	movs	r2, #32
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d136      	bne.n	8003810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0216 	bic.w	r2, r2, #22
 80037b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x1da>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0208 	bic.w	r2, r2, #8
 80037e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	223f      	movs	r2, #63	; 0x3f
 80037e8:	409a      	lsls	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	2b00      	cmp	r3, #0
 8003804:	d07d      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
        }
        return;
 800380e:	e078      	b.n	8003902 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01c      	beq.n	8003858 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d108      	bne.n	800383e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	2b00      	cmp	r3, #0
 8003832:	d030      	beq.n	8003896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
 800383c:	e02b      	b.n	8003896 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d027      	beq.n	8003896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
 800384e:	e022      	b.n	8003896 <HAL_DMA_IRQHandler+0x29e>
 8003850:	20000970 	.word	0x20000970
 8003854:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10f      	bne.n	8003886 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0210 	bic.w	r2, r2, #16
 8003874:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	2b00      	cmp	r3, #0
 800389c:	d032      	beq.n	8003904 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d022      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2205      	movs	r2, #5
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d307      	bcc.n	80038de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f2      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x2ca>
 80038dc:	e000      	b.n	80038e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
 8003900:	e000      	b.n	8003904 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003902:	bf00      	nop
    }
  }
}
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop

0800390c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003928:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d108      	bne.n	800394c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800394a:	e007      	b.n	800395c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	3b10      	subs	r3, #16
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <DMA_CalcBaseAndBitshift+0x64>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d909      	bls.n	80039aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	659a      	str	r2, [r3, #88]	; 0x58
 80039a8:	e007      	b.n	80039ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	aaaaaaab 	.word	0xaaaaaaab
 80039d0:	08006cd8 	.word	0x08006cd8

080039d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11f      	bne.n	8003a2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d855      	bhi.n	8003aa0 <DMA_CheckFifoParam+0xcc>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <DMA_CheckFifoParam+0x28>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a1f 	.word	0x08003a1f
 8003a04:	08003a0d 	.word	0x08003a0d
 8003a08:	08003aa1 	.word	0x08003aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d045      	beq.n	8003aa4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e042      	b.n	8003aa4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a26:	d13f      	bne.n	8003aa8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2c:	e03c      	b.n	8003aa8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a36:	d121      	bne.n	8003a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d836      	bhi.n	8003aac <DMA_CheckFifoParam+0xd8>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <DMA_CheckFifoParam+0x70>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a5b 	.word	0x08003a5b
 8003a4c:	08003a55 	.word	0x08003a55
 8003a50:	08003a6d 	.word	0x08003a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e02f      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d024      	beq.n	8003ab0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6a:	e021      	b.n	8003ab0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a74:	d11e      	bne.n	8003ab4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a7a:	e01b      	b.n	8003ab4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d902      	bls.n	8003a88 <DMA_CheckFifoParam+0xb4>
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d003      	beq.n	8003a8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a86:	e018      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e015      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9e:	e00b      	b.n	8003ab8 <DMA_CheckFifoParam+0xe4>
      break;
 8003aa0:	bf00      	nop
 8003aa2:	e00a      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      break;
 8003aa4:	bf00      	nop
 8003aa6:	e008      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      break;
 8003aa8:	bf00      	nop
 8003aaa:	e006      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      break;
 8003aac:	bf00      	nop
 8003aae:	e004      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      break;
 8003ab0:	bf00      	nop
 8003ab2:	e002      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      break;   
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <DMA_CheckFifoParam+0xe6>
      break;
 8003ab8:	bf00      	nop
    }
  } 
  
  return status; 
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e165      	b.n	8003db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 8154 	bne.w	8003daa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d00b      	beq.n	8003b22 <HAL_GPIO_Init+0x5a>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d007      	beq.n	8003b22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b16:	2b11      	cmp	r3, #17
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b12      	cmp	r3, #18
 8003b20:	d130      	bne.n	8003b84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0201 	and.w	r2, r3, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0xfc>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b12      	cmp	r3, #18
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80ae 	beq.w	8003daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_GPIO_Init+0x2fc>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_GPIO_Init+0x2fc>)
 8003c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5e:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_GPIO_Init+0x2fc>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c6a:	4a57      	ldr	r2, [pc, #348]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4e      	ldr	r2, [pc, #312]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d025      	beq.n	8003ce2 <HAL_GPIO_Init+0x21a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4d      	ldr	r2, [pc, #308]	; (8003dd0 <HAL_GPIO_Init+0x308>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <HAL_GPIO_Init+0x216>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4c      	ldr	r2, [pc, #304]	; (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d019      	beq.n	8003cda <HAL_GPIO_Init+0x212>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4b      	ldr	r2, [pc, #300]	; (8003dd8 <HAL_GPIO_Init+0x310>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0x20e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4a      	ldr	r2, [pc, #296]	; (8003ddc <HAL_GPIO_Init+0x314>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_Init+0x20a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a49      	ldr	r2, [pc, #292]	; (8003de0 <HAL_GPIO_Init+0x318>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x206>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a48      	ldr	r2, [pc, #288]	; (8003de4 <HAL_GPIO_Init+0x31c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_Init+0x202>
 8003cc6:	2306      	movs	r3, #6
 8003cc8:	e00c      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cca:	2307      	movs	r3, #7
 8003ccc:	e00a      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cce:	2305      	movs	r3, #5
 8003cd0:	e008      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	e006      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e004      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e002      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_GPIO_Init+0x21c>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f002 0203 	and.w	r2, r2, #3
 8003cea:	0092      	lsls	r2, r2, #2
 8003cec:	4093      	lsls	r3, r2
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf4:	4934      	ldr	r1, [pc, #208]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d02:	4b39      	ldr	r3, [pc, #228]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d26:	4a30      	ldr	r2, [pc, #192]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d50:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d56:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003da4:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3301      	adds	r3, #1
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b0f      	cmp	r3, #15
 8003db4:	f67f ae96 	bls.w	8003ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003db8:	bf00      	nop
 8003dba:	3724      	adds	r7, #36	; 0x24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40020000 	.word	0x40020000
 8003dd0:	40020400 	.word	0x40020400
 8003dd4:	40020800 	.word	0x40020800
 8003dd8:	40020c00 	.word	0x40020c00
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40021400 	.word	0x40021400
 8003de4:	40021800 	.word	0x40021800
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dfc:	787b      	ldrb	r3, [r7, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e08:	e003      	b.n	8003e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	041a      	lsls	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	619a      	str	r2, [r3, #24]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e36:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fc2e 	bl	80026a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cc      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90c      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e067      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4934      	ldr	r1, [pc, #208]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fe fe6e 	bl	8002c20 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fe fe6a 	bl	8002c20 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e04f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b25      	ldr	r3, [pc, #148]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d20c      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f855 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	5cd3      	ldrb	r3, [r2, r3]
 8003fea:	fa21 f303 	lsr.w	r3, r1, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fdce 	bl	8002b98 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	08006cc0 	.word	0x08006cc0
 8004014:	20000970 	.word	0x20000970
 8004018:	20000974 	.word	0x20000974

0800401c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCC_GetHCLKFreq+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000970 	.word	0x20000970

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004038:	f7ff fff0 	bl	800401c <HAL_RCC_GetHCLKFreq>
 800403c:	4601      	mov	r1, r0
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0a9b      	lsrs	r3, r3, #10
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4a03      	ldr	r2, [pc, #12]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800404a:	5cd3      	ldrb	r3, [r2, r3]
 800404c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800
 8004058:	08006cd0 	.word	0x08006cd0

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004060:	f7ff ffdc 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004064:	4601      	mov	r1, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0b5b      	lsrs	r3, r3, #13
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4a03      	ldr	r2, [pc, #12]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	08006cd0 	.word	0x08006cd0

08004084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800409e:	4bc6      	ldr	r3, [pc, #792]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	f200 817e 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x324>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040e9 	.word	0x080040e9
 80040b8:	080043a9 	.word	0x080043a9
 80040bc:	080043a9 	.word	0x080043a9
 80040c0:	080043a9 	.word	0x080043a9
 80040c4:	080040ef 	.word	0x080040ef
 80040c8:	080043a9 	.word	0x080043a9
 80040cc:	080043a9 	.word	0x080043a9
 80040d0:	080043a9 	.word	0x080043a9
 80040d4:	080040f5 	.word	0x080040f5
 80040d8:	080043a9 	.word	0x080043a9
 80040dc:	080043a9 	.word	0x080043a9
 80040e0:	080043a9 	.word	0x080043a9
 80040e4:	08004251 	.word	0x08004251
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4bb4      	ldr	r3, [pc, #720]	; (80043bc <HAL_RCC_GetSysClockFreq+0x338>)
 80040ea:	613b      	str	r3, [r7, #16]
       break;
 80040ec:	e15f      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ee:	4bb4      	ldr	r3, [pc, #720]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80040f0:	613b      	str	r3, [r7, #16]
      break;
 80040f2:	e15c      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f4:	4bb0      	ldr	r3, [pc, #704]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040fc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040fe:	4bae      	ldr	r3, [pc, #696]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04a      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410a:	4bab      	ldr	r3, [pc, #684]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	f04f 0400 	mov.w	r4, #0
 8004114:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	ea03 0501 	and.w	r5, r3, r1
 8004120:	ea04 0602 	and.w	r6, r4, r2
 8004124:	4629      	mov	r1, r5
 8004126:	4632      	mov	r2, r6
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	f04f 0400 	mov.w	r4, #0
 8004130:	0154      	lsls	r4, r2, #5
 8004132:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004136:	014b      	lsls	r3, r1, #5
 8004138:	4619      	mov	r1, r3
 800413a:	4622      	mov	r2, r4
 800413c:	1b49      	subs	r1, r1, r5
 800413e:	eb62 0206 	sbc.w	r2, r2, r6
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	f04f 0400 	mov.w	r4, #0
 800414a:	0194      	lsls	r4, r2, #6
 800414c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004150:	018b      	lsls	r3, r1, #6
 8004152:	1a5b      	subs	r3, r3, r1
 8004154:	eb64 0402 	sbc.w	r4, r4, r2
 8004158:	f04f 0100 	mov.w	r1, #0
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	00e2      	lsls	r2, r4, #3
 8004162:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004166:	00d9      	lsls	r1, r3, #3
 8004168:	460b      	mov	r3, r1
 800416a:	4614      	mov	r4, r2
 800416c:	195b      	adds	r3, r3, r5
 800416e:	eb44 0406 	adc.w	r4, r4, r6
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	0262      	lsls	r2, r4, #9
 800417c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004180:	0259      	lsls	r1, r3, #9
 8004182:	460b      	mov	r3, r1
 8004184:	4614      	mov	r4, r2
 8004186:	4618      	mov	r0, r3
 8004188:	4621      	mov	r1, r4
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f04f 0400 	mov.w	r4, #0
 8004190:	461a      	mov	r2, r3
 8004192:	4623      	mov	r3, r4
 8004194:	f7fc f894 	bl	80002c0 <__aeabi_uldivmod>
 8004198:	4603      	mov	r3, r0
 800419a:	460c      	mov	r4, r1
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e049      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a0:	4b85      	ldr	r3, [pc, #532]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	099b      	lsrs	r3, r3, #6
 80041a6:	f04f 0400 	mov.w	r4, #0
 80041aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	ea03 0501 	and.w	r5, r3, r1
 80041b6:	ea04 0602 	and.w	r6, r4, r2
 80041ba:	4629      	mov	r1, r5
 80041bc:	4632      	mov	r2, r6
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	f04f 0400 	mov.w	r4, #0
 80041c6:	0154      	lsls	r4, r2, #5
 80041c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041cc:	014b      	lsls	r3, r1, #5
 80041ce:	4619      	mov	r1, r3
 80041d0:	4622      	mov	r2, r4
 80041d2:	1b49      	subs	r1, r1, r5
 80041d4:	eb62 0206 	sbc.w	r2, r2, r6
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	f04f 0400 	mov.w	r4, #0
 80041e0:	0194      	lsls	r4, r2, #6
 80041e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041e6:	018b      	lsls	r3, r1, #6
 80041e8:	1a5b      	subs	r3, r3, r1
 80041ea:	eb64 0402 	sbc.w	r4, r4, r2
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	00e2      	lsls	r2, r4, #3
 80041f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041fc:	00d9      	lsls	r1, r3, #3
 80041fe:	460b      	mov	r3, r1
 8004200:	4614      	mov	r4, r2
 8004202:	195b      	adds	r3, r3, r5
 8004204:	eb44 0406 	adc.w	r4, r4, r6
 8004208:	f04f 0100 	mov.w	r1, #0
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	02a2      	lsls	r2, r4, #10
 8004212:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004216:	0299      	lsls	r1, r3, #10
 8004218:	460b      	mov	r3, r1
 800421a:	4614      	mov	r4, r2
 800421c:	4618      	mov	r0, r3
 800421e:	4621      	mov	r1, r4
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f04f 0400 	mov.w	r4, #0
 8004226:	461a      	mov	r2, r3
 8004228:	4623      	mov	r3, r4
 800422a:	f7fc f849 	bl	80002c0 <__aeabi_uldivmod>
 800422e:	4603      	mov	r3, r0
 8004230:	460c      	mov	r4, r1
 8004232:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004234:	4b60      	ldr	r3, [pc, #384]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	3301      	adds	r3, #1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	613b      	str	r3, [r7, #16]
      break;
 800424e:	e0ae      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425a:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d04a      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b54      	ldr	r3, [pc, #336]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	f04f 0400 	mov.w	r4, #0
 8004270:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	ea03 0501 	and.w	r5, r3, r1
 800427c:	ea04 0602 	and.w	r6, r4, r2
 8004280:	4629      	mov	r1, r5
 8004282:	4632      	mov	r2, r6
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	f04f 0400 	mov.w	r4, #0
 800428c:	0154      	lsls	r4, r2, #5
 800428e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004292:	014b      	lsls	r3, r1, #5
 8004294:	4619      	mov	r1, r3
 8004296:	4622      	mov	r2, r4
 8004298:	1b49      	subs	r1, r1, r5
 800429a:	eb62 0206 	sbc.w	r2, r2, r6
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	0194      	lsls	r4, r2, #6
 80042a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042ac:	018b      	lsls	r3, r1, #6
 80042ae:	1a5b      	subs	r3, r3, r1
 80042b0:	eb64 0402 	sbc.w	r4, r4, r2
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	00e2      	lsls	r2, r4, #3
 80042be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042c2:	00d9      	lsls	r1, r3, #3
 80042c4:	460b      	mov	r3, r1
 80042c6:	4614      	mov	r4, r2
 80042c8:	195b      	adds	r3, r3, r5
 80042ca:	eb44 0406 	adc.w	r4, r4, r6
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	0262      	lsls	r2, r4, #9
 80042d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042dc:	0259      	lsls	r1, r3, #9
 80042de:	460b      	mov	r3, r1
 80042e0:	4614      	mov	r4, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	4621      	mov	r1, r4
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	461a      	mov	r2, r3
 80042ee:	4623      	mov	r3, r4
 80042f0:	f7fb ffe6 	bl	80002c0 <__aeabi_uldivmod>
 80042f4:	4603      	mov	r3, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e049      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fc:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	099b      	lsrs	r3, r3, #6
 8004302:	f04f 0400 	mov.w	r4, #0
 8004306:	f240 11ff 	movw	r1, #511	; 0x1ff
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	ea03 0501 	and.w	r5, r3, r1
 8004312:	ea04 0602 	and.w	r6, r4, r2
 8004316:	4629      	mov	r1, r5
 8004318:	4632      	mov	r2, r6
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	f04f 0400 	mov.w	r4, #0
 8004322:	0154      	lsls	r4, r2, #5
 8004324:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004328:	014b      	lsls	r3, r1, #5
 800432a:	4619      	mov	r1, r3
 800432c:	4622      	mov	r2, r4
 800432e:	1b49      	subs	r1, r1, r5
 8004330:	eb62 0206 	sbc.w	r2, r2, r6
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	0194      	lsls	r4, r2, #6
 800433e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004342:	018b      	lsls	r3, r1, #6
 8004344:	1a5b      	subs	r3, r3, r1
 8004346:	eb64 0402 	sbc.w	r4, r4, r2
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	00e2      	lsls	r2, r4, #3
 8004354:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004358:	00d9      	lsls	r1, r3, #3
 800435a:	460b      	mov	r3, r1
 800435c:	4614      	mov	r4, r2
 800435e:	195b      	adds	r3, r3, r5
 8004360:	eb44 0406 	adc.w	r4, r4, r6
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	02a2      	lsls	r2, r4, #10
 800436e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004372:	0299      	lsls	r1, r3, #10
 8004374:	460b      	mov	r3, r1
 8004376:	4614      	mov	r4, r2
 8004378:	4618      	mov	r0, r3
 800437a:	4621      	mov	r1, r4
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f04f 0400 	mov.w	r4, #0
 8004382:	461a      	mov	r2, r3
 8004384:	4623      	mov	r3, r4
 8004386:	f7fb ff9b 	bl	80002c0 <__aeabi_uldivmod>
 800438a:	4603      	mov	r3, r0
 800438c:	460c      	mov	r4, r1
 800438e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	0f1b      	lsrs	r3, r3, #28
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	613b      	str	r3, [r7, #16]
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_RCC_GetSysClockFreq+0x338>)
 80043aa:	613b      	str	r3, [r7, #16]
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	693b      	ldr	r3, [r7, #16]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8083 	beq.w	80044e4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043de:	4b95      	ldr	r3, [pc, #596]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d019      	beq.n	800441e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043ea:	4b92      	ldr	r3, [pc, #584]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d106      	bne.n	8004404 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043f6:	4b8f      	ldr	r3, [pc, #572]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d00c      	beq.n	800441e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004404:	4b8b      	ldr	r3, [pc, #556]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d112      	bne.n	8004436 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004410:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441c:	d10b      	bne.n	8004436 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441e:	4b85      	ldr	r3, [pc, #532]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d05b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x11e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d157      	bne.n	80044e2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e216      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x8a>
 8004440:	4b7c      	ldr	r3, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7b      	ldr	r2, [pc, #492]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e01d      	b.n	800448a <HAL_RCC_OscConfig+0xc6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004456:	d10c      	bne.n	8004472 <HAL_RCC_OscConfig+0xae>
 8004458:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 800445e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	4b73      	ldr	r3, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a72      	ldr	r2, [pc, #456]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	e00b      	b.n	800448a <HAL_RCC_OscConfig+0xc6>
 8004472:	4b70      	ldr	r3, [pc, #448]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6f      	ldr	r2, [pc, #444]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d013      	beq.n	80044ba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fe fbc5 	bl	8002c20 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449a:	f7fe fbc1 	bl	8002c20 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	; 0x64
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e1db      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ac:	4b61      	ldr	r3, [pc, #388]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0xd6>
 80044b8:	e014      	b.n	80044e4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fe fbb1 	bl	8002c20 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c2:	f7fe fbad 	bl	8002c20 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1c7      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d4:	4b57      	ldr	r3, [pc, #348]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0xfe>
 80044e0:	e000      	b.n	80044e4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d06f      	beq.n	80045d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044f0:	4b50      	ldr	r3, [pc, #320]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044fc:	4b4d      	ldr	r3, [pc, #308]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004504:	2b08      	cmp	r3, #8
 8004506:	d105      	bne.n	8004514 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004508:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004514:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d11c      	bne.n	800455a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004520:	4b44      	ldr	r3, [pc, #272]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d116      	bne.n	800455a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452c:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_OscConfig+0x180>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d001      	beq.n	8004544 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e18f      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4938      	ldr	r1, [pc, #224]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004558:	e03a      	b.n	80045d0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004562:	4b35      	ldr	r3, [pc, #212]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fe fb5a 	bl	8002c20 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004570:	f7fe fb56 	bl	8002c20 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e170      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b29      	ldr	r3, [pc, #164]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4925      	ldr	r1, [pc, #148]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a4:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_OscConfig+0x274>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fe fb39 	bl	8002c20 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fe fb35 	bl	8002c20 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e14f      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d037      	beq.n	800464c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d016      	beq.n	8004612 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e4:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_RCC_OscConfig+0x278>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fe fb19 	bl	8002c20 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fe fb15 	bl	8002c20 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e12f      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x270>)
 8004606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x22e>
 8004610:	e01c      	b.n	800464c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_RCC_OscConfig+0x278>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fe fb02 	bl	8002c20 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461e:	e00f      	b.n	8004640 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004620:	f7fe fafe 	bl	8002c20 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d908      	bls.n	8004640 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e118      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	42470000 	.word	0x42470000
 800463c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	4b8a      	ldr	r3, [pc, #552]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e9      	bne.n	8004620 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8097 	beq.w	8004788 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b83      	ldr	r3, [pc, #524]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	4b7f      	ldr	r3, [pc, #508]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a7e      	ldr	r2, [pc, #504]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b7c      	ldr	r3, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b79      	ldr	r3, [pc, #484]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d118      	bne.n	80046c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004696:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a75      	ldr	r2, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a2:	f7fe fabd 	bl	8002c20 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7fe fab9 	bl	8002c20 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0d3      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	4b6c      	ldr	r3, [pc, #432]	; (8004870 <HAL_RCC_OscConfig+0x4ac>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x31a>
 80046d0:	4b66      	ldr	r3, [pc, #408]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a65      	ldr	r2, [pc, #404]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e01c      	b.n	8004718 <HAL_RCC_OscConfig+0x354>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0x33c>
 80046e6:	4b61      	ldr	r3, [pc, #388]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a60      	ldr	r2, [pc, #384]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b5e      	ldr	r3, [pc, #376]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a5d      	ldr	r2, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0x354>
 8004700:	4b5a      	ldr	r3, [pc, #360]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a59      	ldr	r2, [pc, #356]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	4b57      	ldr	r3, [pc, #348]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a56      	ldr	r2, [pc, #344]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004712:	f023 0304 	bic.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe fa7e 	bl	8002c20 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fe fa7a 	bl	8002c20 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e092      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	4b4b      	ldr	r3, [pc, #300]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ee      	beq.n	8004728 <HAL_RCC_OscConfig+0x364>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fe fa68 	bl	8002c20 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	e00a      	b.n	800476a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7fe fa64 	bl	8002c20 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e07c      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	4b40      	ldr	r3, [pc, #256]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ee      	bne.n	8004754 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	4a3a      	ldr	r2, [pc, #232]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d068      	beq.n	8004862 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004790:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b08      	cmp	r3, #8
 800479a:	d060      	beq.n	800485e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d145      	bne.n	8004830 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a4:	4b33      	ldr	r3, [pc, #204]	; (8004874 <HAL_RCC_OscConfig+0x4b0>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fe fa39 	bl	8002c20 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fe fa35 	bl	8002c20 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e04f      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c4:	4b29      	ldr	r3, [pc, #164]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	019b      	lsls	r3, r3, #6
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	061b      	lsls	r3, r3, #24
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	071b      	lsls	r3, r3, #28
 80047fc:	491b      	ldr	r1, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <HAL_RCC_OscConfig+0x4b0>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fe fa0a 	bl	8002c20 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004810:	f7fe fa06 	bl	8002c20 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e020      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x44c>
 800482e:	e018      	b.n	8004862 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCC_OscConfig+0x4b0>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe f9f3 	bl	8002c20 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483e:	f7fe f9ef 	bl	8002c20 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e009      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_OscConfig+0x4a8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f0      	bne.n	800483e <HAL_RCC_OscConfig+0x47a>
 800485c:	e001      	b.n	8004862 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	40007000 	.word	0x40007000
 8004874:	42470060 	.word	0x42470060

08004878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e01d      	b.n	80048c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fffa 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 fa64 	bl	8004d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d007      	beq.n	8004900 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_TIM_Base_Stop+0x40>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	f240 4344 	movw	r3, #1092	; 0x444
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <HAL_TIM_Base_Stop+0x40>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b06      	cmp	r3, #6
 8004994:	d007      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d122      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d11b      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0202 	mvn.w	r2, #2
 80049e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9a5 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 80049fc:	e005      	b.n	8004a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f997 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f9a8 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d122      	bne.n	8004a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d11b      	bne.n	8004a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0204 	mvn.w	r2, #4
 8004a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f97b 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f96d 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f97e 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d122      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0208 	mvn.w	r2, #8
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f951 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f943 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f954 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d122      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d11b      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0210 	mvn.w	r2, #16
 8004adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f927 	bl	8004d46 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f919 	bl	8004d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f92a 	bl	8004d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0201 	mvn.w	r2, #1
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd fda2 	bl	800267c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	d10e      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	2b80      	cmp	r3, #128	; 0x80
 8004b52:	d107      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fad0 	bl	8005104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8ef 	bl	8004d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0220 	mvn.w	r2, #32
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa9a 	bl	80050f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_ConfigClockSource+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e0a6      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x166>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d067      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0x120>
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d80b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x6c>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d073      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0x140>
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d802      	bhi.n	8004c26 <HAL_TIM_ConfigClockSource+0x62>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d06f      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c24:	e078      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d06c      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0x140>
 8004c2a:	2b30      	cmp	r3, #48	; 0x30
 8004c2c:	d06a      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c2e:	e073      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c30:	2b70      	cmp	r3, #112	; 0x70
 8004c32:	d00d      	beq.n	8004c50 <HAL_TIM_ConfigClockSource+0x8c>
 8004c34:	2b70      	cmp	r3, #112	; 0x70
 8004c36:	d804      	bhi.n	8004c42 <HAL_TIM_ConfigClockSource+0x7e>
 8004c38:	2b50      	cmp	r3, #80	; 0x50
 8004c3a:	d033      	beq.n	8004ca4 <HAL_TIM_ConfigClockSource+0xe0>
 8004c3c:	2b60      	cmp	r3, #96	; 0x60
 8004c3e:	d041      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c40:	e06a      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c46:	d066      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x152>
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4c:	d017      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c4e:	e063      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6899      	ldr	r1, [r3, #8]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f000 f9aa 	bl	8004fb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
      break;
 8004c7c:	e04c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6899      	ldr	r1, [r3, #8]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f000 f993 	bl	8004fb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca0:	609a      	str	r2, [r3, #8]
      break;
 8004ca2:	e039      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f000 f907 	bl	8004ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2150      	movs	r1, #80	; 0x50
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f960 	bl	8004f82 <TIM_ITRx_SetConfig>
      break;
 8004cc2:	e029      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f000 f926 	bl	8004f22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2160      	movs	r1, #96	; 0x60
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f950 	bl	8004f82 <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e019      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f000 f8e7 	bl	8004ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2140      	movs	r1, #64	; 0x40
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 f940 	bl	8004f82 <TIM_ITRx_SetConfig>
      break;
 8004d02:	e009      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f000 f937 	bl	8004f82 <TIM_ITRx_SetConfig>
      break;
 8004d14:	e000      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a40      	ldr	r2, [pc, #256]	; (8004e98 <TIM_Base_SetConfig+0x114>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d00f      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3d      	ldr	r2, [pc, #244]	; (8004e9c <TIM_Base_SetConfig+0x118>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3c      	ldr	r2, [pc, #240]	; (8004ea0 <TIM_Base_SetConfig+0x11c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a3b      	ldr	r2, [pc, #236]	; (8004ea4 <TIM_Base_SetConfig+0x120>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a3a      	ldr	r2, [pc, #232]	; (8004ea8 <TIM_Base_SetConfig+0x124>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d108      	bne.n	8004dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2f      	ldr	r2, [pc, #188]	; (8004e98 <TIM_Base_SetConfig+0x114>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02b      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de4:	d027      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2c      	ldr	r2, [pc, #176]	; (8004e9c <TIM_Base_SetConfig+0x118>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d023      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <TIM_Base_SetConfig+0x11c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01f      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2a      	ldr	r2, [pc, #168]	; (8004ea4 <TIM_Base_SetConfig+0x120>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01b      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <TIM_Base_SetConfig+0x124>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d017      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a28      	ldr	r2, [pc, #160]	; (8004eac <TIM_Base_SetConfig+0x128>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <TIM_Base_SetConfig+0x12c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00f      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <TIM_Base_SetConfig+0x130>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <TIM_Base_SetConfig+0x134>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a24      	ldr	r2, [pc, #144]	; (8004ebc <TIM_Base_SetConfig+0x138>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a23      	ldr	r2, [pc, #140]	; (8004ec0 <TIM_Base_SetConfig+0x13c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d108      	bne.n	8004e48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <TIM_Base_SetConfig+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0xf8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <TIM_Base_SetConfig+0x124>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	615a      	str	r2, [r3, #20]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800
 8004eb8:	40001800 	.word	0x40001800
 8004ebc:	40001c00 	.word	0x40001c00
 8004ec0:	40002000 	.word	0x40002000

08004ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 0201 	bic.w	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 030a 	bic.w	r3, r3, #10
 8004f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b087      	sub	sp, #28
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f023 0210 	bic.w	r2, r3, #16
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	031b      	lsls	r3, r3, #12
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f043 0307 	orr.w	r3, r3, #7
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	021a      	lsls	r2, r3, #8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800500c:	2302      	movs	r3, #2
 800500e:	e05a      	b.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d022      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505c:	d01d      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a15      	ldr	r2, [pc, #84]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d10c      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40010400 	.word	0x40010400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40001800 	.word	0x40001800

080050f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e03f      	b.n	80051aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd fbe6 	bl	8002910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb97 	bl	8005890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b088      	sub	sp, #32
 80051b6:	af02      	add	r7, sp, #8
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	f040 8083 	bne.w	80052da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_Transmit+0x2e>
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e07b      	b.n	80052dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Transmit+0x40>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e074      	b.n	80052dc <HAL_UART_Transmit+0x12a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2221      	movs	r2, #33	; 0x21
 8005204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005208:	f7fd fd0a 	bl	8002c20 <HAL_GetTick>
 800520c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005222:	e042      	b.n	80052aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523a:	d122      	bne.n	8005282 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2200      	movs	r2, #0
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f9b6 	bl	80055b8 <UART_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e042      	b.n	80052dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005268:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d103      	bne.n	800527a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	3302      	adds	r3, #2
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	e017      	b.n	80052aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3301      	adds	r3, #1
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	e013      	b.n	80052aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	2180      	movs	r1, #128	; 0x80
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f993 	bl	80055b8 <UART_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e01f      	b.n	80052dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	60ba      	str	r2, [r7, #8]
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1b7      	bne.n	8005224 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2200      	movs	r2, #0
 80052bc:	2140      	movs	r1, #64	; 0x40
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f97a 	bl	80055b8 <UART_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e006      	b.n	80052dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d140      	bne.n	8005380 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_UART_Receive_IT+0x26>
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e039      	b.n	8005382 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_UART_Receive_IT+0x38>
 8005318:	2302      	movs	r3, #2
 800531a:	e032      	b.n	8005382 <HAL_UART_Receive_IT+0x9e>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2222      	movs	r2, #34	; 0x22
 8005340:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0220 	orr.w	r2, r2, #32
 800537a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	e000      	b.n	8005382 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10d      	bne.n	80053e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_UART_IRQHandler+0x52>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9d6 	bl	800578c <UART_Receive_IT>
      return;
 80053e0:	e0d1      	b.n	8005586 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80b0 	beq.w	800554a <HAL_UART_IRQHandler+0x1ba>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <HAL_UART_IRQHandler+0x70>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a5 	beq.w	800554a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_UART_IRQHandler+0x90>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_UART_IRQHandler+0xb0>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	f043 0202 	orr.w	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_UART_IRQHandler+0xd0>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <HAL_UART_IRQHandler+0xfa>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <HAL_UART_IRQHandler+0xee>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	f043 0208 	orr.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d078      	beq.n	8005584 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_UART_IRQHandler+0x11c>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f970 	bl	800578c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	bf0c      	ite	eq
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2300      	movne	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <HAL_UART_IRQHandler+0x144>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d031      	beq.n	8005538 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f8b9 	bl	800564c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d123      	bne.n	8005530 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	4a21      	ldr	r2, [pc, #132]	; (800558c <HAL_UART_IRQHandler+0x1fc>)
 8005506:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe f851 	bl	80035b4 <HAL_DMA_Abort_IT>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d016      	beq.n	8005546 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005522:	4610      	mov	r0, r2
 8005524:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005526:	e00e      	b.n	8005546 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f83b 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552e:	e00a      	b.n	8005546 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f837 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005536:	e006      	b.n	8005546 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f833 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005544:	e01e      	b.n	8005584 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005546:	bf00      	nop
    return;
 8005548:	e01c      	b.n	8005584 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_UART_IRQHandler+0x1d6>
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f8a6 	bl	80056b0 <UART_Transmit_IT>
    return;
 8005564:	e00f      	b.n	8005586 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_UART_IRQHandler+0x1f6>
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f8ee 	bl	800575c <UART_EndTransmit_IT>
    return;
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005584:	bf00      	nop
  }
}
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	08005689 	.word	0x08005689

08005590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c8:	e02c      	b.n	8005624 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d028      	beq.n	8005624 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055d8:	f7fd fb22 	bl	8002c20 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d21d      	bcs.n	8005624 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e00f      	b.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4013      	ands	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	429a      	cmp	r2, r3
 8005632:	bf0c      	ite	eq
 8005634:	2301      	moveq	r3, #1
 8005636:	2300      	movne	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	429a      	cmp	r2, r3
 8005640:	d0c3      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005662:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff ff7e 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b21      	cmp	r3, #33	; 0x21
 80056c2:	d144      	bne.n	800574e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056cc:	d11a      	bne.n	8005704 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	1c9a      	adds	r2, r3, #2
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	621a      	str	r2, [r3, #32]
 80056f6:	e00e      	b.n	8005716 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]
 8005702:	e008      	b.n	8005716 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6211      	str	r1, [r2, #32]
 800570e:	781a      	ldrb	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29b      	uxth	r3, r3
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4619      	mov	r1, r3
 8005724:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10f      	bne.n	800574a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005738:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005748:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e000      	b.n	8005750 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800574e:	2302      	movs	r3, #2
  }
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff07 	bl	8005590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b22      	cmp	r3, #34	; 0x22
 800579e:	d171      	bne.n	8005884 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a8:	d123      	bne.n	80057f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10e      	bne.n	80057d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	1c9a      	adds	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
 80057d4:	e029      	b.n	800582a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28
 80057f0:	e01b      	b.n	800582a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6858      	ldr	r0, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	1c59      	adds	r1, r3, #1
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6291      	str	r1, [r2, #40]	; 0x28
 800580a:	b2c2      	uxtb	r2, r0
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e00c      	b.n	800582a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	b2da      	uxtb	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	1c58      	adds	r0, r3, #1
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	6288      	str	r0, [r1, #40]	; 0x28
 8005822:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29b      	uxth	r3, r3
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4619      	mov	r1, r3
 8005838:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800583a:	2b00      	cmp	r3, #0
 800583c:	d120      	bne.n	8005880 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0220 	bic.w	r2, r2, #32
 800584c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800585c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc ff2c 	bl	80026d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e002      	b.n	8005886 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80058d2:	f023 030c 	bic.w	r3, r3, #12
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	430b      	orrs	r3, r1
 80058de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fe:	f040 818b 	bne.w	8005c18 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4ac1      	ldr	r2, [pc, #772]	; (8005c0c <UART_SetConfig+0x37c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d005      	beq.n	8005918 <UART_SetConfig+0x88>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4abf      	ldr	r2, [pc, #764]	; (8005c10 <UART_SetConfig+0x380>)
 8005912:	4293      	cmp	r3, r2
 8005914:	f040 80bd 	bne.w	8005a92 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005918:	f7fe fba0 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 800591c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	461d      	mov	r5, r3
 8005922:	f04f 0600 	mov.w	r6, #0
 8005926:	46a8      	mov	r8, r5
 8005928:	46b1      	mov	r9, r6
 800592a:	eb18 0308 	adds.w	r3, r8, r8
 800592e:	eb49 0409 	adc.w	r4, r9, r9
 8005932:	4698      	mov	r8, r3
 8005934:	46a1      	mov	r9, r4
 8005936:	eb18 0805 	adds.w	r8, r8, r5
 800593a:	eb49 0906 	adc.w	r9, r9, r6
 800593e:	f04f 0100 	mov.w	r1, #0
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800594a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800594e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005952:	4688      	mov	r8, r1
 8005954:	4691      	mov	r9, r2
 8005956:	eb18 0005 	adds.w	r0, r8, r5
 800595a:	eb49 0106 	adc.w	r1, r9, r6
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	461d      	mov	r5, r3
 8005964:	f04f 0600 	mov.w	r6, #0
 8005968:	196b      	adds	r3, r5, r5
 800596a:	eb46 0406 	adc.w	r4, r6, r6
 800596e:	461a      	mov	r2, r3
 8005970:	4623      	mov	r3, r4
 8005972:	f7fa fca5 	bl	80002c0 <__aeabi_uldivmod>
 8005976:	4603      	mov	r3, r0
 8005978:	460c      	mov	r4, r1
 800597a:	461a      	mov	r2, r3
 800597c:	4ba5      	ldr	r3, [pc, #660]	; (8005c14 <UART_SetConfig+0x384>)
 800597e:	fba3 2302 	umull	r2, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	461d      	mov	r5, r3
 800598c:	f04f 0600 	mov.w	r6, #0
 8005990:	46a9      	mov	r9, r5
 8005992:	46b2      	mov	sl, r6
 8005994:	eb19 0309 	adds.w	r3, r9, r9
 8005998:	eb4a 040a 	adc.w	r4, sl, sl
 800599c:	4699      	mov	r9, r3
 800599e:	46a2      	mov	sl, r4
 80059a0:	eb19 0905 	adds.w	r9, r9, r5
 80059a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059bc:	4689      	mov	r9, r1
 80059be:	4692      	mov	sl, r2
 80059c0:	eb19 0005 	adds.w	r0, r9, r5
 80059c4:	eb4a 0106 	adc.w	r1, sl, r6
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	461d      	mov	r5, r3
 80059ce:	f04f 0600 	mov.w	r6, #0
 80059d2:	196b      	adds	r3, r5, r5
 80059d4:	eb46 0406 	adc.w	r4, r6, r6
 80059d8:	461a      	mov	r2, r3
 80059da:	4623      	mov	r3, r4
 80059dc:	f7fa fc70 	bl	80002c0 <__aeabi_uldivmod>
 80059e0:	4603      	mov	r3, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b8b      	ldr	r3, [pc, #556]	; (8005c14 <UART_SetConfig+0x384>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	; 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	3332      	adds	r3, #50	; 0x32
 80059fa:	4a86      	ldr	r2, [pc, #536]	; (8005c14 <UART_SetConfig+0x384>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a08:	4498      	add	r8, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	461d      	mov	r5, r3
 8005a0e:	f04f 0600 	mov.w	r6, #0
 8005a12:	46a9      	mov	r9, r5
 8005a14:	46b2      	mov	sl, r6
 8005a16:	eb19 0309 	adds.w	r3, r9, r9
 8005a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a1e:	4699      	mov	r9, r3
 8005a20:	46a2      	mov	sl, r4
 8005a22:	eb19 0905 	adds.w	r9, r9, r5
 8005a26:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a3e:	4689      	mov	r9, r1
 8005a40:	4692      	mov	sl, r2
 8005a42:	eb19 0005 	adds.w	r0, r9, r5
 8005a46:	eb4a 0106 	adc.w	r1, sl, r6
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	461d      	mov	r5, r3
 8005a50:	f04f 0600 	mov.w	r6, #0
 8005a54:	196b      	adds	r3, r5, r5
 8005a56:	eb46 0406 	adc.w	r4, r6, r6
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	f7fa fc2f 	bl	80002c0 <__aeabi_uldivmod>
 8005a62:	4603      	mov	r3, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	461a      	mov	r2, r3
 8005a68:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <UART_SetConfig+0x384>)
 8005a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2164      	movs	r1, #100	; 0x64
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a65      	ldr	r2, [pc, #404]	; (8005c14 <UART_SetConfig+0x384>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 0207 	and.w	r2, r3, #7
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4442      	add	r2, r8
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	e26f      	b.n	8005f72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a92:	f7fe facf 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8005a96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	461d      	mov	r5, r3
 8005a9c:	f04f 0600 	mov.w	r6, #0
 8005aa0:	46a8      	mov	r8, r5
 8005aa2:	46b1      	mov	r9, r6
 8005aa4:	eb18 0308 	adds.w	r3, r8, r8
 8005aa8:	eb49 0409 	adc.w	r4, r9, r9
 8005aac:	4698      	mov	r8, r3
 8005aae:	46a1      	mov	r9, r4
 8005ab0:	eb18 0805 	adds.w	r8, r8, r5
 8005ab4:	eb49 0906 	adc.w	r9, r9, r6
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ac4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ac8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005acc:	4688      	mov	r8, r1
 8005ace:	4691      	mov	r9, r2
 8005ad0:	eb18 0005 	adds.w	r0, r8, r5
 8005ad4:	eb49 0106 	adc.w	r1, r9, r6
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	461d      	mov	r5, r3
 8005ade:	f04f 0600 	mov.w	r6, #0
 8005ae2:	196b      	adds	r3, r5, r5
 8005ae4:	eb46 0406 	adc.w	r4, r6, r6
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4623      	mov	r3, r4
 8005aec:	f7fa fbe8 	bl	80002c0 <__aeabi_uldivmod>
 8005af0:	4603      	mov	r3, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b47      	ldr	r3, [pc, #284]	; (8005c14 <UART_SetConfig+0x384>)
 8005af8:	fba3 2302 	umull	r2, r3, r3, r2
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	461d      	mov	r5, r3
 8005b06:	f04f 0600 	mov.w	r6, #0
 8005b0a:	46a9      	mov	r9, r5
 8005b0c:	46b2      	mov	sl, r6
 8005b0e:	eb19 0309 	adds.w	r3, r9, r9
 8005b12:	eb4a 040a 	adc.w	r4, sl, sl
 8005b16:	4699      	mov	r9, r3
 8005b18:	46a2      	mov	sl, r4
 8005b1a:	eb19 0905 	adds.w	r9, r9, r5
 8005b1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b22:	f04f 0100 	mov.w	r1, #0
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b36:	4689      	mov	r9, r1
 8005b38:	4692      	mov	sl, r2
 8005b3a:	eb19 0005 	adds.w	r0, r9, r5
 8005b3e:	eb4a 0106 	adc.w	r1, sl, r6
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	461d      	mov	r5, r3
 8005b48:	f04f 0600 	mov.w	r6, #0
 8005b4c:	196b      	adds	r3, r5, r5
 8005b4e:	eb46 0406 	adc.w	r4, r6, r6
 8005b52:	461a      	mov	r2, r3
 8005b54:	4623      	mov	r3, r4
 8005b56:	f7fa fbb3 	bl	80002c0 <__aeabi_uldivmod>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <UART_SetConfig+0x384>)
 8005b62:	fba3 1302 	umull	r1, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2164      	movs	r1, #100	; 0x64
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <UART_SetConfig+0x384>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b82:	4498      	add	r8, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	461d      	mov	r5, r3
 8005b88:	f04f 0600 	mov.w	r6, #0
 8005b8c:	46a9      	mov	r9, r5
 8005b8e:	46b2      	mov	sl, r6
 8005b90:	eb19 0309 	adds.w	r3, r9, r9
 8005b94:	eb4a 040a 	adc.w	r4, sl, sl
 8005b98:	4699      	mov	r9, r3
 8005b9a:	46a2      	mov	sl, r4
 8005b9c:	eb19 0905 	adds.w	r9, r9, r5
 8005ba0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4692      	mov	sl, r2
 8005bbc:	eb19 0005 	adds.w	r0, r9, r5
 8005bc0:	eb4a 0106 	adc.w	r1, sl, r6
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	461d      	mov	r5, r3
 8005bca:	f04f 0600 	mov.w	r6, #0
 8005bce:	196b      	adds	r3, r5, r5
 8005bd0:	eb46 0406 	adc.w	r4, r6, r6
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	f7fa fb72 	bl	80002c0 <__aeabi_uldivmod>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <UART_SetConfig+0x384>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a07      	ldr	r2, [pc, #28]	; (8005c14 <UART_SetConfig+0x384>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 0207 	and.w	r2, r3, #7
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4442      	add	r2, r8
 8005c08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005c0a:	e1b2      	b.n	8005f72 <UART_SetConfig+0x6e2>
 8005c0c:	40011000 	.word	0x40011000
 8005c10:	40011400 	.word	0x40011400
 8005c14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4ad7      	ldr	r2, [pc, #860]	; (8005f7c <UART_SetConfig+0x6ec>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d005      	beq.n	8005c2e <UART_SetConfig+0x39e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4ad6      	ldr	r2, [pc, #856]	; (8005f80 <UART_SetConfig+0x6f0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	f040 80d1 	bne.w	8005dd0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c2e:	f7fe fa15 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 8005c32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	469a      	mov	sl, r3
 8005c38:	f04f 0b00 	mov.w	fp, #0
 8005c3c:	46d0      	mov	r8, sl
 8005c3e:	46d9      	mov	r9, fp
 8005c40:	eb18 0308 	adds.w	r3, r8, r8
 8005c44:	eb49 0409 	adc.w	r4, r9, r9
 8005c48:	4698      	mov	r8, r3
 8005c4a:	46a1      	mov	r9, r4
 8005c4c:	eb18 080a 	adds.w	r8, r8, sl
 8005c50:	eb49 090b 	adc.w	r9, r9, fp
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c68:	4688      	mov	r8, r1
 8005c6a:	4691      	mov	r9, r2
 8005c6c:	eb1a 0508 	adds.w	r5, sl, r8
 8005c70:	eb4b 0609 	adc.w	r6, fp, r9
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	f04f 0400 	mov.w	r4, #0
 8005c86:	0094      	lsls	r4, r2, #2
 8005c88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c8c:	008b      	lsls	r3, r1, #2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4623      	mov	r3, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	4631      	mov	r1, r6
 8005c96:	f7fa fb13 	bl	80002c0 <__aeabi_uldivmod>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4bb8      	ldr	r3, [pc, #736]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	469b      	mov	fp, r3
 8005cb0:	f04f 0c00 	mov.w	ip, #0
 8005cb4:	46d9      	mov	r9, fp
 8005cb6:	46e2      	mov	sl, ip
 8005cb8:	eb19 0309 	adds.w	r3, r9, r9
 8005cbc:	eb4a 040a 	adc.w	r4, sl, sl
 8005cc0:	4699      	mov	r9, r3
 8005cc2:	46a2      	mov	sl, r4
 8005cc4:	eb19 090b 	adds.w	r9, r9, fp
 8005cc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ce0:	4689      	mov	r9, r1
 8005ce2:	4692      	mov	sl, r2
 8005ce4:	eb1b 0509 	adds.w	r5, fp, r9
 8005ce8:	eb4c 060a 	adc.w	r6, ip, sl
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	f04f 0400 	mov.w	r4, #0
 8005cfe:	0094      	lsls	r4, r2, #2
 8005d00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d04:	008b      	lsls	r3, r1, #2
 8005d06:	461a      	mov	r2, r3
 8005d08:	4623      	mov	r3, r4
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	f7fa fad7 	bl	80002c0 <__aeabi_uldivmod>
 8005d12:	4603      	mov	r3, r0
 8005d14:	460c      	mov	r4, r1
 8005d16:	461a      	mov	r2, r3
 8005d18:	4b9a      	ldr	r3, [pc, #616]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2164      	movs	r1, #100	; 0x64
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	3332      	adds	r3, #50	; 0x32
 8005d2c:	4a95      	ldr	r2, [pc, #596]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d38:	4498      	add	r8, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	469b      	mov	fp, r3
 8005d3e:	f04f 0c00 	mov.w	ip, #0
 8005d42:	46d9      	mov	r9, fp
 8005d44:	46e2      	mov	sl, ip
 8005d46:	eb19 0309 	adds.w	r3, r9, r9
 8005d4a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d4e:	4699      	mov	r9, r3
 8005d50:	46a2      	mov	sl, r4
 8005d52:	eb19 090b 	adds.w	r9, r9, fp
 8005d56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d5a:	f04f 0100 	mov.w	r1, #0
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d6e:	4689      	mov	r9, r1
 8005d70:	4692      	mov	sl, r2
 8005d72:	eb1b 0509 	adds.w	r5, fp, r9
 8005d76:	eb4c 060a 	adc.w	r6, ip, sl
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f04f 0400 	mov.w	r4, #0
 8005d8c:	0094      	lsls	r4, r2, #2
 8005d8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d92:	008b      	lsls	r3, r1, #2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	4628      	mov	r0, r5
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	f7fa fa90 	bl	80002c0 <__aeabi_uldivmod>
 8005da0:	4603      	mov	r3, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	461a      	mov	r2, r3
 8005da6:	4b77      	ldr	r3, [pc, #476]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005da8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	2164      	movs	r1, #100	; 0x64
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	3332      	adds	r3, #50	; 0x32
 8005dba:	4a72      	ldr	r2, [pc, #456]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	f003 020f 	and.w	r2, r3, #15
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4442      	add	r2, r8
 8005dcc:	609a      	str	r2, [r3, #8]
 8005dce:	e0d0      	b.n	8005f72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7fe f930 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8005dd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	469a      	mov	sl, r3
 8005dda:	f04f 0b00 	mov.w	fp, #0
 8005dde:	46d0      	mov	r8, sl
 8005de0:	46d9      	mov	r9, fp
 8005de2:	eb18 0308 	adds.w	r3, r8, r8
 8005de6:	eb49 0409 	adc.w	r4, r9, r9
 8005dea:	4698      	mov	r8, r3
 8005dec:	46a1      	mov	r9, r4
 8005dee:	eb18 080a 	adds.w	r8, r8, sl
 8005df2:	eb49 090b 	adc.w	r9, r9, fp
 8005df6:	f04f 0100 	mov.w	r1, #0
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e0a:	4688      	mov	r8, r1
 8005e0c:	4691      	mov	r9, r2
 8005e0e:	eb1a 0508 	adds.w	r5, sl, r8
 8005e12:	eb4b 0609 	adc.w	r6, fp, r9
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	f04f 0400 	mov.w	r4, #0
 8005e28:	0094      	lsls	r4, r2, #2
 8005e2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e2e:	008b      	lsls	r3, r1, #2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4623      	mov	r3, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	4631      	mov	r1, r6
 8005e38:	f7fa fa42 	bl	80002c0 <__aeabi_uldivmod>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	461a      	mov	r2, r3
 8005e42:	4b50      	ldr	r3, [pc, #320]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005e44:	fba3 2302 	umull	r2, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	469b      	mov	fp, r3
 8005e52:	f04f 0c00 	mov.w	ip, #0
 8005e56:	46d9      	mov	r9, fp
 8005e58:	46e2      	mov	sl, ip
 8005e5a:	eb19 0309 	adds.w	r3, r9, r9
 8005e5e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e62:	4699      	mov	r9, r3
 8005e64:	46a2      	mov	sl, r4
 8005e66:	eb19 090b 	adds.w	r9, r9, fp
 8005e6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e6e:	f04f 0100 	mov.w	r1, #0
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e82:	4689      	mov	r9, r1
 8005e84:	4692      	mov	sl, r2
 8005e86:	eb1b 0509 	adds.w	r5, fp, r9
 8005e8a:	eb4c 060a 	adc.w	r6, ip, sl
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4619      	mov	r1, r3
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	f04f 0400 	mov.w	r4, #0
 8005ea0:	0094      	lsls	r4, r2, #2
 8005ea2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ea6:	008b      	lsls	r3, r1, #2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4623      	mov	r3, r4
 8005eac:	4628      	mov	r0, r5
 8005eae:	4631      	mov	r1, r6
 8005eb0:	f7fa fa06 	bl	80002c0 <__aeabi_uldivmod>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	2164      	movs	r1, #100	; 0x64
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	3332      	adds	r3, #50	; 0x32
 8005ece:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eda:	4498      	add	r8, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	469b      	mov	fp, r3
 8005ee0:	f04f 0c00 	mov.w	ip, #0
 8005ee4:	46d9      	mov	r9, fp
 8005ee6:	46e2      	mov	sl, ip
 8005ee8:	eb19 0309 	adds.w	r3, r9, r9
 8005eec:	eb4a 040a 	adc.w	r4, sl, sl
 8005ef0:	4699      	mov	r9, r3
 8005ef2:	46a2      	mov	sl, r4
 8005ef4:	eb19 090b 	adds.w	r9, r9, fp
 8005ef8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f10:	4689      	mov	r9, r1
 8005f12:	4692      	mov	sl, r2
 8005f14:	eb1b 0509 	adds.w	r5, fp, r9
 8005f18:	eb4c 060a 	adc.w	r6, ip, sl
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4619      	mov	r1, r3
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	f04f 0400 	mov.w	r4, #0
 8005f2e:	0094      	lsls	r4, r2, #2
 8005f30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f34:	008b      	lsls	r3, r1, #2
 8005f36:	461a      	mov	r2, r3
 8005f38:	4623      	mov	r3, r4
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	f7fa f9bf 	bl	80002c0 <__aeabi_uldivmod>
 8005f42:	4603      	mov	r3, r0
 8005f44:	460c      	mov	r4, r1
 8005f46:	461a      	mov	r2, r3
 8005f48:	4b0e      	ldr	r3, [pc, #56]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	2164      	movs	r1, #100	; 0x64
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	3332      	adds	r3, #50	; 0x32
 8005f5c:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <UART_SetConfig+0x6f4>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	f003 020f 	and.w	r2, r3, #15
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4442      	add	r2, r8
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	e7ff      	b.n	8005f72 <UART_SetConfig+0x6e2>
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7c:	40011000 	.word	0x40011000
 8005f80:	40011400 	.word	0x40011400
 8005f84:	51eb851f 	.word	0x51eb851f

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	2000097c 	.word	0x2000097c

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4e0d      	ldr	r6, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1ba4      	subs	r4, r4, r6
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	42a5      	cmp	r5, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4e0b      	ldr	r6, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f000 fc28 	bl	80067fc <_init>
 8005fac:	1ba4      	subs	r4, r4, r6
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	42a5      	cmp	r5, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fbc:	4798      	blx	r3
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fc6:	4798      	blx	r3
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	08006d1c 	.word	0x08006d1c
 8005fd0:	08006d1c 	.word	0x08006d1c
 8005fd4:	08006d1c 	.word	0x08006d1c
 8005fd8:	08006d20 	.word	0x08006d20

08005fdc <memcpy>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	1e43      	subs	r3, r0, #1
 8005fe0:	440a      	add	r2, r1
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d100      	bne.n	8005fe8 <memcpy+0xc>
 8005fe6:	bd10      	pop	{r4, pc}
 8005fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff0:	e7f7      	b.n	8005fe2 <memcpy+0x6>

08005ff2 <memset>:
 8005ff2:	4402      	add	r2, r0
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d100      	bne.n	8005ffc <memset+0xa>
 8005ffa:	4770      	bx	lr
 8005ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8006000:	e7f9      	b.n	8005ff6 <memset+0x4>
	...

08006004 <siprintf>:
 8006004:	b40e      	push	{r1, r2, r3}
 8006006:	b500      	push	{lr}
 8006008:	b09c      	sub	sp, #112	; 0x70
 800600a:	ab1d      	add	r3, sp, #116	; 0x74
 800600c:	9002      	str	r0, [sp, #8]
 800600e:	9006      	str	r0, [sp, #24]
 8006010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006014:	4809      	ldr	r0, [pc, #36]	; (800603c <siprintf+0x38>)
 8006016:	9107      	str	r1, [sp, #28]
 8006018:	9104      	str	r1, [sp, #16]
 800601a:	4909      	ldr	r1, [pc, #36]	; (8006040 <siprintf+0x3c>)
 800601c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006020:	9105      	str	r1, [sp, #20]
 8006022:	6800      	ldr	r0, [r0, #0]
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	a902      	add	r1, sp, #8
 8006028:	f000 f866 	bl	80060f8 <_svfiprintf_r>
 800602c:	9b02      	ldr	r3, [sp, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	b01c      	add	sp, #112	; 0x70
 8006034:	f85d eb04 	ldr.w	lr, [sp], #4
 8006038:	b003      	add	sp, #12
 800603a:	4770      	bx	lr
 800603c:	2000097c 	.word	0x2000097c
 8006040:	ffff0208 	.word	0xffff0208

08006044 <__ssputs_r>:
 8006044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006048:	688e      	ldr	r6, [r1, #8]
 800604a:	429e      	cmp	r6, r3
 800604c:	4682      	mov	sl, r0
 800604e:	460c      	mov	r4, r1
 8006050:	4690      	mov	r8, r2
 8006052:	4699      	mov	r9, r3
 8006054:	d837      	bhi.n	80060c6 <__ssputs_r+0x82>
 8006056:	898a      	ldrh	r2, [r1, #12]
 8006058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800605c:	d031      	beq.n	80060c2 <__ssputs_r+0x7e>
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	6909      	ldr	r1, [r1, #16]
 8006062:	1a6f      	subs	r7, r5, r1
 8006064:	6965      	ldr	r5, [r4, #20]
 8006066:	2302      	movs	r3, #2
 8006068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800606c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006070:	f109 0301 	add.w	r3, r9, #1
 8006074:	443b      	add	r3, r7
 8006076:	429d      	cmp	r5, r3
 8006078:	bf38      	it	cc
 800607a:	461d      	movcc	r5, r3
 800607c:	0553      	lsls	r3, r2, #21
 800607e:	d530      	bpl.n	80060e2 <__ssputs_r+0x9e>
 8006080:	4629      	mov	r1, r5
 8006082:	f000 fb21 	bl	80066c8 <_malloc_r>
 8006086:	4606      	mov	r6, r0
 8006088:	b950      	cbnz	r0, 80060a0 <__ssputs_r+0x5c>
 800608a:	230c      	movs	r3, #12
 800608c:	f8ca 3000 	str.w	r3, [sl]
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006096:	81a3      	strh	r3, [r4, #12]
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a0:	463a      	mov	r2, r7
 80060a2:	6921      	ldr	r1, [r4, #16]
 80060a4:	f7ff ff9a 	bl	8005fdc <memcpy>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	6126      	str	r6, [r4, #16]
 80060b6:	6165      	str	r5, [r4, #20]
 80060b8:	443e      	add	r6, r7
 80060ba:	1bed      	subs	r5, r5, r7
 80060bc:	6026      	str	r6, [r4, #0]
 80060be:	60a5      	str	r5, [r4, #8]
 80060c0:	464e      	mov	r6, r9
 80060c2:	454e      	cmp	r6, r9
 80060c4:	d900      	bls.n	80060c8 <__ssputs_r+0x84>
 80060c6:	464e      	mov	r6, r9
 80060c8:	4632      	mov	r2, r6
 80060ca:	4641      	mov	r1, r8
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	f000 fa93 	bl	80065f8 <memmove>
 80060d2:	68a3      	ldr	r3, [r4, #8]
 80060d4:	1b9b      	subs	r3, r3, r6
 80060d6:	60a3      	str	r3, [r4, #8]
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	441e      	add	r6, r3
 80060dc:	6026      	str	r6, [r4, #0]
 80060de:	2000      	movs	r0, #0
 80060e0:	e7dc      	b.n	800609c <__ssputs_r+0x58>
 80060e2:	462a      	mov	r2, r5
 80060e4:	f000 fb4a 	bl	800677c <_realloc_r>
 80060e8:	4606      	mov	r6, r0
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d1e2      	bne.n	80060b4 <__ssputs_r+0x70>
 80060ee:	6921      	ldr	r1, [r4, #16]
 80060f0:	4650      	mov	r0, sl
 80060f2:	f000 fa9b 	bl	800662c <_free_r>
 80060f6:	e7c8      	b.n	800608a <__ssputs_r+0x46>

080060f8 <_svfiprintf_r>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	461d      	mov	r5, r3
 80060fe:	898b      	ldrh	r3, [r1, #12]
 8006100:	061f      	lsls	r7, r3, #24
 8006102:	b09d      	sub	sp, #116	; 0x74
 8006104:	4680      	mov	r8, r0
 8006106:	460c      	mov	r4, r1
 8006108:	4616      	mov	r6, r2
 800610a:	d50f      	bpl.n	800612c <_svfiprintf_r+0x34>
 800610c:	690b      	ldr	r3, [r1, #16]
 800610e:	b96b      	cbnz	r3, 800612c <_svfiprintf_r+0x34>
 8006110:	2140      	movs	r1, #64	; 0x40
 8006112:	f000 fad9 	bl	80066c8 <_malloc_r>
 8006116:	6020      	str	r0, [r4, #0]
 8006118:	6120      	str	r0, [r4, #16]
 800611a:	b928      	cbnz	r0, 8006128 <_svfiprintf_r+0x30>
 800611c:	230c      	movs	r3, #12
 800611e:	f8c8 3000 	str.w	r3, [r8]
 8006122:	f04f 30ff 	mov.w	r0, #4294967295
 8006126:	e0c8      	b.n	80062ba <_svfiprintf_r+0x1c2>
 8006128:	2340      	movs	r3, #64	; 0x40
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	2300      	movs	r3, #0
 800612e:	9309      	str	r3, [sp, #36]	; 0x24
 8006130:	2320      	movs	r3, #32
 8006132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006136:	2330      	movs	r3, #48	; 0x30
 8006138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800613c:	9503      	str	r5, [sp, #12]
 800613e:	f04f 0b01 	mov.w	fp, #1
 8006142:	4637      	mov	r7, r6
 8006144:	463d      	mov	r5, r7
 8006146:	f815 3b01 	ldrb.w	r3, [r5], #1
 800614a:	b10b      	cbz	r3, 8006150 <_svfiprintf_r+0x58>
 800614c:	2b25      	cmp	r3, #37	; 0x25
 800614e:	d13e      	bne.n	80061ce <_svfiprintf_r+0xd6>
 8006150:	ebb7 0a06 	subs.w	sl, r7, r6
 8006154:	d00b      	beq.n	800616e <_svfiprintf_r+0x76>
 8006156:	4653      	mov	r3, sl
 8006158:	4632      	mov	r2, r6
 800615a:	4621      	mov	r1, r4
 800615c:	4640      	mov	r0, r8
 800615e:	f7ff ff71 	bl	8006044 <__ssputs_r>
 8006162:	3001      	adds	r0, #1
 8006164:	f000 80a4 	beq.w	80062b0 <_svfiprintf_r+0x1b8>
 8006168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616a:	4453      	add	r3, sl
 800616c:	9309      	str	r3, [sp, #36]	; 0x24
 800616e:	783b      	ldrb	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 809d 	beq.w	80062b0 <_svfiprintf_r+0x1b8>
 8006176:	2300      	movs	r3, #0
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	9307      	str	r3, [sp, #28]
 8006184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006188:	931a      	str	r3, [sp, #104]	; 0x68
 800618a:	462f      	mov	r7, r5
 800618c:	2205      	movs	r2, #5
 800618e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006192:	4850      	ldr	r0, [pc, #320]	; (80062d4 <_svfiprintf_r+0x1dc>)
 8006194:	f7fa f844 	bl	8000220 <memchr>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	b9d0      	cbnz	r0, 80061d2 <_svfiprintf_r+0xda>
 800619c:	06d9      	lsls	r1, r3, #27
 800619e:	bf44      	itt	mi
 80061a0:	2220      	movmi	r2, #32
 80061a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061a6:	071a      	lsls	r2, r3, #28
 80061a8:	bf44      	itt	mi
 80061aa:	222b      	movmi	r2, #43	; 0x2b
 80061ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061b0:	782a      	ldrb	r2, [r5, #0]
 80061b2:	2a2a      	cmp	r2, #42	; 0x2a
 80061b4:	d015      	beq.n	80061e2 <_svfiprintf_r+0xea>
 80061b6:	9a07      	ldr	r2, [sp, #28]
 80061b8:	462f      	mov	r7, r5
 80061ba:	2000      	movs	r0, #0
 80061bc:	250a      	movs	r5, #10
 80061be:	4639      	mov	r1, r7
 80061c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061c4:	3b30      	subs	r3, #48	; 0x30
 80061c6:	2b09      	cmp	r3, #9
 80061c8:	d94d      	bls.n	8006266 <_svfiprintf_r+0x16e>
 80061ca:	b1b8      	cbz	r0, 80061fc <_svfiprintf_r+0x104>
 80061cc:	e00f      	b.n	80061ee <_svfiprintf_r+0xf6>
 80061ce:	462f      	mov	r7, r5
 80061d0:	e7b8      	b.n	8006144 <_svfiprintf_r+0x4c>
 80061d2:	4a40      	ldr	r2, [pc, #256]	; (80062d4 <_svfiprintf_r+0x1dc>)
 80061d4:	1a80      	subs	r0, r0, r2
 80061d6:	fa0b f000 	lsl.w	r0, fp, r0
 80061da:	4318      	orrs	r0, r3
 80061dc:	9004      	str	r0, [sp, #16]
 80061de:	463d      	mov	r5, r7
 80061e0:	e7d3      	b.n	800618a <_svfiprintf_r+0x92>
 80061e2:	9a03      	ldr	r2, [sp, #12]
 80061e4:	1d11      	adds	r1, r2, #4
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	9103      	str	r1, [sp, #12]
 80061ea:	2a00      	cmp	r2, #0
 80061ec:	db01      	blt.n	80061f2 <_svfiprintf_r+0xfa>
 80061ee:	9207      	str	r2, [sp, #28]
 80061f0:	e004      	b.n	80061fc <_svfiprintf_r+0x104>
 80061f2:	4252      	negs	r2, r2
 80061f4:	f043 0302 	orr.w	r3, r3, #2
 80061f8:	9207      	str	r2, [sp, #28]
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	783b      	ldrb	r3, [r7, #0]
 80061fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006200:	d10c      	bne.n	800621c <_svfiprintf_r+0x124>
 8006202:	787b      	ldrb	r3, [r7, #1]
 8006204:	2b2a      	cmp	r3, #42	; 0x2a
 8006206:	d133      	bne.n	8006270 <_svfiprintf_r+0x178>
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	9203      	str	r2, [sp, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	bfb8      	it	lt
 8006214:	f04f 33ff 	movlt.w	r3, #4294967295
 8006218:	3702      	adds	r7, #2
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	4d2e      	ldr	r5, [pc, #184]	; (80062d8 <_svfiprintf_r+0x1e0>)
 800621e:	7839      	ldrb	r1, [r7, #0]
 8006220:	2203      	movs	r2, #3
 8006222:	4628      	mov	r0, r5
 8006224:	f7f9 fffc 	bl	8000220 <memchr>
 8006228:	b138      	cbz	r0, 800623a <_svfiprintf_r+0x142>
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	1b40      	subs	r0, r0, r5
 800622e:	fa03 f000 	lsl.w	r0, r3, r0
 8006232:	9b04      	ldr	r3, [sp, #16]
 8006234:	4303      	orrs	r3, r0
 8006236:	3701      	adds	r7, #1
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	7839      	ldrb	r1, [r7, #0]
 800623c:	4827      	ldr	r0, [pc, #156]	; (80062dc <_svfiprintf_r+0x1e4>)
 800623e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006242:	2206      	movs	r2, #6
 8006244:	1c7e      	adds	r6, r7, #1
 8006246:	f7f9 ffeb 	bl	8000220 <memchr>
 800624a:	2800      	cmp	r0, #0
 800624c:	d038      	beq.n	80062c0 <_svfiprintf_r+0x1c8>
 800624e:	4b24      	ldr	r3, [pc, #144]	; (80062e0 <_svfiprintf_r+0x1e8>)
 8006250:	bb13      	cbnz	r3, 8006298 <_svfiprintf_r+0x1a0>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	3307      	adds	r3, #7
 8006256:	f023 0307 	bic.w	r3, r3, #7
 800625a:	3308      	adds	r3, #8
 800625c:	9303      	str	r3, [sp, #12]
 800625e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006260:	444b      	add	r3, r9
 8006262:	9309      	str	r3, [sp, #36]	; 0x24
 8006264:	e76d      	b.n	8006142 <_svfiprintf_r+0x4a>
 8006266:	fb05 3202 	mla	r2, r5, r2, r3
 800626a:	2001      	movs	r0, #1
 800626c:	460f      	mov	r7, r1
 800626e:	e7a6      	b.n	80061be <_svfiprintf_r+0xc6>
 8006270:	2300      	movs	r3, #0
 8006272:	3701      	adds	r7, #1
 8006274:	9305      	str	r3, [sp, #20]
 8006276:	4619      	mov	r1, r3
 8006278:	250a      	movs	r5, #10
 800627a:	4638      	mov	r0, r7
 800627c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006280:	3a30      	subs	r2, #48	; 0x30
 8006282:	2a09      	cmp	r2, #9
 8006284:	d903      	bls.n	800628e <_svfiprintf_r+0x196>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0c8      	beq.n	800621c <_svfiprintf_r+0x124>
 800628a:	9105      	str	r1, [sp, #20]
 800628c:	e7c6      	b.n	800621c <_svfiprintf_r+0x124>
 800628e:	fb05 2101 	mla	r1, r5, r1, r2
 8006292:	2301      	movs	r3, #1
 8006294:	4607      	mov	r7, r0
 8006296:	e7f0      	b.n	800627a <_svfiprintf_r+0x182>
 8006298:	ab03      	add	r3, sp, #12
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4622      	mov	r2, r4
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <_svfiprintf_r+0x1ec>)
 80062a0:	a904      	add	r1, sp, #16
 80062a2:	4640      	mov	r0, r8
 80062a4:	f3af 8000 	nop.w
 80062a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062ac:	4681      	mov	r9, r0
 80062ae:	d1d6      	bne.n	800625e <_svfiprintf_r+0x166>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	065b      	lsls	r3, r3, #25
 80062b4:	f53f af35 	bmi.w	8006122 <_svfiprintf_r+0x2a>
 80062b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ba:	b01d      	add	sp, #116	; 0x74
 80062bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c0:	ab03      	add	r3, sp, #12
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	4622      	mov	r2, r4
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <_svfiprintf_r+0x1ec>)
 80062c8:	a904      	add	r1, sp, #16
 80062ca:	4640      	mov	r0, r8
 80062cc:	f000 f882 	bl	80063d4 <_printf_i>
 80062d0:	e7ea      	b.n	80062a8 <_svfiprintf_r+0x1b0>
 80062d2:	bf00      	nop
 80062d4:	08006ce0 	.word	0x08006ce0
 80062d8:	08006ce6 	.word	0x08006ce6
 80062dc:	08006cea 	.word	0x08006cea
 80062e0:	00000000 	.word	0x00000000
 80062e4:	08006045 	.word	0x08006045

080062e8 <_printf_common>:
 80062e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ec:	4691      	mov	r9, r2
 80062ee:	461f      	mov	r7, r3
 80062f0:	688a      	ldr	r2, [r1, #8]
 80062f2:	690b      	ldr	r3, [r1, #16]
 80062f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	bfb8      	it	lt
 80062fc:	4613      	movlt	r3, r2
 80062fe:	f8c9 3000 	str.w	r3, [r9]
 8006302:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006306:	4606      	mov	r6, r0
 8006308:	460c      	mov	r4, r1
 800630a:	b112      	cbz	r2, 8006312 <_printf_common+0x2a>
 800630c:	3301      	adds	r3, #1
 800630e:	f8c9 3000 	str.w	r3, [r9]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	0699      	lsls	r1, r3, #26
 8006316:	bf42      	ittt	mi
 8006318:	f8d9 3000 	ldrmi.w	r3, [r9]
 800631c:	3302      	addmi	r3, #2
 800631e:	f8c9 3000 	strmi.w	r3, [r9]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	f015 0506 	ands.w	r5, r5, #6
 8006328:	d107      	bne.n	800633a <_printf_common+0x52>
 800632a:	f104 0a19 	add.w	sl, r4, #25
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	f8d9 2000 	ldr.w	r2, [r9]
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	42ab      	cmp	r3, r5
 8006338:	dc28      	bgt.n	800638c <_printf_common+0xa4>
 800633a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	3300      	adds	r3, #0
 8006342:	bf18      	it	ne
 8006344:	2301      	movne	r3, #1
 8006346:	0692      	lsls	r2, r2, #26
 8006348:	d42d      	bmi.n	80063a6 <_printf_common+0xbe>
 800634a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800634e:	4639      	mov	r1, r7
 8006350:	4630      	mov	r0, r6
 8006352:	47c0      	blx	r8
 8006354:	3001      	adds	r0, #1
 8006356:	d020      	beq.n	800639a <_printf_common+0xb2>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	68e5      	ldr	r5, [r4, #12]
 800635c:	f8d9 2000 	ldr.w	r2, [r9]
 8006360:	f003 0306 	and.w	r3, r3, #6
 8006364:	2b04      	cmp	r3, #4
 8006366:	bf08      	it	eq
 8006368:	1aad      	subeq	r5, r5, r2
 800636a:	68a3      	ldr	r3, [r4, #8]
 800636c:	6922      	ldr	r2, [r4, #16]
 800636e:	bf0c      	ite	eq
 8006370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006374:	2500      	movne	r5, #0
 8006376:	4293      	cmp	r3, r2
 8006378:	bfc4      	itt	gt
 800637a:	1a9b      	subgt	r3, r3, r2
 800637c:	18ed      	addgt	r5, r5, r3
 800637e:	f04f 0900 	mov.w	r9, #0
 8006382:	341a      	adds	r4, #26
 8006384:	454d      	cmp	r5, r9
 8006386:	d11a      	bne.n	80063be <_printf_common+0xd6>
 8006388:	2000      	movs	r0, #0
 800638a:	e008      	b.n	800639e <_printf_common+0xb6>
 800638c:	2301      	movs	r3, #1
 800638e:	4652      	mov	r2, sl
 8006390:	4639      	mov	r1, r7
 8006392:	4630      	mov	r0, r6
 8006394:	47c0      	blx	r8
 8006396:	3001      	adds	r0, #1
 8006398:	d103      	bne.n	80063a2 <_printf_common+0xba>
 800639a:	f04f 30ff 	mov.w	r0, #4294967295
 800639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a2:	3501      	adds	r5, #1
 80063a4:	e7c3      	b.n	800632e <_printf_common+0x46>
 80063a6:	18e1      	adds	r1, r4, r3
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	2030      	movs	r0, #48	; 0x30
 80063ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063b0:	4422      	add	r2, r4
 80063b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063ba:	3302      	adds	r3, #2
 80063bc:	e7c5      	b.n	800634a <_printf_common+0x62>
 80063be:	2301      	movs	r3, #1
 80063c0:	4622      	mov	r2, r4
 80063c2:	4639      	mov	r1, r7
 80063c4:	4630      	mov	r0, r6
 80063c6:	47c0      	blx	r8
 80063c8:	3001      	adds	r0, #1
 80063ca:	d0e6      	beq.n	800639a <_printf_common+0xb2>
 80063cc:	f109 0901 	add.w	r9, r9, #1
 80063d0:	e7d8      	b.n	8006384 <_printf_common+0x9c>
	...

080063d4 <_printf_i>:
 80063d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063dc:	460c      	mov	r4, r1
 80063de:	7e09      	ldrb	r1, [r1, #24]
 80063e0:	b085      	sub	sp, #20
 80063e2:	296e      	cmp	r1, #110	; 0x6e
 80063e4:	4617      	mov	r7, r2
 80063e6:	4606      	mov	r6, r0
 80063e8:	4698      	mov	r8, r3
 80063ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ec:	f000 80b3 	beq.w	8006556 <_printf_i+0x182>
 80063f0:	d822      	bhi.n	8006438 <_printf_i+0x64>
 80063f2:	2963      	cmp	r1, #99	; 0x63
 80063f4:	d036      	beq.n	8006464 <_printf_i+0x90>
 80063f6:	d80a      	bhi.n	800640e <_printf_i+0x3a>
 80063f8:	2900      	cmp	r1, #0
 80063fa:	f000 80b9 	beq.w	8006570 <_printf_i+0x19c>
 80063fe:	2958      	cmp	r1, #88	; 0x58
 8006400:	f000 8083 	beq.w	800650a <_printf_i+0x136>
 8006404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006408:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800640c:	e032      	b.n	8006474 <_printf_i+0xa0>
 800640e:	2964      	cmp	r1, #100	; 0x64
 8006410:	d001      	beq.n	8006416 <_printf_i+0x42>
 8006412:	2969      	cmp	r1, #105	; 0x69
 8006414:	d1f6      	bne.n	8006404 <_printf_i+0x30>
 8006416:	6820      	ldr	r0, [r4, #0]
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	0605      	lsls	r5, r0, #24
 800641c:	f103 0104 	add.w	r1, r3, #4
 8006420:	d52a      	bpl.n	8006478 <_printf_i+0xa4>
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6011      	str	r1, [r2, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	da03      	bge.n	8006432 <_printf_i+0x5e>
 800642a:	222d      	movs	r2, #45	; 0x2d
 800642c:	425b      	negs	r3, r3
 800642e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006432:	486f      	ldr	r0, [pc, #444]	; (80065f0 <_printf_i+0x21c>)
 8006434:	220a      	movs	r2, #10
 8006436:	e039      	b.n	80064ac <_printf_i+0xd8>
 8006438:	2973      	cmp	r1, #115	; 0x73
 800643a:	f000 809d 	beq.w	8006578 <_printf_i+0x1a4>
 800643e:	d808      	bhi.n	8006452 <_printf_i+0x7e>
 8006440:	296f      	cmp	r1, #111	; 0x6f
 8006442:	d020      	beq.n	8006486 <_printf_i+0xb2>
 8006444:	2970      	cmp	r1, #112	; 0x70
 8006446:	d1dd      	bne.n	8006404 <_printf_i+0x30>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	f043 0320 	orr.w	r3, r3, #32
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	e003      	b.n	800645a <_printf_i+0x86>
 8006452:	2975      	cmp	r1, #117	; 0x75
 8006454:	d017      	beq.n	8006486 <_printf_i+0xb2>
 8006456:	2978      	cmp	r1, #120	; 0x78
 8006458:	d1d4      	bne.n	8006404 <_printf_i+0x30>
 800645a:	2378      	movs	r3, #120	; 0x78
 800645c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006460:	4864      	ldr	r0, [pc, #400]	; (80065f4 <_printf_i+0x220>)
 8006462:	e055      	b.n	8006510 <_printf_i+0x13c>
 8006464:	6813      	ldr	r3, [r2, #0]
 8006466:	1d19      	adds	r1, r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6011      	str	r1, [r2, #0]
 800646c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006474:	2301      	movs	r3, #1
 8006476:	e08c      	b.n	8006592 <_printf_i+0x1be>
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6011      	str	r1, [r2, #0]
 800647c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006480:	bf18      	it	ne
 8006482:	b21b      	sxthne	r3, r3
 8006484:	e7cf      	b.n	8006426 <_printf_i+0x52>
 8006486:	6813      	ldr	r3, [r2, #0]
 8006488:	6825      	ldr	r5, [r4, #0]
 800648a:	1d18      	adds	r0, r3, #4
 800648c:	6010      	str	r0, [r2, #0]
 800648e:	0628      	lsls	r0, r5, #24
 8006490:	d501      	bpl.n	8006496 <_printf_i+0xc2>
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	e002      	b.n	800649c <_printf_i+0xc8>
 8006496:	0668      	lsls	r0, r5, #25
 8006498:	d5fb      	bpl.n	8006492 <_printf_i+0xbe>
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	4854      	ldr	r0, [pc, #336]	; (80065f0 <_printf_i+0x21c>)
 800649e:	296f      	cmp	r1, #111	; 0x6f
 80064a0:	bf14      	ite	ne
 80064a2:	220a      	movne	r2, #10
 80064a4:	2208      	moveq	r2, #8
 80064a6:	2100      	movs	r1, #0
 80064a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ac:	6865      	ldr	r5, [r4, #4]
 80064ae:	60a5      	str	r5, [r4, #8]
 80064b0:	2d00      	cmp	r5, #0
 80064b2:	f2c0 8095 	blt.w	80065e0 <_printf_i+0x20c>
 80064b6:	6821      	ldr	r1, [r4, #0]
 80064b8:	f021 0104 	bic.w	r1, r1, #4
 80064bc:	6021      	str	r1, [r4, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d13d      	bne.n	800653e <_printf_i+0x16a>
 80064c2:	2d00      	cmp	r5, #0
 80064c4:	f040 808e 	bne.w	80065e4 <_printf_i+0x210>
 80064c8:	4665      	mov	r5, ip
 80064ca:	2a08      	cmp	r2, #8
 80064cc:	d10b      	bne.n	80064e6 <_printf_i+0x112>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	07db      	lsls	r3, r3, #31
 80064d2:	d508      	bpl.n	80064e6 <_printf_i+0x112>
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	6862      	ldr	r2, [r4, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	bfde      	ittt	le
 80064dc:	2330      	movle	r3, #48	; 0x30
 80064de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064e6:	ebac 0305 	sub.w	r3, ip, r5
 80064ea:	6123      	str	r3, [r4, #16]
 80064ec:	f8cd 8000 	str.w	r8, [sp]
 80064f0:	463b      	mov	r3, r7
 80064f2:	aa03      	add	r2, sp, #12
 80064f4:	4621      	mov	r1, r4
 80064f6:	4630      	mov	r0, r6
 80064f8:	f7ff fef6 	bl	80062e8 <_printf_common>
 80064fc:	3001      	adds	r0, #1
 80064fe:	d14d      	bne.n	800659c <_printf_i+0x1c8>
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	b005      	add	sp, #20
 8006506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800650a:	4839      	ldr	r0, [pc, #228]	; (80065f0 <_printf_i+0x21c>)
 800650c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006510:	6813      	ldr	r3, [r2, #0]
 8006512:	6821      	ldr	r1, [r4, #0]
 8006514:	1d1d      	adds	r5, r3, #4
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6015      	str	r5, [r2, #0]
 800651a:	060a      	lsls	r2, r1, #24
 800651c:	d50b      	bpl.n	8006536 <_printf_i+0x162>
 800651e:	07ca      	lsls	r2, r1, #31
 8006520:	bf44      	itt	mi
 8006522:	f041 0120 	orrmi.w	r1, r1, #32
 8006526:	6021      	strmi	r1, [r4, #0]
 8006528:	b91b      	cbnz	r3, 8006532 <_printf_i+0x15e>
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	f022 0220 	bic.w	r2, r2, #32
 8006530:	6022      	str	r2, [r4, #0]
 8006532:	2210      	movs	r2, #16
 8006534:	e7b7      	b.n	80064a6 <_printf_i+0xd2>
 8006536:	064d      	lsls	r5, r1, #25
 8006538:	bf48      	it	mi
 800653a:	b29b      	uxthmi	r3, r3
 800653c:	e7ef      	b.n	800651e <_printf_i+0x14a>
 800653e:	4665      	mov	r5, ip
 8006540:	fbb3 f1f2 	udiv	r1, r3, r2
 8006544:	fb02 3311 	mls	r3, r2, r1, r3
 8006548:	5cc3      	ldrb	r3, [r0, r3]
 800654a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800654e:	460b      	mov	r3, r1
 8006550:	2900      	cmp	r1, #0
 8006552:	d1f5      	bne.n	8006540 <_printf_i+0x16c>
 8006554:	e7b9      	b.n	80064ca <_printf_i+0xf6>
 8006556:	6813      	ldr	r3, [r2, #0]
 8006558:	6825      	ldr	r5, [r4, #0]
 800655a:	6961      	ldr	r1, [r4, #20]
 800655c:	1d18      	adds	r0, r3, #4
 800655e:	6010      	str	r0, [r2, #0]
 8006560:	0628      	lsls	r0, r5, #24
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	d501      	bpl.n	800656a <_printf_i+0x196>
 8006566:	6019      	str	r1, [r3, #0]
 8006568:	e002      	b.n	8006570 <_printf_i+0x19c>
 800656a:	066a      	lsls	r2, r5, #25
 800656c:	d5fb      	bpl.n	8006566 <_printf_i+0x192>
 800656e:	8019      	strh	r1, [r3, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	4665      	mov	r5, ip
 8006576:	e7b9      	b.n	80064ec <_printf_i+0x118>
 8006578:	6813      	ldr	r3, [r2, #0]
 800657a:	1d19      	adds	r1, r3, #4
 800657c:	6011      	str	r1, [r2, #0]
 800657e:	681d      	ldr	r5, [r3, #0]
 8006580:	6862      	ldr	r2, [r4, #4]
 8006582:	2100      	movs	r1, #0
 8006584:	4628      	mov	r0, r5
 8006586:	f7f9 fe4b 	bl	8000220 <memchr>
 800658a:	b108      	cbz	r0, 8006590 <_printf_i+0x1bc>
 800658c:	1b40      	subs	r0, r0, r5
 800658e:	6060      	str	r0, [r4, #4]
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659a:	e7a7      	b.n	80064ec <_printf_i+0x118>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	462a      	mov	r2, r5
 80065a0:	4639      	mov	r1, r7
 80065a2:	4630      	mov	r0, r6
 80065a4:	47c0      	blx	r8
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0aa      	beq.n	8006500 <_printf_i+0x12c>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	079b      	lsls	r3, r3, #30
 80065ae:	d413      	bmi.n	80065d8 <_printf_i+0x204>
 80065b0:	68e0      	ldr	r0, [r4, #12]
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	4298      	cmp	r0, r3
 80065b6:	bfb8      	it	lt
 80065b8:	4618      	movlt	r0, r3
 80065ba:	e7a3      	b.n	8006504 <_printf_i+0x130>
 80065bc:	2301      	movs	r3, #1
 80065be:	464a      	mov	r2, r9
 80065c0:	4639      	mov	r1, r7
 80065c2:	4630      	mov	r0, r6
 80065c4:	47c0      	blx	r8
 80065c6:	3001      	adds	r0, #1
 80065c8:	d09a      	beq.n	8006500 <_printf_i+0x12c>
 80065ca:	3501      	adds	r5, #1
 80065cc:	68e3      	ldr	r3, [r4, #12]
 80065ce:	9a03      	ldr	r2, [sp, #12]
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	42ab      	cmp	r3, r5
 80065d4:	dcf2      	bgt.n	80065bc <_printf_i+0x1e8>
 80065d6:	e7eb      	b.n	80065b0 <_printf_i+0x1dc>
 80065d8:	2500      	movs	r5, #0
 80065da:	f104 0919 	add.w	r9, r4, #25
 80065de:	e7f5      	b.n	80065cc <_printf_i+0x1f8>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1ac      	bne.n	800653e <_printf_i+0x16a>
 80065e4:	7803      	ldrb	r3, [r0, #0]
 80065e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ee:	e76c      	b.n	80064ca <_printf_i+0xf6>
 80065f0:	08006cf1 	.word	0x08006cf1
 80065f4:	08006d02 	.word	0x08006d02

080065f8 <memmove>:
 80065f8:	4288      	cmp	r0, r1
 80065fa:	b510      	push	{r4, lr}
 80065fc:	eb01 0302 	add.w	r3, r1, r2
 8006600:	d807      	bhi.n	8006612 <memmove+0x1a>
 8006602:	1e42      	subs	r2, r0, #1
 8006604:	4299      	cmp	r1, r3
 8006606:	d00a      	beq.n	800661e <memmove+0x26>
 8006608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006610:	e7f8      	b.n	8006604 <memmove+0xc>
 8006612:	4283      	cmp	r3, r0
 8006614:	d9f5      	bls.n	8006602 <memmove+0xa>
 8006616:	1881      	adds	r1, r0, r2
 8006618:	1ad2      	subs	r2, r2, r3
 800661a:	42d3      	cmn	r3, r2
 800661c:	d100      	bne.n	8006620 <memmove+0x28>
 800661e:	bd10      	pop	{r4, pc}
 8006620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006624:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006628:	e7f7      	b.n	800661a <memmove+0x22>
	...

0800662c <_free_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4605      	mov	r5, r0
 8006630:	2900      	cmp	r1, #0
 8006632:	d045      	beq.n	80066c0 <_free_r+0x94>
 8006634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006638:	1f0c      	subs	r4, r1, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	bfb8      	it	lt
 800663e:	18e4      	addlt	r4, r4, r3
 8006640:	f000 f8d2 	bl	80067e8 <__malloc_lock>
 8006644:	4a1f      	ldr	r2, [pc, #124]	; (80066c4 <_free_r+0x98>)
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	4610      	mov	r0, r2
 800664a:	b933      	cbnz	r3, 800665a <_free_r+0x2e>
 800664c:	6063      	str	r3, [r4, #4]
 800664e:	6014      	str	r4, [r2, #0]
 8006650:	4628      	mov	r0, r5
 8006652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006656:	f000 b8c8 	b.w	80067ea <__malloc_unlock>
 800665a:	42a3      	cmp	r3, r4
 800665c:	d90c      	bls.n	8006678 <_free_r+0x4c>
 800665e:	6821      	ldr	r1, [r4, #0]
 8006660:	1862      	adds	r2, r4, r1
 8006662:	4293      	cmp	r3, r2
 8006664:	bf04      	itt	eq
 8006666:	681a      	ldreq	r2, [r3, #0]
 8006668:	685b      	ldreq	r3, [r3, #4]
 800666a:	6063      	str	r3, [r4, #4]
 800666c:	bf04      	itt	eq
 800666e:	1852      	addeq	r2, r2, r1
 8006670:	6022      	streq	r2, [r4, #0]
 8006672:	6004      	str	r4, [r0, #0]
 8006674:	e7ec      	b.n	8006650 <_free_r+0x24>
 8006676:	4613      	mov	r3, r2
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	b10a      	cbz	r2, 8006680 <_free_r+0x54>
 800667c:	42a2      	cmp	r2, r4
 800667e:	d9fa      	bls.n	8006676 <_free_r+0x4a>
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	1858      	adds	r0, r3, r1
 8006684:	42a0      	cmp	r0, r4
 8006686:	d10b      	bne.n	80066a0 <_free_r+0x74>
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	4401      	add	r1, r0
 800668c:	1858      	adds	r0, r3, r1
 800668e:	4282      	cmp	r2, r0
 8006690:	6019      	str	r1, [r3, #0]
 8006692:	d1dd      	bne.n	8006650 <_free_r+0x24>
 8006694:	6810      	ldr	r0, [r2, #0]
 8006696:	6852      	ldr	r2, [r2, #4]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	4401      	add	r1, r0
 800669c:	6019      	str	r1, [r3, #0]
 800669e:	e7d7      	b.n	8006650 <_free_r+0x24>
 80066a0:	d902      	bls.n	80066a8 <_free_r+0x7c>
 80066a2:	230c      	movs	r3, #12
 80066a4:	602b      	str	r3, [r5, #0]
 80066a6:	e7d3      	b.n	8006650 <_free_r+0x24>
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	1821      	adds	r1, r4, r0
 80066ac:	428a      	cmp	r2, r1
 80066ae:	bf04      	itt	eq
 80066b0:	6811      	ldreq	r1, [r2, #0]
 80066b2:	6852      	ldreq	r2, [r2, #4]
 80066b4:	6062      	str	r2, [r4, #4]
 80066b6:	bf04      	itt	eq
 80066b8:	1809      	addeq	r1, r1, r0
 80066ba:	6021      	streq	r1, [r4, #0]
 80066bc:	605c      	str	r4, [r3, #4]
 80066be:	e7c7      	b.n	8006650 <_free_r+0x24>
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop
 80066c4:	20000a10 	.word	0x20000a10

080066c8 <_malloc_r>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	1ccd      	adds	r5, r1, #3
 80066cc:	f025 0503 	bic.w	r5, r5, #3
 80066d0:	3508      	adds	r5, #8
 80066d2:	2d0c      	cmp	r5, #12
 80066d4:	bf38      	it	cc
 80066d6:	250c      	movcc	r5, #12
 80066d8:	2d00      	cmp	r5, #0
 80066da:	4606      	mov	r6, r0
 80066dc:	db01      	blt.n	80066e2 <_malloc_r+0x1a>
 80066de:	42a9      	cmp	r1, r5
 80066e0:	d903      	bls.n	80066ea <_malloc_r+0x22>
 80066e2:	230c      	movs	r3, #12
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	2000      	movs	r0, #0
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
 80066ea:	f000 f87d 	bl	80067e8 <__malloc_lock>
 80066ee:	4a21      	ldr	r2, [pc, #132]	; (8006774 <_malloc_r+0xac>)
 80066f0:	6814      	ldr	r4, [r2, #0]
 80066f2:	4621      	mov	r1, r4
 80066f4:	b991      	cbnz	r1, 800671c <_malloc_r+0x54>
 80066f6:	4c20      	ldr	r4, [pc, #128]	; (8006778 <_malloc_r+0xb0>)
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	b91b      	cbnz	r3, 8006704 <_malloc_r+0x3c>
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 f863 	bl	80067c8 <_sbrk_r>
 8006702:	6020      	str	r0, [r4, #0]
 8006704:	4629      	mov	r1, r5
 8006706:	4630      	mov	r0, r6
 8006708:	f000 f85e 	bl	80067c8 <_sbrk_r>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d124      	bne.n	800675a <_malloc_r+0x92>
 8006710:	230c      	movs	r3, #12
 8006712:	6033      	str	r3, [r6, #0]
 8006714:	4630      	mov	r0, r6
 8006716:	f000 f868 	bl	80067ea <__malloc_unlock>
 800671a:	e7e4      	b.n	80066e6 <_malloc_r+0x1e>
 800671c:	680b      	ldr	r3, [r1, #0]
 800671e:	1b5b      	subs	r3, r3, r5
 8006720:	d418      	bmi.n	8006754 <_malloc_r+0x8c>
 8006722:	2b0b      	cmp	r3, #11
 8006724:	d90f      	bls.n	8006746 <_malloc_r+0x7e>
 8006726:	600b      	str	r3, [r1, #0]
 8006728:	50cd      	str	r5, [r1, r3]
 800672a:	18cc      	adds	r4, r1, r3
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f85c 	bl	80067ea <__malloc_unlock>
 8006732:	f104 000b 	add.w	r0, r4, #11
 8006736:	1d23      	adds	r3, r4, #4
 8006738:	f020 0007 	bic.w	r0, r0, #7
 800673c:	1ac3      	subs	r3, r0, r3
 800673e:	d0d3      	beq.n	80066e8 <_malloc_r+0x20>
 8006740:	425a      	negs	r2, r3
 8006742:	50e2      	str	r2, [r4, r3]
 8006744:	e7d0      	b.n	80066e8 <_malloc_r+0x20>
 8006746:	428c      	cmp	r4, r1
 8006748:	684b      	ldr	r3, [r1, #4]
 800674a:	bf16      	itet	ne
 800674c:	6063      	strne	r3, [r4, #4]
 800674e:	6013      	streq	r3, [r2, #0]
 8006750:	460c      	movne	r4, r1
 8006752:	e7eb      	b.n	800672c <_malloc_r+0x64>
 8006754:	460c      	mov	r4, r1
 8006756:	6849      	ldr	r1, [r1, #4]
 8006758:	e7cc      	b.n	80066f4 <_malloc_r+0x2c>
 800675a:	1cc4      	adds	r4, r0, #3
 800675c:	f024 0403 	bic.w	r4, r4, #3
 8006760:	42a0      	cmp	r0, r4
 8006762:	d005      	beq.n	8006770 <_malloc_r+0xa8>
 8006764:	1a21      	subs	r1, r4, r0
 8006766:	4630      	mov	r0, r6
 8006768:	f000 f82e 	bl	80067c8 <_sbrk_r>
 800676c:	3001      	adds	r0, #1
 800676e:	d0cf      	beq.n	8006710 <_malloc_r+0x48>
 8006770:	6025      	str	r5, [r4, #0]
 8006772:	e7db      	b.n	800672c <_malloc_r+0x64>
 8006774:	20000a10 	.word	0x20000a10
 8006778:	20000a14 	.word	0x20000a14

0800677c <_realloc_r>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	4607      	mov	r7, r0
 8006780:	4614      	mov	r4, r2
 8006782:	460e      	mov	r6, r1
 8006784:	b921      	cbnz	r1, 8006790 <_realloc_r+0x14>
 8006786:	4611      	mov	r1, r2
 8006788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800678c:	f7ff bf9c 	b.w	80066c8 <_malloc_r>
 8006790:	b922      	cbnz	r2, 800679c <_realloc_r+0x20>
 8006792:	f7ff ff4b 	bl	800662c <_free_r>
 8006796:	4625      	mov	r5, r4
 8006798:	4628      	mov	r0, r5
 800679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800679c:	f000 f826 	bl	80067ec <_malloc_usable_size_r>
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d20f      	bcs.n	80067c4 <_realloc_r+0x48>
 80067a4:	4621      	mov	r1, r4
 80067a6:	4638      	mov	r0, r7
 80067a8:	f7ff ff8e 	bl	80066c8 <_malloc_r>
 80067ac:	4605      	mov	r5, r0
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d0f2      	beq.n	8006798 <_realloc_r+0x1c>
 80067b2:	4631      	mov	r1, r6
 80067b4:	4622      	mov	r2, r4
 80067b6:	f7ff fc11 	bl	8005fdc <memcpy>
 80067ba:	4631      	mov	r1, r6
 80067bc:	4638      	mov	r0, r7
 80067be:	f7ff ff35 	bl	800662c <_free_r>
 80067c2:	e7e9      	b.n	8006798 <_realloc_r+0x1c>
 80067c4:	4635      	mov	r5, r6
 80067c6:	e7e7      	b.n	8006798 <_realloc_r+0x1c>

080067c8 <_sbrk_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4c06      	ldr	r4, [pc, #24]	; (80067e4 <_sbrk_r+0x1c>)
 80067cc:	2300      	movs	r3, #0
 80067ce:	4605      	mov	r5, r0
 80067d0:	4608      	mov	r0, r1
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	f7fc f948 	bl	8002a68 <_sbrk>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_sbrk_r+0x1a>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_sbrk_r+0x1a>
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	2000530c 	.word	0x2000530c

080067e8 <__malloc_lock>:
 80067e8:	4770      	bx	lr

080067ea <__malloc_unlock>:
 80067ea:	4770      	bx	lr

080067ec <_malloc_usable_size_r>:
 80067ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f0:	1f18      	subs	r0, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bfbc      	itt	lt
 80067f6:	580b      	ldrlt	r3, [r1, r0]
 80067f8:	18c0      	addlt	r0, r0, r3
 80067fa:	4770      	bx	lr

080067fc <_init>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	bf00      	nop
 8006800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006802:	bc08      	pop	{r3}
 8006804:	469e      	mov	lr, r3
 8006806:	4770      	bx	lr

08006808 <_fini>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr
