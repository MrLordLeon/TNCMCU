
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008678  08008678  000209e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008680  08008680  000209e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e4  20000000  08008688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d98  200009e4  0800906c  000209e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000377c  0800906c  0002377c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014835  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b23  00000000  00000000  00035249  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00037d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00038cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023853  00000000  00000000  00039ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d709  00000000  00000000  0005d323  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d291c  00000000  00000000  0006aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d348  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ac  00000000  00000000  0013d3c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e4 	.word	0x200009e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007eb0 	.word	0x08007eb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e8 	.word	0x200009e8
 800020c:	08007eb0 	.word	0x08007eb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
 8000db8:	4613      	mov	r3, r2
 8000dba:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4951      	ldr	r1, [pc, #324]	; (8000f08 <conv_HEX_to_BIN+0x15c>)
 8000dc2:	4852      	ldr	r0, [pc, #328]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dc4:	f006 fc92 	bl	80076ec <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dc8:	4850      	ldr	r0, [pc, #320]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dca:	f7ff fa21 	bl	8000210 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	494d      	ldr	r1, [pc, #308]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dd6:	484e      	ldr	r0, [pc, #312]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000dd8:	f005 fd47 	bl	800686a <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	461a      	mov	r2, r3
 8000de0:	494c      	ldr	r1, [pc, #304]	; (8000f14 <conv_HEX_to_BIN+0x168>)
 8000de2:	484a      	ldr	r0, [pc, #296]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000de4:	f006 fc82 	bl	80076ec <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000de8:	4848      	ldr	r0, [pc, #288]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000dea:	f7ff fa11 	bl	8000210 <strlen>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	230a      	movs	r3, #10
 8000df4:	4945      	ldr	r1, [pc, #276]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000df6:	4846      	ldr	r0, [pc, #280]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000df8:	f005 fd37 	bl	800686a <HAL_UART_Transmit>

    if(select_8_16){
 8000dfc:	797b      	ldrb	r3, [r7, #5]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01f      	beq.n	8000e42 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e018      	b.n	8000e3a <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa42 f303 	asr.w	r3, r2, r3
 8000e10:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	bfb8      	it	lt
 8000e1c:	425b      	neglt	r3, r3
 8000e1e:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2201      	movne	r2, #1
 8000e2e:	2200      	moveq	r2, #0
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	dde3      	ble.n	8000e08 <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000e40:	e05e      	b.n	8000f00 <conv_HEX_to_BIN+0x154>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4934      	ldr	r1, [pc, #208]	; (8000f18 <conv_HEX_to_BIN+0x16c>)
 8000e48:	4830      	ldr	r0, [pc, #192]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e4a:	f006 fc4f 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e50:	f7ff f9de 	bl	8000210 <strlen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	230a      	movs	r3, #10
 8000e5a:	492c      	ldr	r1, [pc, #176]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e5c:	482c      	ldr	r0, [pc, #176]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000e5e:	f005 fd04 	bl	800686a <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	e038      	b.n	8000eda <conv_HEX_to_BIN+0x12e>
			temp = hex_byte_in >> i;
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa42 f303 	asr.w	r3, r2, r3
 8000e70:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4929      	ldr	r1, [pc, #164]	; (8000f1c <conv_HEX_to_BIN+0x170>)
 8000e76:	4825      	ldr	r0, [pc, #148]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e78:	f006 fc38 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e7c:	4823      	ldr	r0, [pc, #140]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e7e:	f7ff f9c7 	bl	8000210 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	230a      	movs	r3, #10
 8000e88:	4920      	ldr	r1, [pc, #128]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000e8a:	4821      	ldr	r0, [pc, #132]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000e8c:	f005 fced 	bl	800686a <HAL_UART_Transmit>
			temp = temp%2;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	bfb8      	it	lt
 8000e9a:	425b      	neglt	r3, r3
 8000e9c:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	491f      	ldr	r1, [pc, #124]	; (8000f20 <conv_HEX_to_BIN+0x174>)
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000ea4:	f006 fc22 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ea8:	4818      	ldr	r0, [pc, #96]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000eaa:	f7ff f9b1 	bl	8000210 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	4915      	ldr	r1, [pc, #84]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000eb8:	f005 fcd7 	bl	800686a <HAL_UART_Transmit>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	f1c3 030f 	rsb	r3, r3, #15
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2201      	movne	r2, #1
 8000ece:	2200      	moveq	r2, #0
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	ddc3      	ble.n	8000e68 <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <conv_HEX_to_BIN+0x178>)
 8000ee4:	8811      	ldrh	r1, [r2, #0]
 8000ee6:	7892      	ldrb	r2, [r2, #2]
 8000ee8:	8019      	strh	r1, [r3, #0]
 8000eea:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000eee:	f7ff f98f 	bl	8000210 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	4904      	ldr	r1, [pc, #16]	; (8000f0c <conv_HEX_to_BIN+0x160>)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <conv_HEX_to_BIN+0x164>)
 8000efc:	f005 fcb5 	bl	800686a <HAL_UART_Transmit>
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08007ec8 	.word	0x08007ec8
 8000f0c:	20002638 	.word	0x20002638
 8000f10:	200034f4 	.word	0x200034f4
 8000f14:	08007ee4 	.word	0x08007ee4
 8000f18:	08007f18 	.word	0x08007f18
 8000f1c:	08007f4c 	.word	0x08007f4c
 8000f20:	08007f54 	.word	0x08007f54
 8000f24:	08007f5c 	.word	0x08007f5c

08000f28 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4909      	ldr	r1, [pc, #36]	; (8000f54 <init_AX25+0x2c>)
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <init_AX25+0x30>)
 8000f32:	f005 fd33 	bl	800699c <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <init_AX25+0x34>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <init_AX25+0x34>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <init_AX25+0x34>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <init_AX25+0x34>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20001dac 	.word	0x20001dac
 8000f58:	200034f4 	.word	0x200034f4
 8000f5c:	20001da0 	.word	0x20001da0

08000f60 <tx_rx>:

void tx_rx() {
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
	if (changeMode) {
 8000f66:	4b59      	ldr	r3, [pc, #356]	; (80010cc <tx_rx+0x16c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <tx_rx+0x18>
		changeMode = 0;
 8000f6e:	4b57      	ldr	r3, [pc, #348]	; (80010cc <tx_rx+0x16c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000f74:	f001 f8b8 	bl	80020e8 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <tx_rx+0x170>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d07e      	beq.n	800107e <tx_rx+0x11e>
		bool packet_received = false;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
		bool packet_converted = false;
 8000f84:	2300      	movs	r3, #0
 8000f86:	71fb      	strb	r3, [r7, #7]

		//Run receiving KISS
		packet_received = receiving_KISS();
 8000f88:	f000 fc70 	bl	800186c <receiving_KISS>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	717b      	strb	r3, [r7, #5]

		if(packet_received){
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <tx_rx+0x3e>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 8000f96:	f000 fd31 	bl	80019fc <KISS_TO_AX25>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <tx_rx+0x48>
			output_AX25();
 8000fa4:	f000 f8a2 	bl	80010ec <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 8000fa8:	f000 f97a 	bl	80012a0 <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d019      	beq.n	8000fec <tx_rx+0x8c>
			sprintf(uartData, "Error receiving KISS packet\n");
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <tx_rx+0x174>)
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <tx_rx+0x178>)
 8000fbc:	4615      	mov	r5, r2
 8000fbe:	461c      	mov	r4, r3
 8000fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc2:	6028      	str	r0, [r5, #0]
 8000fc4:	6069      	str	r1, [r5, #4]
 8000fc6:	60aa      	str	r2, [r5, #8]
 8000fc8:	60eb      	str	r3, [r5, #12]
 8000fca:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000fcc:	6128      	str	r0, [r5, #16]
 8000fce:	6169      	str	r1, [r5, #20]
 8000fd0:	61aa      	str	r2, [r5, #24]
 8000fd2:	7823      	ldrb	r3, [r4, #0]
 8000fd4:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fd6:	483f      	ldr	r0, [pc, #252]	; (80010d4 <tx_rx+0x174>)
 8000fd8:	f7ff f91a 	bl	8000210 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	493c      	ldr	r1, [pc, #240]	; (80010d4 <tx_rx+0x174>)
 8000fe4:	483d      	ldr	r0, [pc, #244]	; (80010dc <tx_rx+0x17c>)
 8000fe6:	f005 fc40 	bl	800686a <HAL_UART_Transmit>
 8000fea:	e044      	b.n	8001076 <tx_rx+0x116>
		}
		//Packet was not converted properly
		else if(!packet_converted){
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d019      	beq.n	800102c <tx_rx+0xcc>
			sprintf(uartData, "Error converting KISS packet\n");
 8000ff8:	4a36      	ldr	r2, [pc, #216]	; (80010d4 <tx_rx+0x174>)
 8000ffa:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <tx_rx+0x180>)
 8000ffc:	4615      	mov	r5, r2
 8000ffe:	461c      	mov	r4, r3
 8001000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001002:	6028      	str	r0, [r5, #0]
 8001004:	6069      	str	r1, [r5, #4]
 8001006:	60aa      	str	r2, [r5, #8]
 8001008:	60eb      	str	r3, [r5, #12]
 800100a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800100c:	6128      	str	r0, [r5, #16]
 800100e:	6169      	str	r1, [r5, #20]
 8001010:	61aa      	str	r2, [r5, #24]
 8001012:	8823      	ldrh	r3, [r4, #0]
 8001014:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001016:	482f      	ldr	r0, [pc, #188]	; (80010d4 <tx_rx+0x174>)
 8001018:	f7ff f8fa 	bl	8000210 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	b29a      	uxth	r2, r3
 8001020:	230a      	movs	r3, #10
 8001022:	492c      	ldr	r1, [pc, #176]	; (80010d4 <tx_rx+0x174>)
 8001024:	482d      	ldr	r0, [pc, #180]	; (80010dc <tx_rx+0x17c>)
 8001026:	f005 fc20 	bl	800686a <HAL_UART_Transmit>
 800102a:	e024      	b.n	8001076 <tx_rx+0x116>
		}
		//Successful transmission!
		else {
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <tx_rx+0x174>)
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <tx_rx+0x184>)
 8001030:	4614      	mov	r4, r2
 8001032:	469c      	mov	ip, r3
 8001034:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001038:	4665      	mov	r5, ip
 800103a:	4626      	mov	r6, r4
 800103c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800103e:	6028      	str	r0, [r5, #0]
 8001040:	6069      	str	r1, [r5, #4]
 8001042:	60aa      	str	r2, [r5, #8]
 8001044:	60eb      	str	r3, [r5, #12]
 8001046:	3410      	adds	r4, #16
 8001048:	f10c 0c10 	add.w	ip, ip, #16
 800104c:	4574      	cmp	r4, lr
 800104e:	d1f3      	bne.n	8001038 <tx_rx+0xd8>
 8001050:	4662      	mov	r2, ip
 8001052:	4623      	mov	r3, r4
 8001054:	cb03      	ldmia	r3!, {r0, r1}
 8001056:	6010      	str	r0, [r2, #0]
 8001058:	6051      	str	r1, [r2, #4]
 800105a:	8819      	ldrh	r1, [r3, #0]
 800105c:	789b      	ldrb	r3, [r3, #2]
 800105e:	8111      	strh	r1, [r2, #8]
 8001060:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <tx_rx+0x174>)
 8001064:	f7ff f8d4 	bl	8000210 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	230a      	movs	r3, #10
 800106e:	4919      	ldr	r1, [pc, #100]	; (80010d4 <tx_rx+0x174>)
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <tx_rx+0x17c>)
 8001072:	f005 fbfa 	bl	800686a <HAL_UART_Transmit>
		}

		changeMode = true;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <tx_rx+0x16c>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 800107c:	e022      	b.n	80010c4 <tx_rx+0x164>
		bool change = receiving_AX25();
 800107e:	f000 f98f 	bl	80013a0 <receiving_AX25>
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
		if(!change){
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d018      	beq.n	80010c4 <tx_rx+0x164>
			sprintf(uartData, "Changing mode due to request\n");
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <tx_rx+0x174>)
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <tx_rx+0x188>)
 8001096:	4615      	mov	r5, r2
 8001098:	461c      	mov	r4, r3
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	6028      	str	r0, [r5, #0]
 800109e:	6069      	str	r1, [r5, #4]
 80010a0:	60aa      	str	r2, [r5, #8]
 80010a2:	60eb      	str	r3, [r5, #12]
 80010a4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010a6:	6128      	str	r0, [r5, #16]
 80010a8:	6169      	str	r1, [r5, #20]
 80010aa:	61aa      	str	r2, [r5, #24]
 80010ac:	8823      	ldrh	r3, [r4, #0]
 80010ae:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010b0:	4808      	ldr	r0, [pc, #32]	; (80010d4 <tx_rx+0x174>)
 80010b2:	f7ff f8ad 	bl	8000210 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	230a      	movs	r3, #10
 80010bc:	4905      	ldr	r1, [pc, #20]	; (80010d4 <tx_rx+0x174>)
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <tx_rx+0x17c>)
 80010c0:	f005 fbd3 	bl	800686a <HAL_UART_Transmit>
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010cc:	20000a05 	.word	0x20000a05
 80010d0:	2000349c 	.word	0x2000349c
 80010d4:	20002638 	.word	0x20002638
 80010d8:	08007f60 	.word	0x08007f60
 80010dc:	200034f4 	.word	0x200034f4
 80010e0:	08007f80 	.word	0x08007f80
 80010e4:	08007fa0 	.word	0x08007fa0
 80010e8:	08007fdc 	.word	0x08007fdc

080010ec <output_AX25>:

void output_AX25(){
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <output_AX25+0x17c>)
 80010f4:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Beginning AFSK transmission\n");
 80010f6:	4a5d      	ldr	r2, [pc, #372]	; (800126c <output_AX25+0x180>)
 80010f8:	4b5d      	ldr	r3, [pc, #372]	; (8001270 <output_AX25+0x184>)
 80010fa:	4615      	mov	r5, r2
 80010fc:	461c      	mov	r4, r3
 80010fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001100:	6028      	str	r0, [r5, #0]
 8001102:	6069      	str	r1, [r5, #4]
 8001104:	60aa      	str	r2, [r5, #8]
 8001106:	60eb      	str	r3, [r5, #12]
 8001108:	cc07      	ldmia	r4!, {r0, r1, r2}
 800110a:	6128      	str	r0, [r5, #16]
 800110c:	6169      	str	r1, [r5, #20]
 800110e:	61aa      	str	r2, [r5, #24]
 8001110:	7823      	ldrb	r3, [r4, #0]
 8001112:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001114:	4855      	ldr	r0, [pc, #340]	; (800126c <output_AX25+0x180>)
 8001116:	f7ff f87b 	bl	8000210 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	4952      	ldr	r1, [pc, #328]	; (800126c <output_AX25+0x180>)
 8001122:	4854      	ldr	r0, [pc, #336]	; (8001274 <output_AX25+0x188>)
 8001124:	f005 fba1 	bl	800686a <HAL_UART_Transmit>

	int wave_start = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	freqSelect = true;
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <output_AX25+0x18c>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
	bool dumbbits[3] = { 0, 1, 1 };
 8001132:	4a52      	ldr	r2, [pc, #328]	; (800127c <output_AX25+0x190>)
 8001134:	463b      	mov	r3, r7
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4611      	mov	r1, r2
 800113a:	8019      	strh	r1, [r3, #0]
 800113c:	3302      	adds	r3, #2
 800113e:	0c12      	lsrs	r2, r2, #16
 8001140:	701a      	strb	r2, [r3, #0]
	//Init dac playing some frequency, shouldn't be read by radio
	wave_start = bitToAudio(dumbbits, 3,1,wave_start); //start flag
 8001142:	4638      	mov	r0, r7
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2201      	movs	r2, #1
 8001148:	2103      	movs	r1, #3
 800114a:	f001 f913 	bl	8002374 <bitToAudio>
 800114e:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 8001150:	2201      	movs	r2, #1
 8001152:	2110      	movs	r1, #16
 8001154:	484a      	ldr	r0, [pc, #296]	; (8001280 <output_AX25+0x194>)
 8001156:	f004 f9a5 	bl	80054a4 <HAL_GPIO_WritePin>
	wave_start = bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start); //start flag
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	2108      	movs	r1, #8
 8001160:	4848      	ldr	r0, [pc, #288]	; (8001284 <output_AX25+0x198>)
 8001162:	f001 f907 	bl	8002374 <bitToAudio>
 8001166:	60f8      	str	r0, [r7, #12]

	//Real information fields
	//wave_start = bitToAudio(local_packet->address, address_len,1,wave_start); 		//lsb first
	//wave_start = bitToAudio(local_packet->control,control_len,1,wave_start);			//lsb first
	wave_start = bitToAudio(local_packet->PID,PID_len,1,wave_start);					//lsb first
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800116e:	3318      	adds	r3, #24
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	2108      	movs	r1, #8
 8001178:	f001 f8fc 	bl	8002374 <bitToAudio>
 800117c:	60f8      	str	r0, [r7, #12]
	//wave_start = bitToAudio(local_packet->Info,local_packet->Info_Len,1,wave_start);	//lsb first
	//bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS,0,wave_start);	//msb first

	//bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start);//stop flag

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800117e:	2100      	movs	r1, #0
 8001180:	4841      	ldr	r0, [pc, #260]	; (8001288 <output_AX25+0x19c>)
 8001182:	f003 fac7 	bl	8004714 <HAL_DAC_Stop_DMA>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 8001186:	2200      	movs	r2, #0
 8001188:	2110      	movs	r1, #16
 800118a:	483d      	ldr	r0, [pc, #244]	; (8001280 <output_AX25+0x194>)
 800118c:	f004 f98a 	bl	80054a4 <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 8001190:	4a36      	ldr	r2, [pc, #216]	; (800126c <output_AX25+0x180>)
 8001192:	4b3e      	ldr	r3, [pc, #248]	; (800128c <output_AX25+0x1a0>)
 8001194:	4615      	mov	r5, r2
 8001196:	461c      	mov	r4, r3
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	6028      	str	r0, [r5, #0]
 800119c:	6069      	str	r1, [r5, #4]
 800119e:	60aa      	str	r2, [r5, #8]
 80011a0:	60eb      	str	r3, [r5, #12]
 80011a2:	cc03      	ldmia	r4!, {r0, r1}
 80011a4:	6128      	str	r0, [r5, #16]
 80011a6:	6169      	str	r1, [r5, #20]
 80011a8:	8823      	ldrh	r3, [r4, #0]
 80011aa:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011ac:	482f      	ldr	r0, [pc, #188]	; (800126c <output_AX25+0x180>)
 80011ae:	f7ff f82f 	bl	8000210 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	230a      	movs	r3, #10
 80011b8:	492c      	ldr	r1, [pc, #176]	; (800126c <output_AX25+0x180>)
 80011ba:	482e      	ldr	r0, [pc, #184]	; (8001274 <output_AX25+0x188>)
 80011bc:	f005 fb55 	bl	800686a <HAL_UART_Transmit>

	//Debugging mode that will repeat send message. Must restart to stop or change message
	if(BROADCASTR){
		const int millis = 2000;
 80011c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011c4:	60bb      	str	r3, [r7, #8]
		sprintf(uartData, "BROADCASTING WILL REPEAT IN A %d MILLISSECOND",millis);
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	4931      	ldr	r1, [pc, #196]	; (8001290 <output_AX25+0x1a4>)
 80011ca:	4828      	ldr	r0, [pc, #160]	; (800126c <output_AX25+0x180>)
 80011cc:	f006 fa8e 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011d0:	4826      	ldr	r0, [pc, #152]	; (800126c <output_AX25+0x180>)
 80011d2:	f7ff f81d 	bl	8000210 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	230a      	movs	r3, #10
 80011dc:	4923      	ldr	r1, [pc, #140]	; (800126c <output_AX25+0x180>)
 80011de:	4825      	ldr	r0, [pc, #148]	; (8001274 <output_AX25+0x188>)
 80011e0:	f005 fb43 	bl	800686a <HAL_UART_Transmit>

		int millis_div = (millis * 1.0) / 10 * 1.0;
 80011e4:	68b8      	ldr	r0, [r7, #8]
 80011e6:	f7ff f9bd 	bl	8000564 <__aeabi_i2d>
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b29      	ldr	r3, [pc, #164]	; (8001294 <output_AX25+0x1a8>)
 80011f0:	f7ff fb4c 	bl	800088c <__aeabi_ddiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	4618      	mov	r0, r3
 80011fa:	4621      	mov	r1, r4
 80011fc:	f7ff fc2e 	bl	8000a5c <__aeabi_d2iz>
 8001200:	4603      	mov	r3, r0
 8001202:	607b      	str	r3, [r7, #4]
		for(int i = 0;i<10;i++){
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e014      	b.n	8001234 <output_AX25+0x148>
			sprintf(uartData, " . ");
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <output_AX25+0x180>)
 800120c:	4a22      	ldr	r2, [pc, #136]	; (8001298 <output_AX25+0x1ac>)
 800120e:	6810      	ldr	r0, [r2, #0]
 8001210:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001212:	4816      	ldr	r0, [pc, #88]	; (800126c <output_AX25+0x180>)
 8001214:	f7fe fffc 	bl	8000210 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	230a      	movs	r3, #10
 800121e:	4913      	ldr	r1, [pc, #76]	; (800126c <output_AX25+0x180>)
 8001220:	4814      	ldr	r0, [pc, #80]	; (8001274 <output_AX25+0x188>)
 8001222:	f005 fb22 	bl	800686a <HAL_UART_Transmit>
			HAL_Delay(millis_div);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f83f 	bl	80042ac <HAL_Delay>
		for(int i = 0;i<10;i++){
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b09      	cmp	r3, #9
 8001238:	dde7      	ble.n	800120a <output_AX25+0x11e>
		}
		sprintf(uartData, "\n\n");
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <output_AX25+0x180>)
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <output_AX25+0x1b0>)
 800123e:	8811      	ldrh	r1, [r2, #0]
 8001240:	7892      	ldrb	r2, [r2, #2]
 8001242:	8019      	strh	r1, [r3, #0]
 8001244:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <output_AX25+0x180>)
 8001248:	f7fe ffe2 	bl	8000210 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29a      	uxth	r2, r3
 8001250:	230a      	movs	r3, #10
 8001252:	4906      	ldr	r1, [pc, #24]	; (800126c <output_AX25+0x180>)
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <output_AX25+0x188>)
 8001256:	f005 fb08 	bl	800686a <HAL_UART_Transmit>
		output_AX25();
 800125a:	f7ff ff47 	bl	80010ec <output_AX25>
	}
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bdb0      	pop	{r4, r5, r7, pc}
 8001266:	bf00      	nop
 8001268:	20000a34 	.word	0x20000a34
 800126c:	20002638 	.word	0x20002638
 8001270:	08007ffc 	.word	0x08007ffc
 8001274:	200034f4 	.word	0x200034f4
 8001278:	20000a18 	.word	0x20000a18
 800127c:	08008070 	.word	0x08008070
 8001280:	40020800 	.word	0x40020800
 8001284:	20000008 	.word	0x20000008
 8001288:	200034a0 	.word	0x200034a0
 800128c:	0800801c 	.word	0x0800801c
 8001290:	08008038 	.word	0x08008038
 8001294:	40240000 	.word	0x40240000
 8001298:	08008068 	.word	0x08008068
 800129c:	0800806c 	.word	0x0800806c

080012a0 <clear_AX25>:

void clear_AX25(){
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <clear_AX25+0x5c>)
 80012a8:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <clear_AX25+0x60>)
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <clear_AX25+0x64>)
 80012ae:	4615      	mov	r5, r2
 80012b0:	461c      	mov	r4, r3
 80012b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b4:	6028      	str	r0, [r5, #0]
 80012b6:	6069      	str	r1, [r5, #4]
 80012b8:	60aa      	str	r2, [r5, #8]
 80012ba:	60eb      	str	r3, [r5, #12]
 80012bc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80012be:	6128      	str	r0, [r5, #16]
 80012c0:	6169      	str	r1, [r5, #20]
 80012c2:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012c4:	480e      	ldr	r0, [pc, #56]	; (8001300 <clear_AX25+0x60>)
 80012c6:	f7fe ffa3 	bl	8000210 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	230a      	movs	r3, #10
 80012d0:	490b      	ldr	r1, [pc, #44]	; (8001300 <clear_AX25+0x60>)
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <clear_AX25+0x68>)
 80012d4:	f005 fac9 	bl	800686a <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f640 225f 	movw	r2, #2655	; 0xa5f
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 f9d7 	bl	8007694 <memcpy>
	local_packet->got_packet = false;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80012ec:	3309      	adds	r3, #9
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000a34 	.word	0x20000a34
 8001300:	20002638 	.word	0x20002638
 8001304:	08008074 	.word	0x08008074
 8001308:	200034f4 	.word	0x200034f4

0800130c <UART2_EXCEPTION_CALLBACK>:
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 8001310:	2201      	movs	r2, #1
 8001312:	491d      	ldr	r1, [pc, #116]	; (8001388 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8001314:	481d      	ldr	r0, [pc, #116]	; (800138c <UART2_EXCEPTION_CALLBACK+0x80>)
 8001316:	f005 fb41 	bl	800699c <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800131c:	2200      	movs	r2, #0
 800131e:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001322:	7b1b      	ldrb	r3, [r3, #12]
 8001324:	2bc0      	cmp	r3, #192	; 0xc0
 8001326:	d104      	bne.n	8001332 <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	3301      	adds	r3, #1
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001330:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <UART2_EXCEPTION_CALLBACK+0x88>)
 800133a:	4413      	add	r3, r2
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800133e:	7b12      	ldrb	r2, [r2, #12]
 8001340:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800134a:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	dd16      	ble.n	8001382 <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f083 0301 	eor.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <UART2_EXCEPTION_CALLBACK+0x90>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001370:	2201      	movs	r2, #1
 8001372:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800137a:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <UART2_EXCEPTION_CALLBACK+0x84>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

	  }
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20001dac 	.word	0x20001dac
 800138c:	200034f4 	.word	0x200034f4
 8001390:	20001da0 	.word	0x20001da0
 8001394:	20001dae 	.word	0x20001dae
 8001398:	2000349c 	.word	0x2000349c
 800139c:	20000a05 	.word	0x20000a05

080013a0 <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80013a6:	4a51      	ldr	r2, [pc, #324]	; (80014ec <receiving_AX25+0x14c>)
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <receiving_AX25+0x150>)
 80013aa:	4615      	mov	r5, r2
 80013ac:	461c      	mov	r4, r3
 80013ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b0:	6028      	str	r0, [r5, #0]
 80013b2:	6069      	str	r1, [r5, #4]
 80013b4:	60aa      	str	r2, [r5, #8]
 80013b6:	60eb      	str	r3, [r5, #12]
 80013b8:	cc03      	ldmia	r4!, {r0, r1}
 80013ba:	6128      	str	r0, [r5, #16]
 80013bc:	6169      	str	r1, [r5, #20]
 80013be:	7823      	ldrb	r3, [r4, #0]
 80013c0:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013c2:	484a      	ldr	r0, [pc, #296]	; (80014ec <receiving_AX25+0x14c>)
 80013c4:	f7fe ff24 	bl	8000210 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	230a      	movs	r3, #10
 80013ce:	4947      	ldr	r1, [pc, #284]	; (80014ec <receiving_AX25+0x14c>)
 80013d0:	4848      	ldr	r0, [pc, #288]	; (80014f4 <receiving_AX25+0x154>)
 80013d2:	f005 fa4a 	bl	800686a <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <receiving_AX25+0x158>)
 80013d8:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 80013da:	f001 fa23 	bl	8002824 <streamGet>
 80013de:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d13b      	bne.n	800145e <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80013ec:	3308      	adds	r3, #8
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 80013f2:	f000 f889 	bl	8001508 <AX25_Packet_Validate>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 8001400:	f000 f9aa 	bl	8001758 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f640 225f 	movw	r2, #2655	; 0xa5f
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f006 f965 	bl	80076dc <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 8001412:	f7ff ffc5 	bl	80013a0 <receiving_AX25>
 8001416:	e065      	b.n	80014e4 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <receiving_AX25+0x14c>)
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <receiving_AX25+0x15c>)
 800141c:	4614      	mov	r4, r2
 800141e:	469c      	mov	ip, r3
 8001420:	f104 0e20 	add.w	lr, r4, #32
 8001424:	4665      	mov	r5, ip
 8001426:	4626      	mov	r6, r4
 8001428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800142a:	6028      	str	r0, [r5, #0]
 800142c:	6069      	str	r1, [r5, #4]
 800142e:	60aa      	str	r2, [r5, #8]
 8001430:	60eb      	str	r3, [r5, #12]
 8001432:	3410      	adds	r4, #16
 8001434:	f10c 0c10 	add.w	ip, ip, #16
 8001438:	4574      	cmp	r4, lr
 800143a:	d1f3      	bne.n	8001424 <receiving_AX25+0x84>
 800143c:	4662      	mov	r2, ip
 800143e:	4623      	mov	r3, r4
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001444:	4829      	ldr	r0, [pc, #164]	; (80014ec <receiving_AX25+0x14c>)
 8001446:	f7fe fee3 	bl	8000210 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	230a      	movs	r3, #10
 8001450:	4926      	ldr	r1, [pc, #152]	; (80014ec <receiving_AX25+0x14c>)
 8001452:	4828      	ldr	r0, [pc, #160]	; (80014f4 <receiving_AX25+0x154>)
 8001454:	f005 fa09 	bl	800686a <HAL_UART_Transmit>
			receiving_AX25();
 8001458:	f7ff ffa2 	bl	80013a0 <receiving_AX25>
 800145c:	e042      	b.n	80014e4 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d118      	bne.n	8001498 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <receiving_AX25+0x14c>)
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <receiving_AX25+0x160>)
 800146a:	4615      	mov	r5, r2
 800146c:	461c      	mov	r4, r3
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	6028      	str	r0, [r5, #0]
 8001472:	6069      	str	r1, [r5, #4]
 8001474:	60aa      	str	r2, [r5, #8]
 8001476:	60eb      	str	r3, [r5, #12]
 8001478:	6820      	ldr	r0, [r4, #0]
 800147a:	6128      	str	r0, [r5, #16]
 800147c:	7923      	ldrb	r3, [r4, #4]
 800147e:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001480:	481a      	ldr	r0, [pc, #104]	; (80014ec <receiving_AX25+0x14c>)
 8001482:	f7fe fec5 	bl	8000210 <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	230a      	movs	r3, #10
 800148c:	4917      	ldr	r1, [pc, #92]	; (80014ec <receiving_AX25+0x14c>)
 800148e:	4819      	ldr	r0, [pc, #100]	; (80014f4 <receiving_AX25+0x154>)
 8001490:	f005 f9eb 	bl	800686a <HAL_UART_Transmit>

		return false;
 8001494:	2300      	movs	r3, #0
 8001496:	e025      	b.n	80014e4 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <receiving_AX25+0x14c>)
 800149a:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <receiving_AX25+0x164>)
 800149c:	4614      	mov	r4, r2
 800149e:	469c      	mov	ip, r3
 80014a0:	f104 0e20 	add.w	lr, r4, #32
 80014a4:	4665      	mov	r5, ip
 80014a6:	4626      	mov	r6, r4
 80014a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014aa:	6028      	str	r0, [r5, #0]
 80014ac:	6069      	str	r1, [r5, #4]
 80014ae:	60aa      	str	r2, [r5, #8]
 80014b0:	60eb      	str	r3, [r5, #12]
 80014b2:	3410      	adds	r4, #16
 80014b4:	f10c 0c10 	add.w	ip, ip, #16
 80014b8:	4574      	cmp	r4, lr
 80014ba:	d1f3      	bne.n	80014a4 <receiving_AX25+0x104>
 80014bc:	4663      	mov	r3, ip
 80014be:	4622      	mov	r2, r4
 80014c0:	6810      	ldr	r0, [r2, #0]
 80014c2:	6018      	str	r0, [r3, #0]
 80014c4:	8891      	ldrh	r1, [r2, #4]
 80014c6:	7992      	ldrb	r2, [r2, #6]
 80014c8:	8099      	strh	r1, [r3, #4]
 80014ca:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <receiving_AX25+0x14c>)
 80014ce:	f7fe fe9f 	bl	8000210 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	230a      	movs	r3, #10
 80014d8:	4904      	ldr	r1, [pc, #16]	; (80014ec <receiving_AX25+0x14c>)
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <receiving_AX25+0x154>)
 80014dc:	f005 f9c5 	bl	800686a <HAL_UART_Transmit>
		receiving_AX25();
 80014e0:	f7ff ff5e 	bl	80013a0 <receiving_AX25>
	}
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ec:	20002638 	.word	0x20002638
 80014f0:	08008090 	.word	0x08008090
 80014f4:	200034f4 	.word	0x200034f4
 80014f8:	20000a34 	.word	0x20000a34
 80014fc:	080080ac 	.word	0x080080ac
 8001500:	080080d0 	.word	0x080080d0
 8001504:	080080e8 	.word	0x080080e8

08001508 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <AX25_Packet_Validate+0x5c>)
 8001510:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <AX25_Packet_Validate+0x60>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b77      	cmp	r3, #119	; 0x77
 800151c:	dc0a      	bgt.n	8001534 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <AX25_Packet_Validate+0x64>)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <AX25_Packet_Validate+0x68>)
 8001522:	4614      	mov	r4, r2
 8001524:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001526:	6020      	str	r0, [r4, #0]
 8001528:	6061      	str	r1, [r4, #4]
 800152a:	60a2      	str	r2, [r4, #8]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	7323      	strb	r3, [r4, #12]
		return false;
 8001530:	2300      	movs	r3, #0
 8001532:	e013      	b.n	800155c <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <AX25_Packet_Validate+0x60>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00a      	beq.n	8001556 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <AX25_Packet_Validate+0x64>)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <AX25_Packet_Validate+0x68>)
 8001544:	4614      	mov	r4, r2
 8001546:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001548:	6020      	str	r0, [r4, #0]
 800154a:	6061      	str	r1, [r4, #4]
 800154c:	60a2      	str	r2, [r4, #8]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	7323      	strb	r3, [r4, #12]
		return false;
 8001552:	2300      	movs	r3, #0
 8001554:	e002      	b.n	800155c <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8001556:	f000 f80d 	bl	8001574 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 800155a:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	20000a34 	.word	0x20000a34
 8001568:	20000a00 	.word	0x20000a00
 800156c:	20002638 	.word	0x20002638
 8001570:	08008110 	.word	0x08008110

08001574 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800157a:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <set_packet_pointer_AX25+0x1c0>)
 800157c:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 800157e:	2310      	movs	r3, #16
 8001580:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 8001582:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 8001584:	4a6d      	ldr	r2, [pc, #436]	; (800173c <set_packet_pointer_AX25+0x1c8>)
 8001586:	4614      	mov	r4, r2
 8001588:	469c      	mov	ip, r3
 800158a:	f104 0e20 	add.w	lr, r4, #32
 800158e:	4665      	mov	r5, ip
 8001590:	4626      	mov	r6, r4
 8001592:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001594:	6028      	str	r0, [r5, #0]
 8001596:	6069      	str	r1, [r5, #4]
 8001598:	60aa      	str	r2, [r5, #8]
 800159a:	60eb      	str	r3, [r5, #12]
 800159c:	3410      	adds	r4, #16
 800159e:	f10c 0c10 	add.w	ip, ip, #16
 80015a2:	4574      	cmp	r4, lr
 80015a4:	d1f3      	bne.n	800158e <set_packet_pointer_AX25+0x1a>
 80015a6:	4663      	mov	r3, ip
 80015a8:	4622      	mov	r2, r4
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015ae:	4862      	ldr	r0, [pc, #392]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80015b0:	f7fe fe2e 	bl	8000210 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	230a      	movs	r3, #10
 80015ba:	495f      	ldr	r1, [pc, #380]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80015bc:	4860      	ldr	r0, [pc, #384]	; (8001740 <set_packet_pointer_AX25+0x1cc>)
 80015be:	f005 f954 	bl	800686a <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 80015c6:	4a5c      	ldr	r2, [pc, #368]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80015c8:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <set_packet_pointer_AX25+0x1d0>)
 80015ca:	4615      	mov	r5, r2
 80015cc:	461c      	mov	r4, r3
 80015ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d0:	6028      	str	r0, [r5, #0]
 80015d2:	6069      	str	r1, [r5, #4]
 80015d4:	60aa      	str	r2, [r5, #8]
 80015d6:	60eb      	str	r3, [r5, #12]
 80015d8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80015da:	6128      	str	r0, [r5, #16]
 80015dc:	6169      	str	r1, [r5, #20]
 80015de:	61aa      	str	r2, [r5, #24]
 80015e0:	7823      	ldrb	r3, [r4, #0]
 80015e2:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015e4:	4854      	ldr	r0, [pc, #336]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80015e6:	f7fe fe13 	bl	8000210 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	230a      	movs	r3, #10
 80015f0:	4951      	ldr	r1, [pc, #324]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80015f2:	4853      	ldr	r0, [pc, #332]	; (8001740 <set_packet_pointer_AX25+0x1cc>)
 80015f4:	f005 f939 	bl	800686a <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015fe:	3310      	adds	r3, #16
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3370      	adds	r3, #112	; 0x70
 8001608:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3370      	adds	r3, #112	; 0x70
 800160e:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8001610:	4a49      	ldr	r2, [pc, #292]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 8001612:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <set_packet_pointer_AX25+0x1d4>)
 8001614:	4615      	mov	r5, r2
 8001616:	461c      	mov	r4, r3
 8001618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161a:	6028      	str	r0, [r5, #0]
 800161c:	6069      	str	r1, [r5, #4]
 800161e:	60aa      	str	r2, [r5, #8]
 8001620:	60eb      	str	r3, [r5, #12]
 8001622:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001624:	6128      	str	r0, [r5, #16]
 8001626:	6169      	str	r1, [r5, #20]
 8001628:	61aa      	str	r2, [r5, #24]
 800162a:	7823      	ldrb	r3, [r4, #0]
 800162c:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800162e:	4842      	ldr	r0, [pc, #264]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 8001630:	f7fe fdee 	bl	8000210 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	230a      	movs	r3, #10
 800163a:	493f      	ldr	r1, [pc, #252]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 800163c:	4840      	ldr	r0, [pc, #256]	; (8001740 <set_packet_pointer_AX25+0x1cc>)
 800163e:	f005 f914 	bl	800686a <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001648:	3314      	adds	r3, #20
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3308      	adds	r3, #8
 8001652:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3308      	adds	r3, #8
 8001658:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 800165a:	4a37      	ldr	r2, [pc, #220]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 800165c:	4b3b      	ldr	r3, [pc, #236]	; (800174c <set_packet_pointer_AX25+0x1d8>)
 800165e:	4615      	mov	r5, r2
 8001660:	461c      	mov	r4, r3
 8001662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001664:	6028      	str	r0, [r5, #0]
 8001666:	6069      	str	r1, [r5, #4]
 8001668:	60aa      	str	r2, [r5, #8]
 800166a:	60eb      	str	r3, [r5, #12]
 800166c:	cc03      	ldmia	r4!, {r0, r1}
 800166e:	6128      	str	r0, [r5, #16]
 8001670:	6169      	str	r1, [r5, #20]
 8001672:	7823      	ldrb	r3, [r4, #0]
 8001674:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001676:	4830      	ldr	r0, [pc, #192]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 8001678:	f7fe fdca 	bl	8000210 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	230a      	movs	r3, #10
 8001682:	492d      	ldr	r1, [pc, #180]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 8001684:	482e      	ldr	r0, [pc, #184]	; (8001740 <set_packet_pointer_AX25+0x1cc>)
 8001686:	f005 f8f0 	bl	800686a <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001690:	3318      	adds	r3, #24
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3308      	adds	r3, #8
 800169a:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3308      	adds	r3, #8
 80016a0:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 80016a2:	4a25      	ldr	r2, [pc, #148]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <set_packet_pointer_AX25+0x1dc>)
 80016a6:	4615      	mov	r5, r2
 80016a8:	461c      	mov	r4, r3
 80016aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ac:	6028      	str	r0, [r5, #0]
 80016ae:	6069      	str	r1, [r5, #4]
 80016b0:	60aa      	str	r2, [r5, #8]
 80016b2:	60eb      	str	r3, [r5, #12]
 80016b4:	cc03      	ldmia	r4!, {r0, r1}
 80016b6:	6128      	str	r0, [r5, #16]
 80016b8:	6169      	str	r1, [r5, #20]
 80016ba:	8823      	ldrh	r3, [r4, #0]
 80016bc:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016be:	481e      	ldr	r0, [pc, #120]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80016c0:	f7fe fda6 	bl	8000210 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	230a      	movs	r3, #10
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80016cc:	481c      	ldr	r0, [pc, #112]	; (8001740 <set_packet_pointer_AX25+0x1cc>)
 80016ce:	f005 f8cc 	bl	800686a <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016d8:	331c      	adds	r3, #28
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <set_packet_pointer_AX25+0x1e0>)
 80016f2:	4615      	mov	r5, r2
 80016f4:	461c      	mov	r4, r3
 80016f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f8:	6028      	str	r0, [r5, #0]
 80016fa:	6069      	str	r1, [r5, #4]
 80016fc:	60aa      	str	r2, [r5, #8]
 80016fe:	60eb      	str	r3, [r5, #12]
 8001700:	cc03      	ldmia	r4!, {r0, r1}
 8001702:	6128      	str	r0, [r5, #16]
 8001704:	6169      	str	r1, [r5, #20]
 8001706:	7823      	ldrb	r3, [r4, #0]
 8001708:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800170a:	480b      	ldr	r0, [pc, #44]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 800170c:	f7fe fd80 	bl	8000210 <strlen>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	230a      	movs	r3, #10
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <set_packet_pointer_AX25+0x1c4>)
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <set_packet_pointer_AX25+0x1cc>)
 800171a:	f005 f8a6 	bl	800686a <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001724:	3304      	adds	r3, #4
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	bf00      	nop
 8001734:	20000a34 	.word	0x20000a34
 8001738:	20002638 	.word	0x20002638
 800173c:	08008120 	.word	0x08008120
 8001740:	200034f4 	.word	0x200034f4
 8001744:	08008144 	.word	0x08008144
 8001748:	08008164 	.word	0x08008164
 800174c:	08008184 	.word	0x08008184
 8001750:	080081a0 	.word	0x080081a0
 8001754:	080081bc 	.word	0x080081bc

08001758 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <AX25_TO_KISS+0x10c>)
 8001760:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 8001762:	f7ff ff07 	bl	8001574 <set_packet_pointer_AX25>
	print_AX25();
 8001766:	f001 f989 	bl	8002a7c <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3308      	adds	r3, #8
 800176e:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	493d      	ldr	r1, [pc, #244]	; (8001868 <AX25_TO_KISS+0x110>)
 8001774:	461a      	mov	r2, r3
 8001776:	460b      	mov	r3, r1
 8001778:	cb03      	ldmia	r3!, {r0, r1}
 800177a:	6010      	str	r0, [r2, #0]
 800177c:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3308      	adds	r3, #8
 8001782:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	e014      	b.n	80017b4 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001790:	3310      	adds	r3, #16
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 800179c:	4413      	add	r3, r2
 800179e:	2208      	movs	r2, #8
 80017a0:	4619      	mov	r1, r3
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f005 ff76 	bl	8007694 <memcpy>
		cpy_from_ptr += 8;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b0d      	cmp	r3, #13
 80017b8:	dde7      	ble.n	800178a <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80017c0:	3314      	adds	r3, #20
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2208      	movs	r2, #8
 80017c6:	4619      	mov	r1, r3
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f005 ff63 	bl	8007694 <memcpy>
	cpy_from_ptr += control_len;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3308      	adds	r3, #8
 80017d2:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4924      	ldr	r1, [pc, #144]	; (8001868 <AX25_TO_KISS+0x110>)
 80017d8:	461a      	mov	r2, r3
 80017da:	460b      	mov	r3, r1
 80017dc:	cb03      	ldmia	r3!, {r0, r1}
 80017de:	6010      	str	r0, [r2, #0]
 80017e0:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	e019      	b.n	800181c <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80017ee:	331c      	adds	r3, #28
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	1acb      	subs	r3, r1, r3
 8001802:	3b08      	subs	r3, #8
 8001804:	4413      	add	r3, r2
 8001806:	2208      	movs	r2, #8
 8001808:	4619      	mov	r1, r3
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f005 ff42 	bl	8007694 <memcpy>
		cpy_from_ptr += 8;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3308      	adds	r3, #8
 8001814:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	da00      	bge.n	800182a <AX25_TO_KISS+0xd2>
 8001828:	3307      	adds	r3, #7
 800182a:	10db      	asrs	r3, r3, #3
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4293      	cmp	r3, r2
 8001832:	dbd9      	blt.n	80017e8 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <AX25_TO_KISS+0x110>)
 8001838:	461a      	mov	r2, r3
 800183a:	460b      	mov	r3, r1
 800183c:	cb03      	ldmia	r3!, {r0, r1}
 800183e:	6010      	str	r0, [r2, #0]
 8001840:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001848:	3314      	adds	r3, #20
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2208      	movs	r2, #8
 800184e:	68f9      	ldr	r1, [r7, #12]
 8001850:	4618      	mov	r0, r3
 8001852:	f005 ff1f 	bl	8007694 <memcpy>
	cpy_from_ptr += control_len;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3308      	adds	r3, #8
 800185a:	60fb      	str	r3, [r7, #12]
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000a34 	.word	0x20000a34
 8001868:	20000000 	.word	0x20000000

0800186c <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <receiving_KISS+0xc0>)
 8001874:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <receiving_KISS+0xc4>)
 8001878:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	7b5b      	ldrb	r3, [r3, #13]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d04e      	beq.n	8001920 <receiving_KISS+0xb4>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	461a      	mov	r2, r3
 8001888:	492a      	ldr	r1, [pc, #168]	; (8001934 <receiving_KISS+0xc8>)
 800188a:	482b      	ldr	r0, [pc, #172]	; (8001938 <receiving_KISS+0xcc>)
 800188c:	f005 ff2e 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001890:	4829      	ldr	r0, [pc, #164]	; (8001938 <receiving_KISS+0xcc>)
 8001892:	f7fe fcbd 	bl	8000210 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	230a      	movs	r3, #10
 800189c:	4926      	ldr	r1, [pc, #152]	; (8001938 <receiving_KISS+0xcc>)
 800189e:	4827      	ldr	r0, [pc, #156]	; (800193c <receiving_KISS+0xd0>)
 80018a0:	f004 ffe3 	bl	800686a <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e01f      	b.n	80018f0 <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1e5a      	subs	r2, r3, #1
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4413      	add	r3, r2
 80018bc:	7b9b      	ldrb	r3, [r3, #14]
 80018be:	71fb      	strb	r3, [r7, #7]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	3307      	adds	r3, #7
 80018ce:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2201      	movs	r2, #1
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fa67 	bl	8000dac <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018e4:	3309      	adds	r3, #9
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbdb      	blt.n	80018b0 <receiving_KISS+0x44>
		}

		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001902:	330c      	adds	r3, #12
 8001904:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800190c:	330c      	adds	r3, #12
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3b13      	subs	r3, #19
 8001912:	00da      	lsls	r2, r3, #3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800191a:	601a      	str	r2, [r3, #0]

		return true;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <receiving_KISS+0xb6>
	}
	return false;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20001da0 	.word	0x20001da0
 8001930:	20000a34 	.word	0x20000a34
 8001934:	080081d8 	.word	0x080081d8
 8001938:	20002638 	.word	0x20002638
 800193c:	200034f4 	.word	0x200034f4

08001940 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <set_packet_pointer_KISS+0xac>)
 8001948:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 800194a:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <set_packet_pointer_KISS+0xb0>)
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <set_packet_pointer_KISS+0xb4>)
 800194e:	4614      	mov	r4, r2
 8001950:	461d      	mov	r5, r3
 8001952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001954:	6020      	str	r0, [r4, #0]
 8001956:	6061      	str	r1, [r4, #4]
 8001958:	60a2      	str	r2, [r4, #8]
 800195a:	60e3      	str	r3, [r4, #12]
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	6120      	str	r0, [r4, #16]
 8001960:	6161      	str	r1, [r4, #20]
 8001962:	61a2      	str	r2, [r4, #24]
 8001964:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001966:	4822      	ldr	r0, [pc, #136]	; (80019f0 <set_packet_pointer_KISS+0xb0>)
 8001968:	f7fe fc52 	bl	8000210 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	230a      	movs	r3, #10
 8001972:	491f      	ldr	r1, [pc, #124]	; (80019f0 <set_packet_pointer_KISS+0xb0>)
 8001974:	4820      	ldr	r0, [pc, #128]	; (80019f8 <set_packet_pointer_KISS+0xb8>)
 8001976:	f004 ff78 	bl	800686a <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001986:	330c      	adds	r3, #12
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3b02      	subs	r3, #2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	3b70      	subs	r3, #112	; 0x70
 8001996:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800199e:	3310      	adds	r3, #16
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3b08      	subs	r3, #8
 80019a8:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019b0:	3314      	adds	r3, #20
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3b08      	subs	r3, #8
 80019ba:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019c2:	3318      	adds	r3, #24
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	425b      	negs	r3, r3
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019de:	331c      	adds	r3, #28
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	20000a34 	.word	0x20000a34
 80019f0:	20002638 	.word	0x20002638
 80019f4:	0800820c 	.word	0x0800820c
 80019f8:	200034f4 	.word	0x200034f4

080019fc <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001a02:	4b8b      	ldr	r3, [pc, #556]	; (8001c30 <KISS_TO_AX25+0x234>)
 8001a04:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8001a06:	4b8b      	ldr	r3, [pc, #556]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001a08:	4a8b      	ldr	r2, [pc, #556]	; (8001c38 <KISS_TO_AX25+0x23c>)
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	f104 0e20 	add.w	lr, r4, #32
 8001a12:	4665      	mov	r5, ip
 8001a14:	4626      	mov	r6, r4
 8001a16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a18:	6028      	str	r0, [r5, #0]
 8001a1a:	6069      	str	r1, [r5, #4]
 8001a1c:	60aa      	str	r2, [r5, #8]
 8001a1e:	60eb      	str	r3, [r5, #12]
 8001a20:	3410      	adds	r4, #16
 8001a22:	f10c 0c10 	add.w	ip, ip, #16
 8001a26:	4574      	cmp	r4, lr
 8001a28:	d1f3      	bne.n	8001a12 <KISS_TO_AX25+0x16>
 8001a2a:	4663      	mov	r3, ip
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a32:	4880      	ldr	r0, [pc, #512]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001a34:	f7fe fbec 	bl	8000210 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	497d      	ldr	r1, [pc, #500]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001a40:	487e      	ldr	r0, [pc, #504]	; (8001c3c <KISS_TO_AX25+0x240>)
 8001a42:	f004 ff12 	bl	800686a <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8001a46:	f7ff ff7b 	bl	8001940 <set_packet_pointer_KISS>
	print_KISS();
 8001a4a:	f001 fc87 	bl	800335c <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a5a:	330c      	adds	r3, #12
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3b02      	subs	r3, #2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8001a66:	f7ff fd85 	bl	8001574 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3b70      	subs	r3, #112	; 0x70
 8001a6e:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a76:	3310      	adds	r3, #16
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2270      	movs	r2, #112	; 0x70
 8001a7c:	6839      	ldr	r1, [r7, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 fe08 	bl	8007694 <memcpy>

	cpy_from_ptr -= control_len;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	3b08      	subs	r3, #8
 8001a88:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a90:	3314      	adds	r3, #20
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2208      	movs	r2, #8
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fdfb 	bl	8007694 <memcpy>

	cpy_from_ptr -= PID_len;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3b08      	subs	r3, #8
 8001aa2:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001aaa:	3318      	adds	r3, #24
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2208      	movs	r2, #8
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 fdee 	bl	8007694 <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ace:	331c      	adds	r3, #28
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	f005 fdd9 	bl	8007694 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3380      	adds	r3, #128	; 0x80
 8001aec:	4a54      	ldr	r2, [pc, #336]	; (8001c40 <KISS_TO_AX25+0x244>)
 8001aee:	6013      	str	r3, [r2, #0]
	crc_generate();
 8001af0:	f000 f9d0 	bl	8001e94 <crc_generate>
//	print_AX25();

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001af4:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <KISS_TO_AX25+0x248>)
 8001af8:	4615      	mov	r5, r2
 8001afa:	461c      	mov	r4, r3
 8001afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afe:	6028      	str	r0, [r5, #0]
 8001b00:	6069      	str	r1, [r5, #4]
 8001b02:	60aa      	str	r2, [r5, #8]
 8001b04:	60eb      	str	r3, [r5, #12]
 8001b06:	cc03      	ldmia	r4!, {r0, r1}
 8001b08:	6128      	str	r0, [r5, #16]
 8001b0a:	6169      	str	r1, [r5, #20]
 8001b0c:	7823      	ldrb	r3, [r4, #0]
 8001b0e:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b10:	4848      	ldr	r0, [pc, #288]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b12:	f7fe fb7d 	bl	8000210 <strlen>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	4945      	ldr	r1, [pc, #276]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b1e:	4847      	ldr	r0, [pc, #284]	; (8001c3c <KISS_TO_AX25+0x240>)
 8001b20:	f004 fea3 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e015      	b.n	8001b56 <KISS_TO_AX25+0x15a>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	4944      	ldr	r1, [pc, #272]	; (8001c48 <KISS_TO_AX25+0x24c>)
 8001b36:	483f      	ldr	r0, [pc, #252]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b38:	f005 fdd8 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b3c:	483d      	ldr	r0, [pc, #244]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b3e:	f7fe fb67 	bl	8000210 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	230a      	movs	r3, #10
 8001b48:	493a      	ldr	r1, [pc, #232]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b4a:	483c      	ldr	r0, [pc, #240]	; (8001c3c <KISS_TO_AX25+0x240>)
 8001b4c:	f004 fe8d 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <KISS_TO_AX25+0x244>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3310      	adds	r3, #16
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	dbe3      	blt.n	8001b2a <KISS_TO_AX25+0x12e>
	}
	sprintf(uartData, "\n");
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <KISS_TO_AX25+0x250>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b6a:	4832      	ldr	r0, [pc, #200]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b6c:	f7fe fb50 	bl	8000210 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	230a      	movs	r3, #10
 8001b76:	492f      	ldr	r1, [pc, #188]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b78:	4830      	ldr	r0, [pc, #192]	; (8001c3c <KISS_TO_AX25+0x240>)
 8001b7a:	f004 fe76 	bl	800686a <HAL_UART_Transmit>

	//BIT STUFFING NEEDED
	bitstuffing(local_packet);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f87e 	bl	8001c80 <bitstuffing>

	sprintf(uartData, "\n line Bit stuffed AX25 = \n");
 8001b84:	4a2b      	ldr	r2, [pc, #172]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <KISS_TO_AX25+0x254>)
 8001b88:	4615      	mov	r5, r2
 8001b8a:	461c      	mov	r4, r3
 8001b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8e:	6028      	str	r0, [r5, #0]
 8001b90:	6069      	str	r1, [r5, #4]
 8001b92:	60aa      	str	r2, [r5, #8]
 8001b94:	60eb      	str	r3, [r5, #12]
 8001b96:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b98:	6128      	str	r0, [r5, #16]
 8001b9a:	6169      	str	r1, [r5, #20]
 8001b9c:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b9e:	4825      	ldr	r0, [pc, #148]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001ba0:	f7fe fb36 	bl	8000210 <strlen>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	230a      	movs	r3, #10
 8001baa:	4922      	ldr	r1, [pc, #136]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001bac:	4823      	ldr	r0, [pc, #140]	; (8001c3c <KISS_TO_AX25+0x240>)
 8001bae:	f004 fe5c 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	e015      	b.n	8001be4 <KISS_TO_AX25+0x1e8>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4921      	ldr	r1, [pc, #132]	; (8001c48 <KISS_TO_AX25+0x24c>)
 8001bc4:	481b      	ldr	r0, [pc, #108]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001bc6:	f005 fd91 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001bca:	481a      	ldr	r0, [pc, #104]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001bcc:	f7fe fb20 	bl	8000210 <strlen>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	4917      	ldr	r1, [pc, #92]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001bd8:	4818      	ldr	r0, [pc, #96]	; (8001c3c <KISS_TO_AX25+0x240>)
 8001bda:	f004 fe46 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3301      	adds	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <KISS_TO_AX25+0x244>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f103 0210 	add.w	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbdc      	blt.n	8001bb8 <KISS_TO_AX25+0x1bc>
	}
	sprintf(uartData, "\n");
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <KISS_TO_AX25+0x250>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001c08:	f7fe fb02 	bl	8000210 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	230a      	movs	r3, #10
 8001c12:	4908      	ldr	r1, [pc, #32]	; (8001c34 <KISS_TO_AX25+0x238>)
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <KISS_TO_AX25+0x240>)
 8001c16:	f004 fe28 	bl	800686a <HAL_UART_Transmit>
	rxBit_count = 0;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <KISS_TO_AX25+0x244>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_outAX25();
 8001c20:	f001 f900 	bl	8002e24 <print_outAX25>
	return true; //valid packet
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000a34 	.word	0x20000a34
 8001c34:	20002638 	.word	0x20002638
 8001c38:	0800822c 	.word	0x0800822c
 8001c3c:	200034f4 	.word	0x200034f4
 8001c40:	20000a00 	.word	0x20000a00
 8001c44:	08008250 	.word	0x08008250
 8001c48:	0800826c 	.word	0x0800826c
 8001c4c:	08008274 	.word	0x08008274
 8001c50:	08008278 	.word	0x08008278

08001c54 <bit_stuff>:


void bit_stuff(bool* array,int bits_left){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	1c98      	adds	r0, r3, #2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3301      	adds	r3, #1
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f005 fd1e 	bl	80076aa <memmove>
	*(array+1) = false;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3301      	adds	r3, #1
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <bitstuffing>:

void bitstuffing(struct PACKET_STRUCT* packet){
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <bitstuffing+0x110>)
 8001c8a:	4a42      	ldr	r2, [pc, #264]	; (8001d94 <bitstuffing+0x114>)
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	469c      	mov	ip, r3
 8001c90:	f104 0e20 	add.w	lr, r4, #32
 8001c94:	4665      	mov	r5, ip
 8001c96:	4626      	mov	r6, r4
 8001c98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c9a:	6028      	str	r0, [r5, #0]
 8001c9c:	6069      	str	r1, [r5, #4]
 8001c9e:	60aa      	str	r2, [r5, #8]
 8001ca0:	60eb      	str	r3, [r5, #12]
 8001ca2:	3410      	adds	r4, #16
 8001ca4:	f10c 0c10 	add.w	ip, ip, #16
 8001ca8:	4574      	cmp	r4, lr
 8001caa:	d1f3      	bne.n	8001c94 <bitstuffing+0x14>
 8001cac:	4663      	mov	r3, ip
 8001cae:	4622      	mov	r2, r4
 8001cb0:	6810      	ldr	r0, [r2, #0]
 8001cb2:	6018      	str	r0, [r3, #0]
 8001cb4:	7912      	ldrb	r2, [r2, #4]
 8001cb6:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001cb8:	4835      	ldr	r0, [pc, #212]	; (8001d90 <bitstuffing+0x110>)
 8001cba:	f7fe faa9 	bl	8000210 <strlen>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	4932      	ldr	r1, [pc, #200]	; (8001d90 <bitstuffing+0x110>)
 8001cc6:	4834      	ldr	r0, [pc, #208]	; (8001d98 <bitstuffing+0x118>)
 8001cc8:	f004 fdcf 	bl	800686a <HAL_UART_Transmit>

	packet->stuffed_address = 0;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cd2:	3310      	adds	r3, #16
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
	packet->stuffed_control = 0;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cde:	3314      	adds	r3, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
	packet->stuffed_PID = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cea:	3318      	adds	r3, #24
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
	packet->stuffed_Info = 0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cf6:	331c      	adds	r3, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
	packet->stuffed_FCS = 0;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

	int ones_count = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
	int bits_left = rxBit_count + FCS_len; 											//keeps track of how many bits have been iterated through in the AX.25 packet
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <bitstuffing+0x11c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3310      	adds	r3, #16
 8001d10:	613b      	str	r3, [r7, #16]
	int bit_stuff_count = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
	bool *curr_mem = packet->AX25_PACKET;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
	int left;

	//Increment through array
	for(int i = 0; i < bits_left+bit_stuff_count; i++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e027      	b.n	8001d70 <bitstuffing+0xf0>
//    	sprintf(uartData, "Current Index = %d; Bits Left = %d; Bit value = %d\n",i,left,*(curr_mem+i));
//    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01c      	beq.n	8001d66 <bitstuffing+0xe6>
        	//Inc ones count
        	ones_count++;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d118      	bne.n	8001d6a <bitstuffing+0xea>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	441a      	add	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
                bit_stuff(curr_mem+i,left);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff80 	bl	8001c54 <bit_stuff>

                bit_stuff_count++;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
                ones_count = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
                i++;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e001      	b.n	8001d6a <bitstuffing+0xea>
            }
        }
        else{
        	ones_count = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < bits_left+bit_stuff_count; i++){
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4413      	add	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbd1      	blt.n	8001d20 <bitstuffing+0xa0>
        }
	}
	packet->bit_stuffed_zeros = bit_stuff_count;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d82:	3304      	adds	r3, #4
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	601a      	str	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	3724      	adds	r7, #36	; 0x24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d90:	20002638 	.word	0x20002638
 8001d94:	08008294 	.word	0x08008294
 8001d98:	200034f4 	.word	0x200034f4
 8001d9c:	20000a00 	.word	0x20000a00

08001da0 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <crc_calc+0xe0>)
 8001dae:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 8001dba:	f248 4308 	movw	r3, #33800	; 0x8408
 8001dbe:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4053      	eors	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	105a      	asrs	r2, r3, #1
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <crc_calc+0x3e>
 8001dd8:	f248 4308 	movw	r3, #33800	; 0x8408
 8001ddc:	e000      	b.n	8001de0 <crc_calc+0x40>
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	405a      	eors	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <crc_calc+0xe4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	db38      	blt.n	8001e76 <crc_calc+0xd6>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8001e0c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4919      	ldr	r1, [pc, #100]	; (8001e88 <crc_calc+0xe8>)
 8001e22:	481a      	ldr	r0, [pc, #104]	; (8001e8c <crc_calc+0xec>)
 8001e24:	f005 fc62 	bl	80076ec <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e28:	4818      	ldr	r0, [pc, #96]	; (8001e8c <crc_calc+0xec>)
 8001e2a:	f7fe f9f1 	bl	8000210 <strlen>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	230a      	movs	r3, #10
 8001e34:	4915      	ldr	r1, [pc, #84]	; (8001e8c <crc_calc+0xec>)
 8001e36:	4816      	ldr	r0, [pc, #88]	; (8001e90 <crc_calc+0xf0>)
 8001e38:	f004 fd17 	bl	800686a <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e42:	3310      	adds	r3, #16
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d012      	beq.n	8001e76 <crc_calc+0xd6>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b298      	uxth	r0, r3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2200      	movs	r2, #0
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe ffa2 	bl	8000dac <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e6e:	3308      	adds	r3, #8
 8001e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e74:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8001e76:	bf00      	nop
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000a34 	.word	0x20000a34
 8001e84:	20000a00 	.word	0x20000a00
 8001e88:	080082bc 	.word	0x080082bc
 8001e8c:	20002638 	.word	0x20002638
 8001e90:	200034f4 	.word	0x200034f4

08001e94 <crc_generate>:

void crc_generate(){
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <crc_generate+0x1d4>)
 8001e9c:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001ea4:	3308      	adds	r3, #8
 8001ea6:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001eae:	330c      	adds	r3, #12
 8001eb0:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	; (800206c <crc_generate+0x1d8>)
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <crc_generate+0x1dc>)
 8001ec4:	4615      	mov	r5, r2
 8001ec6:	461c      	mov	r4, r3
 8001ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eca:	6028      	str	r0, [r5, #0]
 8001ecc:	6069      	str	r1, [r5, #4]
 8001ece:	60aa      	str	r2, [r5, #8]
 8001ed0:	60eb      	str	r3, [r5, #12]
 8001ed2:	cc03      	ldmia	r4!, {r0, r1}
 8001ed4:	6128      	str	r0, [r5, #16]
 8001ed6:	6169      	str	r1, [r5, #20]
 8001ed8:	8823      	ldrh	r3, [r4, #0]
 8001eda:	78a2      	ldrb	r2, [r4, #2]
 8001edc:	832b      	strh	r3, [r5, #24]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ee2:	4862      	ldr	r0, [pc, #392]	; (800206c <crc_generate+0x1d8>)
 8001ee4:	f7fe f994 	bl	8000210 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	230a      	movs	r3, #10
 8001eee:	495f      	ldr	r1, [pc, #380]	; (800206c <crc_generate+0x1d8>)
 8001ef0:	4860      	ldr	r0, [pc, #384]	; (8002074 <crc_generate+0x1e0>)
 8001ef2:	f004 fcba 	bl	800686a <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001efc:	3310      	adds	r3, #16
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3368      	adds	r3, #104	; 0x68
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	e017      	b.n	8001f3a <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e00b      	b.n	8001f28 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff3f 	bl	8001da0 <crc_calc>
		for(int j = 0;j<8;j++){
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b07      	cmp	r3, #7
 8001f2c:	ddf0      	ble.n	8001f10 <crc_generate+0x7c>
		}
		curr_mem -= 8;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3b08      	subs	r3, #8
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	3301      	adds	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2b0d      	cmp	r3, #13
 8001f3e:	dde4      	ble.n	8001f0a <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f46:	3314      	adds	r3, #20
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	e00f      	b.n	8001f72 <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f58:	3314      	adds	r3, #20
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff1a 	bl	8001da0 <crc_calc>
	for(int i = 0; i < control_len; i++){
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b07      	cmp	r3, #7
 8001f76:	ddec      	ble.n	8001f52 <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f7e:	3318      	adds	r3, #24
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00f      	b.n	8001faa <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f90:	3318      	adds	r3, #24
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	4413      	add	r3, r2
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fefe 	bl	8001da0 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b07      	cmp	r3, #7
 8001fae:	ddec      	ble.n	8001f8a <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001fb6:	331c      	adds	r3, #28
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3b08      	subs	r3, #8
 8001fc4:	4413      	add	r3, r2
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e017      	b.n	8001ffe <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e00b      	b.n	8001fec <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fedd 	bl	8001da0 <crc_calc>
		for(int j = 0;j<8;j++){
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	ddf0      	ble.n	8001fd4 <crc_generate+0x140>
		}
		curr_mem -= 8;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3b08      	subs	r3, #8
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da00      	bge.n	800200c <crc_generate+0x178>
 800200a:	3307      	adds	r3, #7
 800200c:	10db      	asrs	r3, r3, #3
 800200e:	461a      	mov	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4293      	cmp	r3, r2
 8002014:	dbdb      	blt.n	8001fce <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <crc_generate+0x1e4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4917      	ldr	r1, [pc, #92]	; (800207c <crc_generate+0x1e8>)
 800201e:	4813      	ldr	r0, [pc, #76]	; (800206c <crc_generate+0x1d8>)
 8002020:	f005 fb64 	bl	80076ec <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002024:	4811      	ldr	r0, [pc, #68]	; (800206c <crc_generate+0x1d8>)
 8002026:	f7fe f8f3 	bl	8000210 <strlen>
 800202a:	4603      	mov	r3, r0
 800202c:	b29a      	uxth	r2, r3
 800202e:	230a      	movs	r3, #10
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <crc_generate+0x1d8>)
 8002032:	4810      	ldr	r0, [pc, #64]	; (8002074 <crc_generate+0x1e0>)
 8002034:	f004 fc19 	bl	800686a <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4910      	ldr	r1, [pc, #64]	; (8002080 <crc_generate+0x1ec>)
 8002040:	480a      	ldr	r0, [pc, #40]	; (800206c <crc_generate+0x1d8>)
 8002042:	f005 fb53 	bl	80076ec <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <crc_generate+0x1d8>)
 8002048:	f7fe f8e2 	bl	8000210 <strlen>
 800204c:	4603      	mov	r3, r0
 800204e:	b29a      	uxth	r2, r3
 8002050:	230a      	movs	r3, #10
 8002052:	4906      	ldr	r1, [pc, #24]	; (800206c <crc_generate+0x1d8>)
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <crc_generate+0x1e0>)
 8002056:	f004 fc08 	bl	800686a <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	20000a34 	.word	0x20000a34
 800206c:	20002638 	.word	0x20002638
 8002070:	080082dc 	.word	0x080082dc
 8002074:	200034f4 	.word	0x200034f4
 8002078:	20000a00 	.word	0x20000a00
 800207c:	080082f8 	.word	0x080082f8
 8002080:	08008308 	.word	0x08008308

08002084 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 800208e:	f000 fa37 	bl	8002500 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <initProgram+0x58>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8002098:	f000 f826 	bl	80020e8 <toggleMode>
	toggleMode();
 800209c:	f000 f824 	bl	80020e8 <toggleMode>

	if (mode) {
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <initProgram+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <initProgram+0x5c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2264      	movs	r2, #100	; 0x64
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <initProgram+0x60>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80020ba:	e008      	b.n	80020ce <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <initProgram+0x5c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <initProgram+0x60>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2268      	movs	r2, #104	; 0x68
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 80020ce:	f7fe ff2b 	bl	8000f28 <init_AX25>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000349c 	.word	0x2000349c
 80020e0:	200034b4 	.word	0x200034b4
 80020e4:	200031fc 	.word	0x200031fc

080020e8 <toggleMode>:



void toggleMode() {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80020ec:	2006      	movs	r0, #6
 80020ee:	f002 fa26 	bl	800453e <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 80020f2:	4b27      	ldr	r3, [pc, #156]	; (8002190 <toggleMode+0xa8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <toggleMode+0xa8>)
 800210e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <toggleMode+0xa8>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	2120      	movs	r1, #32
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <toggleMode+0xac>)
 800211a:	f003 f9c3 	bl	80054a4 <HAL_GPIO_WritePin>
	midbit = false;
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <toggleMode+0xb0>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8002124:	481d      	ldr	r0, [pc, #116]	; (800219c <toggleMode+0xb4>)
 8002126:	f003 ff52 	bl	8005fce <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <toggleMode+0xb4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 8002132:	481b      	ldr	r0, [pc, #108]	; (80021a0 <toggleMode+0xb8>)
 8002134:	f003 ff4b 	bl	8005fce <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <toggleMode+0xb8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <toggleMode+0xa8>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <toggleMode+0xb4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
 8002152:	e015      	b.n	8002180 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <toggleMode+0xbc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f242 7210 	movw	r2, #10000	; 0x2710
 800215c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <toggleMode+0xb4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2268      	movs	r2, #104	; 0x68
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 8002166:	480e      	ldr	r0, [pc, #56]	; (80021a0 <toggleMode+0xb8>)
 8002168:	f003 ff0d 	bl	8005f86 <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 800216c:	480b      	ldr	r0, [pc, #44]	; (800219c <toggleMode+0xb4>)
 800216e:	f003 ff59 	bl	8006024 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002172:	2100      	movs	r1, #0
 8002174:	480c      	ldr	r0, [pc, #48]	; (80021a8 <toggleMode+0xc0>)
 8002176:	f002 facd 	bl	8004714 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800217a:	2006      	movs	r0, #6
 800217c:	f002 f9d1 	bl	8004522 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002186:	4803      	ldr	r0, [pc, #12]	; (8002194 <toggleMode+0xac>)
 8002188:	f003 f98c 	bl	80054a4 <HAL_GPIO_WritePin>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000349c 	.word	0x2000349c
 8002194:	40020000 	.word	0x40020000
 8002198:	20000a04 	.word	0x20000a04
 800219c:	200031fc 	.word	0x200031fc
 80021a0:	20003734 	.word	0x20003734
 80021a4:	200034b4 	.word	0x200034b4
 80021a8:	200034a0 	.word	0x200034a0

080021ac <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	if(canWrite){
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <loadPeriodBuffer+0x64>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01d      	beq.n	80021f8 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 80021bc:	4b15      	ldr	r3, [pc, #84]	; (8002214 <loadPeriodBuffer+0x68>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <loadPeriodBuffer+0x6c>)
 80021c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <loadPeriodBuffer+0x68>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <loadPeriodBuffer+0x68>)
 80021d4:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <loadPeriodBuffer+0x68>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	2b7f      	cmp	r3, #127	; 0x7f
 80021dc:	d902      	bls.n	80021e4 <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <loadPeriodBuffer+0x68>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <loadPeriodBuffer+0x68>)
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <loadPeriodBuffer+0x70>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d106      	bne.n	80021fe <loadPeriodBuffer+0x52>
			canWrite = false;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <loadPeriodBuffer+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e002      	b.n	80021fe <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <loadPeriodBuffer+0x74>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <loadPeriodBuffer+0x78>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20000010 	.word	0x20000010
 8002214:	20000a1a 	.word	0x20000a1a
 8002218:	2000329c 	.word	0x2000329c
 800221c:	20000a1c 	.word	0x20000a1c
 8002220:	20000a06 	.word	0x20000a06
 8002224:	20000a19 	.word	0x20000a19

08002228 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	if (mode) {
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <Tim3IT+0x54>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <Tim3IT+0x14>
		midbit = false;
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <Tim3IT+0x58>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 800223a:	e01c      	b.n	8002276 <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <Tim3IT+0x5c>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d112      	bne.n	800226a <Tim3IT+0x42>
			if(signal_valid){
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <Tim3IT+0x60>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ffac 	bl	80021ac <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <Tim3IT+0x64>)
 8002256:	f003 feba 	bl	8005fce <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <Tim3IT+0x64>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <Tim3IT+0x60>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
}
 8002268:	e005      	b.n	8002276 <Tim3IT+0x4e>
			signal_detect_decay--;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <Tim3IT+0x5c>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <Tim3IT+0x5c>)
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000349c 	.word	0x2000349c
 8002280:	20000a04 	.word	0x20000a04
 8002284:	20000a1e 	.word	0x20000a1e
 8002288:	20000a20 	.word	0x20000a20
 800228c:	20003734 	.word	0x20003734

08002290 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <FreqCounterPinEXTI+0xc0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	461a      	mov	r2, r3
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <FreqCounterPinEXTI+0xc4>)
 80022a0:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 80022a2:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <FreqCounterPinEXTI+0xc4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <FreqCounterPinEXTI+0xc8>)
 80022a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80022ac:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <FreqCounterPinEXTI+0xc4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff7a 	bl	80021ac <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <FreqCounterPinEXTI+0xcc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <FreqCounterPinEXTI+0xd0>)
 80022be:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f240 726c 	movw	r2, #1900	; 0x76c
 80022c6:	4293      	cmp	r3, r2
 80022c8:	dd09      	ble.n	80022de <FreqCounterPinEXTI+0x4e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80022d0:	4293      	cmp	r3, r2
 80022d2:	dc04      	bgt.n	80022de <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <FreqCounterPinEXTI+0xcc>)
 80022d6:	f640 0298 	movw	r2, #2200	; 0x898
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e011      	b.n	8002302 <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022e4:	dd09      	ble.n	80022fa <FreqCounterPinEXTI+0x6a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f240 52db 	movw	r2, #1499	; 0x5db
 80022ec:	4293      	cmp	r3, r2
 80022ee:	dc04      	bgt.n	80022fa <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <FreqCounterPinEXTI+0xcc>)
 80022f2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e003      	b.n	8002302 <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <FreqCounterPinEXTI+0xcc>)
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <FreqCounterPinEXTI+0xcc>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <FreqCounterPinEXTI+0xd0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d104      	bne.n	8002318 <FreqCounterPinEXTI+0x88>
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <FreqCounterPinEXTI+0xcc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d107      	bne.n	8002328 <FreqCounterPinEXTI+0x98>
		edges = 0;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <FreqCounterPinEXTI+0xd4>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <FreqCounterPinEXTI+0xd8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
 8002326:	e004      	b.n	8002332 <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <FreqCounterPinEXTI+0xd4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <FreqCounterPinEXTI+0xd4>)
 8002330:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <FreqCounterPinEXTI+0xdc>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <FreqCounterPinEXTI+0xe0>)
 800233a:	2208      	movs	r2, #8
 800233c:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <FreqCounterPinEXTI+0xc0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200034b4 	.word	0x200034b4
 8002354:	20000a0c 	.word	0x20000a0c
 8002358:	00989680 	.word	0x00989680
 800235c:	20000a14 	.word	0x20000a14
 8002360:	20000a10 	.word	0x20000a10
 8002364:	20000a08 	.word	0x20000a08
 8002368:	20003734 	.word	0x20003734
 800236c:	20000a20 	.word	0x20000a20
 8002370:	20000a1e 	.word	0x20000a1e

08002374 <bitToAudio>:
		sprintf(uartData, "sinArray[%d] = %d\n",i,sinArray[i]);
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}

int bitToAudio(bool *bitStream, int arraySize, bool direction,int wave_start) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	71fb      	strb	r3, [r7, #7]
	bool changeFreq;
	int waveoffset = wave_start;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < arraySize; i++) {
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e073      	b.n	8002476 <bitToAudio+0x102>
		//Check if freq needs to be changed for NRZI
		if(direction){
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <bitToAudio+0x2c>
			changeFreq = bitStream[i];
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	77fb      	strb	r3, [r7, #31]
 800239e:	e007      	b.n	80023b0 <bitToAudio+0x3c>
		} else {
			changeFreq = bitStream[arraySize - i - 1];
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	77fb      	strb	r3, [r7, #31]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, changeFreq);
 80023b0:	7ffb      	ldrb	r3, [r7, #31]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b8:	4835      	ldr	r0, [pc, #212]	; (8002490 <bitToAudio+0x11c>)
 80023ba:	f003 f873 	bl	80054a4 <HAL_GPIO_WritePin>
		//freqSelect = changeFreq;
		freqSelect = (changeFreq) ? freqSelect : !freqSelect;
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <bitToAudio+0x60>
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <bitToAudio+0x120>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e00c      	b.n	80023ee <bitToAudio+0x7a>
 80023d4:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <bitToAudio+0x120>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f083 0301 	eor.w	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <bitToAudio+0x120>)
 80023f0:	7013      	strb	r3, [r2, #0]

		if (freqSelect) {
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <bitToAudio+0x120>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <bitToAudio+0x96>
			htim2.Instance->ARR = 14;
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <bitToAudio+0x124>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	220e      	movs	r2, #14
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * HIGHF) / (1.0 * LOWF);
 8002402:	f240 2326 	movw	r3, #550	; 0x226
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	e006      	b.n	8002418 <bitToAudio+0xa4>
		}
		else {
			htim2.Instance->ARR = 27;
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <bitToAudio+0x124>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	221b      	movs	r2, #27
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * LOWF) / (1.0 * LOWF);
 8002412:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002416:	61bb      	str	r3, [r7, #24]
		}

		//htim2.Instance->CNT = 0;
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4a1f      	ldr	r2, [pc, #124]	; (800249c <bitToAudio+0x128>)
 800241e:	441a      	add	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002428:	2100      	movs	r1, #0
 800242a:	481d      	ldr	r0, [pc, #116]	; (80024a0 <bitToAudio+0x12c>)
 800242c:	f002 f8c4 	bl	80045b8 <HAL_DAC_Start_DMA>
		htim3.Instance->CNT = 0;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <bitToAudio+0x130>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8002438:	481a      	ldr	r0, [pc, #104]	; (80024a4 <bitToAudio+0x130>)
 800243a:	f003 fdf3 	bl	8006024 <HAL_TIM_Base_Start_IT>

		//Calculate ending point for wave
		wave_start = (wave_start+waveoffset+1)%FREQ_SAMP;
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	3301      	adds	r3, #1
 8002446:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <bitToAudio+0x134>)
 8002448:	fb82 1203 	smull	r1, r2, r2, r3
 800244c:	1151      	asrs	r1, r2, #5
 800244e:	17da      	asrs	r2, r3, #31
 8002450:	1a8a      	subs	r2, r1, r2
 8002452:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002456:	fb01 f202 	mul.w	r2, r1, r2
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	603b      	str	r3, [r7, #0]

		midbit = true;
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <bitToAudio+0x138>)
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
		while (midbit){
 8002464:	e000      	b.n	8002468 <bitToAudio+0xf4>
			//In the future this leaves the CPU free for scheduling or something
			__NOP();
 8002466:	bf00      	nop
		while (midbit){
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <bitToAudio+0x138>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1fa      	bne.n	8002466 <bitToAudio+0xf2>
	for (int i = 0; i < arraySize; i++) {
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	429a      	cmp	r2, r3
 800247c:	db87      	blt.n	800238e <bitToAudio+0x1a>
		}

	}

	HAL_TIM_Base_Stop(&htim3);
 800247e:	4809      	ldr	r0, [pc, #36]	; (80024a4 <bitToAudio+0x130>)
 8002480:	f003 fda5 	bl	8005fce <HAL_TIM_Base_Stop>
	return wave_start;
 8002484:	683b      	ldr	r3, [r7, #0]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40020000 	.word	0x40020000
 8002494:	20000a18 	.word	0x20000a18
 8002498:	200034b4 	.word	0x200034b4
 800249c:	20000014 	.word	0x20000014
 80024a0:	200034a0 	.word	0x200034a0
 80024a4:	200031fc 	.word	0x200031fc
 80024a8:	1b4e81b5 	.word	0x1b4e81b5
 80024ac:	20000a04 	.word	0x20000a04

080024b0 <generateBitstream>:
void generateBitstream() {
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <generateBitstream+0x4c>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <generateBitstream+0x4c>)
 80024bc:	2201      	movs	r2, #1
 80024be:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <generateBitstream+0x4c>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <generateBitstream+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <generateBitstream+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <generateBitstream+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <generateBitstream+0x4c>)
 80024da:	2201      	movs	r2, #1
 80024dc:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <generateBitstream+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <generateBitstream+0x4c>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <generateBitstream+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	725a      	strb	r2, [r3, #9]

}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200031f0 	.word	0x200031f0

08002500 <initOUTData>:
void initOUTData() {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8002504:	f7ff ffd4 	bl	80024b0 <generateBitstream>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <pertobit>:
uint16_t	signal_detect_decay = 0;			//Pseudo timer to detect if value is valid
bool		signal_valid = false;					//Determines if frequency being read is a valid bit
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8002514:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <pertobit+0x88>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV)){
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f240 726c 	movw	r2, #1900	; 0x76c
 8002524:	4293      	cmp	r3, r2
 8002526:	dd15      	ble.n	8002554 <pertobit+0x48>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800252e:	4293      	cmp	r3, r2
 8002530:	dc10      	bgt.n	8002554 <pertobit+0x48>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4918      	ldr	r1, [pc, #96]	; (8002598 <pertobit+0x8c>)
 8002536:	4819      	ldr	r0, [pc, #100]	; (800259c <pertobit+0x90>)
 8002538:	f005 f8d8 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800253c:	4817      	ldr	r0, [pc, #92]	; (800259c <pertobit+0x90>)
 800253e:	f7fd fe67 	bl	8000210 <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	b29a      	uxth	r2, r3
 8002546:	230a      	movs	r3, #10
 8002548:	4914      	ldr	r1, [pc, #80]	; (800259c <pertobit+0x90>)
 800254a:	4815      	ldr	r0, [pc, #84]	; (80025a0 <pertobit+0x94>)
 800254c:	f004 f98d 	bl	800686a <HAL_UART_Transmit>
		return 1;
 8002550:	2301      	movs	r3, #1
 8002552:	e01b      	b.n	800258c <pertobit+0x80>
	}
	else if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV)){
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800255a:	dd15      	ble.n	8002588 <pertobit+0x7c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002562:	4293      	cmp	r3, r2
 8002564:	dc10      	bgt.n	8002588 <pertobit+0x7c>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	490b      	ldr	r1, [pc, #44]	; (8002598 <pertobit+0x8c>)
 800256a:	480c      	ldr	r0, [pc, #48]	; (800259c <pertobit+0x90>)
 800256c:	f005 f8be 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002570:	480a      	ldr	r0, [pc, #40]	; (800259c <pertobit+0x90>)
 8002572:	f7fd fe4d 	bl	8000210 <strlen>
 8002576:	4603      	mov	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	230a      	movs	r3, #10
 800257c:	4907      	ldr	r1, [pc, #28]	; (800259c <pertobit+0x90>)
 800257e:	4808      	ldr	r0, [pc, #32]	; (80025a0 <pertobit+0x94>)
 8002580:	f004 f973 	bl	800686a <HAL_UART_Transmit>
		return 0;
 8002584:	2300      	movs	r3, #0
 8002586:	e001      	b.n	800258c <pertobit+0x80>
	}
	else
//		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		return -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	00989680 	.word	0x00989680
 8002598:	08008374 	.word	0x08008374
 800259c:	20002638 	.word	0x20002638
 80025a0:	200034f4 	.word	0x200034f4

080025a4 <loadBit>:
int loadBit(){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
	int startbit;
	int currbit = -1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	617b      	str	r3, [r7, #20]
	int loopCount = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
	int checkCount;
	bool goodbit = false;
 80025b4:	2300      	movs	r3, #0
 80025b6:	72fb      	strb	r3, [r7, #11]

	startbit = pertobit(periodBuffer[trackBit]);
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <loadBit+0xdc>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b31      	ldr	r3, [pc, #196]	; (8002684 <loadBit+0xe0>)
 80025c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ffa1 	bl	800250c <pertobit>
 80025ca:	6078      	str	r0, [r7, #4]
//	sprintf(uartData, "startbit = %d\n",startbit);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	//Increment trackBit
	trackBit++;
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <loadBit+0xdc>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <loadBit+0xdc>)
 80025d6:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <loadBit+0xdc>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	2b7f      	cmp	r3, #127	; 0x7f
 80025de:	d902      	bls.n	80025e6 <loadBit+0x42>
		trackBit = 0;
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <loadBit+0xdc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	801a      	strh	r2, [r3, #0]

	if(startbit==1){
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <loadBit+0x4e>
		checkCount = 3;
 80025ec:	2303      	movs	r3, #3
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e02f      	b.n	8002652 <loadBit+0xae>
	}
	else if(startbit==0){
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <loadBit+0x5a>
		checkCount = 1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e029      	b.n	8002652 <loadBit+0xae>
	}
	else {
		checkCount = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
	}

	//Valiate startbit value
	while(loopCount<checkCount){
 8002602:	e026      	b.n	8002652 <loadBit+0xae>
		currbit = pertobit(periodBuffer[trackBit]);
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <loadBit+0xdc>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <loadBit+0xe0>)
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff7b 	bl	800250c <pertobit>
 8002616:	6178      	str	r0, [r7, #20]

		//Good bit
		if(startbit==currbit){
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	d10c      	bne.n	800263a <loadBit+0x96>
			goodbit = true;
 8002620:	2301      	movs	r3, #1
 8002622:	72fb      	strb	r3, [r7, #11]
			goodbit = false;
			break;
		}

		//Increment trackBit
		trackBit++;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <loadBit+0xdc>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <loadBit+0xdc>)
 800262e:	801a      	strh	r2, [r3, #0]
		if (trackBit >= RX_BUFFERSIZE)
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <loadBit+0xdc>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	2b7f      	cmp	r3, #127	; 0x7f
 8002636:	d909      	bls.n	800264c <loadBit+0xa8>
 8002638:	e005      	b.n	8002646 <loadBit+0xa2>
			currbit = -1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	617b      	str	r3, [r7, #20]
			goodbit = false;
 8002640:	2300      	movs	r3, #0
 8002642:	72fb      	strb	r3, [r7, #11]
			break;
 8002644:	e009      	b.n	800265a <loadBit+0xb6>
			trackBit = 0;
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <loadBit+0xdc>)
 8002648:	2200      	movs	r2, #0
 800264a:	801a      	strh	r2, [r3, #0]
		loopCount++;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	3301      	adds	r3, #1
 8002650:	613b      	str	r3, [r7, #16]
	while(loopCount<checkCount){
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	429a      	cmp	r2, r3
 8002658:	dbd4      	blt.n	8002604 <loadBit+0x60>
	}

	//Increment bitSaveCount
	bitSaveCount++;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <loadBit+0xe4>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <loadBit+0xe4>)
 8002664:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <loadBit+0xe4>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2b7f      	cmp	r3, #127	; 0x7f
 800266c:	d902      	bls.n	8002674 <loadBit+0xd0>
		bitSaveCount = 0;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <loadBit+0xe4>)
 8002670:	2200      	movs	r2, #0
 8002672:	801a      	strh	r2, [r3, #0]

	return currbit;
 8002674:	697b      	ldr	r3, [r7, #20]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000a22 	.word	0x20000a22
 8002684:	2000329c 	.word	0x2000329c
 8002688:	20000a24 	.word	0x20000a24

0800268c <loadOctet>:
int loadOctet(bool* bufferptr) {
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8002694:	2301      	movs	r3, #1
 8002696:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e043      	b.n	8002726 <loadOctet+0x9a>
		bit = loadBit();
 800269e:	f7ff ff81 	bl	80025a4 <loadBit>
 80026a2:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4955      	ldr	r1, [pc, #340]	; (8002800 <loadOctet+0x174>)
 80026aa:	4856      	ldr	r0, [pc, #344]	; (8002804 <loadOctet+0x178>)
 80026ac:	f005 f81e 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026b0:	4854      	ldr	r0, [pc, #336]	; (8002804 <loadOctet+0x178>)
 80026b2:	f7fd fdad 	bl	8000210 <strlen>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	230a      	movs	r3, #10
 80026bc:	4951      	ldr	r1, [pc, #324]	; (8002804 <loadOctet+0x178>)
 80026be:	4852      	ldr	r0, [pc, #328]	; (8002808 <loadOctet+0x17c>)
 80026c0:	f004 f8d3 	bl	800686a <HAL_UART_Transmit>

        if(bit < 0){
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da11      	bge.n	80026ee <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	494f      	ldr	r1, [pc, #316]	; (800280c <loadOctet+0x180>)
 80026ce:	484d      	ldr	r0, [pc, #308]	; (8002804 <loadOctet+0x178>)
 80026d0:	f005 f80c 	bl	80076ec <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026d4:	484b      	ldr	r0, [pc, #300]	; (8002804 <loadOctet+0x178>)
 80026d6:	f7fd fd9b 	bl	8000210 <strlen>
 80026da:	4603      	mov	r3, r0
 80026dc:	b29a      	uxth	r2, r3
 80026de:	230a      	movs	r3, #10
 80026e0:	4948      	ldr	r1, [pc, #288]	; (8002804 <loadOctet+0x178>)
 80026e2:	4849      	ldr	r0, [pc, #292]	; (8002808 <loadOctet+0x17c>)
 80026e4:	f004 f8c1 	bl	800686a <HAL_UART_Transmit>
        	return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	e083      	b.n	80027f6 <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2d9      	uxtb	r1, r3
 80026fa:	f107 0208 	add.w	r2, r7, #8
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	460a      	mov	r2, r1
 8002704:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8002706:	f107 0208 	add.w	r2, r7, #8
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	493f      	ldr	r1, [pc, #252]	; (8002810 <loadOctet+0x184>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	440b      	add	r3, r1
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <loadOctet+0x94>
        	isFlag = false;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	3301      	adds	r3, #1
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b07      	cmp	r3, #7
 800272a:	ddb8      	ble.n	800269e <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 800272c:	7ffb      	ldrb	r3, [r7, #31]
 800272e:	f083 0301 	eor.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05d      	beq.n	80027f4 <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 8002738:	4a32      	ldr	r2, [pc, #200]	; (8002804 <loadOctet+0x178>)
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <loadOctet+0x188>)
 800273c:	4615      	mov	r5, r2
 800273e:	461c      	mov	r4, r3
 8002740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002742:	6028      	str	r0, [r5, #0]
 8002744:	6069      	str	r1, [r5, #4]
 8002746:	60aa      	str	r2, [r5, #8]
 8002748:	60eb      	str	r3, [r5, #12]
 800274a:	cc03      	ldmia	r4!, {r0, r1}
 800274c:	6128      	str	r0, [r5, #16]
 800274e:	6169      	str	r1, [r5, #20]
 8002750:	8823      	ldrh	r3, [r4, #0]
 8002752:	78a2      	ldrb	r2, [r4, #2]
 8002754:	832b      	strh	r3, [r5, #24]
 8002756:	4613      	mov	r3, r2
 8002758:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800275a:	482a      	ldr	r0, [pc, #168]	; (8002804 <loadOctet+0x178>)
 800275c:	f7fd fd58 	bl	8000210 <strlen>
 8002760:	4603      	mov	r3, r0
 8002762:	b29a      	uxth	r2, r3
 8002764:	230a      	movs	r3, #10
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <loadOctet+0x178>)
 8002768:	4827      	ldr	r0, [pc, #156]	; (8002808 <loadOctet+0x17c>)
 800276a:	f004 f87e 	bl	800686a <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e02c      	b.n	80027ce <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	f107 0220 	add.w	r2, r7, #32
 800277e:	4413      	add	r3, r2
 8002780:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	4619      	mov	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	440b      	add	r3, r1
 8002790:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <loadOctet+0x18c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <loadOctet+0x18c>)
 800279a:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	491b      	ldr	r1, [pc, #108]	; (800281c <loadOctet+0x190>)
 80027ae:	4815      	ldr	r0, [pc, #84]	; (8002804 <loadOctet+0x178>)
 80027b0:	f004 ff9c 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027b4:	4813      	ldr	r0, [pc, #76]	; (8002804 <loadOctet+0x178>)
 80027b6:	f7fd fd2b 	bl	8000210 <strlen>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b29a      	uxth	r2, r3
 80027be:	230a      	movs	r3, #10
 80027c0:	4910      	ldr	r1, [pc, #64]	; (8002804 <loadOctet+0x178>)
 80027c2:	4811      	ldr	r0, [pc, #68]	; (8002808 <loadOctet+0x17c>)
 80027c4:	f004 f851 	bl	800686a <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3301      	adds	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b07      	cmp	r3, #7
 80027d2:	ddcf      	ble.n	8002774 <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <loadOctet+0x178>)
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <loadOctet+0x194>)
 80027d8:	8811      	ldrh	r1, [r2, #0]
 80027da:	7892      	ldrb	r2, [r2, #2]
 80027dc:	8019      	strh	r1, [r3, #0]
 80027de:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027e0:	4808      	ldr	r0, [pc, #32]	; (8002804 <loadOctet+0x178>)
 80027e2:	f7fd fd15 	bl	8000210 <strlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	230a      	movs	r3, #10
 80027ec:	4905      	ldr	r1, [pc, #20]	; (8002804 <loadOctet+0x178>)
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <loadOctet+0x17c>)
 80027f0:	f004 f83b 	bl	800686a <HAL_UART_Transmit>
	}
	return isFlag;
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bdb0      	pop	{r4, r5, r7, pc}
 80027fe:	bf00      	nop
 8002800:	08008390 	.word	0x08008390
 8002804:	20002638 	.word	0x20002638
 8002808:	200034f4 	.word	0x200034f4
 800280c:	080083a0 	.word	0x080083a0
 8002810:	20000008 	.word	0x20000008
 8002814:	080083b0 	.word	0x080083b0
 8002818:	20000a00 	.word	0x20000a00
 800281c:	080083cc 	.word	0x080083cc
 8002820:	080083d4 	.word	0x080083d4

08002824 <streamGet>:
int streamGet() {
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b090      	sub	sp, #64	; 0x40
 8002828:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <streamGet+0x228>)
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 800282e:	f240 134b 	movw	r3, #331	; 0x14b
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8002834:	e0fb      	b.n	8002a2e <streamGet+0x20a>
		gotflag = false;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 800283c:	2300      	movs	r3, #0
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
 8002840:	e011      	b.n	8002866 <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	3301      	adds	r3, #1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800284c:	4413      	add	r3, r2
 800284e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800285a:	440b      	add	r3, r1
 800285c:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	3301      	adds	r3, #1
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	2b06      	cmp	r3, #6
 800286a:	ddea      	ble.n	8002842 <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 800286c:	f7ff fe9a 	bl	80025a4 <loadBit>
 8002870:	4603      	mov	r3, r0
 8002872:	623b      	str	r3, [r7, #32]
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002878:	e019      	b.n	80028ae <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002882:	4413      	add	r3, r2
 8002884:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002888:	4971      	ldr	r1, [pc, #452]	; (8002a50 <streamGet+0x22c>)
 800288a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288c:	440a      	add	r2, r1
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	4293      	cmp	r3, r2
 8002892:	d003      	beq.n	800289c <streamGet+0x78>
				gotflag = false;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800289a:	e00b      	b.n	80028b4 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	2b07      	cmp	r3, #7
 80028a0:	d102      	bne.n	80028a8 <streamGet+0x84>
				gotflag = true;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	3301      	adds	r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	2b07      	cmp	r3, #7
 80028b2:	dde2      	ble.n	800287a <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 80028b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80b8 	beq.w	8002a2e <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 80028be:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <streamGet+0x230>)
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <streamGet+0x234>)
 80028c2:	4615      	mov	r5, r2
 80028c4:	461c      	mov	r4, r3
 80028c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c8:	6028      	str	r0, [r5, #0]
 80028ca:	6069      	str	r1, [r5, #4]
 80028cc:	60aa      	str	r2, [r5, #8]
 80028ce:	60eb      	str	r3, [r5, #12]
 80028d0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80028d2:	6128      	str	r0, [r5, #16]
 80028d4:	6169      	str	r1, [r5, #20]
 80028d6:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028d8:	485e      	ldr	r0, [pc, #376]	; (8002a54 <streamGet+0x230>)
 80028da:	f7fd fc99 	bl	8000210 <strlen>
 80028de:	4603      	mov	r3, r0
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	230a      	movs	r3, #10
 80028e4:	495b      	ldr	r1, [pc, #364]	; (8002a54 <streamGet+0x230>)
 80028e6:	485d      	ldr	r0, [pc, #372]	; (8002a5c <streamGet+0x238>)
 80028e8:	f003 ffbf 	bl	800686a <HAL_UART_Transmit>
			octet_count  = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 80028f4:	e01a      	b.n	800292c <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 80028f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028fc:	4413      	add	r3, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fec4 	bl	800268c <loadOctet>
 8002904:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800290a:	4955      	ldr	r1, [pc, #340]	; (8002a60 <streamGet+0x23c>)
 800290c:	4851      	ldr	r0, [pc, #324]	; (8002a54 <streamGet+0x230>)
 800290e:	f004 feed 	bl	80076ec <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002912:	4850      	ldr	r0, [pc, #320]	; (8002a54 <streamGet+0x230>)
 8002914:	f7fd fc7c 	bl	8000210 <strlen>
 8002918:	4603      	mov	r3, r0
 800291a:	b29a      	uxth	r2, r3
 800291c:	230a      	movs	r3, #10
 800291e:	494d      	ldr	r1, [pc, #308]	; (8002a54 <streamGet+0x230>)
 8002920:	484e      	ldr	r0, [pc, #312]	; (8002a5c <streamGet+0x238>)
 8002922:	f003 ffa2 	bl	800686a <HAL_UART_Transmit>

				octet_count+=1;
 8002926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002928:	3301      	adds	r3, #1
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <streamGet+0x116>
 8002932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	429a      	cmp	r2, r3
 8002938:	dbdd      	blt.n	80028f6 <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	2b01      	cmp	r3, #1
 800293e:	d012      	beq.n	8002966 <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 8002940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002942:	4948      	ldr	r1, [pc, #288]	; (8002a64 <streamGet+0x240>)
 8002944:	4843      	ldr	r0, [pc, #268]	; (8002a54 <streamGet+0x230>)
 8002946:	f004 fed1 	bl	80076ec <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800294a:	4842      	ldr	r0, [pc, #264]	; (8002a54 <streamGet+0x230>)
 800294c:	f7fd fc60 	bl	8000210 <strlen>
 8002950:	4603      	mov	r3, r0
 8002952:	b29a      	uxth	r2, r3
 8002954:	230a      	movs	r3, #10
 8002956:	493f      	ldr	r1, [pc, #252]	; (8002a54 <streamGet+0x230>)
 8002958:	4840      	ldr	r0, [pc, #256]	; (8002a5c <streamGet+0x238>)
 800295a:	f003 ff86 	bl	800686a <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002964:	e063      	b.n	8002a2e <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 8002966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	429a      	cmp	r2, r3
 800296c:	db12      	blt.n	8002994 <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 800296e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002970:	493d      	ldr	r1, [pc, #244]	; (8002a68 <streamGet+0x244>)
 8002972:	4838      	ldr	r0, [pc, #224]	; (8002a54 <streamGet+0x230>)
 8002974:	f004 feba 	bl	80076ec <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002978:	4836      	ldr	r0, [pc, #216]	; (8002a54 <streamGet+0x230>)
 800297a:	f7fd fc49 	bl	8000210 <strlen>
 800297e:	4603      	mov	r3, r0
 8002980:	b29a      	uxth	r2, r3
 8002982:	230a      	movs	r3, #10
 8002984:	4933      	ldr	r1, [pc, #204]	; (8002a54 <streamGet+0x230>)
 8002986:	4835      	ldr	r0, [pc, #212]	; (8002a5c <streamGet+0x238>)
 8002988:	f003 ff6f 	bl	800686a <HAL_UART_Transmit>
				gotflag = false;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002992:	e04c      	b.n	8002a2e <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 8002994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12d      	bne.n	80029f6 <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 800299a:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <streamGet+0x230>)
 800299c:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <streamGet+0x248>)
 800299e:	4615      	mov	r5, r2
 80029a0:	461c      	mov	r4, r3
 80029a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a4:	6028      	str	r0, [r5, #0]
 80029a6:	6069      	str	r1, [r5, #4]
 80029a8:	60aa      	str	r2, [r5, #8]
 80029aa:	60eb      	str	r3, [r5, #12]
 80029ac:	cc03      	ldmia	r4!, {r0, r1}
 80029ae:	6128      	str	r0, [r5, #16]
 80029b0:	6169      	str	r1, [r5, #20]
 80029b2:	8823      	ldrh	r3, [r4, #0]
 80029b4:	78a2      	ldrb	r2, [r4, #2]
 80029b6:	832b      	strh	r3, [r5, #24]
 80029b8:	4613      	mov	r3, r2
 80029ba:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029bc:	4825      	ldr	r0, [pc, #148]	; (8002a54 <streamGet+0x230>)
 80029be:	f7fd fc27 	bl	8000210 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	230a      	movs	r3, #10
 80029c8:	4922      	ldr	r1, [pc, #136]	; (8002a54 <streamGet+0x230>)
 80029ca:	4824      	ldr	r0, [pc, #144]	; (8002a5c <streamGet+0x238>)
 80029cc:	f003 ff4d 	bl	800686a <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 80029d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029d2:	4927      	ldr	r1, [pc, #156]	; (8002a70 <streamGet+0x24c>)
 80029d4:	481f      	ldr	r0, [pc, #124]	; (8002a54 <streamGet+0x230>)
 80029d6:	f004 fe89 	bl	80076ec <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029da:	481e      	ldr	r0, [pc, #120]	; (8002a54 <streamGet+0x230>)
 80029dc:	f7fd fc18 	bl	8000210 <strlen>
 80029e0:	4603      	mov	r3, r0
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	230a      	movs	r3, #10
 80029e6:	491b      	ldr	r1, [pc, #108]	; (8002a54 <streamGet+0x230>)
 80029e8:	481c      	ldr	r0, [pc, #112]	; (8002a5c <streamGet+0x238>)
 80029ea:	f003 ff3e 	bl	800686a <HAL_UART_Transmit>
				gotflag = false;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80029f4:	e01b      	b.n	8002a2e <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <streamGet+0x230>)
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <streamGet+0x250>)
 80029fa:	4615      	mov	r5, r2
 80029fc:	461c      	mov	r4, r3
 80029fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a00:	6028      	str	r0, [r5, #0]
 8002a02:	6069      	str	r1, [r5, #4]
 8002a04:	60aa      	str	r2, [r5, #8]
 8002a06:	60eb      	str	r3, [r5, #12]
 8002a08:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002a0a:	6128      	str	r0, [r5, #16]
 8002a0c:	6169      	str	r1, [r5, #20]
 8002a0e:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a10:	4810      	ldr	r0, [pc, #64]	; (8002a54 <streamGet+0x230>)
 8002a12:	f7fd fbfd 	bl	8000210 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	490d      	ldr	r1, [pc, #52]	; (8002a54 <streamGet+0x230>)
 8002a1e:	480f      	ldr	r0, [pc, #60]	; (8002a5c <streamGet+0x238>)
 8002a20:	f003 ff23 	bl	800686a <HAL_UART_Transmit>
				gotflag = false;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e009      	b.n	8002a42 <streamGet+0x21e>
	while(!changeMode){
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <streamGet+0x254>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	f083 0301 	eor.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f aefc 	bne.w	8002836 <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3740      	adds	r7, #64	; 0x40
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000a34 	.word	0x20000a34
 8002a50:	20000008 	.word	0x20000008
 8002a54:	20002638 	.word	0x20002638
 8002a58:	080083d8 	.word	0x080083d8
 8002a5c:	200034f4 	.word	0x200034f4
 8002a60:	080083f4 	.word	0x080083f4
 8002a64:	08008410 	.word	0x08008410
 8002a68:	08008434 	.word	0x08008434
 8002a6c:	08008458 	.word	0x08008458
 8002a70:	08008474 	.word	0x08008474
 8002a74:	08008498 	.word	0x08008498
 8002a78:	20000a05 	.word	0x20000a05

08002a7c <print_AX25>:
 *  Created on: Nov 1, 2020
 *      Author: monke
 */
#include "debug.h"

void print_AX25(){
 8002a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7e:	b08d      	sub	sp, #52	; 0x34
 8002a80:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002a82:	4b90      	ldr	r3, [pc, #576]	; (8002cc4 <print_AX25+0x248>)
 8002a84:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8002a92:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <print_AX25+0x24c>)
 8002a94:	4a8d      	ldr	r2, [pc, #564]	; (8002ccc <print_AX25+0x250>)
 8002a96:	4614      	mov	r4, r2
 8002a98:	469c      	mov	ip, r3
 8002a9a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002a9e:	4665      	mov	r5, ip
 8002aa0:	4626      	mov	r6, r4
 8002aa2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002aa4:	6028      	str	r0, [r5, #0]
 8002aa6:	6069      	str	r1, [r5, #4]
 8002aa8:	60aa      	str	r2, [r5, #8]
 8002aaa:	60eb      	str	r3, [r5, #12]
 8002aac:	3410      	adds	r4, #16
 8002aae:	f10c 0c10 	add.w	ip, ip, #16
 8002ab2:	4574      	cmp	r4, lr
 8002ab4:	d1f3      	bne.n	8002a9e <print_AX25+0x22>
 8002ab6:	4663      	mov	r3, ip
 8002ab8:	4622      	mov	r2, r4
 8002aba:	6810      	ldr	r0, [r2, #0]
 8002abc:	6018      	str	r0, [r3, #0]
 8002abe:	8891      	ldrh	r1, [r2, #4]
 8002ac0:	7992      	ldrb	r2, [r2, #6]
 8002ac2:	8099      	strh	r1, [r3, #4]
 8002ac4:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002ac6:	4880      	ldr	r0, [pc, #512]	; (8002cc8 <print_AX25+0x24c>)
 8002ac8:	f7fd fba2 	bl	8000210 <strlen>
 8002acc:	4603      	mov	r3, r0
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	230a      	movs	r3, #10
 8002ad2:	497d      	ldr	r1, [pc, #500]	; (8002cc8 <print_AX25+0x24c>)
 8002ad4:	487e      	ldr	r0, [pc, #504]	; (8002cd0 <print_AX25+0x254>)
 8002ad6:	f003 fec8 	bl	800686a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->AX25_PACKET) + address_len - 1;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	336f      	adds	r3, #111	; 0x6f
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae4:	e041      	b.n	8002b6a <print_AX25+0xee>
		sprintf(uartData, "Address Field %d =",i+1);
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	3301      	adds	r3, #1
 8002aea:	461a      	mov	r2, r3
 8002aec:	4979      	ldr	r1, [pc, #484]	; (8002cd4 <print_AX25+0x258>)
 8002aee:	4876      	ldr	r0, [pc, #472]	; (8002cc8 <print_AX25+0x24c>)
 8002af0:	f004 fdfc 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002af4:	4874      	ldr	r0, [pc, #464]	; (8002cc8 <print_AX25+0x24c>)
 8002af6:	f7fd fb8b 	bl	8000210 <strlen>
 8002afa:	4603      	mov	r3, r0
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	230a      	movs	r3, #10
 8002b00:	4971      	ldr	r1, [pc, #452]	; (8002cc8 <print_AX25+0x24c>)
 8002b02:	4873      	ldr	r0, [pc, #460]	; (8002cd0 <print_AX25+0x254>)
 8002b04:	f003 feb1 	bl	800686a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0c:	e016      	b.n	8002b3c <print_AX25+0xc0>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	425b      	negs	r3, r3
 8002b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	496f      	ldr	r1, [pc, #444]	; (8002cd8 <print_AX25+0x25c>)
 8002b1c:	486a      	ldr	r0, [pc, #424]	; (8002cc8 <print_AX25+0x24c>)
 8002b1e:	f004 fde5 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b22:	4869      	ldr	r0, [pc, #420]	; (8002cc8 <print_AX25+0x24c>)
 8002b24:	f7fd fb74 	bl	8000210 <strlen>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	230a      	movs	r3, #10
 8002b2e:	4966      	ldr	r1, [pc, #408]	; (8002cc8 <print_AX25+0x24c>)
 8002b30:	4867      	ldr	r0, [pc, #412]	; (8002cd0 <print_AX25+0x254>)
 8002b32:	f003 fe9a 	bl	800686a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	3301      	adds	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	2b07      	cmp	r3, #7
 8002b40:	dde5      	ble.n	8002b0e <print_AX25+0x92>
		}
		curr_mem -= 8;
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	3b08      	subs	r3, #8
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002b48:	4a5f      	ldr	r2, [pc, #380]	; (8002cc8 <print_AX25+0x24c>)
 8002b4a:	4b64      	ldr	r3, [pc, #400]	; (8002cdc <print_AX25+0x260>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b50:	485d      	ldr	r0, [pc, #372]	; (8002cc8 <print_AX25+0x24c>)
 8002b52:	f7fd fb5d 	bl	8000210 <strlen>
 8002b56:	4603      	mov	r3, r0
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	495a      	ldr	r1, [pc, #360]	; (8002cc8 <print_AX25+0x24c>)
 8002b5e:	485c      	ldr	r0, [pc, #368]	; (8002cd0 <print_AX25+0x254>)
 8002b60:	f003 fe83 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	3301      	adds	r3, #1
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2b0d      	cmp	r3, #13
 8002b6e:	ddba      	ble.n	8002ae6 <print_AX25+0x6a>
	}

	//Print Control Field
	curr_mem += address_len;//Subtract 8 to start at the flag start
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	3370      	adds	r3, #112	; 0x70
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002b76:	4a54      	ldr	r2, [pc, #336]	; (8002cc8 <print_AX25+0x24c>)
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <print_AX25+0x264>)
 8002b7a:	4615      	mov	r5, r2
 8002b7c:	461c      	mov	r4, r3
 8002b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b80:	6028      	str	r0, [r5, #0]
 8002b82:	6069      	str	r1, [r5, #4]
 8002b84:	60aa      	str	r2, [r5, #8]
 8002b86:	60eb      	str	r3, [r5, #12]
 8002b88:	8823      	ldrh	r3, [r4, #0]
 8002b8a:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b8c:	484e      	ldr	r0, [pc, #312]	; (8002cc8 <print_AX25+0x24c>)
 8002b8e:	f7fd fb3f 	bl	8000210 <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	230a      	movs	r3, #10
 8002b98:	494b      	ldr	r1, [pc, #300]	; (8002cc8 <print_AX25+0x24c>)
 8002b9a:	484d      	ldr	r0, [pc, #308]	; (8002cd0 <print_AX25+0x254>)
 8002b9c:	f003 fe65 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	e017      	b.n	8002bd6 <print_AX25+0x15a>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	f1c3 0307 	rsb	r3, r3, #7
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4948      	ldr	r1, [pc, #288]	; (8002cd8 <print_AX25+0x25c>)
 8002bb6:	4844      	ldr	r0, [pc, #272]	; (8002cc8 <print_AX25+0x24c>)
 8002bb8:	f004 fd98 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bbc:	4842      	ldr	r0, [pc, #264]	; (8002cc8 <print_AX25+0x24c>)
 8002bbe:	f7fd fb27 	bl	8000210 <strlen>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	493f      	ldr	r1, [pc, #252]	; (8002cc8 <print_AX25+0x24c>)
 8002bca:	4841      	ldr	r0, [pc, #260]	; (8002cd0 <print_AX25+0x254>)
 8002bcc:	f003 fe4d 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2b07      	cmp	r3, #7
 8002bda:	dde4      	ble.n	8002ba6 <print_AX25+0x12a>
	}
	sprintf(uartData, "\n");
 8002bdc:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <print_AX25+0x24c>)
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <print_AX25+0x260>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002be4:	4838      	ldr	r0, [pc, #224]	; (8002cc8 <print_AX25+0x24c>)
 8002be6:	f7fd fb13 	bl	8000210 <strlen>
 8002bea:	4603      	mov	r3, r0
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	230a      	movs	r3, #10
 8002bf0:	4935      	ldr	r1, [pc, #212]	; (8002cc8 <print_AX25+0x24c>)
 8002bf2:	4837      	ldr	r0, [pc, #220]	; (8002cd0 <print_AX25+0x254>)
 8002bf4:	f003 fe39 	bl	800686a <HAL_UART_Transmit>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002bfe:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <print_AX25+0x24c>)
 8002c00:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <print_AX25+0x268>)
 8002c02:	4615      	mov	r5, r2
 8002c04:	461c      	mov	r4, r3
 8002c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c08:	6028      	str	r0, [r5, #0]
 8002c0a:	6069      	str	r1, [r5, #4]
 8002c0c:	60aa      	str	r2, [r5, #8]
 8002c0e:	60eb      	str	r3, [r5, #12]
 8002c10:	8823      	ldrh	r3, [r4, #0]
 8002c12:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c14:	482c      	ldr	r0, [pc, #176]	; (8002cc8 <print_AX25+0x24c>)
 8002c16:	f7fd fafb 	bl	8000210 <strlen>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	230a      	movs	r3, #10
 8002c20:	4929      	ldr	r1, [pc, #164]	; (8002cc8 <print_AX25+0x24c>)
 8002c22:	482b      	ldr	r0, [pc, #172]	; (8002cd0 <print_AX25+0x254>)
 8002c24:	f003 fe21 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e017      	b.n	8002c5e <print_AX25+0x1e2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f1c3 0307 	rsb	r3, r3, #7
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4926      	ldr	r1, [pc, #152]	; (8002cd8 <print_AX25+0x25c>)
 8002c3e:	4822      	ldr	r0, [pc, #136]	; (8002cc8 <print_AX25+0x24c>)
 8002c40:	f004 fd54 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c44:	4820      	ldr	r0, [pc, #128]	; (8002cc8 <print_AX25+0x24c>)
 8002c46:	f7fd fae3 	bl	8000210 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	230a      	movs	r3, #10
 8002c50:	491d      	ldr	r1, [pc, #116]	; (8002cc8 <print_AX25+0x24c>)
 8002c52:	481f      	ldr	r0, [pc, #124]	; (8002cd0 <print_AX25+0x254>)
 8002c54:	f003 fe09 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b07      	cmp	r3, #7
 8002c62:	dde4      	ble.n	8002c2e <print_AX25+0x1b2>
	}
	sprintf(uartData, "\n");
 8002c64:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <print_AX25+0x24c>)
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <print_AX25+0x260>)
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c6c:	4816      	ldr	r0, [pc, #88]	; (8002cc8 <print_AX25+0x24c>)
 8002c6e:	f7fd facf 	bl	8000210 <strlen>
 8002c72:	4603      	mov	r3, r0
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	230a      	movs	r3, #10
 8002c78:	4913      	ldr	r1, [pc, #76]	; (8002cc8 <print_AX25+0x24c>)
 8002c7a:	4815      	ldr	r0, [pc, #84]	; (8002cd0 <print_AX25+0x254>)
 8002c7c:	f003 fdf5 	bl	800686a <HAL_UART_Transmit>
	curr_mem += PID_len;
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	3308      	adds	r3, #8
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Print Info Field
	curr_mem += local_packet->Info_Len - 1;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c92:	4413      	add	r3, r2
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e055      	b.n	8002d48 <print_AX25+0x2cc>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4911      	ldr	r1, [pc, #68]	; (8002ce8 <print_AX25+0x26c>)
 8002ca4:	4808      	ldr	r0, [pc, #32]	; (8002cc8 <print_AX25+0x24c>)
 8002ca6:	f004 fd21 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002caa:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <print_AX25+0x24c>)
 8002cac:	f7fd fab0 	bl	8000210 <strlen>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	230a      	movs	r3, #10
 8002cb6:	4904      	ldr	r1, [pc, #16]	; (8002cc8 <print_AX25+0x24c>)
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <print_AX25+0x254>)
 8002cba:	f003 fdd6 	bl	800686a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e02a      	b.n	8002d1a <print_AX25+0x29e>
 8002cc4:	20000a34 	.word	0x20000a34
 8002cc8:	20002638 	.word	0x20002638
 8002ccc:	080084b4 	.word	0x080084b4
 8002cd0:	200034f4 	.word	0x200034f4
 8002cd4:	080084ec 	.word	0x080084ec
 8002cd8:	08008500 	.word	0x08008500
 8002cdc:	08008508 	.word	0x08008508
 8002ce0:	0800850c 	.word	0x0800850c
 8002ce4:	08008520 	.word	0x08008520
 8002ce8:	08008534 	.word	0x08008534
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	425b      	negs	r3, r3
 8002cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4945      	ldr	r1, [pc, #276]	; (8002e10 <print_AX25+0x394>)
 8002cfa:	4846      	ldr	r0, [pc, #280]	; (8002e14 <print_AX25+0x398>)
 8002cfc:	f004 fcf6 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d00:	4844      	ldr	r0, [pc, #272]	; (8002e14 <print_AX25+0x398>)
 8002d02:	f7fd fa85 	bl	8000210 <strlen>
 8002d06:	4603      	mov	r3, r0
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	230a      	movs	r3, #10
 8002d0c:	4941      	ldr	r1, [pc, #260]	; (8002e14 <print_AX25+0x398>)
 8002d0e:	4842      	ldr	r0, [pc, #264]	; (8002e18 <print_AX25+0x39c>)
 8002d10:	f003 fdab 	bl	800686a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3301      	adds	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	dde5      	ble.n	8002cec <print_AX25+0x270>
		}
		curr_mem -= 8;
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	3b08      	subs	r3, #8
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002d26:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <print_AX25+0x398>)
 8002d28:	4b3c      	ldr	r3, [pc, #240]	; (8002e1c <print_AX25+0x3a0>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d2e:	4839      	ldr	r0, [pc, #228]	; (8002e14 <print_AX25+0x398>)
 8002d30:	f7fd fa6e 	bl	8000210 <strlen>
 8002d34:	4603      	mov	r3, r0
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	230a      	movs	r3, #10
 8002d3a:	4936      	ldr	r1, [pc, #216]	; (8002e14 <print_AX25+0x398>)
 8002d3c:	4836      	ldr	r0, [pc, #216]	; (8002e18 <print_AX25+0x39c>)
 8002d3e:	f003 fd94 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	3301      	adds	r3, #1
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	da00      	bge.n	8002d56 <print_AX25+0x2da>
 8002d54:	3307      	adds	r3, #7
 8002d56:	10db      	asrs	r3, r3, #3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	db9d      	blt.n	8002c9c <print_AX25+0x220>
	}
	curr_mem += local_packet->Info_Len;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

	curr_mem += FCS_len - 8;
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	3308      	adds	r3, #8
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e042      	b.n	8002e02 <print_AX25+0x386>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	461a      	mov	r2, r3
 8002d82:	4927      	ldr	r1, [pc, #156]	; (8002e20 <print_AX25+0x3a4>)
 8002d84:	4823      	ldr	r0, [pc, #140]	; (8002e14 <print_AX25+0x398>)
 8002d86:	f004 fcb1 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d8a:	4822      	ldr	r0, [pc, #136]	; (8002e14 <print_AX25+0x398>)
 8002d8c:	f7fd fa40 	bl	8000210 <strlen>
 8002d90:	4603      	mov	r3, r0
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	230a      	movs	r3, #10
 8002d96:	491f      	ldr	r1, [pc, #124]	; (8002e14 <print_AX25+0x398>)
 8002d98:	481f      	ldr	r0, [pc, #124]	; (8002e18 <print_AX25+0x39c>)
 8002d9a:	f003 fd66 	bl	800686a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e017      	b.n	8002dd4 <print_AX25+0x358>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4917      	ldr	r1, [pc, #92]	; (8002e10 <print_AX25+0x394>)
 8002db4:	4817      	ldr	r0, [pc, #92]	; (8002e14 <print_AX25+0x398>)
 8002db6:	f004 fc99 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002dba:	4816      	ldr	r0, [pc, #88]	; (8002e14 <print_AX25+0x398>)
 8002dbc:	f7fd fa28 	bl	8000210 <strlen>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	4913      	ldr	r1, [pc, #76]	; (8002e14 <print_AX25+0x398>)
 8002dc8:	4813      	ldr	r0, [pc, #76]	; (8002e18 <print_AX25+0x39c>)
 8002dca:	f003 fd4e 	bl	800686a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b07      	cmp	r3, #7
 8002dd8:	dde4      	ble.n	8002da4 <print_AX25+0x328>
		}
		curr_mem -= 8;
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	3b08      	subs	r3, #8
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002de0:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <print_AX25+0x398>)
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <print_AX25+0x3a0>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <print_AX25+0x398>)
 8002dea:	f7fd fa11 	bl	8000210 <strlen>
 8002dee:	4603      	mov	r3, r0
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	230a      	movs	r3, #10
 8002df4:	4907      	ldr	r1, [pc, #28]	; (8002e14 <print_AX25+0x398>)
 8002df6:	4808      	ldr	r0, [pc, #32]	; (8002e18 <print_AX25+0x39c>)
 8002df8:	f003 fd37 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	ddb9      	ble.n	8002d7c <print_AX25+0x300>
	}
}
 8002e08:	bf00      	nop
 8002e0a:	3734      	adds	r7, #52	; 0x34
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e10:	08008500 	.word	0x08008500
 8002e14:	20002638 	.word	0x20002638
 8002e18:	200034f4 	.word	0x200034f4
 8002e1c:	08008508 	.word	0x08008508
 8002e20:	08008548 	.word	0x08008548

08002e24 <print_outAX25>:

void print_outAX25(){
 8002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e26:	b08d      	sub	sp, #52	; 0x34
 8002e28:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002e2a:	4b9b      	ldr	r3, [pc, #620]	; (8003098 <print_outAX25+0x274>)
 8002e2c:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002e34:	330c      	adds	r3, #12
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 8002e3a:	4b98      	ldr	r3, [pc, #608]	; (800309c <print_outAX25+0x278>)
 8002e3c:	4a98      	ldr	r2, [pc, #608]	; (80030a0 <print_outAX25+0x27c>)
 8002e3e:	4614      	mov	r4, r2
 8002e40:	469c      	mov	ip, r3
 8002e42:	f104 0e20 	add.w	lr, r4, #32
 8002e46:	4665      	mov	r5, ip
 8002e48:	4626      	mov	r6, r4
 8002e4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e4c:	6028      	str	r0, [r5, #0]
 8002e4e:	6069      	str	r1, [r5, #4]
 8002e50:	60aa      	str	r2, [r5, #8]
 8002e52:	60eb      	str	r3, [r5, #12]
 8002e54:	3410      	adds	r4, #16
 8002e56:	f10c 0c10 	add.w	ip, ip, #16
 8002e5a:	4574      	cmp	r4, lr
 8002e5c:	d1f3      	bne.n	8002e46 <print_outAX25+0x22>
 8002e5e:	4662      	mov	r2, ip
 8002e60:	4623      	mov	r3, r4
 8002e62:	cb03      	ldmia	r3!, {r0, r1}
 8002e64:	6010      	str	r0, [r2, #0]
 8002e66:	6051      	str	r1, [r2, #4]
 8002e68:	8819      	ldrh	r1, [r3, #0]
 8002e6a:	789b      	ldrb	r3, [r3, #2]
 8002e6c:	8111      	strh	r1, [r2, #8]
 8002e6e:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002e70:	488a      	ldr	r0, [pc, #552]	; (800309c <print_outAX25+0x278>)
 8002e72:	f7fd f9cd 	bl	8000210 <strlen>
 8002e76:	4603      	mov	r3, r0
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	4987      	ldr	r1, [pc, #540]	; (800309c <print_outAX25+0x278>)
 8002e7e:	4889      	ldr	r0, [pc, #548]	; (80030a4 <print_outAX25+0x280>)
 8002e80:	f003 fcf3 	bl	800686a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = local_packet->address;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002e8a:	3310      	adds	r3, #16
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e94:	e040      	b.n	8002f18 <print_outAX25+0xf4>
		sprintf(uartData, "Address Field %d =",i+1);
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	3301      	adds	r3, #1
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4982      	ldr	r1, [pc, #520]	; (80030a8 <print_outAX25+0x284>)
 8002e9e:	487f      	ldr	r0, [pc, #508]	; (800309c <print_outAX25+0x278>)
 8002ea0:	f004 fc24 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002ea4:	487d      	ldr	r0, [pc, #500]	; (800309c <print_outAX25+0x278>)
 8002ea6:	f7fd f9b3 	bl	8000210 <strlen>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	230a      	movs	r3, #10
 8002eb0:	497a      	ldr	r1, [pc, #488]	; (800309c <print_outAX25+0x278>)
 8002eb2:	487c      	ldr	r0, [pc, #496]	; (80030a4 <print_outAX25+0x280>)
 8002eb4:	f003 fcd9 	bl	800686a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	e015      	b.n	8002eea <print_outAX25+0xc6>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4978      	ldr	r1, [pc, #480]	; (80030ac <print_outAX25+0x288>)
 8002eca:	4874      	ldr	r0, [pc, #464]	; (800309c <print_outAX25+0x278>)
 8002ecc:	f004 fc0e 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002ed0:	4872      	ldr	r0, [pc, #456]	; (800309c <print_outAX25+0x278>)
 8002ed2:	f7fd f99d 	bl	8000210 <strlen>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	230a      	movs	r3, #10
 8002edc:	496f      	ldr	r1, [pc, #444]	; (800309c <print_outAX25+0x278>)
 8002ede:	4871      	ldr	r0, [pc, #452]	; (80030a4 <print_outAX25+0x280>)
 8002ee0:	f003 fcc3 	bl	800686a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	2b07      	cmp	r3, #7
 8002eee:	dde6      	ble.n	8002ebe <print_outAX25+0x9a>
		}
		curr_mem += 8;
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002ef6:	4a69      	ldr	r2, [pc, #420]	; (800309c <print_outAX25+0x278>)
 8002ef8:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <print_outAX25+0x28c>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002efe:	4867      	ldr	r0, [pc, #412]	; (800309c <print_outAX25+0x278>)
 8002f00:	f7fd f986 	bl	8000210 <strlen>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	230a      	movs	r3, #10
 8002f0a:	4964      	ldr	r1, [pc, #400]	; (800309c <print_outAX25+0x278>)
 8002f0c:	4865      	ldr	r0, [pc, #404]	; (80030a4 <print_outAX25+0x280>)
 8002f0e:	f003 fcac 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	3301      	adds	r3, #1
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	2b0d      	cmp	r3, #13
 8002f1c:	ddbb      	ble.n	8002e96 <print_outAX25+0x72>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 8002f1e:	4a5f      	ldr	r2, [pc, #380]	; (800309c <print_outAX25+0x278>)
 8002f20:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <print_outAX25+0x290>)
 8002f22:	4614      	mov	r4, r2
 8002f24:	461d      	mov	r5, r3
 8002f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f28:	6020      	str	r0, [r4, #0]
 8002f2a:	6061      	str	r1, [r4, #4]
 8002f2c:	60a2      	str	r2, [r4, #8]
 8002f2e:	60e3      	str	r3, [r4, #12]
 8002f30:	6828      	ldr	r0, [r5, #0]
 8002f32:	6120      	str	r0, [r4, #16]
 8002f34:	88ab      	ldrh	r3, [r5, #4]
 8002f36:	79aa      	ldrb	r2, [r5, #6]
 8002f38:	82a3      	strh	r3, [r4, #20]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	75a3      	strb	r3, [r4, #22]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002f3e:	4857      	ldr	r0, [pc, #348]	; (800309c <print_outAX25+0x278>)
 8002f40:	f7fd f966 	bl	8000210 <strlen>
 8002f44:	4603      	mov	r3, r0
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	230a      	movs	r3, #10
 8002f4a:	4954      	ldr	r1, [pc, #336]	; (800309c <print_outAX25+0x278>)
 8002f4c:	4855      	ldr	r0, [pc, #340]	; (80030a4 <print_outAX25+0x280>)
 8002f4e:	f003 fc8c 	bl	800686a <HAL_UART_Transmit>
	curr_mem += address_len;
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	3370      	adds	r3, #112	; 0x70
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002f5e:	3310      	adds	r3, #16
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	dd21      	ble.n	8002faa <print_outAX25+0x186>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	e016      	b.n	8002f9a <print_outAX25+0x176>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	425b      	negs	r3, r3
 8002f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	494c      	ldr	r1, [pc, #304]	; (80030ac <print_outAX25+0x288>)
 8002f7a:	4848      	ldr	r0, [pc, #288]	; (800309c <print_outAX25+0x278>)
 8002f7c:	f004 fbb6 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002f80:	4846      	ldr	r0, [pc, #280]	; (800309c <print_outAX25+0x278>)
 8002f82:	f7fd f945 	bl	8000210 <strlen>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	4943      	ldr	r1, [pc, #268]	; (800309c <print_outAX25+0x278>)
 8002f8e:	4845      	ldr	r0, [pc, #276]	; (80030a4 <print_outAX25+0x280>)
 8002f90:	f003 fc6b 	bl	800686a <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	3301      	adds	r3, #1
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dbe0      	blt.n	8002f6c <print_outAX25+0x148>
		}
	}
	sprintf(uartData, "\n");
 8002faa:	4a3c      	ldr	r2, [pc, #240]	; (800309c <print_outAX25+0x278>)
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <print_outAX25+0x28c>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002fb2:	483a      	ldr	r0, [pc, #232]	; (800309c <print_outAX25+0x278>)
 8002fb4:	f7fd f92c 	bl	8000210 <strlen>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	230a      	movs	r3, #10
 8002fbe:	4937      	ldr	r1, [pc, #220]	; (800309c <print_outAX25+0x278>)
 8002fc0:	4838      	ldr	r0, [pc, #224]	; (80030a4 <print_outAX25+0x280>)
 8002fc2:	f003 fc52 	bl	800686a <HAL_UART_Transmit>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002fcc:	3314      	adds	r3, #20
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002fd2:	4a32      	ldr	r2, [pc, #200]	; (800309c <print_outAX25+0x278>)
 8002fd4:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <print_outAX25+0x294>)
 8002fd6:	4615      	mov	r5, r2
 8002fd8:	461c      	mov	r4, r3
 8002fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fdc:	6028      	str	r0, [r5, #0]
 8002fde:	6069      	str	r1, [r5, #4]
 8002fe0:	60aa      	str	r2, [r5, #8]
 8002fe2:	60eb      	str	r3, [r5, #12]
 8002fe4:	8823      	ldrh	r3, [r4, #0]
 8002fe6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002fe8:	482c      	ldr	r0, [pc, #176]	; (800309c <print_outAX25+0x278>)
 8002fea:	f7fd f911 	bl	8000210 <strlen>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	4929      	ldr	r1, [pc, #164]	; (800309c <print_outAX25+0x278>)
 8002ff6:	482b      	ldr	r0, [pc, #172]	; (80030a4 <print_outAX25+0x280>)
 8002ff8:	f003 fc37 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	e015      	b.n	800302e <print_outAX25+0x20a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4927      	ldr	r1, [pc, #156]	; (80030ac <print_outAX25+0x288>)
 800300e:	4823      	ldr	r0, [pc, #140]	; (800309c <print_outAX25+0x278>)
 8003010:	f004 fb6c 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003014:	4821      	ldr	r0, [pc, #132]	; (800309c <print_outAX25+0x278>)
 8003016:	f7fd f8fb 	bl	8000210 <strlen>
 800301a:	4603      	mov	r3, r0
 800301c:	b29a      	uxth	r2, r3
 800301e:	230a      	movs	r3, #10
 8003020:	491e      	ldr	r1, [pc, #120]	; (800309c <print_outAX25+0x278>)
 8003022:	4820      	ldr	r0, [pc, #128]	; (80030a4 <print_outAX25+0x280>)
 8003024:	f003 fc21 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003034:	3314      	adds	r3, #20
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbe0      	blt.n	8003002 <print_outAX25+0x1de>
	}
	sprintf(uartData, "\n");
 8003040:	4a16      	ldr	r2, [pc, #88]	; (800309c <print_outAX25+0x278>)
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <print_outAX25+0x28c>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003048:	4814      	ldr	r0, [pc, #80]	; (800309c <print_outAX25+0x278>)
 800304a:	f7fd f8e1 	bl	8000210 <strlen>
 800304e:	4603      	mov	r3, r0
 8003050:	b29a      	uxth	r2, r3
 8003052:	230a      	movs	r3, #10
 8003054:	4911      	ldr	r1, [pc, #68]	; (800309c <print_outAX25+0x278>)
 8003056:	4813      	ldr	r0, [pc, #76]	; (80030a4 <print_outAX25+0x280>)
 8003058:	f003 fc07 	bl	800686a <HAL_UART_Transmit>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003062:	3318      	adds	r3, #24
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8003068:	4a0c      	ldr	r2, [pc, #48]	; (800309c <print_outAX25+0x278>)
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <print_outAX25+0x298>)
 800306c:	4615      	mov	r5, r2
 800306e:	461c      	mov	r4, r3
 8003070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003072:	6028      	str	r0, [r5, #0]
 8003074:	6069      	str	r1, [r5, #4]
 8003076:	60aa      	str	r2, [r5, #8]
 8003078:	60eb      	str	r3, [r5, #12]
 800307a:	8823      	ldrh	r3, [r4, #0]
 800307c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <print_outAX25+0x278>)
 8003080:	f7fd f8c6 	bl	8000210 <strlen>
 8003084:	4603      	mov	r3, r0
 8003086:	b29a      	uxth	r2, r3
 8003088:	230a      	movs	r3, #10
 800308a:	4904      	ldr	r1, [pc, #16]	; (800309c <print_outAX25+0x278>)
 800308c:	4805      	ldr	r0, [pc, #20]	; (80030a4 <print_outAX25+0x280>)
 800308e:	f003 fbec 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e029      	b.n	80030ec <print_outAX25+0x2c8>
 8003098:	20000a34 	.word	0x20000a34
 800309c:	20002638 	.word	0x20002638
 80030a0:	0800855c 	.word	0x0800855c
 80030a4:	200034f4 	.word	0x200034f4
 80030a8:	080084ec 	.word	0x080084ec
 80030ac:	08008500 	.word	0x08008500
 80030b0:	08008508 	.word	0x08008508
 80030b4:	08008588 	.word	0x08008588
 80030b8:	0800850c 	.word	0x0800850c
 80030bc:	08008520 	.word	0x08008520
		sprintf(uartData, " %d ",*(curr_mem+i));
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	499d      	ldr	r1, [pc, #628]	; (8003340 <print_outAX25+0x51c>)
 80030cc:	489d      	ldr	r0, [pc, #628]	; (8003344 <print_outAX25+0x520>)
 80030ce:	f004 fb0d 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80030d2:	489c      	ldr	r0, [pc, #624]	; (8003344 <print_outAX25+0x520>)
 80030d4:	f7fd f89c 	bl	8000210 <strlen>
 80030d8:	4603      	mov	r3, r0
 80030da:	b29a      	uxth	r2, r3
 80030dc:	230a      	movs	r3, #10
 80030de:	4999      	ldr	r1, [pc, #612]	; (8003344 <print_outAX25+0x520>)
 80030e0:	4899      	ldr	r0, [pc, #612]	; (8003348 <print_outAX25+0x524>)
 80030e2:	f003 fbc2 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80030f2:	3318      	adds	r3, #24
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3308      	adds	r3, #8
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	dbe0      	blt.n	80030c0 <print_outAX25+0x29c>
	}
	sprintf(uartData, "\n");
 80030fe:	4a91      	ldr	r2, [pc, #580]	; (8003344 <print_outAX25+0x520>)
 8003100:	4b92      	ldr	r3, [pc, #584]	; (800334c <print_outAX25+0x528>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003106:	488f      	ldr	r0, [pc, #572]	; (8003344 <print_outAX25+0x520>)
 8003108:	f7fd f882 	bl	8000210 <strlen>
 800310c:	4603      	mov	r3, r0
 800310e:	b29a      	uxth	r2, r3
 8003110:	230a      	movs	r3, #10
 8003112:	498c      	ldr	r1, [pc, #560]	; (8003344 <print_outAX25+0x520>)
 8003114:	488c      	ldr	r0, [pc, #560]	; (8003348 <print_outAX25+0x524>)
 8003116:	f003 fba8 	bl	800686a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = local_packet->Info;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003120:	331c      	adds	r3, #28
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e040      	b.n	80031ae <print_outAX25+0x38a>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	461a      	mov	r2, r3
 8003132:	4987      	ldr	r1, [pc, #540]	; (8003350 <print_outAX25+0x52c>)
 8003134:	4883      	ldr	r0, [pc, #524]	; (8003344 <print_outAX25+0x520>)
 8003136:	f004 fad9 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800313a:	4882      	ldr	r0, [pc, #520]	; (8003344 <print_outAX25+0x520>)
 800313c:	f7fd f868 	bl	8000210 <strlen>
 8003140:	4603      	mov	r3, r0
 8003142:	b29a      	uxth	r2, r3
 8003144:	230a      	movs	r3, #10
 8003146:	497f      	ldr	r1, [pc, #508]	; (8003344 <print_outAX25+0x520>)
 8003148:	487f      	ldr	r0, [pc, #508]	; (8003348 <print_outAX25+0x524>)
 800314a:	f003 fb8e 	bl	800686a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e015      	b.n	8003180 <print_outAX25+0x35c>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003158:	4413      	add	r3, r2
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4978      	ldr	r1, [pc, #480]	; (8003340 <print_outAX25+0x51c>)
 8003160:	4878      	ldr	r0, [pc, #480]	; (8003344 <print_outAX25+0x520>)
 8003162:	f004 fac3 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003166:	4877      	ldr	r0, [pc, #476]	; (8003344 <print_outAX25+0x520>)
 8003168:	f7fd f852 	bl	8000210 <strlen>
 800316c:	4603      	mov	r3, r0
 800316e:	b29a      	uxth	r2, r3
 8003170:	230a      	movs	r3, #10
 8003172:	4974      	ldr	r1, [pc, #464]	; (8003344 <print_outAX25+0x520>)
 8003174:	4874      	ldr	r0, [pc, #464]	; (8003348 <print_outAX25+0x524>)
 8003176:	f003 fb78 	bl	800686a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	3301      	adds	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b07      	cmp	r3, #7
 8003184:	dde6      	ble.n	8003154 <print_outAX25+0x330>
		}
		curr_mem += 8;
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	3308      	adds	r3, #8
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800318c:	4a6d      	ldr	r2, [pc, #436]	; (8003344 <print_outAX25+0x520>)
 800318e:	4b6f      	ldr	r3, [pc, #444]	; (800334c <print_outAX25+0x528>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003194:	486b      	ldr	r0, [pc, #428]	; (8003344 <print_outAX25+0x520>)
 8003196:	f7fd f83b 	bl	8000210 <strlen>
 800319a:	4603      	mov	r3, r0
 800319c:	b29a      	uxth	r2, r3
 800319e:	230a      	movs	r3, #10
 80031a0:	4968      	ldr	r1, [pc, #416]	; (8003344 <print_outAX25+0x520>)
 80031a2:	4869      	ldr	r0, [pc, #420]	; (8003348 <print_outAX25+0x524>)
 80031a4:	f003 fb61 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3301      	adds	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da00      	bge.n	80031bc <print_outAX25+0x398>
 80031ba:	3307      	adds	r3, #7
 80031bc:	10db      	asrs	r3, r3, #3
 80031be:	461a      	mov	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4293      	cmp	r3, r2
 80031c4:	dbb2      	blt.n	800312c <print_outAX25+0x308>
	}

	//if Info was bitstuffed then print rest of address field
	sprintf(uartData, "Info Field extra = ");
 80031c6:	4a5f      	ldr	r2, [pc, #380]	; (8003344 <print_outAX25+0x520>)
 80031c8:	4b62      	ldr	r3, [pc, #392]	; (8003354 <print_outAX25+0x530>)
 80031ca:	4615      	mov	r5, r2
 80031cc:	461c      	mov	r4, r3
 80031ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d0:	6028      	str	r0, [r5, #0]
 80031d2:	6069      	str	r1, [r5, #4]
 80031d4:	60aa      	str	r2, [r5, #8]
 80031d6:	60eb      	str	r3, [r5, #12]
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	6128      	str	r0, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80031dc:	4859      	ldr	r0, [pc, #356]	; (8003344 <print_outAX25+0x520>)
 80031de:	f7fd f817 	bl	8000210 <strlen>
 80031e2:	4603      	mov	r3, r0
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	230a      	movs	r3, #10
 80031e8:	4956      	ldr	r1, [pc, #344]	; (8003344 <print_outAX25+0x520>)
 80031ea:	4857      	ldr	r0, [pc, #348]	; (8003348 <print_outAX25+0x524>)
 80031ec:	f003 fb3d 	bl	800686a <HAL_UART_Transmit>
	curr_mem += local_packet->Info_Len;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	4413      	add	r3, r2
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_Info > 0){
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003206:	331c      	adds	r3, #28
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	dd20      	ble.n	8003250 <print_outAX25+0x42c>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e015      	b.n	8003240 <print_outAX25+0x41c>
			sprintf(uartData, " %d ",*(curr_mem+i));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	4948      	ldr	r1, [pc, #288]	; (8003340 <print_outAX25+0x51c>)
 8003220:	4848      	ldr	r0, [pc, #288]	; (8003344 <print_outAX25+0x520>)
 8003222:	f004 fa63 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003226:	4847      	ldr	r0, [pc, #284]	; (8003344 <print_outAX25+0x520>)
 8003228:	f7fc fff2 	bl	8000210 <strlen>
 800322c:	4603      	mov	r3, r0
 800322e:	b29a      	uxth	r2, r3
 8003230:	230a      	movs	r3, #10
 8003232:	4944      	ldr	r1, [pc, #272]	; (8003344 <print_outAX25+0x520>)
 8003234:	4844      	ldr	r0, [pc, #272]	; (8003348 <print_outAX25+0x524>)
 8003236:	f003 fb18 	bl	800686a <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3301      	adds	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003246:	331c      	adds	r3, #28
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	429a      	cmp	r2, r3
 800324e:	dbe1      	blt.n	8003214 <print_outAX25+0x3f0>
		}
	}
	sprintf(uartData, "\n");
 8003250:	4a3c      	ldr	r2, [pc, #240]	; (8003344 <print_outAX25+0x520>)
 8003252:	4b3e      	ldr	r3, [pc, #248]	; (800334c <print_outAX25+0x528>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003258:	483a      	ldr	r0, [pc, #232]	; (8003344 <print_outAX25+0x520>)
 800325a:	f7fc ffd9 	bl	8000210 <strlen>
 800325e:	4603      	mov	r3, r0
 8003260:	b29a      	uxth	r2, r3
 8003262:	230a      	movs	r3, #10
 8003264:	4937      	ldr	r1, [pc, #220]	; (8003344 <print_outAX25+0x520>)
 8003266:	4838      	ldr	r0, [pc, #224]	; (8003348 <print_outAX25+0x524>)
 8003268:	f003 faff 	bl	800686a <HAL_UART_Transmit>

	curr_mem = local_packet->FCS;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003272:	3304      	adds	r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 8003278:	4a32      	ldr	r2, [pc, #200]	; (8003344 <print_outAX25+0x520>)
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <print_outAX25+0x534>)
 800327c:	4614      	mov	r4, r2
 800327e:	461d      	mov	r5, r3
 8003280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003282:	6020      	str	r0, [r4, #0]
 8003284:	6061      	str	r1, [r4, #4]
 8003286:	60a2      	str	r2, [r4, #8]
 8003288:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800328a:	482e      	ldr	r0, [pc, #184]	; (8003344 <print_outAX25+0x520>)
 800328c:	f7fc ffc0 	bl	8000210 <strlen>
 8003290:	4603      	mov	r3, r0
 8003292:	b29a      	uxth	r2, r3
 8003294:	230a      	movs	r3, #10
 8003296:	492b      	ldr	r1, [pc, #172]	; (8003344 <print_outAX25+0x520>)
 8003298:	482b      	ldr	r0, [pc, #172]	; (8003348 <print_outAX25+0x524>)
 800329a:	f003 fae6 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	e015      	b.n	80032d0 <print_outAX25+0x4ac>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4924      	ldr	r1, [pc, #144]	; (8003340 <print_outAX25+0x51c>)
 80032b0:	4824      	ldr	r0, [pc, #144]	; (8003344 <print_outAX25+0x520>)
 80032b2:	f004 fa1b 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80032b6:	4823      	ldr	r0, [pc, #140]	; (8003344 <print_outAX25+0x520>)
 80032b8:	f7fc ffaa 	bl	8000210 <strlen>
 80032bc:	4603      	mov	r3, r0
 80032be:	b29a      	uxth	r2, r3
 80032c0:	230a      	movs	r3, #10
 80032c2:	4920      	ldr	r1, [pc, #128]	; (8003344 <print_outAX25+0x520>)
 80032c4:	4820      	ldr	r0, [pc, #128]	; (8003348 <print_outAX25+0x524>)
 80032c6:	f003 fad0 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3310      	adds	r3, #16
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	dbe1      	blt.n	80032a4 <print_outAX25+0x480>
	}

	sprintf(uartData, "\n");
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <print_outAX25+0x520>)
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <print_outAX25+0x528>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80032e8:	4816      	ldr	r0, [pc, #88]	; (8003344 <print_outAX25+0x520>)
 80032ea:	f7fc ff91 	bl	8000210 <strlen>
 80032ee:	4603      	mov	r3, r0
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	230a      	movs	r3, #10
 80032f4:	4913      	ldr	r1, [pc, #76]	; (8003344 <print_outAX25+0x520>)
 80032f6:	4814      	ldr	r0, [pc, #80]	; (8003348 <print_outAX25+0x524>)
 80032f8:	f003 fab7 	bl	800686a <HAL_UART_Transmit>

	//reset bitstuff members
	local_packet->stuffed_address = 0;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003302:	3310      	adds	r3, #16
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800330e:	3314      	adds	r3, #20
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800331a:	3318      	adds	r3, #24
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003326:	331c      	adds	r3, #28
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
}
 8003336:	bf00      	nop
 8003338:	3734      	adds	r7, #52	; 0x34
 800333a:	46bd      	mov	sp, r7
 800333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333e:	bf00      	nop
 8003340:	08008500 	.word	0x08008500
 8003344:	20002638 	.word	0x20002638
 8003348:	200034f4 	.word	0x200034f4
 800334c:	08008508 	.word	0x08008508
 8003350:	08008534 	.word	0x08008534
 8003354:	080085a0 	.word	0x080085a0
 8003358:	080085b4 	.word	0x080085b4

0800335c <print_KISS>:

void print_KISS(){
 800335c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335e:	b08d      	sub	sp, #52	; 0x34
 8003360:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8003362:	4baf      	ldr	r3, [pc, #700]	; (8003620 <print_KISS+0x2c4>)
 8003364:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800336c:	330c      	adds	r3, #12
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8003372:	4bac      	ldr	r3, [pc, #688]	; (8003624 <print_KISS+0x2c8>)
 8003374:	4aac      	ldr	r2, [pc, #688]	; (8003628 <print_KISS+0x2cc>)
 8003376:	4614      	mov	r4, r2
 8003378:	469c      	mov	ip, r3
 800337a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800337e:	4665      	mov	r5, ip
 8003380:	4626      	mov	r6, r4
 8003382:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003384:	6028      	str	r0, [r5, #0]
 8003386:	6069      	str	r1, [r5, #4]
 8003388:	60aa      	str	r2, [r5, #8]
 800338a:	60eb      	str	r3, [r5, #12]
 800338c:	3410      	adds	r4, #16
 800338e:	f10c 0c10 	add.w	ip, ip, #16
 8003392:	4574      	cmp	r4, lr
 8003394:	d1f3      	bne.n	800337e <print_KISS+0x22>
 8003396:	4663      	mov	r3, ip
 8003398:	4622      	mov	r2, r4
 800339a:	6810      	ldr	r0, [r2, #0]
 800339c:	6018      	str	r0, [r3, #0]
 800339e:	8891      	ldrh	r1, [r2, #4]
 80033a0:	7992      	ldrb	r2, [r2, #6]
 80033a2:	8099      	strh	r1, [r3, #4]
 80033a4:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80033a6:	489f      	ldr	r0, [pc, #636]	; (8003624 <print_KISS+0x2c8>)
 80033a8:	f7fc ff32 	bl	8000210 <strlen>
 80033ac:	4603      	mov	r3, r0
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	230a      	movs	r3, #10
 80033b2:	499c      	ldr	r1, [pc, #624]	; (8003624 <print_KISS+0x2c8>)
 80033b4:	489d      	ldr	r0, [pc, #628]	; (800362c <print_KISS+0x2d0>)
 80033b6:	f003 fa58 	bl	800686a <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80033c0:	3310      	adds	r3, #16
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	337f      	adds	r3, #127	; 0x7f
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 80033c8:	4a96      	ldr	r2, [pc, #600]	; (8003624 <print_KISS+0x2c8>)
 80033ca:	4b99      	ldr	r3, [pc, #612]	; (8003630 <print_KISS+0x2d4>)
 80033cc:	4615      	mov	r5, r2
 80033ce:	461c      	mov	r4, r3
 80033d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d2:	6028      	str	r0, [r5, #0]
 80033d4:	6069      	str	r1, [r5, #4]
 80033d6:	60aa      	str	r2, [r5, #8]
 80033d8:	60eb      	str	r3, [r5, #12]
 80033da:	8823      	ldrh	r3, [r4, #0]
 80033dc:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80033de:	4891      	ldr	r0, [pc, #580]	; (8003624 <print_KISS+0x2c8>)
 80033e0:	f7fc ff16 	bl	8000210 <strlen>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	230a      	movs	r3, #10
 80033ea:	498e      	ldr	r1, [pc, #568]	; (8003624 <print_KISS+0x2c8>)
 80033ec:	488f      	ldr	r0, [pc, #572]	; (800362c <print_KISS+0x2d0>)
 80033ee:	f003 fa3c 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	e016      	b.n	8003426 <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	425b      	negs	r3, r3
 80033fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	498b      	ldr	r1, [pc, #556]	; (8003634 <print_KISS+0x2d8>)
 8003406:	4887      	ldr	r0, [pc, #540]	; (8003624 <print_KISS+0x2c8>)
 8003408:	f004 f970 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800340c:	4885      	ldr	r0, [pc, #532]	; (8003624 <print_KISS+0x2c8>)
 800340e:	f7fc feff 	bl	8000210 <strlen>
 8003412:	4603      	mov	r3, r0
 8003414:	b29a      	uxth	r2, r3
 8003416:	230a      	movs	r3, #10
 8003418:	4982      	ldr	r1, [pc, #520]	; (8003624 <print_KISS+0x2c8>)
 800341a:	4884      	ldr	r0, [pc, #528]	; (800362c <print_KISS+0x2d0>)
 800341c:	f003 fa25 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	3301      	adds	r3, #1
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	2b07      	cmp	r3, #7
 800342a:	dde5      	ble.n	80033f8 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 800342c:	4a7d      	ldr	r2, [pc, #500]	; (8003624 <print_KISS+0x2c8>)
 800342e:	4b82      	ldr	r3, [pc, #520]	; (8003638 <print_KISS+0x2dc>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003434:	487b      	ldr	r0, [pc, #492]	; (8003624 <print_KISS+0x2c8>)
 8003436:	f7fc feeb 	bl	8000210 <strlen>
 800343a:	4603      	mov	r3, r0
 800343c:	b29a      	uxth	r2, r3
 800343e:	230a      	movs	r3, #10
 8003440:	4978      	ldr	r1, [pc, #480]	; (8003624 <print_KISS+0x2c8>)
 8003442:	487a      	ldr	r0, [pc, #488]	; (800362c <print_KISS+0x2d0>)
 8003444:	f003 fa11 	bl	800686a <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800344e:	3310      	adds	r3, #16
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	336f      	adds	r3, #111	; 0x6f
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	e041      	b.n	80034e0 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	3301      	adds	r3, #1
 8003460:	461a      	mov	r2, r3
 8003462:	4976      	ldr	r1, [pc, #472]	; (800363c <print_KISS+0x2e0>)
 8003464:	486f      	ldr	r0, [pc, #444]	; (8003624 <print_KISS+0x2c8>)
 8003466:	f004 f941 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800346a:	486e      	ldr	r0, [pc, #440]	; (8003624 <print_KISS+0x2c8>)
 800346c:	f7fc fed0 	bl	8000210 <strlen>
 8003470:	4603      	mov	r3, r0
 8003472:	b29a      	uxth	r2, r3
 8003474:	230a      	movs	r3, #10
 8003476:	496b      	ldr	r1, [pc, #428]	; (8003624 <print_KISS+0x2c8>)
 8003478:	486c      	ldr	r0, [pc, #432]	; (800362c <print_KISS+0x2d0>)
 800347a:	f003 f9f6 	bl	800686a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	e016      	b.n	80034b2 <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	425b      	negs	r3, r3
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	4413      	add	r3, r2
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	4968      	ldr	r1, [pc, #416]	; (8003634 <print_KISS+0x2d8>)
 8003492:	4864      	ldr	r0, [pc, #400]	; (8003624 <print_KISS+0x2c8>)
 8003494:	f004 f92a 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003498:	4862      	ldr	r0, [pc, #392]	; (8003624 <print_KISS+0x2c8>)
 800349a:	f7fc feb9 	bl	8000210 <strlen>
 800349e:	4603      	mov	r3, r0
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	230a      	movs	r3, #10
 80034a4:	495f      	ldr	r1, [pc, #380]	; (8003624 <print_KISS+0x2c8>)
 80034a6:	4861      	ldr	r0, [pc, #388]	; (800362c <print_KISS+0x2d0>)
 80034a8:	f003 f9df 	bl	800686a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	3301      	adds	r3, #1
 80034b0:	623b      	str	r3, [r7, #32]
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b07      	cmp	r3, #7
 80034b6:	dde5      	ble.n	8003484 <print_KISS+0x128>
		}
		curr_mem -= 8;
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	3b08      	subs	r3, #8
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80034be:	4a59      	ldr	r2, [pc, #356]	; (8003624 <print_KISS+0x2c8>)
 80034c0:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <print_KISS+0x2dc>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80034c6:	4857      	ldr	r0, [pc, #348]	; (8003624 <print_KISS+0x2c8>)
 80034c8:	f7fc fea2 	bl	8000210 <strlen>
 80034cc:	4603      	mov	r3, r0
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	230a      	movs	r3, #10
 80034d2:	4954      	ldr	r1, [pc, #336]	; (8003624 <print_KISS+0x2c8>)
 80034d4:	4855      	ldr	r0, [pc, #340]	; (800362c <print_KISS+0x2d0>)
 80034d6:	f003 f9c8 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	3301      	adds	r3, #1
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	2b0d      	cmp	r3, #13
 80034e4:	ddba      	ble.n	800345c <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80034ec:	3314      	adds	r3, #20
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80034f2:	4a4c      	ldr	r2, [pc, #304]	; (8003624 <print_KISS+0x2c8>)
 80034f4:	4b52      	ldr	r3, [pc, #328]	; (8003640 <print_KISS+0x2e4>)
 80034f6:	4615      	mov	r5, r2
 80034f8:	461c      	mov	r4, r3
 80034fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fc:	6028      	str	r0, [r5, #0]
 80034fe:	6069      	str	r1, [r5, #4]
 8003500:	60aa      	str	r2, [r5, #8]
 8003502:	60eb      	str	r3, [r5, #12]
 8003504:	8823      	ldrh	r3, [r4, #0]
 8003506:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003508:	4846      	ldr	r0, [pc, #280]	; (8003624 <print_KISS+0x2c8>)
 800350a:	f7fc fe81 	bl	8000210 <strlen>
 800350e:	4603      	mov	r3, r0
 8003510:	b29a      	uxth	r2, r3
 8003512:	230a      	movs	r3, #10
 8003514:	4943      	ldr	r1, [pc, #268]	; (8003624 <print_KISS+0x2c8>)
 8003516:	4845      	ldr	r0, [pc, #276]	; (800362c <print_KISS+0x2d0>)
 8003518:	f003 f9a7 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e017      	b.n	8003552 <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f1c3 0307 	rsb	r3, r3, #7
 8003528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	4940      	ldr	r1, [pc, #256]	; (8003634 <print_KISS+0x2d8>)
 8003532:	483c      	ldr	r0, [pc, #240]	; (8003624 <print_KISS+0x2c8>)
 8003534:	f004 f8da 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003538:	483a      	ldr	r0, [pc, #232]	; (8003624 <print_KISS+0x2c8>)
 800353a:	f7fc fe69 	bl	8000210 <strlen>
 800353e:	4603      	mov	r3, r0
 8003540:	b29a      	uxth	r2, r3
 8003542:	230a      	movs	r3, #10
 8003544:	4937      	ldr	r1, [pc, #220]	; (8003624 <print_KISS+0x2c8>)
 8003546:	4839      	ldr	r0, [pc, #228]	; (800362c <print_KISS+0x2d0>)
 8003548:	f003 f98f 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b07      	cmp	r3, #7
 8003556:	dde4      	ble.n	8003522 <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 8003558:	4a32      	ldr	r2, [pc, #200]	; (8003624 <print_KISS+0x2c8>)
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <print_KISS+0x2dc>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003560:	4830      	ldr	r0, [pc, #192]	; (8003624 <print_KISS+0x2c8>)
 8003562:	f7fc fe55 	bl	8000210 <strlen>
 8003566:	4603      	mov	r3, r0
 8003568:	b29a      	uxth	r2, r3
 800356a:	230a      	movs	r3, #10
 800356c:	492d      	ldr	r1, [pc, #180]	; (8003624 <print_KISS+0x2c8>)
 800356e:	482f      	ldr	r0, [pc, #188]	; (800362c <print_KISS+0x2d0>)
 8003570:	f003 f97b 	bl	800686a <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800357a:	3318      	adds	r3, #24
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8003580:	4a28      	ldr	r2, [pc, #160]	; (8003624 <print_KISS+0x2c8>)
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <print_KISS+0x2e8>)
 8003584:	4615      	mov	r5, r2
 8003586:	461c      	mov	r4, r3
 8003588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358a:	6028      	str	r0, [r5, #0]
 800358c:	6069      	str	r1, [r5, #4]
 800358e:	60aa      	str	r2, [r5, #8]
 8003590:	60eb      	str	r3, [r5, #12]
 8003592:	8823      	ldrh	r3, [r4, #0]
 8003594:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003596:	4823      	ldr	r0, [pc, #140]	; (8003624 <print_KISS+0x2c8>)
 8003598:	f7fc fe3a 	bl	8000210 <strlen>
 800359c:	4603      	mov	r3, r0
 800359e:	b29a      	uxth	r2, r3
 80035a0:	230a      	movs	r3, #10
 80035a2:	4920      	ldr	r1, [pc, #128]	; (8003624 <print_KISS+0x2c8>)
 80035a4:	4821      	ldr	r0, [pc, #132]	; (800362c <print_KISS+0x2d0>)
 80035a6:	f003 f960 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e017      	b.n	80035e0 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b8:	4413      	add	r3, r2
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	491d      	ldr	r1, [pc, #116]	; (8003634 <print_KISS+0x2d8>)
 80035c0:	4818      	ldr	r0, [pc, #96]	; (8003624 <print_KISS+0x2c8>)
 80035c2:	f004 f893 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80035c6:	4817      	ldr	r0, [pc, #92]	; (8003624 <print_KISS+0x2c8>)
 80035c8:	f7fc fe22 	bl	8000210 <strlen>
 80035cc:	4603      	mov	r3, r0
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	230a      	movs	r3, #10
 80035d2:	4914      	ldr	r1, [pc, #80]	; (8003624 <print_KISS+0x2c8>)
 80035d4:	4815      	ldr	r0, [pc, #84]	; (800362c <print_KISS+0x2d0>)
 80035d6:	f003 f948 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3301      	adds	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b07      	cmp	r3, #7
 80035e4:	dde4      	ble.n	80035b0 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 80035e6:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <print_KISS+0x2c8>)
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <print_KISS+0x2dc>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80035ee:	480d      	ldr	r0, [pc, #52]	; (8003624 <print_KISS+0x2c8>)
 80035f0:	f7fc fe0e 	bl	8000210 <strlen>
 80035f4:	4603      	mov	r3, r0
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	230a      	movs	r3, #10
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <print_KISS+0x2c8>)
 80035fc:	480b      	ldr	r0, [pc, #44]	; (800362c <print_KISS+0x2d0>)
 80035fe:	f003 f934 	bl	800686a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003608:	331c      	adds	r3, #28
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e055      	b.n	80036cc <print_KISS+0x370>
 8003620:	20000a34 	.word	0x20000a34
 8003624:	20002638 	.word	0x20002638
 8003628:	080085c4 	.word	0x080085c4
 800362c:	200034f4 	.word	0x200034f4
 8003630:	080085fc 	.word	0x080085fc
 8003634:	08008500 	.word	0x08008500
 8003638:	08008508 	.word	0x08008508
 800363c:	080084ec 	.word	0x080084ec
 8003640:	0800850c 	.word	0x0800850c
 8003644:	08008520 	.word	0x08008520
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3301      	adds	r3, #1
 800364c:	461a      	mov	r2, r3
 800364e:	494a      	ldr	r1, [pc, #296]	; (8003778 <print_KISS+0x41c>)
 8003650:	484a      	ldr	r0, [pc, #296]	; (800377c <print_KISS+0x420>)
 8003652:	f004 f84b 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003656:	4849      	ldr	r0, [pc, #292]	; (800377c <print_KISS+0x420>)
 8003658:	f7fc fdda 	bl	8000210 <strlen>
 800365c:	4603      	mov	r3, r0
 800365e:	b29a      	uxth	r2, r3
 8003660:	230a      	movs	r3, #10
 8003662:	4946      	ldr	r1, [pc, #280]	; (800377c <print_KISS+0x420>)
 8003664:	4846      	ldr	r0, [pc, #280]	; (8003780 <print_KISS+0x424>)
 8003666:	f003 f900 	bl	800686a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e016      	b.n	800369e <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	425b      	negs	r3, r3
 8003674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	4941      	ldr	r1, [pc, #260]	; (8003784 <print_KISS+0x428>)
 800367e:	483f      	ldr	r0, [pc, #252]	; (800377c <print_KISS+0x420>)
 8003680:	f004 f834 	bl	80076ec <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003684:	483d      	ldr	r0, [pc, #244]	; (800377c <print_KISS+0x420>)
 8003686:	f7fc fdc3 	bl	8000210 <strlen>
 800368a:	4603      	mov	r3, r0
 800368c:	b29a      	uxth	r2, r3
 800368e:	230a      	movs	r3, #10
 8003690:	493a      	ldr	r1, [pc, #232]	; (800377c <print_KISS+0x420>)
 8003692:	483b      	ldr	r0, [pc, #236]	; (8003780 <print_KISS+0x424>)
 8003694:	f003 f8e9 	bl	800686a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3301      	adds	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b07      	cmp	r3, #7
 80036a2:	dde5      	ble.n	8003670 <print_KISS+0x314>
		}
		curr_mem -= 8;
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	3b08      	subs	r3, #8
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80036aa:	4a34      	ldr	r2, [pc, #208]	; (800377c <print_KISS+0x420>)
 80036ac:	4b36      	ldr	r3, [pc, #216]	; (8003788 <print_KISS+0x42c>)
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80036b2:	4832      	ldr	r0, [pc, #200]	; (800377c <print_KISS+0x420>)
 80036b4:	f7fc fdac 	bl	8000210 <strlen>
 80036b8:	4603      	mov	r3, r0
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	230a      	movs	r3, #10
 80036be:	492f      	ldr	r1, [pc, #188]	; (800377c <print_KISS+0x420>)
 80036c0:	482f      	ldr	r0, [pc, #188]	; (8003780 <print_KISS+0x424>)
 80036c2:	f003 f8d2 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3301      	adds	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da00      	bge.n	80036da <print_KISS+0x37e>
 80036d8:	3307      	adds	r3, #7
 80036da:	10db      	asrs	r3, r3, #3
 80036dc:	461a      	mov	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4293      	cmp	r3, r2
 80036e2:	dbb1      	blt.n	8003648 <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <print_KISS+0x420>)
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <print_KISS+0x430>)
 80036f0:	4615      	mov	r5, r2
 80036f2:	461c      	mov	r4, r3
 80036f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f6:	6028      	str	r0, [r5, #0]
 80036f8:	6069      	str	r1, [r5, #4]
 80036fa:	60aa      	str	r2, [r5, #8]
 80036fc:	60eb      	str	r3, [r5, #12]
 80036fe:	8823      	ldrh	r3, [r4, #0]
 8003700:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003702:	481e      	ldr	r0, [pc, #120]	; (800377c <print_KISS+0x420>)
 8003704:	f7fc fd84 	bl	8000210 <strlen>
 8003708:	4603      	mov	r3, r0
 800370a:	b29a      	uxth	r2, r3
 800370c:	230a      	movs	r3, #10
 800370e:	491b      	ldr	r1, [pc, #108]	; (800377c <print_KISS+0x420>)
 8003710:	481b      	ldr	r0, [pc, #108]	; (8003780 <print_KISS+0x424>)
 8003712:	f003 f8aa 	bl	800686a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e017      	b.n	800374c <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f1c3 0307 	rsb	r3, r3, #7
 8003722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003724:	4413      	add	r3, r2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4916      	ldr	r1, [pc, #88]	; (8003784 <print_KISS+0x428>)
 800372c:	4813      	ldr	r0, [pc, #76]	; (800377c <print_KISS+0x420>)
 800372e:	f003 ffdd 	bl	80076ec <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003732:	4812      	ldr	r0, [pc, #72]	; (800377c <print_KISS+0x420>)
 8003734:	f7fc fd6c 	bl	8000210 <strlen>
 8003738:	4603      	mov	r3, r0
 800373a:	b29a      	uxth	r2, r3
 800373c:	230a      	movs	r3, #10
 800373e:	490f      	ldr	r1, [pc, #60]	; (800377c <print_KISS+0x420>)
 8003740:	480f      	ldr	r0, [pc, #60]	; (8003780 <print_KISS+0x424>)
 8003742:	f003 f892 	bl	800686a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3301      	adds	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b07      	cmp	r3, #7
 8003750:	dde4      	ble.n	800371c <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <print_KISS+0x420>)
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <print_KISS+0x42c>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800375a:	4808      	ldr	r0, [pc, #32]	; (800377c <print_KISS+0x420>)
 800375c:	f7fc fd58 	bl	8000210 <strlen>
 8003760:	4603      	mov	r3, r0
 8003762:	b29a      	uxth	r2, r3
 8003764:	230a      	movs	r3, #10
 8003766:	4905      	ldr	r1, [pc, #20]	; (800377c <print_KISS+0x420>)
 8003768:	4805      	ldr	r0, [pc, #20]	; (8003780 <print_KISS+0x424>)
 800376a:	f003 f87e 	bl	800686a <HAL_UART_Transmit>

}
 800376e:	bf00      	nop
 8003770:	3734      	adds	r7, #52	; 0x34
 8003772:	46bd      	mov	sp, r7
 8003774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003776:	bf00      	nop
 8003778:	08008534 	.word	0x08008534
 800377c:	20002638 	.word	0x20002638
 8003780:	200034f4 	.word	0x200034f4
 8003784:	08008500 	.word	0x08008500
 8003788:	08008508 	.word	0x08008508
 800378c:	08008610 	.word	0x08008610

08003790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003794:	f000 fd18 	bl	80041c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003798:	f000 f820 	bl	80037dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800379c:	f000 f9f0 	bl	8003b80 <MX_GPIO_Init>
  MX_DMA_Init();
 80037a0:	f000 f9ce 	bl	8003b40 <MX_DMA_Init>
  MX_DAC_Init();
 80037a4:	f000 f888 	bl	80038b8 <MX_DAC_Init>
  MX_TIM2_Init();
 80037a8:	f000 f8b0 	bl	800390c <MX_TIM2_Init>
  MX_TIM3_Init();
 80037ac:	f000 f8fa 	bl	80039a4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80037b0:	f000 f994 	bl	8003adc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80037b4:	f000 f944 	bl	8003a40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 80037b8:	4806      	ldr	r0, [pc, #24]	; (80037d4 <main+0x44>)
 80037ba:	f002 fbe4 	bl	8005f86 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80037be:	4806      	ldr	r0, [pc, #24]	; (80037d8 <main+0x48>)
 80037c0:	f002 fc30 	bl	8006024 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 80037c4:	f000 fabc 	bl	8003d40 <uart_gpio_init>

	initProgram(false);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fe fc5b 	bl	8002084 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 80037ce:	f7fd fbc7 	bl	8000f60 <tx_rx>
 80037d2:	e7fc      	b.n	80037ce <main+0x3e>
 80037d4:	200034b4 	.word	0x200034b4
 80037d8:	200031fc 	.word	0x200031fc

080037dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b094      	sub	sp, #80	; 0x50
 80037e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037e2:	f107 031c 	add.w	r3, r7, #28
 80037e6:	2234      	movs	r2, #52	; 0x34
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 ff76 	bl	80076dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f0:	f107 0308 	add.w	r3, r7, #8
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <SystemClock_Config+0xd4>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <SystemClock_Config+0xd4>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380e:	6413      	str	r3, [r2, #64]	; 0x40
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <SystemClock_Config+0xd4>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800381c:	2300      	movs	r3, #0
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <SystemClock_Config+0xd8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003828:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <SystemClock_Config+0xd8>)
 800382a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <SystemClock_Config+0xd8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800383c:	2301      	movs	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003844:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003846:	2302      	movs	r3, #2
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800384a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003850:	2304      	movs	r3, #4
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8003854:	235a      	movs	r3, #90	; 0x5a
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003858:	2302      	movs	r3, #2
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800385c:	2302      	movs	r3, #2
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003860:	2302      	movs	r3, #2
 8003862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003864:	f107 031c 	add.w	r3, r7, #28
 8003868:	4618      	mov	r0, r3
 800386a:	f002 f907 	bl	8005a7c <HAL_RCC_OscConfig>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003874:	f000 fa8c 	bl	8003d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003878:	230f      	movs	r3, #15
 800387a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800387c:	2302      	movs	r3, #2
 800387e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800388a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f001 fe36 	bl	8005508 <HAL_RCC_ClockConfig>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80038a2:	f000 fa75 	bl	8003d90 <Error_Handler>
  }
}
 80038a6:	bf00      	nop
 80038a8:	3750      	adds	r7, #80	; 0x50
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000

080038b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80038be:	463b      	mov	r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MX_DAC_Init+0x4c>)
 80038c8:	4a0f      	ldr	r2, [pc, #60]	; (8003908 <MX_DAC_Init+0x50>)
 80038ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <MX_DAC_Init+0x4c>)
 80038ce:	f000 fe50 	bl	8004572 <HAL_DAC_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038d8:	f000 fa5a 	bl	8003d90 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80038dc:	2324      	movs	r3, #36	; 0x24
 80038de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038e4:	463b      	mov	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	4619      	mov	r1, r3
 80038ea:	4806      	ldr	r0, [pc, #24]	; (8003904 <MX_DAC_Init+0x4c>)
 80038ec:	f000 ff71 	bl	80047d2 <HAL_DAC_ConfigChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038f6:	f000 fa4b 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200034a0 	.word	0x200034a0
 8003908:	40007400 	.word	0x40007400

0800390c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003920:	463b      	mov	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <MX_TIM2_Init+0x94>)
 800392a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800392e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <MX_TIM2_Init+0x94>)
 8003932:	2208      	movs	r2, #8
 8003934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <MX_TIM2_Init+0x94>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <MX_TIM2_Init+0x94>)
 800393e:	2263      	movs	r2, #99	; 0x63
 8003940:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <MX_TIM2_Init+0x94>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <MX_TIM2_Init+0x94>)
 800394a:	2280      	movs	r2, #128	; 0x80
 800394c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800394e:	4814      	ldr	r0, [pc, #80]	; (80039a0 <MX_TIM2_Init+0x94>)
 8003950:	f002 faee 	bl	8005f30 <HAL_TIM_Base_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800395a:	f000 fa19 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800395e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003964:	f107 0308 	add.w	r3, r7, #8
 8003968:	4619      	mov	r1, r3
 800396a:	480d      	ldr	r0, [pc, #52]	; (80039a0 <MX_TIM2_Init+0x94>)
 800396c:	f002 fc86 	bl	800627c <HAL_TIM_ConfigClockSource>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003976:	f000 fa0b 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800397a:	2320      	movs	r3, #32
 800397c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003982:	463b      	mov	r3, r7
 8003984:	4619      	mov	r1, r3
 8003986:	4806      	ldr	r0, [pc, #24]	; (80039a0 <MX_TIM2_Init+0x94>)
 8003988:	f002 fe92 	bl	80066b0 <HAL_TIMEx_MasterConfigSynchronization>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003992:	f000 f9fd 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200034b4 	.word	0x200034b4

080039a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b8:	463b      	mov	r3, r7
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <MX_TIM3_Init+0x94>)
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <MX_TIM3_Init+0x98>)
 80039c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80039c6:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <MX_TIM3_Init+0x94>)
 80039c8:	2259      	movs	r2, #89	; 0x59
 80039ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <MX_TIM3_Init+0x94>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <MX_TIM3_Init+0x94>)
 80039d4:	f240 3241 	movw	r2, #833	; 0x341
 80039d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039da:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <MX_TIM3_Init+0x94>)
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039e0:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <MX_TIM3_Init+0x94>)
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039e6:	4814      	ldr	r0, [pc, #80]	; (8003a38 <MX_TIM3_Init+0x94>)
 80039e8:	f002 faa2 	bl	8005f30 <HAL_TIM_Base_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80039f2:	f000 f9cd 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039fc:	f107 0308 	add.w	r3, r7, #8
 8003a00:	4619      	mov	r1, r3
 8003a02:	480d      	ldr	r0, [pc, #52]	; (8003a38 <MX_TIM3_Init+0x94>)
 8003a04:	f002 fc3a 	bl	800627c <HAL_TIM_ConfigClockSource>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003a0e:	f000 f9bf 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4806      	ldr	r0, [pc, #24]	; (8003a38 <MX_TIM3_Init+0x94>)
 8003a20:	f002 fe46 	bl	80066b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003a2a:	f000 f9b1 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200031fc 	.word	0x200031fc
 8003a3c:	40000400 	.word	0x40000400

08003a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a54:	463b      	mov	r3, r7
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <MX_TIM4_Init+0x98>)
 8003a60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8003a62:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a64:	2259      	movs	r2, #89	; 0x59
 8003a66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a82:	4814      	ldr	r0, [pc, #80]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003a84:	f002 fa54 	bl	8005f30 <HAL_TIM_Base_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003a8e:	f000 f97f 	bl	8003d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003aa0:	f002 fbec 	bl	800627c <HAL_TIM_ConfigClockSource>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003aaa:	f000 f971 	bl	8003d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4806      	ldr	r0, [pc, #24]	; (8003ad4 <MX_TIM4_Init+0x94>)
 8003abc:	f002 fdf8 	bl	80066b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003ac6:	f000 f963 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20003734 	.word	0x20003734
 8003ad8:	40000800 	.word	0x40000800

08003adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <MX_USART2_UART_Init+0x60>)
 8003ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003b02:	220c      	movs	r2, #12
 8003b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b12:	4809      	ldr	r0, [pc, #36]	; (8003b38 <MX_USART2_UART_Init+0x5c>)
 8003b14:	f002 fe5c 	bl	80067d0 <HAL_UART_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b1e:	f000 f937 	bl	8003d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	2026      	movs	r0, #38	; 0x26
 8003b28:	f000 fcdf 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b2c:	2026      	movs	r0, #38	; 0x26
 8003b2e:	f000 fcf8 	bl	8004522 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200034f4 	.word	0x200034f4
 8003b3c:	40004400 	.word	0x40004400

08003b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <MX_DMA_Init+0x3c>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <MX_DMA_Init+0x3c>)
 8003b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <MX_DMA_Init+0x3c>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2100      	movs	r1, #0
 8003b66:	2010      	movs	r0, #16
 8003b68:	f000 fcbf 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b6c:	2010      	movs	r0, #16
 8003b6e:	f000 fcd8 	bl	8004522 <HAL_NVIC_EnableIRQ>

}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800

08003b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a36      	ldr	r2, [pc, #216]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	4b30      	ldr	r3, [pc, #192]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a2f      	ldr	r2, [pc, #188]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <MX_GPIO_Init+0x130>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003c0c:	4829      	ldr	r0, [pc, #164]	; (8003cb4 <MX_GPIO_Init+0x134>)
 8003c0e:	f001 fc49 	bl	80054a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2110      	movs	r1, #16
 8003c16:	4828      	ldr	r0, [pc, #160]	; (8003cb8 <MX_GPIO_Init+0x138>)
 8003c18:	f001 fc44 	bl	80054a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <MX_GPIO_Init+0x13c>)
 8003c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4821      	ldr	r0, [pc, #132]	; (8003cb8 <MX_GPIO_Init+0x138>)
 8003c32:	f001 faa5 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <MX_GPIO_Init+0x140>)
 8003c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4619      	mov	r1, r3
 8003c48:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <MX_GPIO_Init+0x134>)
 8003c4a:	f001 fa99 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8003c4e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c54:	2301      	movs	r3, #1
 8003c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	4619      	mov	r1, r3
 8003c66:	4813      	ldr	r0, [pc, #76]	; (8003cb4 <MX_GPIO_Init+0x134>)
 8003c68:	f001 fa8a 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c70:	2301      	movs	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	4619      	mov	r1, r3
 8003c82:	480d      	ldr	r0, [pc, #52]	; (8003cb8 <MX_GPIO_Init+0x138>)
 8003c84:	f001 fa7c 	bl	8005180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	2006      	movs	r0, #6
 8003c8e:	f000 fc2c 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003c92:	2006      	movs	r0, #6
 8003c94:	f000 fc45 	bl	8004522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2028      	movs	r0, #40	; 0x28
 8003c9e:	f000 fc24 	bl	80044ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ca2:	2028      	movs	r0, #40	; 0x28
 8003ca4:	f000 fc3d 	bl	8004522 <HAL_NVIC_EnableIRQ>

}
 8003ca8:	bf00      	nop
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	40020800 	.word	0x40020800
 8003cbc:	10210000 	.word	0x10210000
 8003cc0:	10110000 	.word	0x10110000

08003cc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d102      	bne.n	8003cda <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8003cd4:	f7fe faa8 	bl	8002228 <Tim3IT>
	else
		__NOP();
}
 8003cd8:	e000      	b.n	8003cdc <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8003cda:	bf00      	nop
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200031fc 	.word	0x200031fc

08003ce8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8003cf8:	f7fe faca 	bl	8002290 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d103      	bne.n	8003d0c <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_GPIO_EXTI_Callback+0x30>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 8003d0a:	e000      	b.n	8003d0e <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8003d0c:	bf00      	nop
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000a05 	.word	0x20000a05

08003d1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_UART_RxCpltCallback+0x20>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8003d2e:	f7fd faed 	bl	800130c <UART2_EXCEPTION_CALLBACK>
  }
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40004400 	.word	0x40004400

08003d40 <uart_gpio_init>:

void uart_gpio_init()
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <uart_gpio_init+0x48>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <uart_gpio_init+0x48>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <uart_gpio_init+0x48>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003d62:	230c      	movs	r3, #12
 8003d64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d72:	2307      	movs	r3, #7
 8003d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4804      	ldr	r0, [pc, #16]	; (8003d8c <uart_gpio_init+0x4c>)
 8003d7c:	f001 fa00 	bl	8005180 <HAL_GPIO_Init>
}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40020000 	.word	0x40020000

08003d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_MspInit+0x4c>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <HAL_MspInit+0x4c>)
 8003db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db4:	6453      	str	r3, [r2, #68]	; 0x44
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_MspInit+0x4c>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_MspInit+0x4c>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <HAL_MspInit+0x4c>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_MspInit+0x4c>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003dde:	2007      	movs	r0, #7
 8003de0:	f000 fb78 	bl	80044d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800

08003df0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ecc <HAL_DAC_MspInit+0xdc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d158      	bne.n	8003ec4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_DAC_MspInit+0xe0>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ed0 <HAL_DAC_MspInit+0xe0>)
 8003e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
 8003e22:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_DAC_MspInit+0xe0>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_DAC_MspInit+0xe0>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <HAL_DAC_MspInit+0xe0>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_DAC_MspInit+0xe0>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	481d      	ldr	r0, [pc, #116]	; (8003ed4 <HAL_DAC_MspInit+0xe4>)
 8003e5e:	f001 f98f 	bl	8005180 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_DAC_MspInit+0xec>)
 8003e66:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e6a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003e6e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e72:	2240      	movs	r2, #64	; 0x40
 8003e74:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e76:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e82:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e8a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e92:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e9a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003e9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003ea8:	480b      	ldr	r0, [pc, #44]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003eaa:	f000 fd69 	bl	8004980 <HAL_DMA_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003eb4:	f7ff ff6c 	bl	8003d90 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	4a06      	ldr	r2, [pc, #24]	; (8003ed8 <HAL_DAC_MspInit+0xe8>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003ec4:	bf00      	nop
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40007400 	.word	0x40007400
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020000 	.word	0x40020000
 8003ed8:	2000323c 	.word	0x2000323c
 8003edc:	40026088 	.word	0x40026088

08003ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f0e:	e02e      	b.n	8003f6e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIM_Base_MspInit+0x9c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d116      	bne.n	8003f48 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2100      	movs	r1, #0
 8003f3a:	201d      	movs	r0, #29
 8003f3c:	f000 fad5 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f40:	201d      	movs	r0, #29
 8003f42:	f000 faee 	bl	8004522 <HAL_NVIC_EnableIRQ>
}
 8003f46:	e012      	b.n	8003f6e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <HAL_TIM_Base_MspInit+0xa0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10d      	bne.n	8003f6e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_TIM_Base_MspInit+0x98>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800

08003f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <HAL_UART_MspInit+0x94>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d133      	bne.n	800400e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	4b1c      	ldr	r3, [pc, #112]	; (800401c <HAL_UART_MspInit+0x98>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_UART_MspInit+0x98>)
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb6:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_UART_MspInit+0x98>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_UART_MspInit+0x98>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	4a14      	ldr	r2, [pc, #80]	; (800401c <HAL_UART_MspInit+0x98>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_UART_MspInit+0x98>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fde:	230c      	movs	r3, #12
 8003fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fee:	2307      	movs	r3, #7
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff2:	f107 0314 	add.w	r3, r7, #20
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4809      	ldr	r0, [pc, #36]	; (8004020 <HAL_UART_MspInit+0x9c>)
 8003ffa:	f001 f8c1 	bl	8005180 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	2026      	movs	r0, #38	; 0x26
 8004004:	f000 fa71 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004008:	2026      	movs	r0, #38	; 0x26
 800400a:	f000 fa8a 	bl	8004522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800400e:	bf00      	nop
 8004010:	3728      	adds	r7, #40	; 0x28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40004400 	.word	0x40004400
 800401c:	40023800 	.word	0x40023800
 8004020:	40020000 	.word	0x40020000

08004024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004036:	e7fe      	b.n	8004036 <HardFault_Handler+0x4>

08004038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800403c:	e7fe      	b.n	800403c <MemManage_Handler+0x4>

0800403e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004042:	e7fe      	b.n	8004042 <BusFault_Handler+0x4>

08004044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004048:	e7fe      	b.n	8004048 <UsageFault_Handler+0x4>

0800404a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004078:	f000 f8f8 	bl	800426c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}

08004080 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004084:	2001      	movs	r0, #1
 8004086:	f001 fa27 	bl	80054d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <DMA1_Stream5_IRQHandler+0x10>)
 8004096:	f000 fe0b 	bl	8004cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	2000323c 	.word	0x2000323c

080040a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <TIM3_IRQHandler+0x10>)
 80040aa:	f001 ffdf 	bl	800606c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200031fc 	.word	0x200031fc

080040b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <USART2_IRQHandler+0x10>)
 80040be:	f002 fcc3 	bl	8006a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200034f4 	.word	0x200034f4

080040cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80040d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80040d4:	f001 fa00 	bl	80054d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}

080040dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <_sbrk+0x5c>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <_sbrk+0x60>)
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <_sbrk+0x64>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <_sbrk+0x64>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <_sbrk+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_sbrk+0x64>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800410c:	f003 fa98 	bl	8007640 <__errno>
 8004110:	4602      	mov	r2, r0
 8004112:	230c      	movs	r3, #12
 8004114:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	e009      	b.n	8004130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <_sbrk+0x64>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <_sbrk+0x64>)
 800412c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20020000 	.word	0x20020000
 800413c:	00000400 	.word	0x00000400
 8004140:	20000a28 	.word	0x20000a28
 8004144:	20003780 	.word	0x20003780

08004148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <SystemInit+0x28>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	4a07      	ldr	r2, [pc, #28]	; (8004170 <SystemInit+0x28>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <SystemInit+0x28>)
 800415e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004162:	609a      	str	r2, [r3, #8]
#endif
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800417a:	e003      	b.n	8004184 <LoopCopyDataInit>

0800417c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800417e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004182:	3104      	adds	r1, #4

08004184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004184:	480b      	ldr	r0, [pc, #44]	; (80041b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800418a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800418c:	d3f6      	bcc.n	800417c <CopyDataInit>
  ldr  r2, =_sbss
 800418e:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004190:	e002      	b.n	8004198 <LoopFillZerobss>

08004192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004194:	f842 3b04 	str.w	r3, [r2], #4

08004198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800419a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800419c:	d3f9      	bcc.n	8004192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800419e:	f7ff ffd3 	bl	8004148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041a2:	f003 fa53 	bl	800764c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041a6:	f7ff faf3 	bl	8003790 <main>
  bx  lr    
 80041aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041b0:	08008688 	.word	0x08008688
  ldr  r0, =_sdata
 80041b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041b8:	200009e4 	.word	0x200009e4
  ldr  r2, =_sbss
 80041bc:	200009e4 	.word	0x200009e4
  ldr  r3, = _ebss
 80041c0:	2000377c 	.word	0x2000377c

080041c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041c4:	e7fe      	b.n	80041c4 <ADC_IRQHandler>
	...

080041c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_Init+0x40>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <HAL_Init+0x40>)
 80041d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_Init+0x40>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_Init+0x40>)
 80041de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_Init+0x40>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a07      	ldr	r2, [pc, #28]	; (8004208 <HAL_Init+0x40>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041f0:	2003      	movs	r0, #3
 80041f2:	f000 f96f 	bl	80044d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f000 f808 	bl	800420c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041fc:	f7ff fdd0 	bl	8003da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023c00 	.word	0x40023c00

0800420c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_InitTick+0x54>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_InitTick+0x58>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004222:	fbb3 f3f1 	udiv	r3, r3, r1
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f995 	bl	800455a <HAL_SYSTICK_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e00e      	b.n	8004258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b0f      	cmp	r3, #15
 800423e:	d80a      	bhi.n	8004256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004240:	2200      	movs	r2, #0
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f000 f94f 	bl	80044ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <HAL_InitTick+0x5c>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000974 	.word	0x20000974
 8004264:	2000097c 	.word	0x2000097c
 8004268:	20000978 	.word	0x20000978

0800426c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_IncTick+0x20>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_IncTick+0x24>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4413      	add	r3, r2
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_IncTick+0x24>)
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2000097c 	.word	0x2000097c
 8004290:	20003774 	.word	0x20003774

08004294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return uwTick;
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_GetTick+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20003774 	.word	0x20003774

080042ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042b4:	f7ff ffee 	bl	8004294 <HAL_GetTick>
 80042b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d005      	beq.n	80042d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_Delay+0x40>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042d2:	bf00      	nop
 80042d4:	f7ff ffde 	bl	8004294 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d8f7      	bhi.n	80042d4 <HAL_Delay+0x28>
  {
  }
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000097c 	.word	0x2000097c

080042f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800430c:	4013      	ands	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800431c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004322:	4a04      	ldr	r2, [pc, #16]	; (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	60d3      	str	r3, [r2, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <__NVIC_GetPriorityGrouping+0x18>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	f003 0307 	and.w	r3, r3, #7
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db0b      	blt.n	800437e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4907      	ldr	r1, [pc, #28]	; (800438c <__NVIC_EnableIRQ+0x38>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2001      	movs	r0, #1
 8004376:	fa00 f202 	lsl.w	r2, r0, r2
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	e000e100 	.word	0xe000e100

08004390 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	db10      	blt.n	80043c4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	4909      	ldr	r1, [pc, #36]	; (80043d0 <__NVIC_DisableIRQ+0x40>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2001      	movs	r0, #1
 80043b2:	fa00 f202 	lsl.w	r2, r0, r2
 80043b6:	3320      	adds	r3, #32
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	; (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a0:	d301      	bcc.n	80044a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <SysTick_Config+0x40>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ae:	210f      	movs	r1, #15
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	f7ff ff8e 	bl	80043d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <SysTick_Config+0x40>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <SysTick_Config+0x40>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010

080044d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff07 	bl	80042f0 <__NVIC_SetPriorityGrouping>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044fc:	f7ff ff1c 	bl	8004338 <__NVIC_GetPriorityGrouping>
 8004500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	6978      	ldr	r0, [r7, #20]
 8004508:	f7ff ff8e 	bl	8004428 <NVIC_EncodePriority>
 800450c:	4602      	mov	r2, r0
 800450e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff5d 	bl	80043d4 <__NVIC_SetPriority>
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff0f 	bl	8004354 <__NVIC_EnableIRQ>
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	4603      	mov	r3, r0
 8004546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff1f 	bl	8004390 <__NVIC_DisableIRQ>
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ff94 	bl	8004490 <SysTick_Config>
 8004568:	4603      	mov	r3, r0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e014      	b.n	80045ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	791b      	ldrb	r3, [r3, #4]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fc2b 	bl	8003df0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	795b      	ldrb	r3, [r3, #5]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_DAC_Start_DMA+0x1e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e08e      	b.n	80046f4 <HAL_DAC_Start_DMA+0x13c>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2202      	movs	r2, #2
 80045e0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d12a      	bne.n	800463e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a43      	ldr	r2, [pc, #268]	; (80046fc <HAL_DAC_Start_DMA+0x144>)
 80045ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a42      	ldr	r2, [pc, #264]	; (8004700 <HAL_DAC_Start_DMA+0x148>)
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4a41      	ldr	r2, [pc, #260]	; (8004704 <HAL_DAC_Start_DMA+0x14c>)
 80045fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800460e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	2b04      	cmp	r3, #4
 8004614:	d009      	beq.n	800462a <HAL_DAC_Start_DMA+0x72>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d00c      	beq.n	8004634 <HAL_DAC_Start_DMA+0x7c>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d000      	beq.n	8004620 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800461e:	e039      	b.n	8004694 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3308      	adds	r3, #8
 8004626:	617b      	str	r3, [r7, #20]
        break;
 8004628:	e034      	b.n	8004694 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	617b      	str	r3, [r7, #20]
        break;
 8004632:	e02f      	b.n	8004694 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3310      	adds	r3, #16
 800463a:	617b      	str	r3, [r7, #20]
        break;
 800463c:	e02a      	b.n	8004694 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a31      	ldr	r2, [pc, #196]	; (8004708 <HAL_DAC_Start_DMA+0x150>)
 8004644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4a30      	ldr	r2, [pc, #192]	; (800470c <HAL_DAC_Start_DMA+0x154>)
 800464c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <HAL_DAC_Start_DMA+0x158>)
 8004654:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004664:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d009      	beq.n	8004680 <HAL_DAC_Start_DMA+0xc8>
 800466c:	2b08      	cmp	r3, #8
 800466e:	d00c      	beq.n	800468a <HAL_DAC_Start_DMA+0xd2>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d000      	beq.n	8004676 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004674:	e00e      	b.n	8004694 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	617b      	str	r3, [r7, #20]
        break;
 800467e:	e009      	b.n	8004694 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3318      	adds	r3, #24
 8004686:	617b      	str	r3, [r7, #20]
        break;
 8004688:	e004      	b.n	8004694 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	331c      	adds	r3, #28
 8004690:	617b      	str	r3, [r7, #20]
        break;
 8004692:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10f      	bne.n	80046ba <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6898      	ldr	r0, [r3, #8]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	f000 fa12 	bl	8004adc <HAL_DMA_Start_IT>
 80046b8:	e00e      	b.n	80046d8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046c8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68d8      	ldr	r0, [r3, #12]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	f000 fa02 	bl	8004adc <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	0800486d 	.word	0x0800486d
 8004700:	0800488f 	.word	0x0800488f
 8004704:	080048ab 	.word	0x080048ab
 8004708:	08004915 	.word	0x08004915
 800470c:	08004937 	.word	0x08004937
 8004710:	08004953 	.word	0x08004953

08004714 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6819      	ldr	r1, [r3, #0]
 8004728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	2201      	movs	r2, #1
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fa14 	bl	8004b8c <HAL_DMA_Abort>
 8004764:	4603      	mov	r3, r0
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	e006      	b.n	8004778 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa0c 	bl	8004b8c <HAL_DMA_Abort>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2204      	movs	r2, #4
 8004782:	711a      	strb	r2, [r3, #4]
 8004784:	e002      	b.n	800478c <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b087      	sub	sp, #28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	795b      	ldrb	r3, [r3, #5]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_DAC_ConfigChannel+0x20>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e036      	b.n	8004860 <HAL_DAC_ConfigChannel+0x8e>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2202      	movs	r2, #2
 80047fc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004806:	f640 72fe 	movw	r2, #4094	; 0xffe
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4013      	ands	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	22c0      	movs	r2, #192	; 0xc0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43da      	mvns	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	400a      	ands	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff ff8b 	bl	8004796 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	711a      	strb	r2, [r3, #4]
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7ff ff84 	bl	80047aa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f043 0204 	orr.w	r2, r3, #4
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff ff7a 	bl	80047be <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	711a      	strb	r2, [r3, #4]
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff ffd8 	bl	80048d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	711a      	strb	r2, [r3, #4]
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff ffd1 	bl	80048ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff ffc7 	bl	8004900 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	711a      	strb	r2, [r3, #4]
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7ff fc82 	bl	8004294 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e099      	b.n	8004ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049bc:	e00f      	b.n	80049de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049be:	f7ff fc69 	bl	8004294 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d908      	bls.n	80049de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2203      	movs	r2, #3
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e078      	b.n	8004ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e8      	bne.n	80049be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <HAL_DMA_Init+0x158>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d107      	bne.n	8004a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	4313      	orrs	r3, r2
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d117      	bne.n	8004aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00e      	beq.n	8004aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fb01 	bl	800508c <DMA_CheckFifoParam>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2240      	movs	r2, #64	; 0x40
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e016      	b.n	8004ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fab8 	bl	8005020 <DMA_CalcBaseAndBitshift>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	223f      	movs	r2, #63	; 0x3f
 8004aba:	409a      	lsls	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	f010803f 	.word	0xf010803f

08004adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_DMA_Start_IT+0x26>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e040      	b.n	8004b84 <HAL_DMA_Start_IT+0xa8>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d12f      	bne.n	8004b76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fa4a 	bl	8004fc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	223f      	movs	r2, #63	; 0x3f
 8004b36:	409a      	lsls	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0216 	orr.w	r2, r2, #22
 8004b4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0208 	orr.w	r2, r2, #8
 8004b62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e005      	b.n	8004b82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b9a:	f7ff fb7b 	bl	8004294 <HAL_GetTick>
 8004b9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d008      	beq.n	8004bbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e052      	b.n	8004c64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0216 	bic.w	r2, r2, #22
 8004bcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_DMA_Abort+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0208 	bic.w	r2, r2, #8
 8004bfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c0e:	e013      	b.n	8004c38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c10:	f7ff fb40 	bl	8004294 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d90c      	bls.n	8004c38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e015      	b.n	8004c64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e4      	bne.n	8004c10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	223f      	movs	r2, #63	; 0x3f
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2280      	movs	r2, #128	; 0x80
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00c      	b.n	8004ca4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cbc:	4b92      	ldr	r3, [pc, #584]	; (8004f08 <HAL_DMA_IRQHandler+0x258>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a92      	ldr	r2, [pc, #584]	; (8004f0c <HAL_DMA_IRQHandler+0x25c>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0a9b      	lsrs	r3, r3, #10
 8004cc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	2208      	movs	r2, #8
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01a      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0204 	bic.w	r2, r2, #4
 8004d02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	2208      	movs	r2, #8
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	f043 0201 	orr.w	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d20:	2201      	movs	r2, #1
 8004d22:	409a      	lsls	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3e:	2201      	movs	r2, #1
 8004d40:	409a      	lsls	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d56:	2204      	movs	r2, #4
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	2204      	movs	r2, #4
 8004d76:	409a      	lsls	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	f043 0204 	orr.w	r2, r3, #4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d043      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03c      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	2210      	movs	r2, #16
 8004dac:	409a      	lsls	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d018      	beq.n	8004df2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d108      	bne.n	8004de0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d024      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
 8004dde:	e01f      	b.n	8004e20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01b      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
 8004df0:	e016      	b.n	8004e20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d107      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0208 	bic.w	r2, r2, #8
 8004e0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	2220      	movs	r2, #32
 8004e26:	409a      	lsls	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 808e 	beq.w	8004f4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8086 	beq.w	8004f4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e46:	2220      	movs	r2, #32
 8004e48:	409a      	lsls	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d136      	bne.n	8004ec8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0216 	bic.w	r2, r2, #22
 8004e68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_DMA_IRQHandler+0x1da>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0208 	bic.w	r2, r2, #8
 8004e98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	223f      	movs	r2, #63	; 0x3f
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d07d      	beq.n	8004fba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
        }
        return;
 8004ec6:	e078      	b.n	8004fba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01c      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d108      	bne.n	8004ef6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d030      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
 8004ef4:	e02b      	b.n	8004f4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
 8004f06:	e022      	b.n	8004f4e <HAL_DMA_IRQHandler+0x29e>
 8004f08:	20000974 	.word	0x20000974
 8004f0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0210 	bic.w	r2, r2, #16
 8004f2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d032      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d022      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2205      	movs	r2, #5
 8004f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60bb      	str	r3, [r7, #8]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d307      	bcc.n	8004f96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f2      	bne.n	8004f7a <HAL_DMA_IRQHandler+0x2ca>
 8004f94:	e000      	b.n	8004f98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
 8004fb8:	e000      	b.n	8004fbc <HAL_DMA_IRQHandler+0x30c>
        return;
 8004fba:	bf00      	nop
    }
  }
}
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop

08004fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d108      	bne.n	8005004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005002:	e007      	b.n	8005014 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	3b10      	subs	r3, #16
 8005030:	4a14      	ldr	r2, [pc, #80]	; (8005084 <DMA_CalcBaseAndBitshift+0x64>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800503a:	4a13      	ldr	r2, [pc, #76]	; (8005088 <DMA_CalcBaseAndBitshift+0x68>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d909      	bls.n	8005062 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	659a      	str	r2, [r3, #88]	; 0x58
 8005060:	e007      	b.n	8005072 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	aaaaaaab 	.word	0xaaaaaaab
 8005088:	0800863c 	.word	0x0800863c

0800508c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11f      	bne.n	80050e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d855      	bhi.n	8005158 <DMA_CheckFifoParam+0xcc>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <DMA_CheckFifoParam+0x28>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050d7 	.word	0x080050d7
 80050bc:	080050c5 	.word	0x080050c5
 80050c0:	08005159 	.word	0x08005159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d045      	beq.n	800515c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d4:	e042      	b.n	800515c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050de:	d13f      	bne.n	8005160 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e4:	e03c      	b.n	8005160 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ee:	d121      	bne.n	8005134 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d836      	bhi.n	8005164 <DMA_CheckFifoParam+0xd8>
 80050f6:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <DMA_CheckFifoParam+0x70>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	08005113 	.word	0x08005113
 8005104:	0800510d 	.word	0x0800510d
 8005108:	08005125 	.word	0x08005125
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e02f      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d024      	beq.n	8005168 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005122:	e021      	b.n	8005168 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800512c:	d11e      	bne.n	800516c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005132:	e01b      	b.n	800516c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d902      	bls.n	8005140 <DMA_CheckFifoParam+0xb4>
 800513a:	2b03      	cmp	r3, #3
 800513c:	d003      	beq.n	8005146 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800513e:	e018      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e015      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
      break;
 8005156:	e00b      	b.n	8005170 <DMA_CheckFifoParam+0xe4>
      break;
 8005158:	bf00      	nop
 800515a:	e00a      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      break;
 800515c:	bf00      	nop
 800515e:	e008      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      break;
 8005160:	bf00      	nop
 8005162:	e006      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      break;
 8005164:	bf00      	nop
 8005166:	e004      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      break;
 8005168:	bf00      	nop
 800516a:	e002      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      break;   
 800516c:	bf00      	nop
 800516e:	e000      	b.n	8005172 <DMA_CheckFifoParam+0xe6>
      break;
 8005170:	bf00      	nop
    }
  } 
  
  return status; 
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005180:	b480      	push	{r7}
 8005182:	b089      	sub	sp, #36	; 0x24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	e165      	b.n	8005468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800519c:	2201      	movs	r2, #1
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	f040 8154 	bne.w	8005462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d00b      	beq.n	80051da <HAL_GPIO_Init+0x5a>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d007      	beq.n	80051da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ce:	2b11      	cmp	r3, #17
 80051d0:	d003      	beq.n	80051da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b12      	cmp	r3, #18
 80051d8:	d130      	bne.n	800523c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	2203      	movs	r2, #3
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005210:	2201      	movs	r2, #1
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 0201 	and.w	r2, r3, #1
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	2203      	movs	r2, #3
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0xfc>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b12      	cmp	r3, #18
 800527a:	d123      	bne.n	80052c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	08da      	lsrs	r2, r3, #3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3208      	adds	r2, #8
 8005284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	220f      	movs	r2, #15
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	4013      	ands	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	08da      	lsrs	r2, r3, #3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3208      	adds	r2, #8
 80052be:	69b9      	ldr	r1, [r7, #24]
 80052c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	2203      	movs	r2, #3
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	43db      	mvns	r3, r3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0203 	and.w	r2, r3, #3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 80ae 	beq.w	8005462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	4b5c      	ldr	r3, [pc, #368]	; (800547c <HAL_GPIO_Init+0x2fc>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4a5b      	ldr	r2, [pc, #364]	; (800547c <HAL_GPIO_Init+0x2fc>)
 8005310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005314:	6453      	str	r3, [r2, #68]	; 0x44
 8005316:	4b59      	ldr	r3, [pc, #356]	; (800547c <HAL_GPIO_Init+0x2fc>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005322:	4a57      	ldr	r2, [pc, #348]	; (8005480 <HAL_GPIO_Init+0x300>)
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	089b      	lsrs	r3, r3, #2
 8005328:	3302      	adds	r3, #2
 800532a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	220f      	movs	r2, #15
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4e      	ldr	r2, [pc, #312]	; (8005484 <HAL_GPIO_Init+0x304>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d025      	beq.n	800539a <HAL_GPIO_Init+0x21a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4d      	ldr	r2, [pc, #308]	; (8005488 <HAL_GPIO_Init+0x308>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01f      	beq.n	8005396 <HAL_GPIO_Init+0x216>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4c      	ldr	r2, [pc, #304]	; (800548c <HAL_GPIO_Init+0x30c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d019      	beq.n	8005392 <HAL_GPIO_Init+0x212>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4b      	ldr	r2, [pc, #300]	; (8005490 <HAL_GPIO_Init+0x310>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_GPIO_Init+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <HAL_GPIO_Init+0x314>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00d      	beq.n	800538a <HAL_GPIO_Init+0x20a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a49      	ldr	r2, [pc, #292]	; (8005498 <HAL_GPIO_Init+0x318>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <HAL_GPIO_Init+0x206>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a48      	ldr	r2, [pc, #288]	; (800549c <HAL_GPIO_Init+0x31c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <HAL_GPIO_Init+0x202>
 800537e:	2306      	movs	r3, #6
 8005380:	e00c      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005382:	2307      	movs	r3, #7
 8005384:	e00a      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005386:	2305      	movs	r3, #5
 8005388:	e008      	b.n	800539c <HAL_GPIO_Init+0x21c>
 800538a:	2304      	movs	r3, #4
 800538c:	e006      	b.n	800539c <HAL_GPIO_Init+0x21c>
 800538e:	2303      	movs	r3, #3
 8005390:	e004      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005392:	2302      	movs	r3, #2
 8005394:	e002      	b.n	800539c <HAL_GPIO_Init+0x21c>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_GPIO_Init+0x21c>
 800539a:	2300      	movs	r3, #0
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	f002 0203 	and.w	r2, r2, #3
 80053a2:	0092      	lsls	r2, r2, #2
 80053a4:	4093      	lsls	r3, r2
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053ac:	4934      	ldr	r1, [pc, #208]	; (8005480 <HAL_GPIO_Init+0x300>)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	3302      	adds	r3, #2
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <HAL_GPIO_Init+0x320>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4013      	ands	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053de:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <HAL_GPIO_Init+0x320>)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053e4:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <HAL_GPIO_Init+0x320>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <HAL_GPIO_Init+0x320>)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800540e:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <HAL_GPIO_Init+0x320>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005432:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <HAL_GPIO_Init+0x320>)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <HAL_GPIO_Init+0x320>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	43db      	mvns	r3, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4013      	ands	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800545c:	4a10      	ldr	r2, [pc, #64]	; (80054a0 <HAL_GPIO_Init+0x320>)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b0f      	cmp	r3, #15
 800546c:	f67f ae96 	bls.w	800519c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005470:	bf00      	nop
 8005472:	3724      	adds	r7, #36	; 0x24
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	40023800 	.word	0x40023800
 8005480:	40013800 	.word	0x40013800
 8005484:	40020000 	.word	0x40020000
 8005488:	40020400 	.word	0x40020400
 800548c:	40020800 	.word	0x40020800
 8005490:	40020c00 	.word	0x40020c00
 8005494:	40021000 	.word	0x40021000
 8005498:	40021400 	.word	0x40021400
 800549c:	40021800 	.word	0x40021800
 80054a0:	40013c00 	.word	0x40013c00

080054a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
 80054b0:	4613      	mov	r3, r2
 80054b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054b4:	787b      	ldrb	r3, [r7, #1]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054c0:	e003      	b.n	80054ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054c2:	887b      	ldrh	r3, [r7, #2]
 80054c4:	041a      	lsls	r2, r3, #16
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	619a      	str	r2, [r3, #24]
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d006      	beq.n	80054fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054ee:	4a05      	ldr	r2, [pc, #20]	; (8005504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fbf6 	bl	8003ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40013c00 	.word	0x40013c00

08005508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0cc      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b68      	ldr	r3, [pc, #416]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d90c      	bls.n	8005544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b63      	ldr	r3, [pc, #396]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0b8      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800555c:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a58      	ldr	r2, [pc, #352]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a52      	ldr	r2, [pc, #328]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800557e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005580:	4b50      	ldr	r3, [pc, #320]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	494d      	ldr	r1, [pc, #308]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d044      	beq.n	8005628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d119      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e07f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e06f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e067      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 0203 	bic.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4934      	ldr	r1, [pc, #208]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f8:	f7fe fe4c 	bl	8004294 <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fe fe48 	bl	8004294 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	; 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e04f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 020c 	and.w	r2, r3, #12
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	429a      	cmp	r2, r3
 8005626:	d1eb      	bne.n	8005600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d20c      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e032      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800565c:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4916      	ldr	r1, [pc, #88]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	490e      	ldr	r1, [pc, #56]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800568e:	f000 f855 	bl	800573c <HAL_RCC_GetSysClockFreq>
 8005692:	4601      	mov	r1, r0
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	4a0a      	ldr	r2, [pc, #40]	; (80056c8 <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	5cd3      	ldrb	r3, [r2, r3]
 80056a2:	fa21 f303 	lsr.w	r3, r1, r3
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <HAL_RCC_ClockConfig+0x1c4>)
 80056a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fdac 	bl	800420c <HAL_InitTick>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40023c00 	.word	0x40023c00
 80056c4:	40023800 	.word	0x40023800
 80056c8:	08008624 	.word	0x08008624
 80056cc:	20000974 	.word	0x20000974
 80056d0:	20000978 	.word	0x20000978

080056d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000974 	.word	0x20000974

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4601      	mov	r1, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0a9b      	lsrs	r3, r3, #10
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4a03      	ldr	r2, [pc, #12]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005702:	5cd3      	ldrb	r3, [r2, r3]
 8005704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	08008634 	.word	0x08008634

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005718:	f7ff ffdc 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 800571c:	4601      	mov	r1, r0
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0b5b      	lsrs	r3, r3, #13
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4a03      	ldr	r2, [pc, #12]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800572a:	5cd3      	ldrb	r3, [r2, r3]
 800572c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800
 8005738:	08008634 	.word	0x08008634

0800573c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800573c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005756:	4bc6      	ldr	r3, [pc, #792]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b0c      	cmp	r3, #12
 8005760:	f200 817e 	bhi.w	8005a60 <HAL_RCC_GetSysClockFreq+0x324>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <HAL_RCC_GetSysClockFreq+0x30>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	080057a1 	.word	0x080057a1
 8005770:	08005a61 	.word	0x08005a61
 8005774:	08005a61 	.word	0x08005a61
 8005778:	08005a61 	.word	0x08005a61
 800577c:	080057a7 	.word	0x080057a7
 8005780:	08005a61 	.word	0x08005a61
 8005784:	08005a61 	.word	0x08005a61
 8005788:	08005a61 	.word	0x08005a61
 800578c:	080057ad 	.word	0x080057ad
 8005790:	08005a61 	.word	0x08005a61
 8005794:	08005a61 	.word	0x08005a61
 8005798:	08005a61 	.word	0x08005a61
 800579c:	08005909 	.word	0x08005909
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a0:	4bb4      	ldr	r3, [pc, #720]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x338>)
 80057a2:	613b      	str	r3, [r7, #16]
       break;
 80057a4:	e15f      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057a6:	4bb4      	ldr	r3, [pc, #720]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x33c>)
 80057a8:	613b      	str	r3, [r7, #16]
      break;
 80057aa:	e15c      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057ac:	4bb0      	ldr	r3, [pc, #704]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057b6:	4bae      	ldr	r3, [pc, #696]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d04a      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c2:	4bab      	ldr	r3, [pc, #684]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	ea03 0501 	and.w	r5, r3, r1
 80057d8:	ea04 0602 	and.w	r6, r4, r2
 80057dc:	4629      	mov	r1, r5
 80057de:	4632      	mov	r2, r6
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	f04f 0400 	mov.w	r4, #0
 80057e8:	0154      	lsls	r4, r2, #5
 80057ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057ee:	014b      	lsls	r3, r1, #5
 80057f0:	4619      	mov	r1, r3
 80057f2:	4622      	mov	r2, r4
 80057f4:	1b49      	subs	r1, r1, r5
 80057f6:	eb62 0206 	sbc.w	r2, r2, r6
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	0194      	lsls	r4, r2, #6
 8005804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005808:	018b      	lsls	r3, r1, #6
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	eb64 0402 	sbc.w	r4, r4, r2
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	00e2      	lsls	r2, r4, #3
 800581a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800581e:	00d9      	lsls	r1, r3, #3
 8005820:	460b      	mov	r3, r1
 8005822:	4614      	mov	r4, r2
 8005824:	195b      	adds	r3, r3, r5
 8005826:	eb44 0406 	adc.w	r4, r4, r6
 800582a:	f04f 0100 	mov.w	r1, #0
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	0262      	lsls	r2, r4, #9
 8005834:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005838:	0259      	lsls	r1, r3, #9
 800583a:	460b      	mov	r3, r1
 800583c:	4614      	mov	r4, r2
 800583e:	4618      	mov	r0, r3
 8005840:	4621      	mov	r1, r4
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f04f 0400 	mov.w	r4, #0
 8005848:	461a      	mov	r2, r3
 800584a:	4623      	mov	r3, r4
 800584c:	f7fb f92e 	bl	8000aac <__aeabi_uldivmod>
 8005850:	4603      	mov	r3, r0
 8005852:	460c      	mov	r4, r1
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e049      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005858:	4b85      	ldr	r3, [pc, #532]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	099b      	lsrs	r3, r3, #6
 800585e:	f04f 0400 	mov.w	r4, #0
 8005862:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	ea03 0501 	and.w	r5, r3, r1
 800586e:	ea04 0602 	and.w	r6, r4, r2
 8005872:	4629      	mov	r1, r5
 8005874:	4632      	mov	r2, r6
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	f04f 0400 	mov.w	r4, #0
 800587e:	0154      	lsls	r4, r2, #5
 8005880:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005884:	014b      	lsls	r3, r1, #5
 8005886:	4619      	mov	r1, r3
 8005888:	4622      	mov	r2, r4
 800588a:	1b49      	subs	r1, r1, r5
 800588c:	eb62 0206 	sbc.w	r2, r2, r6
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	0194      	lsls	r4, r2, #6
 800589a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800589e:	018b      	lsls	r3, r1, #6
 80058a0:	1a5b      	subs	r3, r3, r1
 80058a2:	eb64 0402 	sbc.w	r4, r4, r2
 80058a6:	f04f 0100 	mov.w	r1, #0
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	00e2      	lsls	r2, r4, #3
 80058b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058b4:	00d9      	lsls	r1, r3, #3
 80058b6:	460b      	mov	r3, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	195b      	adds	r3, r3, r5
 80058bc:	eb44 0406 	adc.w	r4, r4, r6
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	02a2      	lsls	r2, r4, #10
 80058ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058ce:	0299      	lsls	r1, r3, #10
 80058d0:	460b      	mov	r3, r1
 80058d2:	4614      	mov	r4, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	4621      	mov	r1, r4
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f04f 0400 	mov.w	r4, #0
 80058de:	461a      	mov	r2, r3
 80058e0:	4623      	mov	r3, r4
 80058e2:	f7fb f8e3 	bl	8000aac <__aeabi_uldivmod>
 80058e6:	4603      	mov	r3, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058ec:	4b60      	ldr	r3, [pc, #384]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	0c1b      	lsrs	r3, r3, #16
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	3301      	adds	r3, #1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	613b      	str	r3, [r7, #16]
      break;
 8005906:	e0ae      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005908:	4b59      	ldr	r3, [pc, #356]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005910:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005912:	4b57      	ldr	r3, [pc, #348]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d04a      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591e:	4b54      	ldr	r3, [pc, #336]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	f04f 0400 	mov.w	r4, #0
 8005928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	ea03 0501 	and.w	r5, r3, r1
 8005934:	ea04 0602 	and.w	r6, r4, r2
 8005938:	4629      	mov	r1, r5
 800593a:	4632      	mov	r2, r6
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	f04f 0400 	mov.w	r4, #0
 8005944:	0154      	lsls	r4, r2, #5
 8005946:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800594a:	014b      	lsls	r3, r1, #5
 800594c:	4619      	mov	r1, r3
 800594e:	4622      	mov	r2, r4
 8005950:	1b49      	subs	r1, r1, r5
 8005952:	eb62 0206 	sbc.w	r2, r2, r6
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	f04f 0400 	mov.w	r4, #0
 800595e:	0194      	lsls	r4, r2, #6
 8005960:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005964:	018b      	lsls	r3, r1, #6
 8005966:	1a5b      	subs	r3, r3, r1
 8005968:	eb64 0402 	sbc.w	r4, r4, r2
 800596c:	f04f 0100 	mov.w	r1, #0
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	00e2      	lsls	r2, r4, #3
 8005976:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800597a:	00d9      	lsls	r1, r3, #3
 800597c:	460b      	mov	r3, r1
 800597e:	4614      	mov	r4, r2
 8005980:	195b      	adds	r3, r3, r5
 8005982:	eb44 0406 	adc.w	r4, r4, r6
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	0262      	lsls	r2, r4, #9
 8005990:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005994:	0259      	lsls	r1, r3, #9
 8005996:	460b      	mov	r3, r1
 8005998:	4614      	mov	r4, r2
 800599a:	4618      	mov	r0, r3
 800599c:	4621      	mov	r1, r4
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f04f 0400 	mov.w	r4, #0
 80059a4:	461a      	mov	r2, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	f7fb f880 	bl	8000aac <__aeabi_uldivmod>
 80059ac:	4603      	mov	r3, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e049      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059b4:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	099b      	lsrs	r3, r3, #6
 80059ba:	f04f 0400 	mov.w	r4, #0
 80059be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	ea03 0501 	and.w	r5, r3, r1
 80059ca:	ea04 0602 	and.w	r6, r4, r2
 80059ce:	4629      	mov	r1, r5
 80059d0:	4632      	mov	r2, r6
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	f04f 0400 	mov.w	r4, #0
 80059da:	0154      	lsls	r4, r2, #5
 80059dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059e0:	014b      	lsls	r3, r1, #5
 80059e2:	4619      	mov	r1, r3
 80059e4:	4622      	mov	r2, r4
 80059e6:	1b49      	subs	r1, r1, r5
 80059e8:	eb62 0206 	sbc.w	r2, r2, r6
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	f04f 0400 	mov.w	r4, #0
 80059f4:	0194      	lsls	r4, r2, #6
 80059f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059fa:	018b      	lsls	r3, r1, #6
 80059fc:	1a5b      	subs	r3, r3, r1
 80059fe:	eb64 0402 	sbc.w	r4, r4, r2
 8005a02:	f04f 0100 	mov.w	r1, #0
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	00e2      	lsls	r2, r4, #3
 8005a0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a10:	00d9      	lsls	r1, r3, #3
 8005a12:	460b      	mov	r3, r1
 8005a14:	4614      	mov	r4, r2
 8005a16:	195b      	adds	r3, r3, r5
 8005a18:	eb44 0406 	adc.w	r4, r4, r6
 8005a1c:	f04f 0100 	mov.w	r1, #0
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	02a2      	lsls	r2, r4, #10
 8005a26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a2a:	0299      	lsls	r1, r3, #10
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4614      	mov	r4, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	4621      	mov	r1, r4
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f04f 0400 	mov.w	r4, #0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4623      	mov	r3, r4
 8005a3e:	f7fb f835 	bl	8000aac <__aeabi_uldivmod>
 8005a42:	4603      	mov	r3, r0
 8005a44:	460c      	mov	r4, r1
 8005a46:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	0f1b      	lsrs	r3, r3, #28
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	613b      	str	r3, [r7, #16]
      break;
 8005a5e:	e002      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x338>)
 8005a62:	613b      	str	r3, [r7, #16]
      break;
 8005a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a66:	693b      	ldr	r3, [r7, #16]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a70:	40023800 	.word	0x40023800
 8005a74:	00f42400 	.word	0x00f42400
 8005a78:	007a1200 	.word	0x007a1200

08005a7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8083 	beq.w	8005b9c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a96:	4b95      	ldr	r3, [pc, #596]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d019      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005aa2:	4b92      	ldr	r3, [pc, #584]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d106      	bne.n	8005abc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005aae:	4b8f      	ldr	r3, [pc, #572]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aba:	d00c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005abc:	4b8b      	ldr	r3, [pc, #556]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ac4:	2b0c      	cmp	r3, #12
 8005ac6:	d112      	bne.n	8005aee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ac8:	4b88      	ldr	r3, [pc, #544]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad4:	d10b      	bne.n	8005aee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad6:	4b85      	ldr	r3, [pc, #532]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d05b      	beq.n	8005b9a <HAL_RCC_OscConfig+0x11e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d157      	bne.n	8005b9a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e216      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af6:	d106      	bne.n	8005b06 <HAL_RCC_OscConfig+0x8a>
 8005af8:	4b7c      	ldr	r3, [pc, #496]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7b      	ldr	r2, [pc, #492]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e01d      	b.n	8005b42 <HAL_RCC_OscConfig+0xc6>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b0e:	d10c      	bne.n	8005b2a <HAL_RCC_OscConfig+0xae>
 8005b10:	4b76      	ldr	r3, [pc, #472]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a75      	ldr	r2, [pc, #468]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	4b73      	ldr	r3, [pc, #460]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a72      	ldr	r2, [pc, #456]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e00b      	b.n	8005b42 <HAL_RCC_OscConfig+0xc6>
 8005b2a:	4b70      	ldr	r3, [pc, #448]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a6f      	ldr	r2, [pc, #444]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	4b6d      	ldr	r3, [pc, #436]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a6c      	ldr	r2, [pc, #432]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d013      	beq.n	8005b72 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fe fba3 	bl	8004294 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b52:	f7fe fb9f 	bl	8004294 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b64      	cmp	r3, #100	; 0x64
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e1db      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b64:	4b61      	ldr	r3, [pc, #388]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f0      	beq.n	8005b52 <HAL_RCC_OscConfig+0xd6>
 8005b70:	e014      	b.n	8005b9c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b72:	f7fe fb8f 	bl	8004294 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b7a:	f7fe fb8b 	bl	8004294 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	; 0x64
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e1c7      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8c:	4b57      	ldr	r3, [pc, #348]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f0      	bne.n	8005b7a <HAL_RCC_OscConfig+0xfe>
 8005b98:	e000      	b.n	8005b9c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d06f      	beq.n	8005c88 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ba8:	4b50      	ldr	r3, [pc, #320]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d017      	beq.n	8005be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bb4:	4b4d      	ldr	r3, [pc, #308]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bc0:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bcc:	4b47      	ldr	r3, [pc, #284]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d11c      	bne.n	8005c12 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd8:	4b44      	ldr	r3, [pc, #272]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d116      	bne.n	8005c12 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_OscConfig+0x180>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e18f      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4938      	ldr	r1, [pc, #224]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c10:	e03a      	b.n	8005c88 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d020      	beq.n	8005c5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c1a:	4b35      	ldr	r3, [pc, #212]	; (8005cf0 <HAL_RCC_OscConfig+0x274>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fe fb38 	bl	8004294 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c28:	f7fe fb34 	bl	8004294 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e170      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c46:	4b29      	ldr	r3, [pc, #164]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	4925      	ldr	r1, [pc, #148]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
 8005c5a:	e015      	b.n	8005c88 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c5c:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <HAL_RCC_OscConfig+0x274>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fe fb17 	bl	8004294 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c6a:	f7fe fb13 	bl	8004294 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e14f      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d037      	beq.n	8005d04 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d016      	beq.n	8005cca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c9c:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <HAL_RCC_OscConfig+0x278>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca2:	f7fe faf7 	bl	8004294 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005caa:	f7fe faf3 	bl	8004294 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e12f      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_OscConfig+0x270>)
 8005cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x22e>
 8005cc8:	e01c      	b.n	8005d04 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_RCC_OscConfig+0x278>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd0:	f7fe fae0 	bl	8004294 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd6:	e00f      	b.n	8005cf8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd8:	f7fe fadc 	bl	8004294 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d908      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e118      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	42470000 	.word	0x42470000
 8005cf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf8:	4b8a      	ldr	r3, [pc, #552]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e9      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8097 	beq.w	8005e40 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d16:	4b83      	ldr	r3, [pc, #524]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	4b7f      	ldr	r3, [pc, #508]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	4a7e      	ldr	r2, [pc, #504]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6413      	str	r3, [r2, #64]	; 0x40
 8005d32:	4b7c      	ldr	r3, [pc, #496]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d42:	4b79      	ldr	r3, [pc, #484]	; (8005f28 <HAL_RCC_OscConfig+0x4ac>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d118      	bne.n	8005d80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4e:	4b76      	ldr	r3, [pc, #472]	; (8005f28 <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a75      	ldr	r2, [pc, #468]	; (8005f28 <HAL_RCC_OscConfig+0x4ac>)
 8005d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d5a:	f7fe fa9b 	bl	8004294 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d62:	f7fe fa97 	bl	8004294 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e0d3      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d74:	4b6c      	ldr	r3, [pc, #432]	; (8005f28 <HAL_RCC_OscConfig+0x4ac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d106      	bne.n	8005d96 <HAL_RCC_OscConfig+0x31a>
 8005d88:	4b66      	ldr	r3, [pc, #408]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8c:	4a65      	ldr	r2, [pc, #404]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	6713      	str	r3, [r2, #112]	; 0x70
 8005d94:	e01c      	b.n	8005dd0 <HAL_RCC_OscConfig+0x354>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x33c>
 8005d9e:	4b61      	ldr	r3, [pc, #388]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	4a60      	ldr	r2, [pc, #384]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005da4:	f043 0304 	orr.w	r3, r3, #4
 8005da8:	6713      	str	r3, [r2, #112]	; 0x70
 8005daa:	4b5e      	ldr	r3, [pc, #376]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4a5d      	ldr	r2, [pc, #372]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	6713      	str	r3, [r2, #112]	; 0x70
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0x354>
 8005db8:	4b5a      	ldr	r3, [pc, #360]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	4a59      	ldr	r2, [pc, #356]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc8:	4a56      	ldr	r2, [pc, #344]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005dca:	f023 0304 	bic.w	r3, r3, #4
 8005dce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d015      	beq.n	8005e04 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd8:	f7fe fa5c 	bl	8004294 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dde:	e00a      	b.n	8005df6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de0:	f7fe fa58 	bl	8004294 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e092      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df6:	4b4b      	ldr	r3, [pc, #300]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0ee      	beq.n	8005de0 <HAL_RCC_OscConfig+0x364>
 8005e02:	e014      	b.n	8005e2e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e04:	f7fe fa46 	bl	8004294 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e0a:	e00a      	b.n	8005e22 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e0c:	f7fe fa42 	bl	8004294 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e07c      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e22:	4b40      	ldr	r3, [pc, #256]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1ee      	bne.n	8005e0c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d105      	bne.n	8005e40 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e34:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	4a3a      	ldr	r2, [pc, #232]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d068      	beq.n	8005f1a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e48:	4b36      	ldr	r3, [pc, #216]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 030c 	and.w	r3, r3, #12
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d060      	beq.n	8005f16 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d145      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5c:	4b33      	ldr	r3, [pc, #204]	; (8005f2c <HAL_RCC_OscConfig+0x4b0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fe fa17 	bl	8004294 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fe fa13 	bl	8004294 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e04f      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7c:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1f0      	bne.n	8005e6a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	019b      	lsls	r3, r3, #6
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	071b      	lsls	r3, r3, #28
 8005eb4:	491b      	ldr	r1, [pc, #108]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eba:	4b1c      	ldr	r3, [pc, #112]	; (8005f2c <HAL_RCC_OscConfig+0x4b0>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fe f9e8 	bl	8004294 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec8:	f7fe f9e4 	bl	8004294 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e020      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x44c>
 8005ee6:	e018      	b.n	8005f1a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <HAL_RCC_OscConfig+0x4b0>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eee:	f7fe f9d1 	bl	8004294 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef6:	f7fe f9cd 	bl	8004294 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e009      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCC_OscConfig+0x4a8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x47a>
 8005f14:	e001      	b.n	8005f1a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40007000 	.word	0x40007000
 8005f2c:	42470060 	.word	0x42470060

08005f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e01d      	b.n	8005f7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fd ffc2 	bl	8003ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f000 fa64 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b06      	cmp	r3, #6
 8005fa6:	d007      	beq.n	8005fb8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10f      	bne.n	800600e <HAL_TIM_Base_Stop+0x40>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a1a      	ldr	r2, [r3, #32]
 8005ff4:	f240 4344 	movw	r3, #1092	; 0x444
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <HAL_TIM_Base_Stop+0x40>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b06      	cmp	r3, #6
 800604c:	d007      	beq.n	800605e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	d122      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d11b      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0202 	mvn.w	r2, #2
 8006098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f9a5 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 80060b4:	e005      	b.n	80060c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f997 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9a8 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d122      	bne.n	800611c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d11b      	bne.n	800611c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0204 	mvn.w	r2, #4
 80060ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f97b 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 8006108:	e005      	b.n	8006116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f96d 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f97e 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b08      	cmp	r3, #8
 8006128:	d122      	bne.n	8006170 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b08      	cmp	r3, #8
 8006136:	d11b      	bne.n	8006170 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0208 	mvn.w	r2, #8
 8006140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2204      	movs	r2, #4
 8006146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f951 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 800615c:	e005      	b.n	800616a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f943 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f954 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b10      	cmp	r3, #16
 800617c:	d122      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b10      	cmp	r3, #16
 800618a:	d11b      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0210 	mvn.w	r2, #16
 8006194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2208      	movs	r2, #8
 800619a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f927 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f919 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f92a 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d10e      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d107      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0201 	mvn.w	r2, #1
 80061e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fd fd6a 	bl	8003cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fa:	2b80      	cmp	r3, #128	; 0x80
 80061fc:	d10e      	bne.n	800621c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d107      	bne.n	800621c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fad0 	bl	80067bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d10e      	bne.n	8006248 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d107      	bne.n	8006248 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8ef 	bl	8006426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d10e      	bne.n	8006274 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b20      	cmp	r3, #32
 8006262:	d107      	bne.n	8006274 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0220 	mvn.w	r2, #32
 800626c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa9a 	bl	80067a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_TIM_ConfigClockSource+0x18>
 8006290:	2302      	movs	r3, #2
 8006292:	e0a6      	b.n	80063e2 <HAL_TIM_ConfigClockSource+0x166>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d067      	beq.n	800639c <HAL_TIM_ConfigClockSource+0x120>
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d80b      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x6c>
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d073      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0x140>
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d802      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x62>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d06f      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80062dc:	e078      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d06c      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0x140>
 80062e2:	2b30      	cmp	r3, #48	; 0x30
 80062e4:	d06a      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80062e6:	e073      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062e8:	2b70      	cmp	r3, #112	; 0x70
 80062ea:	d00d      	beq.n	8006308 <HAL_TIM_ConfigClockSource+0x8c>
 80062ec:	2b70      	cmp	r3, #112	; 0x70
 80062ee:	d804      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x7e>
 80062f0:	2b50      	cmp	r3, #80	; 0x50
 80062f2:	d033      	beq.n	800635c <HAL_TIM_ConfigClockSource+0xe0>
 80062f4:	2b60      	cmp	r3, #96	; 0x60
 80062f6:	d041      	beq.n	800637c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80062f8:	e06a      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fe:	d066      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x152>
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006304:	d017      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006306:	e063      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6899      	ldr	r1, [r3, #8]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f000 f9aa 	bl	8006670 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800632a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	609a      	str	r2, [r3, #8]
      break;
 8006334:	e04c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6899      	ldr	r1, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f000 f993 	bl	8006670 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006358:	609a      	str	r2, [r3, #8]
      break;
 800635a:	e039      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6859      	ldr	r1, [r3, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	461a      	mov	r2, r3
 800636a:	f000 f907 	bl	800657c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2150      	movs	r1, #80	; 0x50
 8006374:	4618      	mov	r0, r3
 8006376:	f000 f960 	bl	800663a <TIM_ITRx_SetConfig>
      break;
 800637a:	e029      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	461a      	mov	r2, r3
 800638a:	f000 f926 	bl	80065da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2160      	movs	r1, #96	; 0x60
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f950 	bl	800663a <TIM_ITRx_SetConfig>
      break;
 800639a:	e019      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6859      	ldr	r1, [r3, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	461a      	mov	r2, r3
 80063aa:	f000 f8e7 	bl	800657c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2140      	movs	r1, #64	; 0x40
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f940 	bl	800663a <TIM_ITRx_SetConfig>
      break;
 80063ba:	e009      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f000 f937 	bl	800663a <TIM_ITRx_SetConfig>
      break;
 80063cc:	e000      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80063ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a40      	ldr	r2, [pc, #256]	; (8006550 <TIM_Base_SetConfig+0x114>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d00f      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3d      	ldr	r2, [pc, #244]	; (8006554 <TIM_Base_SetConfig+0x118>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00b      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a3c      	ldr	r2, [pc, #240]	; (8006558 <TIM_Base_SetConfig+0x11c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d007      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a3b      	ldr	r2, [pc, #236]	; (800655c <TIM_Base_SetConfig+0x120>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a3a      	ldr	r2, [pc, #232]	; (8006560 <TIM_Base_SetConfig+0x124>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d108      	bne.n	800648e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2f      	ldr	r2, [pc, #188]	; (8006550 <TIM_Base_SetConfig+0x114>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d02b      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649c:	d027      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2c      	ldr	r2, [pc, #176]	; (8006554 <TIM_Base_SetConfig+0x118>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d023      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2b      	ldr	r2, [pc, #172]	; (8006558 <TIM_Base_SetConfig+0x11c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01f      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2a      	ldr	r2, [pc, #168]	; (800655c <TIM_Base_SetConfig+0x120>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01b      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a29      	ldr	r2, [pc, #164]	; (8006560 <TIM_Base_SetConfig+0x124>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d017      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a28      	ldr	r2, [pc, #160]	; (8006564 <TIM_Base_SetConfig+0x128>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a27      	ldr	r2, [pc, #156]	; (8006568 <TIM_Base_SetConfig+0x12c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00f      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a26      	ldr	r2, [pc, #152]	; (800656c <TIM_Base_SetConfig+0x130>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00b      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <TIM_Base_SetConfig+0x134>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d007      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a24      	ldr	r2, [pc, #144]	; (8006574 <TIM_Base_SetConfig+0x138>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a23      	ldr	r2, [pc, #140]	; (8006578 <TIM_Base_SetConfig+0x13c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d108      	bne.n	8006500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a0a      	ldr	r2, [pc, #40]	; (8006550 <TIM_Base_SetConfig+0x114>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0xf8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <TIM_Base_SetConfig+0x124>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d103      	bne.n	800653c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	615a      	str	r2, [r3, #20]
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40000c00 	.word	0x40000c00
 8006560:	40010400 	.word	0x40010400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800
 8006570:	40001800 	.word	0x40001800
 8006574:	40001c00 	.word	0x40001c00
 8006578:	40002000 	.word	0x40002000

0800657c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f023 0201 	bic.w	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 030a 	bic.w	r3, r3, #10
 80065b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065da:	b480      	push	{r7}
 80065dc:	b087      	sub	sp, #28
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0210 	bic.w	r2, r3, #16
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	031b      	lsls	r3, r3, #12
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	f043 0307 	orr.w	r3, r3, #7
 800665c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	609a      	str	r2, [r3, #8]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800668a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	021a      	lsls	r2, r3, #8
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	431a      	orrs	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4313      	orrs	r3, r2
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	609a      	str	r2, [r3, #8]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e05a      	b.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a21      	ldr	r2, [pc, #132]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d022      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006714:	d01d      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d018      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1a      	ldr	r2, [pc, #104]	; (8006798 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00e      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a18      	ldr	r2, [pc, #96]	; (800679c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d009      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d004      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d10c      	bne.n	800676c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4313      	orrs	r3, r2
 8006762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40000c00 	.word	0x40000c00
 800679c:	40010400 	.word	0x40010400
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40001800 	.word	0x40001800

080067a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e03f      	b.n	8006862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fd fbc4 	bl	8003f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	; 0x24
 8006800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb97 	bl	8006f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b088      	sub	sp, #32
 800686e:	af02      	add	r7, sp, #8
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b20      	cmp	r3, #32
 8006888:	f040 8083 	bne.w	8006992 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_UART_Transmit+0x2e>
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e07b      	b.n	8006994 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Transmit+0x40>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e074      	b.n	8006994 <HAL_UART_Transmit+0x12a>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2221      	movs	r2, #33	; 0x21
 80068bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80068c0:	f7fd fce8 	bl	8004294 <HAL_GetTick>
 80068c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	88fa      	ldrh	r2, [r7, #6]
 80068ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80068da:	e042      	b.n	8006962 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f2:	d122      	bne.n	800693a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2180      	movs	r1, #128	; 0x80
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f9b6 	bl	8006c70 <UART_WaitOnFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e042      	b.n	8006994 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006920:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	3302      	adds	r3, #2
 800692e:	60bb      	str	r3, [r7, #8]
 8006930:	e017      	b.n	8006962 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3301      	adds	r3, #1
 8006936:	60bb      	str	r3, [r7, #8]
 8006938:	e013      	b.n	8006962 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f993 	bl	8006c70 <UART_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e01f      	b.n	8006994 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	60ba      	str	r2, [r7, #8]
 800695a:	781a      	ldrb	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1b7      	bne.n	80068dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2200      	movs	r2, #0
 8006974:	2140      	movs	r1, #64	; 0x40
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f97a 	bl	8006c70 <UART_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e006      	b.n	8006994 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d140      	bne.n	8006a38 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <HAL_UART_Receive_IT+0x26>
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e039      	b.n	8006a3a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_UART_Receive_IT+0x38>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e032      	b.n	8006a3a <HAL_UART_Receive_IT+0x9e>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2222      	movs	r2, #34	; 0x22
 80069f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a12:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0220 	orr.w	r2, r2, #32
 8006a32:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e000      	b.n	8006a3a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006a38:	2302      	movs	r3, #2
  }
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x52>
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f9d6 	bl	8006e44 <UART_Receive_IT>
      return;
 8006a98:	e0d1      	b.n	8006c3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80b0 	beq.w	8006c02 <HAL_UART_IRQHandler+0x1ba>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x70>
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80a5 	beq.w	8006c02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x90>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	f043 0201 	orr.w	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_UART_IRQHandler+0xb0>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	f043 0202 	orr.w	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_UART_IRQHandler+0xd0>
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00f      	beq.n	8006b42 <HAL_UART_IRQHandler+0xfa>
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_UART_IRQHandler+0xee>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	f043 0208 	orr.w	r2, r3, #8
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d078      	beq.n	8006c3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <HAL_UART_IRQHandler+0x11c>
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f970 	bl	8006e44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <HAL_UART_IRQHandler+0x144>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d031      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f8b9 	bl	8006d04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b40      	cmp	r3, #64	; 0x40
 8006b9e:	d123      	bne.n	8006be8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbc:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <HAL_UART_IRQHandler+0x1fc>)
 8006bbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe f851 	bl	8004c6c <HAL_DMA_Abort_IT>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d016      	beq.n	8006bfe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bda:	4610      	mov	r0, r2
 8006bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bde:	e00e      	b.n	8006bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f83b 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be6:	e00a      	b.n	8006bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f837 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bee:	e006      	b.n	8006bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f833 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006bfc:	e01e      	b.n	8006c3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfe:	bf00      	nop
    return;
 8006c00:	e01c      	b.n	8006c3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_UART_IRQHandler+0x1d6>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f8a6 	bl	8006d68 <UART_Transmit_IT>
    return;
 8006c1c:	e00f      	b.n	8006c3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_UART_IRQHandler+0x1f6>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8ee 	bl	8006e14 <UART_EndTransmit_IT>
    return;
 8006c38:	bf00      	nop
 8006c3a:	e000      	b.n	8006c3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8006c3c:	bf00      	nop
  }
}
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08006d41 	.word	0x08006d41

08006c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c80:	e02c      	b.n	8006cdc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d028      	beq.n	8006cdc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c90:	f7fd fb00 	bl	8004294 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d21d      	bcs.n	8006cdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695a      	ldr	r2, [r3, #20]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0201 	bic.w	r2, r2, #1
 8006cbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e00f      	b.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d0c3      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff ff7e 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b21      	cmp	r3, #33	; 0x21
 8006d7a:	d144      	bne.n	8006e06 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d84:	d11a      	bne.n	8006dbc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d9a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d105      	bne.n	8006db0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	1c9a      	adds	r2, r3, #2
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	621a      	str	r2, [r3, #32]
 8006dae:	e00e      	b.n	8006dce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	621a      	str	r2, [r3, #32]
 8006dba:	e008      	b.n	8006dce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	1c59      	adds	r1, r3, #1
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6211      	str	r1, [r2, #32]
 8006dc6:	781a      	ldrb	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10f      	bne.n	8006e02 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006df0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e000      	b.n	8006e08 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e06:	2302      	movs	r3, #2
  }
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ff07 	bl	8006c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b22      	cmp	r3, #34	; 0x22
 8006e56:	d171      	bne.n	8006f3c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d123      	bne.n	8006eaa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10e      	bne.n	8006e8e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	1c9a      	adds	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e8c:	e029      	b.n	8006ee2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ea8:	e01b      	b.n	8006ee2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6858      	ldr	r0, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	1c59      	adds	r1, r3, #1
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6291      	str	r1, [r2, #40]	; 0x28
 8006ec2:	b2c2      	uxtb	r2, r0
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e00c      	b.n	8006ee2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	1c58      	adds	r0, r3, #1
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	6288      	str	r0, [r1, #40]	; 0x28
 8006eda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d120      	bne.n	8006f38 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0220 	bic.w	r2, r2, #32
 8006f04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0201 	bic.w	r2, r2, #1
 8006f24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fc fef4 	bl	8003d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e002      	b.n	8006f3e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e000      	b.n	8006f3e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006f3c:	2302      	movs	r3, #2
  }
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f8a:	f023 030c 	bic.w	r3, r3, #12
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	68f9      	ldr	r1, [r7, #12]
 8006f94:	430b      	orrs	r3, r1
 8006f96:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb6:	f040 818b 	bne.w	80072d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4ac1      	ldr	r2, [pc, #772]	; (80072c4 <UART_SetConfig+0x37c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d005      	beq.n	8006fd0 <UART_SetConfig+0x88>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4abf      	ldr	r2, [pc, #764]	; (80072c8 <UART_SetConfig+0x380>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	f040 80bd 	bne.w	800714a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fd0:	f7fe fba0 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8006fd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	461d      	mov	r5, r3
 8006fda:	f04f 0600 	mov.w	r6, #0
 8006fde:	46a8      	mov	r8, r5
 8006fe0:	46b1      	mov	r9, r6
 8006fe2:	eb18 0308 	adds.w	r3, r8, r8
 8006fe6:	eb49 0409 	adc.w	r4, r9, r9
 8006fea:	4698      	mov	r8, r3
 8006fec:	46a1      	mov	r9, r4
 8006fee:	eb18 0805 	adds.w	r8, r8, r5
 8006ff2:	eb49 0906 	adc.w	r9, r9, r6
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007002:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007006:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800700a:	4688      	mov	r8, r1
 800700c:	4691      	mov	r9, r2
 800700e:	eb18 0005 	adds.w	r0, r8, r5
 8007012:	eb49 0106 	adc.w	r1, r9, r6
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	461d      	mov	r5, r3
 800701c:	f04f 0600 	mov.w	r6, #0
 8007020:	196b      	adds	r3, r5, r5
 8007022:	eb46 0406 	adc.w	r4, r6, r6
 8007026:	461a      	mov	r2, r3
 8007028:	4623      	mov	r3, r4
 800702a:	f7f9 fd3f 	bl	8000aac <__aeabi_uldivmod>
 800702e:	4603      	mov	r3, r0
 8007030:	460c      	mov	r4, r1
 8007032:	461a      	mov	r2, r3
 8007034:	4ba5      	ldr	r3, [pc, #660]	; (80072cc <UART_SetConfig+0x384>)
 8007036:	fba3 2302 	umull	r2, r3, r3, r2
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	461d      	mov	r5, r3
 8007044:	f04f 0600 	mov.w	r6, #0
 8007048:	46a9      	mov	r9, r5
 800704a:	46b2      	mov	sl, r6
 800704c:	eb19 0309 	adds.w	r3, r9, r9
 8007050:	eb4a 040a 	adc.w	r4, sl, sl
 8007054:	4699      	mov	r9, r3
 8007056:	46a2      	mov	sl, r4
 8007058:	eb19 0905 	adds.w	r9, r9, r5
 800705c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007060:	f04f 0100 	mov.w	r1, #0
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800706c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007070:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007074:	4689      	mov	r9, r1
 8007076:	4692      	mov	sl, r2
 8007078:	eb19 0005 	adds.w	r0, r9, r5
 800707c:	eb4a 0106 	adc.w	r1, sl, r6
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	461d      	mov	r5, r3
 8007086:	f04f 0600 	mov.w	r6, #0
 800708a:	196b      	adds	r3, r5, r5
 800708c:	eb46 0406 	adc.w	r4, r6, r6
 8007090:	461a      	mov	r2, r3
 8007092:	4623      	mov	r3, r4
 8007094:	f7f9 fd0a 	bl	8000aac <__aeabi_uldivmod>
 8007098:	4603      	mov	r3, r0
 800709a:	460c      	mov	r4, r1
 800709c:	461a      	mov	r2, r3
 800709e:	4b8b      	ldr	r3, [pc, #556]	; (80072cc <UART_SetConfig+0x384>)
 80070a0:	fba3 1302 	umull	r1, r3, r3, r2
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	2164      	movs	r1, #100	; 0x64
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	3332      	adds	r3, #50	; 0x32
 80070b2:	4a86      	ldr	r2, [pc, #536]	; (80072cc <UART_SetConfig+0x384>)
 80070b4:	fba2 2303 	umull	r2, r3, r2, r3
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070c0:	4498      	add	r8, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	461d      	mov	r5, r3
 80070c6:	f04f 0600 	mov.w	r6, #0
 80070ca:	46a9      	mov	r9, r5
 80070cc:	46b2      	mov	sl, r6
 80070ce:	eb19 0309 	adds.w	r3, r9, r9
 80070d2:	eb4a 040a 	adc.w	r4, sl, sl
 80070d6:	4699      	mov	r9, r3
 80070d8:	46a2      	mov	sl, r4
 80070da:	eb19 0905 	adds.w	r9, r9, r5
 80070de:	eb4a 0a06 	adc.w	sl, sl, r6
 80070e2:	f04f 0100 	mov.w	r1, #0
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070f6:	4689      	mov	r9, r1
 80070f8:	4692      	mov	sl, r2
 80070fa:	eb19 0005 	adds.w	r0, r9, r5
 80070fe:	eb4a 0106 	adc.w	r1, sl, r6
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	461d      	mov	r5, r3
 8007108:	f04f 0600 	mov.w	r6, #0
 800710c:	196b      	adds	r3, r5, r5
 800710e:	eb46 0406 	adc.w	r4, r6, r6
 8007112:	461a      	mov	r2, r3
 8007114:	4623      	mov	r3, r4
 8007116:	f7f9 fcc9 	bl	8000aac <__aeabi_uldivmod>
 800711a:	4603      	mov	r3, r0
 800711c:	460c      	mov	r4, r1
 800711e:	461a      	mov	r2, r3
 8007120:	4b6a      	ldr	r3, [pc, #424]	; (80072cc <UART_SetConfig+0x384>)
 8007122:	fba3 1302 	umull	r1, r3, r3, r2
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	2164      	movs	r1, #100	; 0x64
 800712a:	fb01 f303 	mul.w	r3, r1, r3
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	3332      	adds	r3, #50	; 0x32
 8007134:	4a65      	ldr	r2, [pc, #404]	; (80072cc <UART_SetConfig+0x384>)
 8007136:	fba2 2303 	umull	r2, r3, r2, r3
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	f003 0207 	and.w	r2, r3, #7
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4442      	add	r2, r8
 8007146:	609a      	str	r2, [r3, #8]
 8007148:	e26f      	b.n	800762a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800714a:	f7fe facf 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 800714e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	461d      	mov	r5, r3
 8007154:	f04f 0600 	mov.w	r6, #0
 8007158:	46a8      	mov	r8, r5
 800715a:	46b1      	mov	r9, r6
 800715c:	eb18 0308 	adds.w	r3, r8, r8
 8007160:	eb49 0409 	adc.w	r4, r9, r9
 8007164:	4698      	mov	r8, r3
 8007166:	46a1      	mov	r9, r4
 8007168:	eb18 0805 	adds.w	r8, r8, r5
 800716c:	eb49 0906 	adc.w	r9, r9, r6
 8007170:	f04f 0100 	mov.w	r1, #0
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800717c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007180:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007184:	4688      	mov	r8, r1
 8007186:	4691      	mov	r9, r2
 8007188:	eb18 0005 	adds.w	r0, r8, r5
 800718c:	eb49 0106 	adc.w	r1, r9, r6
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	461d      	mov	r5, r3
 8007196:	f04f 0600 	mov.w	r6, #0
 800719a:	196b      	adds	r3, r5, r5
 800719c:	eb46 0406 	adc.w	r4, r6, r6
 80071a0:	461a      	mov	r2, r3
 80071a2:	4623      	mov	r3, r4
 80071a4:	f7f9 fc82 	bl	8000aac <__aeabi_uldivmod>
 80071a8:	4603      	mov	r3, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b47      	ldr	r3, [pc, #284]	; (80072cc <UART_SetConfig+0x384>)
 80071b0:	fba3 2302 	umull	r2, r3, r3, r2
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	461d      	mov	r5, r3
 80071be:	f04f 0600 	mov.w	r6, #0
 80071c2:	46a9      	mov	r9, r5
 80071c4:	46b2      	mov	sl, r6
 80071c6:	eb19 0309 	adds.w	r3, r9, r9
 80071ca:	eb4a 040a 	adc.w	r4, sl, sl
 80071ce:	4699      	mov	r9, r3
 80071d0:	46a2      	mov	sl, r4
 80071d2:	eb19 0905 	adds.w	r9, r9, r5
 80071d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80071da:	f04f 0100 	mov.w	r1, #0
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071ee:	4689      	mov	r9, r1
 80071f0:	4692      	mov	sl, r2
 80071f2:	eb19 0005 	adds.w	r0, r9, r5
 80071f6:	eb4a 0106 	adc.w	r1, sl, r6
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	461d      	mov	r5, r3
 8007200:	f04f 0600 	mov.w	r6, #0
 8007204:	196b      	adds	r3, r5, r5
 8007206:	eb46 0406 	adc.w	r4, r6, r6
 800720a:	461a      	mov	r2, r3
 800720c:	4623      	mov	r3, r4
 800720e:	f7f9 fc4d 	bl	8000aac <__aeabi_uldivmod>
 8007212:	4603      	mov	r3, r0
 8007214:	460c      	mov	r4, r1
 8007216:	461a      	mov	r2, r3
 8007218:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <UART_SetConfig+0x384>)
 800721a:	fba3 1302 	umull	r1, r3, r3, r2
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	2164      	movs	r1, #100	; 0x64
 8007222:	fb01 f303 	mul.w	r3, r1, r3
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	3332      	adds	r3, #50	; 0x32
 800722c:	4a27      	ldr	r2, [pc, #156]	; (80072cc <UART_SetConfig+0x384>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800723a:	4498      	add	r8, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	461d      	mov	r5, r3
 8007240:	f04f 0600 	mov.w	r6, #0
 8007244:	46a9      	mov	r9, r5
 8007246:	46b2      	mov	sl, r6
 8007248:	eb19 0309 	adds.w	r3, r9, r9
 800724c:	eb4a 040a 	adc.w	r4, sl, sl
 8007250:	4699      	mov	r9, r3
 8007252:	46a2      	mov	sl, r4
 8007254:	eb19 0905 	adds.w	r9, r9, r5
 8007258:	eb4a 0a06 	adc.w	sl, sl, r6
 800725c:	f04f 0100 	mov.w	r1, #0
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800726c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007270:	4689      	mov	r9, r1
 8007272:	4692      	mov	sl, r2
 8007274:	eb19 0005 	adds.w	r0, r9, r5
 8007278:	eb4a 0106 	adc.w	r1, sl, r6
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	461d      	mov	r5, r3
 8007282:	f04f 0600 	mov.w	r6, #0
 8007286:	196b      	adds	r3, r5, r5
 8007288:	eb46 0406 	adc.w	r4, r6, r6
 800728c:	461a      	mov	r2, r3
 800728e:	4623      	mov	r3, r4
 8007290:	f7f9 fc0c 	bl	8000aac <__aeabi_uldivmod>
 8007294:	4603      	mov	r3, r0
 8007296:	460c      	mov	r4, r1
 8007298:	461a      	mov	r2, r3
 800729a:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <UART_SetConfig+0x384>)
 800729c:	fba3 1302 	umull	r1, r3, r3, r2
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	2164      	movs	r1, #100	; 0x64
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	3332      	adds	r3, #50	; 0x32
 80072ae:	4a07      	ldr	r2, [pc, #28]	; (80072cc <UART_SetConfig+0x384>)
 80072b0:	fba2 2303 	umull	r2, r3, r2, r3
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	f003 0207 	and.w	r2, r3, #7
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4442      	add	r2, r8
 80072c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80072c2:	e1b2      	b.n	800762a <UART_SetConfig+0x6e2>
 80072c4:	40011000 	.word	0x40011000
 80072c8:	40011400 	.word	0x40011400
 80072cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4ad7      	ldr	r2, [pc, #860]	; (8007634 <UART_SetConfig+0x6ec>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d005      	beq.n	80072e6 <UART_SetConfig+0x39e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4ad6      	ldr	r2, [pc, #856]	; (8007638 <UART_SetConfig+0x6f0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	f040 80d1 	bne.w	8007488 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80072e6:	f7fe fa15 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 80072ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	469a      	mov	sl, r3
 80072f0:	f04f 0b00 	mov.w	fp, #0
 80072f4:	46d0      	mov	r8, sl
 80072f6:	46d9      	mov	r9, fp
 80072f8:	eb18 0308 	adds.w	r3, r8, r8
 80072fc:	eb49 0409 	adc.w	r4, r9, r9
 8007300:	4698      	mov	r8, r3
 8007302:	46a1      	mov	r9, r4
 8007304:	eb18 080a 	adds.w	r8, r8, sl
 8007308:	eb49 090b 	adc.w	r9, r9, fp
 800730c:	f04f 0100 	mov.w	r1, #0
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007318:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800731c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007320:	4688      	mov	r8, r1
 8007322:	4691      	mov	r9, r2
 8007324:	eb1a 0508 	adds.w	r5, sl, r8
 8007328:	eb4b 0609 	adc.w	r6, fp, r9
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4619      	mov	r1, r3
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	f04f 0400 	mov.w	r4, #0
 800733e:	0094      	lsls	r4, r2, #2
 8007340:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007344:	008b      	lsls	r3, r1, #2
 8007346:	461a      	mov	r2, r3
 8007348:	4623      	mov	r3, r4
 800734a:	4628      	mov	r0, r5
 800734c:	4631      	mov	r1, r6
 800734e:	f7f9 fbad 	bl	8000aac <__aeabi_uldivmod>
 8007352:	4603      	mov	r3, r0
 8007354:	460c      	mov	r4, r1
 8007356:	461a      	mov	r2, r3
 8007358:	4bb8      	ldr	r3, [pc, #736]	; (800763c <UART_SetConfig+0x6f4>)
 800735a:	fba3 2302 	umull	r2, r3, r3, r2
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	469b      	mov	fp, r3
 8007368:	f04f 0c00 	mov.w	ip, #0
 800736c:	46d9      	mov	r9, fp
 800736e:	46e2      	mov	sl, ip
 8007370:	eb19 0309 	adds.w	r3, r9, r9
 8007374:	eb4a 040a 	adc.w	r4, sl, sl
 8007378:	4699      	mov	r9, r3
 800737a:	46a2      	mov	sl, r4
 800737c:	eb19 090b 	adds.w	r9, r9, fp
 8007380:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007384:	f04f 0100 	mov.w	r1, #0
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007390:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007394:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007398:	4689      	mov	r9, r1
 800739a:	4692      	mov	sl, r2
 800739c:	eb1b 0509 	adds.w	r5, fp, r9
 80073a0:	eb4c 060a 	adc.w	r6, ip, sl
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4619      	mov	r1, r3
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	f04f 0400 	mov.w	r4, #0
 80073b6:	0094      	lsls	r4, r2, #2
 80073b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073bc:	008b      	lsls	r3, r1, #2
 80073be:	461a      	mov	r2, r3
 80073c0:	4623      	mov	r3, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	4631      	mov	r1, r6
 80073c6:	f7f9 fb71 	bl	8000aac <__aeabi_uldivmod>
 80073ca:	4603      	mov	r3, r0
 80073cc:	460c      	mov	r4, r1
 80073ce:	461a      	mov	r2, r3
 80073d0:	4b9a      	ldr	r3, [pc, #616]	; (800763c <UART_SetConfig+0x6f4>)
 80073d2:	fba3 1302 	umull	r1, r3, r3, r2
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	2164      	movs	r1, #100	; 0x64
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	3332      	adds	r3, #50	; 0x32
 80073e4:	4a95      	ldr	r2, [pc, #596]	; (800763c <UART_SetConfig+0x6f4>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073f0:	4498      	add	r8, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	469b      	mov	fp, r3
 80073f6:	f04f 0c00 	mov.w	ip, #0
 80073fa:	46d9      	mov	r9, fp
 80073fc:	46e2      	mov	sl, ip
 80073fe:	eb19 0309 	adds.w	r3, r9, r9
 8007402:	eb4a 040a 	adc.w	r4, sl, sl
 8007406:	4699      	mov	r9, r3
 8007408:	46a2      	mov	sl, r4
 800740a:	eb19 090b 	adds.w	r9, r9, fp
 800740e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007412:	f04f 0100 	mov.w	r1, #0
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800741e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007422:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007426:	4689      	mov	r9, r1
 8007428:	4692      	mov	sl, r2
 800742a:	eb1b 0509 	adds.w	r5, fp, r9
 800742e:	eb4c 060a 	adc.w	r6, ip, sl
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	4619      	mov	r1, r3
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	f04f 0400 	mov.w	r4, #0
 8007444:	0094      	lsls	r4, r2, #2
 8007446:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800744a:	008b      	lsls	r3, r1, #2
 800744c:	461a      	mov	r2, r3
 800744e:	4623      	mov	r3, r4
 8007450:	4628      	mov	r0, r5
 8007452:	4631      	mov	r1, r6
 8007454:	f7f9 fb2a 	bl	8000aac <__aeabi_uldivmod>
 8007458:	4603      	mov	r3, r0
 800745a:	460c      	mov	r4, r1
 800745c:	461a      	mov	r2, r3
 800745e:	4b77      	ldr	r3, [pc, #476]	; (800763c <UART_SetConfig+0x6f4>)
 8007460:	fba3 1302 	umull	r1, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	2164      	movs	r1, #100	; 0x64
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	3332      	adds	r3, #50	; 0x32
 8007472:	4a72      	ldr	r2, [pc, #456]	; (800763c <UART_SetConfig+0x6f4>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4442      	add	r2, r8
 8007484:	609a      	str	r2, [r3, #8]
 8007486:	e0d0      	b.n	800762a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007488:	f7fe f930 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 800748c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	469a      	mov	sl, r3
 8007492:	f04f 0b00 	mov.w	fp, #0
 8007496:	46d0      	mov	r8, sl
 8007498:	46d9      	mov	r9, fp
 800749a:	eb18 0308 	adds.w	r3, r8, r8
 800749e:	eb49 0409 	adc.w	r4, r9, r9
 80074a2:	4698      	mov	r8, r3
 80074a4:	46a1      	mov	r9, r4
 80074a6:	eb18 080a 	adds.w	r8, r8, sl
 80074aa:	eb49 090b 	adc.w	r9, r9, fp
 80074ae:	f04f 0100 	mov.w	r1, #0
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074c2:	4688      	mov	r8, r1
 80074c4:	4691      	mov	r9, r2
 80074c6:	eb1a 0508 	adds.w	r5, sl, r8
 80074ca:	eb4b 0609 	adc.w	r6, fp, r9
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	4619      	mov	r1, r3
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	f04f 0400 	mov.w	r4, #0
 80074e0:	0094      	lsls	r4, r2, #2
 80074e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074e6:	008b      	lsls	r3, r1, #2
 80074e8:	461a      	mov	r2, r3
 80074ea:	4623      	mov	r3, r4
 80074ec:	4628      	mov	r0, r5
 80074ee:	4631      	mov	r1, r6
 80074f0:	f7f9 fadc 	bl	8000aac <__aeabi_uldivmod>
 80074f4:	4603      	mov	r3, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b50      	ldr	r3, [pc, #320]	; (800763c <UART_SetConfig+0x6f4>)
 80074fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	469b      	mov	fp, r3
 800750a:	f04f 0c00 	mov.w	ip, #0
 800750e:	46d9      	mov	r9, fp
 8007510:	46e2      	mov	sl, ip
 8007512:	eb19 0309 	adds.w	r3, r9, r9
 8007516:	eb4a 040a 	adc.w	r4, sl, sl
 800751a:	4699      	mov	r9, r3
 800751c:	46a2      	mov	sl, r4
 800751e:	eb19 090b 	adds.w	r9, r9, fp
 8007522:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007526:	f04f 0100 	mov.w	r1, #0
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800753a:	4689      	mov	r9, r1
 800753c:	4692      	mov	sl, r2
 800753e:	eb1b 0509 	adds.w	r5, fp, r9
 8007542:	eb4c 060a 	adc.w	r6, ip, sl
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4619      	mov	r1, r3
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	f04f 0400 	mov.w	r4, #0
 8007558:	0094      	lsls	r4, r2, #2
 800755a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800755e:	008b      	lsls	r3, r1, #2
 8007560:	461a      	mov	r2, r3
 8007562:	4623      	mov	r3, r4
 8007564:	4628      	mov	r0, r5
 8007566:	4631      	mov	r1, r6
 8007568:	f7f9 faa0 	bl	8000aac <__aeabi_uldivmod>
 800756c:	4603      	mov	r3, r0
 800756e:	460c      	mov	r4, r1
 8007570:	461a      	mov	r2, r3
 8007572:	4b32      	ldr	r3, [pc, #200]	; (800763c <UART_SetConfig+0x6f4>)
 8007574:	fba3 1302 	umull	r1, r3, r3, r2
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	2164      	movs	r1, #100	; 0x64
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	3332      	adds	r3, #50	; 0x32
 8007586:	4a2d      	ldr	r2, [pc, #180]	; (800763c <UART_SetConfig+0x6f4>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007592:	4498      	add	r8, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	469b      	mov	fp, r3
 8007598:	f04f 0c00 	mov.w	ip, #0
 800759c:	46d9      	mov	r9, fp
 800759e:	46e2      	mov	sl, ip
 80075a0:	eb19 0309 	adds.w	r3, r9, r9
 80075a4:	eb4a 040a 	adc.w	r4, sl, sl
 80075a8:	4699      	mov	r9, r3
 80075aa:	46a2      	mov	sl, r4
 80075ac:	eb19 090b 	adds.w	r9, r9, fp
 80075b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075b4:	f04f 0100 	mov.w	r1, #0
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075c8:	4689      	mov	r9, r1
 80075ca:	4692      	mov	sl, r2
 80075cc:	eb1b 0509 	adds.w	r5, fp, r9
 80075d0:	eb4c 060a 	adc.w	r6, ip, sl
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	4619      	mov	r1, r3
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	f04f 0300 	mov.w	r3, #0
 80075e2:	f04f 0400 	mov.w	r4, #0
 80075e6:	0094      	lsls	r4, r2, #2
 80075e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075ec:	008b      	lsls	r3, r1, #2
 80075ee:	461a      	mov	r2, r3
 80075f0:	4623      	mov	r3, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	4631      	mov	r1, r6
 80075f6:	f7f9 fa59 	bl	8000aac <__aeabi_uldivmod>
 80075fa:	4603      	mov	r3, r0
 80075fc:	460c      	mov	r4, r1
 80075fe:	461a      	mov	r2, r3
 8007600:	4b0e      	ldr	r3, [pc, #56]	; (800763c <UART_SetConfig+0x6f4>)
 8007602:	fba3 1302 	umull	r1, r3, r3, r2
 8007606:	095b      	lsrs	r3, r3, #5
 8007608:	2164      	movs	r1, #100	; 0x64
 800760a:	fb01 f303 	mul.w	r3, r1, r3
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	3332      	adds	r3, #50	; 0x32
 8007614:	4a09      	ldr	r2, [pc, #36]	; (800763c <UART_SetConfig+0x6f4>)
 8007616:	fba2 2303 	umull	r2, r3, r2, r3
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4442      	add	r2, r8
 8007626:	609a      	str	r2, [r3, #8]
}
 8007628:	e7ff      	b.n	800762a <UART_SetConfig+0x6e2>
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	40011000 	.word	0x40011000
 8007638:	40011400 	.word	0x40011400
 800763c:	51eb851f 	.word	0x51eb851f

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	; (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000980 	.word	0x20000980

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4e0d      	ldr	r6, [pc, #52]	; (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	; (8007688 <__libc_init_array+0x3c>)
 8007652:	1ba4      	subs	r4, r4, r6
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2500      	movs	r5, #0
 8007658:	42a5      	cmp	r5, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4e0b      	ldr	r6, [pc, #44]	; (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	; (8007690 <__libc_init_array+0x44>)
 8007660:	f000 fc26 	bl	8007eb0 <_init>
 8007664:	1ba4      	subs	r4, r4, r6
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2500      	movs	r5, #0
 800766a:	42a5      	cmp	r5, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007674:	4798      	blx	r3
 8007676:	3501      	adds	r5, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800767e:	4798      	blx	r3
 8007680:	3501      	adds	r5, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	08008680 	.word	0x08008680
 8007688:	08008680 	.word	0x08008680
 800768c:	08008680 	.word	0x08008680
 8007690:	08008684 	.word	0x08008684

08007694 <memcpy>:
 8007694:	b510      	push	{r4, lr}
 8007696:	1e43      	subs	r3, r0, #1
 8007698:	440a      	add	r2, r1
 800769a:	4291      	cmp	r1, r2
 800769c:	d100      	bne.n	80076a0 <memcpy+0xc>
 800769e:	bd10      	pop	{r4, pc}
 80076a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a8:	e7f7      	b.n	800769a <memcpy+0x6>

080076aa <memmove>:
 80076aa:	4288      	cmp	r0, r1
 80076ac:	b510      	push	{r4, lr}
 80076ae:	eb01 0302 	add.w	r3, r1, r2
 80076b2:	d807      	bhi.n	80076c4 <memmove+0x1a>
 80076b4:	1e42      	subs	r2, r0, #1
 80076b6:	4299      	cmp	r1, r3
 80076b8:	d00a      	beq.n	80076d0 <memmove+0x26>
 80076ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076c2:	e7f8      	b.n	80076b6 <memmove+0xc>
 80076c4:	4283      	cmp	r3, r0
 80076c6:	d9f5      	bls.n	80076b4 <memmove+0xa>
 80076c8:	1881      	adds	r1, r0, r2
 80076ca:	1ad2      	subs	r2, r2, r3
 80076cc:	42d3      	cmn	r3, r2
 80076ce:	d100      	bne.n	80076d2 <memmove+0x28>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076da:	e7f7      	b.n	80076cc <memmove+0x22>

080076dc <memset>:
 80076dc:	4402      	add	r2, r0
 80076de:	4603      	mov	r3, r0
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d100      	bne.n	80076e6 <memset+0xa>
 80076e4:	4770      	bx	lr
 80076e6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ea:	e7f9      	b.n	80076e0 <memset+0x4>

080076ec <siprintf>:
 80076ec:	b40e      	push	{r1, r2, r3}
 80076ee:	b500      	push	{lr}
 80076f0:	b09c      	sub	sp, #112	; 0x70
 80076f2:	ab1d      	add	r3, sp, #116	; 0x74
 80076f4:	9002      	str	r0, [sp, #8]
 80076f6:	9006      	str	r0, [sp, #24]
 80076f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076fc:	4809      	ldr	r0, [pc, #36]	; (8007724 <siprintf+0x38>)
 80076fe:	9107      	str	r1, [sp, #28]
 8007700:	9104      	str	r1, [sp, #16]
 8007702:	4909      	ldr	r1, [pc, #36]	; (8007728 <siprintf+0x3c>)
 8007704:	f853 2b04 	ldr.w	r2, [r3], #4
 8007708:	9105      	str	r1, [sp, #20]
 800770a:	6800      	ldr	r0, [r0, #0]
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	a902      	add	r1, sp, #8
 8007710:	f000 f866 	bl	80077e0 <_svfiprintf_r>
 8007714:	9b02      	ldr	r3, [sp, #8]
 8007716:	2200      	movs	r2, #0
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	b01c      	add	sp, #112	; 0x70
 800771c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007720:	b003      	add	sp, #12
 8007722:	4770      	bx	lr
 8007724:	20000980 	.word	0x20000980
 8007728:	ffff0208 	.word	0xffff0208

0800772c <__ssputs_r>:
 800772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	688e      	ldr	r6, [r1, #8]
 8007732:	429e      	cmp	r6, r3
 8007734:	4682      	mov	sl, r0
 8007736:	460c      	mov	r4, r1
 8007738:	4690      	mov	r8, r2
 800773a:	4699      	mov	r9, r3
 800773c:	d837      	bhi.n	80077ae <__ssputs_r+0x82>
 800773e:	898a      	ldrh	r2, [r1, #12]
 8007740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007744:	d031      	beq.n	80077aa <__ssputs_r+0x7e>
 8007746:	6825      	ldr	r5, [r4, #0]
 8007748:	6909      	ldr	r1, [r1, #16]
 800774a:	1a6f      	subs	r7, r5, r1
 800774c:	6965      	ldr	r5, [r4, #20]
 800774e:	2302      	movs	r3, #2
 8007750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007754:	fb95 f5f3 	sdiv	r5, r5, r3
 8007758:	f109 0301 	add.w	r3, r9, #1
 800775c:	443b      	add	r3, r7
 800775e:	429d      	cmp	r5, r3
 8007760:	bf38      	it	cc
 8007762:	461d      	movcc	r5, r3
 8007764:	0553      	lsls	r3, r2, #21
 8007766:	d530      	bpl.n	80077ca <__ssputs_r+0x9e>
 8007768:	4629      	mov	r1, r5
 800776a:	f000 fb07 	bl	8007d7c <_malloc_r>
 800776e:	4606      	mov	r6, r0
 8007770:	b950      	cbnz	r0, 8007788 <__ssputs_r+0x5c>
 8007772:	230c      	movs	r3, #12
 8007774:	f8ca 3000 	str.w	r3, [sl]
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800777e:	81a3      	strh	r3, [r4, #12]
 8007780:	f04f 30ff 	mov.w	r0, #4294967295
 8007784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007788:	463a      	mov	r2, r7
 800778a:	6921      	ldr	r1, [r4, #16]
 800778c:	f7ff ff82 	bl	8007694 <memcpy>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	6126      	str	r6, [r4, #16]
 800779e:	6165      	str	r5, [r4, #20]
 80077a0:	443e      	add	r6, r7
 80077a2:	1bed      	subs	r5, r5, r7
 80077a4:	6026      	str	r6, [r4, #0]
 80077a6:	60a5      	str	r5, [r4, #8]
 80077a8:	464e      	mov	r6, r9
 80077aa:	454e      	cmp	r6, r9
 80077ac:	d900      	bls.n	80077b0 <__ssputs_r+0x84>
 80077ae:	464e      	mov	r6, r9
 80077b0:	4632      	mov	r2, r6
 80077b2:	4641      	mov	r1, r8
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	f7ff ff78 	bl	80076aa <memmove>
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	1b9b      	subs	r3, r3, r6
 80077be:	60a3      	str	r3, [r4, #8]
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	441e      	add	r6, r3
 80077c4:	6026      	str	r6, [r4, #0]
 80077c6:	2000      	movs	r0, #0
 80077c8:	e7dc      	b.n	8007784 <__ssputs_r+0x58>
 80077ca:	462a      	mov	r2, r5
 80077cc:	f000 fb30 	bl	8007e30 <_realloc_r>
 80077d0:	4606      	mov	r6, r0
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d1e2      	bne.n	800779c <__ssputs_r+0x70>
 80077d6:	6921      	ldr	r1, [r4, #16]
 80077d8:	4650      	mov	r0, sl
 80077da:	f000 fa81 	bl	8007ce0 <_free_r>
 80077de:	e7c8      	b.n	8007772 <__ssputs_r+0x46>

080077e0 <_svfiprintf_r>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	461d      	mov	r5, r3
 80077e6:	898b      	ldrh	r3, [r1, #12]
 80077e8:	061f      	lsls	r7, r3, #24
 80077ea:	b09d      	sub	sp, #116	; 0x74
 80077ec:	4680      	mov	r8, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	4616      	mov	r6, r2
 80077f2:	d50f      	bpl.n	8007814 <_svfiprintf_r+0x34>
 80077f4:	690b      	ldr	r3, [r1, #16]
 80077f6:	b96b      	cbnz	r3, 8007814 <_svfiprintf_r+0x34>
 80077f8:	2140      	movs	r1, #64	; 0x40
 80077fa:	f000 fabf 	bl	8007d7c <_malloc_r>
 80077fe:	6020      	str	r0, [r4, #0]
 8007800:	6120      	str	r0, [r4, #16]
 8007802:	b928      	cbnz	r0, 8007810 <_svfiprintf_r+0x30>
 8007804:	230c      	movs	r3, #12
 8007806:	f8c8 3000 	str.w	r3, [r8]
 800780a:	f04f 30ff 	mov.w	r0, #4294967295
 800780e:	e0c8      	b.n	80079a2 <_svfiprintf_r+0x1c2>
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	6163      	str	r3, [r4, #20]
 8007814:	2300      	movs	r3, #0
 8007816:	9309      	str	r3, [sp, #36]	; 0x24
 8007818:	2320      	movs	r3, #32
 800781a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800781e:	2330      	movs	r3, #48	; 0x30
 8007820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007824:	9503      	str	r5, [sp, #12]
 8007826:	f04f 0b01 	mov.w	fp, #1
 800782a:	4637      	mov	r7, r6
 800782c:	463d      	mov	r5, r7
 800782e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007832:	b10b      	cbz	r3, 8007838 <_svfiprintf_r+0x58>
 8007834:	2b25      	cmp	r3, #37	; 0x25
 8007836:	d13e      	bne.n	80078b6 <_svfiprintf_r+0xd6>
 8007838:	ebb7 0a06 	subs.w	sl, r7, r6
 800783c:	d00b      	beq.n	8007856 <_svfiprintf_r+0x76>
 800783e:	4653      	mov	r3, sl
 8007840:	4632      	mov	r2, r6
 8007842:	4621      	mov	r1, r4
 8007844:	4640      	mov	r0, r8
 8007846:	f7ff ff71 	bl	800772c <__ssputs_r>
 800784a:	3001      	adds	r0, #1
 800784c:	f000 80a4 	beq.w	8007998 <_svfiprintf_r+0x1b8>
 8007850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007852:	4453      	add	r3, sl
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
 8007856:	783b      	ldrb	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 809d 	beq.w	8007998 <_svfiprintf_r+0x1b8>
 800785e:	2300      	movs	r3, #0
 8007860:	f04f 32ff 	mov.w	r2, #4294967295
 8007864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	9307      	str	r3, [sp, #28]
 800786c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007870:	931a      	str	r3, [sp, #104]	; 0x68
 8007872:	462f      	mov	r7, r5
 8007874:	2205      	movs	r2, #5
 8007876:	f817 1b01 	ldrb.w	r1, [r7], #1
 800787a:	4850      	ldr	r0, [pc, #320]	; (80079bc <_svfiprintf_r+0x1dc>)
 800787c:	f7f8 fcd0 	bl	8000220 <memchr>
 8007880:	9b04      	ldr	r3, [sp, #16]
 8007882:	b9d0      	cbnz	r0, 80078ba <_svfiprintf_r+0xda>
 8007884:	06d9      	lsls	r1, r3, #27
 8007886:	bf44      	itt	mi
 8007888:	2220      	movmi	r2, #32
 800788a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800788e:	071a      	lsls	r2, r3, #28
 8007890:	bf44      	itt	mi
 8007892:	222b      	movmi	r2, #43	; 0x2b
 8007894:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007898:	782a      	ldrb	r2, [r5, #0]
 800789a:	2a2a      	cmp	r2, #42	; 0x2a
 800789c:	d015      	beq.n	80078ca <_svfiprintf_r+0xea>
 800789e:	9a07      	ldr	r2, [sp, #28]
 80078a0:	462f      	mov	r7, r5
 80078a2:	2000      	movs	r0, #0
 80078a4:	250a      	movs	r5, #10
 80078a6:	4639      	mov	r1, r7
 80078a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ac:	3b30      	subs	r3, #48	; 0x30
 80078ae:	2b09      	cmp	r3, #9
 80078b0:	d94d      	bls.n	800794e <_svfiprintf_r+0x16e>
 80078b2:	b1b8      	cbz	r0, 80078e4 <_svfiprintf_r+0x104>
 80078b4:	e00f      	b.n	80078d6 <_svfiprintf_r+0xf6>
 80078b6:	462f      	mov	r7, r5
 80078b8:	e7b8      	b.n	800782c <_svfiprintf_r+0x4c>
 80078ba:	4a40      	ldr	r2, [pc, #256]	; (80079bc <_svfiprintf_r+0x1dc>)
 80078bc:	1a80      	subs	r0, r0, r2
 80078be:	fa0b f000 	lsl.w	r0, fp, r0
 80078c2:	4318      	orrs	r0, r3
 80078c4:	9004      	str	r0, [sp, #16]
 80078c6:	463d      	mov	r5, r7
 80078c8:	e7d3      	b.n	8007872 <_svfiprintf_r+0x92>
 80078ca:	9a03      	ldr	r2, [sp, #12]
 80078cc:	1d11      	adds	r1, r2, #4
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	9103      	str	r1, [sp, #12]
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	db01      	blt.n	80078da <_svfiprintf_r+0xfa>
 80078d6:	9207      	str	r2, [sp, #28]
 80078d8:	e004      	b.n	80078e4 <_svfiprintf_r+0x104>
 80078da:	4252      	negs	r2, r2
 80078dc:	f043 0302 	orr.w	r3, r3, #2
 80078e0:	9207      	str	r2, [sp, #28]
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	783b      	ldrb	r3, [r7, #0]
 80078e6:	2b2e      	cmp	r3, #46	; 0x2e
 80078e8:	d10c      	bne.n	8007904 <_svfiprintf_r+0x124>
 80078ea:	787b      	ldrb	r3, [r7, #1]
 80078ec:	2b2a      	cmp	r3, #42	; 0x2a
 80078ee:	d133      	bne.n	8007958 <_svfiprintf_r+0x178>
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	1d1a      	adds	r2, r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	9203      	str	r2, [sp, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfb8      	it	lt
 80078fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007900:	3702      	adds	r7, #2
 8007902:	9305      	str	r3, [sp, #20]
 8007904:	4d2e      	ldr	r5, [pc, #184]	; (80079c0 <_svfiprintf_r+0x1e0>)
 8007906:	7839      	ldrb	r1, [r7, #0]
 8007908:	2203      	movs	r2, #3
 800790a:	4628      	mov	r0, r5
 800790c:	f7f8 fc88 	bl	8000220 <memchr>
 8007910:	b138      	cbz	r0, 8007922 <_svfiprintf_r+0x142>
 8007912:	2340      	movs	r3, #64	; 0x40
 8007914:	1b40      	subs	r0, r0, r5
 8007916:	fa03 f000 	lsl.w	r0, r3, r0
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	4303      	orrs	r3, r0
 800791e:	3701      	adds	r7, #1
 8007920:	9304      	str	r3, [sp, #16]
 8007922:	7839      	ldrb	r1, [r7, #0]
 8007924:	4827      	ldr	r0, [pc, #156]	; (80079c4 <_svfiprintf_r+0x1e4>)
 8007926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800792a:	2206      	movs	r2, #6
 800792c:	1c7e      	adds	r6, r7, #1
 800792e:	f7f8 fc77 	bl	8000220 <memchr>
 8007932:	2800      	cmp	r0, #0
 8007934:	d038      	beq.n	80079a8 <_svfiprintf_r+0x1c8>
 8007936:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <_svfiprintf_r+0x1e8>)
 8007938:	bb13      	cbnz	r3, 8007980 <_svfiprintf_r+0x1a0>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	3307      	adds	r3, #7
 800793e:	f023 0307 	bic.w	r3, r3, #7
 8007942:	3308      	adds	r3, #8
 8007944:	9303      	str	r3, [sp, #12]
 8007946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007948:	444b      	add	r3, r9
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
 800794c:	e76d      	b.n	800782a <_svfiprintf_r+0x4a>
 800794e:	fb05 3202 	mla	r2, r5, r2, r3
 8007952:	2001      	movs	r0, #1
 8007954:	460f      	mov	r7, r1
 8007956:	e7a6      	b.n	80078a6 <_svfiprintf_r+0xc6>
 8007958:	2300      	movs	r3, #0
 800795a:	3701      	adds	r7, #1
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	4619      	mov	r1, r3
 8007960:	250a      	movs	r5, #10
 8007962:	4638      	mov	r0, r7
 8007964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007968:	3a30      	subs	r2, #48	; 0x30
 800796a:	2a09      	cmp	r2, #9
 800796c:	d903      	bls.n	8007976 <_svfiprintf_r+0x196>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0c8      	beq.n	8007904 <_svfiprintf_r+0x124>
 8007972:	9105      	str	r1, [sp, #20]
 8007974:	e7c6      	b.n	8007904 <_svfiprintf_r+0x124>
 8007976:	fb05 2101 	mla	r1, r5, r1, r2
 800797a:	2301      	movs	r3, #1
 800797c:	4607      	mov	r7, r0
 800797e:	e7f0      	b.n	8007962 <_svfiprintf_r+0x182>
 8007980:	ab03      	add	r3, sp, #12
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	4622      	mov	r2, r4
 8007986:	4b11      	ldr	r3, [pc, #68]	; (80079cc <_svfiprintf_r+0x1ec>)
 8007988:	a904      	add	r1, sp, #16
 800798a:	4640      	mov	r0, r8
 800798c:	f3af 8000 	nop.w
 8007990:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007994:	4681      	mov	r9, r0
 8007996:	d1d6      	bne.n	8007946 <_svfiprintf_r+0x166>
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	065b      	lsls	r3, r3, #25
 800799c:	f53f af35 	bmi.w	800780a <_svfiprintf_r+0x2a>
 80079a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079a2:	b01d      	add	sp, #116	; 0x74
 80079a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a8:	ab03      	add	r3, sp, #12
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4622      	mov	r2, r4
 80079ae:	4b07      	ldr	r3, [pc, #28]	; (80079cc <_svfiprintf_r+0x1ec>)
 80079b0:	a904      	add	r1, sp, #16
 80079b2:	4640      	mov	r0, r8
 80079b4:	f000 f882 	bl	8007abc <_printf_i>
 80079b8:	e7ea      	b.n	8007990 <_svfiprintf_r+0x1b0>
 80079ba:	bf00      	nop
 80079bc:	08008644 	.word	0x08008644
 80079c0:	0800864a 	.word	0x0800864a
 80079c4:	0800864e 	.word	0x0800864e
 80079c8:	00000000 	.word	0x00000000
 80079cc:	0800772d 	.word	0x0800772d

080079d0 <_printf_common>:
 80079d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	4691      	mov	r9, r2
 80079d6:	461f      	mov	r7, r3
 80079d8:	688a      	ldr	r2, [r1, #8]
 80079da:	690b      	ldr	r3, [r1, #16]
 80079dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	bfb8      	it	lt
 80079e4:	4613      	movlt	r3, r2
 80079e6:	f8c9 3000 	str.w	r3, [r9]
 80079ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ee:	4606      	mov	r6, r0
 80079f0:	460c      	mov	r4, r1
 80079f2:	b112      	cbz	r2, 80079fa <_printf_common+0x2a>
 80079f4:	3301      	adds	r3, #1
 80079f6:	f8c9 3000 	str.w	r3, [r9]
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	0699      	lsls	r1, r3, #26
 80079fe:	bf42      	ittt	mi
 8007a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a04:	3302      	addmi	r3, #2
 8007a06:	f8c9 3000 	strmi.w	r3, [r9]
 8007a0a:	6825      	ldr	r5, [r4, #0]
 8007a0c:	f015 0506 	ands.w	r5, r5, #6
 8007a10:	d107      	bne.n	8007a22 <_printf_common+0x52>
 8007a12:	f104 0a19 	add.w	sl, r4, #25
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	f8d9 2000 	ldr.w	r2, [r9]
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	42ab      	cmp	r3, r5
 8007a20:	dc28      	bgt.n	8007a74 <_printf_common+0xa4>
 8007a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	3300      	adds	r3, #0
 8007a2a:	bf18      	it	ne
 8007a2c:	2301      	movne	r3, #1
 8007a2e:	0692      	lsls	r2, r2, #26
 8007a30:	d42d      	bmi.n	8007a8e <_printf_common+0xbe>
 8007a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a36:	4639      	mov	r1, r7
 8007a38:	4630      	mov	r0, r6
 8007a3a:	47c0      	blx	r8
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d020      	beq.n	8007a82 <_printf_common+0xb2>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	68e5      	ldr	r5, [r4, #12]
 8007a44:	f8d9 2000 	ldr.w	r2, [r9]
 8007a48:	f003 0306 	and.w	r3, r3, #6
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	bf08      	it	eq
 8007a50:	1aad      	subeq	r5, r5, r2
 8007a52:	68a3      	ldr	r3, [r4, #8]
 8007a54:	6922      	ldr	r2, [r4, #16]
 8007a56:	bf0c      	ite	eq
 8007a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a5c:	2500      	movne	r5, #0
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	bfc4      	itt	gt
 8007a62:	1a9b      	subgt	r3, r3, r2
 8007a64:	18ed      	addgt	r5, r5, r3
 8007a66:	f04f 0900 	mov.w	r9, #0
 8007a6a:	341a      	adds	r4, #26
 8007a6c:	454d      	cmp	r5, r9
 8007a6e:	d11a      	bne.n	8007aa6 <_printf_common+0xd6>
 8007a70:	2000      	movs	r0, #0
 8007a72:	e008      	b.n	8007a86 <_printf_common+0xb6>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4652      	mov	r2, sl
 8007a78:	4639      	mov	r1, r7
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	47c0      	blx	r8
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d103      	bne.n	8007a8a <_printf_common+0xba>
 8007a82:	f04f 30ff 	mov.w	r0, #4294967295
 8007a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8a:	3501      	adds	r5, #1
 8007a8c:	e7c3      	b.n	8007a16 <_printf_common+0x46>
 8007a8e:	18e1      	adds	r1, r4, r3
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	2030      	movs	r0, #48	; 0x30
 8007a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a98:	4422      	add	r2, r4
 8007a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	e7c5      	b.n	8007a32 <_printf_common+0x62>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	4639      	mov	r1, r7
 8007aac:	4630      	mov	r0, r6
 8007aae:	47c0      	blx	r8
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d0e6      	beq.n	8007a82 <_printf_common+0xb2>
 8007ab4:	f109 0901 	add.w	r9, r9, #1
 8007ab8:	e7d8      	b.n	8007a6c <_printf_common+0x9c>
	...

08007abc <_printf_i>:
 8007abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ac0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	7e09      	ldrb	r1, [r1, #24]
 8007ac8:	b085      	sub	sp, #20
 8007aca:	296e      	cmp	r1, #110	; 0x6e
 8007acc:	4617      	mov	r7, r2
 8007ace:	4606      	mov	r6, r0
 8007ad0:	4698      	mov	r8, r3
 8007ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad4:	f000 80b3 	beq.w	8007c3e <_printf_i+0x182>
 8007ad8:	d822      	bhi.n	8007b20 <_printf_i+0x64>
 8007ada:	2963      	cmp	r1, #99	; 0x63
 8007adc:	d036      	beq.n	8007b4c <_printf_i+0x90>
 8007ade:	d80a      	bhi.n	8007af6 <_printf_i+0x3a>
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	f000 80b9 	beq.w	8007c58 <_printf_i+0x19c>
 8007ae6:	2958      	cmp	r1, #88	; 0x58
 8007ae8:	f000 8083 	beq.w	8007bf2 <_printf_i+0x136>
 8007aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007af0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007af4:	e032      	b.n	8007b5c <_printf_i+0xa0>
 8007af6:	2964      	cmp	r1, #100	; 0x64
 8007af8:	d001      	beq.n	8007afe <_printf_i+0x42>
 8007afa:	2969      	cmp	r1, #105	; 0x69
 8007afc:	d1f6      	bne.n	8007aec <_printf_i+0x30>
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	6813      	ldr	r3, [r2, #0]
 8007b02:	0605      	lsls	r5, r0, #24
 8007b04:	f103 0104 	add.w	r1, r3, #4
 8007b08:	d52a      	bpl.n	8007b60 <_printf_i+0xa4>
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	da03      	bge.n	8007b1a <_printf_i+0x5e>
 8007b12:	222d      	movs	r2, #45	; 0x2d
 8007b14:	425b      	negs	r3, r3
 8007b16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b1a:	486f      	ldr	r0, [pc, #444]	; (8007cd8 <_printf_i+0x21c>)
 8007b1c:	220a      	movs	r2, #10
 8007b1e:	e039      	b.n	8007b94 <_printf_i+0xd8>
 8007b20:	2973      	cmp	r1, #115	; 0x73
 8007b22:	f000 809d 	beq.w	8007c60 <_printf_i+0x1a4>
 8007b26:	d808      	bhi.n	8007b3a <_printf_i+0x7e>
 8007b28:	296f      	cmp	r1, #111	; 0x6f
 8007b2a:	d020      	beq.n	8007b6e <_printf_i+0xb2>
 8007b2c:	2970      	cmp	r1, #112	; 0x70
 8007b2e:	d1dd      	bne.n	8007aec <_printf_i+0x30>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	f043 0320 	orr.w	r3, r3, #32
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	e003      	b.n	8007b42 <_printf_i+0x86>
 8007b3a:	2975      	cmp	r1, #117	; 0x75
 8007b3c:	d017      	beq.n	8007b6e <_printf_i+0xb2>
 8007b3e:	2978      	cmp	r1, #120	; 0x78
 8007b40:	d1d4      	bne.n	8007aec <_printf_i+0x30>
 8007b42:	2378      	movs	r3, #120	; 0x78
 8007b44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b48:	4864      	ldr	r0, [pc, #400]	; (8007cdc <_printf_i+0x220>)
 8007b4a:	e055      	b.n	8007bf8 <_printf_i+0x13c>
 8007b4c:	6813      	ldr	r3, [r2, #0]
 8007b4e:	1d19      	adds	r1, r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6011      	str	r1, [r2, #0]
 8007b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e08c      	b.n	8007c7a <_printf_i+0x1be>
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6011      	str	r1, [r2, #0]
 8007b64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b68:	bf18      	it	ne
 8007b6a:	b21b      	sxthne	r3, r3
 8007b6c:	e7cf      	b.n	8007b0e <_printf_i+0x52>
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	6825      	ldr	r5, [r4, #0]
 8007b72:	1d18      	adds	r0, r3, #4
 8007b74:	6010      	str	r0, [r2, #0]
 8007b76:	0628      	lsls	r0, r5, #24
 8007b78:	d501      	bpl.n	8007b7e <_printf_i+0xc2>
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	e002      	b.n	8007b84 <_printf_i+0xc8>
 8007b7e:	0668      	lsls	r0, r5, #25
 8007b80:	d5fb      	bpl.n	8007b7a <_printf_i+0xbe>
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	4854      	ldr	r0, [pc, #336]	; (8007cd8 <_printf_i+0x21c>)
 8007b86:	296f      	cmp	r1, #111	; 0x6f
 8007b88:	bf14      	ite	ne
 8007b8a:	220a      	movne	r2, #10
 8007b8c:	2208      	moveq	r2, #8
 8007b8e:	2100      	movs	r1, #0
 8007b90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b94:	6865      	ldr	r5, [r4, #4]
 8007b96:	60a5      	str	r5, [r4, #8]
 8007b98:	2d00      	cmp	r5, #0
 8007b9a:	f2c0 8095 	blt.w	8007cc8 <_printf_i+0x20c>
 8007b9e:	6821      	ldr	r1, [r4, #0]
 8007ba0:	f021 0104 	bic.w	r1, r1, #4
 8007ba4:	6021      	str	r1, [r4, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d13d      	bne.n	8007c26 <_printf_i+0x16a>
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	f040 808e 	bne.w	8007ccc <_printf_i+0x210>
 8007bb0:	4665      	mov	r5, ip
 8007bb2:	2a08      	cmp	r2, #8
 8007bb4:	d10b      	bne.n	8007bce <_printf_i+0x112>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	07db      	lsls	r3, r3, #31
 8007bba:	d508      	bpl.n	8007bce <_printf_i+0x112>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	6862      	ldr	r2, [r4, #4]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	bfde      	ittt	le
 8007bc4:	2330      	movle	r3, #48	; 0x30
 8007bc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bce:	ebac 0305 	sub.w	r3, ip, r5
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	f8cd 8000 	str.w	r8, [sp]
 8007bd8:	463b      	mov	r3, r7
 8007bda:	aa03      	add	r2, sp, #12
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7ff fef6 	bl	80079d0 <_printf_common>
 8007be4:	3001      	adds	r0, #1
 8007be6:	d14d      	bne.n	8007c84 <_printf_i+0x1c8>
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	b005      	add	sp, #20
 8007bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bf2:	4839      	ldr	r0, [pc, #228]	; (8007cd8 <_printf_i+0x21c>)
 8007bf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bf8:	6813      	ldr	r3, [r2, #0]
 8007bfa:	6821      	ldr	r1, [r4, #0]
 8007bfc:	1d1d      	adds	r5, r3, #4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6015      	str	r5, [r2, #0]
 8007c02:	060a      	lsls	r2, r1, #24
 8007c04:	d50b      	bpl.n	8007c1e <_printf_i+0x162>
 8007c06:	07ca      	lsls	r2, r1, #31
 8007c08:	bf44      	itt	mi
 8007c0a:	f041 0120 	orrmi.w	r1, r1, #32
 8007c0e:	6021      	strmi	r1, [r4, #0]
 8007c10:	b91b      	cbnz	r3, 8007c1a <_printf_i+0x15e>
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	f022 0220 	bic.w	r2, r2, #32
 8007c18:	6022      	str	r2, [r4, #0]
 8007c1a:	2210      	movs	r2, #16
 8007c1c:	e7b7      	b.n	8007b8e <_printf_i+0xd2>
 8007c1e:	064d      	lsls	r5, r1, #25
 8007c20:	bf48      	it	mi
 8007c22:	b29b      	uxthmi	r3, r3
 8007c24:	e7ef      	b.n	8007c06 <_printf_i+0x14a>
 8007c26:	4665      	mov	r5, ip
 8007c28:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c2c:	fb02 3311 	mls	r3, r2, r1, r3
 8007c30:	5cc3      	ldrb	r3, [r0, r3]
 8007c32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c36:	460b      	mov	r3, r1
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d1f5      	bne.n	8007c28 <_printf_i+0x16c>
 8007c3c:	e7b9      	b.n	8007bb2 <_printf_i+0xf6>
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	6825      	ldr	r5, [r4, #0]
 8007c42:	6961      	ldr	r1, [r4, #20]
 8007c44:	1d18      	adds	r0, r3, #4
 8007c46:	6010      	str	r0, [r2, #0]
 8007c48:	0628      	lsls	r0, r5, #24
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	d501      	bpl.n	8007c52 <_printf_i+0x196>
 8007c4e:	6019      	str	r1, [r3, #0]
 8007c50:	e002      	b.n	8007c58 <_printf_i+0x19c>
 8007c52:	066a      	lsls	r2, r5, #25
 8007c54:	d5fb      	bpl.n	8007c4e <_printf_i+0x192>
 8007c56:	8019      	strh	r1, [r3, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	4665      	mov	r5, ip
 8007c5e:	e7b9      	b.n	8007bd4 <_printf_i+0x118>
 8007c60:	6813      	ldr	r3, [r2, #0]
 8007c62:	1d19      	adds	r1, r3, #4
 8007c64:	6011      	str	r1, [r2, #0]
 8007c66:	681d      	ldr	r5, [r3, #0]
 8007c68:	6862      	ldr	r2, [r4, #4]
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f7f8 fad7 	bl	8000220 <memchr>
 8007c72:	b108      	cbz	r0, 8007c78 <_printf_i+0x1bc>
 8007c74:	1b40      	subs	r0, r0, r5
 8007c76:	6060      	str	r0, [r4, #4]
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	6123      	str	r3, [r4, #16]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c82:	e7a7      	b.n	8007bd4 <_printf_i+0x118>
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	462a      	mov	r2, r5
 8007c88:	4639      	mov	r1, r7
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	47c0      	blx	r8
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d0aa      	beq.n	8007be8 <_printf_i+0x12c>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	079b      	lsls	r3, r3, #30
 8007c96:	d413      	bmi.n	8007cc0 <_printf_i+0x204>
 8007c98:	68e0      	ldr	r0, [r4, #12]
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	4298      	cmp	r0, r3
 8007c9e:	bfb8      	it	lt
 8007ca0:	4618      	movlt	r0, r3
 8007ca2:	e7a3      	b.n	8007bec <_printf_i+0x130>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	464a      	mov	r2, r9
 8007ca8:	4639      	mov	r1, r7
 8007caa:	4630      	mov	r0, r6
 8007cac:	47c0      	blx	r8
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d09a      	beq.n	8007be8 <_printf_i+0x12c>
 8007cb2:	3501      	adds	r5, #1
 8007cb4:	68e3      	ldr	r3, [r4, #12]
 8007cb6:	9a03      	ldr	r2, [sp, #12]
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	42ab      	cmp	r3, r5
 8007cbc:	dcf2      	bgt.n	8007ca4 <_printf_i+0x1e8>
 8007cbe:	e7eb      	b.n	8007c98 <_printf_i+0x1dc>
 8007cc0:	2500      	movs	r5, #0
 8007cc2:	f104 0919 	add.w	r9, r4, #25
 8007cc6:	e7f5      	b.n	8007cb4 <_printf_i+0x1f8>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ac      	bne.n	8007c26 <_printf_i+0x16a>
 8007ccc:	7803      	ldrb	r3, [r0, #0]
 8007cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd6:	e76c      	b.n	8007bb2 <_printf_i+0xf6>
 8007cd8:	08008655 	.word	0x08008655
 8007cdc:	08008666 	.word	0x08008666

08007ce0 <_free_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d045      	beq.n	8007d74 <_free_r+0x94>
 8007ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cec:	1f0c      	subs	r4, r1, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	18e4      	addlt	r4, r4, r3
 8007cf4:	f000 f8d2 	bl	8007e9c <__malloc_lock>
 8007cf8:	4a1f      	ldr	r2, [pc, #124]	; (8007d78 <_free_r+0x98>)
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	b933      	cbnz	r3, 8007d0e <_free_r+0x2e>
 8007d00:	6063      	str	r3, [r4, #4]
 8007d02:	6014      	str	r4, [r2, #0]
 8007d04:	4628      	mov	r0, r5
 8007d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d0a:	f000 b8c8 	b.w	8007e9e <__malloc_unlock>
 8007d0e:	42a3      	cmp	r3, r4
 8007d10:	d90c      	bls.n	8007d2c <_free_r+0x4c>
 8007d12:	6821      	ldr	r1, [r4, #0]
 8007d14:	1862      	adds	r2, r4, r1
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bf04      	itt	eq
 8007d1a:	681a      	ldreq	r2, [r3, #0]
 8007d1c:	685b      	ldreq	r3, [r3, #4]
 8007d1e:	6063      	str	r3, [r4, #4]
 8007d20:	bf04      	itt	eq
 8007d22:	1852      	addeq	r2, r2, r1
 8007d24:	6022      	streq	r2, [r4, #0]
 8007d26:	6004      	str	r4, [r0, #0]
 8007d28:	e7ec      	b.n	8007d04 <_free_r+0x24>
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	b10a      	cbz	r2, 8007d34 <_free_r+0x54>
 8007d30:	42a2      	cmp	r2, r4
 8007d32:	d9fa      	bls.n	8007d2a <_free_r+0x4a>
 8007d34:	6819      	ldr	r1, [r3, #0]
 8007d36:	1858      	adds	r0, r3, r1
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d10b      	bne.n	8007d54 <_free_r+0x74>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	4401      	add	r1, r0
 8007d40:	1858      	adds	r0, r3, r1
 8007d42:	4282      	cmp	r2, r0
 8007d44:	6019      	str	r1, [r3, #0]
 8007d46:	d1dd      	bne.n	8007d04 <_free_r+0x24>
 8007d48:	6810      	ldr	r0, [r2, #0]
 8007d4a:	6852      	ldr	r2, [r2, #4]
 8007d4c:	605a      	str	r2, [r3, #4]
 8007d4e:	4401      	add	r1, r0
 8007d50:	6019      	str	r1, [r3, #0]
 8007d52:	e7d7      	b.n	8007d04 <_free_r+0x24>
 8007d54:	d902      	bls.n	8007d5c <_free_r+0x7c>
 8007d56:	230c      	movs	r3, #12
 8007d58:	602b      	str	r3, [r5, #0]
 8007d5a:	e7d3      	b.n	8007d04 <_free_r+0x24>
 8007d5c:	6820      	ldr	r0, [r4, #0]
 8007d5e:	1821      	adds	r1, r4, r0
 8007d60:	428a      	cmp	r2, r1
 8007d62:	bf04      	itt	eq
 8007d64:	6811      	ldreq	r1, [r2, #0]
 8007d66:	6852      	ldreq	r2, [r2, #4]
 8007d68:	6062      	str	r2, [r4, #4]
 8007d6a:	bf04      	itt	eq
 8007d6c:	1809      	addeq	r1, r1, r0
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	605c      	str	r4, [r3, #4]
 8007d72:	e7c7      	b.n	8007d04 <_free_r+0x24>
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	bf00      	nop
 8007d78:	20000a2c 	.word	0x20000a2c

08007d7c <_malloc_r>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	1ccd      	adds	r5, r1, #3
 8007d80:	f025 0503 	bic.w	r5, r5, #3
 8007d84:	3508      	adds	r5, #8
 8007d86:	2d0c      	cmp	r5, #12
 8007d88:	bf38      	it	cc
 8007d8a:	250c      	movcc	r5, #12
 8007d8c:	2d00      	cmp	r5, #0
 8007d8e:	4606      	mov	r6, r0
 8007d90:	db01      	blt.n	8007d96 <_malloc_r+0x1a>
 8007d92:	42a9      	cmp	r1, r5
 8007d94:	d903      	bls.n	8007d9e <_malloc_r+0x22>
 8007d96:	230c      	movs	r3, #12
 8007d98:	6033      	str	r3, [r6, #0]
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
 8007d9e:	f000 f87d 	bl	8007e9c <__malloc_lock>
 8007da2:	4a21      	ldr	r2, [pc, #132]	; (8007e28 <_malloc_r+0xac>)
 8007da4:	6814      	ldr	r4, [r2, #0]
 8007da6:	4621      	mov	r1, r4
 8007da8:	b991      	cbnz	r1, 8007dd0 <_malloc_r+0x54>
 8007daa:	4c20      	ldr	r4, [pc, #128]	; (8007e2c <_malloc_r+0xb0>)
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	b91b      	cbnz	r3, 8007db8 <_malloc_r+0x3c>
 8007db0:	4630      	mov	r0, r6
 8007db2:	f000 f863 	bl	8007e7c <_sbrk_r>
 8007db6:	6020      	str	r0, [r4, #0]
 8007db8:	4629      	mov	r1, r5
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f000 f85e 	bl	8007e7c <_sbrk_r>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d124      	bne.n	8007e0e <_malloc_r+0x92>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	6033      	str	r3, [r6, #0]
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 f868 	bl	8007e9e <__malloc_unlock>
 8007dce:	e7e4      	b.n	8007d9a <_malloc_r+0x1e>
 8007dd0:	680b      	ldr	r3, [r1, #0]
 8007dd2:	1b5b      	subs	r3, r3, r5
 8007dd4:	d418      	bmi.n	8007e08 <_malloc_r+0x8c>
 8007dd6:	2b0b      	cmp	r3, #11
 8007dd8:	d90f      	bls.n	8007dfa <_malloc_r+0x7e>
 8007dda:	600b      	str	r3, [r1, #0]
 8007ddc:	50cd      	str	r5, [r1, r3]
 8007dde:	18cc      	adds	r4, r1, r3
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f85c 	bl	8007e9e <__malloc_unlock>
 8007de6:	f104 000b 	add.w	r0, r4, #11
 8007dea:	1d23      	adds	r3, r4, #4
 8007dec:	f020 0007 	bic.w	r0, r0, #7
 8007df0:	1ac3      	subs	r3, r0, r3
 8007df2:	d0d3      	beq.n	8007d9c <_malloc_r+0x20>
 8007df4:	425a      	negs	r2, r3
 8007df6:	50e2      	str	r2, [r4, r3]
 8007df8:	e7d0      	b.n	8007d9c <_malloc_r+0x20>
 8007dfa:	428c      	cmp	r4, r1
 8007dfc:	684b      	ldr	r3, [r1, #4]
 8007dfe:	bf16      	itet	ne
 8007e00:	6063      	strne	r3, [r4, #4]
 8007e02:	6013      	streq	r3, [r2, #0]
 8007e04:	460c      	movne	r4, r1
 8007e06:	e7eb      	b.n	8007de0 <_malloc_r+0x64>
 8007e08:	460c      	mov	r4, r1
 8007e0a:	6849      	ldr	r1, [r1, #4]
 8007e0c:	e7cc      	b.n	8007da8 <_malloc_r+0x2c>
 8007e0e:	1cc4      	adds	r4, r0, #3
 8007e10:	f024 0403 	bic.w	r4, r4, #3
 8007e14:	42a0      	cmp	r0, r4
 8007e16:	d005      	beq.n	8007e24 <_malloc_r+0xa8>
 8007e18:	1a21      	subs	r1, r4, r0
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f000 f82e 	bl	8007e7c <_sbrk_r>
 8007e20:	3001      	adds	r0, #1
 8007e22:	d0cf      	beq.n	8007dc4 <_malloc_r+0x48>
 8007e24:	6025      	str	r5, [r4, #0]
 8007e26:	e7db      	b.n	8007de0 <_malloc_r+0x64>
 8007e28:	20000a2c 	.word	0x20000a2c
 8007e2c:	20000a30 	.word	0x20000a30

08007e30 <_realloc_r>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	4607      	mov	r7, r0
 8007e34:	4614      	mov	r4, r2
 8007e36:	460e      	mov	r6, r1
 8007e38:	b921      	cbnz	r1, 8007e44 <_realloc_r+0x14>
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e40:	f7ff bf9c 	b.w	8007d7c <_malloc_r>
 8007e44:	b922      	cbnz	r2, 8007e50 <_realloc_r+0x20>
 8007e46:	f7ff ff4b 	bl	8007ce0 <_free_r>
 8007e4a:	4625      	mov	r5, r4
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e50:	f000 f826 	bl	8007ea0 <_malloc_usable_size_r>
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d20f      	bcs.n	8007e78 <_realloc_r+0x48>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	f7ff ff8e 	bl	8007d7c <_malloc_r>
 8007e60:	4605      	mov	r5, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d0f2      	beq.n	8007e4c <_realloc_r+0x1c>
 8007e66:	4631      	mov	r1, r6
 8007e68:	4622      	mov	r2, r4
 8007e6a:	f7ff fc13 	bl	8007694 <memcpy>
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7ff ff35 	bl	8007ce0 <_free_r>
 8007e76:	e7e9      	b.n	8007e4c <_realloc_r+0x1c>
 8007e78:	4635      	mov	r5, r6
 8007e7a:	e7e7      	b.n	8007e4c <_realloc_r+0x1c>

08007e7c <_sbrk_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4c06      	ldr	r4, [pc, #24]	; (8007e98 <_sbrk_r+0x1c>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4605      	mov	r5, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	f7fc f928 	bl	80040dc <_sbrk>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_sbrk_r+0x1a>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_sbrk_r+0x1a>
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	20003778 	.word	0x20003778

08007e9c <__malloc_lock>:
 8007e9c:	4770      	bx	lr

08007e9e <__malloc_unlock>:
 8007e9e:	4770      	bx	lr

08007ea0 <_malloc_usable_size_r>:
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f18      	subs	r0, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfbc      	itt	lt
 8007eaa:	580b      	ldrlt	r3, [r1, r0]
 8007eac:	18c0      	addlt	r0, r0, r3
 8007eae:	4770      	bx	lr

08007eb0 <_init>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr

08007ebc <_fini>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	bf00      	nop
 8007ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec2:	bc08      	pop	{r3}
 8007ec4:	469e      	mov	lr, r3
 8007ec6:	4770      	bx	lr
