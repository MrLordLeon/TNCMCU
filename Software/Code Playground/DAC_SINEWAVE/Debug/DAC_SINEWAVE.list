
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e0  080077e0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e8  080077e8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080077f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d98  20000084  08007874  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e1c  08007874  00022e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d68  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000279d  00000000  00000000  00032e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  000355c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00036490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232a8  00000000  00000000  00037238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5f0  00000000  00000000  0005a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d27c4  00000000  00000000  00066ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040cc  00000000  00000000  00139310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007098 	.word	0x08007098

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08007098 	.word	0x08007098

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4951      	ldr	r1, [pc, #324]	; (800071c <conv_HEX_to_BIN+0x15c>)
 80005d6:	4852      	ldr	r0, [pc, #328]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005d8:	f006 f97c 	bl	80068d4 <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005dc:	4850      	ldr	r0, [pc, #320]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005de:	f7ff fe17 	bl	8000210 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	230a      	movs	r3, #10
 80005e8:	494d      	ldr	r1, [pc, #308]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005ea:	484e      	ldr	r0, [pc, #312]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80005ec:	f005 fa31 	bl	8005a52 <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	461a      	mov	r2, r3
 80005f4:	494c      	ldr	r1, [pc, #304]	; (8000728 <conv_HEX_to_BIN+0x168>)
 80005f6:	484a      	ldr	r0, [pc, #296]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005f8:	f006 f96c 	bl	80068d4 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005fc:	4848      	ldr	r0, [pc, #288]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005fe:	f7ff fe07 	bl	8000210 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	230a      	movs	r3, #10
 8000608:	4945      	ldr	r1, [pc, #276]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800060a:	4846      	ldr	r0, [pc, #280]	; (8000724 <conv_HEX_to_BIN+0x164>)
 800060c:	f005 fa21 	bl	8005a52 <HAL_UART_Transmit>

    if(select_8_16){
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01f      	beq.n	8000656 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b07      	cmp	r3, #7
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000654:	e05e      	b.n	8000714 <conv_HEX_to_BIN+0x154>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	461a      	mov	r2, r3
 800065a:	4934      	ldr	r1, [pc, #208]	; (800072c <conv_HEX_to_BIN+0x16c>)
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800065e:	f006 f939 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000662:	482f      	ldr	r0, [pc, #188]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000664:	f7ff fdd4 	bl	8000210 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	230a      	movs	r3, #10
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000672:	f005 f9ee 	bl	8005a52 <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	e038      	b.n	80006ee <conv_HEX_to_BIN+0x12e>
			temp = hex_byte_in >> i;
 800067c:	88fa      	ldrh	r2, [r7, #6]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4929      	ldr	r1, [pc, #164]	; (8000730 <conv_HEX_to_BIN+0x170>)
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800068c:	f006 f922 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000692:	f7ff fdbd 	bl	8000210 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	230a      	movs	r3, #10
 800069c:	4920      	ldr	r1, [pc, #128]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006a0:	f005 f9d7 	bl	8005a52 <HAL_UART_Transmit>
			temp = temp%2;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	491f      	ldr	r1, [pc, #124]	; (8000734 <conv_HEX_to_BIN+0x174>)
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006b8:	f006 f90c 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	230a      	movs	r3, #10
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006cc:	f005 f9c1 	bl	8005a52 <HAL_UART_Transmit>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	f1c3 030f 	rsb	r3, r3, #15
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	2a00      	cmp	r2, #0
 80006de:	bf14      	ite	ne
 80006e0:	2201      	movne	r2, #1
 80006e2:	2200      	moveq	r2, #0
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	ddc3      	ble.n	800067c <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <conv_HEX_to_BIN+0x178>)
 80006f8:	8811      	ldrh	r1, [r2, #0]
 80006fa:	7892      	ldrb	r2, [r2, #2]
 80006fc:	8019      	strh	r1, [r3, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000702:	f7ff fd85 	bl	8000210 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	230a      	movs	r3, #10
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000710:	f005 f99f 	bl	8005a52 <HAL_UART_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	080070b0 	.word	0x080070b0
 8000720:	20001cd8 	.word	0x20001cd8
 8000724:	20002b94 	.word	0x20002b94
 8000728:	080070cc 	.word	0x080070cc
 800072c:	08007100 	.word	0x08007100
 8000730:	08007134 	.word	0x08007134
 8000734:	0800713c 	.word	0x0800713c
 8000738:	08007144 	.word	0x08007144

0800073c <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000740:	2201      	movs	r2, #1
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <init_AX25+0x2c>)
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <init_AX25+0x30>)
 8000746:	f005 fa1d 	bl	8005b84 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <init_AX25+0x34>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <init_AX25+0x34>)
 8000752:	2200      	movs	r2, #0
 8000754:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <init_AX25+0x34>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <init_AX25+0x34>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000144c 	.word	0x2000144c
 800076c:	20002b94 	.word	0x20002b94
 8000770:	20001440 	.word	0x20001440

08000774 <tx_rx>:

void tx_rx() {
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	if (changeMode) {
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <tx_rx+0x90>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <tx_rx+0x18>
		changeMode = 0;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <tx_rx+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000788:	f001 f82e 	bl	80017e8 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <tx_rx+0x94>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00f      	beq.n	80007b4 <tx_rx+0x40>
		bool packet_received = false;
 8000794:	2300      	movs	r3, #0
 8000796:	71bb      	strb	r3, [r7, #6]
		bool packet_converted = false;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]

		//Run receiving KISS
		packet_received = receiving_KISS();
 800079c:	f000 faec 	bl	8000d78 <receiving_KISS>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71bb      	strb	r3, [r7, #6]

		if(packet_received){
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d027      	beq.n	80007fa <tx_rx+0x86>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 80007aa:	f000 fbad 	bl	8000f08 <KISS_TO_AX25>
 80007ae:	4603      	mov	r3, r0
 80007b0:	717b      	strb	r3, [r7, #5]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80007b2:	e022      	b.n	80007fa <tx_rx+0x86>
		bool change = receiving_AX25();
 80007b4:	f000 f87a 	bl	80008ac <receiving_AX25>
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
		if(!change){
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d018      	beq.n	80007fa <tx_rx+0x86>
			sprintf(uartData, "Changing mode due to request\n");
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <tx_rx+0x98>)
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <tx_rx+0x9c>)
 80007cc:	4615      	mov	r5, r2
 80007ce:	461c      	mov	r4, r3
 80007d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d2:	6028      	str	r0, [r5, #0]
 80007d4:	6069      	str	r1, [r5, #4]
 80007d6:	60aa      	str	r2, [r5, #8]
 80007d8:	60eb      	str	r3, [r5, #12]
 80007da:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007dc:	6128      	str	r0, [r5, #16]
 80007de:	6169      	str	r1, [r5, #20]
 80007e0:	61aa      	str	r2, [r5, #24]
 80007e2:	8823      	ldrh	r3, [r4, #0]
 80007e4:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <tx_rx+0x98>)
 80007e8:	f7ff fd12 	bl	8000210 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	230a      	movs	r3, #10
 80007f2:	4906      	ldr	r1, [pc, #24]	; (800080c <tx_rx+0x98>)
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <tx_rx+0xa0>)
 80007f6:	f005 f92c 	bl	8005a52 <HAL_UART_Transmit>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bdb0      	pop	{r4, r5, r7, pc}
 8000802:	bf00      	nop
 8000804:	200000a5 	.word	0x200000a5
 8000808:	20002b3c 	.word	0x20002b3c
 800080c:	20001cd8 	.word	0x20001cd8
 8000810:	08007148 	.word	0x08007148
 8000814:	20002b94 	.word	0x20002b94

08000818 <UART2_EXCEPTION_CALLBACK>:
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 800081c:	2201      	movs	r2, #1
 800081e:	491d      	ldr	r1, [pc, #116]	; (8000894 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <UART2_EXCEPTION_CALLBACK+0x80>)
 8000822:	f005 f9af 	bl	8005b84 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000828:	2200      	movs	r2, #0
 800082a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800082e:	7b1b      	ldrb	r3, [r3, #12]
 8000830:	2bc0      	cmp	r3, #192	; 0xc0
 8000832:	d104      	bne.n	800083e <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800083c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <UART2_EXCEPTION_CALLBACK+0x88>)
 8000846:	4413      	add	r3, r2
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800084a:	7b12      	ldrb	r2, [r2, #12]
 800084c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000856:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	2b01      	cmp	r3, #1
 800085e:	dd16      	ble.n	800088e <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f083 0301 	eor.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <UART2_EXCEPTION_CALLBACK+0x90>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800087c:	2201      	movs	r2, #1
 800087e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a05      	ldr	r2, [pc, #20]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000886:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]

	  }
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000144c 	.word	0x2000144c
 8000898:	20002b94 	.word	0x20002b94
 800089c:	20001440 	.word	0x20001440
 80008a0:	2000144e 	.word	0x2000144e
 80008a4:	20002b3c 	.word	0x20002b3c
 80008a8:	200000a5 	.word	0x200000a5

080008ac <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80008b2:	4a51      	ldr	r2, [pc, #324]	; (80009f8 <receiving_AX25+0x14c>)
 80008b4:	4b51      	ldr	r3, [pc, #324]	; (80009fc <receiving_AX25+0x150>)
 80008b6:	4615      	mov	r5, r2
 80008b8:	461c      	mov	r4, r3
 80008ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008bc:	6028      	str	r0, [r5, #0]
 80008be:	6069      	str	r1, [r5, #4]
 80008c0:	60aa      	str	r2, [r5, #8]
 80008c2:	60eb      	str	r3, [r5, #12]
 80008c4:	cc03      	ldmia	r4!, {r0, r1}
 80008c6:	6128      	str	r0, [r5, #16]
 80008c8:	6169      	str	r1, [r5, #20]
 80008ca:	7823      	ldrb	r3, [r4, #0]
 80008cc:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008ce:	484a      	ldr	r0, [pc, #296]	; (80009f8 <receiving_AX25+0x14c>)
 80008d0:	f7ff fc9e 	bl	8000210 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	230a      	movs	r3, #10
 80008da:	4947      	ldr	r1, [pc, #284]	; (80009f8 <receiving_AX25+0x14c>)
 80008dc:	4848      	ldr	r0, [pc, #288]	; (8000a00 <receiving_AX25+0x154>)
 80008de:	f005 f8b8 	bl	8005a52 <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 80008e2:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <receiving_AX25+0x158>)
 80008e4:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 80008e6:	f001 fa7f 	bl	8001de8 <streamGet>
 80008ea:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d13b      	bne.n	800096a <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80008f8:	3308      	adds	r3, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 80008fe:	f000 f889 	bl	8000a14 <AX25_Packet_Validate>
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00b      	beq.n	8000924 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 800090c:	f000 f9aa 	bl	8000c64 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f640 225f 	movw	r2, #2655	; 0xa5f
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f005 ffd3 	bl	80068c4 <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 800091e:	f7ff ffc5 	bl	80008ac <receiving_AX25>
 8000922:	e065      	b.n	80009f0 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 8000924:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <receiving_AX25+0x14c>)
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <receiving_AX25+0x15c>)
 8000928:	4614      	mov	r4, r2
 800092a:	469c      	mov	ip, r3
 800092c:	f104 0e20 	add.w	lr, r4, #32
 8000930:	4665      	mov	r5, ip
 8000932:	4626      	mov	r6, r4
 8000934:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000936:	6028      	str	r0, [r5, #0]
 8000938:	6069      	str	r1, [r5, #4]
 800093a:	60aa      	str	r2, [r5, #8]
 800093c:	60eb      	str	r3, [r5, #12]
 800093e:	3410      	adds	r4, #16
 8000940:	f10c 0c10 	add.w	ip, ip, #16
 8000944:	4574      	cmp	r4, lr
 8000946:	d1f3      	bne.n	8000930 <receiving_AX25+0x84>
 8000948:	4662      	mov	r2, ip
 800094a:	4623      	mov	r3, r4
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000950:	4829      	ldr	r0, [pc, #164]	; (80009f8 <receiving_AX25+0x14c>)
 8000952:	f7ff fc5d 	bl	8000210 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	230a      	movs	r3, #10
 800095c:	4926      	ldr	r1, [pc, #152]	; (80009f8 <receiving_AX25+0x14c>)
 800095e:	4828      	ldr	r0, [pc, #160]	; (8000a00 <receiving_AX25+0x154>)
 8000960:	f005 f877 	bl	8005a52 <HAL_UART_Transmit>
			receiving_AX25();
 8000964:	f7ff ffa2 	bl	80008ac <receiving_AX25>
 8000968:	e042      	b.n	80009f0 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	d118      	bne.n	80009a4 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 8000972:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <receiving_AX25+0x14c>)
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <receiving_AX25+0x160>)
 8000976:	4615      	mov	r5, r2
 8000978:	461c      	mov	r4, r3
 800097a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097c:	6028      	str	r0, [r5, #0]
 800097e:	6069      	str	r1, [r5, #4]
 8000980:	60aa      	str	r2, [r5, #8]
 8000982:	60eb      	str	r3, [r5, #12]
 8000984:	6820      	ldr	r0, [r4, #0]
 8000986:	6128      	str	r0, [r5, #16]
 8000988:	7923      	ldrb	r3, [r4, #4]
 800098a:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <receiving_AX25+0x14c>)
 800098e:	f7ff fc3f 	bl	8000210 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	230a      	movs	r3, #10
 8000998:	4917      	ldr	r1, [pc, #92]	; (80009f8 <receiving_AX25+0x14c>)
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <receiving_AX25+0x154>)
 800099c:	f005 f859 	bl	8005a52 <HAL_UART_Transmit>

		return false;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e025      	b.n	80009f0 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <receiving_AX25+0x14c>)
 80009a6:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <receiving_AX25+0x164>)
 80009a8:	4614      	mov	r4, r2
 80009aa:	469c      	mov	ip, r3
 80009ac:	f104 0e20 	add.w	lr, r4, #32
 80009b0:	4665      	mov	r5, ip
 80009b2:	4626      	mov	r6, r4
 80009b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009b6:	6028      	str	r0, [r5, #0]
 80009b8:	6069      	str	r1, [r5, #4]
 80009ba:	60aa      	str	r2, [r5, #8]
 80009bc:	60eb      	str	r3, [r5, #12]
 80009be:	3410      	adds	r4, #16
 80009c0:	f10c 0c10 	add.w	ip, ip, #16
 80009c4:	4574      	cmp	r4, lr
 80009c6:	d1f3      	bne.n	80009b0 <receiving_AX25+0x104>
 80009c8:	4663      	mov	r3, ip
 80009ca:	4622      	mov	r2, r4
 80009cc:	6810      	ldr	r0, [r2, #0]
 80009ce:	6018      	str	r0, [r3, #0]
 80009d0:	8891      	ldrh	r1, [r2, #4]
 80009d2:	7992      	ldrb	r2, [r2, #6]
 80009d4:	8099      	strh	r1, [r3, #4]
 80009d6:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <receiving_AX25+0x14c>)
 80009da:	f7ff fc19 	bl	8000210 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	230a      	movs	r3, #10
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <receiving_AX25+0x14c>)
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <receiving_AX25+0x154>)
 80009e8:	f005 f833 	bl	8005a52 <HAL_UART_Transmit>
		receiving_AX25();
 80009ec:	f7ff ff5e 	bl	80008ac <receiving_AX25>
	}
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f8:	20001cd8 	.word	0x20001cd8
 80009fc:	080071fc 	.word	0x080071fc
 8000a00:	20002b94 	.word	0x20002b94
 8000a04:	200000d4 	.word	0x200000d4
 8000a08:	08007218 	.word	0x08007218
 8000a0c:	0800723c 	.word	0x0800723c
 8000a10:	08007254 	.word	0x08007254

08000a14 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <AX25_Packet_Validate+0x5c>)
 8000a1c:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <AX25_Packet_Validate+0x60>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b77      	cmp	r3, #119	; 0x77
 8000a28:	dc0a      	bgt.n	8000a40 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <AX25_Packet_Validate+0x64>)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <AX25_Packet_Validate+0x68>)
 8000a2e:	4614      	mov	r4, r2
 8000a30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a32:	6020      	str	r0, [r4, #0]
 8000a34:	6061      	str	r1, [r4, #4]
 8000a36:	60a2      	str	r2, [r4, #8]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	7323      	strb	r3, [r4, #12]
		return false;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e013      	b.n	8000a68 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <AX25_Packet_Validate+0x60>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00a      	beq.n	8000a62 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <AX25_Packet_Validate+0x64>)
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <AX25_Packet_Validate+0x68>)
 8000a50:	4614      	mov	r4, r2
 8000a52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a54:	6020      	str	r0, [r4, #0]
 8000a56:	6061      	str	r1, [r4, #4]
 8000a58:	60a2      	str	r2, [r4, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	7323      	strb	r3, [r4, #12]
		return false;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e002      	b.n	8000a68 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8000a62:	f000 f80d 	bl	8000a80 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 8000a66:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	200000d4 	.word	0x200000d4
 8000a74:	200000a0 	.word	0x200000a0
 8000a78:	20001cd8 	.word	0x20001cd8
 8000a7c:	0800727c 	.word	0x0800727c

08000a80 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000a86:	4b6e      	ldr	r3, [pc, #440]	; (8000c40 <set_packet_pointer_AX25+0x1c0>)
 8000a88:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 8000a8e:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000a90:	4a6d      	ldr	r2, [pc, #436]	; (8000c48 <set_packet_pointer_AX25+0x1c8>)
 8000a92:	4614      	mov	r4, r2
 8000a94:	469c      	mov	ip, r3
 8000a96:	f104 0e20 	add.w	lr, r4, #32
 8000a9a:	4665      	mov	r5, ip
 8000a9c:	4626      	mov	r6, r4
 8000a9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aa0:	6028      	str	r0, [r5, #0]
 8000aa2:	6069      	str	r1, [r5, #4]
 8000aa4:	60aa      	str	r2, [r5, #8]
 8000aa6:	60eb      	str	r3, [r5, #12]
 8000aa8:	3410      	adds	r4, #16
 8000aaa:	f10c 0c10 	add.w	ip, ip, #16
 8000aae:	4574      	cmp	r4, lr
 8000ab0:	d1f3      	bne.n	8000a9a <set_packet_pointer_AX25+0x1a>
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000aba:	4862      	ldr	r0, [pc, #392]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000abc:	f7ff fba8 	bl	8000210 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	495f      	ldr	r1, [pc, #380]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000ac8:	4860      	ldr	r0, [pc, #384]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000aca:	f004 ffc2 	bl	8005a52 <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8000ad2:	4a5c      	ldr	r2, [pc, #368]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000ad4:	4b5e      	ldr	r3, [pc, #376]	; (8000c50 <set_packet_pointer_AX25+0x1d0>)
 8000ad6:	4615      	mov	r5, r2
 8000ad8:	461c      	mov	r4, r3
 8000ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000adc:	6028      	str	r0, [r5, #0]
 8000ade:	6069      	str	r1, [r5, #4]
 8000ae0:	60aa      	str	r2, [r5, #8]
 8000ae2:	60eb      	str	r3, [r5, #12]
 8000ae4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000ae6:	6128      	str	r0, [r5, #16]
 8000ae8:	6169      	str	r1, [r5, #20]
 8000aea:	61aa      	str	r2, [r5, #24]
 8000aec:	7823      	ldrb	r3, [r4, #0]
 8000aee:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000af0:	4854      	ldr	r0, [pc, #336]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000af2:	f7ff fb8d 	bl	8000210 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	230a      	movs	r3, #10
 8000afc:	4951      	ldr	r1, [pc, #324]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000afe:	4853      	ldr	r0, [pc, #332]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000b00:	f004 ffa7 	bl	8005a52 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b0a:	3310      	adds	r3, #16
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3370      	adds	r3, #112	; 0x70
 8000b14:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	3370      	adds	r3, #112	; 0x70
 8000b1a:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8000b1c:	4a49      	ldr	r2, [pc, #292]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <set_packet_pointer_AX25+0x1d4>)
 8000b20:	4615      	mov	r5, r2
 8000b22:	461c      	mov	r4, r3
 8000b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b26:	6028      	str	r0, [r5, #0]
 8000b28:	6069      	str	r1, [r5, #4]
 8000b2a:	60aa      	str	r2, [r5, #8]
 8000b2c:	60eb      	str	r3, [r5, #12]
 8000b2e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b30:	6128      	str	r0, [r5, #16]
 8000b32:	6169      	str	r1, [r5, #20]
 8000b34:	61aa      	str	r2, [r5, #24]
 8000b36:	7823      	ldrb	r3, [r4, #0]
 8000b38:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b3a:	4842      	ldr	r0, [pc, #264]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b3c:	f7ff fb68 	bl	8000210 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	230a      	movs	r3, #10
 8000b46:	493f      	ldr	r1, [pc, #252]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b48:	4840      	ldr	r0, [pc, #256]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000b4a:	f004 ff82 	bl	8005a52 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b54:	3314      	adds	r3, #20
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3308      	adds	r3, #8
 8000b5e:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3308      	adds	r3, #8
 8000b64:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 8000b66:	4a37      	ldr	r2, [pc, #220]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <set_packet_pointer_AX25+0x1d8>)
 8000b6a:	4615      	mov	r5, r2
 8000b6c:	461c      	mov	r4, r3
 8000b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b70:	6028      	str	r0, [r5, #0]
 8000b72:	6069      	str	r1, [r5, #4]
 8000b74:	60aa      	str	r2, [r5, #8]
 8000b76:	60eb      	str	r3, [r5, #12]
 8000b78:	cc03      	ldmia	r4!, {r0, r1}
 8000b7a:	6128      	str	r0, [r5, #16]
 8000b7c:	6169      	str	r1, [r5, #20]
 8000b7e:	7823      	ldrb	r3, [r4, #0]
 8000b80:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b82:	4830      	ldr	r0, [pc, #192]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b84:	f7ff fb44 	bl	8000210 <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	492d      	ldr	r1, [pc, #180]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b90:	482e      	ldr	r0, [pc, #184]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000b92:	f004 ff5e 	bl	8005a52 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b9c:	3318      	adds	r3, #24
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3308      	adds	r3, #8
 8000bac:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 8000bae:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <set_packet_pointer_AX25+0x1dc>)
 8000bb2:	4615      	mov	r5, r2
 8000bb4:	461c      	mov	r4, r3
 8000bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb8:	6028      	str	r0, [r5, #0]
 8000bba:	6069      	str	r1, [r5, #4]
 8000bbc:	60aa      	str	r2, [r5, #8]
 8000bbe:	60eb      	str	r3, [r5, #12]
 8000bc0:	cc03      	ldmia	r4!, {r0, r1}
 8000bc2:	6128      	str	r0, [r5, #16]
 8000bc4:	6169      	str	r1, [r5, #20]
 8000bc6:	8823      	ldrh	r3, [r4, #0]
 8000bc8:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bca:	481e      	ldr	r0, [pc, #120]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bcc:	f7ff fb20 	bl	8000210 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	491b      	ldr	r1, [pc, #108]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bd8:	481c      	ldr	r0, [pc, #112]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000bda:	f004 ff3a 	bl	8005a52 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000be4:	331c      	adds	r3, #28
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <set_packet_pointer_AX25+0x1e0>)
 8000bfe:	4615      	mov	r5, r2
 8000c00:	461c      	mov	r4, r3
 8000c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c04:	6028      	str	r0, [r5, #0]
 8000c06:	6069      	str	r1, [r5, #4]
 8000c08:	60aa      	str	r2, [r5, #8]
 8000c0a:	60eb      	str	r3, [r5, #12]
 8000c0c:	cc03      	ldmia	r4!, {r0, r1}
 8000c0e:	6128      	str	r0, [r5, #16]
 8000c10:	6169      	str	r1, [r5, #20]
 8000c12:	7823      	ldrb	r3, [r4, #0]
 8000c14:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000c18:	f7ff fafa 	bl	8000210 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	230a      	movs	r3, #10
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000c26:	f004 ff14 	bl	8005a52 <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c30:	3304      	adds	r3, #4
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000d4 	.word	0x200000d4
 8000c44:	20001cd8 	.word	0x20001cd8
 8000c48:	0800728c 	.word	0x0800728c
 8000c4c:	20002b94 	.word	0x20002b94
 8000c50:	080072b0 	.word	0x080072b0
 8000c54:	080072d0 	.word	0x080072d0
 8000c58:	080072f0 	.word	0x080072f0
 8000c5c:	0800730c 	.word	0x0800730c
 8000c60:	08007328 	.word	0x08007328

08000c64 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <AX25_TO_KISS+0x10c>)
 8000c6c:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 8000c6e:	f7ff ff07 	bl	8000a80 <set_packet_pointer_AX25>
	print_AX25();
 8000c72:	f001 f9e5 	bl	8002040 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3308      	adds	r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	493d      	ldr	r1, [pc, #244]	; (8000d74 <AX25_TO_KISS+0x110>)
 8000c80:	461a      	mov	r2, r3
 8000c82:	460b      	mov	r3, r1
 8000c84:	cb03      	ldmia	r3!, {r0, r1}
 8000c86:	6010      	str	r0, [r2, #0]
 8000c88:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e014      	b.n	8000cc0 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000c9c:	3310      	adds	r3, #16
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8000ca8:	4413      	add	r3, r2
 8000caa:	2208      	movs	r2, #8
 8000cac:	4619      	mov	r1, r3
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f005 fde4 	bl	800687c <memcpy>
		cpy_from_ptr += 8;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b0d      	cmp	r3, #13
 8000cc4:	dde7      	ble.n	8000c96 <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ccc:	3314      	adds	r3, #20
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f005 fdd1 	bl	800687c <memcpy>
	cpy_from_ptr += control_len;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3308      	adds	r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4924      	ldr	r1, [pc, #144]	; (8000d74 <AX25_TO_KISS+0x110>)
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	cb03      	ldmia	r3!, {r0, r1}
 8000cea:	6010      	str	r0, [r2, #0]
 8000cec:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e019      	b.n	8000d28 <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000cfa:	331c      	adds	r3, #28
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1acb      	subs	r3, r1, r3
 8000d0e:	3b08      	subs	r3, #8
 8000d10:	4413      	add	r3, r2
 8000d12:	2208      	movs	r2, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f005 fdb0 	bl	800687c <memcpy>
		cpy_from_ptr += 8;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da00      	bge.n	8000d36 <AX25_TO_KISS+0xd2>
 8000d34:	3307      	adds	r3, #7
 8000d36:	10db      	asrs	r3, r3, #3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	dbd9      	blt.n	8000cf4 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	490c      	ldr	r1, [pc, #48]	; (8000d74 <AX25_TO_KISS+0x110>)
 8000d44:	461a      	mov	r2, r3
 8000d46:	460b      	mov	r3, r1
 8000d48:	cb03      	ldmia	r3!, {r0, r1}
 8000d4a:	6010      	str	r0, [r2, #0]
 8000d4c:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000d54:	3314      	adds	r3, #20
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2208      	movs	r2, #8
 8000d5a:	68f9      	ldr	r1, [r7, #12]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fd8d 	bl	800687c <memcpy>
	cpy_from_ptr += control_len;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3308      	adds	r3, #8
 8000d66:	60fb      	str	r3, [r7, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000d4 	.word	0x200000d4
 8000d74:	20000000 	.word	0x20000000

08000d78 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <receiving_KISS+0xc0>)
 8000d80:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <receiving_KISS+0xc4>)
 8000d84:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	7b5b      	ldrb	r3, [r3, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d04e      	beq.n	8000e2c <receiving_KISS+0xb4>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	461a      	mov	r2, r3
 8000d94:	492a      	ldr	r1, [pc, #168]	; (8000e40 <receiving_KISS+0xc8>)
 8000d96:	482b      	ldr	r0, [pc, #172]	; (8000e44 <receiving_KISS+0xcc>)
 8000d98:	f005 fd9c 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d9c:	4829      	ldr	r0, [pc, #164]	; (8000e44 <receiving_KISS+0xcc>)
 8000d9e:	f7ff fa37 	bl	8000210 <strlen>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	230a      	movs	r3, #10
 8000da8:	4926      	ldr	r1, [pc, #152]	; (8000e44 <receiving_KISS+0xcc>)
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <receiving_KISS+0xd0>)
 8000dac:	f004 fe51 	bl	8005a52 <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e01f      	b.n	8000dfc <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	7b9b      	ldrb	r3, [r3, #14]
 8000dca:	71fb      	strb	r3, [r7, #7]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3307      	adds	r3, #7
 8000dda:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2201      	movs	r2, #1
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fbeb 	bl	80005c0 <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000df0:	3309      	adds	r3, #9
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbdb      	blt.n	8000dbc <receiving_KISS+0x44>
		}

		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e0e:	330c      	adds	r3, #12
 8000e10:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e18:	330c      	adds	r3, #12
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3b13      	subs	r3, #19
 8000e1e:	00da      	lsls	r2, r3, #3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e26:	601a      	str	r2, [r3, #0]

		return true;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <receiving_KISS+0xb6>
	}
	return false;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20001440 	.word	0x20001440
 8000e3c:	200000d4 	.word	0x200000d4
 8000e40:	08007344 	.word	0x08007344
 8000e44:	20001cd8 	.word	0x20001cd8
 8000e48:	20002b94 	.word	0x20002b94

08000e4c <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <set_packet_pointer_KISS+0xac>)
 8000e54:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 8000e56:	4a29      	ldr	r2, [pc, #164]	; (8000efc <set_packet_pointer_KISS+0xb0>)
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <set_packet_pointer_KISS+0xb4>)
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e60:	6020      	str	r0, [r4, #0]
 8000e62:	6061      	str	r1, [r4, #4]
 8000e64:	60a2      	str	r2, [r4, #8]
 8000e66:	60e3      	str	r3, [r4, #12]
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	6120      	str	r0, [r4, #16]
 8000e6c:	6161      	str	r1, [r4, #20]
 8000e6e:	61a2      	str	r2, [r4, #24]
 8000e70:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e72:	4822      	ldr	r0, [pc, #136]	; (8000efc <set_packet_pointer_KISS+0xb0>)
 8000e74:	f7ff f9cc 	bl	8000210 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	491f      	ldr	r1, [pc, #124]	; (8000efc <set_packet_pointer_KISS+0xb0>)
 8000e80:	4820      	ldr	r0, [pc, #128]	; (8000f04 <set_packet_pointer_KISS+0xb8>)
 8000e82:	f004 fde6 	bl	8005a52 <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e92:	330c      	adds	r3, #12
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3b02      	subs	r3, #2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3b70      	subs	r3, #112	; 0x70
 8000ea2:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000eaa:	3310      	adds	r3, #16
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	3b08      	subs	r3, #8
 8000eb4:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ebc:	3314      	adds	r3, #20
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3b08      	subs	r3, #8
 8000ec6:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ece:	3318      	adds	r3, #24
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	425b      	negs	r3, r3
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000eea:	331c      	adds	r3, #28
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef8:	200000d4 	.word	0x200000d4
 8000efc:	20001cd8 	.word	0x20001cd8
 8000f00:	08007378 	.word	0x08007378
 8000f04:	20002b94 	.word	0x20002b94

08000f08 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	; (800103c <KISS_TO_AX25+0x134>)
 8000f10:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8000f12:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <KISS_TO_AX25+0x138>)
 8000f14:	4a4b      	ldr	r2, [pc, #300]	; (8001044 <KISS_TO_AX25+0x13c>)
 8000f16:	4614      	mov	r4, r2
 8000f18:	469c      	mov	ip, r3
 8000f1a:	f104 0e20 	add.w	lr, r4, #32
 8000f1e:	4665      	mov	r5, ip
 8000f20:	4626      	mov	r6, r4
 8000f22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f24:	6028      	str	r0, [r5, #0]
 8000f26:	6069      	str	r1, [r5, #4]
 8000f28:	60aa      	str	r2, [r5, #8]
 8000f2a:	60eb      	str	r3, [r5, #12]
 8000f2c:	3410      	adds	r4, #16
 8000f2e:	f10c 0c10 	add.w	ip, ip, #16
 8000f32:	4574      	cmp	r4, lr
 8000f34:	d1f3      	bne.n	8000f1e <KISS_TO_AX25+0x16>
 8000f36:	4663      	mov	r3, ip
 8000f38:	4622      	mov	r2, r4
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f3e:	4840      	ldr	r0, [pc, #256]	; (8001040 <KISS_TO_AX25+0x138>)
 8000f40:	f7ff f966 	bl	8000210 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	230a      	movs	r3, #10
 8000f4a:	493d      	ldr	r1, [pc, #244]	; (8001040 <KISS_TO_AX25+0x138>)
 8000f4c:	483e      	ldr	r0, [pc, #248]	; (8001048 <KISS_TO_AX25+0x140>)
 8000f4e:	f004 fd80 	bl	8005a52 <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8000f52:	f7ff ff7b 	bl	8000e4c <set_packet_pointer_KISS>
	print_KISS();
 8000f56:	f001 fcf3 	bl	8002940 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000f66:	330c      	adds	r3, #12
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3b02      	subs	r3, #2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8000f72:	f7ff fd85 	bl	8000a80 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3b70      	subs	r3, #112	; 0x70
 8000f7a:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f82:	3310      	adds	r3, #16
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2270      	movs	r2, #112	; 0x70
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fc76 	bl	800687c <memcpy>

	cpy_from_ptr -= control_len;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3b08      	subs	r3, #8
 8000f94:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f9c:	3314      	adds	r3, #20
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 fc69 	bl	800687c <memcpy>

	cpy_from_ptr -= PID_len;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b08      	subs	r3, #8
 8000fae:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2208      	movs	r2, #8
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 fc5c 	bl	800687c <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	425b      	negs	r3, r3
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000fda:	331c      	adds	r3, #28
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f005 fc47 	bl	800687c <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3380      	adds	r3, #128	; 0x80
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <KISS_TO_AX25+0x144>)
 8000ffa:	6013      	str	r3, [r2, #0]
	crc_generate();
 8000ffc:	f000 faca 	bl	8001594 <crc_generate>
	print_AX25();
 8001000:	f001 f81e 	bl	8002040 <print_AX25>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <KISS_TO_AX25+0x138>)
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <KISS_TO_AX25+0x148>)
 8001008:	4615      	mov	r5, r2
 800100a:	461c      	mov	r4, r3
 800100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100e:	6028      	str	r0, [r5, #0]
 8001010:	6069      	str	r1, [r5, #4]
 8001012:	60aa      	str	r2, [r5, #8]
 8001014:	60eb      	str	r3, [r5, #12]
 8001016:	cc03      	ldmia	r4!, {r0, r1}
 8001018:	6128      	str	r0, [r5, #16]
 800101a:	6169      	str	r1, [r5, #20]
 800101c:	7823      	ldrb	r3, [r4, #0]
 800101e:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <KISS_TO_AX25+0x138>)
 8001022:	f7ff f8f5 	bl	8000210 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	230a      	movs	r3, #10
 800102c:	4904      	ldr	r1, [pc, #16]	; (8001040 <KISS_TO_AX25+0x138>)
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <KISS_TO_AX25+0x140>)
 8001030:	f004 fd0f 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e022      	b.n	8001080 <KISS_TO_AX25+0x178>
 800103a:	bf00      	nop
 800103c:	200000d4 	.word	0x200000d4
 8001040:	20001cd8 	.word	0x20001cd8
 8001044:	08007398 	.word	0x08007398
 8001048:	20002b94 	.word	0x20002b94
 800104c:	200000a0 	.word	0x200000a0
 8001050:	080073bc 	.word	0x080073bc
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	49a5      	ldr	r1, [pc, #660]	; (80012f4 <KISS_TO_AX25+0x3ec>)
 8001060:	48a5      	ldr	r0, [pc, #660]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001062:	f005 fc37 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001066:	48a4      	ldr	r0, [pc, #656]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001068:	f7ff f8d2 	bl	8000210 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	230a      	movs	r3, #10
 8001072:	49a1      	ldr	r1, [pc, #644]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001074:	48a1      	ldr	r0, [pc, #644]	; (80012fc <KISS_TO_AX25+0x3f4>)
 8001076:	f004 fcec 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	4b9f      	ldr	r3, [pc, #636]	; (8001300 <KISS_TO_AX25+0x3f8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3310      	adds	r3, #16
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbe3      	blt.n	8001054 <KISS_TO_AX25+0x14c>
	}
	sprintf(uartData, "\n");
 800108c:	4a9a      	ldr	r2, [pc, #616]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 800108e:	4b9d      	ldr	r3, [pc, #628]	; (8001304 <KISS_TO_AX25+0x3fc>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001094:	4898      	ldr	r0, [pc, #608]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001096:	f7ff f8bb 	bl	8000210 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	230a      	movs	r3, #10
 80010a0:	4995      	ldr	r1, [pc, #596]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80010a2:	4896      	ldr	r0, [pc, #600]	; (80012fc <KISS_TO_AX25+0x3f4>)
 80010a4:	f004 fcd5 	bl	8005a52 <HAL_UART_Transmit>

	//BIT STUFFING NEEDED
	int ax25_len = rxBit_count + FCS_len;
 80010a8:	4b95      	ldr	r3, [pc, #596]	; (8001300 <KISS_TO_AX25+0x3f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3310      	adds	r3, #16
 80010ae:	607b      	str	r3, [r7, #4]
	int ones_count = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
	ones_count = bitstuffing(local_packet->address,address_len,ax25_len, ones_count, &(local_packet->stuffed_address));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80010ba:	3310      	adds	r3, #16
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80010c4:	3310      	adds	r3, #16
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	2170      	movs	r1, #112	; 0x70
 80010ce:	f000 f97b 	bl	80013c8 <bitstuffing>
 80010d2:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_address;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80010da:	3304      	adds	r3, #4
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80010e4:	3310      	adds	r3, #16
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	441a      	add	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80010f0:	3304      	adds	r3, #4
 80010f2:	601a      	str	r2, [r3, #0]
	ax25_len -= address_len;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b70      	subs	r3, #112	; 0x70
 80010f8:	607b      	str	r3, [r7, #4]

	local_packet->control += local_packet->bit_stuffed_zeros;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001100:	3314      	adds	r3, #20
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800110a:	3304      	adds	r3, #4
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	441a      	add	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001116:	3314      	adds	r3, #20
 8001118:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->control,control_len,ax25_len, ones_count, &(local_packet->stuffed_control));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001120:	3314      	adds	r3, #20
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800112a:	3314      	adds	r3, #20
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	2108      	movs	r1, #8
 8001134:	f000 f948 	bl	80013c8 <bitstuffing>
 8001138:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_control;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001140:	3304      	adds	r3, #4
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800114a:	3314      	adds	r3, #20
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	441a      	add	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001156:	3304      	adds	r3, #4
 8001158:	601a      	str	r2, [r3, #0]
	ax25_len -= control_len;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3b08      	subs	r3, #8
 800115e:	607b      	str	r3, [r7, #4]

	local_packet->PID += local_packet->bit_stuffed_zeros;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001166:	3318      	adds	r3, #24
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001170:	3304      	adds	r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	441a      	add	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800117c:	3318      	adds	r3, #24
 800117e:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->PID,PID_len,ax25_len, ones_count, &(local_packet->stuffed_PID));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001186:	3318      	adds	r3, #24
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001190:	3318      	adds	r3, #24
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	2108      	movs	r1, #8
 800119a:	f000 f915 	bl	80013c8 <bitstuffing>
 800119e:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_PID;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011a6:	3304      	adds	r3, #4
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011b0:	3318      	adds	r3, #24
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	441a      	add	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011bc:	3304      	adds	r3, #4
 80011be:	601a      	str	r2, [r3, #0]
	ax25_len -= PID_len;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b08      	subs	r3, #8
 80011c4:	607b      	str	r3, [r7, #4]

	local_packet->Info += local_packet->bit_stuffed_zeros;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011cc:	331c      	adds	r3, #28
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	441a      	add	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011e2:	331c      	adds	r3, #28
 80011e4:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->Info,local_packet->Info_Len, ax25_len, ones_count, &(local_packet->stuffed_Info));
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011ec:	331c      	adds	r3, #28
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011fe:	331c      	adds	r3, #28
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	f000 f8df 	bl	80013c8 <bitstuffing>
 800120a:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_Info;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001212:	3304      	adds	r3, #4
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800121c:	331c      	adds	r3, #28
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	441a      	add	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001228:	3304      	adds	r3, #4
 800122a:	601a      	str	r2, [r3, #0]
	ax25_len -= local_packet->Info_Len;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	607b      	str	r3, [r7, #4]

	local_packet->FCS += local_packet->bit_stuffed_zeros;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001240:	3304      	adds	r3, #4
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	441a      	add	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001256:	3304      	adds	r3, #4
 8001258:	601a      	str	r2, [r3, #0]
	bitstuffing(local_packet->FCS,FCS_len, ax25_len, ones_count, &(local_packet->stuffed_FCS));
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001260:	3304      	adds	r3, #4
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	2110      	movs	r1, #16
 8001272:	f000 f8a9 	bl	80013c8 <bitstuffing>
	local_packet->bit_stuffed_zeros += local_packet->stuffed_FCS;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800127c:	3304      	adds	r3, #4
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	441a      	add	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001290:	3304      	adds	r3, #4
 8001292:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "bit stuffed zeros = %d\n",local_packet->bit_stuffed_zeros);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800129a:	3304      	adds	r3, #4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4919      	ldr	r1, [pc, #100]	; (8001308 <KISS_TO_AX25+0x400>)
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012a4:	f005 fb16 	bl	80068d4 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012aa:	f7fe ffb1 	bl	8000210 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	230a      	movs	r3, #10
 80012b4:	4910      	ldr	r1, [pc, #64]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <KISS_TO_AX25+0x3f4>)
 80012b8:	f004 fbcb 	bl	8005a52 <HAL_UART_Transmit>

	sprintf(uartData, "\n line Printing AX25 = \n");
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <KISS_TO_AX25+0x404>)
 80012c0:	4615      	mov	r5, r2
 80012c2:	461c      	mov	r4, r3
 80012c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c6:	6028      	str	r0, [r5, #0]
 80012c8:	6069      	str	r1, [r5, #4]
 80012ca:	60aa      	str	r2, [r5, #8]
 80012cc:	60eb      	str	r3, [r5, #12]
 80012ce:	cc03      	ldmia	r4!, {r0, r1}
 80012d0:	6128      	str	r0, [r5, #16]
 80012d2:	6169      	str	r1, [r5, #20]
 80012d4:	7823      	ldrb	r3, [r4, #0]
 80012d6:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012da:	f7fe ff99 	bl	8000210 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	230a      	movs	r3, #10
 80012e4:	4904      	ldr	r1, [pc, #16]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <KISS_TO_AX25+0x3f4>)
 80012e8:	f004 fbb3 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	e024      	b.n	800133c <KISS_TO_AX25+0x434>
 80012f2:	bf00      	nop
 80012f4:	080073d8 	.word	0x080073d8
 80012f8:	20001cd8 	.word	0x20001cd8
 80012fc:	20002b94 	.word	0x20002b94
 8001300:	200000a0 	.word	0x200000a0
 8001304:	080073e0 	.word	0x080073e0
 8001308:	080073e4 	.word	0x080073e4
 800130c:	080073bc 	.word	0x080073bc
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	491b      	ldr	r1, [pc, #108]	; (8001388 <KISS_TO_AX25+0x480>)
 800131c:	481b      	ldr	r0, [pc, #108]	; (800138c <KISS_TO_AX25+0x484>)
 800131e:	f005 fad9 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001322:	481a      	ldr	r0, [pc, #104]	; (800138c <KISS_TO_AX25+0x484>)
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	230a      	movs	r3, #10
 800132e:	4917      	ldr	r1, [pc, #92]	; (800138c <KISS_TO_AX25+0x484>)
 8001330:	4817      	ldr	r0, [pc, #92]	; (8001390 <KISS_TO_AX25+0x488>)
 8001332:	f004 fb8e 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3301      	adds	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <KISS_TO_AX25+0x48c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f103 0210 	add.w	r2, r3, #16
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800134a:	3304      	adds	r3, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbdc      	blt.n	8001310 <KISS_TO_AX25+0x408>
	}
	sprintf(uartData, "\n");
 8001356:	4a0d      	ldr	r2, [pc, #52]	; (800138c <KISS_TO_AX25+0x484>)
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <KISS_TO_AX25+0x490>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <KISS_TO_AX25+0x484>)
 8001360:	f7fe ff56 	bl	8000210 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	230a      	movs	r3, #10
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <KISS_TO_AX25+0x484>)
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <KISS_TO_AX25+0x488>)
 800136e:	f004 fb70 	bl	8005a52 <HAL_UART_Transmit>
	rxBit_count = 0;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <KISS_TO_AX25+0x48c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
//	Print the ax25 packet
	print_outAX25();
 8001378:	f001 f836 	bl	80023e8 <print_outAX25>
	return true; //valid packet
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001386:	bf00      	nop
 8001388:	080073d8 	.word	0x080073d8
 800138c:	20001cd8 	.word	0x20001cd8
 8001390:	20002b94 	.word	0x20002b94
 8001394:	200000a0 	.word	0x200000a0
 8001398:	080073e0 	.word	0x080073e0

0800139c <bit_stuff>:


void bit_stuff(bool* array,int bits_left){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	1c98      	adds	r0, r3, #2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f005 fa6e 	bl	8006892 <memmove>
	*(array+1) = false;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3301      	adds	r3, #1
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <bitstuffing>:

int bitstuffing(bool* packet,int len,int bits_left, int ones_count,int *stuff){
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <bitstuffing+0xcc>)
 80013d8:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <bitstuffing+0xd0>)
 80013da:	4614      	mov	r4, r2
 80013dc:	469c      	mov	ip, r3
 80013de:	f104 0e20 	add.w	lr, r4, #32
 80013e2:	4665      	mov	r5, ip
 80013e4:	4626      	mov	r6, r4
 80013e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013e8:	6028      	str	r0, [r5, #0]
 80013ea:	6069      	str	r1, [r5, #4]
 80013ec:	60aa      	str	r2, [r5, #8]
 80013ee:	60eb      	str	r3, [r5, #12]
 80013f0:	3410      	adds	r4, #16
 80013f2:	f10c 0c10 	add.w	ip, ip, #16
 80013f6:	4574      	cmp	r4, lr
 80013f8:	d1f3      	bne.n	80013e2 <bitstuffing+0x1a>
 80013fa:	4663      	mov	r3, ip
 80013fc:	4622      	mov	r2, r4
 80013fe:	6810      	ldr	r0, [r2, #0]
 8001400:	6018      	str	r0, [r3, #0]
 8001402:	7912      	ldrb	r2, [r2, #4]
 8001404:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001406:	4823      	ldr	r0, [pc, #140]	; (8001494 <bitstuffing+0xcc>)
 8001408:	f7fe ff02 	bl	8000210 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	230a      	movs	r3, #10
 8001412:	4920      	ldr	r1, [pc, #128]	; (8001494 <bitstuffing+0xcc>)
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <bitstuffing+0xd4>)
 8001416:	f004 fb1c 	bl	8005a52 <HAL_UART_Transmit>

	int bit_stuff_count = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
	bool *curr_mem = packet;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	617b      	str	r3, [r7, #20]
	int left;

	//Increment through array
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	e027      	b.n	8001478 <bitstuffing+0xb0>
		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01c      	beq.n	800146e <bitstuffing+0xa6>
        	//Inc ones count
        	ones_count++;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	603b      	str	r3, [r7, #0]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b05      	cmp	r3, #5
 800143e:	d118      	bne.n	8001472 <bitstuffing+0xaa>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	441a      	add	r2, r3
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
                bit_stuff(curr_mem+i,left);
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4413      	add	r3, r2
 8001454:	6939      	ldr	r1, [r7, #16]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffa0 	bl	800139c <bit_stuff>

                bit_stuff_count++;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	3301      	adds	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
                ones_count = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
                i++;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	3301      	adds	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	e001      	b.n	8001472 <bitstuffing+0xaa>
            }
        }
        else{
        	ones_count = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3301      	adds	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbd1      	blt.n	8001428 <bitstuffing+0x60>
        }
	}
	*stuff = bit_stuff_count;
 8001484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	601a      	str	r2, [r3, #0]
	return ones_count;
 800148a:	683b      	ldr	r3, [r7, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3724      	adds	r7, #36	; 0x24
 8001490:	46bd      	mov	sp, r7
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	20001cd8 	.word	0x20001cd8
 8001498:	080073fc 	.word	0x080073fc
 800149c:	20002b94 	.word	0x20002b94

080014a0 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <crc_calc+0xe0>)
 80014ae:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 80014ba:	f248 4308 	movw	r3, #33800	; 0x8408
 80014be:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4053      	eors	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	105a      	asrs	r2, r3, #1
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <crc_calc+0x3e>
 80014d8:	f248 4308 	movw	r3, #33800	; 0x8408
 80014dc:	e000      	b.n	80014e0 <crc_calc+0x40>
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	405a      	eors	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <crc_calc+0xe4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	db38      	blt.n	8001576 <crc_calc+0xd6>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800150c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800151a:	3308      	adds	r3, #8
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4919      	ldr	r1, [pc, #100]	; (8001588 <crc_calc+0xe8>)
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <crc_calc+0xec>)
 8001524:	f005 f9d6 	bl	80068d4 <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <crc_calc+0xec>)
 800152a:	f7fe fe71 	bl	8000210 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	230a      	movs	r3, #10
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <crc_calc+0xec>)
 8001536:	4816      	ldr	r0, [pc, #88]	; (8001590 <crc_calc+0xf0>)
 8001538:	f004 fa8b 	bl	8005a52 <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001542:	3310      	adds	r3, #16
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	f083 0301 	eor.w	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d012      	beq.n	8001576 <crc_calc+0xd6>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b298      	uxth	r0, r3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff f82c 	bl	80005c0 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800156e:	3308      	adds	r3, #8
 8001570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001574:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8001576:	bf00      	nop
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000d4 	.word	0x200000d4
 8001584:	200000a0 	.word	0x200000a0
 8001588:	08007424 	.word	0x08007424
 800158c:	20001cd8 	.word	0x20001cd8
 8001590:	20002b94 	.word	0x20002b94

08001594 <crc_generate>:

void crc_generate(){
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800159a:	4b73      	ldr	r3, [pc, #460]	; (8001768 <crc_generate+0x1d4>)
 800159c:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80015a4:	3308      	adds	r3, #8
 80015a6:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80015ae:	330c      	adds	r3, #12
 80015b0:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b8:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <crc_generate+0x1d8>)
 80015c2:	4b6b      	ldr	r3, [pc, #428]	; (8001770 <crc_generate+0x1dc>)
 80015c4:	4615      	mov	r5, r2
 80015c6:	461c      	mov	r4, r3
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	6028      	str	r0, [r5, #0]
 80015cc:	6069      	str	r1, [r5, #4]
 80015ce:	60aa      	str	r2, [r5, #8]
 80015d0:	60eb      	str	r3, [r5, #12]
 80015d2:	cc03      	ldmia	r4!, {r0, r1}
 80015d4:	6128      	str	r0, [r5, #16]
 80015d6:	6169      	str	r1, [r5, #20]
 80015d8:	8823      	ldrh	r3, [r4, #0]
 80015da:	78a2      	ldrb	r2, [r4, #2]
 80015dc:	832b      	strh	r3, [r5, #24]
 80015de:	4613      	mov	r3, r2
 80015e0:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015e2:	4862      	ldr	r0, [pc, #392]	; (800176c <crc_generate+0x1d8>)
 80015e4:	f7fe fe14 	bl	8000210 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	230a      	movs	r3, #10
 80015ee:	495f      	ldr	r1, [pc, #380]	; (800176c <crc_generate+0x1d8>)
 80015f0:	4860      	ldr	r0, [pc, #384]	; (8001774 <crc_generate+0x1e0>)
 80015f2:	f004 fa2e 	bl	8005a52 <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015fc:	3310      	adds	r3, #16
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3368      	adds	r3, #104	; 0x68
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	e017      	b.n	800163a <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e00b      	b.n	8001628 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff3f 	bl	80014a0 <crc_calc>
		for(int j = 0;j<8;j++){
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b07      	cmp	r3, #7
 800162c:	ddf0      	ble.n	8001610 <crc_generate+0x7c>
		}
		curr_mem -= 8;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3b08      	subs	r3, #8
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	3301      	adds	r3, #1
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b0d      	cmp	r3, #13
 800163e:	dde4      	ble.n	800160a <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001646:	3314      	adds	r3, #20
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	e00f      	b.n	8001672 <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001658:	3314      	adds	r3, #20
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff1a 	bl	80014a0 <crc_calc>
	for(int i = 0; i < control_len; i++){
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3301      	adds	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b07      	cmp	r3, #7
 8001676:	ddec      	ble.n	8001652 <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800167e:	3318      	adds	r3, #24
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00f      	b.n	80016aa <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001690:	3318      	adds	r3, #24
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fefe 	bl	80014a0 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	ddec      	ble.n	800168a <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016b6:	331c      	adds	r3, #28
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3b08      	subs	r3, #8
 80016c4:	4413      	add	r3, r2
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	e017      	b.n	80016fe <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e00b      	b.n	80016ec <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fedd 	bl	80014a0 <crc_calc>
		for(int j = 0;j<8;j++){
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	ddf0      	ble.n	80016d4 <crc_generate+0x140>
		}
		curr_mem -= 8;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	3b08      	subs	r3, #8
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	3301      	adds	r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da00      	bge.n	800170c <crc_generate+0x178>
 800170a:	3307      	adds	r3, #7
 800170c:	10db      	asrs	r3, r3, #3
 800170e:	461a      	mov	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4293      	cmp	r3, r2
 8001714:	dbdb      	blt.n	80016ce <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <crc_generate+0x1e4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4917      	ldr	r1, [pc, #92]	; (800177c <crc_generate+0x1e8>)
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <crc_generate+0x1d8>)
 8001720:	f005 f8d8 	bl	80068d4 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001724:	4811      	ldr	r0, [pc, #68]	; (800176c <crc_generate+0x1d8>)
 8001726:	f7fe fd73 	bl	8000210 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	230a      	movs	r3, #10
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <crc_generate+0x1d8>)
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <crc_generate+0x1e0>)
 8001734:	f004 f98d 	bl	8005a52 <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4910      	ldr	r1, [pc, #64]	; (8001780 <crc_generate+0x1ec>)
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <crc_generate+0x1d8>)
 8001742:	f005 f8c7 	bl	80068d4 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <crc_generate+0x1d8>)
 8001748:	f7fe fd62 	bl	8000210 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	230a      	movs	r3, #10
 8001752:	4906      	ldr	r1, [pc, #24]	; (800176c <crc_generate+0x1d8>)
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <crc_generate+0x1e0>)
 8001756:	f004 f97c 	bl	8005a52 <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	200000d4 	.word	0x200000d4
 800176c:	20001cd8 	.word	0x20001cd8
 8001770:	08007444 	.word	0x08007444
 8001774:	20002b94 	.word	0x20002b94
 8001778:	200000a0 	.word	0x200000a0
 800177c:	08007460 	.word	0x08007460
 8001780:	08007470 	.word	0x08007470

08001784 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 800178e:	f000 f999 	bl	8001ac4 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <initProgram+0x58>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8001798:	f000 f826 	bl	80017e8 <toggleMode>
	toggleMode();
 800179c:	f000 f824 	bl	80017e8 <toggleMode>

	if (mode) {
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <initProgram+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <initProgram+0x5c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2264      	movs	r2, #100	; 0x64
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <initProgram+0x60>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ba:	e008      	b.n	80017ce <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <initProgram+0x5c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <initProgram+0x60>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2268      	movs	r2, #104	; 0x68
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 80017ce:	f7fe ffb5 	bl	800073c <init_AX25>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20002b3c 	.word	0x20002b3c
 80017e0:	20002b54 	.word	0x20002b54
 80017e4:	2000289c 	.word	0x2000289c

080017e8 <toggleMode>:



void toggleMode() {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80017ec:	2006      	movs	r0, #6
 80017ee:	f002 f976 	bl	8003ade <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <toggleMode+0xa8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f083 0301 	eor.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <toggleMode+0xa8>)
 800180e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <toggleMode+0xa8>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	2120      	movs	r1, #32
 8001818:	481e      	ldr	r0, [pc, #120]	; (8001894 <toggleMode+0xac>)
 800181a:	f002 ff37 	bl	800468c <HAL_GPIO_WritePin>
	midbit = false;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <toggleMode+0xb0>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8001824:	481d      	ldr	r0, [pc, #116]	; (800189c <toggleMode+0xb4>)
 8001826:	f003 fcc6 	bl	80051b6 <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <toggleMode+0xb4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <toggleMode+0xb8>)
 8001834:	f003 fcbf 	bl	80051b6 <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <toggleMode+0xb8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <toggleMode+0xa8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <toggleMode+0xb4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
 8001852:	e015      	b.n	8001880 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <toggleMode+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f242 7210 	movw	r2, #10000	; 0x2710
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <toggleMode+0xb4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2268      	movs	r2, #104	; 0x68
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <toggleMode+0xb8>)
 8001868:	f003 fc81 	bl	800516e <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <toggleMode+0xb4>)
 800186e:	f003 fccd 	bl	800520c <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001872:	2100      	movs	r1, #0
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <toggleMode+0xc0>)
 8001876:	f002 f96e 	bl	8003b56 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800187a:	2006      	movs	r0, #6
 800187c:	f002 f921 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <toggleMode+0xac>)
 8001888:	f002 ff00 	bl	800468c <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20002b3c 	.word	0x20002b3c
 8001894:	40020000 	.word	0x40020000
 8001898:	200000a4 	.word	0x200000a4
 800189c:	2000289c 	.word	0x2000289c
 80018a0:	20002dd4 	.word	0x20002dd4
 80018a4:	20002b54 	.word	0x20002b54
 80018a8:	20002b40 	.word	0x20002b40

080018ac <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if(canWrite){
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <loadPeriodBuffer+0x64>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01d      	beq.n	80018f8 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <loadPeriodBuffer+0x68>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <loadPeriodBuffer+0x6c>)
 80018c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <loadPeriodBuffer+0x68>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <loadPeriodBuffer+0x68>)
 80018d4:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <loadPeriodBuffer+0x68>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	2b7f      	cmp	r3, #127	; 0x7f
 80018dc:	d902      	bls.n	80018e4 <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <loadPeriodBuffer+0x68>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <loadPeriodBuffer+0x68>)
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <loadPeriodBuffer+0x70>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <loadPeriodBuffer+0x52>
			canWrite = false;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <loadPeriodBuffer+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e002      	b.n	80018fe <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <loadPeriodBuffer+0x74>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <loadPeriodBuffer+0x78>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000010 	.word	0x20000010
 8001914:	200000ba 	.word	0x200000ba
 8001918:	2000293c 	.word	0x2000293c
 800191c:	200000bc 	.word	0x200000bc
 8001920:	200000a6 	.word	0x200000a6
 8001924:	200000b8 	.word	0x200000b8

08001928 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	if (mode) {
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <Tim3IT+0x54>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <Tim3IT+0x14>
		midbit = false;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <Tim3IT+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 800193a:	e01c      	b.n	8001976 <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <Tim3IT+0x5c>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d112      	bne.n	800196a <Tim3IT+0x42>
			if(signal_valid){
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <Tim3IT+0x60>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00a      	beq.n	8001962 <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f7ff ffac 	bl	80018ac <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <Tim3IT+0x64>)
 8001956:	f003 fc2e 	bl	80051b6 <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <Tim3IT+0x64>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <Tim3IT+0x60>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
}
 8001968:	e005      	b.n	8001976 <Tim3IT+0x4e>
			signal_detect_decay--;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <Tim3IT+0x5c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <Tim3IT+0x5c>)
 8001974:	801a      	strh	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20002b3c 	.word	0x20002b3c
 8001980:	200000a4 	.word	0x200000a4
 8001984:	200000be 	.word	0x200000be
 8001988:	200000c0 	.word	0x200000c0
 800198c:	20002dd4 	.word	0x20002dd4

08001990 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <FreqCounterPinEXTI+0xc0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	461a      	mov	r2, r3
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <FreqCounterPinEXTI+0xc4>)
 80019a0:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <FreqCounterPinEXTI+0xc4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <FreqCounterPinEXTI+0xc8>)
 80019a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ac:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <FreqCounterPinEXTI+0xc4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff7a 	bl	80018ac <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <FreqCounterPinEXTI+0xd0>)
 80019be:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f240 726c 	movw	r2, #1900	; 0x76c
 80019c6:	4293      	cmp	r3, r2
 80019c8:	dd09      	ble.n	80019de <FreqCounterPinEXTI+0x4e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80019d0:	4293      	cmp	r3, r2
 80019d2:	dc04      	bgt.n	80019de <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019d6:	f640 0298 	movw	r2, #2200	; 0x898
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e011      	b.n	8001a02 <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80019e4:	dd09      	ble.n	80019fa <FreqCounterPinEXTI+0x6a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f240 52db 	movw	r2, #1499	; 0x5db
 80019ec:	4293      	cmp	r3, r2
 80019ee:	dc04      	bgt.n	80019fa <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019f2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e003      	b.n	8001a02 <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <FreqCounterPinEXTI+0xd0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d104      	bne.n	8001a18 <FreqCounterPinEXTI+0x88>
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a16:	d107      	bne.n	8001a28 <FreqCounterPinEXTI+0x98>
		edges = 0;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <FreqCounterPinEXTI+0xd4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <FreqCounterPinEXTI+0xd8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
 8001a26:	e004      	b.n	8001a32 <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <FreqCounterPinEXTI+0xd4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <FreqCounterPinEXTI+0xd4>)
 8001a30:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <FreqCounterPinEXTI+0xdc>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <FreqCounterPinEXTI+0xe0>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <FreqCounterPinEXTI+0xc0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20002b54 	.word	0x20002b54
 8001a54:	200000ac 	.word	0x200000ac
 8001a58:	00989680 	.word	0x00989680
 8001a5c:	200000b4 	.word	0x200000b4
 8001a60:	200000b0 	.word	0x200000b0
 8001a64:	200000a8 	.word	0x200000a8
 8001a68:	20002dd4 	.word	0x20002dd4
 8001a6c:	200000c0 	.word	0x200000c0
 8001a70:	200000be 	.word	0x200000be

08001a74 <generateBitstream>:
	}

	HAL_TIM_Base_Stop(&htim3);
	return wave_start;
}
void generateBitstream() {
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <generateBitstream+0x4c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <generateBitstream+0x4c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <generateBitstream+0x4c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <generateBitstream+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <generateBitstream+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <generateBitstream+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <generateBitstream+0x4c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <generateBitstream+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <generateBitstream+0x4c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <generateBitstream+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	725a      	strb	r2, [r3, #9]

}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20002890 	.word	0x20002890

08001ac4 <initOUTData>:
void initOUTData() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8001ac8:	f7ff ffd4 	bl	8001a74 <generateBitstream>
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <pertobit>:
uint16_t	signal_detect_decay = 0;			//Pseudo timer to detect if value is valid
bool		signal_valid = false;					//Determines if frequency being read is a valid bit
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <pertobit+0x88>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV)){
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f240 726c 	movw	r2, #1900	; 0x76c
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	dd15      	ble.n	8001b18 <pertobit+0x48>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001af2:	4293      	cmp	r3, r2
 8001af4:	dc10      	bgt.n	8001b18 <pertobit+0x48>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4918      	ldr	r1, [pc, #96]	; (8001b5c <pertobit+0x8c>)
 8001afa:	4819      	ldr	r0, [pc, #100]	; (8001b60 <pertobit+0x90>)
 8001afc:	f004 feea 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b00:	4817      	ldr	r0, [pc, #92]	; (8001b60 <pertobit+0x90>)
 8001b02:	f7fe fb85 	bl	8000210 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	4914      	ldr	r1, [pc, #80]	; (8001b60 <pertobit+0x90>)
 8001b0e:	4815      	ldr	r0, [pc, #84]	; (8001b64 <pertobit+0x94>)
 8001b10:	f003 ff9f 	bl	8005a52 <HAL_UART_Transmit>
		return 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e01b      	b.n	8001b50 <pertobit+0x80>
	}
	else if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV)){
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001b1e:	dd15      	ble.n	8001b4c <pertobit+0x7c>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f240 52db 	movw	r2, #1499	; 0x5db
 8001b26:	4293      	cmp	r3, r2
 8001b28:	dc10      	bgt.n	8001b4c <pertobit+0x7c>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	490b      	ldr	r1, [pc, #44]	; (8001b5c <pertobit+0x8c>)
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <pertobit+0x90>)
 8001b30:	f004 fed0 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <pertobit+0x90>)
 8001b36:	f7fe fb6b 	bl	8000210 <strlen>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	230a      	movs	r3, #10
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <pertobit+0x90>)
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <pertobit+0x94>)
 8001b44:	f003 ff85 	bl	8005a52 <HAL_UART_Transmit>
		return 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e001      	b.n	8001b50 <pertobit+0x80>
	}
	else
//		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		return -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	00989680 	.word	0x00989680
 8001b5c:	080074dc 	.word	0x080074dc
 8001b60:	20001cd8 	.word	0x20001cd8
 8001b64:	20002b94 	.word	0x20002b94

08001b68 <loadBit>:
int loadBit(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
	int startbit;
	int currbit = -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	617b      	str	r3, [r7, #20]
	int loopCount = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
	int checkCount;
	bool goodbit = false;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	72fb      	strb	r3, [r7, #11]

	startbit = pertobit(periodBuffer[trackBit]);
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <loadBit+0xdc>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <loadBit+0xe0>)
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffa1 	bl	8001ad0 <pertobit>
 8001b8e:	6078      	str	r0, [r7, #4]
//	sprintf(uartData, "startbit = %d\n",startbit);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	//Increment trackBit
	trackBit++;
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <loadBit+0xdc>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <loadBit+0xdc>)
 8001b9a:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <loadBit+0xdc>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba2:	d902      	bls.n	8001baa <loadBit+0x42>
		trackBit = 0;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <loadBit+0xdc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	801a      	strh	r2, [r3, #0]

	if(startbit==1){
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d102      	bne.n	8001bb6 <loadBit+0x4e>
		checkCount = 3;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e02f      	b.n	8001c16 <loadBit+0xae>
	}
	else if(startbit==0){
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <loadBit+0x5a>
		checkCount = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e029      	b.n	8001c16 <loadBit+0xae>
	}
	else {
		checkCount = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
	}

	//Valiate startbit value
	while(loopCount<checkCount){
 8001bc6:	e026      	b.n	8001c16 <loadBit+0xae>
		currbit = pertobit(periodBuffer[trackBit]);
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <loadBit+0xdc>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <loadBit+0xe0>)
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff7b 	bl	8001ad0 <pertobit>
 8001bda:	6178      	str	r0, [r7, #20]

		//Good bit
		if(startbit==currbit){
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10c      	bne.n	8001bfe <loadBit+0x96>
			goodbit = true;
 8001be4:	2301      	movs	r3, #1
 8001be6:	72fb      	strb	r3, [r7, #11]
			goodbit = false;
			break;
		}

		//Increment trackBit
		trackBit++;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <loadBit+0xdc>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <loadBit+0xdc>)
 8001bf2:	801a      	strh	r2, [r3, #0]
		if (trackBit >= RX_BUFFERSIZE)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <loadBit+0xdc>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8001bfa:	d909      	bls.n	8001c10 <loadBit+0xa8>
 8001bfc:	e005      	b.n	8001c0a <loadBit+0xa2>
			currbit = -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	617b      	str	r3, [r7, #20]
			goodbit = false;
 8001c04:	2300      	movs	r3, #0
 8001c06:	72fb      	strb	r3, [r7, #11]
			break;
 8001c08:	e009      	b.n	8001c1e <loadBit+0xb6>
			trackBit = 0;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <loadBit+0xdc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	801a      	strh	r2, [r3, #0]
		loopCount++;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3301      	adds	r3, #1
 8001c14:	613b      	str	r3, [r7, #16]
	while(loopCount<checkCount){
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbd4      	blt.n	8001bc8 <loadBit+0x60>
	}

	//Increment bitSaveCount
	bitSaveCount++;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <loadBit+0xe4>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <loadBit+0xe4>)
 8001c28:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <loadBit+0xe4>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c30:	d902      	bls.n	8001c38 <loadBit+0xd0>
		bitSaveCount = 0;
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <loadBit+0xe4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	801a      	strh	r2, [r3, #0]

	return currbit;
 8001c38:	697b      	ldr	r3, [r7, #20]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000c2 	.word	0x200000c2
 8001c48:	2000293c 	.word	0x2000293c
 8001c4c:	200000c4 	.word	0x200000c4

08001c50 <loadOctet>:
int loadOctet(bool* bufferptr) {
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e043      	b.n	8001cea <loadOctet+0x9a>
		bit = loadBit();
 8001c62:	f7ff ff81 	bl	8001b68 <loadBit>
 8001c66:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4955      	ldr	r1, [pc, #340]	; (8001dc4 <loadOctet+0x174>)
 8001c6e:	4856      	ldr	r0, [pc, #344]	; (8001dc8 <loadOctet+0x178>)
 8001c70:	f004 fe30 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c74:	4854      	ldr	r0, [pc, #336]	; (8001dc8 <loadOctet+0x178>)
 8001c76:	f7fe facb 	bl	8000210 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	230a      	movs	r3, #10
 8001c80:	4951      	ldr	r1, [pc, #324]	; (8001dc8 <loadOctet+0x178>)
 8001c82:	4852      	ldr	r0, [pc, #328]	; (8001dcc <loadOctet+0x17c>)
 8001c84:	f003 fee5 	bl	8005a52 <HAL_UART_Transmit>

        if(bit < 0){
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da11      	bge.n	8001cb2 <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	494f      	ldr	r1, [pc, #316]	; (8001dd0 <loadOctet+0x180>)
 8001c92:	484d      	ldr	r0, [pc, #308]	; (8001dc8 <loadOctet+0x178>)
 8001c94:	f004 fe1e 	bl	80068d4 <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c98:	484b      	ldr	r0, [pc, #300]	; (8001dc8 <loadOctet+0x178>)
 8001c9a:	f7fe fab9 	bl	8000210 <strlen>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	4948      	ldr	r1, [pc, #288]	; (8001dc8 <loadOctet+0x178>)
 8001ca6:	4849      	ldr	r0, [pc, #292]	; (8001dcc <loadOctet+0x17c>)
 8001ca8:	f003 fed3 	bl	8005a52 <HAL_UART_Transmit>
        	return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e083      	b.n	8001dba <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2d9      	uxtb	r1, r3
 8001cbe:	f107 0208 	add.w	r2, r7, #8
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	493f      	ldr	r1, [pc, #252]	; (8001dd4 <loadOctet+0x184>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	440b      	add	r3, r1
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <loadOctet+0x94>
        	isFlag = false;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b07      	cmp	r3, #7
 8001cee:	ddb8      	ble.n	8001c62 <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d05d      	beq.n	8001db8 <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 8001cfc:	4a32      	ldr	r2, [pc, #200]	; (8001dc8 <loadOctet+0x178>)
 8001cfe:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <loadOctet+0x188>)
 8001d00:	4615      	mov	r5, r2
 8001d02:	461c      	mov	r4, r3
 8001d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d06:	6028      	str	r0, [r5, #0]
 8001d08:	6069      	str	r1, [r5, #4]
 8001d0a:	60aa      	str	r2, [r5, #8]
 8001d0c:	60eb      	str	r3, [r5, #12]
 8001d0e:	cc03      	ldmia	r4!, {r0, r1}
 8001d10:	6128      	str	r0, [r5, #16]
 8001d12:	6169      	str	r1, [r5, #20]
 8001d14:	8823      	ldrh	r3, [r4, #0]
 8001d16:	78a2      	ldrb	r2, [r4, #2]
 8001d18:	832b      	strh	r3, [r5, #24]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d1e:	482a      	ldr	r0, [pc, #168]	; (8001dc8 <loadOctet+0x178>)
 8001d20:	f7fe fa76 	bl	8000210 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	230a      	movs	r3, #10
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <loadOctet+0x178>)
 8001d2c:	4827      	ldr	r0, [pc, #156]	; (8001dcc <loadOctet+0x17c>)
 8001d2e:	f003 fe90 	bl	8005a52 <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e02c      	b.n	8001d92 <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	f107 0220 	add.w	r2, r7, #32
 8001d42:	4413      	add	r3, r2
 8001d44:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	4619      	mov	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	440b      	add	r3, r1
 8001d54:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <loadOctet+0x18c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <loadOctet+0x18c>)
 8001d5e:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	491b      	ldr	r1, [pc, #108]	; (8001de0 <loadOctet+0x190>)
 8001d72:	4815      	ldr	r0, [pc, #84]	; (8001dc8 <loadOctet+0x178>)
 8001d74:	f004 fdae 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d78:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <loadOctet+0x178>)
 8001d7a:	f7fe fa49 	bl	8000210 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	230a      	movs	r3, #10
 8001d84:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <loadOctet+0x178>)
 8001d86:	4811      	ldr	r0, [pc, #68]	; (8001dcc <loadOctet+0x17c>)
 8001d88:	f003 fe63 	bl	8005a52 <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	ddcf      	ble.n	8001d38 <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <loadOctet+0x178>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <loadOctet+0x194>)
 8001d9c:	8811      	ldrh	r1, [r2, #0]
 8001d9e:	7892      	ldrb	r2, [r2, #2]
 8001da0:	8019      	strh	r1, [r3, #0]
 8001da2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001da4:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <loadOctet+0x178>)
 8001da6:	f7fe fa33 	bl	8000210 <strlen>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	230a      	movs	r3, #10
 8001db0:	4905      	ldr	r1, [pc, #20]	; (8001dc8 <loadOctet+0x178>)
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <loadOctet+0x17c>)
 8001db4:	f003 fe4d 	bl	8005a52 <HAL_UART_Transmit>
	}
	return isFlag;
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	080074f8 	.word	0x080074f8
 8001dc8:	20001cd8 	.word	0x20001cd8
 8001dcc:	20002b94 	.word	0x20002b94
 8001dd0:	08007508 	.word	0x08007508
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	08007518 	.word	0x08007518
 8001ddc:	200000a0 	.word	0x200000a0
 8001de0:	08007534 	.word	0x08007534
 8001de4:	0800753c 	.word	0x0800753c

08001de8 <streamGet>:
int streamGet() {
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b090      	sub	sp, #64	; 0x40
 8001dec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001dee:	4b88      	ldr	r3, [pc, #544]	; (8002010 <streamGet+0x228>)
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 8001df2:	f240 134b 	movw	r3, #331	; 0x14b
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8001df8:	e0fb      	b.n	8001ff2 <streamGet+0x20a>
		gotflag = false;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
 8001e04:	e011      	b.n	8001e2a <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	3301      	adds	r3, #1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e10:	4413      	add	r3, r2
 8001e12:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e1e:	440b      	add	r3, r1
 8001e20:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	3301      	adds	r3, #1
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	ddea      	ble.n	8001e06 <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8001e30:	f7ff fe9a 	bl	8001b68 <loadBit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	623b      	str	r3, [r7, #32]
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	e019      	b.n	8001e72 <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e46:	4413      	add	r3, r2
 8001e48:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e4c:	4971      	ldr	r1, [pc, #452]	; (8002014 <streamGet+0x22c>)
 8001e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e50:	440a      	add	r2, r1
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <streamGet+0x78>
				gotflag = false;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001e5e:	e00b      	b.n	8001e78 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	2b07      	cmp	r3, #7
 8001e64:	d102      	bne.n	8001e6c <streamGet+0x84>
				gotflag = true;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	dde2      	ble.n	8001e3e <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8001e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80b8 	beq.w	8001ff2 <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <streamGet+0x230>)
 8001e84:	4b65      	ldr	r3, [pc, #404]	; (800201c <streamGet+0x234>)
 8001e86:	4615      	mov	r5, r2
 8001e88:	461c      	mov	r4, r3
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	6028      	str	r0, [r5, #0]
 8001e8e:	6069      	str	r1, [r5, #4]
 8001e90:	60aa      	str	r2, [r5, #8]
 8001e92:	60eb      	str	r3, [r5, #12]
 8001e94:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e96:	6128      	str	r0, [r5, #16]
 8001e98:	6169      	str	r1, [r5, #20]
 8001e9a:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e9c:	485e      	ldr	r0, [pc, #376]	; (8002018 <streamGet+0x230>)
 8001e9e:	f7fe f9b7 	bl	8000210 <strlen>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	495b      	ldr	r1, [pc, #364]	; (8002018 <streamGet+0x230>)
 8001eaa:	485d      	ldr	r0, [pc, #372]	; (8002020 <streamGet+0x238>)
 8001eac:	f003 fdd1 	bl	8005a52 <HAL_UART_Transmit>
			octet_count  = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8001eb8:	e01a      	b.n	8001ef0 <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8001eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fec4 	bl	8001c50 <loadOctet>
 8001ec8:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ece:	4955      	ldr	r1, [pc, #340]	; (8002024 <streamGet+0x23c>)
 8001ed0:	4851      	ldr	r0, [pc, #324]	; (8002018 <streamGet+0x230>)
 8001ed2:	f004 fcff 	bl	80068d4 <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ed6:	4850      	ldr	r0, [pc, #320]	; (8002018 <streamGet+0x230>)
 8001ed8:	f7fe f99a 	bl	8000210 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	494d      	ldr	r1, [pc, #308]	; (8002018 <streamGet+0x230>)
 8001ee4:	484e      	ldr	r0, [pc, #312]	; (8002020 <streamGet+0x238>)
 8001ee6:	f003 fdb4 	bl	8005a52 <HAL_UART_Transmit>

				octet_count+=1;
 8001eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eec:	3301      	adds	r3, #1
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <streamGet+0x116>
 8001ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbdd      	blt.n	8001eba <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d012      	beq.n	8001f2a <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 8001f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f06:	4948      	ldr	r1, [pc, #288]	; (8002028 <streamGet+0x240>)
 8001f08:	4843      	ldr	r0, [pc, #268]	; (8002018 <streamGet+0x230>)
 8001f0a:	f004 fce3 	bl	80068d4 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f0e:	4842      	ldr	r0, [pc, #264]	; (8002018 <streamGet+0x230>)
 8001f10:	f7fe f97e 	bl	8000210 <strlen>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	230a      	movs	r3, #10
 8001f1a:	493f      	ldr	r1, [pc, #252]	; (8002018 <streamGet+0x230>)
 8001f1c:	4840      	ldr	r0, [pc, #256]	; (8002020 <streamGet+0x238>)
 8001f1e:	f003 fd98 	bl	8005a52 <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f28:	e063      	b.n	8001ff2 <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 8001f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	db12      	blt.n	8001f58 <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 8001f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f34:	493d      	ldr	r1, [pc, #244]	; (800202c <streamGet+0x244>)
 8001f36:	4838      	ldr	r0, [pc, #224]	; (8002018 <streamGet+0x230>)
 8001f38:	f004 fccc 	bl	80068d4 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f3c:	4836      	ldr	r0, [pc, #216]	; (8002018 <streamGet+0x230>)
 8001f3e:	f7fe f967 	bl	8000210 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	230a      	movs	r3, #10
 8001f48:	4933      	ldr	r1, [pc, #204]	; (8002018 <streamGet+0x230>)
 8001f4a:	4835      	ldr	r0, [pc, #212]	; (8002020 <streamGet+0x238>)
 8001f4c:	f003 fd81 	bl	8005a52 <HAL_UART_Transmit>
				gotflag = false;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f56:	e04c      	b.n	8001ff2 <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 8001f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d12d      	bne.n	8001fba <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <streamGet+0x230>)
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <streamGet+0x248>)
 8001f62:	4615      	mov	r5, r2
 8001f64:	461c      	mov	r4, r3
 8001f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f68:	6028      	str	r0, [r5, #0]
 8001f6a:	6069      	str	r1, [r5, #4]
 8001f6c:	60aa      	str	r2, [r5, #8]
 8001f6e:	60eb      	str	r3, [r5, #12]
 8001f70:	cc03      	ldmia	r4!, {r0, r1}
 8001f72:	6128      	str	r0, [r5, #16]
 8001f74:	6169      	str	r1, [r5, #20]
 8001f76:	8823      	ldrh	r3, [r4, #0]
 8001f78:	78a2      	ldrb	r2, [r4, #2]
 8001f7a:	832b      	strh	r3, [r5, #24]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f80:	4825      	ldr	r0, [pc, #148]	; (8002018 <streamGet+0x230>)
 8001f82:	f7fe f945 	bl	8000210 <strlen>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	4922      	ldr	r1, [pc, #136]	; (8002018 <streamGet+0x230>)
 8001f8e:	4824      	ldr	r0, [pc, #144]	; (8002020 <streamGet+0x238>)
 8001f90:	f003 fd5f 	bl	8005a52 <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 8001f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <streamGet+0x24c>)
 8001f98:	481f      	ldr	r0, [pc, #124]	; (8002018 <streamGet+0x230>)
 8001f9a:	f004 fc9b 	bl	80068d4 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f9e:	481e      	ldr	r0, [pc, #120]	; (8002018 <streamGet+0x230>)
 8001fa0:	f7fe f936 	bl	8000210 <strlen>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	230a      	movs	r3, #10
 8001faa:	491b      	ldr	r1, [pc, #108]	; (8002018 <streamGet+0x230>)
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <streamGet+0x238>)
 8001fae:	f003 fd50 	bl	8005a52 <HAL_UART_Transmit>
				gotflag = false;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001fb8:	e01b      	b.n	8001ff2 <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <streamGet+0x230>)
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <streamGet+0x250>)
 8001fbe:	4615      	mov	r5, r2
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	6028      	str	r0, [r5, #0]
 8001fc6:	6069      	str	r1, [r5, #4]
 8001fc8:	60aa      	str	r2, [r5, #8]
 8001fca:	60eb      	str	r3, [r5, #12]
 8001fcc:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001fce:	6128      	str	r0, [r5, #16]
 8001fd0:	6169      	str	r1, [r5, #20]
 8001fd2:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fd4:	4810      	ldr	r0, [pc, #64]	; (8002018 <streamGet+0x230>)
 8001fd6:	f7fe f91b 	bl	8000210 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	230a      	movs	r3, #10
 8001fe0:	490d      	ldr	r1, [pc, #52]	; (8002018 <streamGet+0x230>)
 8001fe2:	480f      	ldr	r0, [pc, #60]	; (8002020 <streamGet+0x238>)
 8001fe4:	f003 fd35 	bl	8005a52 <HAL_UART_Transmit>
				gotflag = false;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e009      	b.n	8002006 <streamGet+0x21e>
	while(!changeMode){
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <streamGet+0x254>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	f083 0301 	eor.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f aefc 	bne.w	8001dfa <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002006:	4618      	mov	r0, r3
 8002008:	3740      	adds	r7, #64	; 0x40
 800200a:	46bd      	mov	sp, r7
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	bf00      	nop
 8002010:	200000d4 	.word	0x200000d4
 8002014:	20000008 	.word	0x20000008
 8002018:	20001cd8 	.word	0x20001cd8
 800201c:	08007540 	.word	0x08007540
 8002020:	20002b94 	.word	0x20002b94
 8002024:	0800755c 	.word	0x0800755c
 8002028:	08007578 	.word	0x08007578
 800202c:	0800759c 	.word	0x0800759c
 8002030:	080075c0 	.word	0x080075c0
 8002034:	080075dc 	.word	0x080075dc
 8002038:	08007600 	.word	0x08007600
 800203c:	200000a5 	.word	0x200000a5

08002040 <print_AX25>:
 *  Created on: Nov 1, 2020
 *      Author: monke
 */
#include "debug.h"

void print_AX25(){
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	b08d      	sub	sp, #52	; 0x34
 8002044:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002046:	4b90      	ldr	r3, [pc, #576]	; (8002288 <print_AX25+0x248>)
 8002048:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002050:	330c      	adds	r3, #12
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <print_AX25+0x24c>)
 8002058:	4a8d      	ldr	r2, [pc, #564]	; (8002290 <print_AX25+0x250>)
 800205a:	4614      	mov	r4, r2
 800205c:	469c      	mov	ip, r3
 800205e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002062:	4665      	mov	r5, ip
 8002064:	4626      	mov	r6, r4
 8002066:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002068:	6028      	str	r0, [r5, #0]
 800206a:	6069      	str	r1, [r5, #4]
 800206c:	60aa      	str	r2, [r5, #8]
 800206e:	60eb      	str	r3, [r5, #12]
 8002070:	3410      	adds	r4, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	4574      	cmp	r4, lr
 8002078:	d1f3      	bne.n	8002062 <print_AX25+0x22>
 800207a:	4663      	mov	r3, ip
 800207c:	4622      	mov	r2, r4
 800207e:	6810      	ldr	r0, [r2, #0]
 8002080:	6018      	str	r0, [r3, #0]
 8002082:	8891      	ldrh	r1, [r2, #4]
 8002084:	7992      	ldrb	r2, [r2, #6]
 8002086:	8099      	strh	r1, [r3, #4]
 8002088:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800208a:	4880      	ldr	r0, [pc, #512]	; (800228c <print_AX25+0x24c>)
 800208c:	f7fe f8c0 	bl	8000210 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	230a      	movs	r3, #10
 8002096:	497d      	ldr	r1, [pc, #500]	; (800228c <print_AX25+0x24c>)
 8002098:	487e      	ldr	r0, [pc, #504]	; (8002294 <print_AX25+0x254>)
 800209a:	f003 fcda 	bl	8005a52 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->AX25_PACKET) + address_len - 1;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	336f      	adds	r3, #111	; 0x6f
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a8:	e041      	b.n	800212e <print_AX25+0xee>
		sprintf(uartData, "Address Field %d =",i+1);
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	3301      	adds	r3, #1
 80020ae:	461a      	mov	r2, r3
 80020b0:	4979      	ldr	r1, [pc, #484]	; (8002298 <print_AX25+0x258>)
 80020b2:	4876      	ldr	r0, [pc, #472]	; (800228c <print_AX25+0x24c>)
 80020b4:	f004 fc0e 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020b8:	4874      	ldr	r0, [pc, #464]	; (800228c <print_AX25+0x24c>)
 80020ba:	f7fe f8a9 	bl	8000210 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	230a      	movs	r3, #10
 80020c4:	4971      	ldr	r1, [pc, #452]	; (800228c <print_AX25+0x24c>)
 80020c6:	4873      	ldr	r0, [pc, #460]	; (8002294 <print_AX25+0x254>)
 80020c8:	f003 fcc3 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	e016      	b.n	8002100 <print_AX25+0xc0>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	425b      	negs	r3, r3
 80020d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	496f      	ldr	r1, [pc, #444]	; (800229c <print_AX25+0x25c>)
 80020e0:	486a      	ldr	r0, [pc, #424]	; (800228c <print_AX25+0x24c>)
 80020e2:	f004 fbf7 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020e6:	4869      	ldr	r0, [pc, #420]	; (800228c <print_AX25+0x24c>)
 80020e8:	f7fe f892 	bl	8000210 <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	230a      	movs	r3, #10
 80020f2:	4966      	ldr	r1, [pc, #408]	; (800228c <print_AX25+0x24c>)
 80020f4:	4867      	ldr	r0, [pc, #412]	; (8002294 <print_AX25+0x254>)
 80020f6:	f003 fcac 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	2b07      	cmp	r3, #7
 8002104:	dde5      	ble.n	80020d2 <print_AX25+0x92>
		}
		curr_mem -= 8;
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	3b08      	subs	r3, #8
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800210c:	4a5f      	ldr	r2, [pc, #380]	; (800228c <print_AX25+0x24c>)
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <print_AX25+0x260>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002114:	485d      	ldr	r0, [pc, #372]	; (800228c <print_AX25+0x24c>)
 8002116:	f7fe f87b 	bl	8000210 <strlen>
 800211a:	4603      	mov	r3, r0
 800211c:	b29a      	uxth	r2, r3
 800211e:	230a      	movs	r3, #10
 8002120:	495a      	ldr	r1, [pc, #360]	; (800228c <print_AX25+0x24c>)
 8002122:	485c      	ldr	r0, [pc, #368]	; (8002294 <print_AX25+0x254>)
 8002124:	f003 fc95 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	3301      	adds	r3, #1
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	2b0d      	cmp	r3, #13
 8002132:	ddba      	ble.n	80020aa <print_AX25+0x6a>
	}

	//Print Control Field
	curr_mem += address_len;//Subtract 8 to start at the flag start
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	3370      	adds	r3, #112	; 0x70
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 800213a:	4a54      	ldr	r2, [pc, #336]	; (800228c <print_AX25+0x24c>)
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <print_AX25+0x264>)
 800213e:	4615      	mov	r5, r2
 8002140:	461c      	mov	r4, r3
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	6028      	str	r0, [r5, #0]
 8002146:	6069      	str	r1, [r5, #4]
 8002148:	60aa      	str	r2, [r5, #8]
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	8823      	ldrh	r3, [r4, #0]
 800214e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002150:	484e      	ldr	r0, [pc, #312]	; (800228c <print_AX25+0x24c>)
 8002152:	f7fe f85d 	bl	8000210 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	b29a      	uxth	r2, r3
 800215a:	230a      	movs	r3, #10
 800215c:	494b      	ldr	r1, [pc, #300]	; (800228c <print_AX25+0x24c>)
 800215e:	484d      	ldr	r0, [pc, #308]	; (8002294 <print_AX25+0x254>)
 8002160:	f003 fc77 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
 8002168:	e017      	b.n	800219a <print_AX25+0x15a>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f1c3 0307 	rsb	r3, r3, #7
 8002170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	4948      	ldr	r1, [pc, #288]	; (800229c <print_AX25+0x25c>)
 800217a:	4844      	ldr	r0, [pc, #272]	; (800228c <print_AX25+0x24c>)
 800217c:	f004 fbaa 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002180:	4842      	ldr	r0, [pc, #264]	; (800228c <print_AX25+0x24c>)
 8002182:	f7fe f845 	bl	8000210 <strlen>
 8002186:	4603      	mov	r3, r0
 8002188:	b29a      	uxth	r2, r3
 800218a:	230a      	movs	r3, #10
 800218c:	493f      	ldr	r1, [pc, #252]	; (800228c <print_AX25+0x24c>)
 800218e:	4841      	ldr	r0, [pc, #260]	; (8002294 <print_AX25+0x254>)
 8002190:	f003 fc5f 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	3301      	adds	r3, #1
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	2b07      	cmp	r3, #7
 800219e:	dde4      	ble.n	800216a <print_AX25+0x12a>
	}
	sprintf(uartData, "\n");
 80021a0:	4a3a      	ldr	r2, [pc, #232]	; (800228c <print_AX25+0x24c>)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <print_AX25+0x260>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021a8:	4838      	ldr	r0, [pc, #224]	; (800228c <print_AX25+0x24c>)
 80021aa:	f7fe f831 	bl	8000210 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	230a      	movs	r3, #10
 80021b4:	4935      	ldr	r1, [pc, #212]	; (800228c <print_AX25+0x24c>)
 80021b6:	4837      	ldr	r0, [pc, #220]	; (8002294 <print_AX25+0x254>)
 80021b8:	f003 fc4b 	bl	8005a52 <HAL_UART_Transmit>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	3308      	adds	r3, #8
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 80021c2:	4a32      	ldr	r2, [pc, #200]	; (800228c <print_AX25+0x24c>)
 80021c4:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <print_AX25+0x268>)
 80021c6:	4615      	mov	r5, r2
 80021c8:	461c      	mov	r4, r3
 80021ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021cc:	6028      	str	r0, [r5, #0]
 80021ce:	6069      	str	r1, [r5, #4]
 80021d0:	60aa      	str	r2, [r5, #8]
 80021d2:	60eb      	str	r3, [r5, #12]
 80021d4:	8823      	ldrh	r3, [r4, #0]
 80021d6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021d8:	482c      	ldr	r0, [pc, #176]	; (800228c <print_AX25+0x24c>)
 80021da:	f7fe f819 	bl	8000210 <strlen>
 80021de:	4603      	mov	r3, r0
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	230a      	movs	r3, #10
 80021e4:	4929      	ldr	r1, [pc, #164]	; (800228c <print_AX25+0x24c>)
 80021e6:	482b      	ldr	r0, [pc, #172]	; (8002294 <print_AX25+0x254>)
 80021e8:	f003 fc33 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	e017      	b.n	8002222 <print_AX25+0x1e2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f1c3 0307 	rsb	r3, r3, #7
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4926      	ldr	r1, [pc, #152]	; (800229c <print_AX25+0x25c>)
 8002202:	4822      	ldr	r0, [pc, #136]	; (800228c <print_AX25+0x24c>)
 8002204:	f004 fb66 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002208:	4820      	ldr	r0, [pc, #128]	; (800228c <print_AX25+0x24c>)
 800220a:	f7fe f801 	bl	8000210 <strlen>
 800220e:	4603      	mov	r3, r0
 8002210:	b29a      	uxth	r2, r3
 8002212:	230a      	movs	r3, #10
 8002214:	491d      	ldr	r1, [pc, #116]	; (800228c <print_AX25+0x24c>)
 8002216:	481f      	ldr	r0, [pc, #124]	; (8002294 <print_AX25+0x254>)
 8002218:	f003 fc1b 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3301      	adds	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	2b07      	cmp	r3, #7
 8002226:	dde4      	ble.n	80021f2 <print_AX25+0x1b2>
	}
	sprintf(uartData, "\n");
 8002228:	4a18      	ldr	r2, [pc, #96]	; (800228c <print_AX25+0x24c>)
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <print_AX25+0x260>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002230:	4816      	ldr	r0, [pc, #88]	; (800228c <print_AX25+0x24c>)
 8002232:	f7fd ffed 	bl	8000210 <strlen>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	230a      	movs	r3, #10
 800223c:	4913      	ldr	r1, [pc, #76]	; (800228c <print_AX25+0x24c>)
 800223e:	4815      	ldr	r0, [pc, #84]	; (8002294 <print_AX25+0x254>)
 8002240:	f003 fc07 	bl	8005a52 <HAL_UART_Transmit>
	curr_mem += PID_len;
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	3308      	adds	r3, #8
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Print Info Field
	curr_mem += local_packet->Info_Len - 1;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3b01      	subs	r3, #1
 8002254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002256:	4413      	add	r3, r2
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e055      	b.n	800230c <print_AX25+0x2cc>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3301      	adds	r3, #1
 8002264:	461a      	mov	r2, r3
 8002266:	4911      	ldr	r1, [pc, #68]	; (80022ac <print_AX25+0x26c>)
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <print_AX25+0x24c>)
 800226a:	f004 fb33 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <print_AX25+0x24c>)
 8002270:	f7fd ffce 	bl	8000210 <strlen>
 8002274:	4603      	mov	r3, r0
 8002276:	b29a      	uxth	r2, r3
 8002278:	230a      	movs	r3, #10
 800227a:	4904      	ldr	r1, [pc, #16]	; (800228c <print_AX25+0x24c>)
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <print_AX25+0x254>)
 800227e:	f003 fbe8 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e02a      	b.n	80022de <print_AX25+0x29e>
 8002288:	200000d4 	.word	0x200000d4
 800228c:	20001cd8 	.word	0x20001cd8
 8002290:	0800761c 	.word	0x0800761c
 8002294:	20002b94 	.word	0x20002b94
 8002298:	08007654 	.word	0x08007654
 800229c:	08007668 	.word	0x08007668
 80022a0:	08007670 	.word	0x08007670
 80022a4:	08007674 	.word	0x08007674
 80022a8:	08007688 	.word	0x08007688
 80022ac:	0800769c 	.word	0x0800769c
			sprintf(uartData, " %d ",*(curr_mem-j));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	425b      	negs	r3, r3
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4945      	ldr	r1, [pc, #276]	; (80023d4 <print_AX25+0x394>)
 80022be:	4846      	ldr	r0, [pc, #280]	; (80023d8 <print_AX25+0x398>)
 80022c0:	f004 fb08 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022c4:	4844      	ldr	r0, [pc, #272]	; (80023d8 <print_AX25+0x398>)
 80022c6:	f7fd ffa3 	bl	8000210 <strlen>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	230a      	movs	r3, #10
 80022d0:	4941      	ldr	r1, [pc, #260]	; (80023d8 <print_AX25+0x398>)
 80022d2:	4842      	ldr	r0, [pc, #264]	; (80023dc <print_AX25+0x39c>)
 80022d4:	f003 fbbd 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b07      	cmp	r3, #7
 80022e2:	dde5      	ble.n	80022b0 <print_AX25+0x270>
		}
		curr_mem -= 8;
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	3b08      	subs	r3, #8
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80022ea:	4a3b      	ldr	r2, [pc, #236]	; (80023d8 <print_AX25+0x398>)
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <print_AX25+0x3a0>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022f2:	4839      	ldr	r0, [pc, #228]	; (80023d8 <print_AX25+0x398>)
 80022f4:	f7fd ff8c 	bl	8000210 <strlen>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	230a      	movs	r3, #10
 80022fe:	4936      	ldr	r1, [pc, #216]	; (80023d8 <print_AX25+0x398>)
 8002300:	4836      	ldr	r0, [pc, #216]	; (80023dc <print_AX25+0x39c>)
 8002302:	f003 fba6 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	3301      	adds	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da00      	bge.n	800231a <print_AX25+0x2da>
 8002318:	3307      	adds	r3, #7
 800231a:	10db      	asrs	r3, r3, #3
 800231c:	461a      	mov	r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4293      	cmp	r3, r2
 8002322:	db9d      	blt.n	8002260 <print_AX25+0x220>
	}
	curr_mem += local_packet->Info_Len;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	4413      	add	r3, r2
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c

	curr_mem += FCS_len - 8;
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	3308      	adds	r3, #8
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e042      	b.n	80023c6 <print_AX25+0x386>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	3301      	adds	r3, #1
 8002344:	461a      	mov	r2, r3
 8002346:	4927      	ldr	r1, [pc, #156]	; (80023e4 <print_AX25+0x3a4>)
 8002348:	4823      	ldr	r0, [pc, #140]	; (80023d8 <print_AX25+0x398>)
 800234a:	f004 fac3 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800234e:	4822      	ldr	r0, [pc, #136]	; (80023d8 <print_AX25+0x398>)
 8002350:	f7fd ff5e 	bl	8000210 <strlen>
 8002354:	4603      	mov	r3, r0
 8002356:	b29a      	uxth	r2, r3
 8002358:	230a      	movs	r3, #10
 800235a:	491f      	ldr	r1, [pc, #124]	; (80023d8 <print_AX25+0x398>)
 800235c:	481f      	ldr	r0, [pc, #124]	; (80023dc <print_AX25+0x39c>)
 800235e:	f003 fb78 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e017      	b.n	8002398 <print_AX25+0x358>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4917      	ldr	r1, [pc, #92]	; (80023d4 <print_AX25+0x394>)
 8002378:	4817      	ldr	r0, [pc, #92]	; (80023d8 <print_AX25+0x398>)
 800237a:	f004 faab 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800237e:	4816      	ldr	r0, [pc, #88]	; (80023d8 <print_AX25+0x398>)
 8002380:	f7fd ff46 	bl	8000210 <strlen>
 8002384:	4603      	mov	r3, r0
 8002386:	b29a      	uxth	r2, r3
 8002388:	230a      	movs	r3, #10
 800238a:	4913      	ldr	r1, [pc, #76]	; (80023d8 <print_AX25+0x398>)
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <print_AX25+0x39c>)
 800238e:	f003 fb60 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3301      	adds	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b07      	cmp	r3, #7
 800239c:	dde4      	ble.n	8002368 <print_AX25+0x328>
		}
		curr_mem -= 8;
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	3b08      	subs	r3, #8
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <print_AX25+0x398>)
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <print_AX25+0x3a0>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80023ac:	480a      	ldr	r0, [pc, #40]	; (80023d8 <print_AX25+0x398>)
 80023ae:	f7fd ff2f 	bl	8000210 <strlen>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	230a      	movs	r3, #10
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <print_AX25+0x398>)
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <print_AX25+0x39c>)
 80023bc:	f003 fb49 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	3301      	adds	r3, #1
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	ddb9      	ble.n	8002340 <print_AX25+0x300>
	}
}
 80023cc:	bf00      	nop
 80023ce:	3734      	adds	r7, #52	; 0x34
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	08007668 	.word	0x08007668
 80023d8:	20001cd8 	.word	0x20001cd8
 80023dc:	20002b94 	.word	0x20002b94
 80023e0:	08007670 	.word	0x08007670
 80023e4:	080076b0 	.word	0x080076b0

080023e8 <print_outAX25>:

void print_outAX25(){
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	b08d      	sub	sp, #52	; 0x34
 80023ec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80023ee:	4b9b      	ldr	r3, [pc, #620]	; (800265c <print_outAX25+0x274>)
 80023f0:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80023f8:	330c      	adds	r3, #12
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 80023fe:	4b98      	ldr	r3, [pc, #608]	; (8002660 <print_outAX25+0x278>)
 8002400:	4a98      	ldr	r2, [pc, #608]	; (8002664 <print_outAX25+0x27c>)
 8002402:	4614      	mov	r4, r2
 8002404:	469c      	mov	ip, r3
 8002406:	f104 0e20 	add.w	lr, r4, #32
 800240a:	4665      	mov	r5, ip
 800240c:	4626      	mov	r6, r4
 800240e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002410:	6028      	str	r0, [r5, #0]
 8002412:	6069      	str	r1, [r5, #4]
 8002414:	60aa      	str	r2, [r5, #8]
 8002416:	60eb      	str	r3, [r5, #12]
 8002418:	3410      	adds	r4, #16
 800241a:	f10c 0c10 	add.w	ip, ip, #16
 800241e:	4574      	cmp	r4, lr
 8002420:	d1f3      	bne.n	800240a <print_outAX25+0x22>
 8002422:	4662      	mov	r2, ip
 8002424:	4623      	mov	r3, r4
 8002426:	cb03      	ldmia	r3!, {r0, r1}
 8002428:	6010      	str	r0, [r2, #0]
 800242a:	6051      	str	r1, [r2, #4]
 800242c:	8819      	ldrh	r1, [r3, #0]
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	8111      	strh	r1, [r2, #8]
 8002432:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002434:	488a      	ldr	r0, [pc, #552]	; (8002660 <print_outAX25+0x278>)
 8002436:	f7fd feeb 	bl	8000210 <strlen>
 800243a:	4603      	mov	r3, r0
 800243c:	b29a      	uxth	r2, r3
 800243e:	230a      	movs	r3, #10
 8002440:	4987      	ldr	r1, [pc, #540]	; (8002660 <print_outAX25+0x278>)
 8002442:	4889      	ldr	r0, [pc, #548]	; (8002668 <print_outAX25+0x280>)
 8002444:	f003 fb05 	bl	8005a52 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = local_packet->address;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800244e:	3310      	adds	r3, #16
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002454:	2300      	movs	r3, #0
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
 8002458:	e040      	b.n	80024dc <print_outAX25+0xf4>
		sprintf(uartData, "Address Field %d =",i+1);
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	3301      	adds	r3, #1
 800245e:	461a      	mov	r2, r3
 8002460:	4982      	ldr	r1, [pc, #520]	; (800266c <print_outAX25+0x284>)
 8002462:	487f      	ldr	r0, [pc, #508]	; (8002660 <print_outAX25+0x278>)
 8002464:	f004 fa36 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002468:	487d      	ldr	r0, [pc, #500]	; (8002660 <print_outAX25+0x278>)
 800246a:	f7fd fed1 	bl	8000210 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	b29a      	uxth	r2, r3
 8002472:	230a      	movs	r3, #10
 8002474:	497a      	ldr	r1, [pc, #488]	; (8002660 <print_outAX25+0x278>)
 8002476:	487c      	ldr	r0, [pc, #496]	; (8002668 <print_outAX25+0x280>)
 8002478:	f003 faeb 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	e015      	b.n	80024ae <print_outAX25+0xc6>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	4978      	ldr	r1, [pc, #480]	; (8002670 <print_outAX25+0x288>)
 800248e:	4874      	ldr	r0, [pc, #464]	; (8002660 <print_outAX25+0x278>)
 8002490:	f004 fa20 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002494:	4872      	ldr	r0, [pc, #456]	; (8002660 <print_outAX25+0x278>)
 8002496:	f7fd febb 	bl	8000210 <strlen>
 800249a:	4603      	mov	r3, r0
 800249c:	b29a      	uxth	r2, r3
 800249e:	230a      	movs	r3, #10
 80024a0:	496f      	ldr	r1, [pc, #444]	; (8002660 <print_outAX25+0x278>)
 80024a2:	4871      	ldr	r0, [pc, #452]	; (8002668 <print_outAX25+0x280>)
 80024a4:	f003 fad5 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	3301      	adds	r3, #1
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	dde6      	ble.n	8002482 <print_outAX25+0x9a>
		}
		curr_mem += 8;
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	3308      	adds	r3, #8
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80024ba:	4a69      	ldr	r2, [pc, #420]	; (8002660 <print_outAX25+0x278>)
 80024bc:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <print_outAX25+0x28c>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80024c2:	4867      	ldr	r0, [pc, #412]	; (8002660 <print_outAX25+0x278>)
 80024c4:	f7fd fea4 	bl	8000210 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	230a      	movs	r3, #10
 80024ce:	4964      	ldr	r1, [pc, #400]	; (8002660 <print_outAX25+0x278>)
 80024d0:	4865      	ldr	r0, [pc, #404]	; (8002668 <print_outAX25+0x280>)
 80024d2:	f003 fabe 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	3301      	adds	r3, #1
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	ddbb      	ble.n	800245a <print_outAX25+0x72>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 80024e2:	4a5f      	ldr	r2, [pc, #380]	; (8002660 <print_outAX25+0x278>)
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <print_outAX25+0x290>)
 80024e6:	4614      	mov	r4, r2
 80024e8:	461d      	mov	r5, r3
 80024ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ec:	6020      	str	r0, [r4, #0]
 80024ee:	6061      	str	r1, [r4, #4]
 80024f0:	60a2      	str	r2, [r4, #8]
 80024f2:	60e3      	str	r3, [r4, #12]
 80024f4:	6828      	ldr	r0, [r5, #0]
 80024f6:	6120      	str	r0, [r4, #16]
 80024f8:	88ab      	ldrh	r3, [r5, #4]
 80024fa:	79aa      	ldrb	r2, [r5, #6]
 80024fc:	82a3      	strh	r3, [r4, #20]
 80024fe:	4613      	mov	r3, r2
 8002500:	75a3      	strb	r3, [r4, #22]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002502:	4857      	ldr	r0, [pc, #348]	; (8002660 <print_outAX25+0x278>)
 8002504:	f7fd fe84 	bl	8000210 <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	b29a      	uxth	r2, r3
 800250c:	230a      	movs	r3, #10
 800250e:	4954      	ldr	r1, [pc, #336]	; (8002660 <print_outAX25+0x278>)
 8002510:	4855      	ldr	r0, [pc, #340]	; (8002668 <print_outAX25+0x280>)
 8002512:	f003 fa9e 	bl	8005a52 <HAL_UART_Transmit>
	curr_mem += address_len;
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	3370      	adds	r3, #112	; 0x70
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002522:	3310      	adds	r3, #16
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	dd21      	ble.n	800256e <print_outAX25+0x186>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	e016      	b.n	800255e <print_outAX25+0x176>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	425b      	negs	r3, r3
 8002534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	494c      	ldr	r1, [pc, #304]	; (8002670 <print_outAX25+0x288>)
 800253e:	4848      	ldr	r0, [pc, #288]	; (8002660 <print_outAX25+0x278>)
 8002540:	f004 f9c8 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002544:	4846      	ldr	r0, [pc, #280]	; (8002660 <print_outAX25+0x278>)
 8002546:	f7fd fe63 	bl	8000210 <strlen>
 800254a:	4603      	mov	r3, r0
 800254c:	b29a      	uxth	r2, r3
 800254e:	230a      	movs	r3, #10
 8002550:	4943      	ldr	r1, [pc, #268]	; (8002660 <print_outAX25+0x278>)
 8002552:	4845      	ldr	r0, [pc, #276]	; (8002668 <print_outAX25+0x280>)
 8002554:	f003 fa7d 	bl	8005a52 <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	3301      	adds	r3, #1
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002564:	3310      	adds	r3, #16
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a3a      	ldr	r2, [r7, #32]
 800256a:	429a      	cmp	r2, r3
 800256c:	dbe0      	blt.n	8002530 <print_outAX25+0x148>
		}
	}
	sprintf(uartData, "\n");
 800256e:	4a3c      	ldr	r2, [pc, #240]	; (8002660 <print_outAX25+0x278>)
 8002570:	4b40      	ldr	r3, [pc, #256]	; (8002674 <print_outAX25+0x28c>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002576:	483a      	ldr	r0, [pc, #232]	; (8002660 <print_outAX25+0x278>)
 8002578:	f7fd fe4a 	bl	8000210 <strlen>
 800257c:	4603      	mov	r3, r0
 800257e:	b29a      	uxth	r2, r3
 8002580:	230a      	movs	r3, #10
 8002582:	4937      	ldr	r1, [pc, #220]	; (8002660 <print_outAX25+0x278>)
 8002584:	4838      	ldr	r0, [pc, #224]	; (8002668 <print_outAX25+0x280>)
 8002586:	f003 fa64 	bl	8005a52 <HAL_UART_Transmit>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002590:	3314      	adds	r3, #20
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002596:	4a32      	ldr	r2, [pc, #200]	; (8002660 <print_outAX25+0x278>)
 8002598:	4b38      	ldr	r3, [pc, #224]	; (800267c <print_outAX25+0x294>)
 800259a:	4615      	mov	r5, r2
 800259c:	461c      	mov	r4, r3
 800259e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a0:	6028      	str	r0, [r5, #0]
 80025a2:	6069      	str	r1, [r5, #4]
 80025a4:	60aa      	str	r2, [r5, #8]
 80025a6:	60eb      	str	r3, [r5, #12]
 80025a8:	8823      	ldrh	r3, [r4, #0]
 80025aa:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80025ac:	482c      	ldr	r0, [pc, #176]	; (8002660 <print_outAX25+0x278>)
 80025ae:	f7fd fe2f 	bl	8000210 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	230a      	movs	r3, #10
 80025b8:	4929      	ldr	r1, [pc, #164]	; (8002660 <print_outAX25+0x278>)
 80025ba:	482b      	ldr	r0, [pc, #172]	; (8002668 <print_outAX25+0x280>)
 80025bc:	f003 fa49 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	e015      	b.n	80025f2 <print_outAX25+0x20a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4927      	ldr	r1, [pc, #156]	; (8002670 <print_outAX25+0x288>)
 80025d2:	4823      	ldr	r0, [pc, #140]	; (8002660 <print_outAX25+0x278>)
 80025d4:	f004 f97e 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <print_outAX25+0x278>)
 80025da:	f7fd fe19 	bl	8000210 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	230a      	movs	r3, #10
 80025e4:	491e      	ldr	r1, [pc, #120]	; (8002660 <print_outAX25+0x278>)
 80025e6:	4820      	ldr	r0, [pc, #128]	; (8002668 <print_outAX25+0x280>)
 80025e8:	f003 fa33 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	3301      	adds	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80025f8:	3314      	adds	r3, #20
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3308      	adds	r3, #8
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbe0      	blt.n	80025c6 <print_outAX25+0x1de>
	}
	sprintf(uartData, "\n");
 8002604:	4a16      	ldr	r2, [pc, #88]	; (8002660 <print_outAX25+0x278>)
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <print_outAX25+0x28c>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800260c:	4814      	ldr	r0, [pc, #80]	; (8002660 <print_outAX25+0x278>)
 800260e:	f7fd fdff 	bl	8000210 <strlen>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	230a      	movs	r3, #10
 8002618:	4911      	ldr	r1, [pc, #68]	; (8002660 <print_outAX25+0x278>)
 800261a:	4813      	ldr	r0, [pc, #76]	; (8002668 <print_outAX25+0x280>)
 800261c:	f003 fa19 	bl	8005a52 <HAL_UART_Transmit>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002626:	3318      	adds	r3, #24
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <print_outAX25+0x278>)
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <print_outAX25+0x298>)
 8002630:	4615      	mov	r5, r2
 8002632:	461c      	mov	r4, r3
 8002634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002636:	6028      	str	r0, [r5, #0]
 8002638:	6069      	str	r1, [r5, #4]
 800263a:	60aa      	str	r2, [r5, #8]
 800263c:	60eb      	str	r3, [r5, #12]
 800263e:	8823      	ldrh	r3, [r4, #0]
 8002640:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <print_outAX25+0x278>)
 8002644:	f7fd fde4 	bl	8000210 <strlen>
 8002648:	4603      	mov	r3, r0
 800264a:	b29a      	uxth	r2, r3
 800264c:	230a      	movs	r3, #10
 800264e:	4904      	ldr	r1, [pc, #16]	; (8002660 <print_outAX25+0x278>)
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <print_outAX25+0x280>)
 8002652:	f003 f9fe 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e029      	b.n	80026b0 <print_outAX25+0x2c8>
 800265c:	200000d4 	.word	0x200000d4
 8002660:	20001cd8 	.word	0x20001cd8
 8002664:	080076c4 	.word	0x080076c4
 8002668:	20002b94 	.word	0x20002b94
 800266c:	08007654 	.word	0x08007654
 8002670:	08007668 	.word	0x08007668
 8002674:	08007670 	.word	0x08007670
 8002678:	080076f0 	.word	0x080076f0
 800267c:	08007674 	.word	0x08007674
 8002680:	08007688 	.word	0x08007688
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002688:	4413      	add	r3, r2
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	49a5      	ldr	r1, [pc, #660]	; (8002924 <print_outAX25+0x53c>)
 8002690:	48a5      	ldr	r0, [pc, #660]	; (8002928 <print_outAX25+0x540>)
 8002692:	f004 f91f 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002696:	48a4      	ldr	r0, [pc, #656]	; (8002928 <print_outAX25+0x540>)
 8002698:	f7fd fdba 	bl	8000210 <strlen>
 800269c:	4603      	mov	r3, r0
 800269e:	b29a      	uxth	r2, r3
 80026a0:	230a      	movs	r3, #10
 80026a2:	49a1      	ldr	r1, [pc, #644]	; (8002928 <print_outAX25+0x540>)
 80026a4:	48a1      	ldr	r0, [pc, #644]	; (800292c <print_outAX25+0x544>)
 80026a6:	f003 f9d4 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80026b6:	3318      	adds	r3, #24
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3308      	adds	r3, #8
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	429a      	cmp	r2, r3
 80026c0:	dbe0      	blt.n	8002684 <print_outAX25+0x29c>
	}
	sprintf(uartData, "\n");
 80026c2:	4a99      	ldr	r2, [pc, #612]	; (8002928 <print_outAX25+0x540>)
 80026c4:	4b9a      	ldr	r3, [pc, #616]	; (8002930 <print_outAX25+0x548>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026ca:	4897      	ldr	r0, [pc, #604]	; (8002928 <print_outAX25+0x540>)
 80026cc:	f7fd fda0 	bl	8000210 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	230a      	movs	r3, #10
 80026d6:	4994      	ldr	r1, [pc, #592]	; (8002928 <print_outAX25+0x540>)
 80026d8:	4894      	ldr	r0, [pc, #592]	; (800292c <print_outAX25+0x544>)
 80026da:	f003 f9ba 	bl	8005a52 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = local_packet->Info;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80026e4:	331c      	adds	r3, #28
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e040      	b.n	8002772 <print_outAX25+0x38a>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3301      	adds	r3, #1
 80026f4:	461a      	mov	r2, r3
 80026f6:	498f      	ldr	r1, [pc, #572]	; (8002934 <print_outAX25+0x54c>)
 80026f8:	488b      	ldr	r0, [pc, #556]	; (8002928 <print_outAX25+0x540>)
 80026fa:	f004 f8eb 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026fe:	488a      	ldr	r0, [pc, #552]	; (8002928 <print_outAX25+0x540>)
 8002700:	f7fd fd86 	bl	8000210 <strlen>
 8002704:	4603      	mov	r3, r0
 8002706:	b29a      	uxth	r2, r3
 8002708:	230a      	movs	r3, #10
 800270a:	4987      	ldr	r1, [pc, #540]	; (8002928 <print_outAX25+0x540>)
 800270c:	4887      	ldr	r0, [pc, #540]	; (800292c <print_outAX25+0x544>)
 800270e:	f003 f9a0 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e015      	b.n	8002744 <print_outAX25+0x35c>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4980      	ldr	r1, [pc, #512]	; (8002924 <print_outAX25+0x53c>)
 8002724:	4880      	ldr	r0, [pc, #512]	; (8002928 <print_outAX25+0x540>)
 8002726:	f004 f8d5 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800272a:	487f      	ldr	r0, [pc, #508]	; (8002928 <print_outAX25+0x540>)
 800272c:	f7fd fd70 	bl	8000210 <strlen>
 8002730:	4603      	mov	r3, r0
 8002732:	b29a      	uxth	r2, r3
 8002734:	230a      	movs	r3, #10
 8002736:	497c      	ldr	r1, [pc, #496]	; (8002928 <print_outAX25+0x540>)
 8002738:	487c      	ldr	r0, [pc, #496]	; (800292c <print_outAX25+0x544>)
 800273a:	f003 f98a 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	3301      	adds	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b07      	cmp	r3, #7
 8002748:	dde6      	ble.n	8002718 <print_outAX25+0x330>
		}
		curr_mem += 8;
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	3308      	adds	r3, #8
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002750:	4a75      	ldr	r2, [pc, #468]	; (8002928 <print_outAX25+0x540>)
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <print_outAX25+0x548>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002758:	4873      	ldr	r0, [pc, #460]	; (8002928 <print_outAX25+0x540>)
 800275a:	f7fd fd59 	bl	8000210 <strlen>
 800275e:	4603      	mov	r3, r0
 8002760:	b29a      	uxth	r2, r3
 8002762:	230a      	movs	r3, #10
 8002764:	4970      	ldr	r1, [pc, #448]	; (8002928 <print_outAX25+0x540>)
 8002766:	4871      	ldr	r0, [pc, #452]	; (800292c <print_outAX25+0x544>)
 8002768:	f003 f973 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	da00      	bge.n	8002780 <print_outAX25+0x398>
 800277e:	3307      	adds	r3, #7
 8002780:	10db      	asrs	r3, r3, #3
 8002782:	461a      	mov	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4293      	cmp	r3, r2
 8002788:	dbb2      	blt.n	80026f0 <print_outAX25+0x308>
	}

	//if Info was bitstuffed then print rest of address field
	curr_mem = local_packet->Info + local_packet->Info_Len;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002790:	331c      	adds	r3, #28
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	4413      	add	r3, r2
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Info Field extra = ");
 80027a0:	4a61      	ldr	r2, [pc, #388]	; (8002928 <print_outAX25+0x540>)
 80027a2:	4b65      	ldr	r3, [pc, #404]	; (8002938 <print_outAX25+0x550>)
 80027a4:	4615      	mov	r5, r2
 80027a6:	461c      	mov	r4, r3
 80027a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027aa:	6028      	str	r0, [r5, #0]
 80027ac:	6069      	str	r1, [r5, #4]
 80027ae:	60aa      	str	r2, [r5, #8]
 80027b0:	60eb      	str	r3, [r5, #12]
 80027b2:	6820      	ldr	r0, [r4, #0]
 80027b4:	6128      	str	r0, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027b6:	485c      	ldr	r0, [pc, #368]	; (8002928 <print_outAX25+0x540>)
 80027b8:	f7fd fd2a 	bl	8000210 <strlen>
 80027bc:	4603      	mov	r3, r0
 80027be:	b29a      	uxth	r2, r3
 80027c0:	230a      	movs	r3, #10
 80027c2:	4959      	ldr	r1, [pc, #356]	; (8002928 <print_outAX25+0x540>)
 80027c4:	4859      	ldr	r0, [pc, #356]	; (800292c <print_outAX25+0x544>)
 80027c6:	f003 f944 	bl	8005a52 <HAL_UART_Transmit>
	curr_mem += local_packet->Info_Len;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	4413      	add	r3, r2
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_Info > 0){
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80027e0:	331c      	adds	r3, #28
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	dd20      	ble.n	800282a <print_outAX25+0x442>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e015      	b.n	800281a <print_outAX25+0x432>
			sprintf(uartData, " %d ",*(curr_mem+i));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	4413      	add	r3, r2
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	494a      	ldr	r1, [pc, #296]	; (8002924 <print_outAX25+0x53c>)
 80027fa:	484b      	ldr	r0, [pc, #300]	; (8002928 <print_outAX25+0x540>)
 80027fc:	f004 f86a 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002800:	4849      	ldr	r0, [pc, #292]	; (8002928 <print_outAX25+0x540>)
 8002802:	f7fd fd05 	bl	8000210 <strlen>
 8002806:	4603      	mov	r3, r0
 8002808:	b29a      	uxth	r2, r3
 800280a:	230a      	movs	r3, #10
 800280c:	4946      	ldr	r1, [pc, #280]	; (8002928 <print_outAX25+0x540>)
 800280e:	4847      	ldr	r0, [pc, #284]	; (800292c <print_outAX25+0x544>)
 8002810:	f003 f91f 	bl	8005a52 <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002820:	331c      	adds	r3, #28
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	429a      	cmp	r2, r3
 8002828:	dbe1      	blt.n	80027ee <print_outAX25+0x406>
		}
	}
	sprintf(uartData, "\n");
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <print_outAX25+0x540>)
 800282c:	4b40      	ldr	r3, [pc, #256]	; (8002930 <print_outAX25+0x548>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002832:	483d      	ldr	r0, [pc, #244]	; (8002928 <print_outAX25+0x540>)
 8002834:	f7fd fcec 	bl	8000210 <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	b29a      	uxth	r2, r3
 800283c:	230a      	movs	r3, #10
 800283e:	493a      	ldr	r1, [pc, #232]	; (8002928 <print_outAX25+0x540>)
 8002840:	483a      	ldr	r0, [pc, #232]	; (800292c <print_outAX25+0x544>)
 8002842:	f003 f906 	bl	8005a52 <HAL_UART_Transmit>

	curr_mem = local_packet->FCS;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800284c:	3304      	adds	r3, #4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 8002852:	4a35      	ldr	r2, [pc, #212]	; (8002928 <print_outAX25+0x540>)
 8002854:	4b39      	ldr	r3, [pc, #228]	; (800293c <print_outAX25+0x554>)
 8002856:	4614      	mov	r4, r2
 8002858:	461d      	mov	r5, r3
 800285a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800285c:	6020      	str	r0, [r4, #0]
 800285e:	6061      	str	r1, [r4, #4]
 8002860:	60a2      	str	r2, [r4, #8]
 8002862:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002864:	4830      	ldr	r0, [pc, #192]	; (8002928 <print_outAX25+0x540>)
 8002866:	f7fd fcd3 	bl	8000210 <strlen>
 800286a:	4603      	mov	r3, r0
 800286c:	b29a      	uxth	r2, r3
 800286e:	230a      	movs	r3, #10
 8002870:	492d      	ldr	r1, [pc, #180]	; (8002928 <print_outAX25+0x540>)
 8002872:	482e      	ldr	r0, [pc, #184]	; (800292c <print_outAX25+0x544>)
 8002874:	f003 f8ed 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	e015      	b.n	80028aa <print_outAX25+0x4c2>
		sprintf(uartData, " %d ",*(curr_mem+i));
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4926      	ldr	r1, [pc, #152]	; (8002924 <print_outAX25+0x53c>)
 800288a:	4827      	ldr	r0, [pc, #156]	; (8002928 <print_outAX25+0x540>)
 800288c:	f004 f822 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002890:	4825      	ldr	r0, [pc, #148]	; (8002928 <print_outAX25+0x540>)
 8002892:	f7fd fcbd 	bl	8000210 <strlen>
 8002896:	4603      	mov	r3, r0
 8002898:	b29a      	uxth	r2, r3
 800289a:	230a      	movs	r3, #10
 800289c:	4922      	ldr	r1, [pc, #136]	; (8002928 <print_outAX25+0x540>)
 800289e:	4823      	ldr	r0, [pc, #140]	; (800292c <print_outAX25+0x544>)
 80028a0:	f003 f8d7 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3301      	adds	r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3310      	adds	r3, #16
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	dbe1      	blt.n	800287e <print_outAX25+0x496>
	}

	sprintf(uartData, "\n");
 80028ba:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <print_outAX25+0x540>)
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <print_outAX25+0x548>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028c2:	4819      	ldr	r0, [pc, #100]	; (8002928 <print_outAX25+0x540>)
 80028c4:	f7fd fca4 	bl	8000210 <strlen>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	230a      	movs	r3, #10
 80028ce:	4916      	ldr	r1, [pc, #88]	; (8002928 <print_outAX25+0x540>)
 80028d0:	4816      	ldr	r0, [pc, #88]	; (800292c <print_outAX25+0x544>)
 80028d2:	f003 f8be 	bl	8005a52 <HAL_UART_Transmit>



	//reset bitstuff members
	local_packet->stuffed_address = 0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80028dc:	3310      	adds	r3, #16
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80028e8:	3314      	adds	r3, #20
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80028f4:	3318      	adds	r3, #24
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002900:	331c      	adds	r3, #28
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
	local_packet->bit_stuffed_zeros = 0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002916:	3304      	adds	r3, #4
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
}
 800291c:	bf00      	nop
 800291e:	3734      	adds	r7, #52	; 0x34
 8002920:	46bd      	mov	sp, r7
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002924:	08007668 	.word	0x08007668
 8002928:	20001cd8 	.word	0x20001cd8
 800292c:	20002b94 	.word	0x20002b94
 8002930:	08007670 	.word	0x08007670
 8002934:	0800769c 	.word	0x0800769c
 8002938:	08007708 	.word	0x08007708
 800293c:	0800771c 	.word	0x0800771c

08002940 <print_KISS>:

void print_KISS(){
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b08d      	sub	sp, #52	; 0x34
 8002944:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002946:	4baf      	ldr	r3, [pc, #700]	; (8002c04 <print_KISS+0x2c4>)
 8002948:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002950:	330c      	adds	r3, #12
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8002956:	4bac      	ldr	r3, [pc, #688]	; (8002c08 <print_KISS+0x2c8>)
 8002958:	4aac      	ldr	r2, [pc, #688]	; (8002c0c <print_KISS+0x2cc>)
 800295a:	4614      	mov	r4, r2
 800295c:	469c      	mov	ip, r3
 800295e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002962:	4665      	mov	r5, ip
 8002964:	4626      	mov	r6, r4
 8002966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002968:	6028      	str	r0, [r5, #0]
 800296a:	6069      	str	r1, [r5, #4]
 800296c:	60aa      	str	r2, [r5, #8]
 800296e:	60eb      	str	r3, [r5, #12]
 8002970:	3410      	adds	r4, #16
 8002972:	f10c 0c10 	add.w	ip, ip, #16
 8002976:	4574      	cmp	r4, lr
 8002978:	d1f3      	bne.n	8002962 <print_KISS+0x22>
 800297a:	4663      	mov	r3, ip
 800297c:	4622      	mov	r2, r4
 800297e:	6810      	ldr	r0, [r2, #0]
 8002980:	6018      	str	r0, [r3, #0]
 8002982:	8891      	ldrh	r1, [r2, #4]
 8002984:	7992      	ldrb	r2, [r2, #6]
 8002986:	8099      	strh	r1, [r3, #4]
 8002988:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800298a:	489f      	ldr	r0, [pc, #636]	; (8002c08 <print_KISS+0x2c8>)
 800298c:	f7fd fc40 	bl	8000210 <strlen>
 8002990:	4603      	mov	r3, r0
 8002992:	b29a      	uxth	r2, r3
 8002994:	230a      	movs	r3, #10
 8002996:	499c      	ldr	r1, [pc, #624]	; (8002c08 <print_KISS+0x2c8>)
 8002998:	489d      	ldr	r0, [pc, #628]	; (8002c10 <print_KISS+0x2d0>)
 800299a:	f003 f85a 	bl	8005a52 <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80029a4:	3310      	adds	r3, #16
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	337f      	adds	r3, #127	; 0x7f
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 80029ac:	4a96      	ldr	r2, [pc, #600]	; (8002c08 <print_KISS+0x2c8>)
 80029ae:	4b99      	ldr	r3, [pc, #612]	; (8002c14 <print_KISS+0x2d4>)
 80029b0:	4615      	mov	r5, r2
 80029b2:	461c      	mov	r4, r3
 80029b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b6:	6028      	str	r0, [r5, #0]
 80029b8:	6069      	str	r1, [r5, #4]
 80029ba:	60aa      	str	r2, [r5, #8]
 80029bc:	60eb      	str	r3, [r5, #12]
 80029be:	8823      	ldrh	r3, [r4, #0]
 80029c0:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029c2:	4891      	ldr	r0, [pc, #580]	; (8002c08 <print_KISS+0x2c8>)
 80029c4:	f7fd fc24 	bl	8000210 <strlen>
 80029c8:	4603      	mov	r3, r0
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	230a      	movs	r3, #10
 80029ce:	498e      	ldr	r1, [pc, #568]	; (8002c08 <print_KISS+0x2c8>)
 80029d0:	488f      	ldr	r0, [pc, #572]	; (8002c10 <print_KISS+0x2d0>)
 80029d2:	f003 f83e 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029da:	e016      	b.n	8002a0a <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	425b      	negs	r3, r3
 80029e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	498b      	ldr	r1, [pc, #556]	; (8002c18 <print_KISS+0x2d8>)
 80029ea:	4887      	ldr	r0, [pc, #540]	; (8002c08 <print_KISS+0x2c8>)
 80029ec:	f003 ff72 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029f0:	4885      	ldr	r0, [pc, #532]	; (8002c08 <print_KISS+0x2c8>)
 80029f2:	f7fd fc0d 	bl	8000210 <strlen>
 80029f6:	4603      	mov	r3, r0
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	230a      	movs	r3, #10
 80029fc:	4982      	ldr	r1, [pc, #520]	; (8002c08 <print_KISS+0x2c8>)
 80029fe:	4884      	ldr	r0, [pc, #528]	; (8002c10 <print_KISS+0x2d0>)
 8002a00:	f003 f827 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	3301      	adds	r3, #1
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	2b07      	cmp	r3, #7
 8002a0e:	dde5      	ble.n	80029dc <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8002a10:	4a7d      	ldr	r2, [pc, #500]	; (8002c08 <print_KISS+0x2c8>)
 8002a12:	4b82      	ldr	r3, [pc, #520]	; (8002c1c <print_KISS+0x2dc>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a18:	487b      	ldr	r0, [pc, #492]	; (8002c08 <print_KISS+0x2c8>)
 8002a1a:	f7fd fbf9 	bl	8000210 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	230a      	movs	r3, #10
 8002a24:	4978      	ldr	r1, [pc, #480]	; (8002c08 <print_KISS+0x2c8>)
 8002a26:	487a      	ldr	r0, [pc, #488]	; (8002c10 <print_KISS+0x2d0>)
 8002a28:	f003 f813 	bl	8005a52 <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002a32:	3310      	adds	r3, #16
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	336f      	adds	r3, #111	; 0x6f
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	e041      	b.n	8002ac4 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	461a      	mov	r2, r3
 8002a46:	4976      	ldr	r1, [pc, #472]	; (8002c20 <print_KISS+0x2e0>)
 8002a48:	486f      	ldr	r0, [pc, #444]	; (8002c08 <print_KISS+0x2c8>)
 8002a4a:	f003 ff43 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a4e:	486e      	ldr	r0, [pc, #440]	; (8002c08 <print_KISS+0x2c8>)
 8002a50:	f7fd fbde 	bl	8000210 <strlen>
 8002a54:	4603      	mov	r3, r0
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	230a      	movs	r3, #10
 8002a5a:	496b      	ldr	r1, [pc, #428]	; (8002c08 <print_KISS+0x2c8>)
 8002a5c:	486c      	ldr	r0, [pc, #432]	; (8002c10 <print_KISS+0x2d0>)
 8002a5e:	f002 fff8 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	e016      	b.n	8002a96 <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	425b      	negs	r3, r3
 8002a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6e:	4413      	add	r3, r2
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4968      	ldr	r1, [pc, #416]	; (8002c18 <print_KISS+0x2d8>)
 8002a76:	4864      	ldr	r0, [pc, #400]	; (8002c08 <print_KISS+0x2c8>)
 8002a78:	f003 ff2c 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a7c:	4862      	ldr	r0, [pc, #392]	; (8002c08 <print_KISS+0x2c8>)
 8002a7e:	f7fd fbc7 	bl	8000210 <strlen>
 8002a82:	4603      	mov	r3, r0
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	230a      	movs	r3, #10
 8002a88:	495f      	ldr	r1, [pc, #380]	; (8002c08 <print_KISS+0x2c8>)
 8002a8a:	4861      	ldr	r0, [pc, #388]	; (8002c10 <print_KISS+0x2d0>)
 8002a8c:	f002 ffe1 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	3301      	adds	r3, #1
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2b07      	cmp	r3, #7
 8002a9a:	dde5      	ble.n	8002a68 <print_KISS+0x128>
		}
		curr_mem -= 8;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	3b08      	subs	r3, #8
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002aa2:	4a59      	ldr	r2, [pc, #356]	; (8002c08 <print_KISS+0x2c8>)
 8002aa4:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <print_KISS+0x2dc>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002aaa:	4857      	ldr	r0, [pc, #348]	; (8002c08 <print_KISS+0x2c8>)
 8002aac:	f7fd fbb0 	bl	8000210 <strlen>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	230a      	movs	r3, #10
 8002ab6:	4954      	ldr	r1, [pc, #336]	; (8002c08 <print_KISS+0x2c8>)
 8002ab8:	4855      	ldr	r0, [pc, #340]	; (8002c10 <print_KISS+0x2d0>)
 8002aba:	f002 ffca 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	2b0d      	cmp	r3, #13
 8002ac8:	ddba      	ble.n	8002a40 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002ad6:	4a4c      	ldr	r2, [pc, #304]	; (8002c08 <print_KISS+0x2c8>)
 8002ad8:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <print_KISS+0x2e4>)
 8002ada:	4615      	mov	r5, r2
 8002adc:	461c      	mov	r4, r3
 8002ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae0:	6028      	str	r0, [r5, #0]
 8002ae2:	6069      	str	r1, [r5, #4]
 8002ae4:	60aa      	str	r2, [r5, #8]
 8002ae6:	60eb      	str	r3, [r5, #12]
 8002ae8:	8823      	ldrh	r3, [r4, #0]
 8002aea:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002aec:	4846      	ldr	r0, [pc, #280]	; (8002c08 <print_KISS+0x2c8>)
 8002aee:	f7fd fb8f 	bl	8000210 <strlen>
 8002af2:	4603      	mov	r3, r0
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	230a      	movs	r3, #10
 8002af8:	4943      	ldr	r1, [pc, #268]	; (8002c08 <print_KISS+0x2c8>)
 8002afa:	4845      	ldr	r0, [pc, #276]	; (8002c10 <print_KISS+0x2d0>)
 8002afc:	f002 ffa9 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	e017      	b.n	8002b36 <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f1c3 0307 	rsb	r3, r3, #7
 8002b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4940      	ldr	r1, [pc, #256]	; (8002c18 <print_KISS+0x2d8>)
 8002b16:	483c      	ldr	r0, [pc, #240]	; (8002c08 <print_KISS+0x2c8>)
 8002b18:	f003 fedc 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b1c:	483a      	ldr	r0, [pc, #232]	; (8002c08 <print_KISS+0x2c8>)
 8002b1e:	f7fd fb77 	bl	8000210 <strlen>
 8002b22:	4603      	mov	r3, r0
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	230a      	movs	r3, #10
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <print_KISS+0x2c8>)
 8002b2a:	4839      	ldr	r0, [pc, #228]	; (8002c10 <print_KISS+0x2d0>)
 8002b2c:	f002 ff91 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b07      	cmp	r3, #7
 8002b3a:	dde4      	ble.n	8002b06 <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 8002b3c:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <print_KISS+0x2c8>)
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <print_KISS+0x2dc>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b44:	4830      	ldr	r0, [pc, #192]	; (8002c08 <print_KISS+0x2c8>)
 8002b46:	f7fd fb63 	bl	8000210 <strlen>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	230a      	movs	r3, #10
 8002b50:	492d      	ldr	r1, [pc, #180]	; (8002c08 <print_KISS+0x2c8>)
 8002b52:	482f      	ldr	r0, [pc, #188]	; (8002c10 <print_KISS+0x2d0>)
 8002b54:	f002 ff7d 	bl	8005a52 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002b5e:	3318      	adds	r3, #24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002b64:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <print_KISS+0x2c8>)
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <print_KISS+0x2e8>)
 8002b68:	4615      	mov	r5, r2
 8002b6a:	461c      	mov	r4, r3
 8002b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6e:	6028      	str	r0, [r5, #0]
 8002b70:	6069      	str	r1, [r5, #4]
 8002b72:	60aa      	str	r2, [r5, #8]
 8002b74:	60eb      	str	r3, [r5, #12]
 8002b76:	8823      	ldrh	r3, [r4, #0]
 8002b78:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b7a:	4823      	ldr	r0, [pc, #140]	; (8002c08 <print_KISS+0x2c8>)
 8002b7c:	f7fd fb48 	bl	8000210 <strlen>
 8002b80:	4603      	mov	r3, r0
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	230a      	movs	r3, #10
 8002b86:	4920      	ldr	r1, [pc, #128]	; (8002c08 <print_KISS+0x2c8>)
 8002b88:	4821      	ldr	r0, [pc, #132]	; (8002c10 <print_KISS+0x2d0>)
 8002b8a:	f002 ff62 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e017      	b.n	8002bc4 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9c:	4413      	add	r3, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	491d      	ldr	r1, [pc, #116]	; (8002c18 <print_KISS+0x2d8>)
 8002ba4:	4818      	ldr	r0, [pc, #96]	; (8002c08 <print_KISS+0x2c8>)
 8002ba6:	f003 fe95 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002baa:	4817      	ldr	r0, [pc, #92]	; (8002c08 <print_KISS+0x2c8>)
 8002bac:	f7fd fb30 	bl	8000210 <strlen>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	230a      	movs	r3, #10
 8002bb6:	4914      	ldr	r1, [pc, #80]	; (8002c08 <print_KISS+0x2c8>)
 8002bb8:	4815      	ldr	r0, [pc, #84]	; (8002c10 <print_KISS+0x2d0>)
 8002bba:	f002 ff4a 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b07      	cmp	r3, #7
 8002bc8:	dde4      	ble.n	8002b94 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <print_KISS+0x2c8>)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <print_KISS+0x2dc>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <print_KISS+0x2c8>)
 8002bd4:	f7fd fb1c 	bl	8000210 <strlen>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	230a      	movs	r3, #10
 8002bde:	490a      	ldr	r1, [pc, #40]	; (8002c08 <print_KISS+0x2c8>)
 8002be0:	480b      	ldr	r0, [pc, #44]	; (8002c10 <print_KISS+0x2d0>)
 8002be2:	f002 ff36 	bl	8005a52 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002bec:	331c      	adds	r3, #28
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e055      	b.n	8002cb0 <print_KISS+0x370>
 8002c04:	200000d4 	.word	0x200000d4
 8002c08:	20001cd8 	.word	0x20001cd8
 8002c0c:	0800772c 	.word	0x0800772c
 8002c10:	20002b94 	.word	0x20002b94
 8002c14:	08007764 	.word	0x08007764
 8002c18:	08007668 	.word	0x08007668
 8002c1c:	08007670 	.word	0x08007670
 8002c20:	08007654 	.word	0x08007654
 8002c24:	08007674 	.word	0x08007674
 8002c28:	08007688 	.word	0x08007688
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	461a      	mov	r2, r3
 8002c32:	494a      	ldr	r1, [pc, #296]	; (8002d5c <print_KISS+0x41c>)
 8002c34:	484a      	ldr	r0, [pc, #296]	; (8002d60 <print_KISS+0x420>)
 8002c36:	f003 fe4d 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c3a:	4849      	ldr	r0, [pc, #292]	; (8002d60 <print_KISS+0x420>)
 8002c3c:	f7fd fae8 	bl	8000210 <strlen>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	230a      	movs	r3, #10
 8002c46:	4946      	ldr	r1, [pc, #280]	; (8002d60 <print_KISS+0x420>)
 8002c48:	4846      	ldr	r0, [pc, #280]	; (8002d64 <print_KISS+0x424>)
 8002c4a:	f002 ff02 	bl	8005a52 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e016      	b.n	8002c82 <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	425b      	negs	r3, r3
 8002c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4941      	ldr	r1, [pc, #260]	; (8002d68 <print_KISS+0x428>)
 8002c62:	483f      	ldr	r0, [pc, #252]	; (8002d60 <print_KISS+0x420>)
 8002c64:	f003 fe36 	bl	80068d4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c68:	483d      	ldr	r0, [pc, #244]	; (8002d60 <print_KISS+0x420>)
 8002c6a:	f7fd fad1 	bl	8000210 <strlen>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	230a      	movs	r3, #10
 8002c74:	493a      	ldr	r1, [pc, #232]	; (8002d60 <print_KISS+0x420>)
 8002c76:	483b      	ldr	r0, [pc, #236]	; (8002d64 <print_KISS+0x424>)
 8002c78:	f002 feeb 	bl	8005a52 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b07      	cmp	r3, #7
 8002c86:	dde5      	ble.n	8002c54 <print_KISS+0x314>
		}
		curr_mem -= 8;
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	3b08      	subs	r3, #8
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002c8e:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <print_KISS+0x420>)
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <print_KISS+0x42c>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c96:	4832      	ldr	r0, [pc, #200]	; (8002d60 <print_KISS+0x420>)
 8002c98:	f7fd faba 	bl	8000210 <strlen>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	230a      	movs	r3, #10
 8002ca2:	492f      	ldr	r1, [pc, #188]	; (8002d60 <print_KISS+0x420>)
 8002ca4:	482f      	ldr	r0, [pc, #188]	; (8002d64 <print_KISS+0x424>)
 8002ca6:	f002 fed4 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3301      	adds	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da00      	bge.n	8002cbe <print_KISS+0x37e>
 8002cbc:	3307      	adds	r3, #7
 8002cbe:	10db      	asrs	r3, r3, #3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	dbb1      	blt.n	8002c2c <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <print_KISS+0x420>)
 8002cd2:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <print_KISS+0x430>)
 8002cd4:	4615      	mov	r5, r2
 8002cd6:	461c      	mov	r4, r3
 8002cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cda:	6028      	str	r0, [r5, #0]
 8002cdc:	6069      	str	r1, [r5, #4]
 8002cde:	60aa      	str	r2, [r5, #8]
 8002ce0:	60eb      	str	r3, [r5, #12]
 8002ce2:	8823      	ldrh	r3, [r4, #0]
 8002ce4:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002ce6:	481e      	ldr	r0, [pc, #120]	; (8002d60 <print_KISS+0x420>)
 8002ce8:	f7fd fa92 	bl	8000210 <strlen>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	230a      	movs	r3, #10
 8002cf2:	491b      	ldr	r1, [pc, #108]	; (8002d60 <print_KISS+0x420>)
 8002cf4:	481b      	ldr	r0, [pc, #108]	; (8002d64 <print_KISS+0x424>)
 8002cf6:	f002 feac 	bl	8005a52 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e017      	b.n	8002d30 <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4916      	ldr	r1, [pc, #88]	; (8002d68 <print_KISS+0x428>)
 8002d10:	4813      	ldr	r0, [pc, #76]	; (8002d60 <print_KISS+0x420>)
 8002d12:	f003 fddf 	bl	80068d4 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d16:	4812      	ldr	r0, [pc, #72]	; (8002d60 <print_KISS+0x420>)
 8002d18:	f7fd fa7a 	bl	8000210 <strlen>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	230a      	movs	r3, #10
 8002d22:	490f      	ldr	r1, [pc, #60]	; (8002d60 <print_KISS+0x420>)
 8002d24:	480f      	ldr	r0, [pc, #60]	; (8002d64 <print_KISS+0x424>)
 8002d26:	f002 fe94 	bl	8005a52 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b07      	cmp	r3, #7
 8002d34:	dde4      	ble.n	8002d00 <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <print_KISS+0x420>)
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <print_KISS+0x42c>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d3e:	4808      	ldr	r0, [pc, #32]	; (8002d60 <print_KISS+0x420>)
 8002d40:	f7fd fa66 	bl	8000210 <strlen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	230a      	movs	r3, #10
 8002d4a:	4905      	ldr	r1, [pc, #20]	; (8002d60 <print_KISS+0x420>)
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <print_KISS+0x424>)
 8002d4e:	f002 fe80 	bl	8005a52 <HAL_UART_Transmit>

}
 8002d52:	bf00      	nop
 8002d54:	3734      	adds	r7, #52	; 0x34
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	0800769c 	.word	0x0800769c
 8002d60:	20001cd8 	.word	0x20001cd8
 8002d64:	20002b94 	.word	0x20002b94
 8002d68:	08007668 	.word	0x08007668
 8002d6c:	08007670 	.word	0x08007670
 8002d70:	08007778 	.word	0x08007778

08002d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d78:	f000 fd18 	bl	80037ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d7c:	f000 f820 	bl	8002dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d80:	f000 f9f0 	bl	8003164 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d84:	f000 f9ce 	bl	8003124 <MX_DMA_Init>
  MX_DAC_Init();
 8002d88:	f000 f888 	bl	8002e9c <MX_DAC_Init>
  MX_TIM2_Init();
 8002d8c:	f000 f8b0 	bl	8002ef0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d90:	f000 f8fa 	bl	8002f88 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002d94:	f000 f994 	bl	80030c0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002d98:	f000 f944 	bl	8003024 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8002d9c:	4806      	ldr	r0, [pc, #24]	; (8002db8 <main+0x44>)
 8002d9e:	f002 f9e6 	bl	800516e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <main+0x48>)
 8002da4:	f002 fa32 	bl	800520c <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8002da8:	f000 fabc 	bl	8003324 <uart_gpio_init>

	initProgram(false);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fce9 	bl	8001784 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8002db2:	f7fd fcdf 	bl	8000774 <tx_rx>
 8002db6:	e7fc      	b.n	8002db2 <main+0x3e>
 8002db8:	20002b54 	.word	0x20002b54
 8002dbc:	2000289c 	.word	0x2000289c

08002dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b094      	sub	sp, #80	; 0x50
 8002dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	2234      	movs	r2, #52	; 0x34
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fd78 	bl	80068c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <SystemClock_Config+0xd4>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <SystemClock_Config+0xd4>)
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df2:	6413      	str	r3, [r2, #64]	; 0x40
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <SystemClock_Config+0xd4>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <SystemClock_Config+0xd8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e0c:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <SystemClock_Config+0xd8>)
 8002e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <SystemClock_Config+0xd8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e34:	2304      	movs	r3, #4
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002e38:	235a      	movs	r3, #90	; 0x5a
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e40:	2302      	movs	r3, #2
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e44:	2302      	movs	r3, #2
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 ff09 	bl	8004c64 <HAL_RCC_OscConfig>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002e58:	f000 fa8c 	bl	8003374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e60:	2302      	movs	r3, #2
 8002e62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 fc38 	bl	80046f0 <HAL_RCC_ClockConfig>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002e86:	f000 fa75 	bl	8003374 <Error_Handler>
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	3750      	adds	r7, #80	; 0x50
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000

08002e9c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002ea2:	463b      	mov	r3, r7
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <MX_DAC_Init+0x4c>)
 8002eac:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <MX_DAC_Init+0x50>)
 8002eae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002eb0:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <MX_DAC_Init+0x4c>)
 8002eb2:	f000 fe2e 	bl	8003b12 <HAL_DAC_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002ebc:	f000 fa5a 	bl	8003374 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002ec0:	2324      	movs	r3, #36	; 0x24
 8002ec2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <MX_DAC_Init+0x4c>)
 8002ed0:	f000 fe82 	bl	8003bd8 <HAL_DAC_ConfigChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002eda:	f000 fa4b 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20002b40 	.word	0x20002b40
 8002eec:	40007400 	.word	0x40007400

08002ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	463b      	mov	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f16:	2208      	movs	r2, #8
 8002f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f22:	2263      	movs	r2, #99	; 0x63
 8002f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f32:	4814      	ldr	r0, [pc, #80]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f34:	f002 f8f0 	bl	8005118 <HAL_TIM_Base_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002f3e:	f000 fa19 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480d      	ldr	r0, [pc, #52]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f50:	f002 fa88 	bl	8005464 <HAL_TIM_ConfigClockSource>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002f5a:	f000 fa0b 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f66:	463b      	mov	r3, r7
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4806      	ldr	r0, [pc, #24]	; (8002f84 <MX_TIM2_Init+0x94>)
 8002f6c:	f002 fc94 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002f76:	f000 f9fd 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20002b54 	.word	0x20002b54

08002f88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <MX_TIM3_Init+0x94>)
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <MX_TIM3_Init+0x98>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <MX_TIM3_Init+0x94>)
 8002fac:	2259      	movs	r2, #89	; 0x59
 8002fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <MX_TIM3_Init+0x94>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <MX_TIM3_Init+0x94>)
 8002fb8:	f240 3241 	movw	r2, #833	; 0x341
 8002fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <MX_TIM3_Init+0x94>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <MX_TIM3_Init+0x94>)
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fca:	4814      	ldr	r0, [pc, #80]	; (800301c <MX_TIM3_Init+0x94>)
 8002fcc:	f002 f8a4 	bl	8005118 <HAL_TIM_Base_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002fd6:	f000 f9cd 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480d      	ldr	r0, [pc, #52]	; (800301c <MX_TIM3_Init+0x94>)
 8002fe8:	f002 fa3c 	bl	8005464 <HAL_TIM_ConfigClockSource>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002ff2:	f000 f9bf 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ffe:	463b      	mov	r3, r7
 8003000:	4619      	mov	r1, r3
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <MX_TIM3_Init+0x94>)
 8003004:	f002 fc48 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800300e:	f000 f9b1 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000289c 	.word	0x2000289c
 8003020:	40000400 	.word	0x40000400

08003024 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302a:	f107 0308 	add.w	r3, r7, #8
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003038:	463b      	mov	r3, r7
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <MX_TIM4_Init+0x98>)
 8003044:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003048:	2259      	movs	r2, #89	; 0x59
 800304a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <MX_TIM4_Init+0x94>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003058:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <MX_TIM4_Init+0x94>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003066:	4814      	ldr	r0, [pc, #80]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003068:	f002 f856 	bl	8005118 <HAL_TIM_Base_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003072:	f000 f97f 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	4619      	mov	r1, r3
 8003082:	480d      	ldr	r0, [pc, #52]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003084:	f002 f9ee 	bl	8005464 <HAL_TIM_ConfigClockSource>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800308e:	f000 f971 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800309a:	463b      	mov	r3, r7
 800309c:	4619      	mov	r1, r3
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <MX_TIM4_Init+0x94>)
 80030a0:	f002 fbfa 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80030aa:	f000 f963 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20002dd4 	.word	0x20002dd4
 80030bc:	40000800 	.word	0x40000800

080030c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030c6:	4a16      	ldr	r2, [pc, #88]	; (8003120 <MX_USART2_UART_Init+0x60>)
 80030c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030f6:	4809      	ldr	r0, [pc, #36]	; (800311c <MX_USART2_UART_Init+0x5c>)
 80030f8:	f002 fc5e 	bl	80059b8 <HAL_UART_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003102:	f000 f937 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2100      	movs	r1, #0
 800310a:	2026      	movs	r0, #38	; 0x26
 800310c:	f000 fcbd 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003110:	2026      	movs	r0, #38	; 0x26
 8003112:	f000 fcd6 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20002b94 	.word	0x20002b94
 8003120:	40004400 	.word	0x40004400

08003124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <MX_DMA_Init+0x3c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <MX_DMA_Init+0x3c>)
 8003134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <MX_DMA_Init+0x3c>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2010      	movs	r0, #16
 800314c:	f000 fc9d 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003150:	2010      	movs	r0, #16
 8003152:	f000 fcb6 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	4b45      	ldr	r3, [pc, #276]	; (8003294 <MX_GPIO_Init+0x130>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a44      	ldr	r2, [pc, #272]	; (8003294 <MX_GPIO_Init+0x130>)
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <MX_GPIO_Init+0x130>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <MX_GPIO_Init+0x130>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a3d      	ldr	r2, [pc, #244]	; (8003294 <MX_GPIO_Init+0x130>)
 80031a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <MX_GPIO_Init+0x130>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <MX_GPIO_Init+0x130>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a36      	ldr	r2, [pc, #216]	; (8003294 <MX_GPIO_Init+0x130>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b34      	ldr	r3, [pc, #208]	; (8003294 <MX_GPIO_Init+0x130>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <MX_GPIO_Init+0x130>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a2f      	ldr	r2, [pc, #188]	; (8003294 <MX_GPIO_Init+0x130>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <MX_GPIO_Init+0x130>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80031ea:	2200      	movs	r2, #0
 80031ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80031f0:	4829      	ldr	r0, [pc, #164]	; (8003298 <MX_GPIO_Init+0x134>)
 80031f2:	f001 fa4b 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2110      	movs	r1, #16
 80031fa:	4828      	ldr	r0, [pc, #160]	; (800329c <MX_GPIO_Init+0x138>)
 80031fc:	f001 fa46 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <MX_GPIO_Init+0x13c>)
 8003208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	4821      	ldr	r0, [pc, #132]	; (800329c <MX_GPIO_Init+0x138>)
 8003216:	f001 f8a7 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800321a:	2301      	movs	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <MX_GPIO_Init+0x140>)
 8003220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	4619      	mov	r1, r3
 800322c:	481a      	ldr	r0, [pc, #104]	; (8003298 <MX_GPIO_Init+0x134>)
 800322e:	f001 f89b 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8003232:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003238:	2301      	movs	r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003240:	2300      	movs	r3, #0
 8003242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4619      	mov	r1, r3
 800324a:	4813      	ldr	r0, [pc, #76]	; (8003298 <MX_GPIO_Init+0x134>)
 800324c:	f001 f88c 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8003250:	2310      	movs	r3, #16
 8003252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003254:	2301      	movs	r3, #1
 8003256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325c:	2300      	movs	r3, #0
 800325e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	4619      	mov	r1, r3
 8003266:	480d      	ldr	r0, [pc, #52]	; (800329c <MX_GPIO_Init+0x138>)
 8003268:	f001 f87e 	bl	8004368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	2006      	movs	r0, #6
 8003272:	f000 fc0a 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003276:	2006      	movs	r0, #6
 8003278:	f000 fc23 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2100      	movs	r1, #0
 8003280:	2028      	movs	r0, #40	; 0x28
 8003282:	f000 fc02 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003286:	2028      	movs	r0, #40	; 0x28
 8003288:	f000 fc1b 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020800 	.word	0x40020800
 80032a0:	10210000 	.word	0x10210000
 80032a4:	10110000 	.word	0x10110000

080032a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d102      	bne.n	80032be <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 80032b8:	f7fe fb36 	bl	8001928 <Tim3IT>
	else
		__NOP();
}
 80032bc:	e000      	b.n	80032c0 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 80032be:	bf00      	nop
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	2000289c 	.word	0x2000289c

080032cc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 80032dc:	f7fe fb58 	bl	8001990 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d103      	bne.n	80032f0 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <HAL_GPIO_EXTI_Callback+0x30>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 80032ee:	e000      	b.n	80032f2 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 80032f0:	bf00      	nop
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200000a5 	.word	0x200000a5

08003300 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_UART_RxCpltCallback+0x20>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8003312:	f7fd fa81 	bl	8000818 <UART2_EXCEPTION_CALLBACK>
  }
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40004400 	.word	0x40004400

08003324 <uart_gpio_init>:

void uart_gpio_init()
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4b0f      	ldr	r3, [pc, #60]	; (800336c <uart_gpio_init+0x48>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a0e      	ldr	r2, [pc, #56]	; (800336c <uart_gpio_init+0x48>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <uart_gpio_init+0x48>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003346:	230c      	movs	r3, #12
 8003348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800334e:	2301      	movs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003356:	2307      	movs	r3, #7
 8003358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4804      	ldr	r0, [pc, #16]	; (8003370 <uart_gpio_init+0x4c>)
 8003360:	f001 f802 	bl	8004368 <HAL_GPIO_Init>
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	40020000 	.word	0x40020000

08003374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_MspInit+0x4c>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_MspInit+0x4c>)
 8003394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003398:	6453      	str	r3, [r2, #68]	; 0x44
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_MspInit+0x4c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_MspInit+0x4c>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <HAL_MspInit+0x4c>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_MspInit+0x4c>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033c2:	2007      	movs	r0, #7
 80033c4:	f000 fb56 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <HAL_DAC_MspInit+0xdc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d158      	bne.n	80034a8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <HAL_DAC_MspInit+0xe0>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a2d      	ldr	r2, [pc, #180]	; (80034b4 <HAL_DAC_MspInit+0xe0>)
 8003400:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <HAL_DAC_MspInit+0xe0>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_DAC_MspInit+0xe0>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <HAL_DAC_MspInit+0xe0>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_DAC_MspInit+0xe0>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800342e:	2310      	movs	r3, #16
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003432:	2303      	movs	r3, #3
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0314 	add.w	r3, r7, #20
 800343e:	4619      	mov	r1, r3
 8003440:	481d      	ldr	r0, [pc, #116]	; (80034b8 <HAL_DAC_MspInit+0xe4>)
 8003442:	f000 ff91 	bl	8004368 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_DAC_MspInit+0xec>)
 800344a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 800344e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003452:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 8003462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003466:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 800346a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800346e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 8003472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003476:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 8003482:	2200      	movs	r2, #0
 8003484:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 8003488:	2200      	movs	r2, #0
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800348c:	480b      	ldr	r0, [pc, #44]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 800348e:	f000 fbf1 	bl	8003c74 <HAL_DMA_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003498:	f7ff ff6c 	bl	8003374 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	4a06      	ldr	r2, [pc, #24]	; (80034bc <HAL_DAC_MspInit+0xe8>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80034a8:	bf00      	nop
 80034aa:	3728      	adds	r7, #40	; 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40007400 	.word	0x40007400
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	200028dc 	.word	0x200028dc
 80034c0:	40026088 	.word	0x40026088

080034c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d10e      	bne.n	80034f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034f2:	e02e      	b.n	8003552 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_TIM_Base_MspInit+0x9c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d116      	bne.n	800352c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	2100      	movs	r1, #0
 800351e:	201d      	movs	r0, #29
 8003520:	f000 fab3 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003524:	201d      	movs	r0, #29
 8003526:	f000 facc 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 800352a:	e012      	b.n	8003552 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <HAL_TIM_Base_MspInit+0xa0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_TIM_Base_MspInit+0x98>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800

08003568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_UART_MspInit+0x94>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d133      	bne.n	80035f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <HAL_UART_MspInit+0x98>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <HAL_UART_MspInit+0x98>)
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
 800359a:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_UART_MspInit+0x98>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_UART_MspInit+0x98>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a14      	ldr	r2, [pc, #80]	; (8003600 <HAL_UART_MspInit+0x98>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_UART_MspInit+0x98>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035c2:	230c      	movs	r3, #12
 80035c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035d2:	2307      	movs	r3, #7
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	4809      	ldr	r0, [pc, #36]	; (8003604 <HAL_UART_MspInit+0x9c>)
 80035de:	f000 fec3 	bl	8004368 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	2026      	movs	r0, #38	; 0x26
 80035e8:	f000 fa4f 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035ec:	2026      	movs	r0, #38	; 0x26
 80035ee:	f000 fa68 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035f2:	bf00      	nop
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40004400 	.word	0x40004400
 8003600:	40023800 	.word	0x40023800
 8003604:	40020000 	.word	0x40020000

08003608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <HardFault_Handler+0x4>

0800361c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <MemManage_Handler+0x4>

08003622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003626:	e7fe      	b.n	8003626 <BusFault_Handler+0x4>

08003628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800362c:	e7fe      	b.n	800362c <UsageFault_Handler+0x4>

0800362e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800365c:	f000 f8f8 	bl	8003850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}

08003664 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003668:	2001      	movs	r0, #1
 800366a:	f001 f829 	bl	80046c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <DMA1_Stream5_IRQHandler+0x10>)
 800367a:	f000 fc3b 	bl	8003ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200028dc 	.word	0x200028dc

08003688 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <TIM3_IRQHandler+0x10>)
 800368e:	f001 fde1 	bl	8005254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2000289c 	.word	0x2000289c

0800369c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <USART2_IRQHandler+0x10>)
 80036a2:	f002 fac5 	bl	8005c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20002b94 	.word	0x20002b94

080036b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80036b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80036b8:	f001 f802 	bl	80046c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <_sbrk+0x5c>)
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <_sbrk+0x60>)
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <_sbrk+0x64>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <_sbrk+0x64>)
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <_sbrk+0x68>)
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036f0:	f003 f89a 	bl	8006828 <__errno>
 80036f4:	4602      	mov	r2, r0
 80036f6:	230c      	movs	r3, #12
 80036f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	e009      	b.n	8003714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <_sbrk+0x64>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <_sbrk+0x64>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <_sbrk+0x64>)
 8003710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20020000 	.word	0x20020000
 8003720:	00000400 	.word	0x00000400
 8003724:	200000c8 	.word	0x200000c8
 8003728:	20002e20 	.word	0x20002e20

0800372c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <SystemInit+0x28>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <SystemInit+0x28>)
 8003738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800373c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <SystemInit+0x28>)
 8003742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003746:	609a      	str	r2, [r3, #8]
#endif
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003790 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800375c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800375e:	e003      	b.n	8003768 <LoopCopyDataInit>

08003760 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003762:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003764:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003766:	3104      	adds	r1, #4

08003768 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800376c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800376e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003770:	d3f6      	bcc.n	8003760 <CopyDataInit>
  ldr  r2, =_sbss
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003774:	e002      	b.n	800377c <LoopFillZerobss>

08003776 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003776:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003778:	f842 3b04 	str.w	r3, [r2], #4

0800377c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800377e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003780:	d3f9      	bcc.n	8003776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003782:	f7ff ffd3 	bl	800372c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003786:	f003 f855 	bl	8006834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800378a:	f7ff faf3 	bl	8002d74 <main>
  bx  lr    
 800378e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003790:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003794:	080077f0 	.word	0x080077f0
  ldr  r0, =_sdata
 8003798:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800379c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80037a0:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80037a4:	20002e1c 	.word	0x20002e1c

080037a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a8:	e7fe      	b.n	80037a8 <ADC_IRQHandler>
	...

080037ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037b0:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <HAL_Init+0x40>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <HAL_Init+0x40>)
 80037b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_Init+0x40>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <HAL_Init+0x40>)
 80037c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_Init+0x40>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a07      	ldr	r2, [pc, #28]	; (80037ec <HAL_Init+0x40>)
 80037ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d4:	2003      	movs	r0, #3
 80037d6:	f000 f94d 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037da:	2000      	movs	r0, #0
 80037dc:	f000 f808 	bl	80037f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037e0:	f7ff fdd0 	bl	8003384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00

080037f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_InitTick+0x54>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_InitTick+0x58>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003806:	fbb3 f3f1 	udiv	r3, r3, r1
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f973 	bl	8003afa <HAL_SYSTICK_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e00e      	b.n	800383c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b0f      	cmp	r3, #15
 8003822:	d80a      	bhi.n	800383a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003824:	2200      	movs	r2, #0
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	f000 f92d 	bl	8003a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003830:	4a06      	ldr	r2, [pc, #24]	; (800384c <HAL_InitTick+0x5c>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000014 	.word	0x20000014
 8003848:	2000001c 	.word	0x2000001c
 800384c:	20000018 	.word	0x20000018

08003850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_IncTick+0x20>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_IncTick+0x24>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4413      	add	r3, r2
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <HAL_IncTick+0x24>)
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	2000001c 	.word	0x2000001c
 8003874:	20002e14 	.word	0x20002e14

08003878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return uwTick;
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_GetTick+0x14>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20002e14 	.word	0x20002e14

08003890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ac:	4013      	ands	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	60d3      	str	r3, [r2, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <__NVIC_GetPriorityGrouping+0x18>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	f003 0307 	and.w	r3, r3, #7
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	2b00      	cmp	r3, #0
 8003904:	db0b      	blt.n	800391e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <__NVIC_EnableIRQ+0x38>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2001      	movs	r0, #1
 8003916:	fa00 f202 	lsl.w	r2, r0, r2
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100

08003930 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db10      	blt.n	8003964 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4909      	ldr	r1, [pc, #36]	; (8003970 <__NVIC_DisableIRQ+0x40>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	3320      	adds	r3, #32
 8003958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800395c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003960:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	; (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	; (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf28      	it	cs
 80039e6:	2304      	movcs	r3, #4
 80039e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d902      	bls.n	80039f8 <NVIC_EncodePriority+0x30>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b03      	subs	r3, #3
 80039f6:	e000      	b.n	80039fa <NVIC_EncodePriority+0x32>
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	4313      	orrs	r3, r2
         );
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a40:	d301      	bcc.n	8003a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00f      	b.n	8003a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <SysTick_Config+0x40>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4e:	210f      	movs	r1, #15
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	f7ff ff8e 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <SysTick_Config+0x40>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <SysTick_Config+0x40>)
 8003a60:	2207      	movs	r2, #7
 8003a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000e010 	.word	0xe000e010

08003a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff07 	bl	8003890 <__NVIC_SetPriorityGrouping>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a9c:	f7ff ff1c 	bl	80038d8 <__NVIC_GetPriorityGrouping>
 8003aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff8e 	bl	80039c8 <NVIC_EncodePriority>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff5d 	bl	8003974 <__NVIC_SetPriority>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff0f 	bl	80038f4 <__NVIC_EnableIRQ>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff1f 	bl	8003930 <__NVIC_DisableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ff94 	bl	8003a30 <SysTick_Config>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e014      	b.n	8003b4e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	791b      	ldrb	r3, [r3, #4]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff fc4d 	bl	80033d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43da      	mvns	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43da      	mvns	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	400a      	ands	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f915 	bl	8003dd0 <HAL_DMA_Abort>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e006      	b.n	8003bba <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f90d 	bl	8003dd0 <HAL_DMA_Abort>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	711a      	strb	r2, [r3, #4]
 8003bc6:	e002      	b.n	8003bce <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	795b      	ldrb	r3, [r3, #5]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_DAC_ConfigChannel+0x20>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e036      	b.n	8003c66 <HAL_DAC_ConfigChannel+0x8e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2202      	movs	r2, #2
 8003c02:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003c0c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	22c0      	movs	r2, #192	; 0xc0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	400a      	ands	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7ff fdfa 	bl	8003878 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e099      	b.n	8003dc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb0:	e00f      	b.n	8003cd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cb2:	f7ff fde1 	bl	8003878 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b05      	cmp	r3, #5
 8003cbe:	d908      	bls.n	8003cd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e078      	b.n	8003dc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e8      	bne.n	8003cb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_DMA_Init+0x158>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d107      	bne.n	8003d3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	4313      	orrs	r3, r2
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0307 	bic.w	r3, r3, #7
 8003d52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d117      	bne.n	8003d96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fa7b 	bl	8004274 <DMA_CheckFifoParam>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d92:	2301      	movs	r3, #1
 8003d94:	e016      	b.n	8003dc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa32 	bl	8004208 <DMA_CalcBaseAndBitshift>
 8003da4:	4603      	mov	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	223f      	movs	r2, #63	; 0x3f
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	f010803f 	.word	0xf010803f

08003dd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dde:	f7ff fd4b 	bl	8003878 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d008      	beq.n	8003e02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e052      	b.n	8003ea8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0216 	bic.w	r2, r2, #22
 8003e10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <HAL_DMA_Abort+0x62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0208 	bic.w	r2, r2, #8
 8003e40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e52:	e013      	b.n	8003e7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e54:	f7ff fd10 	bl	8003878 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d90c      	bls.n	8003e7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2203      	movs	r2, #3
 8003e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e015      	b.n	8003ea8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e4      	bne.n	8003e54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	223f      	movs	r2, #63	; 0x3f
 8003e90:	409a      	lsls	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00c      	b.n	8003ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f00:	4b92      	ldr	r3, [pc, #584]	; (800414c <HAL_DMA_IRQHandler+0x258>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a92      	ldr	r2, [pc, #584]	; (8004150 <HAL_DMA_IRQHandler+0x25c>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	0a9b      	lsrs	r3, r3, #10
 8003f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2208      	movs	r2, #8
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01a      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0204 	bic.w	r2, r2, #4
 8003f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0201 	orr.w	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	2201      	movs	r2, #1
 8003f84:	409a      	lsls	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f043 0202 	orr.w	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2204      	movs	r2, #4
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d043      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03c      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2210      	movs	r2, #16
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d018      	beq.n	8004036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d024      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e01f      	b.n	8004064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
 8004034:	e016      	b.n	8004064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0208 	bic.w	r2, r2, #8
 8004052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2220      	movs	r2, #32
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 808e 	beq.w	8004192 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8086 	beq.w	8004192 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2220      	movs	r2, #32
 800408c:	409a      	lsls	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b05      	cmp	r3, #5
 800409c:	d136      	bne.n	800410c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0216 	bic.w	r2, r2, #22
 80040ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <HAL_DMA_IRQHandler+0x1da>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0208 	bic.w	r2, r2, #8
 80040dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	223f      	movs	r2, #63	; 0x3f
 80040e4:	409a      	lsls	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d07d      	beq.n	80041fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
        }
        return;
 800410a:	e078      	b.n	80041fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01c      	beq.n	8004154 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	2b00      	cmp	r3, #0
 800412e:	d030      	beq.n	8004192 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
 8004138:	e02b      	b.n	8004192 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d027      	beq.n	8004192 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e022      	b.n	8004192 <HAL_DMA_IRQHandler+0x29e>
 800414c:	20000014 	.word	0x20000014
 8004150:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0210 	bic.w	r2, r2, #16
 8004170:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	2b00      	cmp	r3, #0
 8004198:	d032      	beq.n	8004200 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d022      	beq.n	80041ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2205      	movs	r2, #5
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d307      	bcc.n	80041da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f2      	bne.n	80041be <HAL_DMA_IRQHandler+0x2ca>
 80041d8:	e000      	b.n	80041dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
 80041fc:	e000      	b.n	8004200 <HAL_DMA_IRQHandler+0x30c>
        return;
 80041fe:	bf00      	nop
    }
  }
}
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop

08004208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3b10      	subs	r3, #16
 8004218:	4a14      	ldr	r2, [pc, #80]	; (800426c <DMA_CalcBaseAndBitshift+0x64>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004222:	4a13      	ldr	r2, [pc, #76]	; (8004270 <DMA_CalcBaseAndBitshift+0x68>)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d909      	bls.n	800424a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	1d1a      	adds	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	659a      	str	r2, [r3, #88]	; 0x58
 8004248:	e007      	b.n	800425a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	aaaaaaab 	.word	0xaaaaaaab
 8004270:	080077a4 	.word	0x080077a4

08004274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11f      	bne.n	80042ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d855      	bhi.n	8004340 <DMA_CheckFifoParam+0xcc>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <DMA_CheckFifoParam+0x28>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042ad 	.word	0x080042ad
 80042a0:	080042bf 	.word	0x080042bf
 80042a4:	080042ad 	.word	0x080042ad
 80042a8:	08004341 	.word	0x08004341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d045      	beq.n	8004344 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042bc:	e042      	b.n	8004344 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c6:	d13f      	bne.n	8004348 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042cc:	e03c      	b.n	8004348 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d6:	d121      	bne.n	800431c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d836      	bhi.n	800434c <DMA_CheckFifoParam+0xd8>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <DMA_CheckFifoParam+0x70>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	080042fb 	.word	0x080042fb
 80042ec:	080042f5 	.word	0x080042f5
 80042f0:	0800430d 	.word	0x0800430d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e02f      	b.n	800435a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d024      	beq.n	8004350 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800430a:	e021      	b.n	8004350 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004314:	d11e      	bne.n	8004354 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800431a:	e01b      	b.n	8004354 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d902      	bls.n	8004328 <DMA_CheckFifoParam+0xb4>
 8004322:	2b03      	cmp	r3, #3
 8004324:	d003      	beq.n	800432e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004326:	e018      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e015      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      break;
 800433e:	e00b      	b.n	8004358 <DMA_CheckFifoParam+0xe4>
      break;
 8004340:	bf00      	nop
 8004342:	e00a      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      break;
 8004344:	bf00      	nop
 8004346:	e008      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      break;
 8004348:	bf00      	nop
 800434a:	e006      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      break;
 800434c:	bf00      	nop
 800434e:	e004      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      break;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      break;   
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <DMA_CheckFifoParam+0xe6>
      break;
 8004358:	bf00      	nop
    }
  } 
  
  return status; 
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e165      	b.n	8004650 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004384:	2201      	movs	r2, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	f040 8154 	bne.w	800464a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d00b      	beq.n	80043c2 <HAL_GPIO_Init+0x5a>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d007      	beq.n	80043c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043b6:	2b11      	cmp	r3, #17
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b12      	cmp	r3, #18
 80043c0:	d130      	bne.n	8004424 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f8:	2201      	movs	r2, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 0201 	and.w	r2, r3, #1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0xfc>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b12      	cmp	r3, #18
 8004462:	d123      	bne.n	80044ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	08da      	lsrs	r2, r3, #3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3208      	adds	r2, #8
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	220f      	movs	r2, #15
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	08da      	lsrs	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3208      	adds	r2, #8
 80044a6:	69b9      	ldr	r1, [r7, #24]
 80044a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0203 	and.w	r2, r3, #3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80ae 	beq.w	800464a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b5c      	ldr	r3, [pc, #368]	; (8004664 <HAL_GPIO_Init+0x2fc>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	4a5b      	ldr	r2, [pc, #364]	; (8004664 <HAL_GPIO_Init+0x2fc>)
 80044f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044fc:	6453      	str	r3, [r2, #68]	; 0x44
 80044fe:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_GPIO_Init+0x2fc>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450a:	4a57      	ldr	r2, [pc, #348]	; (8004668 <HAL_GPIO_Init+0x300>)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4e      	ldr	r2, [pc, #312]	; (800466c <HAL_GPIO_Init+0x304>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d025      	beq.n	8004582 <HAL_GPIO_Init+0x21a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_GPIO_Init+0x308>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01f      	beq.n	800457e <HAL_GPIO_Init+0x216>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <HAL_GPIO_Init+0x30c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d019      	beq.n	800457a <HAL_GPIO_Init+0x212>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4b      	ldr	r2, [pc, #300]	; (8004678 <HAL_GPIO_Init+0x310>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x20e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <HAL_GPIO_Init+0x314>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x20a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a49      	ldr	r2, [pc, #292]	; (8004680 <HAL_GPIO_Init+0x318>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x206>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a48      	ldr	r2, [pc, #288]	; (8004684 <HAL_GPIO_Init+0x31c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x202>
 8004566:	2306      	movs	r3, #6
 8004568:	e00c      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800456a:	2307      	movs	r3, #7
 800456c:	e00a      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800456e:	2305      	movs	r3, #5
 8004570:	e008      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 8004572:	2304      	movs	r3, #4
 8004574:	e006      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 8004576:	2303      	movs	r3, #3
 8004578:	e004      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800457a:	2302      	movs	r3, #2
 800457c:	e002      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 8004582:	2300      	movs	r3, #0
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	f002 0203 	and.w	r2, r2, #3
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	4093      	lsls	r3, r2
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004594:	4934      	ldr	r1, [pc, #208]	; (8004668 <HAL_GPIO_Init+0x300>)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	089b      	lsrs	r3, r3, #2
 800459a:	3302      	adds	r3, #2
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_GPIO_Init+0x320>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045c6:	4a30      	ldr	r2, [pc, #192]	; (8004688 <HAL_GPIO_Init+0x320>)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045cc:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_GPIO_Init+0x320>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <HAL_GPIO_Init+0x320>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045f6:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_GPIO_Init+0x320>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	43db      	mvns	r3, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800461a:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_GPIO_Init+0x320>)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <HAL_GPIO_Init+0x320>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004644:	4a10      	ldr	r2, [pc, #64]	; (8004688 <HAL_GPIO_Init+0x320>)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3301      	adds	r3, #1
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	f67f ae96 	bls.w	8004384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004658:	bf00      	nop
 800465a:	3724      	adds	r7, #36	; 0x24
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40023800 	.word	0x40023800
 8004668:	40013800 	.word	0x40013800
 800466c:	40020000 	.word	0x40020000
 8004670:	40020400 	.word	0x40020400
 8004674:	40020800 	.word	0x40020800
 8004678:	40020c00 	.word	0x40020c00
 800467c:	40021000 	.word	0x40021000
 8004680:	40021400 	.word	0x40021400
 8004684:	40021800 	.word	0x40021800
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
 8004698:	4613      	mov	r3, r2
 800469a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a8:	e003      	b.n	80046b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	041a      	lsls	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	619a      	str	r2, [r3, #24]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046d6:	4a05      	ldr	r2, [pc, #20]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fdf4 	bl	80032cc <HAL_GPIO_EXTI_Callback>
  }
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40013c00 	.word	0x40013c00

080046f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0cc      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b68      	ldr	r3, [pc, #416]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d90c      	bls.n	800472c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b65      	ldr	r3, [pc, #404]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b63      	ldr	r3, [pc, #396]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0b8      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004744:	4b59      	ldr	r3, [pc, #356]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a58      	ldr	r2, [pc, #352]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800474e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800475c:	4b53      	ldr	r3, [pc, #332]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a52      	ldr	r2, [pc, #328]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004768:	4b50      	ldr	r3, [pc, #320]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	494d      	ldr	r1, [pc, #308]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d044      	beq.n	8004810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	4b47      	ldr	r3, [pc, #284]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d119      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d003      	beq.n	80047ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ae:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e06f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e067      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4934      	ldr	r1, [pc, #208]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e0:	f7ff f84a 	bl	8003878 <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7ff f846 	bl	8003878 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e04f      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 020c 	and.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	429a      	cmp	r2, r3
 800480e:	d1eb      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004810:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d20c      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e032      	b.n	800489e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4916      	ldr	r1, [pc, #88]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	490e      	ldr	r1, [pc, #56]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004876:	f000 f855 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 800487a:	4601      	mov	r1, r0
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	5cd3      	ldrb	r3, [r2, r3]
 800488a:	fa21 f303 	lsr.w	r3, r1, r3
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe ffaa 	bl	80037f0 <HAL_InitTick>

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40023c00 	.word	0x40023c00
 80048ac:	40023800 	.word	0x40023800
 80048b0:	0800778c 	.word	0x0800778c
 80048b4:	20000014 	.word	0x20000014
 80048b8:	20000018 	.word	0x20000018

080048bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000014 	.word	0x20000014

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048d8:	f7ff fff0 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 80048dc:	4601      	mov	r1, r0
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	0a9b      	lsrs	r3, r3, #10
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4a03      	ldr	r2, [pc, #12]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ea:	5cd3      	ldrb	r3, [r2, r3]
 80048ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40023800 	.word	0x40023800
 80048f8:	0800779c 	.word	0x0800779c

080048fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004900:	f7ff ffdc 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 8004904:	4601      	mov	r1, r0
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	0b5b      	lsrs	r3, r3, #13
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40023800 	.word	0x40023800
 8004920:	0800779c 	.word	0x0800779c

08004924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493e:	4bc6      	ldr	r3, [pc, #792]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b0c      	cmp	r3, #12
 8004948:	f200 817e 	bhi.w	8004c48 <HAL_RCC_GetSysClockFreq+0x324>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <HAL_RCC_GetSysClockFreq+0x30>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004989 	.word	0x08004989
 8004958:	08004c49 	.word	0x08004c49
 800495c:	08004c49 	.word	0x08004c49
 8004960:	08004c49 	.word	0x08004c49
 8004964:	0800498f 	.word	0x0800498f
 8004968:	08004c49 	.word	0x08004c49
 800496c:	08004c49 	.word	0x08004c49
 8004970:	08004c49 	.word	0x08004c49
 8004974:	08004995 	.word	0x08004995
 8004978:	08004c49 	.word	0x08004c49
 800497c:	08004c49 	.word	0x08004c49
 8004980:	08004c49 	.word	0x08004c49
 8004984:	08004af1 	.word	0x08004af1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4bb4      	ldr	r3, [pc, #720]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x338>)
 800498a:	613b      	str	r3, [r7, #16]
       break;
 800498c:	e15f      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800498e:	4bb4      	ldr	r3, [pc, #720]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004990:	613b      	str	r3, [r7, #16]
      break;
 8004992:	e15c      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004994:	4bb0      	ldr	r3, [pc, #704]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800499c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800499e:	4bae      	ldr	r3, [pc, #696]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04a      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4bab      	ldr	r3, [pc, #684]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	f04f 0400 	mov.w	r4, #0
 80049b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	ea03 0501 	and.w	r5, r3, r1
 80049c0:	ea04 0602 	and.w	r6, r4, r2
 80049c4:	4629      	mov	r1, r5
 80049c6:	4632      	mov	r2, r6
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	f04f 0400 	mov.w	r4, #0
 80049d0:	0154      	lsls	r4, r2, #5
 80049d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049d6:	014b      	lsls	r3, r1, #5
 80049d8:	4619      	mov	r1, r3
 80049da:	4622      	mov	r2, r4
 80049dc:	1b49      	subs	r1, r1, r5
 80049de:	eb62 0206 	sbc.w	r2, r2, r6
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	f04f 0400 	mov.w	r4, #0
 80049ea:	0194      	lsls	r4, r2, #6
 80049ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049f0:	018b      	lsls	r3, r1, #6
 80049f2:	1a5b      	subs	r3, r3, r1
 80049f4:	eb64 0402 	sbc.w	r4, r4, r2
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	00e2      	lsls	r2, r4, #3
 8004a02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a06:	00d9      	lsls	r1, r3, #3
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	195b      	adds	r3, r3, r5
 8004a0e:	eb44 0406 	adc.w	r4, r4, r6
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	0262      	lsls	r2, r4, #9
 8004a1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a20:	0259      	lsls	r1, r3, #9
 8004a22:	460b      	mov	r3, r1
 8004a24:	4614      	mov	r4, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	4621      	mov	r1, r4
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f04f 0400 	mov.w	r4, #0
 8004a30:	461a      	mov	r2, r3
 8004a32:	4623      	mov	r3, r4
 8004a34:	f7fb fc44 	bl	80002c0 <__aeabi_uldivmod>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e049      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a40:	4b85      	ldr	r3, [pc, #532]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	f04f 0400 	mov.w	r4, #0
 8004a4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	ea03 0501 	and.w	r5, r3, r1
 8004a56:	ea04 0602 	and.w	r6, r4, r2
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	0154      	lsls	r4, r2, #5
 8004a68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a6c:	014b      	lsls	r3, r1, #5
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4622      	mov	r2, r4
 8004a72:	1b49      	subs	r1, r1, r5
 8004a74:	eb62 0206 	sbc.w	r2, r2, r6
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	f04f 0400 	mov.w	r4, #0
 8004a80:	0194      	lsls	r4, r2, #6
 8004a82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a86:	018b      	lsls	r3, r1, #6
 8004a88:	1a5b      	subs	r3, r3, r1
 8004a8a:	eb64 0402 	sbc.w	r4, r4, r2
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	00e2      	lsls	r2, r4, #3
 8004a98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a9c:	00d9      	lsls	r1, r3, #3
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	195b      	adds	r3, r3, r5
 8004aa4:	eb44 0406 	adc.w	r4, r4, r6
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	02a2      	lsls	r2, r4, #10
 8004ab2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ab6:	0299      	lsls	r1, r3, #10
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4614      	mov	r4, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	4621      	mov	r1, r4
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f04f 0400 	mov.w	r4, #0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4623      	mov	r3, r4
 8004aca:	f7fb fbf9 	bl	80002c0 <__aeabi_uldivmod>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ad4:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	613b      	str	r3, [r7, #16]
      break;
 8004aee:	e0ae      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afa:	4b57      	ldr	r3, [pc, #348]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04a      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b54      	ldr	r3, [pc, #336]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	ea03 0501 	and.w	r5, r3, r1
 8004b1c:	ea04 0602 	and.w	r6, r4, r2
 8004b20:	4629      	mov	r1, r5
 8004b22:	4632      	mov	r2, r6
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	0154      	lsls	r4, r2, #5
 8004b2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b32:	014b      	lsls	r3, r1, #5
 8004b34:	4619      	mov	r1, r3
 8004b36:	4622      	mov	r2, r4
 8004b38:	1b49      	subs	r1, r1, r5
 8004b3a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	f04f 0400 	mov.w	r4, #0
 8004b46:	0194      	lsls	r4, r2, #6
 8004b48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b4c:	018b      	lsls	r3, r1, #6
 8004b4e:	1a5b      	subs	r3, r3, r1
 8004b50:	eb64 0402 	sbc.w	r4, r4, r2
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	00e2      	lsls	r2, r4, #3
 8004b5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b62:	00d9      	lsls	r1, r3, #3
 8004b64:	460b      	mov	r3, r1
 8004b66:	4614      	mov	r4, r2
 8004b68:	195b      	adds	r3, r3, r5
 8004b6a:	eb44 0406 	adc.w	r4, r4, r6
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	0262      	lsls	r2, r4, #9
 8004b78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b7c:	0259      	lsls	r1, r3, #9
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	4621      	mov	r1, r4
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f04f 0400 	mov.w	r4, #0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	f7fb fb96 	bl	80002c0 <__aeabi_uldivmod>
 8004b94:	4603      	mov	r3, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e049      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	f04f 0400 	mov.w	r4, #0
 8004ba6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	ea03 0501 	and.w	r5, r3, r1
 8004bb2:	ea04 0602 	and.w	r6, r4, r2
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4632      	mov	r2, r6
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	f04f 0400 	mov.w	r4, #0
 8004bc2:	0154      	lsls	r4, r2, #5
 8004bc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bc8:	014b      	lsls	r3, r1, #5
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4622      	mov	r2, r4
 8004bce:	1b49      	subs	r1, r1, r5
 8004bd0:	eb62 0206 	sbc.w	r2, r2, r6
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	0194      	lsls	r4, r2, #6
 8004bde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004be2:	018b      	lsls	r3, r1, #6
 8004be4:	1a5b      	subs	r3, r3, r1
 8004be6:	eb64 0402 	sbc.w	r4, r4, r2
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bf8:	00d9      	lsls	r1, r3, #3
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	195b      	adds	r3, r3, r5
 8004c00:	eb44 0406 	adc.w	r4, r4, r6
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	02a2      	lsls	r2, r4, #10
 8004c0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c12:	0299      	lsls	r1, r3, #10
 8004c14:	460b      	mov	r3, r1
 8004c16:	4614      	mov	r4, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f04f 0400 	mov.w	r4, #0
 8004c22:	461a      	mov	r2, r3
 8004c24:	4623      	mov	r3, r4
 8004c26:	f7fb fb4b 	bl	80002c0 <__aeabi_uldivmod>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0f1b      	lsrs	r3, r3, #28
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	613b      	str	r3, [r7, #16]
      break;
 8004c46:	e002      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x338>)
 8004c4a:	613b      	str	r3, [r7, #16]
      break;
 8004c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4e:	693b      	ldr	r3, [r7, #16]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	007a1200 	.word	0x007a1200

08004c64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8083 	beq.w	8004d84 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c7e:	4b95      	ldr	r3, [pc, #596]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d019      	beq.n	8004cbe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c8a:	4b92      	ldr	r3, [pc, #584]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c96:	4b8f      	ldr	r3, [pc, #572]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca2:	d00c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca4:	4b8b      	ldr	r3, [pc, #556]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	d112      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb0:	4b88      	ldr	r3, [pc, #544]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbe:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d05b      	beq.n	8004d82 <HAL_RCC_OscConfig+0x11e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d157      	bne.n	8004d82 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e216      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x8a>
 8004ce0:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a7b      	ldr	r2, [pc, #492]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e01d      	b.n	8004d2a <HAL_RCC_OscConfig+0xc6>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCC_OscConfig+0xae>
 8004cf8:	4b76      	ldr	r3, [pc, #472]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a75      	ldr	r2, [pc, #468]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b73      	ldr	r3, [pc, #460]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a72      	ldr	r2, [pc, #456]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e00b      	b.n	8004d2a <HAL_RCC_OscConfig+0xc6>
 8004d12:	4b70      	ldr	r3, [pc, #448]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6f      	ldr	r2, [pc, #444]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b6d      	ldr	r3, [pc, #436]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6c      	ldr	r2, [pc, #432]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d013      	beq.n	8004d5a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe fda1 	bl	8003878 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d3a:	f7fe fd9d 	bl	8003878 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e1db      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4c:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0xd6>
 8004d58:	e014      	b.n	8004d84 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fd8d 	bl	8003878 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d62:	f7fe fd89 	bl	8003878 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	; 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e1c7      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d74:	4b57      	ldr	r3, [pc, #348]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0xfe>
 8004d80:	e000      	b.n	8004d84 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d06f      	beq.n	8004e70 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d90:	4b50      	ldr	r3, [pc, #320]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d017      	beq.n	8004dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d9c:	4b4d      	ldr	r3, [pc, #308]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d105      	bne.n	8004db4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004da8:	4b4a      	ldr	r3, [pc, #296]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db4:	4b47      	ldr	r3, [pc, #284]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d11c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc0:	4b44      	ldr	r3, [pc, #272]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d116      	bne.n	8004dfa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dcc:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_OscConfig+0x180>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e18f      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4938      	ldr	r1, [pc, #224]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df8:	e03a      	b.n	8004e70 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d020      	beq.n	8004e44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e02:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <HAL_RCC_OscConfig+0x274>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fe fd36 	bl	8003878 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fe fd32 	bl	8003878 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e170      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	4b2c      	ldr	r3, [pc, #176]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2e:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4925      	ldr	r1, [pc, #148]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
 8004e42:	e015      	b.n	8004e70 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e44:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCC_OscConfig+0x274>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7fe fd15 	bl	8003878 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e52:	f7fe fd11 	bl	8003878 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e14f      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e64:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d037      	beq.n	8004eec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e84:	4b15      	ldr	r3, [pc, #84]	; (8004edc <HAL_RCC_OscConfig+0x278>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8a:	f7fe fcf5 	bl	8003878 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e92:	f7fe fcf1 	bl	8003878 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e12f      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCC_OscConfig+0x22e>
 8004eb0:	e01c      	b.n	8004eec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_RCC_OscConfig+0x278>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fe fcde 	bl	8003878 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ebe:	e00f      	b.n	8004ee0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fe fcda 	bl	8003878 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d908      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e118      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	42470000 	.word	0x42470000
 8004edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee0:	4b8a      	ldr	r3, [pc, #552]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e9      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8097 	beq.w	8005028 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b83      	ldr	r3, [pc, #524]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10f      	bne.n	8004f2a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	4b7f      	ldr	r3, [pc, #508]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	4a7e      	ldr	r2, [pc, #504]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1a:	4b7c      	ldr	r3, [pc, #496]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2a:	4b79      	ldr	r3, [pc, #484]	; (8005110 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d118      	bne.n	8004f68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f36:	4b76      	ldr	r3, [pc, #472]	; (8005110 <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a75      	ldr	r2, [pc, #468]	; (8005110 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f42:	f7fe fc99 	bl	8003878 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4a:	f7fe fc95 	bl	8003878 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e0d3      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <HAL_RCC_OscConfig+0x4ac>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x31a>
 8004f70:	4b66      	ldr	r3, [pc, #408]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a65      	ldr	r2, [pc, #404]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	e01c      	b.n	8004fb8 <HAL_RCC_OscConfig+0x354>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x33c>
 8004f86:	4b61      	ldr	r3, [pc, #388]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a60      	ldr	r2, [pc, #384]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f8c:	f043 0304 	orr.w	r3, r3, #4
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
 8004f92:	4b5e      	ldr	r3, [pc, #376]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	4a5d      	ldr	r2, [pc, #372]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCC_OscConfig+0x354>
 8004fa0:	4b5a      	ldr	r3, [pc, #360]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	4a59      	ldr	r2, [pc, #356]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
 8004fac:	4b57      	ldr	r3, [pc, #348]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	4a56      	ldr	r2, [pc, #344]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fe fc5a 	bl	8003878 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fe fc56 	bl	8003878 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e092      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fde:	4b4b      	ldr	r3, [pc, #300]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ee      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x364>
 8004fea:	e014      	b.n	8005016 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fe fc44 	bl	8003878 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fe fc40 	bl	8003878 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e07c      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500a:	4b40      	ldr	r3, [pc, #256]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ee      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d105      	bne.n	8005028 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501c:	4b3b      	ldr	r3, [pc, #236]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	4a3a      	ldr	r2, [pc, #232]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8005022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005026:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d068      	beq.n	8005102 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005030:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
 8005038:	2b08      	cmp	r3, #8
 800503a:	d060      	beq.n	80050fe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d145      	bne.n	80050d0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005044:	4b33      	ldr	r3, [pc, #204]	; (8005114 <HAL_RCC_OscConfig+0x4b0>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fe fc15 	bl	8003878 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005052:	f7fe fc11 	bl	8003878 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e04f      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005064:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f0      	bne.n	8005052 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	019b      	lsls	r3, r3, #6
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	3b01      	subs	r3, #1
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	071b      	lsls	r3, r3, #28
 800509c:	491b      	ldr	r1, [pc, #108]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <HAL_RCC_OscConfig+0x4b0>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fe fbe6 	bl	8003878 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b0:	f7fe fbe2 	bl	8003878 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e020      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x44c>
 80050ce:	e018      	b.n	8005102 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <HAL_RCC_OscConfig+0x4b0>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fe fbcf 	bl	8003878 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050de:	f7fe fbcb 	bl	8003878 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e009      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_RCC_OscConfig+0x4a8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f0      	bne.n	80050de <HAL_RCC_OscConfig+0x47a>
 80050fc:	e001      	b.n	8005102 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	40007000 	.word	0x40007000
 8005114:	42470060 	.word	0x42470060

08005118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e01d      	b.n	8005166 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fe f9c0 	bl	80034c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f000 fa64 	bl	8005624 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b06      	cmp	r3, #6
 800518e:	d007      	beq.n	80051a0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <HAL_TIM_Base_Stop+0x40>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a1a      	ldr	r2, [r3, #32]
 80051dc:	f240 4344 	movw	r3, #1092	; 0x444
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <HAL_TIM_Base_Stop+0x40>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b06      	cmp	r3, #6
 8005234:	d007      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0202 	mvn.w	r2, #2
 8005280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f9a5 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f997 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f9a8 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0204 	mvn.w	r2, #4
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f97b 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f96d 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f97e 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b08      	cmp	r3, #8
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0208 	mvn.w	r2, #8
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2204      	movs	r2, #4
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f951 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f943 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f954 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b10      	cmp	r3, #16
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b10      	cmp	r3, #16
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0210 	mvn.w	r2, #16
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2208      	movs	r2, #8
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f927 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f919 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f92a 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10e      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d107      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0201 	mvn.w	r2, #1
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd ff68 	bl	80032a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d10e      	bne.n	8005404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fad0 	bl	80059a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d10e      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d107      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8ef 	bl	800560e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d10e      	bne.n	800545c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b20      	cmp	r3, #32
 800544a:	d107      	bne.n	800545c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0220 	mvn.w	r2, #32
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fa9a 	bl	8005990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIM_ConfigClockSource+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e0a6      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x166>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800549a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d067      	beq.n	8005584 <HAL_TIM_ConfigClockSource+0x120>
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d80b      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x6c>
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d073      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x140>
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d802      	bhi.n	80054c6 <HAL_TIM_ConfigClockSource+0x62>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d06f      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80054c4:	e078      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d06c      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x140>
 80054ca:	2b30      	cmp	r3, #48	; 0x30
 80054cc:	d06a      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054ce:	e073      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d00d      	beq.n	80054f0 <HAL_TIM_ConfigClockSource+0x8c>
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d804      	bhi.n	80054e2 <HAL_TIM_ConfigClockSource+0x7e>
 80054d8:	2b50      	cmp	r3, #80	; 0x50
 80054da:	d033      	beq.n	8005544 <HAL_TIM_ConfigClockSource+0xe0>
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d041      	beq.n	8005564 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80054e0:	e06a      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e6:	d066      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x152>
 80054e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ec:	d017      	beq.n	800551e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80054ee:	e063      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6899      	ldr	r1, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f000 f9aa 	bl	8005858 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005512:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	609a      	str	r2, [r3, #8]
      break;
 800551c:	e04c      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6899      	ldr	r1, [r3, #8]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f000 f993 	bl	8005858 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005540:	609a      	str	r2, [r3, #8]
      break;
 8005542:	e039      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	461a      	mov	r2, r3
 8005552:	f000 f907 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2150      	movs	r1, #80	; 0x50
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f960 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8005562:	e029      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	461a      	mov	r2, r3
 8005572:	f000 f926 	bl	80057c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2160      	movs	r1, #96	; 0x60
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f950 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8005582:	e019      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	461a      	mov	r2, r3
 8005592:	f000 f8e7 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2140      	movs	r1, #64	; 0x40
 800559c:	4618      	mov	r0, r3
 800559e:	f000 f940 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 80055a2:	e009      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f000 f937 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 80055b4:	e000      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80055b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a40      	ldr	r2, [pc, #256]	; (8005738 <TIM_Base_SetConfig+0x114>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005642:	d00f      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3d      	ldr	r2, [pc, #244]	; (800573c <TIM_Base_SetConfig+0x118>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3c      	ldr	r2, [pc, #240]	; (8005740 <TIM_Base_SetConfig+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3b      	ldr	r2, [pc, #236]	; (8005744 <TIM_Base_SetConfig+0x120>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3a      	ldr	r2, [pc, #232]	; (8005748 <TIM_Base_SetConfig+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d108      	bne.n	8005676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <TIM_Base_SetConfig+0x114>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d02b      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005684:	d027      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2c      	ldr	r2, [pc, #176]	; (800573c <TIM_Base_SetConfig+0x118>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d023      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2b      	ldr	r2, [pc, #172]	; (8005740 <TIM_Base_SetConfig+0x11c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01f      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <TIM_Base_SetConfig+0x120>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01b      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a29      	ldr	r2, [pc, #164]	; (8005748 <TIM_Base_SetConfig+0x124>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d017      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a28      	ldr	r2, [pc, #160]	; (800574c <TIM_Base_SetConfig+0x128>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a27      	ldr	r2, [pc, #156]	; (8005750 <TIM_Base_SetConfig+0x12c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a26      	ldr	r2, [pc, #152]	; (8005754 <TIM_Base_SetConfig+0x130>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a25      	ldr	r2, [pc, #148]	; (8005758 <TIM_Base_SetConfig+0x134>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a24      	ldr	r2, [pc, #144]	; (800575c <TIM_Base_SetConfig+0x138>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a23      	ldr	r2, [pc, #140]	; (8005760 <TIM_Base_SetConfig+0x13c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d108      	bne.n	80056e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <TIM_Base_SetConfig+0x114>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0xf8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0c      	ldr	r2, [pc, #48]	; (8005748 <TIM_Base_SetConfig+0x124>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d103      	bne.n	8005724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	615a      	str	r2, [r3, #20]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40010400 	.word	0x40010400
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	40001800 	.word	0x40001800
 800575c:	40001c00 	.word	0x40001c00
 8005760:	40002000 	.word	0x40002000

08005764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 030a 	bic.w	r3, r3, #10
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b087      	sub	sp, #28
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0210 	bic.w	r2, r3, #16
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	031b      	lsls	r3, r3, #12
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	f043 0307 	orr.w	r3, r3, #7
 8005844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	431a      	orrs	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	609a      	str	r2, [r3, #8]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e05a      	b.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a21      	ldr	r2, [pc, #132]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d01d      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10c      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4313      	orrs	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40010400 	.word	0x40010400
 8005988:	40014000 	.word	0x40014000
 800598c:	40001800 	.word	0x40001800

08005990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e03f      	b.n	8005a4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fd fdc2 	bl	8003568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	; 0x24
 80059e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fb97 	bl	8006130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b088      	sub	sp, #32
 8005a56:	af02      	add	r7, sp, #8
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	f040 8083 	bne.w	8005b7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_UART_Transmit+0x2e>
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e07b      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Transmit+0x40>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e074      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005aa8:	f7fd fee6 	bl	8003878 <HAL_GetTick>
 8005aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005ac2:	e042      	b.n	8005b4a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ada:	d122      	bne.n	8005b22 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f9b6 	bl	8005e58 <UART_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e042      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	3302      	adds	r3, #2
 8005b16:	60bb      	str	r3, [r7, #8]
 8005b18:	e017      	b.n	8005b4a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	e013      	b.n	8005b4a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f993 	bl	8005e58 <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e01f      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	60ba      	str	r2, [r7, #8]
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1b7      	bne.n	8005ac4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2140      	movs	r1, #64	; 0x40
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f97a 	bl	8005e58 <UART_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d140      	bne.n	8005c20 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <HAL_UART_Receive_IT+0x26>
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e039      	b.n	8005c22 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Receive_IT+0x38>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e032      	b.n	8005c22 <HAL_UART_Receive_IT+0x9e>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	88fa      	ldrh	r2, [r7, #6]
 8005bce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2222      	movs	r2, #34	; 0x22
 8005be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bfa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0220 	orr.w	r2, r2, #32
 8005c1a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10d      	bne.n	8005c82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_UART_IRQHandler+0x52>
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9d6 	bl	800602c <UART_Receive_IT>
      return;
 8005c80:	e0d1      	b.n	8005e26 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80b0 	beq.w	8005dea <HAL_UART_IRQHandler+0x1ba>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <HAL_UART_IRQHandler+0x70>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80a5 	beq.w	8005dea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x90>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xb0>
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	f043 0202 	orr.w	r2, r3, #2
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_UART_IRQHandler+0xd0>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	f043 0204 	orr.w	r2, r3, #4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00f      	beq.n	8005d2a <HAL_UART_IRQHandler+0xfa>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_UART_IRQHandler+0xee>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	f043 0208 	orr.w	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d078      	beq.n	8005e24 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_UART_IRQHandler+0x11c>
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f970 	bl	800602c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	bf0c      	ite	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	2300      	movne	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <HAL_UART_IRQHandler+0x144>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d031      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f8b9 	bl	8005eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d123      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d96:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d013      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <HAL_UART_IRQHandler+0x1fc>)
 8005da6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe f87f 	bl	8003eb0 <HAL_DMA_Abort_IT>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d016      	beq.n	8005de6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc6:	e00e      	b.n	8005de6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f83b 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dce:	e00a      	b.n	8005de6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f837 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd6:	e006      	b.n	8005de6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f833 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005de4:	e01e      	b.n	8005e24 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de6:	bf00      	nop
    return;
 8005de8:	e01c      	b.n	8005e24 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_UART_IRQHandler+0x1d6>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f8a6 	bl	8005f50 <UART_Transmit_IT>
    return;
 8005e04:	e00f      	b.n	8005e26 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_UART_IRQHandler+0x1f6>
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f8ee 	bl	8005ffc <UART_EndTransmit_IT>
    return;
 8005e20:	bf00      	nop
 8005e22:	e000      	b.n	8005e26 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005e24:	bf00      	nop
  }
}
 8005e26:	3720      	adds	r7, #32
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	08005f29 	.word	0x08005f29

08005e30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e68:	e02c      	b.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d028      	beq.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e78:	f7fd fcfe 	bl	8003878 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d21d      	bcs.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e00f      	b.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d0c3      	beq.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff ff7e 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b21      	cmp	r3, #33	; 0x21
 8005f62:	d144      	bne.n	8005fee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d11a      	bne.n	8005fa4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f82:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	621a      	str	r2, [r3, #32]
 8005f96:	e00e      	b.n	8005fb6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	621a      	str	r2, [r3, #32]
 8005fa2:	e008      	b.n	8005fb6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6211      	str	r1, [r2, #32]
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e000      	b.n	8005ff0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005fee:	2302      	movs	r3, #2
  }
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006012:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ff07 	bl	8005e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b22      	cmp	r3, #34	; 0x22
 800603e:	d171      	bne.n	8006124 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006048:	d123      	bne.n	8006092 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10e      	bne.n	8006076 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	1c9a      	adds	r2, r3, #2
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	629a      	str	r2, [r3, #40]	; 0x28
 8006074:	e029      	b.n	80060ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	b29b      	uxth	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28
 8006090:	e01b      	b.n	80060ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6858      	ldr	r0, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	1c59      	adds	r1, r3, #1
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6291      	str	r1, [r2, #40]	; 0x28
 80060aa:	b2c2      	uxtb	r2, r0
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e00c      	b.n	80060ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	1c58      	adds	r0, r3, #1
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	6288      	str	r0, [r1, #40]	; 0x28
 80060c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4619      	mov	r1, r3
 80060d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d120      	bne.n	8006120 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0220 	bic.w	r2, r2, #32
 80060ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fd f8f2 	bl	8003300 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e002      	b.n	8006126 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006172:	f023 030c 	bic.w	r3, r3, #12
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	430b      	orrs	r3, r1
 800617e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619e:	f040 818b 	bne.w	80064b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4ac1      	ldr	r2, [pc, #772]	; (80064ac <UART_SetConfig+0x37c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d005      	beq.n	80061b8 <UART_SetConfig+0x88>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4abf      	ldr	r2, [pc, #764]	; (80064b0 <UART_SetConfig+0x380>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f040 80bd 	bne.w	8006332 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b8:	f7fe fba0 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 80061bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	461d      	mov	r5, r3
 80061c2:	f04f 0600 	mov.w	r6, #0
 80061c6:	46a8      	mov	r8, r5
 80061c8:	46b1      	mov	r9, r6
 80061ca:	eb18 0308 	adds.w	r3, r8, r8
 80061ce:	eb49 0409 	adc.w	r4, r9, r9
 80061d2:	4698      	mov	r8, r3
 80061d4:	46a1      	mov	r9, r4
 80061d6:	eb18 0805 	adds.w	r8, r8, r5
 80061da:	eb49 0906 	adc.w	r9, r9, r6
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061f2:	4688      	mov	r8, r1
 80061f4:	4691      	mov	r9, r2
 80061f6:	eb18 0005 	adds.w	r0, r8, r5
 80061fa:	eb49 0106 	adc.w	r1, r9, r6
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	461d      	mov	r5, r3
 8006204:	f04f 0600 	mov.w	r6, #0
 8006208:	196b      	adds	r3, r5, r5
 800620a:	eb46 0406 	adc.w	r4, r6, r6
 800620e:	461a      	mov	r2, r3
 8006210:	4623      	mov	r3, r4
 8006212:	f7fa f855 	bl	80002c0 <__aeabi_uldivmod>
 8006216:	4603      	mov	r3, r0
 8006218:	460c      	mov	r4, r1
 800621a:	461a      	mov	r2, r3
 800621c:	4ba5      	ldr	r3, [pc, #660]	; (80064b4 <UART_SetConfig+0x384>)
 800621e:	fba3 2302 	umull	r2, r3, r3, r2
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	461d      	mov	r5, r3
 800622c:	f04f 0600 	mov.w	r6, #0
 8006230:	46a9      	mov	r9, r5
 8006232:	46b2      	mov	sl, r6
 8006234:	eb19 0309 	adds.w	r3, r9, r9
 8006238:	eb4a 040a 	adc.w	r4, sl, sl
 800623c:	4699      	mov	r9, r3
 800623e:	46a2      	mov	sl, r4
 8006240:	eb19 0905 	adds.w	r9, r9, r5
 8006244:	eb4a 0a06 	adc.w	sl, sl, r6
 8006248:	f04f 0100 	mov.w	r1, #0
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800625c:	4689      	mov	r9, r1
 800625e:	4692      	mov	sl, r2
 8006260:	eb19 0005 	adds.w	r0, r9, r5
 8006264:	eb4a 0106 	adc.w	r1, sl, r6
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	461d      	mov	r5, r3
 800626e:	f04f 0600 	mov.w	r6, #0
 8006272:	196b      	adds	r3, r5, r5
 8006274:	eb46 0406 	adc.w	r4, r6, r6
 8006278:	461a      	mov	r2, r3
 800627a:	4623      	mov	r3, r4
 800627c:	f7fa f820 	bl	80002c0 <__aeabi_uldivmod>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	461a      	mov	r2, r3
 8006286:	4b8b      	ldr	r3, [pc, #556]	; (80064b4 <UART_SetConfig+0x384>)
 8006288:	fba3 1302 	umull	r1, r3, r3, r2
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	2164      	movs	r1, #100	; 0x64
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	3332      	adds	r3, #50	; 0x32
 800629a:	4a86      	ldr	r2, [pc, #536]	; (80064b4 <UART_SetConfig+0x384>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062a8:	4498      	add	r8, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	461d      	mov	r5, r3
 80062ae:	f04f 0600 	mov.w	r6, #0
 80062b2:	46a9      	mov	r9, r5
 80062b4:	46b2      	mov	sl, r6
 80062b6:	eb19 0309 	adds.w	r3, r9, r9
 80062ba:	eb4a 040a 	adc.w	r4, sl, sl
 80062be:	4699      	mov	r9, r3
 80062c0:	46a2      	mov	sl, r4
 80062c2:	eb19 0905 	adds.w	r9, r9, r5
 80062c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80062ca:	f04f 0100 	mov.w	r1, #0
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062de:	4689      	mov	r9, r1
 80062e0:	4692      	mov	sl, r2
 80062e2:	eb19 0005 	adds.w	r0, r9, r5
 80062e6:	eb4a 0106 	adc.w	r1, sl, r6
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	461d      	mov	r5, r3
 80062f0:	f04f 0600 	mov.w	r6, #0
 80062f4:	196b      	adds	r3, r5, r5
 80062f6:	eb46 0406 	adc.w	r4, r6, r6
 80062fa:	461a      	mov	r2, r3
 80062fc:	4623      	mov	r3, r4
 80062fe:	f7f9 ffdf 	bl	80002c0 <__aeabi_uldivmod>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	461a      	mov	r2, r3
 8006308:	4b6a      	ldr	r3, [pc, #424]	; (80064b4 <UART_SetConfig+0x384>)
 800630a:	fba3 1302 	umull	r1, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	2164      	movs	r1, #100	; 0x64
 8006312:	fb01 f303 	mul.w	r3, r1, r3
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	3332      	adds	r3, #50	; 0x32
 800631c:	4a65      	ldr	r2, [pc, #404]	; (80064b4 <UART_SetConfig+0x384>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	f003 0207 	and.w	r2, r3, #7
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4442      	add	r2, r8
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	e26f      	b.n	8006812 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006332:	f7fe facf 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8006336:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	461d      	mov	r5, r3
 800633c:	f04f 0600 	mov.w	r6, #0
 8006340:	46a8      	mov	r8, r5
 8006342:	46b1      	mov	r9, r6
 8006344:	eb18 0308 	adds.w	r3, r8, r8
 8006348:	eb49 0409 	adc.w	r4, r9, r9
 800634c:	4698      	mov	r8, r3
 800634e:	46a1      	mov	r9, r4
 8006350:	eb18 0805 	adds.w	r8, r8, r5
 8006354:	eb49 0906 	adc.w	r9, r9, r6
 8006358:	f04f 0100 	mov.w	r1, #0
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006364:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006368:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800636c:	4688      	mov	r8, r1
 800636e:	4691      	mov	r9, r2
 8006370:	eb18 0005 	adds.w	r0, r8, r5
 8006374:	eb49 0106 	adc.w	r1, r9, r6
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	461d      	mov	r5, r3
 800637e:	f04f 0600 	mov.w	r6, #0
 8006382:	196b      	adds	r3, r5, r5
 8006384:	eb46 0406 	adc.w	r4, r6, r6
 8006388:	461a      	mov	r2, r3
 800638a:	4623      	mov	r3, r4
 800638c:	f7f9 ff98 	bl	80002c0 <__aeabi_uldivmod>
 8006390:	4603      	mov	r3, r0
 8006392:	460c      	mov	r4, r1
 8006394:	461a      	mov	r2, r3
 8006396:	4b47      	ldr	r3, [pc, #284]	; (80064b4 <UART_SetConfig+0x384>)
 8006398:	fba3 2302 	umull	r2, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	461d      	mov	r5, r3
 80063a6:	f04f 0600 	mov.w	r6, #0
 80063aa:	46a9      	mov	r9, r5
 80063ac:	46b2      	mov	sl, r6
 80063ae:	eb19 0309 	adds.w	r3, r9, r9
 80063b2:	eb4a 040a 	adc.w	r4, sl, sl
 80063b6:	4699      	mov	r9, r3
 80063b8:	46a2      	mov	sl, r4
 80063ba:	eb19 0905 	adds.w	r9, r9, r5
 80063be:	eb4a 0a06 	adc.w	sl, sl, r6
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063d6:	4689      	mov	r9, r1
 80063d8:	4692      	mov	sl, r2
 80063da:	eb19 0005 	adds.w	r0, r9, r5
 80063de:	eb4a 0106 	adc.w	r1, sl, r6
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	461d      	mov	r5, r3
 80063e8:	f04f 0600 	mov.w	r6, #0
 80063ec:	196b      	adds	r3, r5, r5
 80063ee:	eb46 0406 	adc.w	r4, r6, r6
 80063f2:	461a      	mov	r2, r3
 80063f4:	4623      	mov	r3, r4
 80063f6:	f7f9 ff63 	bl	80002c0 <__aeabi_uldivmod>
 80063fa:	4603      	mov	r3, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	461a      	mov	r2, r3
 8006400:	4b2c      	ldr	r3, [pc, #176]	; (80064b4 <UART_SetConfig+0x384>)
 8006402:	fba3 1302 	umull	r1, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2164      	movs	r1, #100	; 0x64
 800640a:	fb01 f303 	mul.w	r3, r1, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	3332      	adds	r3, #50	; 0x32
 8006414:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <UART_SetConfig+0x384>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006422:	4498      	add	r8, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	461d      	mov	r5, r3
 8006428:	f04f 0600 	mov.w	r6, #0
 800642c:	46a9      	mov	r9, r5
 800642e:	46b2      	mov	sl, r6
 8006430:	eb19 0309 	adds.w	r3, r9, r9
 8006434:	eb4a 040a 	adc.w	r4, sl, sl
 8006438:	4699      	mov	r9, r3
 800643a:	46a2      	mov	sl, r4
 800643c:	eb19 0905 	adds.w	r9, r9, r5
 8006440:	eb4a 0a06 	adc.w	sl, sl, r6
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006458:	4689      	mov	r9, r1
 800645a:	4692      	mov	sl, r2
 800645c:	eb19 0005 	adds.w	r0, r9, r5
 8006460:	eb4a 0106 	adc.w	r1, sl, r6
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	461d      	mov	r5, r3
 800646a:	f04f 0600 	mov.w	r6, #0
 800646e:	196b      	adds	r3, r5, r5
 8006470:	eb46 0406 	adc.w	r4, r6, r6
 8006474:	461a      	mov	r2, r3
 8006476:	4623      	mov	r3, r4
 8006478:	f7f9 ff22 	bl	80002c0 <__aeabi_uldivmod>
 800647c:	4603      	mov	r3, r0
 800647e:	460c      	mov	r4, r1
 8006480:	461a      	mov	r2, r3
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <UART_SetConfig+0x384>)
 8006484:	fba3 1302 	umull	r1, r3, r3, r2
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	2164      	movs	r1, #100	; 0x64
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	3332      	adds	r3, #50	; 0x32
 8006496:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <UART_SetConfig+0x384>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	f003 0207 	and.w	r2, r3, #7
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4442      	add	r2, r8
 80064a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80064aa:	e1b2      	b.n	8006812 <UART_SetConfig+0x6e2>
 80064ac:	40011000 	.word	0x40011000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4ad7      	ldr	r2, [pc, #860]	; (800681c <UART_SetConfig+0x6ec>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d005      	beq.n	80064ce <UART_SetConfig+0x39e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4ad6      	ldr	r2, [pc, #856]	; (8006820 <UART_SetConfig+0x6f0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	f040 80d1 	bne.w	8006670 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80064ce:	f7fe fa15 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 80064d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	469a      	mov	sl, r3
 80064d8:	f04f 0b00 	mov.w	fp, #0
 80064dc:	46d0      	mov	r8, sl
 80064de:	46d9      	mov	r9, fp
 80064e0:	eb18 0308 	adds.w	r3, r8, r8
 80064e4:	eb49 0409 	adc.w	r4, r9, r9
 80064e8:	4698      	mov	r8, r3
 80064ea:	46a1      	mov	r9, r4
 80064ec:	eb18 080a 	adds.w	r8, r8, sl
 80064f0:	eb49 090b 	adc.w	r9, r9, fp
 80064f4:	f04f 0100 	mov.w	r1, #0
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006500:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006504:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006508:	4688      	mov	r8, r1
 800650a:	4691      	mov	r9, r2
 800650c:	eb1a 0508 	adds.w	r5, sl, r8
 8006510:	eb4b 0609 	adc.w	r6, fp, r9
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4619      	mov	r1, r3
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	f04f 0400 	mov.w	r4, #0
 8006526:	0094      	lsls	r4, r2, #2
 8006528:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800652c:	008b      	lsls	r3, r1, #2
 800652e:	461a      	mov	r2, r3
 8006530:	4623      	mov	r3, r4
 8006532:	4628      	mov	r0, r5
 8006534:	4631      	mov	r1, r6
 8006536:	f7f9 fec3 	bl	80002c0 <__aeabi_uldivmod>
 800653a:	4603      	mov	r3, r0
 800653c:	460c      	mov	r4, r1
 800653e:	461a      	mov	r2, r3
 8006540:	4bb8      	ldr	r3, [pc, #736]	; (8006824 <UART_SetConfig+0x6f4>)
 8006542:	fba3 2302 	umull	r2, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	469b      	mov	fp, r3
 8006550:	f04f 0c00 	mov.w	ip, #0
 8006554:	46d9      	mov	r9, fp
 8006556:	46e2      	mov	sl, ip
 8006558:	eb19 0309 	adds.w	r3, r9, r9
 800655c:	eb4a 040a 	adc.w	r4, sl, sl
 8006560:	4699      	mov	r9, r3
 8006562:	46a2      	mov	sl, r4
 8006564:	eb19 090b 	adds.w	r9, r9, fp
 8006568:	eb4a 0a0c 	adc.w	sl, sl, ip
 800656c:	f04f 0100 	mov.w	r1, #0
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800657c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006580:	4689      	mov	r9, r1
 8006582:	4692      	mov	sl, r2
 8006584:	eb1b 0509 	adds.w	r5, fp, r9
 8006588:	eb4c 060a 	adc.w	r6, ip, sl
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4619      	mov	r1, r3
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	f04f 0400 	mov.w	r4, #0
 800659e:	0094      	lsls	r4, r2, #2
 80065a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065a4:	008b      	lsls	r3, r1, #2
 80065a6:	461a      	mov	r2, r3
 80065a8:	4623      	mov	r3, r4
 80065aa:	4628      	mov	r0, r5
 80065ac:	4631      	mov	r1, r6
 80065ae:	f7f9 fe87 	bl	80002c0 <__aeabi_uldivmod>
 80065b2:	4603      	mov	r3, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	461a      	mov	r2, r3
 80065b8:	4b9a      	ldr	r3, [pc, #616]	; (8006824 <UART_SetConfig+0x6f4>)
 80065ba:	fba3 1302 	umull	r1, r3, r3, r2
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2164      	movs	r1, #100	; 0x64
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	3332      	adds	r3, #50	; 0x32
 80065cc:	4a95      	ldr	r2, [pc, #596]	; (8006824 <UART_SetConfig+0x6f4>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065d8:	4498      	add	r8, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	469b      	mov	fp, r3
 80065de:	f04f 0c00 	mov.w	ip, #0
 80065e2:	46d9      	mov	r9, fp
 80065e4:	46e2      	mov	sl, ip
 80065e6:	eb19 0309 	adds.w	r3, r9, r9
 80065ea:	eb4a 040a 	adc.w	r4, sl, sl
 80065ee:	4699      	mov	r9, r3
 80065f0:	46a2      	mov	sl, r4
 80065f2:	eb19 090b 	adds.w	r9, r9, fp
 80065f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065fa:	f04f 0100 	mov.w	r1, #0
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800660a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800660e:	4689      	mov	r9, r1
 8006610:	4692      	mov	sl, r2
 8006612:	eb1b 0509 	adds.w	r5, fp, r9
 8006616:	eb4c 060a 	adc.w	r6, ip, sl
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4619      	mov	r1, r3
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	f04f 0400 	mov.w	r4, #0
 800662c:	0094      	lsls	r4, r2, #2
 800662e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006632:	008b      	lsls	r3, r1, #2
 8006634:	461a      	mov	r2, r3
 8006636:	4623      	mov	r3, r4
 8006638:	4628      	mov	r0, r5
 800663a:	4631      	mov	r1, r6
 800663c:	f7f9 fe40 	bl	80002c0 <__aeabi_uldivmod>
 8006640:	4603      	mov	r3, r0
 8006642:	460c      	mov	r4, r1
 8006644:	461a      	mov	r2, r3
 8006646:	4b77      	ldr	r3, [pc, #476]	; (8006824 <UART_SetConfig+0x6f4>)
 8006648:	fba3 1302 	umull	r1, r3, r3, r2
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	2164      	movs	r1, #100	; 0x64
 8006650:	fb01 f303 	mul.w	r3, r1, r3
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	3332      	adds	r3, #50	; 0x32
 800665a:	4a72      	ldr	r2, [pc, #456]	; (8006824 <UART_SetConfig+0x6f4>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4442      	add	r2, r8
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	e0d0      	b.n	8006812 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fe f930 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8006674:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	469a      	mov	sl, r3
 800667a:	f04f 0b00 	mov.w	fp, #0
 800667e:	46d0      	mov	r8, sl
 8006680:	46d9      	mov	r9, fp
 8006682:	eb18 0308 	adds.w	r3, r8, r8
 8006686:	eb49 0409 	adc.w	r4, r9, r9
 800668a:	4698      	mov	r8, r3
 800668c:	46a1      	mov	r9, r4
 800668e:	eb18 080a 	adds.w	r8, r8, sl
 8006692:	eb49 090b 	adc.w	r9, r9, fp
 8006696:	f04f 0100 	mov.w	r1, #0
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066aa:	4688      	mov	r8, r1
 80066ac:	4691      	mov	r9, r2
 80066ae:	eb1a 0508 	adds.w	r5, sl, r8
 80066b2:	eb4b 0609 	adc.w	r6, fp, r9
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4619      	mov	r1, r3
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	f04f 0400 	mov.w	r4, #0
 80066c8:	0094      	lsls	r4, r2, #2
 80066ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066ce:	008b      	lsls	r3, r1, #2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	4631      	mov	r1, r6
 80066d8:	f7f9 fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80066dc:	4603      	mov	r3, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b50      	ldr	r3, [pc, #320]	; (8006824 <UART_SetConfig+0x6f4>)
 80066e4:	fba3 2302 	umull	r2, r3, r3, r2
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	469b      	mov	fp, r3
 80066f2:	f04f 0c00 	mov.w	ip, #0
 80066f6:	46d9      	mov	r9, fp
 80066f8:	46e2      	mov	sl, ip
 80066fa:	eb19 0309 	adds.w	r3, r9, r9
 80066fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006702:	4699      	mov	r9, r3
 8006704:	46a2      	mov	sl, r4
 8006706:	eb19 090b 	adds.w	r9, r9, fp
 800670a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800670e:	f04f 0100 	mov.w	r1, #0
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800671a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800671e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006722:	4689      	mov	r9, r1
 8006724:	4692      	mov	sl, r2
 8006726:	eb1b 0509 	adds.w	r5, fp, r9
 800672a:	eb4c 060a 	adc.w	r6, ip, sl
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4619      	mov	r1, r3
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	f04f 0400 	mov.w	r4, #0
 8006740:	0094      	lsls	r4, r2, #2
 8006742:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006746:	008b      	lsls	r3, r1, #2
 8006748:	461a      	mov	r2, r3
 800674a:	4623      	mov	r3, r4
 800674c:	4628      	mov	r0, r5
 800674e:	4631      	mov	r1, r6
 8006750:	f7f9 fdb6 	bl	80002c0 <__aeabi_uldivmod>
 8006754:	4603      	mov	r3, r0
 8006756:	460c      	mov	r4, r1
 8006758:	461a      	mov	r2, r3
 800675a:	4b32      	ldr	r3, [pc, #200]	; (8006824 <UART_SetConfig+0x6f4>)
 800675c:	fba3 1302 	umull	r1, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	2164      	movs	r1, #100	; 0x64
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	3332      	adds	r3, #50	; 0x32
 800676e:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <UART_SetConfig+0x6f4>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800677a:	4498      	add	r8, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	469b      	mov	fp, r3
 8006780:	f04f 0c00 	mov.w	ip, #0
 8006784:	46d9      	mov	r9, fp
 8006786:	46e2      	mov	sl, ip
 8006788:	eb19 0309 	adds.w	r3, r9, r9
 800678c:	eb4a 040a 	adc.w	r4, sl, sl
 8006790:	4699      	mov	r9, r3
 8006792:	46a2      	mov	sl, r4
 8006794:	eb19 090b 	adds.w	r9, r9, fp
 8006798:	eb4a 0a0c 	adc.w	sl, sl, ip
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067b0:	4689      	mov	r9, r1
 80067b2:	4692      	mov	sl, r2
 80067b4:	eb1b 0509 	adds.w	r5, fp, r9
 80067b8:	eb4c 060a 	adc.w	r6, ip, sl
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4619      	mov	r1, r3
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	f04f 0400 	mov.w	r4, #0
 80067ce:	0094      	lsls	r4, r2, #2
 80067d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067d4:	008b      	lsls	r3, r1, #2
 80067d6:	461a      	mov	r2, r3
 80067d8:	4623      	mov	r3, r4
 80067da:	4628      	mov	r0, r5
 80067dc:	4631      	mov	r1, r6
 80067de:	f7f9 fd6f 	bl	80002c0 <__aeabi_uldivmod>
 80067e2:	4603      	mov	r3, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	461a      	mov	r2, r3
 80067e8:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <UART_SetConfig+0x6f4>)
 80067ea:	fba3 1302 	umull	r1, r3, r3, r2
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2164      	movs	r1, #100	; 0x64
 80067f2:	fb01 f303 	mul.w	r3, r1, r3
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	3332      	adds	r3, #50	; 0x32
 80067fc:	4a09      	ldr	r2, [pc, #36]	; (8006824 <UART_SetConfig+0x6f4>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f003 020f 	and.w	r2, r3, #15
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4442      	add	r2, r8
 800680e:	609a      	str	r2, [r3, #8]
}
 8006810:	e7ff      	b.n	8006812 <UART_SetConfig+0x6e2>
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	40011000 	.word	0x40011000
 8006820:	40011400 	.word	0x40011400
 8006824:	51eb851f 	.word	0x51eb851f

08006828 <__errno>:
 8006828:	4b01      	ldr	r3, [pc, #4]	; (8006830 <__errno+0x8>)
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000020 	.word	0x20000020

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4e0d      	ldr	r6, [pc, #52]	; (800686c <__libc_init_array+0x38>)
 8006838:	4c0d      	ldr	r4, [pc, #52]	; (8006870 <__libc_init_array+0x3c>)
 800683a:	1ba4      	subs	r4, r4, r6
 800683c:	10a4      	asrs	r4, r4, #2
 800683e:	2500      	movs	r5, #0
 8006840:	42a5      	cmp	r5, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	4e0b      	ldr	r6, [pc, #44]	; (8006874 <__libc_init_array+0x40>)
 8006846:	4c0c      	ldr	r4, [pc, #48]	; (8006878 <__libc_init_array+0x44>)
 8006848:	f000 fc26 	bl	8007098 <_init>
 800684c:	1ba4      	subs	r4, r4, r6
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	2500      	movs	r5, #0
 8006852:	42a5      	cmp	r5, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800685c:	4798      	blx	r3
 800685e:	3501      	adds	r5, #1
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006866:	4798      	blx	r3
 8006868:	3501      	adds	r5, #1
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	080077e8 	.word	0x080077e8
 8006870:	080077e8 	.word	0x080077e8
 8006874:	080077e8 	.word	0x080077e8
 8006878:	080077ec 	.word	0x080077ec

0800687c <memcpy>:
 800687c:	b510      	push	{r4, lr}
 800687e:	1e43      	subs	r3, r0, #1
 8006880:	440a      	add	r2, r1
 8006882:	4291      	cmp	r1, r2
 8006884:	d100      	bne.n	8006888 <memcpy+0xc>
 8006886:	bd10      	pop	{r4, pc}
 8006888:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006890:	e7f7      	b.n	8006882 <memcpy+0x6>

08006892 <memmove>:
 8006892:	4288      	cmp	r0, r1
 8006894:	b510      	push	{r4, lr}
 8006896:	eb01 0302 	add.w	r3, r1, r2
 800689a:	d807      	bhi.n	80068ac <memmove+0x1a>
 800689c:	1e42      	subs	r2, r0, #1
 800689e:	4299      	cmp	r1, r3
 80068a0:	d00a      	beq.n	80068b8 <memmove+0x26>
 80068a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80068aa:	e7f8      	b.n	800689e <memmove+0xc>
 80068ac:	4283      	cmp	r3, r0
 80068ae:	d9f5      	bls.n	800689c <memmove+0xa>
 80068b0:	1881      	adds	r1, r0, r2
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	42d3      	cmn	r3, r2
 80068b6:	d100      	bne.n	80068ba <memmove+0x28>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80068c2:	e7f7      	b.n	80068b4 <memmove+0x22>

080068c4 <memset>:
 80068c4:	4402      	add	r2, r0
 80068c6:	4603      	mov	r3, r0
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d100      	bne.n	80068ce <memset+0xa>
 80068cc:	4770      	bx	lr
 80068ce:	f803 1b01 	strb.w	r1, [r3], #1
 80068d2:	e7f9      	b.n	80068c8 <memset+0x4>

080068d4 <siprintf>:
 80068d4:	b40e      	push	{r1, r2, r3}
 80068d6:	b500      	push	{lr}
 80068d8:	b09c      	sub	sp, #112	; 0x70
 80068da:	ab1d      	add	r3, sp, #116	; 0x74
 80068dc:	9002      	str	r0, [sp, #8]
 80068de:	9006      	str	r0, [sp, #24]
 80068e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068e4:	4809      	ldr	r0, [pc, #36]	; (800690c <siprintf+0x38>)
 80068e6:	9107      	str	r1, [sp, #28]
 80068e8:	9104      	str	r1, [sp, #16]
 80068ea:	4909      	ldr	r1, [pc, #36]	; (8006910 <siprintf+0x3c>)
 80068ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f0:	9105      	str	r1, [sp, #20]
 80068f2:	6800      	ldr	r0, [r0, #0]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	a902      	add	r1, sp, #8
 80068f8:	f000 f866 	bl	80069c8 <_svfiprintf_r>
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	b01c      	add	sp, #112	; 0x70
 8006904:	f85d eb04 	ldr.w	lr, [sp], #4
 8006908:	b003      	add	sp, #12
 800690a:	4770      	bx	lr
 800690c:	20000020 	.word	0x20000020
 8006910:	ffff0208 	.word	0xffff0208

08006914 <__ssputs_r>:
 8006914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	688e      	ldr	r6, [r1, #8]
 800691a:	429e      	cmp	r6, r3
 800691c:	4682      	mov	sl, r0
 800691e:	460c      	mov	r4, r1
 8006920:	4690      	mov	r8, r2
 8006922:	4699      	mov	r9, r3
 8006924:	d837      	bhi.n	8006996 <__ssputs_r+0x82>
 8006926:	898a      	ldrh	r2, [r1, #12]
 8006928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800692c:	d031      	beq.n	8006992 <__ssputs_r+0x7e>
 800692e:	6825      	ldr	r5, [r4, #0]
 8006930:	6909      	ldr	r1, [r1, #16]
 8006932:	1a6f      	subs	r7, r5, r1
 8006934:	6965      	ldr	r5, [r4, #20]
 8006936:	2302      	movs	r3, #2
 8006938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800693c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006940:	f109 0301 	add.w	r3, r9, #1
 8006944:	443b      	add	r3, r7
 8006946:	429d      	cmp	r5, r3
 8006948:	bf38      	it	cc
 800694a:	461d      	movcc	r5, r3
 800694c:	0553      	lsls	r3, r2, #21
 800694e:	d530      	bpl.n	80069b2 <__ssputs_r+0x9e>
 8006950:	4629      	mov	r1, r5
 8006952:	f000 fb07 	bl	8006f64 <_malloc_r>
 8006956:	4606      	mov	r6, r0
 8006958:	b950      	cbnz	r0, 8006970 <__ssputs_r+0x5c>
 800695a:	230c      	movs	r3, #12
 800695c:	f8ca 3000 	str.w	r3, [sl]
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006966:	81a3      	strh	r3, [r4, #12]
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006970:	463a      	mov	r2, r7
 8006972:	6921      	ldr	r1, [r4, #16]
 8006974:	f7ff ff82 	bl	800687c <memcpy>
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	6126      	str	r6, [r4, #16]
 8006986:	6165      	str	r5, [r4, #20]
 8006988:	443e      	add	r6, r7
 800698a:	1bed      	subs	r5, r5, r7
 800698c:	6026      	str	r6, [r4, #0]
 800698e:	60a5      	str	r5, [r4, #8]
 8006990:	464e      	mov	r6, r9
 8006992:	454e      	cmp	r6, r9
 8006994:	d900      	bls.n	8006998 <__ssputs_r+0x84>
 8006996:	464e      	mov	r6, r9
 8006998:	4632      	mov	r2, r6
 800699a:	4641      	mov	r1, r8
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	f7ff ff78 	bl	8006892 <memmove>
 80069a2:	68a3      	ldr	r3, [r4, #8]
 80069a4:	1b9b      	subs	r3, r3, r6
 80069a6:	60a3      	str	r3, [r4, #8]
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	441e      	add	r6, r3
 80069ac:	6026      	str	r6, [r4, #0]
 80069ae:	2000      	movs	r0, #0
 80069b0:	e7dc      	b.n	800696c <__ssputs_r+0x58>
 80069b2:	462a      	mov	r2, r5
 80069b4:	f000 fb30 	bl	8007018 <_realloc_r>
 80069b8:	4606      	mov	r6, r0
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d1e2      	bne.n	8006984 <__ssputs_r+0x70>
 80069be:	6921      	ldr	r1, [r4, #16]
 80069c0:	4650      	mov	r0, sl
 80069c2:	f000 fa81 	bl	8006ec8 <_free_r>
 80069c6:	e7c8      	b.n	800695a <__ssputs_r+0x46>

080069c8 <_svfiprintf_r>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	461d      	mov	r5, r3
 80069ce:	898b      	ldrh	r3, [r1, #12]
 80069d0:	061f      	lsls	r7, r3, #24
 80069d2:	b09d      	sub	sp, #116	; 0x74
 80069d4:	4680      	mov	r8, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	4616      	mov	r6, r2
 80069da:	d50f      	bpl.n	80069fc <_svfiprintf_r+0x34>
 80069dc:	690b      	ldr	r3, [r1, #16]
 80069de:	b96b      	cbnz	r3, 80069fc <_svfiprintf_r+0x34>
 80069e0:	2140      	movs	r1, #64	; 0x40
 80069e2:	f000 fabf 	bl	8006f64 <_malloc_r>
 80069e6:	6020      	str	r0, [r4, #0]
 80069e8:	6120      	str	r0, [r4, #16]
 80069ea:	b928      	cbnz	r0, 80069f8 <_svfiprintf_r+0x30>
 80069ec:	230c      	movs	r3, #12
 80069ee:	f8c8 3000 	str.w	r3, [r8]
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	e0c8      	b.n	8006b8a <_svfiprintf_r+0x1c2>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	6163      	str	r3, [r4, #20]
 80069fc:	2300      	movs	r3, #0
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	2320      	movs	r3, #32
 8006a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a06:	2330      	movs	r3, #48	; 0x30
 8006a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a0c:	9503      	str	r5, [sp, #12]
 8006a0e:	f04f 0b01 	mov.w	fp, #1
 8006a12:	4637      	mov	r7, r6
 8006a14:	463d      	mov	r5, r7
 8006a16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a1a:	b10b      	cbz	r3, 8006a20 <_svfiprintf_r+0x58>
 8006a1c:	2b25      	cmp	r3, #37	; 0x25
 8006a1e:	d13e      	bne.n	8006a9e <_svfiprintf_r+0xd6>
 8006a20:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a24:	d00b      	beq.n	8006a3e <_svfiprintf_r+0x76>
 8006a26:	4653      	mov	r3, sl
 8006a28:	4632      	mov	r2, r6
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	f7ff ff71 	bl	8006914 <__ssputs_r>
 8006a32:	3001      	adds	r0, #1
 8006a34:	f000 80a4 	beq.w	8006b80 <_svfiprintf_r+0x1b8>
 8006a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3a:	4453      	add	r3, sl
 8006a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3e:	783b      	ldrb	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 809d 	beq.w	8006b80 <_svfiprintf_r+0x1b8>
 8006a46:	2300      	movs	r3, #0
 8006a48:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	9307      	str	r3, [sp, #28]
 8006a54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a58:	931a      	str	r3, [sp, #104]	; 0x68
 8006a5a:	462f      	mov	r7, r5
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a62:	4850      	ldr	r0, [pc, #320]	; (8006ba4 <_svfiprintf_r+0x1dc>)
 8006a64:	f7f9 fbdc 	bl	8000220 <memchr>
 8006a68:	9b04      	ldr	r3, [sp, #16]
 8006a6a:	b9d0      	cbnz	r0, 8006aa2 <_svfiprintf_r+0xda>
 8006a6c:	06d9      	lsls	r1, r3, #27
 8006a6e:	bf44      	itt	mi
 8006a70:	2220      	movmi	r2, #32
 8006a72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a76:	071a      	lsls	r2, r3, #28
 8006a78:	bf44      	itt	mi
 8006a7a:	222b      	movmi	r2, #43	; 0x2b
 8006a7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a80:	782a      	ldrb	r2, [r5, #0]
 8006a82:	2a2a      	cmp	r2, #42	; 0x2a
 8006a84:	d015      	beq.n	8006ab2 <_svfiprintf_r+0xea>
 8006a86:	9a07      	ldr	r2, [sp, #28]
 8006a88:	462f      	mov	r7, r5
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	250a      	movs	r5, #10
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a94:	3b30      	subs	r3, #48	; 0x30
 8006a96:	2b09      	cmp	r3, #9
 8006a98:	d94d      	bls.n	8006b36 <_svfiprintf_r+0x16e>
 8006a9a:	b1b8      	cbz	r0, 8006acc <_svfiprintf_r+0x104>
 8006a9c:	e00f      	b.n	8006abe <_svfiprintf_r+0xf6>
 8006a9e:	462f      	mov	r7, r5
 8006aa0:	e7b8      	b.n	8006a14 <_svfiprintf_r+0x4c>
 8006aa2:	4a40      	ldr	r2, [pc, #256]	; (8006ba4 <_svfiprintf_r+0x1dc>)
 8006aa4:	1a80      	subs	r0, r0, r2
 8006aa6:	fa0b f000 	lsl.w	r0, fp, r0
 8006aaa:	4318      	orrs	r0, r3
 8006aac:	9004      	str	r0, [sp, #16]
 8006aae:	463d      	mov	r5, r7
 8006ab0:	e7d3      	b.n	8006a5a <_svfiprintf_r+0x92>
 8006ab2:	9a03      	ldr	r2, [sp, #12]
 8006ab4:	1d11      	adds	r1, r2, #4
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	9103      	str	r1, [sp, #12]
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	db01      	blt.n	8006ac2 <_svfiprintf_r+0xfa>
 8006abe:	9207      	str	r2, [sp, #28]
 8006ac0:	e004      	b.n	8006acc <_svfiprintf_r+0x104>
 8006ac2:	4252      	negs	r2, r2
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	9207      	str	r2, [sp, #28]
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	783b      	ldrb	r3, [r7, #0]
 8006ace:	2b2e      	cmp	r3, #46	; 0x2e
 8006ad0:	d10c      	bne.n	8006aec <_svfiprintf_r+0x124>
 8006ad2:	787b      	ldrb	r3, [r7, #1]
 8006ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad6:	d133      	bne.n	8006b40 <_svfiprintf_r+0x178>
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	9203      	str	r2, [sp, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bfb8      	it	lt
 8006ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ae8:	3702      	adds	r7, #2
 8006aea:	9305      	str	r3, [sp, #20]
 8006aec:	4d2e      	ldr	r5, [pc, #184]	; (8006ba8 <_svfiprintf_r+0x1e0>)
 8006aee:	7839      	ldrb	r1, [r7, #0]
 8006af0:	2203      	movs	r2, #3
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7f9 fb94 	bl	8000220 <memchr>
 8006af8:	b138      	cbz	r0, 8006b0a <_svfiprintf_r+0x142>
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	1b40      	subs	r0, r0, r5
 8006afe:	fa03 f000 	lsl.w	r0, r3, r0
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	4303      	orrs	r3, r0
 8006b06:	3701      	adds	r7, #1
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	7839      	ldrb	r1, [r7, #0]
 8006b0c:	4827      	ldr	r0, [pc, #156]	; (8006bac <_svfiprintf_r+0x1e4>)
 8006b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b12:	2206      	movs	r2, #6
 8006b14:	1c7e      	adds	r6, r7, #1
 8006b16:	f7f9 fb83 	bl	8000220 <memchr>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d038      	beq.n	8006b90 <_svfiprintf_r+0x1c8>
 8006b1e:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <_svfiprintf_r+0x1e8>)
 8006b20:	bb13      	cbnz	r3, 8006b68 <_svfiprintf_r+0x1a0>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	3307      	adds	r3, #7
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	444b      	add	r3, r9
 8006b32:	9309      	str	r3, [sp, #36]	; 0x24
 8006b34:	e76d      	b.n	8006a12 <_svfiprintf_r+0x4a>
 8006b36:	fb05 3202 	mla	r2, r5, r2, r3
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	e7a6      	b.n	8006a8e <_svfiprintf_r+0xc6>
 8006b40:	2300      	movs	r3, #0
 8006b42:	3701      	adds	r7, #1
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	4619      	mov	r1, r3
 8006b48:	250a      	movs	r5, #10
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b50:	3a30      	subs	r2, #48	; 0x30
 8006b52:	2a09      	cmp	r2, #9
 8006b54:	d903      	bls.n	8006b5e <_svfiprintf_r+0x196>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0c8      	beq.n	8006aec <_svfiprintf_r+0x124>
 8006b5a:	9105      	str	r1, [sp, #20]
 8006b5c:	e7c6      	b.n	8006aec <_svfiprintf_r+0x124>
 8006b5e:	fb05 2101 	mla	r1, r5, r1, r2
 8006b62:	2301      	movs	r3, #1
 8006b64:	4607      	mov	r7, r0
 8006b66:	e7f0      	b.n	8006b4a <_svfiprintf_r+0x182>
 8006b68:	ab03      	add	r3, sp, #12
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <_svfiprintf_r+0x1ec>)
 8006b70:	a904      	add	r1, sp, #16
 8006b72:	4640      	mov	r0, r8
 8006b74:	f3af 8000 	nop.w
 8006b78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b7c:	4681      	mov	r9, r0
 8006b7e:	d1d6      	bne.n	8006b2e <_svfiprintf_r+0x166>
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	065b      	lsls	r3, r3, #25
 8006b84:	f53f af35 	bmi.w	80069f2 <_svfiprintf_r+0x2a>
 8006b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b8a:	b01d      	add	sp, #116	; 0x74
 8006b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b90:	ab03      	add	r3, sp, #12
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4622      	mov	r2, r4
 8006b96:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <_svfiprintf_r+0x1ec>)
 8006b98:	a904      	add	r1, sp, #16
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	f000 f882 	bl	8006ca4 <_printf_i>
 8006ba0:	e7ea      	b.n	8006b78 <_svfiprintf_r+0x1b0>
 8006ba2:	bf00      	nop
 8006ba4:	080077ac 	.word	0x080077ac
 8006ba8:	080077b2 	.word	0x080077b2
 8006bac:	080077b6 	.word	0x080077b6
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	08006915 	.word	0x08006915

08006bb8 <_printf_common>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	4691      	mov	r9, r2
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	688a      	ldr	r2, [r1, #8]
 8006bc2:	690b      	ldr	r3, [r1, #16]
 8006bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	bfb8      	it	lt
 8006bcc:	4613      	movlt	r3, r2
 8006bce:	f8c9 3000 	str.w	r3, [r9]
 8006bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	b112      	cbz	r2, 8006be2 <_printf_common+0x2a>
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f8c9 3000 	str.w	r3, [r9]
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	0699      	lsls	r1, r3, #26
 8006be6:	bf42      	ittt	mi
 8006be8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006bec:	3302      	addmi	r3, #2
 8006bee:	f8c9 3000 	strmi.w	r3, [r9]
 8006bf2:	6825      	ldr	r5, [r4, #0]
 8006bf4:	f015 0506 	ands.w	r5, r5, #6
 8006bf8:	d107      	bne.n	8006c0a <_printf_common+0x52>
 8006bfa:	f104 0a19 	add.w	sl, r4, #25
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	f8d9 2000 	ldr.w	r2, [r9]
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	42ab      	cmp	r3, r5
 8006c08:	dc28      	bgt.n	8006c5c <_printf_common+0xa4>
 8006c0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	3300      	adds	r3, #0
 8006c12:	bf18      	it	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	0692      	lsls	r2, r2, #26
 8006c18:	d42d      	bmi.n	8006c76 <_printf_common+0xbe>
 8006c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4630      	mov	r0, r6
 8006c22:	47c0      	blx	r8
 8006c24:	3001      	adds	r0, #1
 8006c26:	d020      	beq.n	8006c6a <_printf_common+0xb2>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	68e5      	ldr	r5, [r4, #12]
 8006c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c30:	f003 0306 	and.w	r3, r3, #6
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	bf08      	it	eq
 8006c38:	1aad      	subeq	r5, r5, r2
 8006c3a:	68a3      	ldr	r3, [r4, #8]
 8006c3c:	6922      	ldr	r2, [r4, #16]
 8006c3e:	bf0c      	ite	eq
 8006c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c44:	2500      	movne	r5, #0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bfc4      	itt	gt
 8006c4a:	1a9b      	subgt	r3, r3, r2
 8006c4c:	18ed      	addgt	r5, r5, r3
 8006c4e:	f04f 0900 	mov.w	r9, #0
 8006c52:	341a      	adds	r4, #26
 8006c54:	454d      	cmp	r5, r9
 8006c56:	d11a      	bne.n	8006c8e <_printf_common+0xd6>
 8006c58:	2000      	movs	r0, #0
 8006c5a:	e008      	b.n	8006c6e <_printf_common+0xb6>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4652      	mov	r2, sl
 8006c60:	4639      	mov	r1, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	47c0      	blx	r8
 8006c66:	3001      	adds	r0, #1
 8006c68:	d103      	bne.n	8006c72 <_printf_common+0xba>
 8006c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c72:	3501      	adds	r5, #1
 8006c74:	e7c3      	b.n	8006bfe <_printf_common+0x46>
 8006c76:	18e1      	adds	r1, r4, r3
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	2030      	movs	r0, #48	; 0x30
 8006c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c80:	4422      	add	r2, r4
 8006c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	e7c5      	b.n	8006c1a <_printf_common+0x62>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4622      	mov	r2, r4
 8006c92:	4639      	mov	r1, r7
 8006c94:	4630      	mov	r0, r6
 8006c96:	47c0      	blx	r8
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d0e6      	beq.n	8006c6a <_printf_common+0xb2>
 8006c9c:	f109 0901 	add.w	r9, r9, #1
 8006ca0:	e7d8      	b.n	8006c54 <_printf_common+0x9c>
	...

08006ca4 <_printf_i>:
 8006ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ca8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006cac:	460c      	mov	r4, r1
 8006cae:	7e09      	ldrb	r1, [r1, #24]
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	296e      	cmp	r1, #110	; 0x6e
 8006cb4:	4617      	mov	r7, r2
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	4698      	mov	r8, r3
 8006cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cbc:	f000 80b3 	beq.w	8006e26 <_printf_i+0x182>
 8006cc0:	d822      	bhi.n	8006d08 <_printf_i+0x64>
 8006cc2:	2963      	cmp	r1, #99	; 0x63
 8006cc4:	d036      	beq.n	8006d34 <_printf_i+0x90>
 8006cc6:	d80a      	bhi.n	8006cde <_printf_i+0x3a>
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	f000 80b9 	beq.w	8006e40 <_printf_i+0x19c>
 8006cce:	2958      	cmp	r1, #88	; 0x58
 8006cd0:	f000 8083 	beq.w	8006dda <_printf_i+0x136>
 8006cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cdc:	e032      	b.n	8006d44 <_printf_i+0xa0>
 8006cde:	2964      	cmp	r1, #100	; 0x64
 8006ce0:	d001      	beq.n	8006ce6 <_printf_i+0x42>
 8006ce2:	2969      	cmp	r1, #105	; 0x69
 8006ce4:	d1f6      	bne.n	8006cd4 <_printf_i+0x30>
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	6813      	ldr	r3, [r2, #0]
 8006cea:	0605      	lsls	r5, r0, #24
 8006cec:	f103 0104 	add.w	r1, r3, #4
 8006cf0:	d52a      	bpl.n	8006d48 <_printf_i+0xa4>
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da03      	bge.n	8006d02 <_printf_i+0x5e>
 8006cfa:	222d      	movs	r2, #45	; 0x2d
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d02:	486f      	ldr	r0, [pc, #444]	; (8006ec0 <_printf_i+0x21c>)
 8006d04:	220a      	movs	r2, #10
 8006d06:	e039      	b.n	8006d7c <_printf_i+0xd8>
 8006d08:	2973      	cmp	r1, #115	; 0x73
 8006d0a:	f000 809d 	beq.w	8006e48 <_printf_i+0x1a4>
 8006d0e:	d808      	bhi.n	8006d22 <_printf_i+0x7e>
 8006d10:	296f      	cmp	r1, #111	; 0x6f
 8006d12:	d020      	beq.n	8006d56 <_printf_i+0xb2>
 8006d14:	2970      	cmp	r1, #112	; 0x70
 8006d16:	d1dd      	bne.n	8006cd4 <_printf_i+0x30>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	f043 0320 	orr.w	r3, r3, #32
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	e003      	b.n	8006d2a <_printf_i+0x86>
 8006d22:	2975      	cmp	r1, #117	; 0x75
 8006d24:	d017      	beq.n	8006d56 <_printf_i+0xb2>
 8006d26:	2978      	cmp	r1, #120	; 0x78
 8006d28:	d1d4      	bne.n	8006cd4 <_printf_i+0x30>
 8006d2a:	2378      	movs	r3, #120	; 0x78
 8006d2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d30:	4864      	ldr	r0, [pc, #400]	; (8006ec4 <_printf_i+0x220>)
 8006d32:	e055      	b.n	8006de0 <_printf_i+0x13c>
 8006d34:	6813      	ldr	r3, [r2, #0]
 8006d36:	1d19      	adds	r1, r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6011      	str	r1, [r2, #0]
 8006d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d44:	2301      	movs	r3, #1
 8006d46:	e08c      	b.n	8006e62 <_printf_i+0x1be>
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6011      	str	r1, [r2, #0]
 8006d4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d50:	bf18      	it	ne
 8006d52:	b21b      	sxthne	r3, r3
 8006d54:	e7cf      	b.n	8006cf6 <_printf_i+0x52>
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	6825      	ldr	r5, [r4, #0]
 8006d5a:	1d18      	adds	r0, r3, #4
 8006d5c:	6010      	str	r0, [r2, #0]
 8006d5e:	0628      	lsls	r0, r5, #24
 8006d60:	d501      	bpl.n	8006d66 <_printf_i+0xc2>
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	e002      	b.n	8006d6c <_printf_i+0xc8>
 8006d66:	0668      	lsls	r0, r5, #25
 8006d68:	d5fb      	bpl.n	8006d62 <_printf_i+0xbe>
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	4854      	ldr	r0, [pc, #336]	; (8006ec0 <_printf_i+0x21c>)
 8006d6e:	296f      	cmp	r1, #111	; 0x6f
 8006d70:	bf14      	ite	ne
 8006d72:	220a      	movne	r2, #10
 8006d74:	2208      	moveq	r2, #8
 8006d76:	2100      	movs	r1, #0
 8006d78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d7c:	6865      	ldr	r5, [r4, #4]
 8006d7e:	60a5      	str	r5, [r4, #8]
 8006d80:	2d00      	cmp	r5, #0
 8006d82:	f2c0 8095 	blt.w	8006eb0 <_printf_i+0x20c>
 8006d86:	6821      	ldr	r1, [r4, #0]
 8006d88:	f021 0104 	bic.w	r1, r1, #4
 8006d8c:	6021      	str	r1, [r4, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d13d      	bne.n	8006e0e <_printf_i+0x16a>
 8006d92:	2d00      	cmp	r5, #0
 8006d94:	f040 808e 	bne.w	8006eb4 <_printf_i+0x210>
 8006d98:	4665      	mov	r5, ip
 8006d9a:	2a08      	cmp	r2, #8
 8006d9c:	d10b      	bne.n	8006db6 <_printf_i+0x112>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	07db      	lsls	r3, r3, #31
 8006da2:	d508      	bpl.n	8006db6 <_printf_i+0x112>
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	6862      	ldr	r2, [r4, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	bfde      	ittt	le
 8006dac:	2330      	movle	r3, #48	; 0x30
 8006dae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006db2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006db6:	ebac 0305 	sub.w	r3, ip, r5
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	f8cd 8000 	str.w	r8, [sp]
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	aa03      	add	r2, sp, #12
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff fef6 	bl	8006bb8 <_printf_common>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d14d      	bne.n	8006e6c <_printf_i+0x1c8>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	b005      	add	sp, #20
 8006dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dda:	4839      	ldr	r0, [pc, #228]	; (8006ec0 <_printf_i+0x21c>)
 8006ddc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006de0:	6813      	ldr	r3, [r2, #0]
 8006de2:	6821      	ldr	r1, [r4, #0]
 8006de4:	1d1d      	adds	r5, r3, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6015      	str	r5, [r2, #0]
 8006dea:	060a      	lsls	r2, r1, #24
 8006dec:	d50b      	bpl.n	8006e06 <_printf_i+0x162>
 8006dee:	07ca      	lsls	r2, r1, #31
 8006df0:	bf44      	itt	mi
 8006df2:	f041 0120 	orrmi.w	r1, r1, #32
 8006df6:	6021      	strmi	r1, [r4, #0]
 8006df8:	b91b      	cbnz	r3, 8006e02 <_printf_i+0x15e>
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	f022 0220 	bic.w	r2, r2, #32
 8006e00:	6022      	str	r2, [r4, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	e7b7      	b.n	8006d76 <_printf_i+0xd2>
 8006e06:	064d      	lsls	r5, r1, #25
 8006e08:	bf48      	it	mi
 8006e0a:	b29b      	uxthmi	r3, r3
 8006e0c:	e7ef      	b.n	8006dee <_printf_i+0x14a>
 8006e0e:	4665      	mov	r5, ip
 8006e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e14:	fb02 3311 	mls	r3, r2, r1, r3
 8006e18:	5cc3      	ldrb	r3, [r0, r3]
 8006e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e1e:	460b      	mov	r3, r1
 8006e20:	2900      	cmp	r1, #0
 8006e22:	d1f5      	bne.n	8006e10 <_printf_i+0x16c>
 8006e24:	e7b9      	b.n	8006d9a <_printf_i+0xf6>
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	6825      	ldr	r5, [r4, #0]
 8006e2a:	6961      	ldr	r1, [r4, #20]
 8006e2c:	1d18      	adds	r0, r3, #4
 8006e2e:	6010      	str	r0, [r2, #0]
 8006e30:	0628      	lsls	r0, r5, #24
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	d501      	bpl.n	8006e3a <_printf_i+0x196>
 8006e36:	6019      	str	r1, [r3, #0]
 8006e38:	e002      	b.n	8006e40 <_printf_i+0x19c>
 8006e3a:	066a      	lsls	r2, r5, #25
 8006e3c:	d5fb      	bpl.n	8006e36 <_printf_i+0x192>
 8006e3e:	8019      	strh	r1, [r3, #0]
 8006e40:	2300      	movs	r3, #0
 8006e42:	6123      	str	r3, [r4, #16]
 8006e44:	4665      	mov	r5, ip
 8006e46:	e7b9      	b.n	8006dbc <_printf_i+0x118>
 8006e48:	6813      	ldr	r3, [r2, #0]
 8006e4a:	1d19      	adds	r1, r3, #4
 8006e4c:	6011      	str	r1, [r2, #0]
 8006e4e:	681d      	ldr	r5, [r3, #0]
 8006e50:	6862      	ldr	r2, [r4, #4]
 8006e52:	2100      	movs	r1, #0
 8006e54:	4628      	mov	r0, r5
 8006e56:	f7f9 f9e3 	bl	8000220 <memchr>
 8006e5a:	b108      	cbz	r0, 8006e60 <_printf_i+0x1bc>
 8006e5c:	1b40      	subs	r0, r0, r5
 8006e5e:	6060      	str	r0, [r4, #4]
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	2300      	movs	r3, #0
 8006e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6a:	e7a7      	b.n	8006dbc <_printf_i+0x118>
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	462a      	mov	r2, r5
 8006e70:	4639      	mov	r1, r7
 8006e72:	4630      	mov	r0, r6
 8006e74:	47c0      	blx	r8
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0aa      	beq.n	8006dd0 <_printf_i+0x12c>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	079b      	lsls	r3, r3, #30
 8006e7e:	d413      	bmi.n	8006ea8 <_printf_i+0x204>
 8006e80:	68e0      	ldr	r0, [r4, #12]
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	4298      	cmp	r0, r3
 8006e86:	bfb8      	it	lt
 8006e88:	4618      	movlt	r0, r3
 8006e8a:	e7a3      	b.n	8006dd4 <_printf_i+0x130>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	464a      	mov	r2, r9
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	47c0      	blx	r8
 8006e96:	3001      	adds	r0, #1
 8006e98:	d09a      	beq.n	8006dd0 <_printf_i+0x12c>
 8006e9a:	3501      	adds	r5, #1
 8006e9c:	68e3      	ldr	r3, [r4, #12]
 8006e9e:	9a03      	ldr	r2, [sp, #12]
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	42ab      	cmp	r3, r5
 8006ea4:	dcf2      	bgt.n	8006e8c <_printf_i+0x1e8>
 8006ea6:	e7eb      	b.n	8006e80 <_printf_i+0x1dc>
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	f104 0919 	add.w	r9, r4, #25
 8006eae:	e7f5      	b.n	8006e9c <_printf_i+0x1f8>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1ac      	bne.n	8006e0e <_printf_i+0x16a>
 8006eb4:	7803      	ldrb	r3, [r0, #0]
 8006eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ebe:	e76c      	b.n	8006d9a <_printf_i+0xf6>
 8006ec0:	080077bd 	.word	0x080077bd
 8006ec4:	080077ce 	.word	0x080077ce

08006ec8 <_free_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4605      	mov	r5, r0
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d045      	beq.n	8006f5c <_free_r+0x94>
 8006ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed4:	1f0c      	subs	r4, r1, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bfb8      	it	lt
 8006eda:	18e4      	addlt	r4, r4, r3
 8006edc:	f000 f8d2 	bl	8007084 <__malloc_lock>
 8006ee0:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <_free_r+0x98>)
 8006ee2:	6813      	ldr	r3, [r2, #0]
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	b933      	cbnz	r3, 8006ef6 <_free_r+0x2e>
 8006ee8:	6063      	str	r3, [r4, #4]
 8006eea:	6014      	str	r4, [r2, #0]
 8006eec:	4628      	mov	r0, r5
 8006eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef2:	f000 b8c8 	b.w	8007086 <__malloc_unlock>
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	d90c      	bls.n	8006f14 <_free_r+0x4c>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	1862      	adds	r2, r4, r1
 8006efe:	4293      	cmp	r3, r2
 8006f00:	bf04      	itt	eq
 8006f02:	681a      	ldreq	r2, [r3, #0]
 8006f04:	685b      	ldreq	r3, [r3, #4]
 8006f06:	6063      	str	r3, [r4, #4]
 8006f08:	bf04      	itt	eq
 8006f0a:	1852      	addeq	r2, r2, r1
 8006f0c:	6022      	streq	r2, [r4, #0]
 8006f0e:	6004      	str	r4, [r0, #0]
 8006f10:	e7ec      	b.n	8006eec <_free_r+0x24>
 8006f12:	4613      	mov	r3, r2
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	b10a      	cbz	r2, 8006f1c <_free_r+0x54>
 8006f18:	42a2      	cmp	r2, r4
 8006f1a:	d9fa      	bls.n	8006f12 <_free_r+0x4a>
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	1858      	adds	r0, r3, r1
 8006f20:	42a0      	cmp	r0, r4
 8006f22:	d10b      	bne.n	8006f3c <_free_r+0x74>
 8006f24:	6820      	ldr	r0, [r4, #0]
 8006f26:	4401      	add	r1, r0
 8006f28:	1858      	adds	r0, r3, r1
 8006f2a:	4282      	cmp	r2, r0
 8006f2c:	6019      	str	r1, [r3, #0]
 8006f2e:	d1dd      	bne.n	8006eec <_free_r+0x24>
 8006f30:	6810      	ldr	r0, [r2, #0]
 8006f32:	6852      	ldr	r2, [r2, #4]
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	4401      	add	r1, r0
 8006f38:	6019      	str	r1, [r3, #0]
 8006f3a:	e7d7      	b.n	8006eec <_free_r+0x24>
 8006f3c:	d902      	bls.n	8006f44 <_free_r+0x7c>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	e7d3      	b.n	8006eec <_free_r+0x24>
 8006f44:	6820      	ldr	r0, [r4, #0]
 8006f46:	1821      	adds	r1, r4, r0
 8006f48:	428a      	cmp	r2, r1
 8006f4a:	bf04      	itt	eq
 8006f4c:	6811      	ldreq	r1, [r2, #0]
 8006f4e:	6852      	ldreq	r2, [r2, #4]
 8006f50:	6062      	str	r2, [r4, #4]
 8006f52:	bf04      	itt	eq
 8006f54:	1809      	addeq	r1, r1, r0
 8006f56:	6021      	streq	r1, [r4, #0]
 8006f58:	605c      	str	r4, [r3, #4]
 8006f5a:	e7c7      	b.n	8006eec <_free_r+0x24>
 8006f5c:	bd38      	pop	{r3, r4, r5, pc}
 8006f5e:	bf00      	nop
 8006f60:	200000cc 	.word	0x200000cc

08006f64 <_malloc_r>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	1ccd      	adds	r5, r1, #3
 8006f68:	f025 0503 	bic.w	r5, r5, #3
 8006f6c:	3508      	adds	r5, #8
 8006f6e:	2d0c      	cmp	r5, #12
 8006f70:	bf38      	it	cc
 8006f72:	250c      	movcc	r5, #12
 8006f74:	2d00      	cmp	r5, #0
 8006f76:	4606      	mov	r6, r0
 8006f78:	db01      	blt.n	8006f7e <_malloc_r+0x1a>
 8006f7a:	42a9      	cmp	r1, r5
 8006f7c:	d903      	bls.n	8006f86 <_malloc_r+0x22>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	2000      	movs	r0, #0
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
 8006f86:	f000 f87d 	bl	8007084 <__malloc_lock>
 8006f8a:	4a21      	ldr	r2, [pc, #132]	; (8007010 <_malloc_r+0xac>)
 8006f8c:	6814      	ldr	r4, [r2, #0]
 8006f8e:	4621      	mov	r1, r4
 8006f90:	b991      	cbnz	r1, 8006fb8 <_malloc_r+0x54>
 8006f92:	4c20      	ldr	r4, [pc, #128]	; (8007014 <_malloc_r+0xb0>)
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	b91b      	cbnz	r3, 8006fa0 <_malloc_r+0x3c>
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 f863 	bl	8007064 <_sbrk_r>
 8006f9e:	6020      	str	r0, [r4, #0]
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f000 f85e 	bl	8007064 <_sbrk_r>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d124      	bne.n	8006ff6 <_malloc_r+0x92>
 8006fac:	230c      	movs	r3, #12
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 f868 	bl	8007086 <__malloc_unlock>
 8006fb6:	e7e4      	b.n	8006f82 <_malloc_r+0x1e>
 8006fb8:	680b      	ldr	r3, [r1, #0]
 8006fba:	1b5b      	subs	r3, r3, r5
 8006fbc:	d418      	bmi.n	8006ff0 <_malloc_r+0x8c>
 8006fbe:	2b0b      	cmp	r3, #11
 8006fc0:	d90f      	bls.n	8006fe2 <_malloc_r+0x7e>
 8006fc2:	600b      	str	r3, [r1, #0]
 8006fc4:	50cd      	str	r5, [r1, r3]
 8006fc6:	18cc      	adds	r4, r1, r3
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f000 f85c 	bl	8007086 <__malloc_unlock>
 8006fce:	f104 000b 	add.w	r0, r4, #11
 8006fd2:	1d23      	adds	r3, r4, #4
 8006fd4:	f020 0007 	bic.w	r0, r0, #7
 8006fd8:	1ac3      	subs	r3, r0, r3
 8006fda:	d0d3      	beq.n	8006f84 <_malloc_r+0x20>
 8006fdc:	425a      	negs	r2, r3
 8006fde:	50e2      	str	r2, [r4, r3]
 8006fe0:	e7d0      	b.n	8006f84 <_malloc_r+0x20>
 8006fe2:	428c      	cmp	r4, r1
 8006fe4:	684b      	ldr	r3, [r1, #4]
 8006fe6:	bf16      	itet	ne
 8006fe8:	6063      	strne	r3, [r4, #4]
 8006fea:	6013      	streq	r3, [r2, #0]
 8006fec:	460c      	movne	r4, r1
 8006fee:	e7eb      	b.n	8006fc8 <_malloc_r+0x64>
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	6849      	ldr	r1, [r1, #4]
 8006ff4:	e7cc      	b.n	8006f90 <_malloc_r+0x2c>
 8006ff6:	1cc4      	adds	r4, r0, #3
 8006ff8:	f024 0403 	bic.w	r4, r4, #3
 8006ffc:	42a0      	cmp	r0, r4
 8006ffe:	d005      	beq.n	800700c <_malloc_r+0xa8>
 8007000:	1a21      	subs	r1, r4, r0
 8007002:	4630      	mov	r0, r6
 8007004:	f000 f82e 	bl	8007064 <_sbrk_r>
 8007008:	3001      	adds	r0, #1
 800700a:	d0cf      	beq.n	8006fac <_malloc_r+0x48>
 800700c:	6025      	str	r5, [r4, #0]
 800700e:	e7db      	b.n	8006fc8 <_malloc_r+0x64>
 8007010:	200000cc 	.word	0x200000cc
 8007014:	200000d0 	.word	0x200000d0

08007018 <_realloc_r>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	4607      	mov	r7, r0
 800701c:	4614      	mov	r4, r2
 800701e:	460e      	mov	r6, r1
 8007020:	b921      	cbnz	r1, 800702c <_realloc_r+0x14>
 8007022:	4611      	mov	r1, r2
 8007024:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007028:	f7ff bf9c 	b.w	8006f64 <_malloc_r>
 800702c:	b922      	cbnz	r2, 8007038 <_realloc_r+0x20>
 800702e:	f7ff ff4b 	bl	8006ec8 <_free_r>
 8007032:	4625      	mov	r5, r4
 8007034:	4628      	mov	r0, r5
 8007036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007038:	f000 f826 	bl	8007088 <_malloc_usable_size_r>
 800703c:	42a0      	cmp	r0, r4
 800703e:	d20f      	bcs.n	8007060 <_realloc_r+0x48>
 8007040:	4621      	mov	r1, r4
 8007042:	4638      	mov	r0, r7
 8007044:	f7ff ff8e 	bl	8006f64 <_malloc_r>
 8007048:	4605      	mov	r5, r0
 800704a:	2800      	cmp	r0, #0
 800704c:	d0f2      	beq.n	8007034 <_realloc_r+0x1c>
 800704e:	4631      	mov	r1, r6
 8007050:	4622      	mov	r2, r4
 8007052:	f7ff fc13 	bl	800687c <memcpy>
 8007056:	4631      	mov	r1, r6
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ff35 	bl	8006ec8 <_free_r>
 800705e:	e7e9      	b.n	8007034 <_realloc_r+0x1c>
 8007060:	4635      	mov	r5, r6
 8007062:	e7e7      	b.n	8007034 <_realloc_r+0x1c>

08007064 <_sbrk_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4c06      	ldr	r4, [pc, #24]	; (8007080 <_sbrk_r+0x1c>)
 8007068:	2300      	movs	r3, #0
 800706a:	4605      	mov	r5, r0
 800706c:	4608      	mov	r0, r1
 800706e:	6023      	str	r3, [r4, #0]
 8007070:	f7fc fb26 	bl	80036c0 <_sbrk>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_sbrk_r+0x1a>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	b103      	cbz	r3, 800707e <_sbrk_r+0x1a>
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20002e18 	.word	0x20002e18

08007084 <__malloc_lock>:
 8007084:	4770      	bx	lr

08007086 <__malloc_unlock>:
 8007086:	4770      	bx	lr

08007088 <_malloc_usable_size_r>:
 8007088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708c:	1f18      	subs	r0, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfbc      	itt	lt
 8007092:	580b      	ldrlt	r3, [r1, r0]
 8007094:	18c0      	addlt	r0, r0, r3
 8007096:	4770      	bx	lr

08007098 <_init>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr

080070a4 <_fini>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr
