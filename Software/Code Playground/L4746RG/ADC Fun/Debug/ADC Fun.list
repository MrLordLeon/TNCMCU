
ADC Fun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb8  08004fb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08005030  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005030  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da3b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb1  00000000  00000000  0002dadb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  0002f690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  000302f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027ce1  00000000  00000000  00030e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ee8  00000000  00000000  00058b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc2b0  00000000  00000000  00062a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ecf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f4  00000000  00000000  0015ed6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f14 	.word	0x08004f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004f14 	.word	0x08004f14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fb48 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f844 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f974 	bl	8000878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f942 	bl	8000818 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f8c6 	bl	8000724 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 ffb3 	bl	800250c <HAL_GPIO_WritePin>

	  //Begins ADC Read
	  HAL_ADC_Start(&hadc1);
 80005a6:	4816      	ldr	r0, [pc, #88]	; (8000600 <main+0x80>)
 80005a8:	f000 fefa 	bl	80013a0 <HAL_ADC_Start>
	  //Stalls the CPU until ADC completes
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80005ac:	f04f 31ff 	mov.w	r1, #4294967295
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <main+0x80>)
 80005b2:	f000 ffaf 	bl	8001514 <HAL_ADC_PollForConversion>

	  //Range of raw:
	  //0 for 0V
	  //4095 for 3.3V
	  raw = HAL_ADC_GetValue(&hadc1);
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x80>)
 80005b8:	f001 f87c 	bl	80016b4 <HAL_ADC_GetValue>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <main+0x84>)
 80005c2:	801a      	strh	r2, [r3, #0]

	  //Set GPIO pin low
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f001 ff9d 	bl	800250c <HAL_GPIO_WritePin>

	  //Convert raw to string
	  sprintf(msg,"%hu\r\n", raw);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <main+0x84>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	490b      	ldr	r1, [pc, #44]	; (8000608 <main+0x88>)
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <main+0x8c>)
 80005dc:	f004 f894 	bl	8004708 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0x8c>)
 80005e2:	f7ff fdf5 	bl	80001d0 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	4907      	ldr	r1, [pc, #28]	; (800060c <main+0x8c>)
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x90>)
 80005f2:	f003 faef 	bl	8003bd4 <HAL_UART_Transmit>

	  HAL_Delay(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fb86 	bl	8000d08 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, GPIO_PIN_SET);
 80005fc:	e7cc      	b.n	8000598 <main+0x18>
 80005fe:	bf00      	nop
 8000600:	200000a4 	.word	0x200000a4
 8000604:	20000108 	.word	0x20000108
 8000608:	08004f2c 	.word	0x08004f2c
 800060c:	20000098 	.word	0x20000098
 8000610:	2000010c 	.word	0x2000010c

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0b8      	sub	sp, #224	; 0xe0
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061e:	2244      	movs	r2, #68	; 0x44
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 f868 	bl	80046f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2288      	movs	r2, #136	; 0x88
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f85a 	bl	80046f8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2310      	movs	r3, #16
 8000654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066a:	230a      	movs	r3, #10
 800066c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000670:	2307      	movs	r3, #7
 8000672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000686:	4618      	mov	r0, r3
 8000688:	f001 ffbc 	bl	8002604 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000692:	f000 f95b 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fb88 	bl	8002dd0 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006c6:	f000 f941 	bl	800094c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80006ca:	f244 0302 	movw	r3, #16386	; 0x4002
 80006ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006d8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006da:	2302      	movs	r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006e2:	2308      	movs	r3, #8
 80006e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006f6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fd6c 	bl	80031d8 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000706:	f000 f921 	bl	800094c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070e:	f001 ff23 	bl	8002558 <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000718:	f000 f918 	bl	800094c <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	37e0      	adds	r7, #224	; 0xe0
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_ADC1_Init+0xe8>)
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <MX_ADC1_Init+0xec>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_ADC1_Init+0xe8>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_ADC1_Init+0xe8>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0xe8>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_ADC1_Init+0xe8>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC1_Init+0xe8>)
 8000766:	2204      	movs	r2, #4
 8000768:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_ADC1_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0xe8>)
 8000772:	2200      	movs	r2, #0
 8000774:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_ADC1_Init+0xe8>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC1_Init+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0xe8>)
 8000786:	2201      	movs	r2, #1
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ADC1_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0xe8>)
 8000792:	2200      	movs	r2, #0
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ADC1_Init+0xe8>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADC1_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0xe8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <MX_ADC1_Init+0xe8>)
 80007ae:	f000 fca3 	bl	80010f8 <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007b8:	f000 f8c8 	bl	800094c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_ADC1_Init+0xe8>)
 80007c8:	f001 fb66 	bl	8001e98 <HAL_ADCEx_MultiModeConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007d2:	f000 f8bb 	bl	800094c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_ADC1_Init+0xf0>)
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007da:	2306      	movs	r3, #6
 80007dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e2:	237f      	movs	r3, #127	; 0x7f
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e6:	2304      	movs	r3, #4
 80007e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0xe8>)
 80007f4:	f000 ff6c 	bl	80016d0 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007fe:	f000 f8a5 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000a4 	.word	0x200000a4
 8000810:	50040000 	.word	0x50040000
 8000814:	14f00020 	.word	0x14f00020

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART2_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800085c:	f003 f96c 	bl	8003b38 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f871 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000010c 	.word	0x2000010c
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0xc8>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <MX_GPIO_Init+0xc8>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0xc8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a1f      	ldr	r2, [pc, #124]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a19      	ldr	r2, [pc, #100]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_GPIO_Init+0xc8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f001 fe08 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_GPIO_Init+0xcc>)
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0xd0>)
 8000912:	f001 fc53 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000916:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f001 fc43 	bl	80021bc <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	10210000 	.word	0x10210000
 8000948:	48000800 	.word	0x48000800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d124      	bne.n	8000a10 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009fa:	230b      	movs	r3, #11
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f001 fbd6 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	50040000 	.word	0x50040000
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0x7c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d128      	bne.n	8000a94 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x80>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <HAL_UART_MspInit+0x80>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0x80>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0x80>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0x80>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_UART_MspInit+0x80>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f001 fb94 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f8e8 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x50>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x16>
		heap_end = &end;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <_sbrk+0x50>)
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <_sbrk+0x54>)
 8000b14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <_sbrk+0x50>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <_sbrk+0x50>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	466a      	mov	r2, sp
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d907      	bls.n	8000b3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b2a:	f003 fdbb 	bl	80046a4 <__errno>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	230c      	movs	r3, #12
 8000b32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	e006      	b.n	8000b48 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <_sbrk+0x50>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <_sbrk+0x50>)
 8000b44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	20000198 	.word	0x20000198

08000b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <SystemInit+0x64>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <SystemInit+0x64>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <SystemInit+0x68>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <SystemInit+0x68>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <SystemInit+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <SystemInit+0x68>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <SystemInit+0x68>)
 8000b84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <SystemInit+0x68>)
 8000b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <SystemInit+0x68>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <SystemInit+0x68>)
 8000b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <SystemInit+0x68>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SystemInit+0x64>)
 8000baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bae:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bca:	e003      	b.n	8000bd4 <LoopCopyDataInit>

08000bcc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bd0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bd2:	3104      	adds	r1, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bd8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bdc:	d3f6      	bcc.n	8000bcc <CopyDataInit>
	ldr	r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000be0:	e002      	b.n	8000be8 <LoopFillZerobss>

08000be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000be2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000be4:	f842 3b04 	str.w	r3, [r2], #4

08000be8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <LoopForever+0x16>)
	cmp	r2, r3
 8000bea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bec:	d3f9      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bee:	f7ff ffb3 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f003 fd5d 	bl	80046b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fcc3 	bl	8000580 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c00:	08004fc0 	.word	0x08004fc0
	ldr	r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c08:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c0c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c10:	20000194 	.word	0x20000194

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_Init+0x3c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <HAL_Init+0x3c>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f001 fa90 	bl	8002154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 f80f 	bl	8000c58 <HAL_InitTick>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	e001      	b.n	8000c4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c46:	f7ff fe89 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_InitTick+0x68>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d022      	beq.n	8000cb2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_InitTick+0x68>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fa8e 	bl	80021a2 <HAL_SYSTICK_Config>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10f      	bne.n	8000cac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b0f      	cmp	r3, #15
 8000c90:	d809      	bhi.n	8000ca6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c92:	2200      	movs	r2, #0
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9a:	f001 fa66 	bl	800216a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_InitTick+0x70>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e004      	b.n	8000cb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e001      	b.n	8000cb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cdc:	6013      	str	r3, [r2, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	2000018c 	.word	0x2000018c
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000018c 	.word	0x2000018c

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d004      	beq.n	8000d2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_Delay+0x40>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2c:	bf00      	nop
 8000d2e:	f7ff ffdf 	bl	8000cf0 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d8f7      	bhi.n	8000d2e <HAL_Delay+0x26>
  {
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	609a      	str	r2, [r3, #8]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	431a      	orrs	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000db4:	b490      	push	{r4, r7}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3360      	adds	r3, #96	; 0x60
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000dd0:	6822      	ldr	r2, [r4, #0]
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <LL_ADC_SetOffset+0x40>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	4313      	orrs	r3, r2
 8000de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000de6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc90      	pop	{r4, r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	03fff000 	.word	0x03fff000

08000df8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3360      	adds	r3, #96	; 0x60
 8000e06:	461a      	mov	r2, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc90      	pop	{r4, r7}
 8000e1e:	4770      	bx	lr

08000e20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e20:	b490      	push	{r4, r7}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3360      	adds	r3, #96	; 0x60
 8000e30:	461a      	mov	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc90      	pop	{r4, r7}
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e76:	b490      	push	{r4, r7}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3330      	adds	r3, #48	; 0x30
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	4413      	add	r3, r2
 8000e94:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000e96:	6822      	ldr	r2, [r4, #0]
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	211f      	movs	r1, #31
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	0e9b      	lsrs	r3, r3, #26
 8000eac:	f003 011f 	and.w	r1, r3, #31
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc90      	pop	{r4, r7}
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ec8:	b490      	push	{r4, r7}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3314      	adds	r3, #20
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	0e5b      	lsrs	r3, r3, #25
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	0d1b      	lsrs	r3, r3, #20
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	401a      	ands	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	0d1b      	lsrs	r3, r3, #20
 8000f00:	f003 031f 	and.w	r3, r3, #31
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc90      	pop	{r4, r7}
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f30:	43db      	mvns	r3, r3
 8000f32:	401a      	ands	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0318 	and.w	r3, r3, #24
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f3c:	40d9      	lsrs	r1, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	400b      	ands	r3, r1
 8000f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f46:	431a      	orrs	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0007ffff 	.word	0x0007ffff

08000f60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 031f 	and.w	r3, r3, #31
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6093      	str	r3, [r2, #8]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fd0:	d101      	bne.n	8000fd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001020:	d101      	bne.n	8001026 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001048:	f043 0201 	orr.w	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b01      	cmp	r3, #1
 800106e:	d101      	bne.n	8001074 <LL_ADC_IsEnabled+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_IsEnabled+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001092:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001096:	f043 0204 	orr.w	r2, r3, #4
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d101      	bne.n	80010c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d101      	bne.n	80010e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e134      	b.n	800137c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fc3f 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff3f 	bl	8000fbc <LL_ADC_IsDeepPowerDownEnabled>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff25 	bl	8000f98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff5a 	bl	800100c <LL_ADC_IsInternalRegulatorEnabled>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d113      	bne.n	8001186 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff3e 	bl	8000fe4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001168:	4b86      	ldr	r3, [pc, #536]	; (8001384 <HAL_ADC_Init+0x28c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	4a86      	ldr	r2, [pc, #536]	; (8001388 <HAL_ADC_Init+0x290>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001178:	e002      	b.n	8001180 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3b01      	subs	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f9      	bne.n	800117a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff3e 	bl	800100c <LL_ADC_IsInternalRegulatorEnabled>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119a:	f043 0210 	orr.w	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff77 	bl	80010aa <LL_ADC_REG_IsConversionOngoing>
 80011bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 80cf 	bne.w	800136a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80cb 	bne.w	800136a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011dc:	f043 0202 	orr.w	r2, r3, #2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff37 	bl	800105c <LL_ADC_IsEnabled>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d115      	bne.n	8001220 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011f4:	4865      	ldr	r0, [pc, #404]	; (800138c <HAL_ADC_Init+0x294>)
 80011f6:	f7ff ff31 	bl	800105c <LL_ADC_IsEnabled>
 80011fa:	4604      	mov	r4, r0
 80011fc:	4864      	ldr	r0, [pc, #400]	; (8001390 <HAL_ADC_Init+0x298>)
 80011fe:	f7ff ff2d 	bl	800105c <LL_ADC_IsEnabled>
 8001202:	4603      	mov	r3, r0
 8001204:	431c      	orrs	r4, r3
 8001206:	4863      	ldr	r0, [pc, #396]	; (8001394 <HAL_ADC_Init+0x29c>)
 8001208:	f7ff ff28 	bl	800105c <LL_ADC_IsEnabled>
 800120c:	4603      	mov	r3, r0
 800120e:	4323      	orrs	r3, r4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4619      	mov	r1, r3
 800121a:	485f      	ldr	r0, [pc, #380]	; (8001398 <HAL_ADC_Init+0x2a0>)
 800121c:	f7ff fd96 	bl	8000d4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e5b      	ldrb	r3, [r3, #25]
 8001224:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800122a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001230:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001236:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d106      	bne.n	800125c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	3b01      	subs	r3, #1
 8001254:	045b      	lsls	r3, r3, #17
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	2b00      	cmp	r3, #0
 8001262:	d009      	beq.n	8001278 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_ADC_Init+0x2a4>)
 8001280:	4013      	ands	r3, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	69b9      	ldr	r1, [r7, #24]
 8001288:	430b      	orrs	r3, r1
 800128a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff0a 	bl	80010aa <LL_ADC_REG_IsConversionOngoing>
 8001296:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff17 	bl	80010d0 <LL_ADC_INJ_IsConversionOngoing>
 80012a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d13d      	bne.n	8001326 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d13a      	bne.n	8001326 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	69b9      	ldr	r1, [r7, #24]
 80012d6:	430b      	orrs	r3, r1
 80012d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d118      	bne.n	8001316 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012ee:	f023 0304 	bic.w	r3, r3, #4
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012fa:	4311      	orrs	r1, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001300:	4311      	orrs	r1, r2
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001306:	430a      	orrs	r2, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	e007      	b.n	8001326 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d10c      	bne.n	8001348 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f023 010f 	bic.w	r1, r3, #15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
 8001346:	e007      	b.n	8001358 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 020f 	bic.w	r2, r2, #15
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135c:	f023 0303 	bic.w	r3, r3, #3
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
 8001368:	e007      	b.n	800137a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136e:	f043 0210 	orr.w	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800137a:	7ffb      	ldrb	r3, [r7, #31]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3724      	adds	r7, #36	; 0x24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	053e2d63 	.word	0x053e2d63
 800138c:	50040000 	.word	0x50040000
 8001390:	50040100 	.word	0x50040100
 8001394:	50040200 	.word	0x50040200
 8001398:	50040300 	.word	0x50040300
 800139c:	fff0c007 	.word	0xfff0c007

080013a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013a8:	4857      	ldr	r0, [pc, #348]	; (8001508 <HAL_ADC_Start+0x168>)
 80013aa:	f7ff fdd9 	bl	8000f60 <LL_ADC_GetMultimode>
 80013ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe78 	bl	80010aa <LL_ADC_REG_IsConversionOngoing>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f040 809c 	bne.w	80014fa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_Start+0x30>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e097      	b.n	8001500 <HAL_ADC_Start+0x160>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fcdd 	bl	8001d98 <ADC_Enable>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 8083 	bne.w	80014f0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a42      	ldr	r2, [pc, #264]	; (800150c <HAL_ADC_Start+0x16c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d002      	beq.n	800140e <HAL_ADC_Start+0x6e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	e000      	b.n	8001410 <HAL_ADC_Start+0x70>
 800140e:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_ADC_Start+0x170>)
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	4293      	cmp	r3, r2
 8001416:	d002      	beq.n	800141e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001436:	d106      	bne.n	8001446 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	f023 0206 	bic.w	r2, r3, #6
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	659a      	str	r2, [r3, #88]	; 0x58
 8001444:	e002      	b.n	800144c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	221c      	movs	r2, #28
 8001452:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2a      	ldr	r2, [pc, #168]	; (800150c <HAL_ADC_Start+0x16c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d002      	beq.n	800146c <HAL_ADC_Start+0xcc>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	e000      	b.n	800146e <HAL_ADC_Start+0xce>
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_ADC_Start+0x170>)
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	4293      	cmp	r3, r2
 8001474:	d008      	beq.n	8001488 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d002      	beq.n	8001488 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d114      	bne.n	80014b2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800149e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fde9 	bl	8001082 <LL_ADC_REG_StartConversion>
 80014b0:	e025      	b.n	80014fe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <HAL_ADC_Start+0x16c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d002      	beq.n	80014ce <HAL_ADC_Start+0x12e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	e000      	b.n	80014d0 <HAL_ADC_Start+0x130>
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_ADC_Start+0x170>)
 80014d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00f      	beq.n	80014fe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
 80014ee:	e006      	b.n	80014fe <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014f8:	e001      	b.n	80014fe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014fa:	2302      	movs	r3, #2
 80014fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	50040300 	.word	0x50040300
 800150c:	50040100 	.word	0x50040100
 8001510:	50040000 	.word	0x50040000

08001514 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800151e:	4862      	ldr	r0, [pc, #392]	; (80016a8 <HAL_ADC_PollForConversion+0x194>)
 8001520:	f7ff fd1e 	bl	8000f60 <LL_ADC_GetMultimode>
 8001524:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b08      	cmp	r3, #8
 800152c:	d102      	bne.n	8001534 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800152e:	2308      	movs	r3, #8
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e02a      	b.n	800158a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d002      	beq.n	8001546 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b09      	cmp	r3, #9
 8001544:	d111      	bne.n	800156a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e09d      	b.n	80016a0 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001564:	2304      	movs	r3, #4
 8001566:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001568:	e00f      	b.n	800158a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800156a:	484f      	ldr	r0, [pc, #316]	; (80016a8 <HAL_ADC_PollForConversion+0x194>)
 800156c:	f7ff fd06 	bl	8000f7c <LL_ADC_GetMultiDMATransfer>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	f043 0220 	orr.w	r2, r3, #32
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e08c      	b.n	80016a0 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001586:	2304      	movs	r3, #4
 8001588:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800158a:	f7ff fbb1 	bl	8000cf0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001590:	e01a      	b.n	80015c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d016      	beq.n	80015c8 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800159a:	f7ff fba9 	bl	8000cf0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d302      	bcc.n	80015b0 <HAL_ADC_PollForConversion+0x9c>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10b      	bne.n	80015c8 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0204 	orr.w	r2, r3, #4
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e06b      	b.n	80016a0 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0dd      	beq.n	8001592 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fc32 	bl	8000e50 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7e5b      	ldrb	r3, [r3, #25]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b08      	cmp	r3, #8
 8001606:	d111      	bne.n	800162c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	f043 0201 	orr.w	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_ADC_PollForConversion+0x198>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d002      	beq.n	800163c <HAL_ADC_PollForConversion+0x128>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	e000      	b.n	800163e <HAL_ADC_PollForConversion+0x12a>
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_ADC_PollForConversion+0x19c>)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	4293      	cmp	r3, r2
 8001644:	d008      	beq.n	8001658 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d002      	beq.n	8001658 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b09      	cmp	r3, #9
 8001656:	d104      	bne.n	8001662 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	e00c      	b.n	800167c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_ADC_PollForConversion+0x198>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d002      	beq.n	8001672 <HAL_ADC_PollForConversion+0x15e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	e000      	b.n	8001674 <HAL_ADC_PollForConversion+0x160>
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_ADC_PollForConversion+0x19c>)
 8001674:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d104      	bne.n	800168c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2208      	movs	r2, #8
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e008      	b.n	800169e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	50040300 	.word	0x50040300
 80016ac:	50040100 	.word	0x50040100
 80016b0:	50040000 	.word	0x50040000

080016b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0a6      	sub	sp, #152	; 0x98
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x22>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e348      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x6b4>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fcd3 	bl	80010aa <LL_ADC_REG_IsConversionOngoing>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 8329 	bne.w	8001d5e <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d824      	bhi.n	800175e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	3b02      	subs	r3, #2
 800171a:	2b03      	cmp	r3, #3
 800171c:	d81b      	bhi.n	8001756 <HAL_ADC_ConfigChannel+0x86>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_ADC_ConfigChannel+0x54>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	0800173d 	.word	0x0800173d
 800172c:	08001745 	.word	0x08001745
 8001730:	0800174d 	.word	0x0800174d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	220c      	movs	r2, #12
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	e011      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2212      	movs	r2, #18
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	e00d      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2218      	movs	r2, #24
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	e009      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	e004      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2206      	movs	r2, #6
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	e000      	b.n	8001760 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800175e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	f7ff fb82 	bl	8000e76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fc97 	bl	80010aa <LL_ADC_REG_IsConversionOngoing>
 800177c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fca3 	bl	80010d0 <LL_ADC_INJ_IsConversionOngoing>
 800178a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800178e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 8148 	bne.w	8001a28 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 8143 	bne.w	8001a28 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f7ff fb8a 	bl	8000ec8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d00a      	beq.n	80017ec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6919      	ldr	r1, [r3, #16]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017e6:	f7ff fae5 	bl	8000db4 <LL_ADC_SetOffset>
 80017ea:	e11d      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fb00 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x148>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff faf5 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	0e9b      	lsrs	r3, r3, #26
 8001812:	f003 021f 	and.w	r2, r3, #31
 8001816:	e012      	b.n	800183e <HAL_ADC_ConfigChannel+0x16e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff faea 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x186>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0e9b      	lsrs	r3, r3, #26
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	e00a      	b.n	800186c <HAL_ADC_ConfigChannel+0x19c>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	429a      	cmp	r2, r3
 800186e:	d106      	bne.n	800187e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fad1 	bl	8000e20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2101      	movs	r1, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fab7 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x1da>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff faac 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	0e9b      	lsrs	r3, r3, #26
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	e010      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1fc>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff faa1 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80018c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x214>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	e00a      	b.n	80018fa <HAL_ADC_ConfigChannel+0x22a>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d106      	bne.n	800190c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	2101      	movs	r1, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fa8a 	bl	8000e20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2102      	movs	r1, #2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fa70 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x268>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2102      	movs	r1, #2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fa65 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 021f 	and.w	r2, r3, #31
 8001936:	e010      	b.n	800195a <HAL_ADC_ConfigChannel+0x28a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2102      	movs	r1, #2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fa5a 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x2a2>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	e00a      	b.n	8001988 <HAL_ADC_ConfigChannel+0x2b8>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	429a      	cmp	r2, r3
 800198a:	d106      	bne.n	800199a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	2102      	movs	r1, #2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fa43 	bl	8000e20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2103      	movs	r1, #3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa29 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x2f6>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2103      	movs	r1, #3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fa1e 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	e010      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x318>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2103      	movs	r1, #3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fa13 	bl	8000df8 <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x330>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	e00a      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x346>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d106      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2103      	movs	r1, #3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f9fc 	bl	8000e20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fb15 	bl	800105c <LL_ADC_IsEnabled>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 810c 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f7ff fa66 	bl	8000f18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4aad      	ldr	r2, [pc, #692]	; (8001d08 <HAL_ADC_ConfigChannel+0x638>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 80fd 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x3b0>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0e9b      	lsrs	r3, r3, #26
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	bf94      	ite	ls
 8001a78:	2301      	movls	r3, #1
 8001a7a:	2300      	movhi	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e012      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x3d6>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	bf94      	ite	ls
 8001aa0:	2301      	movls	r3, #1
 8001aa2:	2300      	movhi	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d064      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x3f6>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0e9b      	lsrs	r3, r3, #26
 8001abc:	3301      	adds	r3, #1
 8001abe:	069b      	lsls	r3, r3, #26
 8001ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac4:	e00e      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x414>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	069b      	lsls	r3, r3, #26
 8001ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x434>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	3301      	adds	r3, #1
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	e010      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x456>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	ea42 0103 	orr.w	r1, r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x47c>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0e9b      	lsrs	r3, r3, #26
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f003 021f 	and.w	r2, r3, #31
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	051b      	lsls	r3, r3, #20
 8001b4a:	e011      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x4a0>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b70:	430b      	orrs	r3, r1
 8001b72:	e069      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x4c0>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	069b      	lsls	r3, r3, #26
 8001b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8e:	e00e      	b.n	8001bae <HAL_ADC_ConfigChannel+0x4de>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	069b      	lsls	r3, r3, #26
 8001baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x4fe>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	e010      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x520>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	617b      	str	r3, [r7, #20]
  return result;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10d      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x54c>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	051b      	lsls	r3, r3, #20
 8001c16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	e014      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x576>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	60fb      	str	r3, [r7, #12]
  return result;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b1e      	subs	r3, #30
 8001c40:	051b      	lsls	r3, r3, #20
 8001c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c46:	430b      	orrs	r3, r1
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	6892      	ldr	r2, [r2, #8]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7ff f93b 	bl	8000ec8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_ADC_ConfigChannel+0x63c>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 808c 	beq.w	8001d78 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c60:	482b      	ldr	r0, [pc, #172]	; (8001d10 <HAL_ADC_ConfigChannel+0x640>)
 8001c62:	f7ff f899 	bl	8000d98 <LL_ADC_GetCommonPathInternalCh>
 8001c66:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <HAL_ADC_ConfigChannel+0x644>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d12b      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x5fc>
 8001c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d125      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <HAL_ADC_ConfigChannel+0x648>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x5c4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_ADC_ConfigChannel+0x64c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d16e      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481c      	ldr	r0, [pc, #112]	; (8001d10 <HAL_ADC_ConfigChannel+0x640>)
 8001ca0:	f7ff f867 	bl	8000d72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <HAL_ADC_ConfigChannel+0x650>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_ADC_ConfigChannel+0x654>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099a      	lsrs	r2, r3, #6
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001cbc:	e002      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f9      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cca:	e052      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_ADC_ConfigChannel+0x658>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x65c>
 8001cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d124      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_ADC_ConfigChannel+0x648>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d004      	beq.n	8001cf6 <HAL_ADC_ConfigChannel+0x626>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_ADC_ConfigChannel+0x64c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d13f      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <HAL_ADC_ConfigChannel+0x640>)
 8001d02:	f7ff f836 	bl	8000d72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d06:	e036      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x6a6>
 8001d08:	407f0000 	.word	0x407f0000
 8001d0c:	80080000 	.word	0x80080000
 8001d10:	50040300 	.word	0x50040300
 8001d14:	c7520000 	.word	0xc7520000
 8001d18:	50040000 	.word	0x50040000
 8001d1c:	50040200 	.word	0x50040200
 8001d20:	20000000 	.word	0x20000000
 8001d24:	053e2d63 	.word	0x053e2d63
 8001d28:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_ADC_ConfigChannel+0x6bc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d120      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d11a      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_ADC_ConfigChannel+0x6c0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d115      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d54:	4619      	mov	r1, r3
 8001d56:	480f      	ldr	r0, [pc, #60]	; (8001d94 <HAL_ADC_ConfigChannel+0x6c4>)
 8001d58:	f7ff f80b 	bl	8000d72 <LL_ADC_SetCommonPathInternalCh>
 8001d5c:	e00c      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f043 0220 	orr.w	r2, r3, #32
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d70:	e002      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d72:	bf00      	nop
 8001d74:	e000      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3798      	adds	r7, #152	; 0x98
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	80000001 	.word	0x80000001
 8001d90:	50040000 	.word	0x50040000
 8001d94:	50040300 	.word	0x50040300

08001d98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f959 	bl	800105c <LL_ADC_IsEnabled>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d146      	bne.n	8001e3e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <ADC_Enable+0xb0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f043 0210 	orr.w	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e032      	b.n	8001e40 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f928 	bl	8001034 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001de4:	f7fe ff84 	bl	8000cf0 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dea:	e021      	b.n	8001e30 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f933 	bl	800105c <LL_ADC_IsEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f917 	bl	8001034 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e06:	f7fe ff73 	bl	8000cf0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d90d      	bls.n	8001e30 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e007      	b.n	8001e40 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d1d6      	bne.n	8001dec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	8000003f 	.word	0x8000003f

08001e4c <LL_ADC_IsEnabled>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <LL_ADC_IsEnabled+0x18>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_ADC_IsEnabled+0x1a>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_REG_IsConversionOngoing>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d101      	bne.n	8001e8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b09f      	sub	sp, #124	; 0x7c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e08f      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001ec8:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	e001      	b.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e072      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffbd 	bl	8001e72 <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ffb7 	bl	8001e72 <LL_ADC_REG_IsConversionOngoing>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d154      	bne.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d151      	bne.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f12:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d02c      	beq.n	8001f76 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2e:	035b      	lsls	r3, r3, #13
 8001f30:	430b      	orrs	r3, r1
 8001f32:	431a      	orrs	r2, r3
 8001f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f38:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001f3a:	f7ff ff87 	bl	8001e4c <LL_ADC_IsEnabled>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	4828      	ldr	r0, [pc, #160]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f42:	f7ff ff83 	bl	8001e4c <LL_ADC_IsEnabled>
 8001f46:	4603      	mov	r3, r0
 8001f48:	431c      	orrs	r4, r3
 8001f4a:	4828      	ldr	r0, [pc, #160]	; (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f4c:	f7ff ff7e 	bl	8001e4c <LL_ADC_IsEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4323      	orrs	r3, r4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d137      	bne.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f60:	f023 030f 	bic.w	r3, r3, #15
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	6811      	ldr	r1, [r2, #0]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	6892      	ldr	r2, [r2, #8]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f72:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f74:	e028      	b.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f82:	4817      	ldr	r0, [pc, #92]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001f84:	f7ff ff62 	bl	8001e4c <LL_ADC_IsEnabled>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	4816      	ldr	r0, [pc, #88]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f8c:	f7ff ff5e 	bl	8001e4c <LL_ADC_IsEnabled>
 8001f90:	4603      	mov	r3, r0
 8001f92:	431c      	orrs	r4, r3
 8001f94:	4815      	ldr	r0, [pc, #84]	; (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f96:	f7ff ff59 	bl	8001e4c <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4323      	orrs	r3, r4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d112      	bne.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001faa:	f023 030f 	bic.w	r3, r3, #15
 8001fae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fb0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb2:	e009      	b.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001fc6:	e000      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	377c      	adds	r7, #124	; 0x7c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	50040000 	.word	0x50040000
 8001fe4:	50040100 	.word	0x50040100
 8001fe8:	50040300 	.word	0x50040300
 8001fec:	50040200 	.word	0x50040200

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	; (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	; (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002120:	d301      	bcc.n	8002126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002122:	2301      	movs	r3, #1
 8002124:	e00f      	b.n	8002146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <SysTick_Config+0x40>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212e:	210f      	movs	r1, #15
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f7ff ff8e 	bl	8002054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <SysTick_Config+0x40>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SysTick_Config+0x40>)
 8002140:	2207      	movs	r2, #7
 8002142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	e000e010 	.word	0xe000e010

08002154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff47 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800217c:	f7ff ff5c 	bl	8002038 <__NVIC_GetPriorityGrouping>
 8002180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	6978      	ldr	r0, [r7, #20]
 8002188:	f7ff ff8e 	bl	80020a8 <NVIC_EncodePriority>
 800218c:	4602      	mov	r2, r0
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff5d 	bl	8002054 <__NVIC_SetPriority>
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffb0 	bl	8002110 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	e17f      	b.n	80024cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8171 	beq.w	80024c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d00b      	beq.n	8002204 <HAL_GPIO_Init+0x48>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f8:	2b11      	cmp	r3, #17
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d130      	bne.n	8002266 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223a:	2201      	movs	r2, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 0201 	and.w	r2, r3, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d118      	bne.n	80022a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x128>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d123      	bne.n	800232c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80ac 	beq.w	80024c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	4b5e      	ldr	r3, [pc, #376]	; (80024e8 <HAL_GPIO_Init+0x32c>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	4a5d      	ldr	r2, [pc, #372]	; (80024e8 <HAL_GPIO_Init+0x32c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6613      	str	r3, [r2, #96]	; 0x60
 800237a:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <HAL_GPIO_Init+0x32c>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002386:	4a59      	ldr	r2, [pc, #356]	; (80024ec <HAL_GPIO_Init+0x330>)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b0:	d025      	beq.n	80023fe <HAL_GPIO_Init+0x242>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4e      	ldr	r2, [pc, #312]	; (80024f0 <HAL_GPIO_Init+0x334>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <HAL_GPIO_Init+0x23e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4d      	ldr	r2, [pc, #308]	; (80024f4 <HAL_GPIO_Init+0x338>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x23a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_GPIO_Init+0x33c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x236>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4b      	ldr	r2, [pc, #300]	; (80024fc <HAL_GPIO_Init+0x340>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x232>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_GPIO_Init+0x344>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_GPIO_Init+0x348>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x22a>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e00c      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00a      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023ea:	2305      	movs	r3, #5
 80023ec:	e008      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023ee:	2304      	movs	r3, #4
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e004      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023fe:	2300      	movs	r3, #0
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4093      	lsls	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002410:	4936      	ldr	r1, [pc, #216]	; (80024ec <HAL_GPIO_Init+0x330>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_GPIO_Init+0x34c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002442:	4a31      	ldr	r2, [pc, #196]	; (8002508 <HAL_GPIO_Init+0x34c>)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_GPIO_Init+0x34c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800246c:	4a26      	ldr	r2, [pc, #152]	; (8002508 <HAL_GPIO_Init+0x34c>)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002472:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_GPIO_Init+0x34c>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <HAL_GPIO_Init+0x34c>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_GPIO_Init+0x34c>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024c0:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_GPIO_Init+0x34c>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f47f ae78 	bne.w	80021cc <HAL_GPIO_Init+0x10>
  }
}
 80024dc:	bf00      	nop
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	48000400 	.word	0x48000400
 80024f4:	48000800 	.word	0x48000800
 80024f8:	48000c00 	.word	0x48000c00
 80024fc:	48001000 	.word	0x48001000
 8002500:	48001400 	.word	0x48001400
 8002504:	48001800 	.word	0x48001800
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002528:	e002      	b.n	8002530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_PWREx_GetVoltageRange+0x18>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40007000 	.word	0x40007000

08002558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002566:	d130      	bne.n	80025ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002574:	d038      	beq.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800257e:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2232      	movs	r2, #50	; 0x32
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0c9b      	lsrs	r3, r3, #18
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259c:	e002      	b.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d102      	bne.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f2      	bne.n	800259e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d110      	bne.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e00f      	b.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d6:	d007      	beq.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e0:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000
 80025fc:	20000000 	.word	0x20000000
 8002600:	431bde83 	.word	0x431bde83

08002604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e3d4      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002616:	4ba1      	ldr	r3, [pc, #644]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002620:	4b9e      	ldr	r3, [pc, #632]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80e4 	beq.w	8002800 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_RCC_OscConfig+0x4a>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	f040 808b 	bne.w	800275c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b01      	cmp	r3, #1
 800264a:	f040 8087 	bne.w	800275c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264e:	4b93      	ldr	r3, [pc, #588]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e3ac      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1a      	ldr	r2, [r3, #32]
 800266a:	4b8c      	ldr	r3, [pc, #560]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_RCC_OscConfig+0x7c>
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267e:	e005      	b.n	800268c <HAL_RCC_OscConfig+0x88>
 8002680:	4b86      	ldr	r3, [pc, #536]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268c:	4293      	cmp	r3, r2
 800268e:	d223      	bcs.n	80026d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fd3f 	bl	8003118 <RCC_SetFlashLatencyFromMSIRange>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e38d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	4b7d      	ldr	r3, [pc, #500]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a7c      	ldr	r2, [pc, #496]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4977      	ldr	r1, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	4972      	ldr	r1, [pc, #456]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
 80026d6:	e025      	b.n	8002724 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d8:	4b70      	ldr	r3, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6f      	ldr	r2, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026de:	f043 0308 	orr.w	r3, r3, #8
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	496a      	ldr	r1, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f6:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	4965      	ldr	r1, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fcff 	bl	8003118 <RCC_SetFlashLatencyFromMSIRange>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e34d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002724:	f000 fc36 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002728:	4601      	mov	r1, r0
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	4a5a      	ldr	r2, [pc, #360]	; (80028a0 <HAL_RCC_OscConfig+0x29c>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	fa21 f303 	lsr.w	r3, r1, r3
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <HAL_RCC_OscConfig+0x2a0>)
 8002742:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002744:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <HAL_RCC_OscConfig+0x2a4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fa85 	bl	8000c58 <HAL_InitTick>
 800274e:	4603      	mov	r3, r0
 8002750:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d052      	beq.n	80027fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	e331      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d032      	beq.n	80027ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002764:	4b4d      	ldr	r3, [pc, #308]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4c      	ldr	r2, [pc, #304]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002770:	f7fe fabe 	bl	8000cf0 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002778:	f7fe faba 	bl	8000cf0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e31a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a40      	ldr	r2, [pc, #256]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	493b      	ldr	r1, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	4936      	ldr	r1, [pc, #216]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e01a      	b.n	8002800 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027ca:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fa8b 	bl	8000cf0 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027de:	f7fe fa87 	bl	8000cf0 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e2e7      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f0:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x1da>
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d074      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b08      	cmp	r3, #8
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x21a>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d10e      	bne.n	8002836 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d10b      	bne.n	8002836 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d064      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d160      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e2c4      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x24a>
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a15      	ldr	r2, [pc, #84]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e01d      	b.n	800288a <HAL_RCC_OscConfig+0x286>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0x26e>
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800285e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e00b      	b.n	800288a <HAL_RCC_OscConfig+0x286>
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fa2d 	bl	8000cf0 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002898:	e011      	b.n	80028be <HAL_RCC_OscConfig+0x2ba>
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	08004f34 	.word	0x08004f34
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe fa20 	bl	8000cf0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e280      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028be:	4baf      	ldr	r3, [pc, #700]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x2a8>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fa10 	bl	8000cf0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fa0c 	bl	8000cf0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e26c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e6:	4ba5      	ldr	r3, [pc, #660]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2d0>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d060      	beq.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x310>
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d119      	bne.n	8002942 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d116      	bne.n	8002942 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002914:	4b99      	ldr	r3, [pc, #612]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x328>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e249      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b93      	ldr	r3, [pc, #588]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4990      	ldr	r1, [pc, #576]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002940:	e040      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d023      	beq.n	8002992 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294a:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a8b      	ldr	r2, [pc, #556]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe f9cb 	bl	8000cf0 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295e:	f7fe f9c7 	bl	8000cf0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e227      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002970:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b7f      	ldr	r3, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	497c      	ldr	r1, [pc, #496]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
 8002990:	e018      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002992:	4b7a      	ldr	r3, [pc, #488]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a79      	ldr	r2, [pc, #484]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe f9a7 	bl	8000cf0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a6:	f7fe f9a3 	bl	8000cf0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e203      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b8:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d03c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029de:	4a67      	ldr	r2, [pc, #412]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe f982 	bl	8000cf0 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe f97e 	bl	8000cf0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1de      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a02:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ef      	beq.n	80029f0 <HAL_RCC_OscConfig+0x3ec>
 8002a10:	e01b      	b.n	8002a4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a12:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe f965 	bl	8000cf0 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7fe f961 	bl	8000cf0 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1c1      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a3c:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ef      	bne.n	8002a2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80a6 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a5c:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a68:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a43      	ldr	r2, [pc, #268]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
 8002a74:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a80:	2301      	movs	r3, #1
 8002a82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d118      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a90:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9c:	f7fe f928 	bl	8000cf0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa4:	f7fe f924 	bl	8000cf0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e184      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab6:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d108      	bne.n	8002adc <HAL_RCC_OscConfig+0x4d8>
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ada:	e024      	b.n	8002b26 <HAL_RCC_OscConfig+0x522>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d110      	bne.n	8002b06 <HAL_RCC_OscConfig+0x502>
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a20      	ldr	r2, [pc, #128]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b04:	e00f      	b.n	8002b26 <HAL_RCC_OscConfig+0x522>
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe f8df 	bl	8000cf0 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe f8db 	bl	8000cf0 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e139      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ed      	beq.n	8002b36 <HAL_RCC_OscConfig+0x532>
 8002b5a:	e01a      	b.n	8002b92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe f8c8 	bl	8000cf0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b62:	e00f      	b.n	8002b84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe f8c4 	bl	8000cf0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d906      	bls.n	8002b84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e122      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b84:	4b90      	ldr	r3, [pc, #576]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e8      	bne.n	8002b64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b98:	4b8b      	ldr	r3, [pc, #556]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	4a8a      	ldr	r2, [pc, #552]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8108 	beq.w	8002dbe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 80d0 	bne.w	8002d58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bb8:	4b83      	ldr	r3, [pc, #524]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d130      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d127      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf8:	2a07      	cmp	r2, #7
 8002bfa:	bf14      	ite	ne
 8002bfc:	2201      	movne	r2, #1
 8002bfe:	2200      	moveq	r2, #0
 8002c00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d113      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	3b01      	subs	r3, #1
 8002c14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d06e      	beq.n	8002d0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d069      	beq.n	8002d08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0b7      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c50:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c5c:	f7fe f848 	bl	8000cf0 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe f844 	bl	8000cf0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0a4      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c76:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_RCC_OscConfig+0x7c8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c92:	3a01      	subs	r2, #1
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c9c:	0212      	lsls	r2, r2, #8
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ca4:	0852      	lsrs	r2, r2, #1
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0552      	lsls	r2, r2, #21
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0652      	lsls	r2, r2, #25
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cbc:	0912      	lsrs	r2, r2, #4
 8002cbe:	0452      	lsls	r2, r2, #17
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4941      	ldr	r1, [pc, #260]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ce0:	f7fe f806 	bl	8000cf0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe f802 	bl	8000cf0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e062      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d06:	e05a      	b.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e059      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d152      	bne.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d30:	f7fd ffde 	bl	8000cf0 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fd ffda 	bl	8000cf0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e03a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x734>
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d02d      	beq.n	8002dba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d7c:	f023 0303 	bic.w	r3, r3, #3
 8002d80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fd ffad 	bl	8000cf0 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fd ffa9 	bl	8000cf0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e009      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x796>
 8002db8:	e001      	b.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	f99d808c 	.word	0xf99d808c

08002dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0c8      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4961      	ldr	r1, [pc, #388]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b0      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d04c      	beq.n	8002eba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e28:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d121      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e09e      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e40:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d115      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e092      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e58:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e086      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e07e      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e78:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 0203 	bic.w	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	493f      	ldr	r1, [pc, #252]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8a:	f7fd ff31 	bl	8000cf0 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e92:	f7fd ff2d 	bl	8000cf0 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e066      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 020c 	and.w	r2, r3, #12
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d1eb      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	492c      	ldr	r1, [pc, #176]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d210      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4924      	ldr	r1, [pc, #144]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e036      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4918      	ldr	r1, [pc, #96]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4910      	ldr	r1, [pc, #64]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f46:	f000 f825 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fe74 	bl	8000c58 <HAL_InitTick>
 8002f70:	4603      	mov	r3, r0
 8002f72:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f74:	7afb      	ldrb	r3, [r7, #11]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40021000 	.word	0x40021000
 8002f88:	08004f34 	.word	0x08004f34
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	20000004 	.word	0x20000004

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d121      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d11e      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc8:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ff0:	4a2a      	ldr	r2, [pc, #168]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003004:	e00a      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d102      	bne.n	8003012 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e004      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d101      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800301a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d133      	bne.n	800308a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d002      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xa4>
 8003032:	2b03      	cmp	r3, #3
 8003034:	d003      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0xaa>
 8003036:	e005      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800303a:	617b      	str	r3, [r7, #20]
      break;
 800303c:	e005      	b.n	800304a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003040:	617b      	str	r3, [r7, #20]
      break;
 8003042:	e002      	b.n	800304a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	617b      	str	r3, [r7, #20]
      break;
 8003048:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	3301      	adds	r3, #1
 8003056:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	fb02 f203 	mul.w	r2, r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_GetSysClockFreq+0x104>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0e5b      	lsrs	r3, r3, #25
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	3301      	adds	r3, #1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800308a:	69bb      	ldr	r3, [r7, #24]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3724      	adds	r7, #36	; 0x24
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40021000 	.word	0x40021000
 800309c:	08004f4c 	.word	0x08004f4c
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	007a1200 	.word	0x007a1200

080030a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030c4:	f7ff fff0 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c8:	4601      	mov	r1, r0
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	08004f44 	.word	0x08004f44

080030ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030f0:	f7ff ffda 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030f4:	4601      	mov	r1, r0
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0adb      	lsrs	r3, r3, #11
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	08004f44 	.word	0x08004f44

08003118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003130:	f7ff fa04 	bl	800253c <HAL_PWREx_GetVoltageRange>
 8003134:	6178      	str	r0, [r7, #20]
 8003136:	e014      	b.n	8003162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	6593      	str	r3, [r2, #88]	; 0x58
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003150:	f7ff f9f4 	bl	800253c <HAL_PWREx_GetVoltageRange>
 8003154:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003168:	d10b      	bne.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d919      	bls.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2ba0      	cmp	r3, #160	; 0xa0
 8003174:	d902      	bls.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003176:	2302      	movs	r3, #2
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	e013      	b.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800317c:	2301      	movs	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e010      	b.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d902      	bls.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003188:	2303      	movs	r3, #3
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	e00a      	b.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d102      	bne.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003194:	2302      	movs	r3, #2
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e004      	b.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b70      	cmp	r3, #112	; 0x70
 800319e:	d101      	bne.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a0:	2301      	movs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 0207 	bic.w	r2, r3, #7
 80031ac:	4909      	ldr	r1, [pc, #36]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d001      	beq.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40022000 	.word	0x40022000

080031d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031e0:	2300      	movs	r3, #0
 80031e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e4:	2300      	movs	r3, #0
 80031e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d03f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d01c      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003202:	d802      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003208:	e01f      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800320a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320e:	d003      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003214:	d01c      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003216:	e018      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003218:	4b85      	ldr	r3, [pc, #532]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a84      	ldr	r2, [pc, #528]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003222:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3304      	adds	r3, #4
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fab9 	bl	80037a4 <RCCEx_PLLSAI1_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003236:	e00c      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3320      	adds	r3, #32
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fba0 	bl	8003984 <RCCEx_PLLSAI2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	74fb      	strb	r3, [r7, #19]
      break;
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003258:	4b75      	ldr	r3, [pc, #468]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003266:	4972      	ldr	r1, [pc, #456]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800326e:	e001      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d03f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003288:	d01c      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800328a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328e:	d802      	bhi.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003294:	e01f      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800329a:	d003      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800329c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032a0:	d01c      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80032a2:	e018      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a4:	4b62      	ldr	r3, [pc, #392]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a61      	ldr	r2, [pc, #388]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032b0:	e015      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fa73 	bl	80037a4 <RCCEx_PLLSAI1_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c2:	e00c      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3320      	adds	r3, #32
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fb5a 	bl	8003984 <RCCEx_PLLSAI2_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d4:	e003      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	74fb      	strb	r3, [r7, #19]
      break;
 80032da:	e000      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e4:	4b52      	ldr	r3, [pc, #328]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f2:	494f      	ldr	r1, [pc, #316]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032fa:	e001      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80a0 	beq.w	800344e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330e:	2300      	movs	r3, #0
 8003310:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003328:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	4a40      	ldr	r2, [pc, #256]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	6593      	str	r3, [r2, #88]	; 0x58
 8003334:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003340:	2301      	movs	r3, #1
 8003342:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3a      	ldr	r2, [pc, #232]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003350:	f7fd fcce 	bl	8000cf0 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003356:	e009      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fd fcca 	bl	8000cf0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d902      	bls.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	74fb      	strb	r3, [r7, #19]
        break;
 800336a:	e005      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800336c:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ef      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d15c      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800337e:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01f      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	429a      	cmp	r2, r3
 800339a:	d019      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a8:	4b21      	ldr	r3, [pc, #132]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a20      	ldr	r2, [pc, #128]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b8:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d016      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fd fc89 	bl	8000cf0 <HAL_GetTick>
 80033de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e0:	e00b      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fd fc85 	bl	8000cf0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d902      	bls.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	74fb      	strb	r3, [r7, #19]
            break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0ec      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341e:	4904      	ldr	r1, [pc, #16]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003426:	e009      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
 800342c:	e006      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343c:	7c7b      	ldrb	r3, [r7, #17]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b9e      	ldr	r3, [pc, #632]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a9d      	ldr	r2, [pc, #628]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345a:	4b98      	ldr	r3, [pc, #608]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f023 0203 	bic.w	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	4994      	ldr	r1, [pc, #592]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800347c:	4b8f      	ldr	r3, [pc, #572]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 020c 	bic.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	498c      	ldr	r1, [pc, #560]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349e:	4b87      	ldr	r3, [pc, #540]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4983      	ldr	r1, [pc, #524]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	497b      	ldr	r1, [pc, #492]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e2:	4b76      	ldr	r3, [pc, #472]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f0:	4972      	ldr	r1, [pc, #456]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003504:	4b6d      	ldr	r3, [pc, #436]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	496a      	ldr	r1, [pc, #424]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003526:	4b65      	ldr	r3, [pc, #404]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	4961      	ldr	r1, [pc, #388]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003548:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003556:	4959      	ldr	r1, [pc, #356]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003578:	4950      	ldr	r1, [pc, #320]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800358c:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	4948      	ldr	r1, [pc, #288]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	493f      	ldr	r1, [pc, #252]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d028      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035de:	4937      	ldr	r1, [pc, #220]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ee:	d106      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f0:	4b32      	ldr	r3, [pc, #200]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a31      	ldr	r2, [pc, #196]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fa:	60d3      	str	r3, [r2, #12]
 80035fc:	e011      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003606:	d10c      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2101      	movs	r1, #1
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f8c8 	bl	80037a4 <RCCEx_PLLSAI1_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	491f      	ldr	r1, [pc, #124]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800364c:	d106      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003658:	60d3      	str	r3, [r2, #12]
 800365a:	e011      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f899 	bl	80037a4 <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02b      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369a:	4908      	ldr	r1, [pc, #32]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036aa:	d109      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a02      	ldr	r2, [pc, #8]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b6:	60d3      	str	r3, [r2, #12]
 80036b8:	e014      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2101      	movs	r1, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f867 	bl	80037a4 <RCCEx_PLLSAI1_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036da:	7cfb      	ldrb	r3, [r7, #19]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fe:	4928      	ldr	r1, [pc, #160]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370e:	d10d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f844 	bl	80037a4 <RCCEx_PLLSAI1_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d014      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
 800372a:	e011      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003734:	d10c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3320      	adds	r3, #32
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f921 	bl	8003984 <RCCEx_PLLSAI2_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003796:	7cbb      	ldrb	r3, [r7, #18]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000

080037a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037b2:	4b73      	ldr	r3, [pc, #460]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d018      	beq.n	80037f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037be:	4b70      	ldr	r3, [pc, #448]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0203 	and.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d10d      	bne.n	80037ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
       ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037d6:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
       ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d044      	beq.n	8003874 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	e041      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d00c      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x6e>
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d013      	beq.n	8003824 <RCCEx_PLLSAI1_Config+0x80>
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d120      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003800:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11d      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003810:	e01a      	b.n	8003848 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003812:	4b5b      	ldr	r3, [pc, #364]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003822:	e013      	b.n	800384c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003824:	4b56      	ldr	r3, [pc, #344]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003830:	4b53      	ldr	r3, [pc, #332]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003840:	e006      	b.n	8003850 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      break;
 8003846:	e004      	b.n	8003852 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003848:	bf00      	nop
 800384a:	e002      	b.n	8003852 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003850:	bf00      	nop
    }

    if(status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003858:	4b49      	ldr	r3, [pc, #292]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	3b01      	subs	r3, #1
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	430b      	orrs	r3, r1
 800386e:	4944      	ldr	r1, [pc, #272]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d17d      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a40      	ldr	r2, [pc, #256]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003880:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003886:	f7fd fa33 	bl	8000cf0 <HAL_GetTick>
 800388a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800388c:	e009      	b.n	80038a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800388e:	f7fd fa2f 	bl	8000cf0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d902      	bls.n	80038a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	73fb      	strb	r3, [r7, #15]
        break;
 80038a0:	e005      	b.n	80038ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ef      	bne.n	800388e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d160      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d111      	bne.n	80038de <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	0211      	lsls	r1, r2, #8
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68d2      	ldr	r2, [r2, #12]
 80038d0:	0912      	lsrs	r2, r2, #4
 80038d2:	0452      	lsls	r2, r2, #17
 80038d4:	430a      	orrs	r2, r1
 80038d6:	492a      	ldr	r1, [pc, #168]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
 80038dc:	e027      	b.n	800392e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d112      	bne.n	800390a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e4:	4b26      	ldr	r3, [pc, #152]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	0211      	lsls	r1, r2, #8
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6912      	ldr	r2, [r2, #16]
 80038fa:	0852      	lsrs	r2, r2, #1
 80038fc:	3a01      	subs	r2, #1
 80038fe:	0552      	lsls	r2, r2, #21
 8003900:	430a      	orrs	r2, r1
 8003902:	491f      	ldr	r1, [pc, #124]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	610b      	str	r3, [r1, #16]
 8003908:	e011      	b.n	800392e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003912:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6892      	ldr	r2, [r2, #8]
 800391a:	0211      	lsls	r1, r2, #8
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6952      	ldr	r2, [r2, #20]
 8003920:	0852      	lsrs	r2, r2, #1
 8003922:	3a01      	subs	r2, #1
 8003924:	0652      	lsls	r2, r2, #25
 8003926:	430a      	orrs	r2, r1
 8003928:	4915      	ldr	r1, [pc, #84]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a13      	ldr	r2, [pc, #76]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003938:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd f9d9 	bl	8000cf0 <HAL_GetTick>
 800393e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003940:	e009      	b.n	8003956 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003942:	f7fd f9d5 	bl	8000cf0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d902      	bls.n	8003956 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	73fb      	strb	r3, [r7, #15]
          break;
 8003954:	e005      	b.n	8003962 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ef      	beq.n	8003942 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	4903      	ldr	r1, [pc, #12]	; (8003980 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000

08003984 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003992:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800399e:	4b65      	ldr	r3, [pc, #404]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0203 	and.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d10d      	bne.n	80039ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
       ||
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039b6:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
       ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d044      	beq.n	8003a54 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	e041      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d00c      	beq.n	80039f2 <RCCEx_PLLSAI2_Config+0x6e>
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d013      	beq.n	8003a04 <RCCEx_PLLSAI2_Config+0x80>
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d120      	bne.n	8003a22 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039e0:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11d      	bne.n	8003a28 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f0:	e01a      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f2:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a02:	e013      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a04:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10f      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a10:	4b48      	ldr	r3, [pc, #288]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a20:	e006      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      break;
 8003a26:	e004      	b.n	8003a32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a28:	bf00      	nop
 8003a2a:	e002      	b.n	8003a32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a2c:	bf00      	nop
 8003a2e:	e000      	b.n	8003a32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a30:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a38:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	4939      	ldr	r1, [pc, #228]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d167      	bne.n	8003b2a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a66:	f7fd f943 	bl	8000cf0 <HAL_GetTick>
 8003a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a6c:	e009      	b.n	8003a82 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a6e:	f7fd f93f 	bl	8000cf0 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d902      	bls.n	8003a82 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a80:	e005      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a82:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ef      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d14a      	bne.n	8003b2a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d111      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	0211      	lsls	r1, r2, #8
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68d2      	ldr	r2, [r2, #12]
 8003ab0:	0912      	lsrs	r2, r2, #4
 8003ab2:	0452      	lsls	r2, r2, #17
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	491f      	ldr	r1, [pc, #124]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	614b      	str	r3, [r1, #20]
 8003abc:	e011      	b.n	8003ae2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	0211      	lsls	r1, r2, #8
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6912      	ldr	r2, [r2, #16]
 8003ad4:	0852      	lsrs	r2, r2, #1
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0652      	lsls	r2, r2, #25
 8003ada:	430a      	orrs	r2, r1
 8003adc:	4915      	ldr	r1, [pc, #84]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fd f8ff 	bl	8000cf0 <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003af4:	e009      	b.n	8003b0a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af6:	f7fd f8fb 	bl	8000cf0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d902      	bls.n	8003b0a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	73fb      	strb	r3, [r7, #15]
          break;
 8003b08:	e005      	b.n	8003b16 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ef      	beq.n	8003af6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4903      	ldr	r1, [pc, #12]	; (8003b34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e040      	b.n	8003bcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fc ff60 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2224      	movs	r2, #36	; 0x24
 8003b64:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8c0 	bl	8003cfc <UART_SetConfig>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e022      	b.n	8003bcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fc26 	bl	80043e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fcad 	bl	8004524 <UART_CheckIdleState>
 8003bca:	4603      	mov	r3, r0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	f040 8081 	bne.w	8003cf0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_UART_Transmit+0x26>
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e079      	b.n	8003cf2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_UART_Transmit+0x38>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e072      	b.n	8003cf2 <HAL_UART_Transmit+0x11e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2221      	movs	r2, #33	; 0x21
 8003c1e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c20:	f7fd f866 	bl	8000cf0 <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	d108      	bne.n	8003c52 <HAL_UART_Transmit+0x7e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e003      	b.n	8003c5a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003c62:	e02d      	b.n	8003cc0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fc9d 	bl	80045ae <UART_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e039      	b.n	8003cf2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c90:	b292      	uxth	r2, r2
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3302      	adds	r3, #2
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e008      	b.n	8003cae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1cb      	bne.n	8003c64 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2140      	movs	r1, #64	; 0x40
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fc69 	bl	80045ae <UART_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e005      	b.n	8003cf2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d00:	b08a      	sub	sp, #40	; 0x28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4bb8      	ldr	r3, [pc, #736]	; (8004014 <UART_SetConfig+0x318>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4aae      	ldr	r2, [pc, #696]	; (8004018 <UART_SetConfig+0x31c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4aa5      	ldr	r2, [pc, #660]	; (800401c <UART_SetConfig+0x320>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d126      	bne.n	8003dda <UART_SetConfig+0xde>
 8003d8c:	4ba4      	ldr	r3, [pc, #656]	; (8004020 <UART_SetConfig+0x324>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d81a      	bhi.n	8003dd0 <UART_SetConfig+0xd4>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0xa4>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dc1 	.word	0x08003dc1
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dc9 	.word	0x08003dc9
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db6:	e105      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbe:	e101      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc6:	e0fd      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e0f9      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	bf00      	nop
 8003dd8:	e0f4      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a91      	ldr	r2, [pc, #580]	; (8004024 <UART_SetConfig+0x328>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d138      	bne.n	8003e56 <UART_SetConfig+0x15a>
 8003de4:	4b8e      	ldr	r3, [pc, #568]	; (8004020 <UART_SetConfig+0x324>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d82c      	bhi.n	8003e4c <UART_SetConfig+0x150>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0xfc>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003e4d 	.word	0x08003e4d
 8003e00:	08003e4d 	.word	0x08003e4d
 8003e04:	08003e4d 	.word	0x08003e4d
 8003e08:	08003e3d 	.word	0x08003e3d
 8003e0c:	08003e4d 	.word	0x08003e4d
 8003e10:	08003e4d 	.word	0x08003e4d
 8003e14:	08003e4d 	.word	0x08003e4d
 8003e18:	08003e35 	.word	0x08003e35
 8003e1c:	08003e4d 	.word	0x08003e4d
 8003e20:	08003e4d 	.word	0x08003e4d
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e45 	.word	0x08003e45
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e0c7      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e34:	2302      	movs	r3, #2
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	e0c3      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e42:	e0bf      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e44:	2308      	movs	r3, #8
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	e0bb      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e52:	bf00      	nop
 8003e54:	e0b6      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a73      	ldr	r2, [pc, #460]	; (8004028 <UART_SetConfig+0x32c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d125      	bne.n	8003eac <UART_SetConfig+0x1b0>
 8003e60:	4b6f      	ldr	r3, [pc, #444]	; (8004020 <UART_SetConfig+0x324>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d011      	beq.n	8003e92 <UART_SetConfig+0x196>
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d802      	bhi.n	8003e78 <UART_SetConfig+0x17c>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <UART_SetConfig+0x186>
 8003e76:	e014      	b.n	8003ea2 <UART_SetConfig+0x1a6>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d006      	beq.n	8003e8a <UART_SetConfig+0x18e>
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d00c      	beq.n	8003e9a <UART_SetConfig+0x19e>
 8003e80:	e00f      	b.n	8003ea2 <UART_SetConfig+0x1a6>
 8003e82:	2300      	movs	r3, #0
 8003e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e88:	e09c      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e90:	e098      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e92:	2304      	movs	r3, #4
 8003e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e98:	e094      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea0:	e090      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea8:	bf00      	nop
 8003eaa:	e08b      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5e      	ldr	r2, [pc, #376]	; (800402c <UART_SetConfig+0x330>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d125      	bne.n	8003f02 <UART_SetConfig+0x206>
 8003eb6:	4b5a      	ldr	r3, [pc, #360]	; (8004020 <UART_SetConfig+0x324>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d011      	beq.n	8003ee8 <UART_SetConfig+0x1ec>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d802      	bhi.n	8003ece <UART_SetConfig+0x1d2>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <UART_SetConfig+0x1dc>
 8003ecc:	e014      	b.n	8003ef8 <UART_SetConfig+0x1fc>
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d006      	beq.n	8003ee0 <UART_SetConfig+0x1e4>
 8003ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed4:	d00c      	beq.n	8003ef0 <UART_SetConfig+0x1f4>
 8003ed6:	e00f      	b.n	8003ef8 <UART_SetConfig+0x1fc>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e071      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e06d      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e069      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e065      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	bf00      	nop
 8003f00:	e060      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <UART_SetConfig+0x334>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d129      	bne.n	8003f60 <UART_SetConfig+0x264>
 8003f0c:	4b44      	ldr	r3, [pc, #272]	; (8004020 <UART_SetConfig+0x324>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1a:	d014      	beq.n	8003f46 <UART_SetConfig+0x24a>
 8003f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f20:	d802      	bhi.n	8003f28 <UART_SetConfig+0x22c>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <UART_SetConfig+0x23a>
 8003f26:	e016      	b.n	8003f56 <UART_SetConfig+0x25a>
 8003f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2c:	d007      	beq.n	8003f3e <UART_SetConfig+0x242>
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d00c      	beq.n	8003f4e <UART_SetConfig+0x252>
 8003f34:	e00f      	b.n	8003f56 <UART_SetConfig+0x25a>
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3c:	e042      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f44:	e03e      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f46:	2304      	movs	r3, #4
 8003f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4c:	e03a      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f4e:	2308      	movs	r3, #8
 8003f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f54:	e036      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f56:	2310      	movs	r3, #16
 8003f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5c:	bf00      	nop
 8003f5e:	e031      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2c      	ldr	r2, [pc, #176]	; (8004018 <UART_SetConfig+0x31c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d129      	bne.n	8003fbe <UART_SetConfig+0x2c2>
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <UART_SetConfig+0x324>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d014      	beq.n	8003fa4 <UART_SetConfig+0x2a8>
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d802      	bhi.n	8003f86 <UART_SetConfig+0x28a>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <UART_SetConfig+0x298>
 8003f84:	e016      	b.n	8003fb4 <UART_SetConfig+0x2b8>
 8003f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8a:	d007      	beq.n	8003f9c <UART_SetConfig+0x2a0>
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f90:	d00c      	beq.n	8003fac <UART_SetConfig+0x2b0>
 8003f92:	e00f      	b.n	8003fb4 <UART_SetConfig+0x2b8>
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9a:	e013      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa2:	e00f      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003faa:	e00b      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003fac:	2308      	movs	r3, #8
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb2:	e007      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fba:	bf00      	nop
 8003fbc:	e002      	b.n	8003fc4 <UART_SetConfig+0x2c8>
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a13      	ldr	r2, [pc, #76]	; (8004018 <UART_SetConfig+0x31c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	f040 80fe 	bne.w	80041cc <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d837      	bhi.n	8004048 <UART_SetConfig+0x34c>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x2e4>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	08004049 	.word	0x08004049
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004049 	.word	0x08004049
 8003ff0:	08004039 	.word	0x08004039
 8003ff4:	08004049 	.word	0x08004049
 8003ff8:	08004049 	.word	0x08004049
 8003ffc:	08004049 	.word	0x08004049
 8004000:	08004041 	.word	0x08004041
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004004:	f7ff f85c 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004008:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800400a:	e020      	b.n	800404e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <UART_SetConfig+0x338>)
 800400e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004010:	e01d      	b.n	800404e <UART_SetConfig+0x352>
 8004012:	bf00      	nop
 8004014:	efff69f3 	.word	0xefff69f3
 8004018:	40008000 	.word	0x40008000
 800401c:	40013800 	.word	0x40013800
 8004020:	40021000 	.word	0x40021000
 8004024:	40004400 	.word	0x40004400
 8004028:	40004800 	.word	0x40004800
 800402c:	40004c00 	.word	0x40004c00
 8004030:	40005000 	.word	0x40005000
 8004034:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004038:	f7fe ffac 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 800403c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800403e:	e006      	b.n	800404e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004044:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004046:	e002      	b.n	800404e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	76fb      	strb	r3, [r7, #27]
        break;
 800404c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 81b9 	beq.w	80043c8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	429a      	cmp	r2, r3
 8004064:	d305      	bcc.n	8004072 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	429a      	cmp	r2, r3
 8004070:	d902      	bls.n	8004078 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	76fb      	strb	r3, [r7, #27]
 8004076:	e1a7      	b.n	80043c8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800407c:	2b08      	cmp	r3, #8
 800407e:	f200 8092 	bhi.w	80041a6 <UART_SetConfig+0x4aa>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0x38c>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080041a7 	.word	0x080041a7
 8004090:	080040fb 	.word	0x080040fb
 8004094:	080041a7 	.word	0x080041a7
 8004098:	0800412f 	.word	0x0800412f
 800409c:	080041a7 	.word	0x080041a7
 80040a0:	080041a7 	.word	0x080041a7
 80040a4:	080041a7 	.word	0x080041a7
 80040a8:	0800417d 	.word	0x0800417d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80040ac:	f7ff f808 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 80040b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4619      	mov	r1, r3
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f04f 0400 	mov.w	r4, #0
 80040c2:	0214      	lsls	r4, r2, #8
 80040c4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040c8:	020b      	lsls	r3, r1, #8
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6852      	ldr	r2, [r2, #4]
 80040ce:	0852      	lsrs	r2, r2, #1
 80040d0:	4611      	mov	r1, r2
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	eb13 0b01 	adds.w	fp, r3, r1
 80040da:	eb44 0c02 	adc.w	ip, r4, r2
 80040de:	4658      	mov	r0, fp
 80040e0:	4661      	mov	r1, ip
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f04f 0400 	mov.w	r4, #0
 80040ea:	461a      	mov	r2, r3
 80040ec:	4623      	mov	r3, r4
 80040ee:	f7fc f8c7 	bl	8000280 <__aeabi_uldivmod>
 80040f2:	4603      	mov	r3, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040f8:	e058      	b.n	80041ac <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	f04f 0400 	mov.w	r4, #0
 8004104:	49ae      	ldr	r1, [pc, #696]	; (80043c0 <UART_SetConfig+0x6c4>)
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	eb13 0b01 	adds.w	fp, r3, r1
 800410e:	eb44 0c02 	adc.w	ip, r4, r2
 8004112:	4658      	mov	r0, fp
 8004114:	4661      	mov	r1, ip
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f04f 0400 	mov.w	r4, #0
 800411e:	461a      	mov	r2, r3
 8004120:	4623      	mov	r3, r4
 8004122:	f7fc f8ad 	bl	8000280 <__aeabi_uldivmod>
 8004126:	4603      	mov	r3, r0
 8004128:	460c      	mov	r4, r1
 800412a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800412c:	e03e      	b.n	80041ac <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fe ff31 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8004132:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4619      	mov	r1, r3
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	f04f 0400 	mov.w	r4, #0
 8004144:	0214      	lsls	r4, r2, #8
 8004146:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800414a:	020b      	lsls	r3, r1, #8
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	0852      	lsrs	r2, r2, #1
 8004152:	4611      	mov	r1, r2
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	eb13 0b01 	adds.w	fp, r3, r1
 800415c:	eb44 0c02 	adc.w	ip, r4, r2
 8004160:	4658      	mov	r0, fp
 8004162:	4661      	mov	r1, ip
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f04f 0400 	mov.w	r4, #0
 800416c:	461a      	mov	r2, r3
 800416e:	4623      	mov	r3, r4
 8004170:	f7fc f886 	bl	8000280 <__aeabi_uldivmod>
 8004174:	4603      	mov	r3, r0
 8004176:	460c      	mov	r4, r1
 8004178:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800417a:	e017      	b.n	80041ac <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	f04f 0400 	mov.w	r4, #0
 8004186:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800418a:	f144 0100 	adc.w	r1, r4, #0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f04f 0400 	mov.w	r4, #0
 8004196:	461a      	mov	r2, r3
 8004198:	4623      	mov	r3, r4
 800419a:	f7fc f871 	bl	8000280 <__aeabi_uldivmod>
 800419e:	4603      	mov	r3, r0
 80041a0:	460c      	mov	r4, r1
 80041a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80041a4:	e002      	b.n	80041ac <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	76fb      	strb	r3, [r7, #27]
            break;
 80041aa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b2:	d308      	bcc.n	80041c6 <UART_SetConfig+0x4ca>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ba:	d204      	bcs.n	80041c6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e100      	b.n	80043c8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	76fb      	strb	r3, [r7, #27]
 80041ca:	e0fd      	b.n	80043c8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d4:	f040 8084 	bne.w	80042e0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80041d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d85f      	bhi.n	80042a0 <UART_SetConfig+0x5a4>
 80041e0:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0x4ec>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	0800422d 	.word	0x0800422d
 80041f0:	0800424d 	.word	0x0800424d
 80041f4:	080042a1 	.word	0x080042a1
 80041f8:	08004269 	.word	0x08004269
 80041fc:	080042a1 	.word	0x080042a1
 8004200:	080042a1 	.word	0x080042a1
 8004204:	080042a1 	.word	0x080042a1
 8004208:	08004289 	.word	0x08004289
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe ff58 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004210:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	005a      	lsls	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	b29b      	uxth	r3, r3
 8004228:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800422a:	e03c      	b.n	80042a6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800422c:	f7fe ff5e 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8004230:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	005a      	lsls	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	b29b      	uxth	r3, r3
 8004248:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800424a:	e02c      	b.n	80042a6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004256:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6852      	ldr	r2, [r2, #4]
 800425e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004266:	e01e      	b.n	80042a6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004268:	f7fe fe94 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 800426c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	005a      	lsls	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004286:	e00e      	b.n	80042a6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800429e:	e002      	b.n	80042a6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	76fb      	strb	r3, [r7, #27]
        break;
 80042a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d916      	bls.n	80042da <UART_SetConfig+0x5de>
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b2:	d212      	bcs.n	80042da <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f023 030f 	bic.w	r3, r3, #15
 80042bc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	89fb      	ldrh	r3, [r7, #14]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	89fa      	ldrh	r2, [r7, #14]
 80042d6:	60da      	str	r2, [r3, #12]
 80042d8:	e076      	b.n	80043c8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e073      	b.n	80043c8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80042e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d85c      	bhi.n	80043a2 <UART_SetConfig+0x6a6>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x5f4>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004315 	.word	0x08004315
 80042f4:	08004333 	.word	0x08004333
 80042f8:	08004351 	.word	0x08004351
 80042fc:	080043a3 	.word	0x080043a3
 8004300:	0800436d 	.word	0x0800436d
 8004304:	080043a3 	.word	0x080043a3
 8004308:	080043a3 	.word	0x080043a3
 800430c:	080043a3 	.word	0x080043a3
 8004310:	0800438b 	.word	0x0800438b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fe fed4 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8004318:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	085a      	lsrs	r2, r3, #1
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	b29b      	uxth	r3, r3
 800432e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004330:	e03a      	b.n	80043a8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004332:	f7fe fedb 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8004336:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	085a      	lsrs	r2, r3, #1
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800434e:	e02b      	b.n	80043a8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800435a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6852      	ldr	r2, [r2, #4]
 8004362:	fbb3 f3f2 	udiv	r3, r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800436a:	e01d      	b.n	80043a8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436c:	f7fe fe12 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8004370:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085a      	lsrs	r2, r3, #1
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	441a      	add	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	b29b      	uxth	r3, r3
 8004386:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004388:	e00e      	b.n	80043a8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043a0:	e002      	b.n	80043a8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	76fb      	strb	r3, [r7, #27]
        break;
 80043a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	d90a      	bls.n	80043c4 <UART_SetConfig+0x6c8>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b4:	d206      	bcs.n	80043c4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	e003      	b.n	80043c8 <UART_SetConfig+0x6cc>
 80043c0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043d4:	7efb      	ldrb	r3, [r7, #27]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3728      	adds	r7, #40	; 0x28
 80043da:	46bd      	mov	sp, r7
 80043dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080043e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01a      	beq.n	80044f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044de:	d10a      	bne.n	80044f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af02      	add	r7, sp, #8
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004532:	f7fc fbdd 	bl	8000cf0 <HAL_GetTick>
 8004536:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b08      	cmp	r3, #8
 8004544:	d10e      	bne.n	8004564 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004546:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f82a 	bl	80045ae <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e020      	b.n	80045a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d10e      	bne.n	8004590 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f814 	bl	80045ae <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e00a      	b.n	80045a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	e05d      	b.n	800467c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d059      	beq.n	800467c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7fc fb92 	bl	8000cf0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <UART_WaitOnFlagUntilTimeout+0x30>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11b      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e042      	b.n	800469c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02b      	beq.n	800467c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004632:	d123      	bne.n	800467c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800463c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800464c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e00f      	b.n	800469c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4013      	ands	r3, r2
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	429a      	cmp	r2, r3
 8004698:	d092      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <__errno>:
 80046a4:	4b01      	ldr	r3, [pc, #4]	; (80046ac <__errno+0x8>)
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	2000000c 	.word	0x2000000c

080046b0 <__libc_init_array>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4e0d      	ldr	r6, [pc, #52]	; (80046e8 <__libc_init_array+0x38>)
 80046b4:	4c0d      	ldr	r4, [pc, #52]	; (80046ec <__libc_init_array+0x3c>)
 80046b6:	1ba4      	subs	r4, r4, r6
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	2500      	movs	r5, #0
 80046bc:	42a5      	cmp	r5, r4
 80046be:	d109      	bne.n	80046d4 <__libc_init_array+0x24>
 80046c0:	4e0b      	ldr	r6, [pc, #44]	; (80046f0 <__libc_init_array+0x40>)
 80046c2:	4c0c      	ldr	r4, [pc, #48]	; (80046f4 <__libc_init_array+0x44>)
 80046c4:	f000 fc26 	bl	8004f14 <_init>
 80046c8:	1ba4      	subs	r4, r4, r6
 80046ca:	10a4      	asrs	r4, r4, #2
 80046cc:	2500      	movs	r5, #0
 80046ce:	42a5      	cmp	r5, r4
 80046d0:	d105      	bne.n	80046de <__libc_init_array+0x2e>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046d8:	4798      	blx	r3
 80046da:	3501      	adds	r5, #1
 80046dc:	e7ee      	b.n	80046bc <__libc_init_array+0xc>
 80046de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046e2:	4798      	blx	r3
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7f2      	b.n	80046ce <__libc_init_array+0x1e>
 80046e8:	08004fb8 	.word	0x08004fb8
 80046ec:	08004fb8 	.word	0x08004fb8
 80046f0:	08004fb8 	.word	0x08004fb8
 80046f4:	08004fbc 	.word	0x08004fbc

080046f8 <memset>:
 80046f8:	4402      	add	r2, r0
 80046fa:	4603      	mov	r3, r0
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d100      	bne.n	8004702 <memset+0xa>
 8004700:	4770      	bx	lr
 8004702:	f803 1b01 	strb.w	r1, [r3], #1
 8004706:	e7f9      	b.n	80046fc <memset+0x4>

08004708 <siprintf>:
 8004708:	b40e      	push	{r1, r2, r3}
 800470a:	b500      	push	{lr}
 800470c:	b09c      	sub	sp, #112	; 0x70
 800470e:	ab1d      	add	r3, sp, #116	; 0x74
 8004710:	9002      	str	r0, [sp, #8]
 8004712:	9006      	str	r0, [sp, #24]
 8004714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004718:	4809      	ldr	r0, [pc, #36]	; (8004740 <siprintf+0x38>)
 800471a:	9107      	str	r1, [sp, #28]
 800471c:	9104      	str	r1, [sp, #16]
 800471e:	4909      	ldr	r1, [pc, #36]	; (8004744 <siprintf+0x3c>)
 8004720:	f853 2b04 	ldr.w	r2, [r3], #4
 8004724:	9105      	str	r1, [sp, #20]
 8004726:	6800      	ldr	r0, [r0, #0]
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	a902      	add	r1, sp, #8
 800472c:	f000 f866 	bl	80047fc <_svfiprintf_r>
 8004730:	9b02      	ldr	r3, [sp, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	b01c      	add	sp, #112	; 0x70
 8004738:	f85d eb04 	ldr.w	lr, [sp], #4
 800473c:	b003      	add	sp, #12
 800473e:	4770      	bx	lr
 8004740:	2000000c 	.word	0x2000000c
 8004744:	ffff0208 	.word	0xffff0208

08004748 <__ssputs_r>:
 8004748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800474c:	688e      	ldr	r6, [r1, #8]
 800474e:	429e      	cmp	r6, r3
 8004750:	4682      	mov	sl, r0
 8004752:	460c      	mov	r4, r1
 8004754:	4690      	mov	r8, r2
 8004756:	4699      	mov	r9, r3
 8004758:	d837      	bhi.n	80047ca <__ssputs_r+0x82>
 800475a:	898a      	ldrh	r2, [r1, #12]
 800475c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004760:	d031      	beq.n	80047c6 <__ssputs_r+0x7e>
 8004762:	6825      	ldr	r5, [r4, #0]
 8004764:	6909      	ldr	r1, [r1, #16]
 8004766:	1a6f      	subs	r7, r5, r1
 8004768:	6965      	ldr	r5, [r4, #20]
 800476a:	2302      	movs	r3, #2
 800476c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004770:	fb95 f5f3 	sdiv	r5, r5, r3
 8004774:	f109 0301 	add.w	r3, r9, #1
 8004778:	443b      	add	r3, r7
 800477a:	429d      	cmp	r5, r3
 800477c:	bf38      	it	cc
 800477e:	461d      	movcc	r5, r3
 8004780:	0553      	lsls	r3, r2, #21
 8004782:	d530      	bpl.n	80047e6 <__ssputs_r+0x9e>
 8004784:	4629      	mov	r1, r5
 8004786:	f000 fb2b 	bl	8004de0 <_malloc_r>
 800478a:	4606      	mov	r6, r0
 800478c:	b950      	cbnz	r0, 80047a4 <__ssputs_r+0x5c>
 800478e:	230c      	movs	r3, #12
 8004790:	f8ca 3000 	str.w	r3, [sl]
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a4:	463a      	mov	r2, r7
 80047a6:	6921      	ldr	r1, [r4, #16]
 80047a8:	f000 faa8 	bl	8004cfc <memcpy>
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	6126      	str	r6, [r4, #16]
 80047ba:	6165      	str	r5, [r4, #20]
 80047bc:	443e      	add	r6, r7
 80047be:	1bed      	subs	r5, r5, r7
 80047c0:	6026      	str	r6, [r4, #0]
 80047c2:	60a5      	str	r5, [r4, #8]
 80047c4:	464e      	mov	r6, r9
 80047c6:	454e      	cmp	r6, r9
 80047c8:	d900      	bls.n	80047cc <__ssputs_r+0x84>
 80047ca:	464e      	mov	r6, r9
 80047cc:	4632      	mov	r2, r6
 80047ce:	4641      	mov	r1, r8
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	f000 fa9e 	bl	8004d12 <memmove>
 80047d6:	68a3      	ldr	r3, [r4, #8]
 80047d8:	1b9b      	subs	r3, r3, r6
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	441e      	add	r6, r3
 80047e0:	6026      	str	r6, [r4, #0]
 80047e2:	2000      	movs	r0, #0
 80047e4:	e7dc      	b.n	80047a0 <__ssputs_r+0x58>
 80047e6:	462a      	mov	r2, r5
 80047e8:	f000 fb54 	bl	8004e94 <_realloc_r>
 80047ec:	4606      	mov	r6, r0
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1e2      	bne.n	80047b8 <__ssputs_r+0x70>
 80047f2:	6921      	ldr	r1, [r4, #16]
 80047f4:	4650      	mov	r0, sl
 80047f6:	f000 faa5 	bl	8004d44 <_free_r>
 80047fa:	e7c8      	b.n	800478e <__ssputs_r+0x46>

080047fc <_svfiprintf_r>:
 80047fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004800:	461d      	mov	r5, r3
 8004802:	898b      	ldrh	r3, [r1, #12]
 8004804:	061f      	lsls	r7, r3, #24
 8004806:	b09d      	sub	sp, #116	; 0x74
 8004808:	4680      	mov	r8, r0
 800480a:	460c      	mov	r4, r1
 800480c:	4616      	mov	r6, r2
 800480e:	d50f      	bpl.n	8004830 <_svfiprintf_r+0x34>
 8004810:	690b      	ldr	r3, [r1, #16]
 8004812:	b96b      	cbnz	r3, 8004830 <_svfiprintf_r+0x34>
 8004814:	2140      	movs	r1, #64	; 0x40
 8004816:	f000 fae3 	bl	8004de0 <_malloc_r>
 800481a:	6020      	str	r0, [r4, #0]
 800481c:	6120      	str	r0, [r4, #16]
 800481e:	b928      	cbnz	r0, 800482c <_svfiprintf_r+0x30>
 8004820:	230c      	movs	r3, #12
 8004822:	f8c8 3000 	str.w	r3, [r8]
 8004826:	f04f 30ff 	mov.w	r0, #4294967295
 800482a:	e0c8      	b.n	80049be <_svfiprintf_r+0x1c2>
 800482c:	2340      	movs	r3, #64	; 0x40
 800482e:	6163      	str	r3, [r4, #20]
 8004830:	2300      	movs	r3, #0
 8004832:	9309      	str	r3, [sp, #36]	; 0x24
 8004834:	2320      	movs	r3, #32
 8004836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483a:	2330      	movs	r3, #48	; 0x30
 800483c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004840:	9503      	str	r5, [sp, #12]
 8004842:	f04f 0b01 	mov.w	fp, #1
 8004846:	4637      	mov	r7, r6
 8004848:	463d      	mov	r5, r7
 800484a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800484e:	b10b      	cbz	r3, 8004854 <_svfiprintf_r+0x58>
 8004850:	2b25      	cmp	r3, #37	; 0x25
 8004852:	d13e      	bne.n	80048d2 <_svfiprintf_r+0xd6>
 8004854:	ebb7 0a06 	subs.w	sl, r7, r6
 8004858:	d00b      	beq.n	8004872 <_svfiprintf_r+0x76>
 800485a:	4653      	mov	r3, sl
 800485c:	4632      	mov	r2, r6
 800485e:	4621      	mov	r1, r4
 8004860:	4640      	mov	r0, r8
 8004862:	f7ff ff71 	bl	8004748 <__ssputs_r>
 8004866:	3001      	adds	r0, #1
 8004868:	f000 80a4 	beq.w	80049b4 <_svfiprintf_r+0x1b8>
 800486c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800486e:	4453      	add	r3, sl
 8004870:	9309      	str	r3, [sp, #36]	; 0x24
 8004872:	783b      	ldrb	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 809d 	beq.w	80049b4 <_svfiprintf_r+0x1b8>
 800487a:	2300      	movs	r3, #0
 800487c:	f04f 32ff 	mov.w	r2, #4294967295
 8004880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004884:	9304      	str	r3, [sp, #16]
 8004886:	9307      	str	r3, [sp, #28]
 8004888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800488c:	931a      	str	r3, [sp, #104]	; 0x68
 800488e:	462f      	mov	r7, r5
 8004890:	2205      	movs	r2, #5
 8004892:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004896:	4850      	ldr	r0, [pc, #320]	; (80049d8 <_svfiprintf_r+0x1dc>)
 8004898:	f7fb fca2 	bl	80001e0 <memchr>
 800489c:	9b04      	ldr	r3, [sp, #16]
 800489e:	b9d0      	cbnz	r0, 80048d6 <_svfiprintf_r+0xda>
 80048a0:	06d9      	lsls	r1, r3, #27
 80048a2:	bf44      	itt	mi
 80048a4:	2220      	movmi	r2, #32
 80048a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048aa:	071a      	lsls	r2, r3, #28
 80048ac:	bf44      	itt	mi
 80048ae:	222b      	movmi	r2, #43	; 0x2b
 80048b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048b4:	782a      	ldrb	r2, [r5, #0]
 80048b6:	2a2a      	cmp	r2, #42	; 0x2a
 80048b8:	d015      	beq.n	80048e6 <_svfiprintf_r+0xea>
 80048ba:	9a07      	ldr	r2, [sp, #28]
 80048bc:	462f      	mov	r7, r5
 80048be:	2000      	movs	r0, #0
 80048c0:	250a      	movs	r5, #10
 80048c2:	4639      	mov	r1, r7
 80048c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048c8:	3b30      	subs	r3, #48	; 0x30
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	d94d      	bls.n	800496a <_svfiprintf_r+0x16e>
 80048ce:	b1b8      	cbz	r0, 8004900 <_svfiprintf_r+0x104>
 80048d0:	e00f      	b.n	80048f2 <_svfiprintf_r+0xf6>
 80048d2:	462f      	mov	r7, r5
 80048d4:	e7b8      	b.n	8004848 <_svfiprintf_r+0x4c>
 80048d6:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <_svfiprintf_r+0x1dc>)
 80048d8:	1a80      	subs	r0, r0, r2
 80048da:	fa0b f000 	lsl.w	r0, fp, r0
 80048de:	4318      	orrs	r0, r3
 80048e0:	9004      	str	r0, [sp, #16]
 80048e2:	463d      	mov	r5, r7
 80048e4:	e7d3      	b.n	800488e <_svfiprintf_r+0x92>
 80048e6:	9a03      	ldr	r2, [sp, #12]
 80048e8:	1d11      	adds	r1, r2, #4
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	9103      	str	r1, [sp, #12]
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	db01      	blt.n	80048f6 <_svfiprintf_r+0xfa>
 80048f2:	9207      	str	r2, [sp, #28]
 80048f4:	e004      	b.n	8004900 <_svfiprintf_r+0x104>
 80048f6:	4252      	negs	r2, r2
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	9207      	str	r2, [sp, #28]
 80048fe:	9304      	str	r3, [sp, #16]
 8004900:	783b      	ldrb	r3, [r7, #0]
 8004902:	2b2e      	cmp	r3, #46	; 0x2e
 8004904:	d10c      	bne.n	8004920 <_svfiprintf_r+0x124>
 8004906:	787b      	ldrb	r3, [r7, #1]
 8004908:	2b2a      	cmp	r3, #42	; 0x2a
 800490a:	d133      	bne.n	8004974 <_svfiprintf_r+0x178>
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	9203      	str	r2, [sp, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	bfb8      	it	lt
 8004918:	f04f 33ff 	movlt.w	r3, #4294967295
 800491c:	3702      	adds	r7, #2
 800491e:	9305      	str	r3, [sp, #20]
 8004920:	4d2e      	ldr	r5, [pc, #184]	; (80049dc <_svfiprintf_r+0x1e0>)
 8004922:	7839      	ldrb	r1, [r7, #0]
 8004924:	2203      	movs	r2, #3
 8004926:	4628      	mov	r0, r5
 8004928:	f7fb fc5a 	bl	80001e0 <memchr>
 800492c:	b138      	cbz	r0, 800493e <_svfiprintf_r+0x142>
 800492e:	2340      	movs	r3, #64	; 0x40
 8004930:	1b40      	subs	r0, r0, r5
 8004932:	fa03 f000 	lsl.w	r0, r3, r0
 8004936:	9b04      	ldr	r3, [sp, #16]
 8004938:	4303      	orrs	r3, r0
 800493a:	3701      	adds	r7, #1
 800493c:	9304      	str	r3, [sp, #16]
 800493e:	7839      	ldrb	r1, [r7, #0]
 8004940:	4827      	ldr	r0, [pc, #156]	; (80049e0 <_svfiprintf_r+0x1e4>)
 8004942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004946:	2206      	movs	r2, #6
 8004948:	1c7e      	adds	r6, r7, #1
 800494a:	f7fb fc49 	bl	80001e0 <memchr>
 800494e:	2800      	cmp	r0, #0
 8004950:	d038      	beq.n	80049c4 <_svfiprintf_r+0x1c8>
 8004952:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <_svfiprintf_r+0x1e8>)
 8004954:	bb13      	cbnz	r3, 800499c <_svfiprintf_r+0x1a0>
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	3307      	adds	r3, #7
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	3308      	adds	r3, #8
 8004960:	9303      	str	r3, [sp, #12]
 8004962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004964:	444b      	add	r3, r9
 8004966:	9309      	str	r3, [sp, #36]	; 0x24
 8004968:	e76d      	b.n	8004846 <_svfiprintf_r+0x4a>
 800496a:	fb05 3202 	mla	r2, r5, r2, r3
 800496e:	2001      	movs	r0, #1
 8004970:	460f      	mov	r7, r1
 8004972:	e7a6      	b.n	80048c2 <_svfiprintf_r+0xc6>
 8004974:	2300      	movs	r3, #0
 8004976:	3701      	adds	r7, #1
 8004978:	9305      	str	r3, [sp, #20]
 800497a:	4619      	mov	r1, r3
 800497c:	250a      	movs	r5, #10
 800497e:	4638      	mov	r0, r7
 8004980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004984:	3a30      	subs	r2, #48	; 0x30
 8004986:	2a09      	cmp	r2, #9
 8004988:	d903      	bls.n	8004992 <_svfiprintf_r+0x196>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0c8      	beq.n	8004920 <_svfiprintf_r+0x124>
 800498e:	9105      	str	r1, [sp, #20]
 8004990:	e7c6      	b.n	8004920 <_svfiprintf_r+0x124>
 8004992:	fb05 2101 	mla	r1, r5, r1, r2
 8004996:	2301      	movs	r3, #1
 8004998:	4607      	mov	r7, r0
 800499a:	e7f0      	b.n	800497e <_svfiprintf_r+0x182>
 800499c:	ab03      	add	r3, sp, #12
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4622      	mov	r2, r4
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <_svfiprintf_r+0x1ec>)
 80049a4:	a904      	add	r1, sp, #16
 80049a6:	4640      	mov	r0, r8
 80049a8:	f3af 8000 	nop.w
 80049ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049b0:	4681      	mov	r9, r0
 80049b2:	d1d6      	bne.n	8004962 <_svfiprintf_r+0x166>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	065b      	lsls	r3, r3, #25
 80049b8:	f53f af35 	bmi.w	8004826 <_svfiprintf_r+0x2a>
 80049bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049be:	b01d      	add	sp, #116	; 0x74
 80049c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c4:	ab03      	add	r3, sp, #12
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4622      	mov	r2, r4
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <_svfiprintf_r+0x1ec>)
 80049cc:	a904      	add	r1, sp, #16
 80049ce:	4640      	mov	r0, r8
 80049d0:	f000 f882 	bl	8004ad8 <_printf_i>
 80049d4:	e7ea      	b.n	80049ac <_svfiprintf_r+0x1b0>
 80049d6:	bf00      	nop
 80049d8:	08004f7c 	.word	0x08004f7c
 80049dc:	08004f82 	.word	0x08004f82
 80049e0:	08004f86 	.word	0x08004f86
 80049e4:	00000000 	.word	0x00000000
 80049e8:	08004749 	.word	0x08004749

080049ec <_printf_common>:
 80049ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	4691      	mov	r9, r2
 80049f2:	461f      	mov	r7, r3
 80049f4:	688a      	ldr	r2, [r1, #8]
 80049f6:	690b      	ldr	r3, [r1, #16]
 80049f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bfb8      	it	lt
 8004a00:	4613      	movlt	r3, r2
 8004a02:	f8c9 3000 	str.w	r3, [r9]
 8004a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	b112      	cbz	r2, 8004a16 <_printf_common+0x2a>
 8004a10:	3301      	adds	r3, #1
 8004a12:	f8c9 3000 	str.w	r3, [r9]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	0699      	lsls	r1, r3, #26
 8004a1a:	bf42      	ittt	mi
 8004a1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a20:	3302      	addmi	r3, #2
 8004a22:	f8c9 3000 	strmi.w	r3, [r9]
 8004a26:	6825      	ldr	r5, [r4, #0]
 8004a28:	f015 0506 	ands.w	r5, r5, #6
 8004a2c:	d107      	bne.n	8004a3e <_printf_common+0x52>
 8004a2e:	f104 0a19 	add.w	sl, r4, #25
 8004a32:	68e3      	ldr	r3, [r4, #12]
 8004a34:	f8d9 2000 	ldr.w	r2, [r9]
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	42ab      	cmp	r3, r5
 8004a3c:	dc28      	bgt.n	8004a90 <_printf_common+0xa4>
 8004a3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	3300      	adds	r3, #0
 8004a46:	bf18      	it	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	0692      	lsls	r2, r2, #26
 8004a4c:	d42d      	bmi.n	8004aaa <_printf_common+0xbe>
 8004a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a52:	4639      	mov	r1, r7
 8004a54:	4630      	mov	r0, r6
 8004a56:	47c0      	blx	r8
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d020      	beq.n	8004a9e <_printf_common+0xb2>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	68e5      	ldr	r5, [r4, #12]
 8004a60:	f8d9 2000 	ldr.w	r2, [r9]
 8004a64:	f003 0306 	and.w	r3, r3, #6
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	bf08      	it	eq
 8004a6c:	1aad      	subeq	r5, r5, r2
 8004a6e:	68a3      	ldr	r3, [r4, #8]
 8004a70:	6922      	ldr	r2, [r4, #16]
 8004a72:	bf0c      	ite	eq
 8004a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a78:	2500      	movne	r5, #0
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	bfc4      	itt	gt
 8004a7e:	1a9b      	subgt	r3, r3, r2
 8004a80:	18ed      	addgt	r5, r5, r3
 8004a82:	f04f 0900 	mov.w	r9, #0
 8004a86:	341a      	adds	r4, #26
 8004a88:	454d      	cmp	r5, r9
 8004a8a:	d11a      	bne.n	8004ac2 <_printf_common+0xd6>
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	e008      	b.n	8004aa2 <_printf_common+0xb6>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4652      	mov	r2, sl
 8004a94:	4639      	mov	r1, r7
 8004a96:	4630      	mov	r0, r6
 8004a98:	47c0      	blx	r8
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d103      	bne.n	8004aa6 <_printf_common+0xba>
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	3501      	adds	r5, #1
 8004aa8:	e7c3      	b.n	8004a32 <_printf_common+0x46>
 8004aaa:	18e1      	adds	r1, r4, r3
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	2030      	movs	r0, #48	; 0x30
 8004ab0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ab4:	4422      	add	r2, r4
 8004ab6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004abe:	3302      	adds	r3, #2
 8004ac0:	e7c5      	b.n	8004a4e <_printf_common+0x62>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	4630      	mov	r0, r6
 8004aca:	47c0      	blx	r8
 8004acc:	3001      	adds	r0, #1
 8004ace:	d0e6      	beq.n	8004a9e <_printf_common+0xb2>
 8004ad0:	f109 0901 	add.w	r9, r9, #1
 8004ad4:	e7d8      	b.n	8004a88 <_printf_common+0x9c>
	...

08004ad8 <_printf_i>:
 8004ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004adc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	7e09      	ldrb	r1, [r1, #24]
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	296e      	cmp	r1, #110	; 0x6e
 8004ae8:	4617      	mov	r7, r2
 8004aea:	4606      	mov	r6, r0
 8004aec:	4698      	mov	r8, r3
 8004aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004af0:	f000 80b3 	beq.w	8004c5a <_printf_i+0x182>
 8004af4:	d822      	bhi.n	8004b3c <_printf_i+0x64>
 8004af6:	2963      	cmp	r1, #99	; 0x63
 8004af8:	d036      	beq.n	8004b68 <_printf_i+0x90>
 8004afa:	d80a      	bhi.n	8004b12 <_printf_i+0x3a>
 8004afc:	2900      	cmp	r1, #0
 8004afe:	f000 80b9 	beq.w	8004c74 <_printf_i+0x19c>
 8004b02:	2958      	cmp	r1, #88	; 0x58
 8004b04:	f000 8083 	beq.w	8004c0e <_printf_i+0x136>
 8004b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b10:	e032      	b.n	8004b78 <_printf_i+0xa0>
 8004b12:	2964      	cmp	r1, #100	; 0x64
 8004b14:	d001      	beq.n	8004b1a <_printf_i+0x42>
 8004b16:	2969      	cmp	r1, #105	; 0x69
 8004b18:	d1f6      	bne.n	8004b08 <_printf_i+0x30>
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	6813      	ldr	r3, [r2, #0]
 8004b1e:	0605      	lsls	r5, r0, #24
 8004b20:	f103 0104 	add.w	r1, r3, #4
 8004b24:	d52a      	bpl.n	8004b7c <_printf_i+0xa4>
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6011      	str	r1, [r2, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da03      	bge.n	8004b36 <_printf_i+0x5e>
 8004b2e:	222d      	movs	r2, #45	; 0x2d
 8004b30:	425b      	negs	r3, r3
 8004b32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b36:	486f      	ldr	r0, [pc, #444]	; (8004cf4 <_printf_i+0x21c>)
 8004b38:	220a      	movs	r2, #10
 8004b3a:	e039      	b.n	8004bb0 <_printf_i+0xd8>
 8004b3c:	2973      	cmp	r1, #115	; 0x73
 8004b3e:	f000 809d 	beq.w	8004c7c <_printf_i+0x1a4>
 8004b42:	d808      	bhi.n	8004b56 <_printf_i+0x7e>
 8004b44:	296f      	cmp	r1, #111	; 0x6f
 8004b46:	d020      	beq.n	8004b8a <_printf_i+0xb2>
 8004b48:	2970      	cmp	r1, #112	; 0x70
 8004b4a:	d1dd      	bne.n	8004b08 <_printf_i+0x30>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	f043 0320 	orr.w	r3, r3, #32
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	e003      	b.n	8004b5e <_printf_i+0x86>
 8004b56:	2975      	cmp	r1, #117	; 0x75
 8004b58:	d017      	beq.n	8004b8a <_printf_i+0xb2>
 8004b5a:	2978      	cmp	r1, #120	; 0x78
 8004b5c:	d1d4      	bne.n	8004b08 <_printf_i+0x30>
 8004b5e:	2378      	movs	r3, #120	; 0x78
 8004b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b64:	4864      	ldr	r0, [pc, #400]	; (8004cf8 <_printf_i+0x220>)
 8004b66:	e055      	b.n	8004c14 <_printf_i+0x13c>
 8004b68:	6813      	ldr	r3, [r2, #0]
 8004b6a:	1d19      	adds	r1, r3, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6011      	str	r1, [r2, #0]
 8004b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e08c      	b.n	8004c96 <_printf_i+0x1be>
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6011      	str	r1, [r2, #0]
 8004b80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b84:	bf18      	it	ne
 8004b86:	b21b      	sxthne	r3, r3
 8004b88:	e7cf      	b.n	8004b2a <_printf_i+0x52>
 8004b8a:	6813      	ldr	r3, [r2, #0]
 8004b8c:	6825      	ldr	r5, [r4, #0]
 8004b8e:	1d18      	adds	r0, r3, #4
 8004b90:	6010      	str	r0, [r2, #0]
 8004b92:	0628      	lsls	r0, r5, #24
 8004b94:	d501      	bpl.n	8004b9a <_printf_i+0xc2>
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	e002      	b.n	8004ba0 <_printf_i+0xc8>
 8004b9a:	0668      	lsls	r0, r5, #25
 8004b9c:	d5fb      	bpl.n	8004b96 <_printf_i+0xbe>
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	4854      	ldr	r0, [pc, #336]	; (8004cf4 <_printf_i+0x21c>)
 8004ba2:	296f      	cmp	r1, #111	; 0x6f
 8004ba4:	bf14      	ite	ne
 8004ba6:	220a      	movne	r2, #10
 8004ba8:	2208      	moveq	r2, #8
 8004baa:	2100      	movs	r1, #0
 8004bac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bb0:	6865      	ldr	r5, [r4, #4]
 8004bb2:	60a5      	str	r5, [r4, #8]
 8004bb4:	2d00      	cmp	r5, #0
 8004bb6:	f2c0 8095 	blt.w	8004ce4 <_printf_i+0x20c>
 8004bba:	6821      	ldr	r1, [r4, #0]
 8004bbc:	f021 0104 	bic.w	r1, r1, #4
 8004bc0:	6021      	str	r1, [r4, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d13d      	bne.n	8004c42 <_printf_i+0x16a>
 8004bc6:	2d00      	cmp	r5, #0
 8004bc8:	f040 808e 	bne.w	8004ce8 <_printf_i+0x210>
 8004bcc:	4665      	mov	r5, ip
 8004bce:	2a08      	cmp	r2, #8
 8004bd0:	d10b      	bne.n	8004bea <_printf_i+0x112>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	07db      	lsls	r3, r3, #31
 8004bd6:	d508      	bpl.n	8004bea <_printf_i+0x112>
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	6862      	ldr	r2, [r4, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	bfde      	ittt	le
 8004be0:	2330      	movle	r3, #48	; 0x30
 8004be2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bea:	ebac 0305 	sub.w	r3, ip, r5
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	f8cd 8000 	str.w	r8, [sp]
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	aa03      	add	r2, sp, #12
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7ff fef6 	bl	80049ec <_printf_common>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d14d      	bne.n	8004ca0 <_printf_i+0x1c8>
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	b005      	add	sp, #20
 8004c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c0e:	4839      	ldr	r0, [pc, #228]	; (8004cf4 <_printf_i+0x21c>)
 8004c10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c14:	6813      	ldr	r3, [r2, #0]
 8004c16:	6821      	ldr	r1, [r4, #0]
 8004c18:	1d1d      	adds	r5, r3, #4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6015      	str	r5, [r2, #0]
 8004c1e:	060a      	lsls	r2, r1, #24
 8004c20:	d50b      	bpl.n	8004c3a <_printf_i+0x162>
 8004c22:	07ca      	lsls	r2, r1, #31
 8004c24:	bf44      	itt	mi
 8004c26:	f041 0120 	orrmi.w	r1, r1, #32
 8004c2a:	6021      	strmi	r1, [r4, #0]
 8004c2c:	b91b      	cbnz	r3, 8004c36 <_printf_i+0x15e>
 8004c2e:	6822      	ldr	r2, [r4, #0]
 8004c30:	f022 0220 	bic.w	r2, r2, #32
 8004c34:	6022      	str	r2, [r4, #0]
 8004c36:	2210      	movs	r2, #16
 8004c38:	e7b7      	b.n	8004baa <_printf_i+0xd2>
 8004c3a:	064d      	lsls	r5, r1, #25
 8004c3c:	bf48      	it	mi
 8004c3e:	b29b      	uxthmi	r3, r3
 8004c40:	e7ef      	b.n	8004c22 <_printf_i+0x14a>
 8004c42:	4665      	mov	r5, ip
 8004c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c48:	fb02 3311 	mls	r3, r2, r1, r3
 8004c4c:	5cc3      	ldrb	r3, [r0, r3]
 8004c4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c52:	460b      	mov	r3, r1
 8004c54:	2900      	cmp	r1, #0
 8004c56:	d1f5      	bne.n	8004c44 <_printf_i+0x16c>
 8004c58:	e7b9      	b.n	8004bce <_printf_i+0xf6>
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	6825      	ldr	r5, [r4, #0]
 8004c5e:	6961      	ldr	r1, [r4, #20]
 8004c60:	1d18      	adds	r0, r3, #4
 8004c62:	6010      	str	r0, [r2, #0]
 8004c64:	0628      	lsls	r0, r5, #24
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	d501      	bpl.n	8004c6e <_printf_i+0x196>
 8004c6a:	6019      	str	r1, [r3, #0]
 8004c6c:	e002      	b.n	8004c74 <_printf_i+0x19c>
 8004c6e:	066a      	lsls	r2, r5, #25
 8004c70:	d5fb      	bpl.n	8004c6a <_printf_i+0x192>
 8004c72:	8019      	strh	r1, [r3, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	6123      	str	r3, [r4, #16]
 8004c78:	4665      	mov	r5, ip
 8004c7a:	e7b9      	b.n	8004bf0 <_printf_i+0x118>
 8004c7c:	6813      	ldr	r3, [r2, #0]
 8004c7e:	1d19      	adds	r1, r3, #4
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	681d      	ldr	r5, [r3, #0]
 8004c84:	6862      	ldr	r2, [r4, #4]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f7fb faa9 	bl	80001e0 <memchr>
 8004c8e:	b108      	cbz	r0, 8004c94 <_printf_i+0x1bc>
 8004c90:	1b40      	subs	r0, r0, r5
 8004c92:	6060      	str	r0, [r4, #4]
 8004c94:	6863      	ldr	r3, [r4, #4]
 8004c96:	6123      	str	r3, [r4, #16]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c9e:	e7a7      	b.n	8004bf0 <_printf_i+0x118>
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	462a      	mov	r2, r5
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	47c0      	blx	r8
 8004caa:	3001      	adds	r0, #1
 8004cac:	d0aa      	beq.n	8004c04 <_printf_i+0x12c>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	079b      	lsls	r3, r3, #30
 8004cb2:	d413      	bmi.n	8004cdc <_printf_i+0x204>
 8004cb4:	68e0      	ldr	r0, [r4, #12]
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	4298      	cmp	r0, r3
 8004cba:	bfb8      	it	lt
 8004cbc:	4618      	movlt	r0, r3
 8004cbe:	e7a3      	b.n	8004c08 <_printf_i+0x130>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	464a      	mov	r2, r9
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	47c0      	blx	r8
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d09a      	beq.n	8004c04 <_printf_i+0x12c>
 8004cce:	3501      	adds	r5, #1
 8004cd0:	68e3      	ldr	r3, [r4, #12]
 8004cd2:	9a03      	ldr	r2, [sp, #12]
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	42ab      	cmp	r3, r5
 8004cd8:	dcf2      	bgt.n	8004cc0 <_printf_i+0x1e8>
 8004cda:	e7eb      	b.n	8004cb4 <_printf_i+0x1dc>
 8004cdc:	2500      	movs	r5, #0
 8004cde:	f104 0919 	add.w	r9, r4, #25
 8004ce2:	e7f5      	b.n	8004cd0 <_printf_i+0x1f8>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ac      	bne.n	8004c42 <_printf_i+0x16a>
 8004ce8:	7803      	ldrb	r3, [r0, #0]
 8004cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf2:	e76c      	b.n	8004bce <_printf_i+0xf6>
 8004cf4:	08004f8d 	.word	0x08004f8d
 8004cf8:	08004f9e 	.word	0x08004f9e

08004cfc <memcpy>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	1e43      	subs	r3, r0, #1
 8004d00:	440a      	add	r2, r1
 8004d02:	4291      	cmp	r1, r2
 8004d04:	d100      	bne.n	8004d08 <memcpy+0xc>
 8004d06:	bd10      	pop	{r4, pc}
 8004d08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d10:	e7f7      	b.n	8004d02 <memcpy+0x6>

08004d12 <memmove>:
 8004d12:	4288      	cmp	r0, r1
 8004d14:	b510      	push	{r4, lr}
 8004d16:	eb01 0302 	add.w	r3, r1, r2
 8004d1a:	d807      	bhi.n	8004d2c <memmove+0x1a>
 8004d1c:	1e42      	subs	r2, r0, #1
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	d00a      	beq.n	8004d38 <memmove+0x26>
 8004d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d2a:	e7f8      	b.n	8004d1e <memmove+0xc>
 8004d2c:	4283      	cmp	r3, r0
 8004d2e:	d9f5      	bls.n	8004d1c <memmove+0xa>
 8004d30:	1881      	adds	r1, r0, r2
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	42d3      	cmn	r3, r2
 8004d36:	d100      	bne.n	8004d3a <memmove+0x28>
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d42:	e7f7      	b.n	8004d34 <memmove+0x22>

08004d44 <_free_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4605      	mov	r5, r0
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	d045      	beq.n	8004dd8 <_free_r+0x94>
 8004d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d50:	1f0c      	subs	r4, r1, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfb8      	it	lt
 8004d56:	18e4      	addlt	r4, r4, r3
 8004d58:	f000 f8d2 	bl	8004f00 <__malloc_lock>
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <_free_r+0x98>)
 8004d5e:	6813      	ldr	r3, [r2, #0]
 8004d60:	4610      	mov	r0, r2
 8004d62:	b933      	cbnz	r3, 8004d72 <_free_r+0x2e>
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6014      	str	r4, [r2, #0]
 8004d68:	4628      	mov	r0, r5
 8004d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d6e:	f000 b8c8 	b.w	8004f02 <__malloc_unlock>
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	d90c      	bls.n	8004d90 <_free_r+0x4c>
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	1862      	adds	r2, r4, r1
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	bf04      	itt	eq
 8004d7e:	681a      	ldreq	r2, [r3, #0]
 8004d80:	685b      	ldreq	r3, [r3, #4]
 8004d82:	6063      	str	r3, [r4, #4]
 8004d84:	bf04      	itt	eq
 8004d86:	1852      	addeq	r2, r2, r1
 8004d88:	6022      	streq	r2, [r4, #0]
 8004d8a:	6004      	str	r4, [r0, #0]
 8004d8c:	e7ec      	b.n	8004d68 <_free_r+0x24>
 8004d8e:	4613      	mov	r3, r2
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	b10a      	cbz	r2, 8004d98 <_free_r+0x54>
 8004d94:	42a2      	cmp	r2, r4
 8004d96:	d9fa      	bls.n	8004d8e <_free_r+0x4a>
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	1858      	adds	r0, r3, r1
 8004d9c:	42a0      	cmp	r0, r4
 8004d9e:	d10b      	bne.n	8004db8 <_free_r+0x74>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	4401      	add	r1, r0
 8004da4:	1858      	adds	r0, r3, r1
 8004da6:	4282      	cmp	r2, r0
 8004da8:	6019      	str	r1, [r3, #0]
 8004daa:	d1dd      	bne.n	8004d68 <_free_r+0x24>
 8004dac:	6810      	ldr	r0, [r2, #0]
 8004dae:	6852      	ldr	r2, [r2, #4]
 8004db0:	605a      	str	r2, [r3, #4]
 8004db2:	4401      	add	r1, r0
 8004db4:	6019      	str	r1, [r3, #0]
 8004db6:	e7d7      	b.n	8004d68 <_free_r+0x24>
 8004db8:	d902      	bls.n	8004dc0 <_free_r+0x7c>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	602b      	str	r3, [r5, #0]
 8004dbe:	e7d3      	b.n	8004d68 <_free_r+0x24>
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	1821      	adds	r1, r4, r0
 8004dc4:	428a      	cmp	r2, r1
 8004dc6:	bf04      	itt	eq
 8004dc8:	6811      	ldreq	r1, [r2, #0]
 8004dca:	6852      	ldreq	r2, [r2, #4]
 8004dcc:	6062      	str	r2, [r4, #4]
 8004dce:	bf04      	itt	eq
 8004dd0:	1809      	addeq	r1, r1, r0
 8004dd2:	6021      	streq	r1, [r4, #0]
 8004dd4:	605c      	str	r4, [r3, #4]
 8004dd6:	e7c7      	b.n	8004d68 <_free_r+0x24>
 8004dd8:	bd38      	pop	{r3, r4, r5, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000090 	.word	0x20000090

08004de0 <_malloc_r>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	1ccd      	adds	r5, r1, #3
 8004de4:	f025 0503 	bic.w	r5, r5, #3
 8004de8:	3508      	adds	r5, #8
 8004dea:	2d0c      	cmp	r5, #12
 8004dec:	bf38      	it	cc
 8004dee:	250c      	movcc	r5, #12
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	4606      	mov	r6, r0
 8004df4:	db01      	blt.n	8004dfa <_malloc_r+0x1a>
 8004df6:	42a9      	cmp	r1, r5
 8004df8:	d903      	bls.n	8004e02 <_malloc_r+0x22>
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	2000      	movs	r0, #0
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
 8004e02:	f000 f87d 	bl	8004f00 <__malloc_lock>
 8004e06:	4a21      	ldr	r2, [pc, #132]	; (8004e8c <_malloc_r+0xac>)
 8004e08:	6814      	ldr	r4, [r2, #0]
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	b991      	cbnz	r1, 8004e34 <_malloc_r+0x54>
 8004e0e:	4c20      	ldr	r4, [pc, #128]	; (8004e90 <_malloc_r+0xb0>)
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	b91b      	cbnz	r3, 8004e1c <_malloc_r+0x3c>
 8004e14:	4630      	mov	r0, r6
 8004e16:	f000 f863 	bl	8004ee0 <_sbrk_r>
 8004e1a:	6020      	str	r0, [r4, #0]
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 f85e 	bl	8004ee0 <_sbrk_r>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d124      	bne.n	8004e72 <_malloc_r+0x92>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	6033      	str	r3, [r6, #0]
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 f868 	bl	8004f02 <__malloc_unlock>
 8004e32:	e7e4      	b.n	8004dfe <_malloc_r+0x1e>
 8004e34:	680b      	ldr	r3, [r1, #0]
 8004e36:	1b5b      	subs	r3, r3, r5
 8004e38:	d418      	bmi.n	8004e6c <_malloc_r+0x8c>
 8004e3a:	2b0b      	cmp	r3, #11
 8004e3c:	d90f      	bls.n	8004e5e <_malloc_r+0x7e>
 8004e3e:	600b      	str	r3, [r1, #0]
 8004e40:	50cd      	str	r5, [r1, r3]
 8004e42:	18cc      	adds	r4, r1, r3
 8004e44:	4630      	mov	r0, r6
 8004e46:	f000 f85c 	bl	8004f02 <__malloc_unlock>
 8004e4a:	f104 000b 	add.w	r0, r4, #11
 8004e4e:	1d23      	adds	r3, r4, #4
 8004e50:	f020 0007 	bic.w	r0, r0, #7
 8004e54:	1ac3      	subs	r3, r0, r3
 8004e56:	d0d3      	beq.n	8004e00 <_malloc_r+0x20>
 8004e58:	425a      	negs	r2, r3
 8004e5a:	50e2      	str	r2, [r4, r3]
 8004e5c:	e7d0      	b.n	8004e00 <_malloc_r+0x20>
 8004e5e:	428c      	cmp	r4, r1
 8004e60:	684b      	ldr	r3, [r1, #4]
 8004e62:	bf16      	itet	ne
 8004e64:	6063      	strne	r3, [r4, #4]
 8004e66:	6013      	streq	r3, [r2, #0]
 8004e68:	460c      	movne	r4, r1
 8004e6a:	e7eb      	b.n	8004e44 <_malloc_r+0x64>
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	6849      	ldr	r1, [r1, #4]
 8004e70:	e7cc      	b.n	8004e0c <_malloc_r+0x2c>
 8004e72:	1cc4      	adds	r4, r0, #3
 8004e74:	f024 0403 	bic.w	r4, r4, #3
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d005      	beq.n	8004e88 <_malloc_r+0xa8>
 8004e7c:	1a21      	subs	r1, r4, r0
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f000 f82e 	bl	8004ee0 <_sbrk_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d0cf      	beq.n	8004e28 <_malloc_r+0x48>
 8004e88:	6025      	str	r5, [r4, #0]
 8004e8a:	e7db      	b.n	8004e44 <_malloc_r+0x64>
 8004e8c:	20000090 	.word	0x20000090
 8004e90:	20000094 	.word	0x20000094

08004e94 <_realloc_r>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	4607      	mov	r7, r0
 8004e98:	4614      	mov	r4, r2
 8004e9a:	460e      	mov	r6, r1
 8004e9c:	b921      	cbnz	r1, 8004ea8 <_realloc_r+0x14>
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ea4:	f7ff bf9c 	b.w	8004de0 <_malloc_r>
 8004ea8:	b922      	cbnz	r2, 8004eb4 <_realloc_r+0x20>
 8004eaa:	f7ff ff4b 	bl	8004d44 <_free_r>
 8004eae:	4625      	mov	r5, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb4:	f000 f826 	bl	8004f04 <_malloc_usable_size_r>
 8004eb8:	42a0      	cmp	r0, r4
 8004eba:	d20f      	bcs.n	8004edc <_realloc_r+0x48>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	f7ff ff8e 	bl	8004de0 <_malloc_r>
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d0f2      	beq.n	8004eb0 <_realloc_r+0x1c>
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4622      	mov	r2, r4
 8004ece:	f7ff ff15 	bl	8004cfc <memcpy>
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	f7ff ff35 	bl	8004d44 <_free_r>
 8004eda:	e7e9      	b.n	8004eb0 <_realloc_r+0x1c>
 8004edc:	4635      	mov	r5, r6
 8004ede:	e7e7      	b.n	8004eb0 <_realloc_r+0x1c>

08004ee0 <_sbrk_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4c06      	ldr	r4, [pc, #24]	; (8004efc <_sbrk_r+0x1c>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	f7fb fe08 	bl	8000b00 <_sbrk>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_sbrk_r+0x1a>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_sbrk_r+0x1a>
 8004ef8:	602b      	str	r3, [r5, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	20000190 	.word	0x20000190

08004f00 <__malloc_lock>:
 8004f00:	4770      	bx	lr

08004f02 <__malloc_unlock>:
 8004f02:	4770      	bx	lr

08004f04 <_malloc_usable_size_r>:
 8004f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f08:	1f18      	subs	r0, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bfbc      	itt	lt
 8004f0e:	580b      	ldrlt	r3, [r1, r0]
 8004f10:	18c0      	addlt	r0, r0, r3
 8004f12:	4770      	bx	lr

08004f14 <_init>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr

08004f20 <_fini>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr
