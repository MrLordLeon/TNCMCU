
Serial Echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d78  08003d78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003d8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003d8c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aef7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000195c  00000000  00000000  0002af33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002c890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  0002d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259a7  00000000  00000000  0002da88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008026  00000000  00000000  0005342f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7d1d  00000000  00000000  0005b455  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000255c  00000000  00000000  001431f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d10 	.word	0x08003d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d10 	.word	0x08003d10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fac8 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81e 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8e0 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f8c0 	bl	800065c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f88e 	bl	80005fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2,myRxData,RxSize);
 80004e0:	2240      	movs	r2, #64	; 0x40
 80004e2:	4908      	ldr	r1, [pc, #32]	; (8000504 <main+0x3c>)
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <main+0x40>)
 80004e6:	f002 fc3f 	bl	8002d68 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart2, TxSize,1,10);
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <main+0x44>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	4619      	mov	r1, r3
 80004f0:	230a      	movs	r3, #10
 80004f2:	2201      	movs	r2, #1
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <main+0x40>)
 80004f6:	f002 fba3 	bl	8002c40 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80004fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004fe:	f000 fb27 	bl	8000b50 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, TxSize,1,10);
 8000502:	e7f2      	b.n	80004ea <main+0x22>
 8000504:	20000074 	.word	0x20000074
 8000508:	200000b4 	.word	0x200000b4
 800050c:	20000028 	.word	0x20000028

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b0b8      	sub	sp, #224	; 0xe0
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f003 fbee 	bl	8003d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2288      	movs	r2, #136	; 0x88
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fbe0 	bl	8003d00 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2310      	movs	r3, #16
 8000550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	2302      	movs	r3, #2
 8000556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000566:	230a      	movs	r3, #10
 8000568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800056c:	2307      	movs	r3, #7
 800056e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f874 	bl	8001670 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058e:	f000 f921 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fc40 	bl	8001e3c <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005c2:	f000 f907 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fe37 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005dc:	f000 f8fa 	bl	80007d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e4:	f000 ffee 	bl	80015c4 <HAL_PWREx_ControlVoltageScaling>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005ee:	f000 f8f1 	bl	80007d4 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	37e0      	adds	r7, #224	; 0xe0
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <MX_USART2_UART_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000640:	f002 fab0 	bl	8002ba4 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800064a:	f000 f8c3 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000b4 	.word	0x200000b4
 8000658:	40004400 	.word	0x40004400

0800065c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_DMA_Init+0x38>)
 8000664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <MX_DMA_Init+0x38>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6493      	str	r3, [r2, #72]	; 0x48
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_DMA_Init+0x38>)
 8000670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2010      	movs	r0, #16
 8000680:	f000 fb63 	bl	8000d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000684:	2010      	movs	r0, #16
 8000686:	f000 fb7c 	bl	8000d82 <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a2a      	ldr	r2, [pc, #168]	; (800075c <MX_GPIO_Init+0xc4>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a24      	ldr	r2, [pc, #144]	; (800075c <MX_GPIO_Init+0xc4>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a1e      	ldr	r2, [pc, #120]	; (800075c <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f000 ff2f 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_GPIO_Init+0xc8>)
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_GPIO_Init+0xcc>)
 8000730:	f000 fd7a 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000734:	2320      	movs	r3, #32
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f000 fd6b 	bl	8001228 <HAL_GPIO_Init>

}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	10210000 	.word	0x10210000
 8000764:	48000800 	.word	0x48000800

08000768 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	for(uint8_t i = 0;i<RxSize;i++)
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	e015      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x3a>
	{
		TxSize += 1;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_UART_RxCpltCallback+0x60>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_UART_RxCpltCallback+0x60>)
 8000780:	701a      	strb	r2, [r3, #0]
		if(myRxData[i]=='\n')
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4a11      	ldr	r2, [pc, #68]	; (80007cc <HAL_UART_RxCpltCallback+0x64>)
 8000786:	5cd3      	ldrb	r3, [r2, r3]
 8000788:	2b0a      	cmp	r3, #10
 800078a:	d107      	bne.n	800079c <HAL_UART_RxCpltCallback+0x34>
		{
			HAL_UART_Transmit(&huart2, TxSize,1,10);
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_UART_RxCpltCallback+0x60>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	230a      	movs	r3, #10
 8000794:	2201      	movs	r2, #1
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <HAL_UART_RxCpltCallback+0x68>)
 8000798:	f002 fa52 	bl	8002c40 <HAL_UART_Transmit>
	for(uint8_t i = 0;i<RxSize;i++)
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	3301      	adds	r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	2b3f      	cmp	r3, #63	; 0x3f
 80007a6:	d9e6      	bls.n	8000776 <HAL_UART_RxCpltCallback+0xe>
		}
	}
	HAL_UART_Transmit(&huart2, myRxData,TxSize,10);
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_UART_RxCpltCallback+0x60>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	230a      	movs	r3, #10
 80007b0:	4906      	ldr	r1, [pc, #24]	; (80007cc <HAL_UART_RxCpltCallback+0x64>)
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <HAL_UART_RxCpltCallback+0x68>)
 80007b4:	f002 fa44 	bl	8002c40 <HAL_UART_Transmit>
	TxSize = 0;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_UART_RxCpltCallback+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]

}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000028 	.word	0x20000028
 80007cc:	20000074 	.word	0x20000074
 80007d0:	200000b4 	.word	0x200000b4

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a30      	ldr	r2, [pc, #192]	; (800090c <HAL_UART_MspInit+0xe0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d159      	bne.n	8000902 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <HAL_UART_MspInit+0xe4>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a29      	ldr	r2, [pc, #164]	; (8000910 <HAL_UART_MspInit+0xe4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087e:	230c      	movs	r3, #12
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088e:	2307      	movs	r3, #7
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f000 fcc4 	bl	8001228 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008a2:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008cc:	2220      	movs	r2, #32
 80008ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008d8:	f000 fa6e 	bl	8000db8 <HAL_DMA_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80008e2:	f7ff ff77 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80008ec:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2026      	movs	r0, #38	; 0x26
 80008f8:	f000 fa27 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008fc:	2026      	movs	r0, #38	; 0x26
 80008fe:	f000 fa40 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000
 8000914:	2000002c 	.word	0x2000002c
 8000918:	4002006c 	.word	0x4002006c

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f8d0 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <DMA1_Channel6_IRQHandler+0x10>)
 800097e:	f000 fb74 	bl	800106a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000002c 	.word	0x2000002c

0800098c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <USART2_IRQHandler+0x10>)
 8000992:	f002 fa6d 	bl	8002e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000b4 	.word	0x200000b4

080009a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <SystemInit+0x64>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <SystemInit+0x64>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <SystemInit+0x68>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <SystemInit+0x68>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <SystemInit+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <SystemInit+0x68>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <SystemInit+0x68>)
 80009cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <SystemInit+0x68>)
 80009d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <SystemInit+0x68>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <SystemInit+0x68>)
 80009e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <SystemInit+0x68>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SystemInit+0x64>)
 80009f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f6:	609a      	str	r2, [r3, #8]
#endif
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00
 8000a08:	40021000 	.word	0x40021000

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
	ldr	r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <LoopForever+0x16>)
	cmp	r2, r3
 8000a32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a36:	f7ff ffb3 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f003 f93d 	bl	8003cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fd43 	bl	80004c8 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a48:	08003d80 	.word	0x08003d80
	ldr	r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a50:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a58:	20000138 	.word	0x20000138

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_Init+0x3c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <HAL_Init+0x3c>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f95c 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 f80f 	bl	8000aa0 <HAL_InitTick>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8e:	f7ff fea9 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_InitTick+0x68>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d022      	beq.n	8000afa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_InitTick+0x6c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <HAL_InitTick+0x68>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f968 	bl	8000d9e <HAL_SYSTICK_Config>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10f      	bne.n	8000af4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	d809      	bhi.n	8000aee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	2200      	movs	r2, #0
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae2:	f000 f932 	bl	8000d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_InitTick+0x70>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e007      	b.n	8000afe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	e004      	b.n	8000afe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e001      	b.n	8000afe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b24:	6013      	str	r3, [r2, #0]
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20000134 	.word	0x20000134
 8000b34:	20000008 	.word	0x20000008

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000134 	.word	0x20000134

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d004      	beq.n	8000b74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_Delay+0x40>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b74:	bf00      	nop
 8000b76:	f7ff ffdf 	bl	8000b38 <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d8f7      	bhi.n	8000b76 <HAL_Delay+0x26>
  {
  }
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff29 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff31 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa2 	bl	8000cf0 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e098      	b.n	8000efc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <HAL_DMA_Init+0x150>)
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d80f      	bhi.n	8000df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b4b      	ldr	r3, [pc, #300]	; (8000f0c <HAL_DMA_Init+0x154>)
 8000dde:	4413      	add	r3, r2
 8000de0:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_DMA_Init+0x158>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	009a      	lsls	r2, r3, #2
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_DMA_Init+0x15c>)
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
 8000df4:	e00e      	b.n	8000e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_DMA_Init+0x160>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a43      	ldr	r2, [pc, #268]	; (8000f10 <HAL_DMA_Init+0x158>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	009a      	lsls	r2, r3, #2
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a42      	ldr	r2, [pc, #264]	; (8000f1c <HAL_DMA_Init+0x164>)
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2202      	movs	r2, #2
 8000e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e6e:	d039      	beq.n	8000ee4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_DMA_Init+0x15c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d11a      	bne.n	8000eb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_DMA_Init+0x168>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f003 031c 	and.w	r3, r3, #28
 8000e86:	210f      	movs	r1, #15
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4924      	ldr	r1, [pc, #144]	; (8000f20 <HAL_DMA_Init+0x168>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_DMA_Init+0x168>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6859      	ldr	r1, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f003 031c 	and.w	r3, r3, #28
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	491d      	ldr	r1, [pc, #116]	; (8000f20 <HAL_DMA_Init+0x168>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
 8000eae:	e019      	b.n	8000ee4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_DMA_Init+0x16c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb8:	f003 031c 	and.w	r3, r3, #28
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	4917      	ldr	r1, [pc, #92]	; (8000f24 <HAL_DMA_Init+0x16c>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_DMA_Init+0x16c>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6859      	ldr	r1, [r3, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f003 031c 	and.w	r3, r3, #28
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	4911      	ldr	r1, [pc, #68]	; (8000f24 <HAL_DMA_Init+0x16c>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40020407 	.word	0x40020407
 8000f0c:	bffdfff8 	.word	0xbffdfff8
 8000f10:	cccccccd 	.word	0xcccccccd
 8000f14:	40020000 	.word	0x40020000
 8000f18:	bffdfbf8 	.word	0xbffdfbf8
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	400200a8 	.word	0x400200a8
 8000f24:	400204a8 	.word	0x400204a8

08000f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_DMA_Start_IT+0x20>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e04b      	b.n	8000fe0 <HAL_DMA_Start_IT+0xb8>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d13a      	bne.n	8000fd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0201 	bic.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f921 	bl	80011c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d008      	beq.n	8000fa0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 020e 	orr.w	r2, r2, #14
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e00f      	b.n	8000fc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0204 	bic.w	r2, r2, #4
 8000fae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 020a 	orr.w	r2, r2, #10
 8000fbe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e005      	b.n	8000fde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d005      	beq.n	800100c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2204      	movs	r2, #4
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e029      	b.n	8001060 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 020e 	bic.w	r2, r2, #14
 800101a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	f003 021c 	and.w	r2, r3, #28
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	4798      	blx	r3
    }
  }
  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f003 031c 	and.w	r3, r3, #28
 800108a:	2204      	movs	r2, #4
 800108c:	409a      	lsls	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d026      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x7a>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d021      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d107      	bne.n	80010be <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0204 	bic.w	r2, r2, #4
 80010bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 021c 	and.w	r2, r3, #28
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2104      	movs	r1, #4
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d071      	beq.n	80011be <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80010e2:	e06c      	b.n	80011be <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f003 031c 	and.w	r3, r3, #28
 80010ec:	2202      	movs	r2, #2
 80010ee:	409a      	lsls	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02e      	beq.n	8001156 <HAL_DMA_IRQHandler+0xec>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d029      	beq.n	8001156 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10b      	bne.n	8001128 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 020a 	bic.w	r2, r2, #10
 800111e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f003 021c 	and.w	r2, r3, #28
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	2102      	movs	r1, #2
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d038      	beq.n	80011be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001154:	e033      	b.n	80011be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f003 031c 	and.w	r3, r3, #28
 800115e:	2208      	movs	r2, #8
 8001160:	409a      	lsls	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d02a      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x156>
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d025      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 020e 	bic.w	r2, r2, #14
 8001182:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	f003 021c 	and.w	r2, r3, #28
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f202 	lsl.w	r2, r1, r2
 8001196:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
}
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 021c 	and.w	r2, r3, #28
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d108      	bne.n	800120c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800120a:	e007      	b.n	800121c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	60da      	str	r2, [r3, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e17f      	b.n	8001538 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8171 	beq.w	8001532 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d00b      	beq.n	8001270 <HAL_GPIO_Init+0x48>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001264:	2b11      	cmp	r3, #17
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 0201 	and.w	r2, r3, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d118      	bne.n	8001310 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012e4:	2201      	movs	r2, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f003 0201 	and.w	r2, r3, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x128>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b12      	cmp	r3, #18
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	6939      	ldr	r1, [r7, #16]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80ac 	beq.w	8001532 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <HAL_GPIO_Init+0x32c>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	4a5d      	ldr	r2, [pc, #372]	; (8001554 <HAL_GPIO_Init+0x32c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6613      	str	r3, [r2, #96]	; 0x60
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_GPIO_Init+0x32c>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f2:	4a59      	ldr	r2, [pc, #356]	; (8001558 <HAL_GPIO_Init+0x330>)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x242>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4e      	ldr	r2, [pc, #312]	; (800155c <HAL_GPIO_Init+0x334>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x23e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4d      	ldr	r2, [pc, #308]	; (8001560 <HAL_GPIO_Init+0x338>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x23a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_GPIO_Init+0x33c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x236>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_GPIO_Init+0x340>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x232>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_GPIO_Init+0x344>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x22e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_GPIO_Init+0x348>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x22a>
 800144e:	2306      	movs	r3, #6
 8001450:	e00c      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001452:	2307      	movs	r3, #7
 8001454:	e00a      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001456:	2305      	movs	r3, #5
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x244>
 800145a:	2304      	movs	r3, #4
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x244>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x244>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x244>
 800146a:	2300      	movs	r3, #0
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147c:	4936      	ldr	r1, [pc, #216]	; (8001558 <HAL_GPIO_Init+0x330>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <HAL_GPIO_Init+0x34c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ae:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_GPIO_Init+0x34c>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x34c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <HAL_GPIO_Init+0x34c>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_GPIO_Init+0x34c>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <HAL_GPIO_Init+0x34c>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_GPIO_Init+0x34c>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_GPIO_Init+0x34c>)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	f47f ae78 	bne.w	8001238 <HAL_GPIO_Init+0x10>
  }
}
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	48000400 	.word	0x48000400
 8001560:	48000800 	.word	0x48000800
 8001564:	48000c00 	.word	0x48000c00
 8001568:	48001000 	.word	0x48001000
 800156c:	48001400 	.word	0x48001400
 8001570:	48001800 	.word	0x48001800
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001594:	e002      	b.n	800159c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d2:	d130      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e0:	d038      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2232      	movs	r2, #50	; 0x32
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001608:	e002      	b.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3b01      	subs	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161c:	d102      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x60>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f2      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001630:	d110      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e00f      	b.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d007      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40007000 	.word	0x40007000
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e3d4      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001682:	4ba1      	ldr	r3, [pc, #644]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168c:	4b9e      	ldr	r3, [pc, #632]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80e4 	beq.w	800186c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <HAL_RCC_OscConfig+0x4a>
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	f040 808b 	bne.w	80017c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	f040 8087 	bne.w	80017c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ba:	4b93      	ldr	r3, [pc, #588]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x62>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e3ac      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d004      	beq.n	80016ec <HAL_RCC_OscConfig+0x7c>
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ea:	e005      	b.n	80016f8 <HAL_RCC_OscConfig+0x88>
 80016ec:	4b86      	ldr	r3, [pc, #536]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d223      	bcs.n	8001744 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fd3f 	bl	8002184 <RCC_SetFlashLatencyFromMSIRange>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e38d      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001710:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a7c      	ldr	r2, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4977      	ldr	r1, [pc, #476]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172e:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	4972      	ldr	r1, [pc, #456]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
 8001742:	e025      	b.n	8001790 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001744:	4b70      	ldr	r3, [pc, #448]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a6f      	ldr	r2, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	496a      	ldr	r1, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001762:	4b69      	ldr	r3, [pc, #420]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	4965      	ldr	r1, [pc, #404]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fcff 	bl	8002184 <RCC_SetFlashLatencyFromMSIRange>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e34d      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001790:	f000 fc36 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001794:	4601      	mov	r1, r0
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	4a5a      	ldr	r2, [pc, #360]	; (800190c <HAL_RCC_OscConfig+0x29c>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	fa21 f303 	lsr.w	r3, r1, r3
 80017ac:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x2a0>)
 80017ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017b0:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x2a4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f973 	bl	8000aa0 <HAL_InitTick>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d052      	beq.n	800186a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	e331      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d032      	beq.n	8001836 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017d0:	4b4d      	ldr	r3, [pc, #308]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a4c      	ldr	r2, [pc, #304]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9ac 	bl	8000b38 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e4:	f7ff f9a8 	bl	8000b38 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e31a      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f6:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a40      	ldr	r2, [pc, #256]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	493b      	ldr	r1, [pc, #236]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
 8001834:	e01a      	b.n	800186c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a33      	ldr	r2, [pc, #204]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001842:	f7ff f979 	bl	8000b38 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184a:	f7ff f975 	bl	8000b38 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e2e7      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x1da>
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d074      	beq.n	8001962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b08      	cmp	r3, #8
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x21a>
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d10e      	bne.n	80018a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d10b      	bne.n	80018a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d064      	beq.n	8001960 <HAL_RCC_OscConfig+0x2f0>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d160      	bne.n	8001960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e2c4      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x24a>
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e01d      	b.n	80018f6 <HAL_RCC_OscConfig+0x286>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x26e>
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0x286>
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x298>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f91b 	bl	8000b38 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001904:	e011      	b.n	800192a <HAL_RCC_OscConfig+0x2ba>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	08003d28 	.word	0x08003d28
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff f90e 	bl	8000b38 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e280      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	4baf      	ldr	r3, [pc, #700]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x2a8>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f8fe 	bl	8000b38 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff f8fa 	bl	8000b38 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e26c      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	4ba5      	ldr	r3, [pc, #660]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x2d0>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d060      	beq.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x310>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d119      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b99      	ldr	r3, [pc, #612]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x328>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e249      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b93      	ldr	r3, [pc, #588]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4990      	ldr	r1, [pc, #576]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	e040      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b6:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a8b      	ldr	r2, [pc, #556]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f8b9 	bl	8000b38 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff f8b5 	bl	8000b38 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e227      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	497c      	ldr	r1, [pc, #496]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e018      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a79      	ldr	r2, [pc, #484]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f895 	bl	8000b38 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff f891 	bl	8000b38 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e203      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d03c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	4a67      	ldr	r2, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff f870 	bl	8000b38 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff f86c 	bl	8000b38 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1de      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	4b5e      	ldr	r3, [pc, #376]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ef      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3ec>
 8001a7c:	e01b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f853 	bl	8000b38 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff f84f 	bl	8000b38 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1c1      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ef      	bne.n	8001a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d118      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afc:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f816 	bl	8000b38 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff f812 	bl	8000b38 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e184      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_RCC_OscConfig+0x57c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4d8>
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b46:	e024      	b.n	8001b92 <HAL_RCC_OscConfig+0x522>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d110      	bne.n	8001b72 <HAL_RCC_OscConfig+0x502>
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	e00f      	b.n	8001b92 <HAL_RCC_OscConfig+0x522>
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	f023 0304 	bic.w	r3, r3, #4
 8001b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7fe ffcd 	bl	8000b38 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7fe ffc9 	bl	8000b38 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e139      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ed      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x532>
 8001bc6:	e01a      	b.n	8001bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7fe ffb6 	bl	8000b38 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bce:	e00f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7fe ffb2 	bl	8000b38 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d906      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e122      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	4b90      	ldr	r3, [pc, #576]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1e8      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b8b      	ldr	r3, [pc, #556]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a8a      	ldr	r2, [pc, #552]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8108 	beq.w	8001e2a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	f040 80d0 	bne.w	8001dc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c24:	4b83      	ldr	r3, [pc, #524]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d130      	bne.n	8001c9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	3b01      	subs	r3, #1
 8001c44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d127      	bne.n	8001c9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d11f      	bne.n	8001c9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c64:	2a07      	cmp	r2, #7
 8001c66:	bf14      	ite	ne
 8001c68:	2201      	movne	r2, #1
 8001c6a:	2200      	moveq	r2, #0
 8001c6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d113      	bne.n	8001c9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d06e      	beq.n	8001d78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d069      	beq.n	8001d74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ca0:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cac:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b7      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5c      	ldr	r2, [pc, #368]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc8:	f7fe ff36 	bl	8000b38 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe ff32 	bl	8000b38 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0a4      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce2:	4b54      	ldr	r3, [pc, #336]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cee:	4b51      	ldr	r3, [pc, #324]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_RCC_OscConfig+0x7c8>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cfe:	3a01      	subs	r2, #1
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d08:	0212      	lsls	r2, r2, #8
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d10:	0852      	lsrs	r2, r2, #1
 8001d12:	3a01      	subs	r2, #1
 8001d14:	0552      	lsls	r2, r2, #21
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d1c:	0852      	lsrs	r2, r2, #1
 8001d1e:	3a01      	subs	r2, #1
 8001d20:	0652      	lsls	r2, r2, #25
 8001d22:	4311      	orrs	r1, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d28:	0912      	lsrs	r2, r2, #4
 8001d2a:	0452      	lsls	r2, r2, #17
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	4941      	ldr	r1, [pc, #260]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d34:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a3e      	ldr	r2, [pc, #248]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d40:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d4c:	f7fe fef4 	bl	8000b38 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe fef0 	bl	8000b38 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e062      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d72:	e05a      	b.n	8001e2a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e059      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d152      	bne.n	8001e2a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d9c:	f7fe fecc 	bl	8000b38 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe fec8 	bl	8000b38 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e03a      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x734>
 8001dc2:	e032      	b.n	8001e2a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d02d      	beq.n	8001e26 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001de8:	f023 0303 	bic.w	r3, r3, #3
 8001dec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001df4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fe9b 	bl	8000b38 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe fe97 	bl	8000b38 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e009      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_OscConfig+0x7c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x796>
 8001e24:	e001      	b.n	8001e2a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	f99d808c 	.word	0xf99d808c

08001e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0c8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d910      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	4961      	ldr	r1, [pc, #388]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0b0      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d04c      	beq.n	8001f26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e94:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d121      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e09e      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d115      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e092      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e086      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e07e      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee4:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 0203 	bic.w	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	493f      	ldr	r1, [pc, #252]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef6:	f7fe fe1f 	bl	8000b38 <HAL_GetTick>
 8001efa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efe:	f7fe fe1b 	bl	8000b38 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e066      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f14:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 020c 	and.w	r2, r3, #12
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d1eb      	bne.n	8001efe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	492c      	ldr	r1, [pc, #176]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d210      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4924      	ldr	r1, [pc, #144]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e036      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4918      	ldr	r1, [pc, #96]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4910      	ldr	r1, [pc, #64]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fb2:	f000 f825 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	fa21 f303 	lsr.w	r3, r1, r3
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fd62 	bl	8000aa0 <HAL_InitTick>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003d28 	.word	0x08003d28
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002018:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x34>
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d121      	bne.n	8002072 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d11e      	bne.n	8002072 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002034:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d107      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002040:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 8002042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e005      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800205c:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <HAL_RCC_GetSysClockFreq+0x108>)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10d      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d102      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_RCC_GetSysClockFreq+0x10c>)
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	e004      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d101      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_GetSysClockFreq+0x110>)
 8002086:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d133      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xa4>
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0xaa>
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020a6:	617b      	str	r3, [r7, #20]
      break;
 80020a8:	e005      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	617b      	str	r3, [r7, #20]
      break;
 80020b4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	3301      	adds	r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	fb02 f203 	mul.w	r2, r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_GetSysClockFreq+0x104>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0e5b      	lsrs	r3, r3, #25
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	3301      	adds	r3, #1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f6:	69bb      	ldr	r3, [r7, #24]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3724      	adds	r7, #36	; 0x24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000
 8002108:	08003d40 	.word	0x08003d40
 800210c:	00f42400 	.word	0x00f42400
 8002110:	007a1200 	.word	0x007a1200

08002114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4601      	mov	r1, r0
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08003d38 	.word	0x08003d38

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800215c:	f7ff ffda 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002160:	4601      	mov	r1, r0
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0adb      	lsrs	r3, r3, #11
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08003d38 	.word	0x08003d38

08002184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800219c:	f7ff fa04 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 80021a0:	6178      	str	r0, [r7, #20]
 80021a2:	e014      	b.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021bc:	f7ff f9f4 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 80021c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a1d      	ldr	r2, [pc, #116]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d4:	d10b      	bne.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d919      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2ba0      	cmp	r3, #160	; 0xa0
 80021e0:	d902      	bls.n	80021e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e2:	2302      	movs	r3, #2
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e013      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e8:	2301      	movs	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e010      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b80      	cmp	r3, #128	; 0x80
 80021f2:	d902      	bls.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021f4:	2303      	movs	r3, #3
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e00a      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d102      	bne.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e004      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b70      	cmp	r3, #112	; 0x70
 800220a:	d101      	bne.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800220c:	2301      	movs	r3, #1
 800220e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	4909      	ldr	r1, [pc, #36]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800224c:	2300      	movs	r3, #0
 800224e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002250:	2300      	movs	r3, #0
 8002252:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225c:	2b00      	cmp	r3, #0
 800225e:	d03f      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002268:	d01c      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800226a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226e:	d802      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002274:	e01f      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800227a:	d003      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800227c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002280:	d01c      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002282:	e018      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002284:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a84      	ldr	r2, [pc, #528]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002290:	e015      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fab9 	bl	8002810 <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a2:	e00c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3320      	adds	r3, #32
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fba0 	bl	80029f0 <RCCEx_PLLSAI2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b4:	e003      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80022bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d2:	4972      	ldr	r1, [pc, #456]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03f      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d01c      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80022f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022fa:	d802      	bhi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002300:	e01f      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002306:	d003      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002308:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800230c:	d01c      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800230e:	e018      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002310:	4b62      	ldr	r3, [pc, #392]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a61      	ldr	r2, [pc, #388]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800231c:	e015      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3304      	adds	r3, #4
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fa73 	bl	8002810 <RCCEx_PLLSAI1_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800232e:	e00c      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3320      	adds	r3, #32
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fb5a 	bl	80029f0 <RCCEx_PLLSAI2_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002340:	e003      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	74fb      	strb	r3, [r7, #19]
      break;
 8002346:	e000      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002350:	4b52      	ldr	r3, [pc, #328]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800235e:	494f      	ldr	r1, [pc, #316]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a0 	beq.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a40      	ldr	r2, [pc, #256]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
 80023a0:	4b3e      	ldr	r3, [pc, #248]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b0:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3a      	ldr	r2, [pc, #232]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fbbc 	bl	8000b38 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c2:	e009      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c4:	f7fe fbb8 	bl	8000b38 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d902      	bls.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	74fb      	strb	r3, [r7, #19]
        break;
 80023d6:	e005      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ef      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d15c      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01f      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	d019      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	4a20      	ldr	r2, [pc, #128]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002434:	4a19      	ldr	r2, [pc, #100]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7fe fb77 	bl	8000b38 <HAL_GetTick>
 800244a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244c:	e00b      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fb73 	bl	8000b38 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d902      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	74fb      	strb	r3, [r7, #19]
            break;
 8002464:	e006      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ec      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248a:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002492:	e009      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
 8002498:	e006      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a8:	7c7b      	ldrb	r3, [r7, #17]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ae:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	4a9d      	ldr	r2, [pc, #628]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c6:	4b98      	ldr	r3, [pc, #608]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f023 0203 	bic.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	4994      	ldr	r1, [pc, #592]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 020c 	bic.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	498c      	ldr	r1, [pc, #560]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800250a:	4b87      	ldr	r3, [pc, #540]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4983      	ldr	r1, [pc, #524]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800252c:	4b7e      	ldr	r3, [pc, #504]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	497b      	ldr	r1, [pc, #492]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	4972      	ldr	r1, [pc, #456]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002570:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	496a      	ldr	r1, [pc, #424]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002592:	4b65      	ldr	r3, [pc, #404]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	4961      	ldr	r1, [pc, #388]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b4:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c2:	4959      	ldr	r1, [pc, #356]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d6:	4b54      	ldr	r3, [pc, #336]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	4950      	ldr	r1, [pc, #320]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f8:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	4948      	ldr	r1, [pc, #288]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261a:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	493f      	ldr	r1, [pc, #252]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d028      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264a:	4937      	ldr	r1, [pc, #220]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265a:	d106      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a31      	ldr	r2, [pc, #196]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002666:	60d3      	str	r3, [r2, #12]
 8002668:	e011      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002672:	d10c      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	2101      	movs	r1, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f8c8 	bl	8002810 <RCCEx_PLLSAI1_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d028      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	491f      	ldr	r1, [pc, #124]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b8:	d106      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c4:	60d3      	str	r3, [r2, #12]
 80026c6:	e011      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2101      	movs	r1, #1
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f899 	bl	8002810 <RCCEx_PLLSAI1_Config>
 80026de:	4603      	mov	r3, r0
 80026e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02b      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002716:	d109      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a02      	ldr	r2, [pc, #8]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002722:	60d3      	str	r3, [r2, #12]
 8002724:	e014      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002734:	d10c      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f867 	bl	8002810 <RCCEx_PLLSAI1_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02f      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276a:	4928      	ldr	r1, [pc, #160]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800277a:	d10d      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f844 	bl	8002810 <RCCEx_PLLSAI1_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d014      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	74bb      	strb	r3, [r7, #18]
 8002796:	e011      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3320      	adds	r3, #32
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f921 	bl	80029f0 <RCCEx_PLLSAI2_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fa:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002802:	7cbb      	ldrb	r3, [r7, #18]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000

08002810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800281e:	4b73      	ldr	r3, [pc, #460]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800282a:	4b70      	ldr	r3, [pc, #448]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0203 	and.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d10d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
       ||
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002842:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
       ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d044      	beq.n	80028e0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e041      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d00c      	beq.n	800287e <RCCEx_PLLSAI1_Config+0x6e>
 8002864:	2b03      	cmp	r3, #3
 8002866:	d013      	beq.n	8002890 <RCCEx_PLLSAI1_Config+0x80>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d120      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800286c:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11d      	bne.n	80028b4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287c:	e01a      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800287e:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002886:	2b00      	cmp	r3, #0
 8002888:	d116      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288e:	e013      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002890:	4b56      	ldr	r3, [pc, #344]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10f      	bne.n	80028bc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ac:	e006      	b.n	80028bc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
      break;
 80028b2:	e004      	b.n	80028be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028b4:	bf00      	nop
 80028b6:	e002      	b.n	80028be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028c4:	4b49      	ldr	r3, [pc, #292]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	430b      	orrs	r3, r1
 80028da:	4944      	ldr	r1, [pc, #272]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d17d      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a40      	ldr	r2, [pc, #256]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f2:	f7fe f921 	bl	8000b38 <HAL_GetTick>
 80028f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028f8:	e009      	b.n	800290e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028fa:	f7fe f91d 	bl	8000b38 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d902      	bls.n	800290e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	73fb      	strb	r3, [r7, #15]
        break;
 800290c:	e005      	b.n	800291a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ef      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d160      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d111      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002926:	4b31      	ldr	r3, [pc, #196]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800292e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6892      	ldr	r2, [r2, #8]
 8002936:	0211      	lsls	r1, r2, #8
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68d2      	ldr	r2, [r2, #12]
 800293c:	0912      	lsrs	r2, r2, #4
 800293e:	0452      	lsls	r2, r2, #17
 8002940:	430a      	orrs	r2, r1
 8002942:	492a      	ldr	r1, [pc, #168]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	610b      	str	r3, [r1, #16]
 8002948:	e027      	b.n	800299a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d112      	bne.n	8002976 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	0211      	lsls	r1, r2, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6912      	ldr	r2, [r2, #16]
 8002966:	0852      	lsrs	r2, r2, #1
 8002968:	3a01      	subs	r2, #1
 800296a:	0552      	lsls	r2, r2, #21
 800296c:	430a      	orrs	r2, r1
 800296e:	491f      	ldr	r1, [pc, #124]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002970:	4313      	orrs	r3, r2
 8002972:	610b      	str	r3, [r1, #16]
 8002974:	e011      	b.n	800299a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800297e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6892      	ldr	r2, [r2, #8]
 8002986:	0211      	lsls	r1, r2, #8
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6952      	ldr	r2, [r2, #20]
 800298c:	0852      	lsrs	r2, r2, #1
 800298e:	3a01      	subs	r2, #1
 8002990:	0652      	lsls	r2, r2, #25
 8002992:	430a      	orrs	r2, r1
 8002994:	4915      	ldr	r1, [pc, #84]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a13      	ldr	r2, [pc, #76]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7fe f8c7 	bl	8000b38 <HAL_GetTick>
 80029aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ac:	e009      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029ae:	f7fe f8c3 	bl	8000b38 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d902      	bls.n	80029c2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	73fb      	strb	r3, [r7, #15]
          break;
 80029c0:	e005      	b.n	80029ce <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0ef      	beq.n	80029ae <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029fe:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10d      	bne.n	8002a36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a22:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
       ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d044      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e041      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d00c      	beq.n	8002a5e <RCCEx_PLLSAI2_Config+0x6e>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d013      	beq.n	8002a70 <RCCEx_PLLSAI2_Config+0x80>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d120      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a4c:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5c:	e01a      	b.n	8002a94 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a5e:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d116      	bne.n	8002a98 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e013      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a70:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a7c:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a8c:	e006      	b.n	8002a9c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      break;
 8002a92:	e004      	b.n	8002a9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a94:	bf00      	nop
 8002a96:	e002      	b.n	8002a9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a98:	bf00      	nop
 8002a9a:	e000      	b.n	8002a9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aa4:	4b3e      	ldr	r3, [pc, #248]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	4939      	ldr	r1, [pc, #228]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d167      	bne.n	8002b96 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a35      	ldr	r2, [pc, #212]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad2:	f7fe f831 	bl	8000b38 <HAL_GetTick>
 8002ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ad8:	e009      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ada:	f7fe f82d 	bl	8000b38 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d902      	bls.n	8002aee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	73fb      	strb	r3, [r7, #15]
        break;
 8002aec:	e005      	b.n	8002afa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ef      	bne.n	8002ada <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d14a      	bne.n	8002b96 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d111      	bne.n	8002b2a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6892      	ldr	r2, [r2, #8]
 8002b16:	0211      	lsls	r1, r2, #8
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68d2      	ldr	r2, [r2, #12]
 8002b1c:	0912      	lsrs	r2, r2, #4
 8002b1e:	0452      	lsls	r2, r2, #17
 8002b20:	430a      	orrs	r2, r1
 8002b22:	491f      	ldr	r1, [pc, #124]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	614b      	str	r3, [r1, #20]
 8002b28:	e011      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6892      	ldr	r2, [r2, #8]
 8002b3a:	0211      	lsls	r1, r2, #8
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6912      	ldr	r2, [r2, #16]
 8002b40:	0852      	lsrs	r2, r2, #1
 8002b42:	3a01      	subs	r2, #1
 8002b44:	0652      	lsls	r2, r2, #25
 8002b46:	430a      	orrs	r2, r1
 8002b48:	4915      	ldr	r1, [pc, #84]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fd ffed 	bl	8000b38 <HAL_GetTick>
 8002b5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b60:	e009      	b.n	8002b76 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b62:	f7fd ffe9 	bl	8000b38 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d902      	bls.n	8002b76 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	73fb      	strb	r3, [r7, #15]
          break;
 8002b74:	e005      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ef      	beq.n	8002b62 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e040      	b.n	8002c38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fe30 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 faa8 	bl	8003138 <UART_SetConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e022      	b.n	8002c38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fe0e 	bl	800381c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fe95 	bl	8003960 <UART_CheckIdleState>
 8002c36:	4603      	mov	r3, r0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	f040 8081 	bne.w	8002d5c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_Transmit+0x26>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e079      	b.n	8002d5e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x38>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e072      	b.n	8002d5e <HAL_UART_Transmit+0x11e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fd ff54 	bl	8000b38 <HAL_GetTick>
 8002c90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	d108      	bne.n	8002cbe <HAL_UART_Transmit+0x7e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d104      	bne.n	8002cbe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e003      	b.n	8002cc6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002cce:	e02d      	b.n	8002d2c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fe85 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e039      	b.n	8002d5e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfc:	b292      	uxth	r2, r2
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	3302      	adds	r3, #2
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e008      	b.n	8002d1a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b292      	uxth	r2, r2
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1cb      	bne.n	8002cd0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2140      	movs	r1, #64	; 0x40
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fe51 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e005      	b.n	8002d5e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d16c      	bne.n	8002e58 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_Receive_DMA+0x22>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e065      	b.n	8002e5a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Receive_DMA+0x34>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e05e      	b.n	8002e5a <HAL_UART_Receive_DMA+0xf2>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2222      	movs	r2, #34	; 0x22
 8002dbc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02a      	beq.n	8002e1c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <HAL_UART_Receive_DMA+0xfc>)
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd2:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <HAL_UART_Receive_DMA+0x100>)
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dda:	4a24      	ldr	r2, [pc, #144]	; (8002e6c <HAL_UART_Receive_DMA+0x104>)
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de2:	2200      	movs	r2, #0
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3324      	adds	r3, #36	; 0x24
 8002df0:	4619      	mov	r1, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	461a      	mov	r2, r3
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	f7fe f895 	bl	8000f28 <HAL_DMA_Start_IT>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2210      	movs	r2, #16
 8002e08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e01e      	b.n	8002e5a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e32:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e52:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08003b4b 	.word	0x08003b4b
 8002e68:	08003bb3 	.word	0x08003bb3
 8002e6c:	08003bcf 	.word	0x08003bcf

08002e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d113      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8114 	beq.w	80030e6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
      }
      return;
 8002ec6:	e10e      	b.n	80030e6 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80d6 	beq.w	800307c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80cb 	beq.w	800307c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <HAL_UART_IRQHandler+0x9e>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <HAL_UART_IRQHandler+0xc6>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2202      	movs	r2, #2
 8002f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f2e:	f043 0204 	orr.w	r2, r3, #4
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <HAL_UART_IRQHandler+0xee>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f56:	f043 0202 	orr.w	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2208      	movs	r2, #8
 8002f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f88:	f043 0208 	orr.w	r2, r3, #8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00f      	beq.n	8002fba <HAL_UART_IRQHandler+0x14a>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8093 	beq.w	80030ea <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d004      	beq.n	8003006 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003002:	2b00      	cmp	r3, #0
 8003004:	d031      	beq.n	800306a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fd7f 	bl	8003b0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d123      	bne.n	8003062 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003028:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d013      	beq.n	800305a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003036:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <HAL_UART_IRQHandler+0x288>)
 8003038:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd ffd2 	bl	8000fe8 <HAL_DMA_Abort_IT>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003054:	4610      	mov	r0, r2
 8003056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	e00e      	b.n	8003078 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f862 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	e00a      	b.n	8003078 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f85e 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	e006      	b.n	8003078 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f85a 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003076:	e038      	b.n	80030ea <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	bf00      	nop
    return;
 800307a:	e036      	b.n	80030ea <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_UART_IRQHandler+0x232>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fe02 	bl	8003ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a0:	e026      	b.n	80030f0 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00d      	beq.n	80030c8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d017      	beq.n	80030ee <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
    }
    return;
 80030c6:	e012      	b.n	80030ee <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <HAL_UART_IRQHandler+0x280>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fdc8 	bl	8003c72 <UART_EndTransmit_IT>
    return;
 80030e2:	bf00      	nop
 80030e4:	e004      	b.n	80030f0 <HAL_UART_IRQHandler+0x280>
      return;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <HAL_UART_IRQHandler+0x280>
    return;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <HAL_UART_IRQHandler+0x280>
    return;
 80030ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	08003c47 	.word	0x08003c47

080030fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003138:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800313c:	b08a      	sub	sp, #40	; 0x28
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4313      	orrs	r3, r2
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4bb8      	ldr	r3, [pc, #736]	; (8003450 <UART_SetConfig+0x318>)
 800316e:	4013      	ands	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003176:	430b      	orrs	r3, r1
 8003178:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4aae      	ldr	r2, [pc, #696]	; (8003454 <UART_SetConfig+0x31c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a6:	4313      	orrs	r3, r2
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4aa5      	ldr	r2, [pc, #660]	; (8003458 <UART_SetConfig+0x320>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d126      	bne.n	8003216 <UART_SetConfig+0xde>
 80031c8:	4ba4      	ldr	r3, [pc, #656]	; (800345c <UART_SetConfig+0x324>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d81a      	bhi.n	800320c <UART_SetConfig+0xd4>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <UART_SetConfig+0xa4>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031fd 	.word	0x080031fd
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	08003205 	.word	0x08003205
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e105      	b.n	8003400 <UART_SetConfig+0x2c8>
 80031f4:	2302      	movs	r3, #2
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e101      	b.n	8003400 <UART_SetConfig+0x2c8>
 80031fc:	2304      	movs	r3, #4
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e0fd      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003204:	2308      	movs	r3, #8
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e0f9      	b.n	8003400 <UART_SetConfig+0x2c8>
 800320c:	2310      	movs	r3, #16
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	bf00      	nop
 8003214:	e0f4      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a91      	ldr	r2, [pc, #580]	; (8003460 <UART_SetConfig+0x328>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d138      	bne.n	8003292 <UART_SetConfig+0x15a>
 8003220:	4b8e      	ldr	r3, [pc, #568]	; (800345c <UART_SetConfig+0x324>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d82c      	bhi.n	8003288 <UART_SetConfig+0x150>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <UART_SetConfig+0xfc>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003269 	.word	0x08003269
 8003238:	08003289 	.word	0x08003289
 800323c:	08003289 	.word	0x08003289
 8003240:	08003289 	.word	0x08003289
 8003244:	08003279 	.word	0x08003279
 8003248:	08003289 	.word	0x08003289
 800324c:	08003289 	.word	0x08003289
 8003250:	08003289 	.word	0x08003289
 8003254:	08003271 	.word	0x08003271
 8003258:	08003289 	.word	0x08003289
 800325c:	08003289 	.word	0x08003289
 8003260:	08003289 	.word	0x08003289
 8003264:	08003281 	.word	0x08003281
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e0c7      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003270:	2302      	movs	r3, #2
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e0c3      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003278:	2304      	movs	r3, #4
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e0bf      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003280:	2308      	movs	r3, #8
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e0bb      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003288:	2310      	movs	r3, #16
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328e:	bf00      	nop
 8003290:	e0b6      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	; (8003464 <UART_SetConfig+0x32c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d125      	bne.n	80032e8 <UART_SetConfig+0x1b0>
 800329c:	4b6f      	ldr	r3, [pc, #444]	; (800345c <UART_SetConfig+0x324>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d011      	beq.n	80032ce <UART_SetConfig+0x196>
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d802      	bhi.n	80032b4 <UART_SetConfig+0x17c>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <UART_SetConfig+0x186>
 80032b2:	e014      	b.n	80032de <UART_SetConfig+0x1a6>
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d006      	beq.n	80032c6 <UART_SetConfig+0x18e>
 80032b8:	2b30      	cmp	r3, #48	; 0x30
 80032ba:	d00c      	beq.n	80032d6 <UART_SetConfig+0x19e>
 80032bc:	e00f      	b.n	80032de <UART_SetConfig+0x1a6>
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c4:	e09c      	b.n	8003400 <UART_SetConfig+0x2c8>
 80032c6:	2302      	movs	r3, #2
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032cc:	e098      	b.n	8003400 <UART_SetConfig+0x2c8>
 80032ce:	2304      	movs	r3, #4
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d4:	e094      	b.n	8003400 <UART_SetConfig+0x2c8>
 80032d6:	2308      	movs	r3, #8
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032dc:	e090      	b.n	8003400 <UART_SetConfig+0x2c8>
 80032de:	2310      	movs	r3, #16
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e4:	bf00      	nop
 80032e6:	e08b      	b.n	8003400 <UART_SetConfig+0x2c8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a5e      	ldr	r2, [pc, #376]	; (8003468 <UART_SetConfig+0x330>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d125      	bne.n	800333e <UART_SetConfig+0x206>
 80032f2:	4b5a      	ldr	r3, [pc, #360]	; (800345c <UART_SetConfig+0x324>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d011      	beq.n	8003324 <UART_SetConfig+0x1ec>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d802      	bhi.n	800330a <UART_SetConfig+0x1d2>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <UART_SetConfig+0x1dc>
 8003308:	e014      	b.n	8003334 <UART_SetConfig+0x1fc>
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d006      	beq.n	800331c <UART_SetConfig+0x1e4>
 800330e:	2bc0      	cmp	r3, #192	; 0xc0
 8003310:	d00c      	beq.n	800332c <UART_SetConfig+0x1f4>
 8003312:	e00f      	b.n	8003334 <UART_SetConfig+0x1fc>
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e071      	b.n	8003400 <UART_SetConfig+0x2c8>
 800331c:	2302      	movs	r3, #2
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e06d      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003324:	2304      	movs	r3, #4
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e069      	b.n	8003400 <UART_SetConfig+0x2c8>
 800332c:	2308      	movs	r3, #8
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003332:	e065      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003334:	2310      	movs	r3, #16
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333a:	bf00      	nop
 800333c:	e060      	b.n	8003400 <UART_SetConfig+0x2c8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a4a      	ldr	r2, [pc, #296]	; (800346c <UART_SetConfig+0x334>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d129      	bne.n	800339c <UART_SetConfig+0x264>
 8003348:	4b44      	ldr	r3, [pc, #272]	; (800345c <UART_SetConfig+0x324>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003356:	d014      	beq.n	8003382 <UART_SetConfig+0x24a>
 8003358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335c:	d802      	bhi.n	8003364 <UART_SetConfig+0x22c>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <UART_SetConfig+0x23a>
 8003362:	e016      	b.n	8003392 <UART_SetConfig+0x25a>
 8003364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003368:	d007      	beq.n	800337a <UART_SetConfig+0x242>
 800336a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800336e:	d00c      	beq.n	800338a <UART_SetConfig+0x252>
 8003370:	e00f      	b.n	8003392 <UART_SetConfig+0x25a>
 8003372:	2300      	movs	r3, #0
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003378:	e042      	b.n	8003400 <UART_SetConfig+0x2c8>
 800337a:	2302      	movs	r3, #2
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003380:	e03e      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003382:	2304      	movs	r3, #4
 8003384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003388:	e03a      	b.n	8003400 <UART_SetConfig+0x2c8>
 800338a:	2308      	movs	r3, #8
 800338c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003390:	e036      	b.n	8003400 <UART_SetConfig+0x2c8>
 8003392:	2310      	movs	r3, #16
 8003394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003398:	bf00      	nop
 800339a:	e031      	b.n	8003400 <UART_SetConfig+0x2c8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <UART_SetConfig+0x31c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d129      	bne.n	80033fa <UART_SetConfig+0x2c2>
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <UART_SetConfig+0x324>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d014      	beq.n	80033e0 <UART_SetConfig+0x2a8>
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ba:	d802      	bhi.n	80033c2 <UART_SetConfig+0x28a>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <UART_SetConfig+0x298>
 80033c0:	e016      	b.n	80033f0 <UART_SetConfig+0x2b8>
 80033c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c6:	d007      	beq.n	80033d8 <UART_SetConfig+0x2a0>
 80033c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033cc:	d00c      	beq.n	80033e8 <UART_SetConfig+0x2b0>
 80033ce:	e00f      	b.n	80033f0 <UART_SetConfig+0x2b8>
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e013      	b.n	8003400 <UART_SetConfig+0x2c8>
 80033d8:	2302      	movs	r3, #2
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e00f      	b.n	8003400 <UART_SetConfig+0x2c8>
 80033e0:	2304      	movs	r3, #4
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e00b      	b.n	8003400 <UART_SetConfig+0x2c8>
 80033e8:	2308      	movs	r3, #8
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e007      	b.n	8003400 <UART_SetConfig+0x2c8>
 80033f0:	2310      	movs	r3, #16
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <UART_SetConfig+0x2c8>
 80033fa:	2310      	movs	r3, #16
 80033fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a13      	ldr	r2, [pc, #76]	; (8003454 <UART_SetConfig+0x31c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	f040 80fe 	bne.w	8003608 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800340c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003410:	2b08      	cmp	r3, #8
 8003412:	d837      	bhi.n	8003484 <UART_SetConfig+0x34c>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0x2e4>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003441 	.word	0x08003441
 8003420:	08003485 	.word	0x08003485
 8003424:	08003449 	.word	0x08003449
 8003428:	08003485 	.word	0x08003485
 800342c:	08003475 	.word	0x08003475
 8003430:	08003485 	.word	0x08003485
 8003434:	08003485 	.word	0x08003485
 8003438:	08003485 	.word	0x08003485
 800343c:	0800347d 	.word	0x0800347d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003440:	f7fe fe74 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003444:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003446:	e020      	b.n	800348a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <UART_SetConfig+0x338>)
 800344a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800344c:	e01d      	b.n	800348a <UART_SetConfig+0x352>
 800344e:	bf00      	nop
 8003450:	efff69f3 	.word	0xefff69f3
 8003454:	40008000 	.word	0x40008000
 8003458:	40013800 	.word	0x40013800
 800345c:	40021000 	.word	0x40021000
 8003460:	40004400 	.word	0x40004400
 8003464:	40004800 	.word	0x40004800
 8003468:	40004c00 	.word	0x40004c00
 800346c:	40005000 	.word	0x40005000
 8003470:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003474:	f7fe fdc4 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8003478:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800347a:	e006      	b.n	800348a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800347c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003480:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003482:	e002      	b.n	800348a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	76fb      	strb	r3, [r7, #27]
        break;
 8003488:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 81b9 	beq.w	8003804 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d305      	bcc.n	80034ae <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d902      	bls.n	80034b4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	76fb      	strb	r3, [r7, #27]
 80034b2:	e1a7      	b.n	8003804 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80034b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	f200 8092 	bhi.w	80035e2 <UART_SetConfig+0x4aa>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0x38c>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	080035e3 	.word	0x080035e3
 80034cc:	08003537 	.word	0x08003537
 80034d0:	080035e3 	.word	0x080035e3
 80034d4:	0800356b 	.word	0x0800356b
 80034d8:	080035e3 	.word	0x080035e3
 80034dc:	080035e3 	.word	0x080035e3
 80034e0:	080035e3 	.word	0x080035e3
 80034e4:	080035b9 	.word	0x080035b9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80034e8:	f7fe fe20 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 80034ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4619      	mov	r1, r3
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	f04f 0400 	mov.w	r4, #0
 80034fe:	0214      	lsls	r4, r2, #8
 8003500:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003504:	020b      	lsls	r3, r1, #8
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6852      	ldr	r2, [r2, #4]
 800350a:	0852      	lsrs	r2, r2, #1
 800350c:	4611      	mov	r1, r2
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	eb13 0b01 	adds.w	fp, r3, r1
 8003516:	eb44 0c02 	adc.w	ip, r4, r2
 800351a:	4658      	mov	r0, fp
 800351c:	4661      	mov	r1, ip
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f04f 0400 	mov.w	r4, #0
 8003526:	461a      	mov	r2, r3
 8003528:	4623      	mov	r3, r4
 800352a:	f7fc fe4d 	bl	80001c8 <__aeabi_uldivmod>
 800352e:	4603      	mov	r3, r0
 8003530:	460c      	mov	r4, r1
 8003532:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003534:	e058      	b.n	80035e8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	f04f 0400 	mov.w	r4, #0
 8003540:	49ae      	ldr	r1, [pc, #696]	; (80037fc <UART_SetConfig+0x6c4>)
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	eb13 0b01 	adds.w	fp, r3, r1
 800354a:	eb44 0c02 	adc.w	ip, r4, r2
 800354e:	4658      	mov	r0, fp
 8003550:	4661      	mov	r1, ip
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f04f 0400 	mov.w	r4, #0
 800355a:	461a      	mov	r2, r3
 800355c:	4623      	mov	r3, r4
 800355e:	f7fc fe33 	bl	80001c8 <__aeabi_uldivmod>
 8003562:	4603      	mov	r3, r0
 8003564:	460c      	mov	r4, r1
 8003566:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003568:	e03e      	b.n	80035e8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800356a:	f7fe fd49 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 800356e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4619      	mov	r1, r3
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	f04f 0400 	mov.w	r4, #0
 8003580:	0214      	lsls	r4, r2, #8
 8003582:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003586:	020b      	lsls	r3, r1, #8
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6852      	ldr	r2, [r2, #4]
 800358c:	0852      	lsrs	r2, r2, #1
 800358e:	4611      	mov	r1, r2
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	eb13 0b01 	adds.w	fp, r3, r1
 8003598:	eb44 0c02 	adc.w	ip, r4, r2
 800359c:	4658      	mov	r0, fp
 800359e:	4661      	mov	r1, ip
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	461a      	mov	r2, r3
 80035aa:	4623      	mov	r3, r4
 80035ac:	f7fc fe0c 	bl	80001c8 <__aeabi_uldivmod>
 80035b0:	4603      	mov	r3, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035b6:	e017      	b.n	80035e8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	f04f 0400 	mov.w	r4, #0
 80035c2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80035c6:	f144 0100 	adc.w	r1, r4, #0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	461a      	mov	r2, r3
 80035d4:	4623      	mov	r3, r4
 80035d6:	f7fc fdf7 	bl	80001c8 <__aeabi_uldivmod>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035e0:	e002      	b.n	80035e8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	76fb      	strb	r3, [r7, #27]
            break;
 80035e6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ee:	d308      	bcc.n	8003602 <UART_SetConfig+0x4ca>
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f6:	d204      	bcs.n	8003602 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e100      	b.n	8003804 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	76fb      	strb	r3, [r7, #27]
 8003606:	e0fd      	b.n	8003804 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003610:	f040 8084 	bne.w	800371c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003618:	2b08      	cmp	r3, #8
 800361a:	d85f      	bhi.n	80036dc <UART_SetConfig+0x5a4>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <UART_SetConfig+0x4ec>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003649 	.word	0x08003649
 8003628:	08003669 	.word	0x08003669
 800362c:	08003689 	.word	0x08003689
 8003630:	080036dd 	.word	0x080036dd
 8003634:	080036a5 	.word	0x080036a5
 8003638:	080036dd 	.word	0x080036dd
 800363c:	080036dd 	.word	0x080036dd
 8003640:	080036dd 	.word	0x080036dd
 8003644:	080036c5 	.word	0x080036c5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003648:	f7fe fd70 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800364c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	005a      	lsls	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	441a      	add	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	b29b      	uxth	r3, r3
 8003664:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003666:	e03c      	b.n	80036e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003668:	f7fe fd76 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 800366c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	005a      	lsls	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	441a      	add	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003686:	e02c      	b.n	80036e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003692:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6852      	ldr	r2, [r2, #4]
 800369a:	fbb3 f3f2 	udiv	r3, r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036a2:	e01e      	b.n	80036e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a4:	f7fe fcac 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 80036a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	b29b      	uxth	r3, r3
 80036c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036c2:	e00e      	b.n	80036e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80036da:	e002      	b.n	80036e2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	76fb      	strb	r3, [r7, #27]
        break;
 80036e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d916      	bls.n	8003716 <UART_SetConfig+0x5de>
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ee:	d212      	bcs.n	8003716 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f023 030f 	bic.w	r3, r3, #15
 80036f8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	b29a      	uxth	r2, r3
 8003706:	89fb      	ldrh	r3, [r7, #14]
 8003708:	4313      	orrs	r3, r2
 800370a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	89fa      	ldrh	r2, [r7, #14]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e076      	b.n	8003804 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	76fb      	strb	r3, [r7, #27]
 800371a:	e073      	b.n	8003804 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800371c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003720:	2b08      	cmp	r3, #8
 8003722:	d85c      	bhi.n	80037de <UART_SetConfig+0x6a6>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x5f4>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003751 	.word	0x08003751
 8003730:	0800376f 	.word	0x0800376f
 8003734:	0800378d 	.word	0x0800378d
 8003738:	080037df 	.word	0x080037df
 800373c:	080037a9 	.word	0x080037a9
 8003740:	080037df 	.word	0x080037df
 8003744:	080037df 	.word	0x080037df
 8003748:	080037df 	.word	0x080037df
 800374c:	080037c7 	.word	0x080037c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003750:	f7fe fcec 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003754:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	085a      	lsrs	r2, r3, #1
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800376c:	e03a      	b.n	80037e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800376e:	f7fe fcf3 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8003772:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	085a      	lsrs	r2, r3, #1
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	b29b      	uxth	r3, r3
 8003788:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800378a:	e02b      	b.n	80037e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003796:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6852      	ldr	r2, [r2, #4]
 800379e:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037a6:	e01d      	b.n	80037e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a8:	f7fe fc2a 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 80037ac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085a      	lsrs	r2, r3, #1
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	441a      	add	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037c4:	e00e      	b.n	80037e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037dc:	e002      	b.n	80037e4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	76fb      	strb	r3, [r7, #27]
        break;
 80037e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d90a      	bls.n	8003800 <UART_SetConfig+0x6c8>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f0:	d206      	bcs.n	8003800 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	e003      	b.n	8003804 <UART_SetConfig+0x6cc>
 80037fc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003810:	7efb      	ldrb	r3, [r7, #27]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800381c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01a      	beq.n	8003932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800391a:	d10a      	bne.n	8003932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800396e:	f7fd f8e3 	bl	8000b38 <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d10e      	bne.n	80039a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003982:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f82a 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e020      	b.n	80039e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d10e      	bne.n	80039cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f814 	bl	80039ea <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e00a      	b.n	80039e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4613      	mov	r3, r2
 80039f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fa:	e05d      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d059      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a04:	f7fd f898 	bl	8000b38 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d302      	bcc.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11b      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e042      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02b      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6e:	d123      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e00f      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d092      	beq.n	80039fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003af6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b20:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11e      	bne.n	8003ba4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b7c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7fc fddf 	bl	8000768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff faa5 	bl	8003110 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d109      	bne.n	8003c0a <UART_DMAError+0x3c>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b21      	cmp	r3, #33	; 0x21
 8003bfa:	d106      	bne.n	8003c0a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003c04:	6978      	ldr	r0, [r7, #20]
 8003c06:	f7ff ff6b 	bl	8003ae0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d109      	bne.n	8003c2c <UART_DMAError+0x5e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b22      	cmp	r3, #34	; 0x22
 8003c1c:	d106      	bne.n	8003c2c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003c26:	6978      	ldr	r0, [r7, #20]
 8003c28:	f7ff ff6f 	bl	8003b0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c30:	f043 0210 	orr.w	r2, r3, #16
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c38:	6978      	ldr	r0, [r7, #20]
 8003c3a:	f7ff fa73 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c3e:	bf00      	nop
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff fa5d 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c88:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fa30 	bl	80030fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <__libc_init_array>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	4e0d      	ldr	r6, [pc, #52]	; (8003cf0 <__libc_init_array+0x38>)
 8003cbc:	4c0d      	ldr	r4, [pc, #52]	; (8003cf4 <__libc_init_array+0x3c>)
 8003cbe:	1ba4      	subs	r4, r4, r6
 8003cc0:	10a4      	asrs	r4, r4, #2
 8003cc2:	2500      	movs	r5, #0
 8003cc4:	42a5      	cmp	r5, r4
 8003cc6:	d109      	bne.n	8003cdc <__libc_init_array+0x24>
 8003cc8:	4e0b      	ldr	r6, [pc, #44]	; (8003cf8 <__libc_init_array+0x40>)
 8003cca:	4c0c      	ldr	r4, [pc, #48]	; (8003cfc <__libc_init_array+0x44>)
 8003ccc:	f000 f820 	bl	8003d10 <_init>
 8003cd0:	1ba4      	subs	r4, r4, r6
 8003cd2:	10a4      	asrs	r4, r4, #2
 8003cd4:	2500      	movs	r5, #0
 8003cd6:	42a5      	cmp	r5, r4
 8003cd8:	d105      	bne.n	8003ce6 <__libc_init_array+0x2e>
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ce0:	4798      	blx	r3
 8003ce2:	3501      	adds	r5, #1
 8003ce4:	e7ee      	b.n	8003cc4 <__libc_init_array+0xc>
 8003ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cea:	4798      	blx	r3
 8003cec:	3501      	adds	r5, #1
 8003cee:	e7f2      	b.n	8003cd6 <__libc_init_array+0x1e>
 8003cf0:	08003d78 	.word	0x08003d78
 8003cf4:	08003d78 	.word	0x08003d78
 8003cf8:	08003d78 	.word	0x08003d78
 8003cfc:	08003d7c 	.word	0x08003d7c

08003d00 <memset>:
 8003d00:	4402      	add	r2, r0
 8003d02:	4603      	mov	r3, r0
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memset+0xa>
 8003d08:	4770      	bx	lr
 8003d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0e:	e7f9      	b.n	8003d04 <memset+0x4>

08003d10 <_init>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr

08003d1c <_fini>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr
